{"id": "1504.06580", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Apr-2015", "title": "Classifying Relations by Ranking with Convolutional Neural Networks", "abstract": "Relation classification is an important semantic processing task whose state-of-the-art systems still rely on the use of costly handcrafted features. In this work we tackle the relation classification task using a convolutional neural network that performs classification by ranking (CR-CNN). We propose a new pairwise ranking loss function that makes it easy to reduce the impact of artificial classes on the distribution of the task (GOV) in a simple way by increasing it by decreasing the total number of features per individual task by 1.5%.\n\n\nThe first step is to remove all the redundant features in a class by removing the need for more of the redundant features that make it difficult to get rid of the redundant features. In this step we are also introducing a new way of doing so:\nclass LinearState_State_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_", "histories": [["v1", "Fri, 24 Apr 2015 17:50:33 GMT  (57kb,D)", "https://arxiv.org/abs/1504.06580v1", "Accepted as a long paper in the 53rd Annual Meeting of the Association for Computational Linguistics (ACL 2015)"], ["v2", "Sun, 24 May 2015 13:58:05 GMT  (55kb,D)", "http://arxiv.org/abs/1504.06580v2", "Accepted as a long paper in the 53rd Annual Meeting of the Association for Computational Linguistics (ACL 2015)"]], "COMMENTS": "Accepted as a long paper in the 53rd Annual Meeting of the Association for Computational Linguistics (ACL 2015)", "reviews": [], "SUBJECTS": "cs.CL cs.LG cs.NE", "authors": ["c\u00edcero nogueira dos santos", "bing xiang", "bowen zhou"], "accepted": true, "id": "1504.06580"}, "pdf": {"name": "1504.06580.pdf", "metadata": {"source": "CRF", "title": "Classifying Relations by Ranking with Convolutional Neural Networks", "authors": ["C\u0131\u0301cero Nogueira dos Santos", "Bing Xiang", "Bowen Zhou"], "emails": ["cicerons@br.ibm.com", "bingxia@us.ibm.com", "zhou@us.ibm.com"], "sections": [{"heading": "1 Introduction", "text": "Relation classification is an important Natural Language Processing (NLP) task which is normally used as an intermediate step in many complex NLP applications such as question-answering and automatic knowledge base construction. Since the last decade there has been increasing interest in applying machine learning approaches to this task (Zhang, 2004; Qian et al., 2009; Rink and Harabagiu, 2010). One reason is the availability of benchmark datasets such as the SemEval-2010\ntask 8 dataset (Hendrickx et al., 2010), which encodes the task of classifying the relationship between two nominals marked in a sentence. The following sentence contains an example of the Component-Whole relation between the nominals \u201cintroduction\u201d and \u201cbook\u201d.\nThe [introduction]e1 in the [book]e2 is a\nsummary of what is in the text.\nSome recent work on relation classification has focused on the use of deep neural networks with the aim of reducing the number of handcrafted features (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014). However, in order to achieve state-ofthe-art results these approaches still use some features derived from lexical resources such as WordNet or NLP tools such as dependency parsers and named entity recognizers (NER).\nIn this work, we propose a new convolutional neural network (CNN), which we name Classification by Ranking CNN (CR-CNN), to tackle the relation classification task. The proposed network learns a distributed vector representation for each relation class. Given an input text segment, the network uses a convolutional layer to produce a distributed vector representation of the text and compares it to the class representations in order to produce a score for each class. We propose a new pairwise ranking loss function that makes it easy to reduce the impact of artificial classes. We perform an extensive number of experiments using the the SemEval-2010 Task 8 dataset. Using CRCNN, and without the need for any costly handcrafted feature, we outperform the state-of-the-art for this dataset. Our experimental results are evidence that: (1) CR-CNN is more effective than CNN followed by a softmax classifier; (2) omitting the representation of the artificial class Other improves both precision and recall; and (3) using only word embeddings as input features is enough to achieve state-of-the-art results if we consider only the text between the two target nominals. ar X iv :1 50 4. 06 58 0v 2\n[ cs\n.C L\n] 2\n4 M\nay 2\n01 5\nThe remainder of the paper is structured as follows. Section 2 details the proposed neural network. In Section 3, we present details about the setup of experimental evaluation, and then describe the results in Section 4. In Section 5, we discuss previous work in deep neural networks for relation classification and for other NLP tasks. Section 6 presents our conclusions."}, {"heading": "2 The Proposed Neural Network", "text": "Given a sentence x and two target nouns, CR-CNN computes a score for each relation class c \u2208 C. For each class c \u2208 C, the network learns a distributed vector representation which is encoded as a column in the class embedding matrix W classes. As detailed in Figure 1, the only input for the network is the tokenized text string of the sentence. In the first step, CR-CNN transforms words into realvalued feature vectors. Next, a convolutional layer is used to construct a distributed vector representations of the sentence, rx. Finally, CR-CNN computes a score for each relation class c \u2208 C by performing a dot product between r\u1d40x and W classes."}, {"heading": "2.1 Word Embeddings", "text": "The first layer of the network transforms words into representations that capture syntactic and semantic information about the words. Given a sentence x consisting of N words x = {w1, w2, ..., wN}, every wordwn is converted into a real-valued vector rwn . Therefore, the input to the next layer is a sequence of real-valued vectors embx = {rw1 , rw2 , ..., rwN }\nWord representations are encoded by column vectors in an embedding matrixWwrd \u2208 Rdw\u00d7|V |, where V is a fixed-sized vocabulary. Each column Wwrdi \u2208 Rd w corresponds to the word embedding of the i-th word in the vocabulary. We transform a word w into its word embedding rw by using the matrix-vector product:\nrw =Wwrdvw\nwhere vw is a vector of size |V | which has value 1 at index w and zero in all other positions. The matrix Wwrd is a parameter to be learned, and the size of the word embedding dw is a hyperparameter to be chosen by the user."}, {"heading": "2.2 Word Position Embeddings", "text": "In the task of relation classification, information that is needed to determine the class of a relation\nbetween two target nouns normally comes from words which are close to the target nouns. Zeng et al. (2014) propose the use of word position embeddings (position features) which help the CNN by keeping track of how close words are to the target nouns. These features are similar to the position features proposed by Collobert et al. (2011) for the Semantic Role Labeling task.\nIn this work we also experiment with the word position embeddings (WPE) proposed by Zeng et al. (2014). The WPE is derived from the relative distances of the current word to the target noun1 and noun2. For instance, in the sentence shown in Figure 1, the relative distances of left to car and plant are -1 and 2, respectively. As in (Collobert et al., 2011), each relative distance is mapped to a vector of dimension dwpe, which is initialized with random numbers. dwpe is a hyperparameter of the network. Given the vectorswp1 andwp2 for the word w with respect to the targets noun1 and noun2, the position embedding of w is given by\nthe concatenation of these two vectors, wpew = [wp1, wp2].\nIn the experiments where word position embeddings are used, the word embedding and the word position embedding of each word are concatenated to form the input for the convolutional layer, embx = {[rw1 , wpew1 ], [rw2 , wpew2 ], ..., [rwN , wpewN ]}."}, {"heading": "2.3 Sentence Representation", "text": "The next step in the NN consists in creating the distributed vector representation rx for the input sentence x. The main challenges in this step are the sentence size variability and the fact that important information can appear at any position in the sentence. In recent work, convolutional approaches have been used to tackle these issues when creating representations for text segments of different sizes (Zeng et al., 2014; Hu et al., 2014; dos Santos and Gatti, 2014) and characterlevel representations of words of different sizes (dos Santos and Zadrozny, 2014). Here, we use a convolutional layer to compute distributed vector representations of the sentence. The convolutional layer first produces local features around each word in the sentence. Then, it combines these local features using a max operation to create a fixed-sized vector for the input sentence.\nGiven a sentence x, the convolutional layer applies a matrix-vector operation to each window of size k of successive windows in embx = {rw1 , rw2 , ..., rwN }. Let us define the vector zn \u2208 Rdwk as the concatenation of a sequence of k word embeddings, centralized in the n-th word:\nzn = (r wn\u2212(k\u22121)/2 , ..., rwn+(k\u22121)/2)\u1d40\nIn order to overcome the issue of referencing words with indices outside of the sentence boundaries, we augment the sentence with a special padding token replicated k \u2212 1 2\ntimes at the beginning and the end.\nThe convolutional layer computes the j-th element of the vector rx \u2208 Rd c as follows:\n[rx]j = max 1<n<N\n[ f ( W 1zn + b 1 )] j\nwhere W 1 \u2208 Rdc\u00d7dwk is the weight matrix of the convolutional layer and f is the hyperbolic tangent function. The same matrix is used to extract local features around each word window of the given\nsentence. The fixed-sized distributed vector representation for the sentence is obtained by using the max over all word windows. Matrix W 1 and vector b1 are parameters to be learned. The number of convolutional units dc, and the size of the word context window k are hyperparameters to be chosen by the user. It is important to note that dc corresponds to the size of the sentence representation."}, {"heading": "2.4 Class embeddings and Scoring", "text": "Given the distributed vector representation of the input sentence x, the network with parameter set \u03b8 computes the score for a class label c \u2208 C by using the dot product\ns\u03b8(x)c = r \u1d40 x[W classes]c\nwhere W classes is an embedding matrix whose columns encode the distributed vector representations of the different class labels, and [W classes]c is the column vector that contains the embedding of the class c. Note that the number of dimensions in each class embedding must be equal to the size of the sentence representation, which is defined by dc. The embedding matrix W classes is a parameter to be learned by the network. It is initialized by randomly sampling each value from an uniform\ndistribution: U (\u2212r, r), where r = \u221a\n6\n|C|+ dc ."}, {"heading": "2.5 Training Procedure", "text": "Our network is trained by minimizing a pairwise ranking loss function over the training set D. The input for each training round is a sentence x and two different class labels y+ \u2208 C and c\u2212 \u2208 C, where y+ is a correct class label for x and c\u2212 is not. Let s\u03b8(x)y+ and s\u03b8(x)c\u2212 be respectively the scores for class labels y+ and c\u2212 generated by the network with parameter set \u03b8. We propose a new logistic loss function over these scores in order to train CR-CNN:\nL = log(1 + exp(\u03b3(m+ \u2212 s\u03b8(x)y+))\n+ log(1 + exp(\u03b3(m\u2212 + s\u03b8(x)c\u2212)) (1)\nwhere m+ and m\u2212 are margins and \u03b3 is a scaling factor that magnifies the difference between the score and the margin and helps to penalize more on the prediction errors. The first term in the right side of Equation 1 decreases as the score s\u03b8(x)y+ increases. The second term in the right\nside decreases as the score s\u03b8(x)c\u2212 decreases. Training CR-CNN by minimizing the loss function in Equation 1 has the effect of training to give scores greater than m+ for the correct class and (negative) scores smaller than \u2212m\u2212 for incorrect classes. In our experiments we set \u03b3 to 2, m+ to 2.5 and m\u2212 to 0.5. We use L2 regularization by adding the term \u03b2\u2016\u03b8\u20162 to Equation 1. In our experiments we set \u03b2 to 0.001. We use stochastic gradient descent (SGD) to minimize the loss function with respect to \u03b8.\nLike some other ranking approaches that only update two classes/examples at every training round (Weston et al., 2011; Gao et al., 2014), we can efficiently train the network for tasks which have a very large number of classes. This is an advantage over softmax classifiers.\nOn the other hand, sampling informative negative classes/examples can have a significant impact in the effectiveness of the learned model. In the case of our loss function, more informative negative classes are the ones with a score larger than \u2212m\u2212. The number of classes in the relation classification dataset that we use in our experiments is small. Therefore, in our experiments, given a sentence x with class label y+, the incorrect class c\u2212 that we choose to perform a SGD step is the one with the highest score among all incorrect classes c\u2212 = argmax\nc \u2208 C; c 6=y+ s\u03b8(x)c.\nFor tasks where the number of classes is large, we can fix a number of negative classes to be considered at each example and select the one with the largest score to perform a gradient step. This approach is similar to the one used by Weston et al. (2014) to select negative examples.\nWe use the backpropagation algorithm to compute gradients of the network. In our experiments, we implement the CR-CNN architecture and the backpropagation algorithm using Theano (Bergstra et al., 2010).\n2.6 Special Treatment of Artificial Classes\nIn this work, we consider a class as artificial if it is used to group items that do not belong to any of the actual classes. An example of artificial class is the class Other in the SemEval 2010 relation classification task. In this task, the artificial class Other is used to indicate that the relation between two nominals does not belong to any of the nine relation classes of interest. Therefore, the class Other is very noisy since it groups many different types\nof relations that may not have much in common. An important characteristic of CR-CNN is that it makes it easy to reduce the effect of artificial classes by omitting their embeddings. If the embedding of a class label c is omitted, it means that the embedding matrix W classes does not contain a column vector for c. One of the main benefits from this strategy is that the learning process focuses on the \u201cnatural\u201d classes only. Since the embedding of the artificial class is omitted, it will not influence the prediction step, i.e., CR-CNN does not produce a score for the artificial class.\nIn our experiments with the SemEval-2010 relation classification task, when training with a sentence x whose class label y = Other, the first term in the right side of Equation 1 is set to zero. During prediction time, a relation is classified as Other only if all actual classes have negative scores. Otherwise, it is classified with the class which has the largest score."}, {"heading": "3 Experimental Setup", "text": ""}, {"heading": "3.1 Dataset and Evaluation Metric", "text": "We use the SemEval-2010 Task 8 dataset to perform our experiments. This dataset contains 10,717 examples annotated with 9 different relation types and an artificial relation Other, which is used to indicate that the relation in the example does not belong to any of the nine main relation types. The nine relations are Cause-Effect, Component-Whole, Content-Container, EntityDestination, Entity-Origin, Instrument-Agency, Member-Collection, Message-Topic and ProductProducer. Each example contains a sentence marked with two nominals e1 and e2, and the task consists of predicting the relation between the two nominals taking into consideration the directionality. That means that the relation CauseEffect(e1,e2) is different from the relation CauseEffect(e2,e1), as shown in the examples below. More information about this dataset can be found in (Hendrickx et al., 2010).\nThe [war]e1 resulted in other collateral imperial [conquests]e2 as well. \u21d2 Cause-Effect(e1,e2) The [burst]e1 has been caused by water hammer\n[pressure]e2. \u21d2 Cause-Effect(e2,e1)\nThe SemEval-2010 Task 8 dataset is already partitioned into 8,000 training instances and 2,717 test instances. We score our systems by using the SemEval-2010 Task 8 official scorer, which computes the macro-averaged F1-scores for the nine\nactual relations (excluding Other) and takes the directionality into consideration."}, {"heading": "3.2 Word Embeddings Initialization", "text": "The word embeddings used in our experiments are initialized by means of unsupervised pre-training. We perform pre-training using the skip-gram NN architecture (Mikolov et al., 2013) available in the word2vec tool. We use the December 2013 snapshot of the English Wikipedia corpus to train word embeddings with word2vec. We preprocess the Wikipedia text using the steps described in (dos Santos and Gatti, 2014): (1) removal of paragraphs that are not in English; (2) substitution of non-western characters for a special character; (3) tokenization of the text using the tokenizer available with the Stanford POS Tagger (Toutanova et al., 2003); (4) removal of sentences that are less than 20 characters long (including white spaces) or have less than 5 tokens. (5) lowercase all words and substitute each numerical digit by a 0. The resulting clean corpus contains about 1.75 billion tokens."}, {"heading": "3.3 Neural Network Hyper-parameter", "text": "We use 4-fold cross-validation to tune the neural network hyperparameters. Learning rates in the range of 0.03 and 0.01 give relatively similar results. Best results are achieved using between 10 and 15 training epochs, depending on the CR-CNN configuration. In Table 1, we show the selected hyperparameter values. Additionally, we use a learning rate schedule that decreases the learning rate \u03bb according to the training epoch t. The learning rate for epoch t, \u03bbt, is computed using the equation: \u03bbt = \u03bb\nt ."}, {"heading": "4 Experimental Results", "text": ""}, {"heading": "4.1 Word Position Embeddings and Input Text Span", "text": "In the experiments discussed in this section we assess the impact of using word position embeddings (WPE) and also propose a simpler alternative approach that is almost as effective as WPEs. The main idea behind the use of WPEs in relation classification task is to give some hint to the convolutional layer of how close a word is to the target nouns, based on the assumption that closer words have more impact than distant words.\nHere we hypothesize that most of the information needed to classify the relation appear between the two target nouns. Based on this hypothesis, we perform an experiment where the input for the convolutional layer consists of the word embeddings of the word sequence {we1 \u2212 1, ..., we2 +1} where e1 and e2 correspond to the positions of the first and the second target nouns, respectively.\nIn Table 2 we compare the results of different CR-CNN configurations. The first column indicates whether the full sentence was used (Yes) or whether the text span between the target nouns was used (No). The second column informs if the WPEs were used or not. It is clear that the use of WPEs is essential when the full sentence is used, since F1 jumps from 74.3 to 84.1. This effect of WPEs is reported by (Zeng et al., 2014). On the other hand, when using only the text span between the target nouns, the impact of WPE is much smaller. With this strategy, we achieve a F1 of 82.8 using only word embeddings as input, which is a result as good as the previous state-of-the-art F1 of 83.0 reported in (Yu et al., 2014) for the SemEval2010 Task 8 dataset. This experimental result also suggests that, in this task, the CNN works better for short texts.\nAll experiments reported in the next sections use CR-CNN with full sentence and WPEs.\n4.2 Impact of Omitting the Embedding of the artificial class Other\nIn this experiment we assess the impact of omitting the embedding of the class Other. As we mentioned above, this class is very noisy since it groups many different infrequent relation types. Its embedding is difficult to define and therefore brings noise into the classification process of the natural classes. In Table 3 we present the results comparing the use and omission of embedding for the class Other. The two first lines of results present the official F1, which does not take into account the results for the class Other. We can see that by omitting the embedding of the class Other both precision and recall for the other classes improve, which results in an increase of 1.4 in the F1. These results suggest that the strategy we use in CR-CNN to avoid the noise of artificial classes is effective.\nIn the two last lines of Table 3 we present the results for the class Other. We can note that while the recall for the cases classified as Other remains 48.7, the precision significantly decreases from 60.1 to 52.0 when the embedding of the class Other is not used. That means that more cases from natural classes (all) are now been classified as Other. However, as both the precision and the recall of the natural classes increase, the cases that are now classified as Other must be cases that are also wrongly classified when the embedding of the class Other is used."}, {"heading": "4.3 CR-CNN versus CNN+Softmax", "text": "In this section we report experimental results comparing CR-CNN with CNN+Softmax. In order to do a fair comparison, we\u2019ve implemented a CNN+Softmax and trained it with the same data, word embeddings and WPEs used in CR-CNN. Concretely, our CNN+Softmax consists in getting the output of the convolutional layer, which is the vector rx in Figure 1, and giving it as input for\na softmax classifier. We tune the parameters of CNN+Softmax by using a 4-fold cross-validation with the training set. Compared to the hyperparameter values for CR-CNN presented in Table 1, the only difference for CNN+Softmax is the number of convolutional units dc, which is set to 400.\nIn Table 4 we compare the results of CRCNN and CNN+Softmax. CR-CNN outperforms CNN+Softmax in both precision and recall, and improves the F1 by 1.6. The third line in Table 4 shows the result reported by Zeng et al. (2014) when only word embeddings and WPEs are used as input to the network (similar to our CNN+Softmax). We believe that the word embeddings employed by them is the main reason their result is much worse than that of CNN+Softmax. We use word embeddings of size 400 while they use word embeddings of size 50, which were trained using much less unlabeled data than we did."}, {"heading": "4.4 Comparison with the State-of-the-art", "text": "In Table 5 we compare CR-CNN results with results recently published for the SemEval-2010 Task 8 dataset. Rink and Harabagiu (2010) present a support vector machine (SVM) classifier that is fed with a rich (traditional) feature set. It obtains an F1 of 82.2, which was the best result at SemEval-2010 Task 8. Socher et al. (2012) present results for a recursive neural network (RNN) that employs a matrix-vector representation to every node in a parse tree in order to compose the distributed vector representation for the complete sentence. Their method is named the matrix-vector recursive neural network (MVRNN) and achieves a F1 of 82.4 when POS, NER and WordNet features are used. In (Zeng et al., 2014), the authors present results for a CNN+Softmax classifier which employs lexical and sentencelevel features. Their classifier achieves a F1 of 82.7 when adding a handcrafted feature based on the WordNet. Yu et al. (2014) present the Factor-\nbased Compositional Embedding Model (FCM), which achieves a F1 of 83.0 by deriving sentencelevel and substructure embeddings from word embeddings utilizing dependency trees and named entities.\nAs we can see in the last line of Table 5, CRCNN using the full sentence, word embeddings and WPEs outperforms all previous reported results and reaches a new state-of-the-art F1 of 84.1. This is a remarkable result since we do not use any complicated features that depend on external lexical resources such as WordNet and NLP tools such as named entity recognizers (NERs) and dependency parsers.\nWe can see in Table 5 that CR-CNN1 also achieves the best result among the systems that use word embeddings as the only input features. The closest result (80.6), which is produced by the FCM system of Yu et al. (2014), is 2.2 F1 points behind CR-CNN result (82.8)."}, {"heading": "4.5 Most Representative Trigrams for each Relation", "text": "In Table 6, for each relation type we present the five trigrams in the test set which contributed the most for scoring correctly classified examples. Remember that in CR-CNN, given a sentence x the score for the class c is computed by s\u03b8(x)c = r\u1d40x[W classes]c. In order to compute the most representative trigram of a sentence x, we trace back each position in rx to find the trigram responsible for it. For each trigram t, we compute its particular contribution for the score by summing the terms in score that use positions in rx that trace back to t. The most representative trigram in x is the one with the largest contribution to the improvement of the score. In order to create the results presented in Table 6, we rank the trigrams which were selected as the most representative of any sentence in decreasing order of contribution value. If a trigram appears as the largest contributor for more than one sentence, its contribuition value becomes the sum of its contribution for each sentence.\nWe can see in Table 6 that for most classes, the trigrams that contributed the most to increase the score are indeed very informative regarding the relation type. As expected, different trigrams play an important role depending on the direction of the relation. For instance, the most informative tri-\n1This is the result using only the text span between the target nouns.\ngram for Entity-Origin(e1,e2) is \u201caway from the\u201d, while reverse direction of the relation, EntityOrigin(e2,e1) or Origin-Entity, has \u201cthe source of\u201d as the most informative trigram. These results are a step towards the extraction of meaningful knowledge from models produced by CNNs."}, {"heading": "5 Related Work", "text": "Over the years, various approaches have been proposed for relation classification (Zhang, 2004; Qian et al., 2009; Hendrickx et al., 2010; Rink and Harabagiu, 2010). Most of them treat it as a multiclass classification problem and apply a variety of machine learning techniques to the task in order to achieve a high accuracy.\nRecently, deep learning (Bengio, 2009) has become an attractive area for multiple applications, including computer vision, speech recognition and natural language processing. Among the different deep learning strategies, convolutional neural networks have been successfully applied to different NLP task such as part-of-speech tagging (dos Santos and Zadrozny, 2014), sentiment analysis (Kim, 2014; dos Santos and Gatti, 2014), question classification (Kalchbrenner et al., 2014), semantic role labeling (Collobert et al., 2011), hashtag prediction (Weston et al., 2014), sentence completion and response matching (Hu et al., 2014).\nSome recent work on deep learning for relation classification include Socher et al. (2012), Zeng et al. (2014) and Yu et al. (2014). In (Socher et al., 2012), the authors tackle relation classification using a recursive neural network (RNN) that assigns a matrix-vector representation to every node in a parse tree. The representation for the complete sentence is computed bottom-up by recursively combining the words according to the syntactic structure of the parse tree Their method is named the matrix-vector recursive neural network (MVRNN).\nZeng et al. (2014) propose an approach for relation classification where sentence-level features are learned through a CNN, which has word embedding and position features as its input. In parallel, lexical features are extracted according to given nouns. Then sentence-level and lexical features are concatenated into a single vector and fed into a softmax classifier for prediction. This approach achieves state-of-the-art performance on the SemEval-2010 Task 8 dataset.\nYu et al. (2014) propose a Factor-based Com-\npositional Embedding Model (FCM) by deriving sentence-level and substructure embeddings from word embeddings, utilizing dependency trees and named entities. It achieves slightly higher accuracy on the same dataset than (Zeng et al., 2014), but only when syntactic information is used.\nThere are two main differences between the approach proposed in this paper and the ones proposed in (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014): (1) CR-CNN uses a pair-wise ranking method, while other approaches apply multiclass classification by using the softmax function on the top of the CNN/RNN; and (2) CR-CNN employs an effective method to deal with artificial classes by omitting their embeddings, while other approaches treat all classes equally."}, {"heading": "6 Conclusion", "text": "In this work we tackle the relation classification task using a CNN that performs classification by ranking. The main contributions of this work are: (1) the definition of a new state-of-the-art for the SemEval-2010 Task 8 dataset without using any costly handcrafted features; (2) the proposal of a new CNN for classification that uses class embeddings and a new rank loss function; (3) an effective method to deal with artificial classes by omitting their embeddings in CR-CNN; (4) the demonstration that using only the text between target nominals is almost as effective as using WPEs; and (5) a method to extract from the CR-CNN model the most representative contexts of each relation type. Although we apply CR-CNN to relation classification, this method can be used for any classification task."}, {"heading": "Acknowledgments", "text": "The authors would like to thank Nina Wacholder for her valuable suggestions to improve the final version of the paper."}], "references": [{"title": "Learning deep architectures for ai", "author": ["Yoshua Bengio"], "venue": "Foundations and Trends Machine Learning,", "citeRegEx": "Bengio.,? \\Q2009\\E", "shortCiteRegEx": "Bengio.", "year": 2009}, {"title": "Theano: a CPU and GPU math expression compiler", "author": ["Olivier Breuleux", "Fr\u00e9d\u00e9ric Bastien", "Pascal Lamblin", "Razvan Pascanu", "Guillaume Desjardins", "Joseph Turian", "David WardeFarley", "Yoshua Bengio"], "venue": null, "citeRegEx": "Bergstra et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Bergstra et al\\.", "year": 2010}, {"title": "Natural language processing (almost) from scratch", "author": ["J. Weston", "L. Bottou", "M. Karlen", "K. Kavukcuoglu", "P. Kuksa"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Collobert et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Deep convolutional neural networks for sentiment analysis of short texts", "author": ["dos Santos", "Ma\u0131\u0301ra Gatti"], "venue": "In Proceedings of the 25th International Conference on Computational Linguistics", "citeRegEx": "Santos et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Santos et al\\.", "year": 2014}, {"title": "Learning character-level representations for part-of-speech tagging", "author": ["dos Santos", "Bianca Zadrozny"], "venue": "In Proceedings of the 31st International Conference on Machine Learning (ICML),", "citeRegEx": "Santos et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Santos et al\\.", "year": 2014}, {"title": "Modeling interestingness with deep neural networks", "author": ["Gao et al.2014] Jianfeng Gao", "Patrick Pantel", "Michael Gamon", "Xiaodong He", "Li Deng"], "venue": "In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP)", "citeRegEx": "Gao et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Gao et al\\.", "year": 2014}, {"title": "Semeval-2010 task 8: Multi-way classification", "author": ["Su Nam Kim", "Zornitsa Kozareva", "Preslav Nakov", "Diarmuid \u00d3. S\u00e9aghdha", "Sebastian Pad\u00f3", "Marco Pennacchiotti", "Lorenza Romano", "Stan Szpakowicz"], "venue": null, "citeRegEx": "Hendrickx et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Hendrickx et al\\.", "year": 2010}, {"title": "Convolutional neural network architectures for matching natural language sentences", "author": ["Hu et al.2014] Baotian Hu", "Zhengdong Lu", "Hang Li", "Qingcai Chen"], "venue": "In Proceedings of the Conference on Neural Information Processing", "citeRegEx": "Hu et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Hu et al\\.", "year": 2014}, {"title": "A convolutional neural netork for modelling sentences", "author": ["Edward Grefenstette", "Phil Blunsom"], "venue": null, "citeRegEx": "Kalchbrenner et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2014}, {"title": "Convolutional neural networks for sentence classification", "author": ["Yoon Kim"], "venue": "In Proceedings of the 2014 Conference on Empirical Methods for Natural Language Processing,", "citeRegEx": "Kim.,? \\Q2014\\E", "shortCiteRegEx": "Kim.", "year": 2014}, {"title": "Efficient estimation of word representations in vector space", "author": ["Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "Proceedings of Workshop at ICLR", "citeRegEx": "Mikolov et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Semi-supervised learning for semantic relation classification using stratified sampling strategy", "author": ["Qian et al.2009] Longhua Qian", "Guodong Zhou", "Fang Kong", "Qiaoming Zhu"], "venue": "In Proceedings of the Conference on Empirical Methods in Natural Lan-", "citeRegEx": "Qian et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Qian et al\\.", "year": 2009}, {"title": "Utd: Classifying semantic relations by combining lexical and semantic resources", "author": ["Rink", "Harabagiu2010] Bryan Rink", "Sanda Harabagiu"], "venue": "In Proceedings of International Workshop on Semantic Evaluation,", "citeRegEx": "Rink et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Rink et al\\.", "year": 2010}, {"title": "Semantic compositionality through recursive matrix-vector spaces", "author": ["Brody Huval", "Christopher D. Manning", "Andrew Y. Ng"], "venue": "In Proceedings of the Joint Conference on Empirical Methods in Natural", "citeRegEx": "Socher et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Socher et al\\.", "year": 2012}, {"title": "Feature-rich part-of-speech tagging with a cyclic dependency network", "author": ["Dan Klein", "Christopher D Manning", "Yoram Singer"], "venue": "In Proceedings of the Conference of the North American Chapter of the Associa-", "citeRegEx": "Toutanova et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Toutanova et al\\.", "year": 2003}, {"title": "Wsabie: Scaling up to large vocabulary image annotation", "author": ["Weston et al.2011] Jason Weston", "Samy Bengio", "Nicolas Usunier"], "venue": "In Proceedings of the Twenty-Second International Joint Conference on Artificial Intelligence,", "citeRegEx": "Weston et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Weston et al\\.", "year": 2011}, {"title": "tagspace: Semantic embeddings from hashtags", "author": ["Weston et al.2014] Jason Weston", "Sumit Chopra", "Keith Adams"], "venue": "In Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP),", "citeRegEx": "Weston et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Weston et al\\.", "year": 2014}, {"title": "Factor-based compositional embedding models", "author": ["Yu et al.2014] Mo Yu", "Matthew Gormley", "Mark Dredze"], "venue": "In Proceedings of the 2nd Workshop on Learning Semantics,", "citeRegEx": "Yu et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2014}, {"title": "Relation classification via convolutional deep neural network", "author": ["Zeng et al.2014] Daojian Zeng", "Kang Liu", "Siwei Lai", "Guangyou Zhou", "Jun Zhao"], "venue": "In Proceedings of the 25th International Conference on Computational Linguistics (COLING),", "citeRegEx": "Zeng et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Zeng et al\\.", "year": 2014}, {"title": "Weakly-supervised relation classification for information extraction", "author": ["Zhu Zhang"], "venue": "In Proceedings of the ACM International Conference on Information and Knowledge Management,", "citeRegEx": "Zhang.,? \\Q2004\\E", "shortCiteRegEx": "Zhang.", "year": 2004}], "referenceMentions": [{"referenceID": 19, "context": "Since the last decade there has been increasing interest in applying machine learning approaches to this task (Zhang, 2004; Qian et al., 2009; Rink and Harabagiu, 2010).", "startOffset": 110, "endOffset": 168}, {"referenceID": 11, "context": "Since the last decade there has been increasing interest in applying machine learning approaches to this task (Zhang, 2004; Qian et al., 2009; Rink and Harabagiu, 2010).", "startOffset": 110, "endOffset": 168}, {"referenceID": 6, "context": "One reason is the availability of benchmark datasets such as the SemEval-2010 task 8 dataset (Hendrickx et al., 2010), which encodes the task of classifying the relationship between two nominals marked in a sentence.", "startOffset": 93, "endOffset": 117}, {"referenceID": 13, "context": "focused on the use of deep neural networks with the aim of reducing the number of handcrafted features (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014).", "startOffset": 103, "endOffset": 160}, {"referenceID": 18, "context": "focused on the use of deep neural networks with the aim of reducing the number of handcrafted features (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014).", "startOffset": 103, "endOffset": 160}, {"referenceID": 17, "context": "focused on the use of deep neural networks with the aim of reducing the number of handcrafted features (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014).", "startOffset": 103, "endOffset": 160}, {"referenceID": 2, "context": "These features are similar to the position features proposed by Collobert et al. (2011) for the Semantic Role Labeling task.", "startOffset": 64, "endOffset": 88}, {"referenceID": 2, "context": "As in (Collobert et al., 2011), each relative distance is mapped to a vector of dimension dwpe, which is initialized with random numbers.", "startOffset": 6, "endOffset": 30}, {"referenceID": 17, "context": "In this work we also experiment with the word position embeddings (WPE) proposed by Zeng et al. (2014). The WPE is derived from the relative distances of the current word to the target noun1 and noun2.", "startOffset": 84, "endOffset": 103}, {"referenceID": 18, "context": "when creating representations for text segments of different sizes (Zeng et al., 2014; Hu et al., 2014; dos Santos and Gatti, 2014) and characterlevel representations of words of different sizes (dos Santos and Zadrozny, 2014).", "startOffset": 67, "endOffset": 131}, {"referenceID": 7, "context": "when creating representations for text segments of different sizes (Zeng et al., 2014; Hu et al., 2014; dos Santos and Gatti, 2014) and characterlevel representations of words of different sizes (dos Santos and Zadrozny, 2014).", "startOffset": 67, "endOffset": 131}, {"referenceID": 15, "context": "Like some other ranking approaches that only update two classes/examples at every training round (Weston et al., 2011; Gao et al., 2014), we can efficiently train the network for tasks which have a very large number of classes.", "startOffset": 97, "endOffset": 136}, {"referenceID": 5, "context": "Like some other ranking approaches that only update two classes/examples at every training round (Weston et al., 2011; Gao et al., 2014), we can efficiently train the network for tasks which have a very large number of classes.", "startOffset": 97, "endOffset": 136}, {"referenceID": 1, "context": "In our experiments, we implement the CR-CNN architecture and the backpropagation algorithm using Theano (Bergstra et al., 2010).", "startOffset": 104, "endOffset": 127}, {"referenceID": 6, "context": "More information about this dataset can be found in (Hendrickx et al., 2010).", "startOffset": 52, "endOffset": 76}, {"referenceID": 10, "context": "We perform pre-training using the skip-gram NN architecture (Mikolov et al., 2013) available in the word2vec tool.", "startOffset": 60, "endOffset": 82}, {"referenceID": 14, "context": "tion of non-western characters for a special character; (3) tokenization of the text using the tokenizer available with the Stanford POS Tagger (Toutanova et al., 2003); (4) removal of sentences that are less than 20 characters long (including white spaces) or have less than 5 tokens.", "startOffset": 144, "endOffset": 168}, {"referenceID": 18, "context": "This effect of WPEs is reported by (Zeng et al., 2014).", "startOffset": 35, "endOffset": 54}, {"referenceID": 17, "context": "0 reported in (Yu et al., 2014) for the SemEval2010 Task 8 dataset.", "startOffset": 14, "endOffset": 31}, {"referenceID": 18, "context": "The third line in Table 4 shows the result reported by Zeng et al. (2014) when only word embeddings and WPEs are used as input to the network (similar to our CNN+Softmax).", "startOffset": 55, "endOffset": 74}, {"referenceID": 18, "context": "9 (Zeng et al., 2014)", "startOffset": 2, "endOffset": 21}, {"referenceID": 13, "context": "Socher et al. (2012) present results for a recursive neural network (RNN) that employs a matrix-vector representation to every node in a parse tree in order to compose the distributed vector representation for the complete sentence.", "startOffset": 0, "endOffset": 21}, {"referenceID": 18, "context": "In (Zeng et al., 2014), the authors present results for a CNN+Softmax classifier which employs lexical and sentencelevel features.", "startOffset": 3, "endOffset": 22}, {"referenceID": 17, "context": "Yu et al. (2014) present the Factor-", "startOffset": 0, "endOffset": 17}, {"referenceID": 17, "context": "6), which is produced by the FCM system of Yu et al. (2014), is 2.", "startOffset": 43, "endOffset": 60}, {"referenceID": 19, "context": "Over the years, various approaches have been proposed for relation classification (Zhang, 2004; Qian et al., 2009; Hendrickx et al., 2010; Rink and Harabagiu, 2010).", "startOffset": 82, "endOffset": 164}, {"referenceID": 11, "context": "Over the years, various approaches have been proposed for relation classification (Zhang, 2004; Qian et al., 2009; Hendrickx et al., 2010; Rink and Harabagiu, 2010).", "startOffset": 82, "endOffset": 164}, {"referenceID": 6, "context": "Over the years, various approaches have been proposed for relation classification (Zhang, 2004; Qian et al., 2009; Hendrickx et al., 2010; Rink and Harabagiu, 2010).", "startOffset": 82, "endOffset": 164}, {"referenceID": 0, "context": "Recently, deep learning (Bengio, 2009) has become an attractive area for multiple applications,", "startOffset": 24, "endOffset": 38}, {"referenceID": 8, "context": "2014; dos Santos and Gatti, 2014), question classification (Kalchbrenner et al., 2014), semantic role labeling (Collobert et al.", "startOffset": 59, "endOffset": 86}, {"referenceID": 2, "context": ", 2014), semantic role labeling (Collobert et al., 2011), hashtag prediction (Weston et al.", "startOffset": 32, "endOffset": 56}, {"referenceID": 16, "context": ", 2011), hashtag prediction (Weston et al., 2014), sentence completion and response matching (Hu et al.", "startOffset": 28, "endOffset": 49}, {"referenceID": 7, "context": ", 2014), sentence completion and response matching (Hu et al., 2014).", "startOffset": 51, "endOffset": 68}, {"referenceID": 13, "context": "In (Socher et al., 2012), the authors tackle relation classification", "startOffset": 3, "endOffset": 24}, {"referenceID": 13, "context": "Some recent work on deep learning for relation classification include Socher et al. (2012), Zeng et al.", "startOffset": 70, "endOffset": 91}, {"referenceID": 13, "context": "Some recent work on deep learning for relation classification include Socher et al. (2012), Zeng et al. (2014) and Yu et al.", "startOffset": 70, "endOffset": 111}, {"referenceID": 13, "context": "Some recent work on deep learning for relation classification include Socher et al. (2012), Zeng et al. (2014) and Yu et al. (2014). In (Socher et al.", "startOffset": 70, "endOffset": 132}, {"referenceID": 13, "context": "8 (Socher et al., 2012) word embeddings, POS, NER, WordNet 77.", "startOffset": 2, "endOffset": 23}, {"referenceID": 13, "context": "1 (Socher et al., 2012) word embeddings, POS, NER, WordNet 82.", "startOffset": 2, "endOffset": 23}, {"referenceID": 18, "context": "7 (Zeng et al., 2014) word pair, words around word pair, WordNet FCM word embeddings 80.", "startOffset": 2, "endOffset": 21}, {"referenceID": 17, "context": "6 (Yu et al., 2014) word embeddings, dependency parse, NER 83.", "startOffset": 2, "endOffset": 19}, {"referenceID": 18, "context": "It achieves slightly higher accuracy on the same dataset than (Zeng et al., 2014), but only when syntactic information is used.", "startOffset": 62, "endOffset": 81}, {"referenceID": 13, "context": "There are two main differences between the approach proposed in this paper and the ones proposed in (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014): (1) CR-CNN uses a pair-wise ranking method, while other approaches apply multiclass classification by using the softmax function on the top of the CNN/RNN; and (2) CR-CNN employs an effective method to deal with artificial classes by omitting their embeddings, while other approaches treat all classes equally.", "startOffset": 100, "endOffset": 157}, {"referenceID": 18, "context": "There are two main differences between the approach proposed in this paper and the ones proposed in (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014): (1) CR-CNN uses a pair-wise ranking method, while other approaches apply multiclass classification by using the softmax function on the top of the CNN/RNN; and (2) CR-CNN employs an effective method to deal with artificial classes by omitting their embeddings, while other approaches treat all classes equally.", "startOffset": 100, "endOffset": 157}, {"referenceID": 17, "context": "There are two main differences between the approach proposed in this paper and the ones proposed in (Socher et al., 2012; Zeng et al., 2014; Yu et al., 2014): (1) CR-CNN uses a pair-wise ranking method, while other approaches apply multiclass classification by using the softmax function on the top of the CNN/RNN; and (2) CR-CNN employs an effective method to deal with artificial classes by omitting their embeddings, while other approaches treat all classes equally.", "startOffset": 100, "endOffset": 157}], "year": 2015, "abstractText": "Relation classification is an important semantic processing task for which state-ofthe-art systems still rely on costly handcrafted features. In this work we tackle the relation classification task using a convolutional neural network that performs classification by ranking (CR-CNN). We propose a new pairwise ranking loss function that makes it easy to reduce the impact of artificial classes. We perform experiments using the the SemEval-2010 Task 8 dataset, which is designed for the task of classifying the relationship between two nominals marked in a sentence. Using CRCNN, we outperform the state-of-the-art for this dataset and achieve a F1 of 84.1 without using any costly handcrafted features. Additionally, our experimental results show that: (1) our approach is more effective than CNN followed by a softmax classifier; (2) omitting the representation of the artificial class Other improves both precision and recall; and (3) using only word embeddings as input features is enough to achieve state-of-the-art results if we consider only the text between the two target nominals.", "creator": "LaTeX with hyperref package"}}}