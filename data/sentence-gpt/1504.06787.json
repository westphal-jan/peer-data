{"id": "1504.06787", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Apr-2015", "title": "Max-Margin Deep Generative Models", "abstract": "Deep generative models (DGMs) are effective on learning multilayered representations of complex data and performing inference of input data by exploring the generative ability. However, little work has been done on examining whether the representations are discriminative enough to get good prediction performance. In this paper, we present max-margin deep generative models (mmDGMs), which explore the strongly discriminative principle of max-margin learning to improve the discriminative power of DGMs, while retaining the generative capability. We develop an efficient doubly stochastic subgradient algorithm. Empirical results on MNIST and its variant datasets demonstrate that (1) max-margin learning can significantly improve the classification performance of DGMs and meanwhile retain the ability of inferring input data; and (2) mmDGMs are competitive to the state-of-the-art networks that have a similar structure.", "histories": [["v1", "Sun, 26 Apr 2015 06:01:19 GMT  (699kb,D)", "https://arxiv.org/abs/1504.06787v1", null], ["v2", "Fri, 1 May 2015 01:58:31 GMT  (657kb,D)", "http://arxiv.org/abs/1504.06787v2", null], ["v3", "Mon, 15 Jun 2015 08:40:09 GMT  (2139kb,D)", "http://arxiv.org/abs/1504.06787v3", null], ["v4", "Tue, 15 Dec 2015 03:01:06 GMT  (2521kb,D)", "http://arxiv.org/abs/1504.06787v4", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CV", "authors": ["chongxuan li", "jun zhu", "tianlin shi", "bo zhang"], "accepted": true, "id": "1504.06787"}, "pdf": {"name": "1504.06787.pdf", "metadata": {"source": "CRF", "title": "Max-Margin Deep Generative Models", "authors": ["Chongxuan Li", "Jun Zhu", "Tianlin Shi", "Bo Zhang"], "emails": ["{licx14@mails.,", "dcszj@,", "dcszb@}tsinghua.edu.cn;", "stl501@gmail.com"], "sections": [{"heading": "1 Introduction", "text": "Max-margin learning has been effective on learning discriminative models, with many examples such as univariate-output support vector machines (SVMs) [5] and multivariate-output max-margin Markov networks (or structured SVMs) [30, 1, 31]. However, the ever-increasing size of complex data makes it hard to construct such a fully discriminative model, which has only single layer of adjustable weights, due to the facts that: (1) the manually constructed features may not well capture the underlying high-order statistics; and (2) a fully discriminative approach cannot reconstruct the input data when noise or missing values are present.\nTo address the first challenge, previous work has considered incorporating latent variables into a max-margin model, including partially observed maximum entropy discrimination Markov networks [37], structured latent SVMs [32] and max-margin min-entropy models [20]. All this work has primarily focused on a shallow structure of latent variables. To improve the flexibility, learning SVMs with a deep latent structure has been presented in [29]. However, these methods do not address the second challenge, which requires a generative model to describe the inputs. The recent work on learning max-margin generative models includes max-margin Harmoniums [4], maxmargin topic models [34, 35], and nonparametric Bayesian latent SVMs [36] which can infer the dimension of latent features from data. However, these methods only consider the shallow structure of latent variables, which may not be flexible enough to describe complex data.\nMuch work has been done on learning generative models with a deep structure of nonlinear hidden variables, including deep belief networks [25, 16, 23], autoregressive models [13, 9], and stochastic variations of neural networks [3]. For such models, inference is a challenging problem, but fortunately there exists much recent progress on stochastic variational inference algorithms [12, 24]. However, the primary focus of deep generative models (DGMs) has been on unsupervised learning,\nar X\niv :1\n50 4.\n06 78\n7v 4\n[ cs\n.L G\n] 1\n5 D\nec 2\nwith the goals of learning latent representations and generating input samples. Though the latent representations can be used with a downstream classifier to make predictions, it is often beneficial to learn a joint model that considers both input and response variables. One recent attempt is the conditional generative models [11], which treat labels as conditions of a DGM to describe input data. This conditional DGM is learned in a semi-supervised setting, which is not exclusive to ours.\nIn this paper, we revisit the max-margin principle and present a max-margin deep generative model (mmDGM), which learns multi-layer representations that are good for both classification and input inference. Our mmDGM conjoins the flexibility of DGMs on describing input data and the strong discriminative ability of max-margin learning on making accurate predictions. We formulate mmDGM as solving a variational inference problem of a DGM regularized by a set of max-margin posterior constraints, which bias the model to learn representations that are good for prediction. We define the max-margin posterior constraints as a linear functional of the target variational distribution of the latent presentations. Then, we develop a doubly stochastic subgradient descent algorithm, which generalizes the Pagesos algorithm [28] to consider nontrivial latent variables. For the variational distribution, we build a recognition model to capture the nonlinearity, similar as in [12, 24].\nWe consider two types of networks used as our recognition and generative models: multiple layer perceptrons (MLPs) as in [12, 24] and convolutional neural networks (CNNs) [14]. Though CNNs have shown promising results in various domains, especially for image classification, little work has been done to take advantage of CNN to generate images. The recent work [6] presents a type of CNN to map manual features including class labels to RBG chair images by applying unpooling, convolution and rectification sequentially; but it is a deterministic mapping and there is no random generation. Generative Adversarial Nets [7] employs a single such layer together with MLPs in a minimax two-player game framework with primary goal of generating images. We propose to stack this structure to form a highly non-trivial deep generative network to generate images from latent variables learned automatically by a recognition model using standard CNN. We present the detailed network structures in experiments part. Empirical results on MNIST [14] and SVHN [22] datasets demonstrate that mmDGM can significantly improve the prediction performance, which is competitive to the state-of-the-art methods [33, 17, 8, 15], while retaining the capability of generating input samples and completing their missing values."}, {"heading": "2 Basics of Deep Generative Models", "text": "We start from a general setting, where we have N i.i.d. data X = {xn}Nn=1. A deep generative model (DGM) assumes that each xn \u2208 RD is generated from a vector of latent variables zn \u2208 RK , which itself follows some distribution. The joint probability of a DGM is as follows:\np(X,Z|\u03b1,\u03b2) = N\u220f n=1 p(zn|\u03b1)p(xn|zn,\u03b2), (1)\nwhere p(zn|\u03b1) is the prior of the latent variables and p(xn|zn,\u03b2) is the likelihood model for generating observations. For notation simplicity, we define \u03b8 = (\u03b1,\u03b2). Depending on the structure of z, various DGMs have been developed, such as the deep belief networks [25, 16], deep sigmoid networks [21], deep latent Gaussian models [24], and deep autoregressive models [9]. In this paper, we focus on the directed DGMs, which can be easily sampled from via an ancestral sampler.\nHowever, in most cases learning DGMs is challenging due to the intractability of posterior inference. The state-of-the-art methods resort to stochastic variational methods under the maximum likelihood estimation (MLE) framework, \u03b8\u0302 = argmax\u03b8 log p(X|\u03b8). Specifically, let q(Z) be the variational distribution that approximates the true posterior p(Z|X,\u03b8). A variational upper bound of the per sample negative log-likelihood (NLL) \u2212 log p(xn|\u03b1,\u03b2) is:\nL(\u03b8, q(zn);xn) , KL(q(zn)||p(zn|\u03b1))\u2212 Eq(zn)[log p(xn|zn,\u03b2)], (2) where KL(q||p) is the Kullback-Leibler (KL) divergence between distributions q and p. Then, L(\u03b8, q(Z);X), \u2211 nL(\u03b8, q(zn);xn) upper bounds the full negative log-likelihood \u2212 log p(X|\u03b8).\nIt is important to notice that if we do not make restricting assumption on the variational distribution q, the lower bound is tight by simply setting q(Z) = p(Z|X,\u03b8). That is, the MLE is equivalent to solving the variational problem: min\u03b8,q(Z) L(\u03b8, q(Z);X). However, since the true posterior is intractable except a handful of special cases, we must resort to approximation methods. One common\nassumption is that the variational distribution is of some parametric form, q\u03c6(Z), and then we optimize the variational bound w.r.t the variational parameters \u03c6. For DGMs, another challenge arises that the variational bound is often intractable to compute analytically. To address this challenge, the early work further bounds the intractable parts with tractable ones by introducing more variational parameters [26]. However, this technique increases the gap between the bound being optimized and the log-likelihood, potentially resulting in poorer estimates. Much recent progress [12, 24, 21] has been made on hybrid Monte Carlo and variational methods, which approximates the intractable expectations and their gradients over the parameters (\u03b8,\u03c6) via some unbiased Monte Carlo estimates. Furthermore, to handle large-scale datasets, stochastic optimization of the variational objective can be used with a suitable learning rate annealing scheme. It is important to notice that variance reduction is a key part of these methods in order to have fast and stable convergence.\nMost work on directed DGMs has been focusing on the generative capability on inferring the observations, such as filling in missing values [12, 24, 21], while little work has been done on investigating the predictive power, except the semi-supervised DGMs [11] which builds a DGM conditioned on the class labels and learns the parameters via MLE. Below, we present max-margin deep generative models, which explore the discriminative max-margin principle to improve the predictive ability of the latent representations, while retaining the generative capability."}, {"heading": "3 Max-margin Deep Generative Models", "text": "We consider supervised learning, where the training data is a pair (x, y) with input features x \u2208 RD and the ground truth label y. Without loss of generality, we consider the multi-class classification, where y \u2208 C = {1, . . . ,M}. A max-margin deep generative model (mmDGM) consists of two components: (1) a deep generative model to describe input features; and (2) a max-margin classifier to consider supervision. For the generative model, we can in theory adopt any DGM that defines a joint distribution over (X,Z) as in Eq. (1). For the max-margin classifier, instead of fitting the input features into a conventional SVM, we define the linear classifier on the latent representations, whose learning will be regularized by the supervision signal as we shall see. Specifically, if the latent representation z is given, we define the latent discriminant function F (y, z,\u03b7;x) = \u03b7>f(y, z), where f(y, z) is an MK-dimensional vector that concatenates M subvectors, with the yth being z and all others being zero, and \u03b7 is the corresponding weight vector.\nWe consider the case that \u03b7 is a random vector, following some prior distribution p0(\u03b7). Then our goal is to infer the posterior distribution p(\u03b7,Z|X,Y), which is typically approximated by a variational distribution q(\u03b7,Z) for computational tractability. Notice that this posterior is different from the one in the vanilla DGM. We expect that the supervision information will bias the learned representations to be more powerful on predicting the labels at testing. To account for the uncertainty of (\u03b7,Z), we take the expectation and define the discriminant function F (y;x) = Eq [ \u03b7>f(y, z) ] , and the final prediction rule that maps inputs to outputs is:\ny\u0302 = argmax y\u2208C F (y;x). (3)\nNote that different from the conditional DGM [11], which puts the class labels upstream, the above classifier is a downstream model, in the sense that the supervision signal is determined by conditioning on the latent representations."}, {"heading": "3.1 The Learning Problem", "text": "We want to jointly learn the parameters \u03b8 and infer the posterior distribution q(\u03b7,Z). Based on the equivalent variational formulation of MLE, we define the joint learning problem as solving:\nmin \u03b8,q(\u03b7,Z),\u03be L(\u03b8, q(\u03b7,Z);X) + C N\u2211 n=1 \u03ben (4)\n\u2200n, y \u2208 C, s.t. : { Eq[\u03b7>\u2206fn(y)] \u2265 \u2206ln(y)\u2212 \u03ben \u03ben \u2265 0,\nwhere \u2206fn(y) = f(yn, zn) \u2212 f(y, zn) is the difference of the feature vectors; \u2206ln(y) is the loss function that measures the cost to predict y if the true label is yn; and C is a nonnegative regularization parameter balancing the two components. In the objective, the variational bound is defined\nas L(\u03b8, q(\u03b7,Z);X) = KL(q(\u03b7,Z)||p0(\u03b7,Z|\u03b1))\u2212 Eq [log p(X|Z,\u03b2)], and the margin constraints are from the classifier (3). If we ignore the constraints (e.g., setting C at 0), the solution of q(\u03b7,Z) will be exactly the Bayesian posterior, and the problem is equivalent to do MLE for \u03b8.\nBy absorbing the slack variables, we can rewrite the problem in an unconstrained form:\nmin \u03b8,q(\u03b7,Z)\nL(\u03b8, q(\u03b7,Z);X) + CR(q(\u03b7,Z;X)), (5)\nwhere the hinge loss is: R(q(\u03b7,Z);X) = \u2211N n=1 maxy\u2208C(\u2206ln(y) \u2212 Eq[\u03b7>\u2206fn(y)]). Due to the convexity of max function, it is easy to verify that the hinge loss is an upper bound of the training error of classifier (3), that is,R(q(\u03b7,Z);X) \u2265 \u2211 n \u2206ln(y\u0302n). Furthermore, the hinge loss is a convex functional over the variational distribution because of the linearity of the expectation operator. These properties render the hinge loss as a good surrogate to optimize over. Previous work has explored this idea to learn discriminative topic models [34], but with a restriction on the shallow structure of hidden variables. Our work presents a significant extension to learn deep generative models, which pose new challenges on the learning and inference."}, {"heading": "3.2 The Doubly Stochastic Subgradient Algorithm", "text": "The variational formulation of problem (5) naturally suggests that we can develop a variational algorithm to address the intractability of the true posterior. We now present a new algorithm to solve problem (5). Our method is a doubly stochastic generalization of the Pegasos (i.e., Primal Estimated sub-GrAdient SOlver for SVM) algorithm [28] for the classic SVMs with fully observed input features, with the new extension of dealing with a highly nontrivial structure of latent variables.\nFirst, we make the structured mean-field (SMF) assumption that q(\u03b7,Z) = q(\u03b7)q\u03c6(Z). Under the assumption, we have the discriminant function as Eq[\u03b7>\u2206fn(y)] = Eq(\u03b7)[\u03b7>]Eq\u03c6(z(n))[\u2206fn(y)]. Moreover, we can solve for the optimal solution of q(\u03b7) in some analytical form. In fact, by the calculus of variations, we can show that given the other parts the solution is q(\u03b7) \u221d p0(\u03b7) exp ( \u03b7> \u2211 n,y \u03c9 y nEq\u03c6 [\u2206fn(y)] ) , where \u03c9 are the Lagrange multipliers (See [34] for de-\ntails). If the prior is normal, p0(\u03b7) = N (0, \u03c32I), we have the normal posterior: q(\u03b7) = N (\u03bb, \u03c32I), where \u03bb = \u03c32 \u2211 n,y \u03c9 y nEq\u03c6 [\u2206fn(y)]. Therefore, even though we did not make a parametric form assumption of q(\u03b7), the above results show that the optimal posterior distribution of \u03b7 is Gaussian. Since we only use the expectation in the optimization problem and in prediction, we can directly solve for the mean parameter \u03bb instead of q(\u03b7). Further, in this case we can verify that KL(q(\u03b7)||p0(\u03b7)) = ||\u03bb|| 2\n2\u03c32 and then the equivalent objective function in terms of \u03bb can be written as:\nmin \u03b8,\u03c6,\u03bb\nL(\u03b8,\u03c6;X) + ||\u03bb|| 2\n2\u03c32 + CR(\u03bb,\u03c6;X), (6)\nwhere R(\u03bb,\u03c6;X) = \u2211N n=1 `(\u03bb,\u03c6;xn) is the total hinge loss, and the per-sample hinge-loss is `(\u03bb,\u03c6;xn) = maxy\u2208C(\u2206ln(y)\u2212\u03bb>Eq\u03c6 [\u2206fn(y)]). Below, we present a doubly stochastic subgradient descent algorithm to solve this problem.\nThe first stochasticity arises from a stochastic estimate of the objective by random mini-batches. Specifically, the batch learning needs to scan the full dataset to compute subgradients, which is often too expensive to deal with large-scale datasets. One effective technique is to do stochastic subgradient descent [28], where at each iteration we randomly draw a mini-batch of the training data and then do the variational updates over the small mini-batch. Formally, given a mini batch of size m, we get an unbiased estimate of the objective:\nL\u0303m := N\nm m\u2211 n=1 L(\u03b8,\u03c6;xn) + ||\u03bb||2 2\u03c32 + NC m m\u2211 n=1 `(\u03bb,\u03c6;xn).\nThe second stochasticity arises from a stochastic estimate of the per-sample variational bound and its subgradient, whose intractability calls for another Monte Carlo estimator. Formally, let zln \u223c q\u03c6(z|xn, yn) be a set of samples from the variational distribution, where we explicitly put the conditions. Then, an estimate of the per-sample variational bound and the per-sample hinge-loss is\nL\u0303(\u03b8,\u03c6;xn)= 1\nL \u2211 l log p(xn, z l n|\u03b2)\u2212log q\u03c6(zln); \u02dc\u0300(\u03bb,\u03c6;xn)=max y ( \u2206ln(y)\u2212 1 L \u2211 l \u03bb>\u2206fn(y, z l n) ) ,\nwhere \u2206fn(y, zln) = f(yn, z l n) \u2212 f(y, zln). Note that L\u0303 is an unbiased estimate of L, while \u02dc\u0300 is a biased estimate of `. Nevertheless, we can still show that \u02dc\u0300 is an upper bound estimate of ` under expectation. Furthermore, this biasedness does not affect our estimate of the gradient. In fact, by using the equality \u2207\u03c6q\u03c6(z) = q\u03c6(z)\u2207\u03c6 log q\u03c6(z), we can construct an unbiased Monte Carlo estimate of\u2207\u03c6(L(\u03b8,\u03c6;xn) + `(\u03bb,\u03c6;xn)) as:\ng\u03c6 = 1\nL L\u2211 l=1 ( log p(zln,xn)\u2212 log q\u03c6(zln) + C\u03bb >\u2206fn(y\u0303n, z l n) ) \u2207\u03c6 log q\u03c6(zln), (7)\nwhere the last term roots from the hinge loss with the loss-augmented prediction y\u0303n = argmaxy(\u2206ln(y) + 1 L \u2211 l \u03bb\n>f(y, zln)). For \u03b8 and \u03bb, the estimates of the gradient \u2207\u03b8L(\u03b8,\u03c6;xn) and the subgradient\u2207\u03bb`(\u03bb,\u03c6;xn) are easier, which are:\ng\u03b8 = 1\nL \u2211 l \u2207\u03b8 log p(xn, zln|\u03b8), g\u03bb = 1 L \u2211 l ( f(y\u0303n, z l n)\u2212 f(yn, zln) ) .\nNotice that the sampling and the gradient\u2207\u03c6 log q\u03c6(zln) only depend on the variational distribution, not the underlying model.\nAlgorithm 1 Doubly Stochastic Subgradient Algorithm Initialize \u03b8, \u03bb, and \u03c6 repeat\ndraw a random mini-batch of m data points draw random samples from noise distribution p( ) compute subgradient g = \u2207\u03b8,\u03bb,\u03c6L\u0303(\u03b8,\u03bb,\u03c6;Xm, ) update parameters (\u03b8,\u03bb,\u03c6) using subgradient g.\nuntil Converge return \u03b8, \u03bb, and \u03c6 The above estimates consider the general case where the variational bound is intractable. In some cases, we can compute the KL-divergence term analytically, e.g., when the prior and the variational distribution are both Gaussian. In such cases, we only need to estimate the rest intractable part by sampling, which often reduces the variance [12]. Similarly, we could use the expectation of the features directly, if it can be computed analytically, in the computation of subgradients (e.g., g\u03b8 and g\u03bb) instead of sampling, which again can lead to variance reduction.\nWith the above estimates of subgradients, we can use stochastic optimization methods such as SGD [28] and AdaM [10] to update the parameters, as outlined in Alg. 1. Overall, our algorithm is a doubly stochastic generalization of Pegasos to deal with the highly nontrivial latent variables.\nNow, the remaining question is how to define an appropriate variational distribution q\u03c6(z) to obtain a robust estimate of the subgradients as well as the objective. Two types of methods have been developed for unsupervised DGMs, namely, variance reduction [21] and auto-encoding variational Bayes (AVB) [12]. Though both methods can be used for our models, we focus on the AVB approach. For continuous variables Z, under certain mild conditions we can reparameterize the variational distribution q\u03c6(z) using some simple variables . Specifically, we can draw samples from some simple distribution p( ) and do the transformation z = g\u03c6( ,x, y) to get the sample of the distribution q(z|x, y). We refer the readers to [12] for more details. In our experiments, we consider the special Gaussian case, where we assume that the variational distribution is a multivariate Gaussian with a diagonal covariance matrix:\nq\u03c6(z|x, y) = N (\u00b5(x, y;\u03c6),\u03c32(x, y;\u03c6)), (8)\nwhose mean and variance are functions of the input data. This defines our recognition model. Then, the reparameterization trick is as follows: we first draw standard normal variables l \u223c N (0, I) and then do the transformation zln = \u00b5(xn, yn;\u03c6) + \u03c3(xn, yn;\u03c6) l to get a sample. For simplicity, we assume that both the mean and variance are function of x only. However, it is worth to emphasize that although the recognition model is unsupervised, the parameters \u03c6 are learned in a supervised manner because the subgradient (7) depends on the hinge loss. Further details of the experimental settings are presented in Sec. 4.1."}, {"heading": "4 Experiments", "text": "We now present experimental results on the widely adopted MNIST [14] and SVHN [22] datasets. Though mmDGMs are applicable to any DGMs that define a joint distribution of X and Z, we\nconcentrate on the Variational Auto-encoder (VA) [12], which is unsupervised. We denote our mmDGM with VA by MMVA. In our experiments, we consider two types of recognition models: multiple layer perceptrons (MLPs) and convolutional neural networks (CNNs). We implement all experiments based on Theano [2]. 1"}, {"heading": "4.1 Architectures and Settings", "text": "In the MLP case, we follow the settings in [11] to compare both generative and discriminative capacity of VA and MMVA. In the CNN case, we use standard convolutional nets [14] with convolution and max-pooling operation as the recognition model to obtain more competitive classification results. For the generative model, we use unconvnets [6] with a \u201csymmetric\u201d structure as the recognition model, to reconstruct the input images approximately. More specifically, the top-down generative model has the same structure as the bottom-up recognition model but replacing max-pooling with unpooling operation [6] and applies unpooling, convolution and rectification in order. The total number of parameters in the convolutional network is comparable with previous work [8, 17, 15]. For simplicity, we do not involve mlpconv layers [17, 15] and contrast normalization layers in our recognition model, but they are not exclusive to our model. We illustrate details of the network architectures in appendix A.\nIn both settings, the mean and variance of the latent z are transformed from the last layer of the recognition model through a linear operation. It should be noticed that we could use not only the expectation of z but also the activation of any layer in the recognition model as features. The only theoretical difference is from where we add a hinge loss regularization to the gradient and backpropagate it to previous layers. In all of the experiments, the mean of z has the same nonlinearity but typically much lower dimension than the activation of the last layer in the recognition model, and hence often leads to a worse performance. In the MLP case, we concatenate the activations of 2 layers as the features used in the supervised tasks. In the CNN case, we use the activations of the last layer as the features. We use AdaM [10] to optimize parameters in all of the models. Although it is an adaptive gradient-based optimization method, we decay the global learning rate by factor three periodically after sufficient number of epochs to ensure a stable convergence.\nWe denote our mmDGM with MLPs by MMVA. To perform classification using VA, we first learn the feature representations by VA, and then build a linear SVM classifier on these features using the Pegasos stochastic subgradient algorithm [28]. This baseline will be denoted by VA+Pegasos. The corresponding models with CNNs are denoted by CMMVA and CVA+Pegasos respectively."}, {"heading": "4.2 Results on the MNIST dataset", "text": "We present both the prediction performance and the results on generating samples of MMVA and VA+Pegasos with both kinds of recognition models on the MNIST [14] dataset, which consists of images of 10 different classes (0 to 9) of size 28\u00d728 with 50,000 training samples, 10,000 validating\nsamples and 10,000 testing samples. 4.2.1 Predictive Performance\nTable 1: Error rates (%) on MNIST dataset.\nMODEL ERROR RATE VA+Pegasos 1.04 VA+Class-conditionVA 0.96 MMVA 0.90 CVA+Pegasos 1.35 CMMVA 0.45 Stochastic Pooling [33] 0.47 Network in Network [17] 0.47 Maxout Network [8] 0.45 DSN [15] 0.39 In the MLP case, we only use 50,000 training data, and the parameters for classification are optimized according to the validation set. We choose C = 15 for MMVA and initialize it with an unsupervised pre-training procedure in classification. First three rows in Table 1 compare VA+Pegasos, VA+Class-condtionVA and MMVA, where VA+Class-condtionVA refers to the best fully supervised model in [11]. Our model outperforms the baseline significantly. We further use the t-SNE algorithm [19] to embed the features learned by VA and MMVA on 2D plane, which again demonstrates the stronger discriminative ability of MMVA (See Appendix B for details).\nIn the CNN case, we use 60,000 training data. Table 2 shows the effect of C on classification error rate and variational lower bound. Typically, as C gets lager, CMMVA learns more discriminative features and leads to a worse estimation of data likelihood. However, if C is too small, the supervision is not enough to lead to predictive features. Nevertheless, C = 103 is quite a good trade-off\n1The source code is available at https://github.com/zhenxuan00/mmdgm.\nbetween the classification performance and generative performance and this is the default setting of CMMVA on MNIST throughout this paper. In this setting, the classification performance of our CMMVA model is comparable to the recent state-of-the-art fully discriminative networks (without data augmentation), shown in the last four rows of Table 1.\n4.2.2 Generative Performance Table 2: Effects of C on MNIST datasetwith a CNN recognition model. C ERROR RATE (%) LOWER BOUND 0 1.35 -93.17 1 1.86 -95.86 10 0.88 -95.90 102 0.54 -96.35 103 0.45 -99.62 104 0.43 -112.12 We further investigate the generative capability of MMVA on generating samples. Fig. 1 illustrates the images randomly sampled from VA and MMVA models where we output the expectation of the gray value at each pixel to get a smooth visualization. We do not pre-train our model in all settings when generating data to prove that MMVA (CMMVA) remains the generative capability of DGMs."}, {"heading": "4.3 Results on the SVHN (Street View House Numbers) dataset", "text": "SVHN [22] is a large dataset consisting of color images of size 32 \u00d7 32. The task is to recognize center digits in natural scene images, which is significantly harder than classification of hand-written digits. We follow the work [27, 8] to split the dataset into 598,388 training data, 6000 validating data and 26, 032 testing data and preprocess the data by Local Contrast Normalization (LCN).\nWe only consider the CNN recognition model here. The network structure is similar to that in MNIST. We set C = 104 for our CMMVA model on SVHN by default.\nTable 3 shows the predictive performance. In this more challenging problem, we observe a larger improvement by CMMVA as compared to CVA+Pegasos, suggesting that DGMs benefit a lot from max-margin learning on image classification. We also compare CMMVA with state-of-the-art results. To the best of our knowledge, there is no competitive generative models to classify digits on SVHN dataset with full labels.\nWe further compare the generative capability of CMMVA and CVA to examine the benefits from jointly training of DGMs and max-margin classifiers. Though CVA gives a tighter lower bound of data likelihood and reconstructs data more elaborately, it fails to learn the pattern of digits in a complex scenario and could not generate meaningful images. Visualization of random samples from CVA and CMMVA is shown in Fig. 2. In this scenario, the hinge loss regularization on recognition model is useful for generating main objects to be classified in images."}, {"heading": "4.4 Missing Data Imputation and Classification", "text": "Finally, we test all models on the task of missing data imputation. For MNIST, we consider two types of missing values [18]: (1) Rand-Drop: each pixel is missing randomly with a pre-fixed probability; and (2) Rect: a rectangle located at the center of the image is missing. Given the perturbed images, we uniformly initialize the missing values between 0 and 1, and then iteratively do the following steps: (1) using the recognition model to sample the hidden variables; (2) predicting the missing values to generate images; and (3) using the refined images as the input of the next round. For SVHN, we do the same procedure as in MNIST but initialize the missing values with Guassian\nrandom variables as the input distribution changes. Visualization results on MNIST and SVHN are presented in Appendix C and Appendix D respectively.\nIntuitively, generative models with CNNs could be more powerful on learning patterns and high-level structures, while generative models with MLPs lean more to reconstruct the pixels in detail. This conforms to the MSE results shown in Table 4: CVA and CMMVA outperform VA and MMVA with a missing rectangle, while VA and MMVA outperform CVA and CMMVA with random missing values. Compared with the baseline, mmDGMs also make more accurate com-\npletion when large patches are missing. All of the models infer missing values for 100 iterations.\nWe also compare the classification performance of CVA, CNN and CMMVA with Rect missing values in testing procedure in Appendix E. CMMVA outperforms both CVA and CNN.\nOverall, mmDGMs have comparable capability of inferring missing values and prefer to learn highlevel patterns instead of local details."}, {"heading": "5 Conclusions", "text": "We propose max-margin deep generative models (mmDGMs), which conjoin the predictive power of max-margin principle and the generative ability of deep generative models. We develop a doubly stochastic subgradient algorithm to learn all parameters jointly and consider two types of recognition models with MLPs and CNNs respectively. In both cases, we present extensive results to demonstrate that mmDGMs can significantly improve the prediction performance of deep generative models, while retaining the strong generative ability on generating input samples as well as completing missing values. In fact, by employing CNNs in both recognition and generative models, we achieve low error rates on MNIST and SVHN datasets, which are competitive to the state-of-the-art fully discriminative networks."}, {"heading": "Acknowledgments", "text": "The work was supported by the National Basic Research Program (973 Program) of China (Nos. 2013CB329403, 2012CB316301), National NSF of China (Nos. 61322308, 61332007), Tsinghua TNList Lab Big Data Initiative, and Tsinghua Initiative Scientific Research Program (Nos. 20121088071, 20141080934)."}, {"heading": "A Detailed Architectures", "text": "In all of our experiments, (C)VA and (C)MMVA share same structures and settings.\nA.1 MNIST\nWe set the dimension of the latent variables to 50 in all of the experiments on MNIST.\nIn MLP case, both the recognition and generative models employ a two-layer MLP with 500 hidden units in each layer. We illustrate the network architecture of MMVA with Gaussian hidden variables and Bernoulli visible variables in Fig. 3.\nIn CNN case, our convolutional network contains 5 convolution layers. There are 32 feature maps in the first two convolutional layers and 64 feature maps in the last three convolutional layers. We use filters of size 3 throughout the network except filters of size 5 in the first layer. Instead of global average pooling, a MLP with 500 hidden units is adopted at the end of the convolutional nets to obtain a tighter lower bound and better generation results. We also involve three dropout layers with keeping ratio 0.5. We illustrate the network architecture of CMMVA in Fig. 4.\nA.2 SVHN\nWe only consider CNN case here and the structure is similar with the CNN case on MNIST. We use 256 latent variables to capture the variation of data in pattern and scale and no MLP layer is adopted. There are 64 feature maps in the first three layers and 96 feature maps in the last two layers. We involve three dropout layers with keeping ratio 0.7.\nWe use a fully supervised CNN without dropout layers to initialize the recognition model of CMMVA to speed-up the convergence of the parameters and the initial error rate is 5.03%."}, {"heading": "B T-SNE Visualization Results", "text": "T-SNE embedding results of the features learned by VA and MMVA on 2D plane are shown in Fig. 5 (a) and Fig. 5 (b) respectively, using the same data points randomly sampled from the MNIST dataset. Compared to the VA\u2019s embedding, MMVA separates the images from different categories better, especially for the confusable digits such as digit \u201c4\u201d and \u201c9\u201d. These results show that MMVA,\nwhich benefits from the max-margin principle, learns more discriminative representations of digits than VA.\nC Imputation Results on MNIST\nThe imputation results of CVA and CMMVA are shown in Fig. 6. CMMVA makes fewer mistakes and refines the images better, which accords with the MSE results as reported in the main text.\nWe visualize the inference procedure of MMVA for 20 iterations in Fig. 7. Considering both types of missing values, MMVA could infer the unknown values and refine the images in several iterations even with a large ratio of missing pixels.\nD Imputation Results on SVHN\nWe visualize the imputation results of CVA and CMMVA in Fig. 8 with Rect (12\u00d712) noise. In most cases, CMMVA could complete the images with missing values on this much harder SVHN dataset. In the remaining cases, CMMVA fails potentially due to the changeful digit patterns and less color contrast compared with hand-writing digits dataset. Nevertheless, CMMVA achieves comparable results with CVA on inferring missing data."}, {"heading": "E Classification Results with Missing Values", "text": "We present classification results with missing values on MNIST in Table 5. CNN makes prediction on the incomplete data directly. CVA and CMMVA infer missing data for 100 iterations at first and then make prediction on the refined data. In this scenario, CMMVA outperforms both CVA and CNN, which demonstrates the advantages of our mmDGMs, which have both strong discriminative and generative capabilities."}], "references": [], "referenceMentions": [], "year": 2015, "abstractText": "Deep generative models (DGMs) are effective on learning multilayered represen-<lb>tations of complex data and performing inference of input data by exploring the<lb>generative ability. However, little work has been done on examining or empower-<lb>ing the discriminative ability of DGMs on making accurate predictions. This pa-<lb>per presents max-margin deep generative models (mmDGMs), which explore the<lb>strongly discriminative principle of max-margin learning to improve the discrim-<lb>inative power of DGMs, while retaining the generative capability. We develop an<lb>efficient doubly stochastic subgradient algorithm for the piecewise linear objec-<lb>tive. Empirical results on MNIST and SVHN datasets demonstrate that (1) max-<lb>margin learning can significantly improve the prediction performance of DGMs<lb>and meanwhile retain the generative ability; and (2) mmDGMs are competitive to<lb>the state-of-the-art fully discriminative networks by employing deep convolutional<lb>neural networks (CNNs) as both recognition and generative models.", "creator": "LaTeX with hyperref package"}}}