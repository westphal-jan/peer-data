{"id": "1505.01629", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-May-2015", "title": "LeoPARD --- A Generic Platform for the Implementation of Higher-Order Reasoners", "abstract": "LeoPARD supports the implementation of knowledge representation and reasoning tools for higher-order logic(s). It combines a sophisticated data structure layer (polymorphically typed {\\lambda}-calculus with nameless spine notation, explicit substitutions, and perfect term sharing) with an ambitious multi-agent blackboard architecture (supporting prover parallelism at the term, clause, and search level). Further features of LeoPARD include a parser for all TPTP dialects, a command line interpreter, and generic means for the integration of external reasoners with non-parameterized parsers, which in turn facilitate the integration of the non-parameterized parsers with the parsers.\n\n\n\nThe implementation of the knowledge representation and reasoning tools for higher-order logic(s) in PoS is the most common of the PSA-based standard libraries (PSA-based libraries were written for PoS, and were written for PSA-based libraries, but PSA-based libraries were written for PoS, and were written for PSA-based libraries, but PSA-based libraries were written for PoS, and were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries, but PSA-based libraries were written for PSA-based libraries,", "histories": [["v1", "Thu, 7 May 2015 08:54:19 GMT  (21kb)", "http://arxiv.org/abs/1505.01629v1", "6 pages, to appear in the proceedings of CICM'2015 conference"]], "COMMENTS": "6 pages, to appear in the proceedings of CICM'2015 conference", "reviews": [], "SUBJECTS": "cs.LO cs.AI cs.MA cs.MS", "authors": ["max wisniewski", "alexander steen", "christoph benzm\\\"uller"], "accepted": false, "id": "1505.01629"}, "pdf": {"name": "1505.01629.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["max.wisniewski@fu-berlin.de", "a.steen@fu-berlin.de", "c.benzmueller@fu-berlin.de"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 5.\n01 62\n9v 1\n[ cs\n.L O\n] 7\nM ay"}, {"heading": "1 Introduction", "text": "LeoPARD (Leo\u2019s Parallel ARchitecture and Datastructures) is designed as a generic system platform for implementing higher-order (HO) logic based knowledge representation, and reasoning tools. In particular, LeoPARD provides the base layer of the new HO automated theorem prover (ATP) Leo-III, the successor of the well known provers LEO-I [4] and LEO-II [7].\nPrevious experiments with LEO-I and the OAnts mechanism [5] indicate a flexible, multi-agent blackboard architecture is well-suited for automating HO logic [6]. However, (due to project constraints) such an approach has not been realized in LEO-II. Instead, the focus has been on the proof search layer in combination with a simple, sequential collaboration with an external first-order (FO) ATP. LEO-II also provides improved term data structures, term indexing, and term sharing mechanisms, which unfortunately have not been optimally exploited at the clause and the proof search layer. For the development of Leo-III the philosophy therefore has been to allocate sufficient resources for the initial development of a flexible and reusable system platform. The goal has been to bundle, improve, and extend the features with the highest potential of the predecessor systems LEO-I, LEO-II and OAnts.\nThe result of this initiative is LeoPARD1, which is written in Scala and currently consists of approx. 13000 lines of code. LeoPARD combines a sophisticated data structure layer [21] (polymorphically typed \u03bb-calculus with nameless\n\u22c6 This work has been supported by the DFG under grant BE 2501/11-1 (Leo-III). The final publication is available at http://link.springer.com. 1 LeoPARD can be download at: https://github.com/cbenzmueller/LeoPARD.git .\nspine notation, explicit substitutions, and perfect term sharing), with a multiagent blackboard architecture [25] (supporting prover parallelism at the term, clause, and search level) and further tools including a parser for all TPTP [22,23] syntax dialects, generic support for interfacing with external reasoners, and a command line interpreter. Such a combination of features and support tools is, up to the authors knowledge, not matched in related HO reasoning frameworks.\nThe intended users of the LeoPARD package are implementors of HO knowledge representation and reasoning systems, including novel ATPs and model finders. In addition, we advocate the system as a platform for the integration and coordination of heterogeneous (external) reasoning tools."}, {"heading": "2 Term Data Structure", "text": "Data structure choices are a critical part of a theorem prover and permit reliable increases of overall performance when implemented and exploited properly. Key aspects for efficient theorem proving have been an intensive research topic and have reached maturity within FO-ATPs [19,20]. Naturally, one would expect an even higher impact of the data structure choices in HO-ATPs. However, in the latter context, comparably little effort has been invested yet \u2013 probably also because of the inherently more complex nature of HO logic.\nTerm Language. The LeoPARD term language extends the simply typed \u03bbcalculus with parametric polymorphism, yielding the second-order polymorphically typed \u03bb-calculus (corresponding to \u03bb2 in Barendregt\u2019s \u03bb-cube [3]). In particular, the system under consideration was independently developed by Reynolds [16] and Girard [14] and is commonly called System F today. Further extensions, for example to admit dependent types, are future work.\nThus, LeoPARD supports the following type and term language:\n\u03c4, \u03bd ::= t \u2208 T (Base type) | \u03b1 (Type variable) | \u03c4 \u2192 \u03bd (Abstraction type) | \u2200\u03b1. \u03c4 (Polymorphic type)\ns, t ::= X\u03c4 \u2208 V\u03c4 | c\u03c4 \u2208 \u03a3 (Variable / Constant) | (\u03bbx\u03c4 s\u03bd)\u03c4\u2192\u03bd | (s\u03c4\u2192\u03bd t\u03c4 )\u03bd (Term abstr. / appl.) | (\u039b\u03b1 s\u03c4 )\u2200\u03b1 \u03c4 | (s\u2200\u03b1 \u03c4 \u03bd)\u03c4 [\u03b1/\u03bd] (Type abstr. / appl.)\nAn example term of this language is:\n\u039b\u03b1\u03bbP\u03b1\u2192o ((f\u2200\u03b2 (\u03b2\u2192o)\u2192o\u2192o \u03b1) (\u03bbY\u03b1 P Y )) To.\nNameless Representation. Internally, LeoPARD employs a locally nameless representation (both at the type and term level), that extends de-Bruijn indices to (bound) type variables [15]. The definition of de-Bruijn indices [11] for type variables is analogous to the one for term variables. Thus, the above example term\nis represented namelessly as\n( \u039b\u03bb1\u2192o ((f\u2200(1\u2192o)\u2192o\u2192o 1) (\u03bb1 2 1)) To )\nwhere de-Bruijn indices for type variables are underlined.\nSpine Notation and Explicit Substitutions. On top of nameless terms, LeoPARD employs spine notation [12] and explicit substitutions [1]. The first technique allows quick head symbol queries, and efficient left-to-right traversal, e.g. for unification algorithms. The latter augments the calculus with substitution closures that admit efficient (partial) \u03b2-normalization runs. Internally, the above example reads\n\u039b\u03bb1\u2192o f\u2200(1\u2192o)\u2192o\u2192o \u00b7 (1;\u03bb1 2 \u00b7 (1);T )\nwhere \u00b7 combines function heads to argument lists (spines) in which ; denotes concatenation of arguments.\nTerm Sharing/Indexing. Terms are perfectly shared within LeoPARD, meaning that each term is only constructed once and then reused between different occurrences. This does not only reduce memory consumption in large knowledge bases, but also allows constant-time term comparison for syntactic equality using the term\u2019s pointer to its unique physical representation. For fast (sub-)term retrieval based on syntactical criteria (e.g. head symbols, subterm occurrences, etc.) from the term indexing mechanism, terms are kept in \u03b2-normal \u03b7-long form.\nSuite of Normalization Strategies. LeoPARD comes with a number of different (heuristic) \u03b2-normalization strategies that adjust the standard leftmostoutermost strategy with different combinations of strict and lazy substitution composition resp. normalization and closure construction. \u03b7-normalization is invariant wrt. \u03b2-normalization of spine terms and hence \u03b7-normalization (to long form) is applied only once for each freshly created term.\nEvaluation and Findings. A recent empirical evaluation [21] has shown that there is no single best reduction strategy for HO-ATPs. More precisely, for different TPTP problem categories this study identified different best reduction strategies. This motivates future work in which machine learning techniques could be used to suggest suitable strategies."}, {"heading": "3 Multi-agent Blackboard Architecture", "text": "In addition to supporting classical, sequential theorem proving procedures, LeoPARD offers means for breaking the global ATP loop down into a set of subtasks that can be computed in parallel. This also includes support for subprover parallelism as successfully employed, for example, in Isabelle/HOL\u2019s Sledgehammer tool [8]. More generally, LeoPARD is construed to enable parallalism at various levels inside an ATP, including the term, clause, and search level [9]. For this, LeoPARD provides a flexible multi-agent blackboard architecture.\nBlackboard Architecture. Process communication in LeoPARD is realized indirectly via a blackboard architecture [24]. The LeoPARD blackboard [25] is a collection of globally shared and accessible data structures which any process, i.e. agent, can query and manipulate at any time in parallel. From the blackboard\u2019s perspective each process is a specialist responsible for exactly one kind of problem. The blackboard is generic in the data structures, i.e. it allows the programmer to add various kinds data structures for any kind of data. Insertion into the data structures is handled by the blackboard. Hence, each specialist can indeed by specialized on a single data structure.\nThe LeoPARD blackboard mechanism and associated data structures provide specific support for nested and-or search trees, meaning that sets of formulae can be split into (nested) and-or contexts. Moreover, for each supercontext respective TPTP SZS status [22] information is automatically inferred from the statuses of its subcontexts.\nAgents. In LeoPARD specialist processes can be modeled as agents [25]. Classically, agents are composed of three components: environment perception, decision making, and action execution [24].\nThe perception of LeoPARD agents is trigger-based, meaning that each agent is notified by a change in the blackboard. LeoPARD agents are to be seen as homomorphisms on the blackboard data together with a filter when to apply an action. Depending on the perceived change of the resp. state of the blackboard an agent decides on an action it wants to execute.\nAuction Scheduler. Action execution in LeoPARD is coordinated by an auction based scheduler, which implements an own approximation algorithm [25] for combinatorical auctions [2]. More precisely, each LeoPARD agent computes and places a bid for the execution of its action(s). The auction based scheduler then tries to maximize the global benefit of the particular set of actions to choose.\nThis selection mechanism works uniformly for all agents that can be implemented in LeoPARD. Balancing the value of the actions is therefore crucial for the performance and the termination of the overall system. A possible generic solution for the agents bidding is to apply machine learning techniques to optimize the bids for the best overall performance. This is future work.\nNote that the use of advanced agent technology in LeoPARD is optional. A traditional ATP can still be implemented, for example, as a single, sequential reasoner instantiating exactly one agent in the LeoPARD framework.\nAgent Implementation Examples. For illustration purposes, some agent implementations have been exemplarily included in the LeoPARD package. For example, simple agents for simplification, skolemization, prenex-form, negationnormal-form and paramodulation are provided. Moreover, the agent-based integration of external ATPs is demonstrated and their parallelization is enabled by the LeoPARD agent framework. This includes agents embodying LEO-II and Satallax [10] running remotely on the SystemOnTPTP [22] servers in Miami. These example agents can be easily adapted for other TPTP compliant ATPs.\nEach example agent comes with an applicability filter, an action definition and an auction value computation. The provided agents suffice to illustrate the working principles of the LeoPARD multi-agent blackboard architecture to interested implementors. After the official release of Leo-III, further, more sophisticated agents will be included and offered for academic reuse."}, {"heading": "4 Other Components", "text": "The LeoPARD framework provides useful further components. For example, a generic parser is provided that supports all TPTP syntax dialects. Moreover, a command line interpreter supports fine grained interaction with the system. This is useful not only for debugging but also for training and demonstration purposes. As pointed at above, useful support is also provided for the integration of external reasoners based on the TPTP infrastructure. This also includes comprehensive support for the TPTP SZS result ontology. Moreover, ongoing and future work aims at generic means for the transformation and integration of (external) proof protocols, ideally by exploiting results of projects such as ProofCert2."}, {"heading": "5 Related work", "text": "There is comparably little related work to LeoPARD, since higher-order theorem provers typically implement their own data structures. Related systems (mostly concerning term representation) include \u03bbProlog and Teyjus [17], the Abella interactive theorem prover [13], and the logical framework Twelf [18].\nAcknowledgements. We thank the reviewers for their valuable feedback. Moreover, we thank Tomer Libal and the students of the Leo-III project for their contributions to LeoPARD."}], "references": [{"title": "Explicit substitutions", "author": ["M. Abadi", "L. Cardelli", "P.-L. Curien", "J.-J. Levy"], "venue": "In Proc. of the 17th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1990}, {"title": "Social Choice and Individual Values", "author": ["K.J. Arrow"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1951}, {"title": "Introduction to Generalized Type Systems", "author": ["H.P. Barendregt"], "venue": "In J. of Functional Programming,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1991}, {"title": "LEO \u2013 A Higher-Order Theorem Prover", "author": ["C. Benzm\u00fcller", "M. Kohlhase"], "venue": "In Proc. of CADE-15,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1998}, {"title": "OANTS \u2013 Combining Interactive and Automated Theorem Proving", "author": ["C. Benzm\u00fcller", "V. Sorge"], "venue": "Symbolic Computation and Automated Reasoning,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2001}, {"title": "Combined Reasoning by Automated Cooperation", "author": ["C. Benzm\u00fcller", "V. Sorge", "M. Jamnik", "M. Kerber"], "venue": "J. of Applied Logic,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "LEO-II - A Cooperative Automatic Theorem Prover for Higher-Order Logic (system description)", "author": ["C. Benzm\u00fcller", "F. Theiss", "L. Paulson", "A. Fietzke"], "venue": "In Proc. of IJCAR 2008,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2008}, {"title": "Extending Sledgehammer with SMT Solvers", "author": ["J. Blanchette", "S. B\u00f6hme", "L. Paulson"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "A Taxonomy of Parallel Strategies for Deduction", "author": ["M.P. Bonacina"], "venue": "Annals of Mathematics and Artificial Intelligence,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2000}, {"title": "Satallax: An Automatic Higher-Order Prover", "author": ["C.E. Brown"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem", "author": ["N.G. De Bruijn"], "venue": "INDAG. MATH,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1972}, {"title": "A linear spine calculus", "author": ["I. Cervesato", "F. Pfenning"], "venue": "J. Logic and Computation,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "The Abella interactive theorem prover (system description)", "author": ["A. Gacek"], "venue": "In Proc. Automated Reasoning,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "Interpr\u00e9tation fonctionnelle et \u00e9limination des coupures de l\u2019arithm\u00e9tique d\u2019ordre sup\u00e9rieur", "author": ["J.Y. Girard"], "venue": "PhD thesis, Paris VII,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1972}, {"title": "Alpha-conversion and typability", "author": ["A.J. Kfoury", "S. Ronchi Della Rocca", "J. Tiuryn", "P. Urzyczyn"], "venue": "Inf. Comput.,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1999}, {"title": "Towards a theory of type structure", "author": ["J.C. Reynolds"], "venue": "In Symposium on Programming, volume 19 of LNCS,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1974}, {"title": "System Description: Teyjus - A Compiler and Abstract Machine Based Implementation of \u03bbProlog", "author": ["C. Liang", "D. Mitchell"], "venue": "In Automated Deduction CADE-16, LNCS,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1999}, {"title": "System description: Twelf \u2014 A Meta-Logical Framework for Deductive Systems", "author": ["F. Pfenning", "C. Sch\u00fcrmann"], "venue": "In Automated Deduction,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1999}, {"title": "Implementing an efficient theorem prover", "author": ["A. Riazanov"], "venue": "PhD thesis, University of Manchester,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2003}, {"title": "Term Indexing. In Handbook of Automated Reasoning, pages 1853\u20131964", "author": ["R. Sekar", "I.V. Ramakrishnan", "A. Voronkov"], "venue": "Elsevier Science Publishers B. V.,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2001}, {"title": "Efficient Data Structures for Automated Theorem Proving in Expressive Higher-Order Logics", "author": ["A. Steen"], "venue": "Master\u2019s thesis, Freie Universita\u0308t Berlin,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "The TPTP Problem Library and Associated Infrastructure", "author": ["G. Sutcliffe"], "venue": "J. Automated Reasoning,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2009}, {"title": "Automated Reasoning in Higher-Order Logic using the TPTP THF Infrastructure", "author": ["G. Sutcliffe", "C. Benzm\u00fcller"], "venue": "J. Formalized Reasoning,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Agent-based Blackboard Architecture for a HigherOrder Theorem Prover", "author": ["M. Wisniewski"], "venue": "Master\u2019s thesis, Freie Universita\u0308t Berlin,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}], "referenceMentions": [{"referenceID": 3, "context": "In particular, LeoPARD provides the base layer of the new HO automated theorem prover (ATP) Leo-III, the successor of the well known provers LEO-I [4] and LEO-II [7].", "startOffset": 147, "endOffset": 150}, {"referenceID": 6, "context": "In particular, LeoPARD provides the base layer of the new HO automated theorem prover (ATP) Leo-III, the successor of the well known provers LEO-I [4] and LEO-II [7].", "startOffset": 162, "endOffset": 165}, {"referenceID": 4, "context": "Previous experiments with LEO-I and the OAnts mechanism [5] indicate a flexible, multi-agent blackboard architecture is well-suited for automating HO logic [6].", "startOffset": 56, "endOffset": 59}, {"referenceID": 5, "context": "Previous experiments with LEO-I and the OAnts mechanism [5] indicate a flexible, multi-agent blackboard architecture is well-suited for automating HO logic [6].", "startOffset": 156, "endOffset": 159}, {"referenceID": 20, "context": "LeoPARD combines a sophisticated data structure layer [21] (polymorphically typed \u03bb-calculus with nameless", "startOffset": 54, "endOffset": 58}, {"referenceID": 23, "context": "spine notation, explicit substitutions, and perfect term sharing), with a multiagent blackboard architecture [25] (supporting prover parallelism at the term, clause, and search level) and further tools including a parser for all TPTP [22,23] syntax dialects, generic support for interfacing with external reasoners, and a command line interpreter.", "startOffset": 109, "endOffset": 113}, {"referenceID": 21, "context": "spine notation, explicit substitutions, and perfect term sharing), with a multiagent blackboard architecture [25] (supporting prover parallelism at the term, clause, and search level) and further tools including a parser for all TPTP [22,23] syntax dialects, generic support for interfacing with external reasoners, and a command line interpreter.", "startOffset": 234, "endOffset": 241}, {"referenceID": 22, "context": "spine notation, explicit substitutions, and perfect term sharing), with a multiagent blackboard architecture [25] (supporting prover parallelism at the term, clause, and search level) and further tools including a parser for all TPTP [22,23] syntax dialects, generic support for interfacing with external reasoners, and a command line interpreter.", "startOffset": 234, "endOffset": 241}, {"referenceID": 18, "context": "Key aspects for efficient theorem proving have been an intensive research topic and have reached maturity within FO-ATPs [19,20].", "startOffset": 121, "endOffset": 128}, {"referenceID": 19, "context": "Key aspects for efficient theorem proving have been an intensive research topic and have reached maturity within FO-ATPs [19,20].", "startOffset": 121, "endOffset": 128}, {"referenceID": 2, "context": "The LeoPARD term language extends the simply typed \u03bbcalculus with parametric polymorphism, yielding the second-order polymorphically typed \u03bb-calculus (corresponding to \u03bb2 in Barendregt\u2019s \u03bb-cube [3]).", "startOffset": 194, "endOffset": 197}, {"referenceID": 15, "context": "In particular, the system under consideration was independently developed by Reynolds [16] and Girard [14] and is commonly called System F today.", "startOffset": 86, "endOffset": 90}, {"referenceID": 13, "context": "In particular, the system under consideration was independently developed by Reynolds [16] and Girard [14] and is commonly called System F today.", "startOffset": 102, "endOffset": 106}, {"referenceID": 14, "context": "Internally, LeoPARD employs a locally nameless representation (both at the type and term level), that extends de-Bruijn indices to (bound) type variables [15].", "startOffset": 154, "endOffset": 158}, {"referenceID": 10, "context": "The definition of de-Bruijn indices [11] for type variables is analogous to the one for term variables.", "startOffset": 36, "endOffset": 40}, {"referenceID": 11, "context": "On top of nameless terms, LeoPARD employs spine notation [12] and explicit substitutions [1].", "startOffset": 57, "endOffset": 61}, {"referenceID": 0, "context": "On top of nameless terms, LeoPARD employs spine notation [12] and explicit substitutions [1].", "startOffset": 89, "endOffset": 92}, {"referenceID": 20, "context": "A recent empirical evaluation [21] has shown that there is no single best reduction strategy for HO-ATPs.", "startOffset": 30, "endOffset": 34}, {"referenceID": 7, "context": "This also includes support for subprover parallelism as successfully employed, for example, in Isabelle/HOL\u2019s Sledgehammer tool [8].", "startOffset": 128, "endOffset": 131}, {"referenceID": 8, "context": "More generally, LeoPARD is construed to enable parallalism at various levels inside an ATP, including the term, clause, and search level [9].", "startOffset": 137, "endOffset": 140}, {"referenceID": 23, "context": "The LeoPARD blackboard [25] is a collection of globally shared and accessible data structures which any process, i.", "startOffset": 23, "endOffset": 27}, {"referenceID": 21, "context": "Moreover, for each supercontext respective TPTP SZS status [22] information is automatically inferred from the statuses of its subcontexts.", "startOffset": 59, "endOffset": 63}, {"referenceID": 23, "context": "In LeoPARD specialist processes can be modeled as agents [25].", "startOffset": 57, "endOffset": 61}, {"referenceID": 23, "context": "Action execution in LeoPARD is coordinated by an auction based scheduler, which implements an own approximation algorithm [25] for combinatorical auctions [2].", "startOffset": 122, "endOffset": 126}, {"referenceID": 1, "context": "Action execution in LeoPARD is coordinated by an auction based scheduler, which implements an own approximation algorithm [25] for combinatorical auctions [2].", "startOffset": 155, "endOffset": 158}, {"referenceID": 9, "context": "This includes agents embodying LEO-II and Satallax [10] running remotely on the SystemOnTPTP [22] servers in Miami.", "startOffset": 51, "endOffset": 55}, {"referenceID": 21, "context": "This includes agents embodying LEO-II and Satallax [10] running remotely on the SystemOnTPTP [22] servers in Miami.", "startOffset": 93, "endOffset": 97}, {"referenceID": 16, "context": "Related systems (mostly concerning term representation) include \u03bbProlog and Teyjus [17], the Abella interactive theorem prover [13], and the logical framework Twelf [18].", "startOffset": 83, "endOffset": 87}, {"referenceID": 12, "context": "Related systems (mostly concerning term representation) include \u03bbProlog and Teyjus [17], the Abella interactive theorem prover [13], and the logical framework Twelf [18].", "startOffset": 127, "endOffset": 131}, {"referenceID": 17, "context": "Related systems (mostly concerning term representation) include \u03bbProlog and Teyjus [17], the Abella interactive theorem prover [13], and the logical framework Twelf [18].", "startOffset": 165, "endOffset": 169}], "year": 2015, "abstractText": "LeoPARD supports the implementation of knowledge representation and reasoning tools for higher-order logic(s). It combines a sophisticated data structure layer (polymorphically typed \u03bb-calculus with nameless spine notation, explicit substitutions, and perfect term sharing) with an ambitious multi-agent blackboard architecture (supporting prover parallelism at the term, clause, and search level). Further features of LeoPARD include a parser for all TPTP dialects, a command line interpreter, and generic means for the integration of external reasoners.", "creator": "LaTeX with hyperref package"}}}