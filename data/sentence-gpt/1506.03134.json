{"id": "1506.03134", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2015", "title": "Pointer Networks", "abstract": "We introduce a new neural architecture to learn the conditional probability of an output sequence with elements that are discrete tokens corresponding to positions in an input sequence. Such problems cannot be trivially addressed by existent approaches such as sequence-to-sequence and Neural Turing Machines, because the number of target classes in each step of the output depends on the length of the input, which is variable. Problems such as sorting variable sized sequences, and various combinatorial optimization problems belong to this class. Our model solves the problem of variable size output dictionaries using a recently proposed mechanism of neural attention. It differs from the previous attention attempts in that, instead of using attention to blend hidden units of an encoder to a context vector at each decoder step, it uses attention as a pointer to select a member of the input sequence as the output. We call this architecture a Pointer Net (Ptr-Net). We show Ptr-Nets can be used to learn approximate solutions to three challenging geometric problems -- finding planar convex hulls, computing Delaunay triangulations, and the planar Travelling Salesman Problem -- using training examples alone. Ptr-Nets not only improve over sequence-to-sequence with input attention, but also allow us to generalize to variable size output dictionaries. We show that the learnt models generalize beyond the maximum lengths they were trained on. We hope our results on these tasks will encourage a broader exploration of neural learning for discrete problems.\n\n\n\n\n\nWe propose a new neural architecture to learn the conditional probability of an output sequence with elements that are discrete tokens corresponding to positions in an input sequence. Such problems cannot be trivially addressed by existent approaches such as sequence-to-sequence and Neural Turing Machines, because the number of target classes in each step of the output depends on the length of the input, which is variable. Problems such as sorting variable sized sequences, and various combinatorial optimization problems belong to this class. We show Ptr-Nets can be used to learn approximate solutions to three challenging geometric problems -- finding planar convex hulls, computing Delaunay triangulations, and the planar Travelling Salesman Problem -- using training examples alone. Ptr-Nets not only improve over sequence-to-sequence with input attention, but also allow us to generalize to variable size output dictionaries. We hope our results on these tasks will encourage a broader exploration of neural learning for discrete problems.", "histories": [["v1", "Tue, 9 Jun 2015 23:38:16 GMT  (277kb,D)", "http://arxiv.org/abs/1506.03134v1", null], ["v2", "Mon, 2 Jan 2017 10:25:29 GMT  (277kb,D)", "http://arxiv.org/abs/1506.03134v2", null]], "reviews": [], "SUBJECTS": "stat.ML cs.CG cs.LG cs.NE", "authors": ["oriol vinyals", "meire fortunato", "navdeep jaitly"], "accepted": true, "id": "1506.03134"}, "pdf": {"name": "1506.03134.pdf", "metadata": {"source": "CRF", "title": "Pointer Networks", "authors": ["Oriol Vinyals", "Meire Fortunato", "Navdeep Jaitly"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Recurrent Neural Networks (RNNs) have been used for learning functions over sequences from examples for more than three decades [3]. However, their architecture limited them to settings where the inputs and outputs were available at a fixed frame rate (e.g. [4]). The recently introduced sequence-to-sequence paradigm [1] removed these constraints by using one RNN to map an input sequence to an embedding and another (possibly the same) RNN to map the embedding to an output sequence. Bahdanau et. al. augmented the decoder by propagating extra contextual information from the input using a content-based attentional mechanism [5, 2, 6]. These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].\nNonetheless, these methods still require the size of the output dictionary to be fixed a priori. Because of this constraint we cannot directly apply this framework to combinatorial problems where the size of the output dictionary depends on the length of the input sequence. In this paper, we address this limitation by repurposing the attention mechanism of [5] to create pointers to input elements. We show that the resulting architecture, which we name Pointer Networks (Ptr-Nets), can be trained to output satisfactory solutions to three combinatorial optimization problems \u2013 computing planar convex hulls, Delaunay triangulations and the symmetric planar Travelling Salesman Problem (TSP). The resulting models produce approximate solutions to these problems in a purely data driven fash-\n\u2217Equal contribution\nar X\niv :1\n50 6.\n03 13\n4v 1\n[ st\nat .M\nL ]\n9 J\nun 2\n01 5\nion (i.e., when we only have examples of inputs and desired outputs). The proposed approach is depicted in Figure 1.\nThe main contributions of our work are as follows:\n\u2022 We propose a new architecture, that we call Pointer Net, which is simple and effective. It deals with the fundamental problem of representing variable length dictionaries by using a softmax probability distribution as a \u201cpointer\u201d.\n\u2022 We apply the Pointer Net model to three distinct non-trivial algorithmic problems involving geometry. We show that the learned model generalizes to test problems with more points than the training problems.\n\u2022 Our Pointer Net model learns a competitive small scale (n \u2264 50) TSP approximate solver. Our results demonstrate that a purely data driven approach can learn approximate solutions to problems that are computationally intractable."}, {"heading": "2 Models", "text": "We review the sequence-to-sequence [1] and input-attention models [5] that are the baselines for this work in Sections 2.1 and 2.2. We then describe our model - Ptr-Net in Section 2.3."}, {"heading": "2.1 Sequence-to-Sequence Model", "text": "Given a training pair, (P, CP), the sequence-to-sequence model computes the conditional probability p(CP |P; \u03b8) using a parametric model (an RNN with parameters \u03b8) to estimate the terms of the probability chain rule (also see Figure 1), i.e.\np(CP |P; \u03b8) = m(P)\u220f i=1 p\u03b8(Ci|C1, . . . , Ci\u22121,P; \u03b8). (1)\nHere P = {P1, . . . , Pn} is a sequence of n vectors and CP = {C1, . . . , Cm(P)} is a sequence of m(P) indices, each between 1 and n. The parameters of the model are learnt by maximizing the conditional probabilities for the training set, i.e.\n\u03b8\u2217 = argmax \u03b8 \u2211 P,CP log p(CP |P; \u03b8), (2)\nwhere the sum is over training examples.\nAs in [1], we use an Long Short Term Memory (LSTM) [11] to model p\u03b8(Ci|C1, . . . , Ci\u22121,P; \u03b8). The RNN is fed Pi at each time step, i, until the end of the input sequence is reached, at which time a special symbol, \u21d2 is input to the model. The model then switches to the generation mode until the network encounters the special symbol\u21d0, which represents termination of the output sequence. Note that this model makes no statistical independence assumptions. We use two separate RNNs (one to encode the sequence of vectors Pj , and another one to produce or decode the output symbols Ci). We call the former RNN the encoder and the latter the decoder or the generative RNN.\nDuring inference, given a sequence P , the learnt parameters \u03b8\u2217 are used to select the sequence C\u0302P with the highest probability, i.e., C\u0302P = argmax\nCP p(CP |P; \u03b8\u2217). Finding the optimal sequence C\u0302\nis computationally impractical because of the combinatorial number of possible output sequences. Instead we use a beam search procedure to find the best possible sequence given a beam size.\nIn this sequence-to-sequence model, the output dictionary size for all symbols Ci is fixed and equal to n, since the outputs are chosen from the input. Thus, we need to train a separate model for each n. This prevents us from learning solutions to problems that have an output dictionary with a size that depends on the input sequence length.\nUnder the assumption that the number of outputs is O(n) this model has computational complexity ofO(n). However, exact algorithms for the problems we are dealing with are more costly. For example, the convex hull problem has complexity O(n log n). The attention mechanism (see Section 2.2) adds more \u201ccomputational capacity\u201d to this model."}, {"heading": "2.2 Content Based Input Attention", "text": "The vanilla sequence-to-sequence model produces the entire output sequence CP using the fixed dimensional state of the recognition RNN at the end of the input sequence P . This constrains the amount of information and computation that can flow through to the generative model. The attention model of [5] ameliorates this problem by augmenting the encoder and decoder RNNs with an additional neural network that uses an attention mechanism over the entire sequence of encoder RNN states.\nFor notation purposes, let us define the encoder and decoder hidden states as (e1, . . . , en) and (d1, . . . , dm(P)), respectively. For the LSTM RNNs, we use the state after the output gate has been component-wise multiplied by the cell activations. We compute the attention vector at each output time i as follows:\nuij = v T tanh(W1ej +W2di) j \u2208 (1, . . . , n)\naij = softmax(u i j) j \u2208 (1, . . . , n) (3)\nd\u2032i = n\u2211 j=1 aijej\nwhere softmax normalizes the vector ui (of length n) to be the \u201cattention\u201d mask over the inputs, and v, W1, and W2 are learnable parameters of the model. In all our experiments, we use the same hidden dimensionality at the encoder and decoder (typically 512), so v is a vector and W1 and W2 are square matrices. Lastly, d\u2032i and di are concatenated and used as the hidden states from which we make predictions and which we feed to the next time step in the recurrent model.\nNote that for each output we have to perform n operations, so the computational complexity at inference time becomes O(n2).\nThis model performs significantly better than the sequence-to-sequence model on the convex hull problem, but it is not applicable to problems where the output dictionary size depends on the input.\nNevertheless, a very simple extension (or rather reduction) of the model allows us to do this easily."}, {"heading": "2.3 Ptr-Net", "text": "We now describe a very simple modification of the attention model that allows us to apply the method to solve combinatorial optimization problems where the output dictionary size depends on the number of elements in the input sequence.\nThe sequence-to-sequence model of Section 2.1 uses a softmax distribution over a fixed sized output dictionary to compute p(Ci|C1, . . . , Ci\u22121,P) in Equation 1. Thus it cannot be used for our problems where the size of the output dictionary is equal to the length of the input sequence. To solve this problem we model p(Ci|C1, . . . , Ci\u22121,P) using the attention mechanism of Equation 3 as follows:\nuij = v T tanh(W1ej +W2di) j \u2208 (1, . . . , n)\np(Ci|C1, . . . , Ci\u22121,P) = softmax(ui)\nwhere softmax normalizes the vector ui (of length n) to be an output distribution over the dictionary of inputs, and v, W1, and W2 are learnable parameters of the output model. Here, we do not blend the encoder state ej to propagate extra information to the decoder, but instead, use uij as pointers to the input elements. In a similar way, to condition on Ci\u22121 as in Equation 1, we simply copy the corresponding PCi\u22121 as the input. Both our method and the attention model can be seen as an application of content-based attention mechanisms proposed in [6, 5, 2].\nWe also note that our approach specifically targets problems whose outputs are discrete and correspond to positions in the input. Such problems may be addressed artificially \u2013 for example we could learn to output the coordinates of the target point directly using an RNN. However, at inference, this solution does not respect the constraint that the outputs map back to the inputs exactly. Without the constraints, the predictions are bound to become blurry over longer sequences as shown in sequence-to-sequence models for videos [12]."}, {"heading": "3 Motivation and Datasets Structure", "text": "In the following sections, we review each of the three problems we considered, as well as our data generation protocol.1\nIn the training data, the inputs are planar point sets P = {P1, . . . , Pn} with n elements each, where Pj = (xj , yj) are the cartesian coordinates of the points over which we find the convex hull, the Delaunay triangulation or the solution to the corresponding Travelling Salesman Problem. In all cases, we sample from a uniform distribution in [0, 1] \u00d7 [0, 1]. The outputs CP = {C1, . . . , Cm(P)} are sequences representing the solution associated to the point set P . In Figure 2, we find an illustration of an input/output pair (P, CP) for the convex hull and the Delaunay problems."}, {"heading": "3.1 Convex Hull", "text": "We used this example as a baseline to develop our models and to understand the difficulty of solving combinatorial problems with data driven approaches. Finding the convex hull of a finite number of points is a well understood task in computational geometry, and there are several exact solutions available (see [13, 14, 15]). In general, these solutions have O(n log n) time complexity, where n is the number of points considered.\nThe vectors Pj are uniformly sampled from [0, 1] \u00d7 [0, 1]. The elements Ci are indices between 1 and n corresponding to positions in the sequence P , or special tokens representing beginning or end of sequence. See Figure 2 (a) for an illustration.\n1We will release all the datasets at hidden for reference.\n(a) Input P = {P1, . . . , P10}, and the output sequence CP = {\u21d2, 2, 4, 3, 5, 6, 7, 2,\u21d0} representing its convex hull.\nP1\nP2\nP3\nP4\nP5\n(b) Input P = {P1, . . . , P5}, and the output CP = {\u21d2, (1, 2, 4), (1, 4, 5), (1, 3, 5), (1, 2, 3),\u21d0} representing its Delaunay Triangulation.\nFigure 2: Input/output representation for (a) convex hull and (b) Delaunay triangulation. The tokens \u21d2 and\u21d0 represent beginning and end of sequence, respectively."}, {"heading": "3.2 Delaunay Triangulation", "text": "A Delaunay triangulation for a setP of points in a plane is a triangulation such that each circumcircle of every triangle is empty, that is, there is no point from P in its interior. Exact O(n log n) solutions are available [16], where n is the number of points in P . In this example, the outputs CP = {C1, . . . , Cm(P)} are the corresponding sequences representing the triangulation of the point set P . Each Ci is a triple of integers from 1 to n corresponding to the position of triangle vertices in P or the beginning/end of sequence tokens. See Figure 2 (b). We note that any permutation of the sequence CP represents the same triangulation for P , additionally each triangle representation Ci of three integers can also be permuted. Without loss of generality, at training time, we order the triangles Ci by their incenter coordinates (lexicographic order) and choose the increasing triangle representation2. Without ordering, the models learned were not as good, and finding a better ordering that the Ptr-Net could better exploit is part of future work."}, {"heading": "3.3 Travelling Salesman Problem (TSP)", "text": "TSP arises in many areas of theoretical computer science and is an important algorithm used for microchip design or DNA sequencing. In our work we focused on the planar symmetric TSP: given a list of cities, we wish to find the shortest possible route that visits each city exactly once and returns to the starting point. Additionally, we assume the distance between two cities is the same in each opposite direction. This is an NP-hard problem which allows us to test the capabilities and limitations of our model.\nThe input/output pairs (P, CP) have a similar format as in the Convex Hull problem described in Section 3.1. P will be the cartesian coordinates representing the cities, which are chosen randomly in the [0, 1] \u00d7 [0, 1] square. CP = {C1, . . . , Cn} will be a permutation of integers from 1 to n representing the optimal path (or tour). For consistency, in the training dataset, we always start in the first city without loss of generality.\nTo generate exact data, we implemented the Held-Karp algorithm [17] which finds the optimal solution in O(2nn2) (we used it up to n = 20). For larger n, producing exact solutions is extremely costly, therefore we also considered algorithms that produce approximated solutions: A1 [18] and A2 [19], which are both O(n2), and A3 [20] which implements the O(n3) Christofides algorithm. The latter algorithm is guaranteed to find a solution within a factor of 1.5 from the optimal length. Table 2 shows how they performed in our test sets.\n2We choose Ci = (1, 2, 4) instead of (2,4,1) or any other permutation."}, {"heading": "4 Empirical Results", "text": ""}, {"heading": "4.1 Architecture and Hyperparameters", "text": "No extensive architecture or hyperparameter search of the Ptr-Net was done in the work presented here, and we used virtually the same architecture throughout all the experiments and datasets. Even though there are likely some gains to be obtained by tuning the model, we felt that having the same model hyperparameters operate on all the problems would make the main message of the paper stronger.\nAs a result, all our models used a single layer LSTM with either 256 or 512 hidden units, trained with stochastic gradient descent with a learning rate of 1.0, batch size of 128, random uniform weight initialization from -0.08 to 0.08, and L2 gradient clipping of 2.0. We generated 1M training example pairs, and we did observe overfitting in some cases where the task was simpler (i.e., for small n)."}, {"heading": "4.2 Convex Hull", "text": "We used the convex hull as the guiding task which allowed us to understand the deficiencies of standard models such as the sequence-to-sequence approach, and also setting up our expectations on what a purely data driven model would be able to achieve with respect to an exact solution.\nWe reported two metrics: accuracy, and area covered of the true convex hull (note that any simple polygon will have full intersection with the true convex hull). To compute the accuracy, we considered two output sequences C1 and C2 to be the same if they represent the same polygon. For simplicity, we only computed the area coverage for the test examples in which the output represents a simple polygon (i.e., without self-intersections). If an algorithm fails to produce a simple polygon in more than 1% of the cases, we simply reported FAIL.\nThe results are presented in Table 1. We note that the area coverage achieved with the Ptr-Net is close to 100%. Looking at examples of mistakes, we see that most problems come from points that are aligned (see Figure 3 (d) for a mistake for n = 500) \u2013 this is a common source of errors in most algorithms to solve the convex hull.\nIt was seen that the order in which the inputs are presented to the encoder during inference affects its performance. When the points on the true convex hull are seen \u201clate\u201d in the input sequence, the accuracy is lower. This is possibly the network does not have enough processing steps to \u201cupdate\u201d the convex hull it computed until the latest points were seen. In order to overcome this problem, we used the attention mechanism described in Section 2.2, which allows the decoder to look at the whole input at any time. This modification boosted the model performance significantly. We inspected what attention was focusing on, and we observed that it was \u201cpointing\u201d at the correct answer on the input side. This inspired us to create the Ptr-Net model described in Section 2.3.\nMore than outperforming both the LSTM and the LSTM with attention, our model has the key advantage of being inherently variable length. The bottom half of Table 1 shows that, when training our model on a variety of lengths ranging from 5 to 50 (uniformly sampled, as we found other forms of curriculum learning to not be effective), a single model is able to perform quite well on all lengths it has been trained on (but some degradation for n = 50 can be observed w.r.t. the model trained only on length 50 instances). More impressive is the fact that the model does extrapolate to lengths that it has never seen during training. Even for n = 500, our results are satisfactory and indirectly indicate that the model has learned more than a simple lookup. Neither LSTM or LSTM with attention can be used for any given n\u2032 6= n without training a new model on n\u2032."}, {"heading": "4.3 Delaunay Triangulation", "text": "The Delaunay Triangulation test case is connected to our first problem of finding the convex hull. In fact, the Delaunay Triangulation for a given set of points triangulates the convex hull of these points.\nWe reported two metrics: accuracy and triangle coverage in percentage (the percentage of triangles the model predicted correctly). Note that, in this case, for an input point set P , the output sequence C(P) is, in fact, a set. As a consequence, any permutation of its elements will represent the same triangulation.\nUsing the Ptr-Net model for n = 5, we obtained an accuracy of 80.7% and triangle coverage of 93.0%. For n = 10, the accuracy was 22.6% and the triangle coverage 81.3%. For n = 50, we did not produce any precisely correct triangulation, but obtained 52.8% triangle coverage. See the middle column of Figure 3 for an example for n = 50."}, {"heading": "4.4 Travelling Salesman Problem", "text": "We considered the planar symmetric travelling salesman problem (TSP), which is NP-hard as the third problem. Similarly to finding convex hulls, it also has sequential outputs. Given that the PtrNet implements an O(n2) algorithm, it was unclear if it would have enough capacity to learn a useful algorithm solely from data.\nAs discussed in Section 3.3, it is feasible to generate exact solutions for relatively small values of n to be used as training data. For larger n, due to the importance of TSP, good and efficient algorithms providing reasonable approximate solutions exist. We used three different algorithms in our experiments \u2013 A1, A2, and A3 (see Section 3.3 for references).\nTable 2 shows all of our results on TSP. The number reported is the length of the proposed tour. Unlike the convex hull and Delaunay triangulation cases, where the decoder was unconstrained, in\nthis example we set the beam search procedure to only consider valid tours. Otherwise, the Ptr-Net model would sometimes output an invalid tour \u2013 for instance, it would repeat two cities or decided to ignore a destination. This procedure was relevant for n > 20, where at least 10% of instances would not produce any valid tour.\nThe first group of rows in the table show the Ptr-Net trained on optimal data, except for n = 50, since that is not feasible computationally (we trained a separate model for each n). Interestingly, when using the worst algorithm (A1) data to train the Ptr-Net, our model outperforms the algorithm that is trying to imitate.\nThe second group of rows in the table show how the Ptr-Net trained on optimal data with 5 to 20 cities can generalize beyond that. The results are virtually perfect for n = 25, and good for n = 30, but it seems to break for 40 and beyond (still, the results are far better than chance). This contrasts with the convex hull case, where we were able to generalize by a factor of 10. However, the underlying algorithms are of far greater complexity than O(n log n), which could explain this phenomenon."}, {"heading": "5 Conclusions", "text": "In this paper we described Ptr-Net, a new architecture that allows us to learn a conditional probability of one sequence CP given another sequence P , where CP is a sequence of discrete tokens corresponding to positions in P . We show that Ptr-Nets can be used to learn solutions to three different combinatorial optimization problems. Our method works on variable sized inputs (yielding variable sized output dictionaries), something the baseline models (sequence-to-sequence with or without attention) cannot do directly. Even more impressively, they outperform the baselines on fixed input size problems - to which both the models can be applied.\nOur model draws inspiration from attention models proposed previously in [2, 5] and has strong connections to memory networks [6] that use content based attention. We use these mechanisms to choose outputs from input locations, thus opening up a new class of problems to which neural networks can be applied without artificial assumptions.\nFuture work will try and show its applicability to other problems such as sorting where the outputs are chosen from the inputs. We are also excited about the possibility of using this approach to other combinatorial optimization problems."}, {"heading": "Acknowledgments", "text": "We would like to thank Rafal Jozefowicz, Ilya Sutskever, Quoc Le and Samy Bengio for useful discussions on this topic. We would also like to thank Daniel Gillick for his help with the final manuscript."}], "references": [{"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V Le"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Neural turing machines", "author": ["Alex Graves", "Greg Wayne", "Ivo Danihelka"], "venue": "arXiv preprint arXiv:1410.5401,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Learning internal representations by error propagation", "author": ["David E Rumelhart", "Geoffrey E Hinton", "Ronald J Williams"], "venue": "Technical report, DTIC Document,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1985}, {"title": "An application of recurrent nets to phone probability estimation", "author": ["Anthony J Robinson"], "venue": "Neural Networks, IEEE Transactions on,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1994}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "ICLR", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Grammar as a foreign language", "author": ["Oriol Vinyals", "Lukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey Hinton"], "venue": "arXiv preprint arXiv:1412.7449,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Show and tell: A neural image caption generator", "author": ["Oriol Vinyals", "Alexander Toshev", "Samy Bengio", "Dumitru Erhan"], "venue": "In CVPR 2015, arXiv preprint arXiv:1411.4555,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "Long-term recurrent convolutional networks for visual recognition and description", "author": ["Jeff Donahue", "Lisa Anne Hendricks", "Sergio Guadarrama", "Marcus Rohrbach", "Subhashini Venugopalan", "Kate Saenko", "Trevor Darrell"], "venue": "arXiv preprint arXiv:1411.4389,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Learning to execute", "author": ["Wojciech Zaremba", "Ilya Sutskever"], "venue": "arXiv preprint arXiv:1410.4615,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1997}, {"title": "Unsupervised learning of video representations using lstms", "author": ["Nitish Srivastava", "Elman Mansimov", "Ruslan Salakhutdinov"], "venue": "ICML", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "On the identification of the convex hull of a finite set of points in the plane", "author": ["Ray A Jarvis"], "venue": "Information Processing Letters,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1973}, {"title": "An efficient algorith for determining the convex hull of a finite planar set", "author": ["Ronald L. Graham"], "venue": "Information processing letters,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1972}, {"title": "Convex hulls of finite sets of points in two and three dimensions", "author": ["Franco P. Preparata", "Se June Hong"], "venue": "Communications of the ACM,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1977}, {"title": "Efficient unstructured mesh generation by means of delaunay triangulation and bowyer-watson algorithm", "author": ["S1 Rebay"], "venue": "Journal of computational physics,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1993}, {"title": "Dynamic programming treatment of the travelling salesman problem", "author": ["Richard Bellman"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1962}], "referenceMentions": [{"referenceID": 0, "context": "Such problems cannot be trivially addressed by existent approaches such as sequence-to-sequence [1] and Neural Turing Machines [2], because the number of target classes in each step of the output depends on the length of the input, which is variable.", "startOffset": 96, "endOffset": 99}, {"referenceID": 1, "context": "Such problems cannot be trivially addressed by existent approaches such as sequence-to-sequence [1] and Neural Turing Machines [2], because the number of target classes in each step of the output depends on the length of the input, which is variable.", "startOffset": 127, "endOffset": 130}, {"referenceID": 2, "context": "Recurrent Neural Networks (RNNs) have been used for learning functions over sequences from examples for more than three decades [3].", "startOffset": 128, "endOffset": 131}, {"referenceID": 3, "context": "[4]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "The recently introduced sequence-to-sequence paradigm [1] removed these constraints by using one RNN to map an input sequence to an embedding and another (possibly the same) RNN to map the embedding to an output sequence.", "startOffset": 54, "endOffset": 57}, {"referenceID": 4, "context": "augmented the decoder by propagating extra contextual information from the input using a content-based attentional mechanism [5, 2, 6].", "startOffset": 125, "endOffset": 134}, {"referenceID": 1, "context": "augmented the decoder by propagating extra contextual information from the input using a content-based attentional mechanism [5, 2, 6].", "startOffset": 125, "endOffset": 134}, {"referenceID": 0, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 174, "endOffset": 180}, {"referenceID": 4, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 174, "endOffset": 180}, {"referenceID": 5, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 193, "endOffset": 196}, {"referenceID": 6, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 225, "endOffset": 231}, {"referenceID": 7, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 225, "endOffset": 231}, {"referenceID": 1, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 277, "endOffset": 284}, {"referenceID": 8, "context": "These developments have made it possible to apply RNNs to new domains, achieving state-of-the-art results in core problems in natural language processing such as translation [1, 5] and parsing [7], image and video captioning [8, 9], and even learning to execute small programs [2, 10].", "startOffset": 277, "endOffset": 284}, {"referenceID": 4, "context": "In this paper, we address this limitation by repurposing the attention mechanism of [5] to create pointers to input elements.", "startOffset": 84, "endOffset": 87}, {"referenceID": 0, "context": "The output dimensionality is fixed by the dimensionality of the problem and it is the same during training and inference [1].", "startOffset": 121, "endOffset": 124}, {"referenceID": 4, "context": "At each step, the generating network produces a vector that modulates a content-based attention mechanism over inputs ([5, 2]).", "startOffset": 119, "endOffset": 125}, {"referenceID": 1, "context": "At each step, the generating network produces a vector that modulates a content-based attention mechanism over inputs ([5, 2]).", "startOffset": 119, "endOffset": 125}, {"referenceID": 0, "context": "We review the sequence-to-sequence [1] and input-attention models [5] that are the baselines for this work in Sections 2.", "startOffset": 35, "endOffset": 38}, {"referenceID": 4, "context": "We review the sequence-to-sequence [1] and input-attention models [5] that are the baselines for this work in Sections 2.", "startOffset": 66, "endOffset": 69}, {"referenceID": 0, "context": "As in [1], we use an Long Short Term Memory (LSTM) [11] to model p\u03b8(Ci|C1, .", "startOffset": 6, "endOffset": 9}, {"referenceID": 9, "context": "As in [1], we use an Long Short Term Memory (LSTM) [11] to model p\u03b8(Ci|C1, .", "startOffset": 51, "endOffset": 55}, {"referenceID": 4, "context": "The attention model of [5] ameliorates this problem by augmenting the encoder and decoder RNNs with an additional neural network that uses an attention mechanism over the entire sequence of encoder RNN states.", "startOffset": 23, "endOffset": 26}, {"referenceID": 4, "context": "Both our method and the attention model can be seen as an application of content-based attention mechanisms proposed in [6, 5, 2].", "startOffset": 120, "endOffset": 129}, {"referenceID": 1, "context": "Both our method and the attention model can be seen as an application of content-based attention mechanisms proposed in [6, 5, 2].", "startOffset": 120, "endOffset": 129}, {"referenceID": 10, "context": "Without the constraints, the predictions are bound to become blurry over longer sequences as shown in sequence-to-sequence models for videos [12].", "startOffset": 141, "endOffset": 145}, {"referenceID": 0, "context": "In all cases, we sample from a uniform distribution in [0, 1] \u00d7 [0, 1].", "startOffset": 55, "endOffset": 61}, {"referenceID": 0, "context": "In all cases, we sample from a uniform distribution in [0, 1] \u00d7 [0, 1].", "startOffset": 64, "endOffset": 70}, {"referenceID": 11, "context": "Finding the convex hull of a finite number of points is a well understood task in computational geometry, and there are several exact solutions available (see [13, 14, 15]).", "startOffset": 159, "endOffset": 171}, {"referenceID": 12, "context": "Finding the convex hull of a finite number of points is a well understood task in computational geometry, and there are several exact solutions available (see [13, 14, 15]).", "startOffset": 159, "endOffset": 171}, {"referenceID": 13, "context": "Finding the convex hull of a finite number of points is a well understood task in computational geometry, and there are several exact solutions available (see [13, 14, 15]).", "startOffset": 159, "endOffset": 171}, {"referenceID": 0, "context": "The vectors Pj are uniformly sampled from [0, 1] \u00d7 [0, 1].", "startOffset": 42, "endOffset": 48}, {"referenceID": 0, "context": "The vectors Pj are uniformly sampled from [0, 1] \u00d7 [0, 1].", "startOffset": 51, "endOffset": 57}, {"referenceID": 14, "context": "Exact O(n log n) solutions are available [16], where n is the number of points in P .", "startOffset": 41, "endOffset": 45}, {"referenceID": 0, "context": "P will be the cartesian coordinates representing the cities, which are chosen randomly in the [0, 1] \u00d7 [0, 1] square.", "startOffset": 94, "endOffset": 100}, {"referenceID": 0, "context": "P will be the cartesian coordinates representing the cities, which are chosen randomly in the [0, 1] \u00d7 [0, 1] square.", "startOffset": 103, "endOffset": 109}, {"referenceID": 15, "context": "To generate exact data, we implemented the Held-Karp algorithm [17] which finds the optimal solution in O(2n) (we used it up to n = 20).", "startOffset": 63, "endOffset": 67}, {"referenceID": 0, "context": "LSTM [1] 50 50 1.", "startOffset": 5, "endOffset": 8}, {"referenceID": 4, "context": "9% FAIL +ATTENTION [5] 50 50 38.", "startOffset": 19, "endOffset": 22}, {"referenceID": 0, "context": "9% LSTM [1] 5 5 87.", "startOffset": 8, "endOffset": 11}, {"referenceID": 0, "context": "6% LSTM [1] 10 10 29.", "startOffset": 8, "endOffset": 11}, {"referenceID": 1, "context": "Our model draws inspiration from attention models proposed previously in [2, 5] and has strong connections to memory networks [6] that use content based attention.", "startOffset": 73, "endOffset": 79}, {"referenceID": 4, "context": "Our model draws inspiration from attention models proposed previously in [2, 5] and has strong connections to memory networks [6] that use content based attention.", "startOffset": 73, "endOffset": 79}], "year": 2015, "abstractText": "We introduce a new neural architecture to learn the conditional probability of an output sequence with elements that are discrete tokens corresponding to positions in an input sequence. Such problems cannot be trivially addressed by existent approaches such as sequence-to-sequence [1] and Neural Turing Machines [2], because the number of target classes in each step of the output depends on the length of the input, which is variable. Problems such as sorting variable sized sequences, and various combinatorial optimization problems belong to this class. Our model solves the problem of variable size output dictionaries using a recently proposed mechanism of neural attention. It differs from the previous attention attempts in that, instead of using attention to blend hidden units of an encoder to a context vector at each decoder step, it uses attention as a pointer to select a member of the input sequence as the output. We call this architecture a Pointer Net (Ptr-Net). We show Ptr-Nets can be used to learn approximate solutions to three challenging geometric problems \u2013 finding planar convex hulls, computing Delaunay triangulations, and the planar Travelling Salesman Problem \u2013 using training examples alone. Ptr-Nets not only improve over sequence-to-sequence with input attention, but also allow us to generalize to variable size output dictionaries. We show that the learnt models generalize beyond the maximum lengths they were trained on. We hope our results on these tasks will encourage a broader exploration of neural learning for discrete problems.", "creator": "LaTeX with hyperref package"}}}