{"id": "1506.04891", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jun-2015", "title": "Author Identification using Multi-headed Recurrent Neural Networks", "abstract": "Recurrent neural networks (RNNs) are very good at modelling the flow of text, but typically need to be trained on a far larger corpus than is available for the PAN 2015 Author Identification task. This paper describes a novel approach where the output layer of a character-level RNN language model is split into several independent predictive sub-models, each representing an author, while the recurrent layer is shared by all. This allows the recurrent layer to model the language as a whole without over-fitting, while the outputs select aspects of the underlying model that reflect their author's style and preferences.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Tue, 16 Jun 2015 09:41:55 GMT  (503kb)", "http://arxiv.org/abs/1506.04891v1", "8 pages, 3 figures Notebook for the PAN@CLEF Author Identification challange"], ["v2", "Tue, 16 Aug 2016 05:04:57 GMT  (502kb)", "http://arxiv.org/abs/1506.04891v2", "8 pages, 3 figures Version 1 was a notebook for the PAN@CLEF Author Identification challenge. Version 2 is expanded to be a full paper for CLEF2016"]], "COMMENTS": "8 pages, 3 figures Notebook for the PAN@CLEF Author Identification challange", "reviews": [], "SUBJECTS": "cs.CL cs.LG cs.NE", "authors": ["douglas bagnall"], "accepted": false, "id": "1506.04891"}, "pdf": {"name": "1506.04891.pdf", "metadata": {"source": "CRF", "title": "Author Identification using multi-headed Recurrent Neural Networks Notebook for PAN at CLEF 2015", "authors": ["Douglas Bagnall"], "emails": ["douglas@halo.gen.nz"], "sections": [{"heading": "1 Introduction", "text": "A recurrent neural network (RNN) is a feed forward neural network that shares parameters across time. At each time step t, a simple RNN has a hidden vector ht derived from the input vector xt and the previous hidden state ht\u22121. The hidden vector is usually obtained via an affine transform offset by a bias vector bh, followed by a non-linear \u201cactivation\u201d function, fh, which operates in a point-wise manner, giving the formula ht = fh(Whhht\u22121 +Wxhxt + bh). The output vector yt is similarly obtained from the hidden state, with yt = fy(Whyht+ by), though the non-linear function fy is often not point-wise. When a discrete probability distribution is desired, the \u201csoftmax\u201d function\n\u03c3(z)j = ezj\u2211 k e zk\nis common because it gives a correct distribution (all values positive and summing to 1) and has useful properties when it comes to training the network. See figure 1.\nThe self-referential hidden state allows the network to model complex time series processes. Training it to do so involves iteratively adjusting the weights and biases, usually using some form of gradient descent and back-propagation through time (BPTT). For the sake of brevity, the details of these algorithms are elided. Tom\u00e1\u0161 Mikolov\u2019s PhD thesis [1] offers a good introduction to these algorithms and the use of simple recurrent neural networks for language modelling, a task he shows they excel at.\nA language model predicts the flow of text, one symbol at a time, estimating a probability distribution for the i-th symbol xi given its predecessors, or p(xi|xi\u22121, xi\u22122, . . . , x1), where the symbols belong to a predetermined vocabulary. Language models for alphabetic languages are usually word-based or character-based, with the former having a large vocabulary with inevitable gaps, while the latter have a small vocabulary with few omissions. Word-based models achieve better results that in general, but require a lot of text and time to train. Character-based models perform better with tiny amounts of text and cope better with idiosyncratic usages. Figure 2 shows a character-based language model trying to navigate its way through the character sequence cat.\nThe accuracy of a language model for a document can be measured as bits of cross entropy which is the mean negative binary log probability the model assigns to the symbols that actually occur. For a document made up of N characters, this is 1N \u2211N i \u2212 log2 p(xi|xi\u22121, xi\u22122, . . . , x1). Cross-entropy can be thought of a measure of the information the model fails to model. A language model that predicts every character in a document with probability 1 will result in a zero cross-entropy; on the other hand assigning probability 0 to an occurring character is very costly.\nSupposing training is effective, a language model will better predict the flow of documents similar to the ones it was trained on\u2014if that similarity is capturable by the model\u2014and this will show up as reduced cross entropy relative to unrelated documents. The PAN author identification problem consists of 100\nmini-corpora for each language.[3] 1 Each mini-corpus contains 1 to 5 documents known to be by a single author. These documents amount to a few thousand characters\u2014generally fewer than in this paper\u2014and the task is to decide whether another short document is by the same author. The unknown documents differ from the known ones in topic or genre.\nIt is plausible that a character-level RNN language model trained on an author\u2019s known output will match that author\u2019s unknown output more closely than it matches text written by others. Conventional language models are trained on millions of characters, and will severely over-fit on a corpus of a few thousand. To combat this, a multi-headed character-level language model is introduced, which shares a common recurrent state but multiple independent softmax output groups. Each softmax group is trained predominantly on one author\u2019s corpus, causing the recurrent layer to model a combination of all the author\u2019s texts, approximating the language as a whole. The output groups learn to weight the recurrent values in a way that best reflects their authors tendencies. Figure 3 attempts to illustrate this.\n1 http://www.uni-weimar.de/medien/webis/events/pan-15/pan15-web/authoridentification.html has more information on the task. This paper was written in the context of that challenge and assumes some awareness of it."}, {"heading": "2 Method", "text": ""}, {"heading": "2.1 Text preprocessing", "text": "The known and unknown texts are mapped to a smaller character set to reduce computational complexity and remove the overwhelming self-importance of extremely rare characters. A separate mapping is used for each language.\nThe text is first converted into the NFKD unicode normal form, which decomposes accented letters into the letter followed by the a combining accent (for example, the code point <U+00E0> (\u201c\u00e0\u201d) becomes <U+0061><U+0300> (\u201ca\u201d followed by a combining grave marker). Capital letters are further decomposed into an uppercase marker followed by the corresponding lowercase letter. Thus \u00c0 becomes the triplet <right-combining uppercase modifier> a <left-combining grave accent>.\nVarious rare characters that seemed largely equivalent are mapped together; for example the en-dash (\u201c\u2013\u201d) and em-dash (\u201c\u2014\u201d) are rare and appear to be used interchangeably in practice so these are mapped together. Some punctuation marks\u2014such as the various forms of apostrophes and single quotation marks\u2014are collapsed into canonical forms. It is likely that this discards some usable information\u2014indications of finger habits or choice of software\u2014but the avoidance of extremely rare characters is important. If only one author in the corpus uses a character, it may be assigned an excessive weight.\nFor the Greek text, all Latin characters are mapped to the letter s, arbitrarily chosen because it doesn\u2019t resemble a Greek character. The rationale is that\nforeign quotations and references appear too rarely for their content to be valuable and an attempt to model them would be wasteful, but the tendency to use them might be a useful signal. Following similar logic, all digits in all languages are mapped to 7. Runs of whitespace are collapsed into a single space.\nAt the end of this processing, any character with a frequency lower than 1 in 10,000 is discarded. Any characters occurring in a text but not in the resultant alphabet are ignored\u2014there is no \u201cunknown\u201d token. Alphabet sizes are 39 for English, 47 for Dutch and Greek, and 51 for Spanish.\nFinally, runs of more than 5 identical characters are truncated at 5. This is mainly aimed at the latin stretches in Greek text; there is little value in having the model try to guess the exact word length in a language it can\u2019t directly see. As an example, the following Greek text (the last paragraph of GR094/known02.txt in the training set):\n\u00ab\u03a4his\u00bb, \u03bc\u03bf\u03c5\u03c1\u03bc\u03bf\u03c5\u03c1\u03af\u03b6\u03b5\u03b9 \u03c7\u03b1\u03bc\u03bf\u03b3\u03b5\u03bb\u03ce\u03bd\u03c4\u03b1\u03c2 \u03bc\u03b5\u03bb\u03b1\u03b3\u03c7\u03bf\u03bb\u03b9\u03ba\u03ac \u03bf \u0391\u03bc\u03b5\u03c1\u03b9\u03ba\u03ac\u03bd\u03bf\u03c2, \u03b1\u03ba\u03bf\u03cd\u03b3\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u03a3\u03b1\u03bb\u03bf\u03bd\u03b9\u03ba\u03b9\u03cc \u00abis the beginning of a beautiful friendship\u00bb. \u03a0\u03b1\u03af\u03be\u03c4\u03bf \u03be\u03b1\u03bd\u03ac.\nmaps to this:\n\u00ab\u00b9\u03c4sss\u00bb, \u03bc\u03bf\u03c5\u03c1\u03bc\u03bf\u03c5\u03c1\u03b9\u00b2\u03b6\u03b5\u03b9 \u03c7\u03b1\u03bc\u03bf\u03b3\u03b5\u03bb\u03c9\u00b2\u03bd\u03c4\u03b1\u03c2 \u03bc\u03b5\u03bb\u03b1\u03b3\u03c7\u03bf\u03bb\u03b9\u03ba\u03b1\u00b2 \u03bf \u00b9\u03b1\u03bc\u03b5\u03c1\u03b9\u03ba\u03b1\u00b2\u03bd\u03bf\u03c2, \u03b1\u03ba\u03bf\u03c5\u00b2\u03b3\u03bf\u03bd\u03c4\u03b1\u03c2 \u03c4\u03bf \u00b9\u03c3\u03b1\u03bb\u03bf\u03bd\u03b9\u03ba\u03b9\u03bf\u00b2 \u00abss sss sssss ss s sssss sssss\u00bb. \u00b9\u03c0\u03b1\u03b9\u00b2\u03be\u03c4\u03bf \u03be\u03b1\u03bd\u03b1\u00b2.\nwhere the superscript \u00b9 represents a capital marker attaching to the next character, while the superscript \u00b2 is an acute belonging to the previous character. In this case the transformation reveals that the author has spelt \u201cThis\u201d with an uppercase \u03c4 (tau) instead of the visually identical uppercase t.\nThe character mappings were settled before training started and no attempts were made to test their efficacy."}, {"heading": "2.2 Multi-headed recurrent neural network language model", "text": "This concept was briefly introduced in section 1. A single recurrent neural network is trained to predict the flow of text by many authors while sharing a collective model of the complete language. The output layer has a softmax group for each author, and sometimes another for a \u201ccontrol corpus\u201d\u2014a large body of text intended to help prevent over-fitting in the recurrent layer. For convenience the PAN 2014 training set is used for the control corpora. It turns out that there is some overlap between the 2014 and 2015 training sets (and possibly test sets), so the control corpora are not completely independent. Empirically they seem to have a very small positive effect."}, {"heading": "2.3 ReSQRT activation", "text": "The activation function used for the recurrent layer is a rectified shifted square root, or ReSQRT, defined as\nf(x) =\n{\u221a x+ 1\u2212 1 if x \u2265 0\n0 otherwise.\nThe derivative is 1 2 \u221a x+1 for x > 0, and otherwise 0. In terms of y = f(x) (which is of practical use in training) the non-zero part is 12(y+1) . This follows the model of the widely used rectified linear unit (ReLU,[2] defined as f(x) = max(x, 0)) in that the output and derivative is zero for all non-positive numbers, which offers performance and propagative benefits and allows neurons to opt out of opining on areas outside their speciality. ReLU can be difficult to use in recurrent neural networks as the lack of inherent scale means it can slip into an explosive cycle of amplification more easily than conventional squashing activations like tanh. ReSQRT steers a middle course, and empirically works well for character based language models. The ReSQRT activation may not have been described before.\nThe training uses a form of adagrad learning, where the rate at which a weight can change is inversely proportional to the L2 distance that it has already changed. This amounts to a monotonically decreasing per-weight learning rate."}, {"heading": "2.4 Training", "text": "Training is structured as a number of \u201csub-epochs\u201d. In a sub-epoch each author provides a training text. Where there is one text for every author, a sub-epoch is the same as a conventional epoch; otherwise the author\u2019s texts are used in a cyclical way. In some runs all the texts of each author are concatenated\u2014in these cases the sub-epoch is also a true epoch. In another mode, each sub-epoch is \u201cbalanced\u201d, with documents being drawn from each author until each has been trained around the same amount.\nAt each training step there is a chance of the training example \u201cleaking\u201d and affecting other authors, as if they had also made that particular choice of character. The initial leakage rate is in the order of 1/N where N is the number of authors, and it decays exponentially with each sub-epoch. Towards the end of training, the leakage rate is very low and each author\u2019s sub-model is being trained almost entirely on its own text. The parameters are thus roughly set during early training with high leakage and high learning rate, then refined to specialise on the author\u2019s style.\nA mini-batch size of 40 is used, meaning the weights are modified by the accumulated deltas after every 40 characters. The training gradient for first 10 characters of each text is ignored. BPTT is truncated at a depth of 70, or sooner when the gradient diminishes below an adaptive threshold. The hidden layer is quite small; experiments with larger sizes showed no benefit.\nWhere there is a single \u201cknown\u201d text, and it is significantly shorter than the \u201cunknown\u201d text, the two are swapped around and the RNN is trained on the unknown text. Insufficient training text, which causes over-fitting, is worse than insufficient test text which only increases uncertainty.\nThe recurrent neural network code is written in C while the PAN specific parts are Python.2"}, {"heading": "2.5 Ensemble of variations", "text": "The final results combine several runs together, using a variety of configurations of meta-parameters. Approximate ranges are shown in table 1. Each run consists of a training phase lasting several minutes or hours followed by the calculation of cross entropies for the unknown documents, which takes less than a second.\nSets of seemingly reasonable meta-parameters are chosen per-language via a haphazard search, and random selections of these configurations are used in the the evaluation ensembles. 3 The evaluations are run with a time-out; after a set number of hours all the test scores obtained are averaged together. The length of time dedicated to each ensemble was determined by the looming submission deadline.\nIn tests with the training set (and in line with received wisdom), ensembles performed slightly better than the majority of their constituents. 2 See https://github.com/douglasbagnall/recur and https://github.com/pan-webisde/caravel for software details.\n3 The configuration pools from which the ensembles were chosen can be found at https://github.com/pan-webis-de/caravel/tree/master/config. Some decoding is necessary."}, {"heading": "2.6 Interpretation", "text": "With N authors, the system produces N cross entropy scores for each document. The scores are not directly comparable to each other as there is both random variation in the various sub-models\u2019 performance and inherent variation in the texts\u2019 predictability. The scores were normalised on both axes. For each author\u2019s sub-model, the ranking of the score for the unknown text determines the probability that the author wrote the text. For example, if a text ranks first (i.e. has the lowest score) it is likely to be that author\u2019s work; if it ranks last, it is probably not. This system is likely not the best, but it worked well enough and got forgotten about.\nThe final score must take the form of a probability between 0 and 1, with 0.5 having special significance for the C@1 calculation. The task is designed so that in exactly half the cases the unknown documents are by the known author, so (supposing confidence in the model) the correct way to align the 0.5 point is to take the median. Documents ranking better than the median receive a score above 0.5 linearly related to their ranking, while those ranking worse than the median receive a lower score. For the Spanish, Greek, and English tasks a small radius around the median was also assigned an 0.5 score."}, {"heading": "3 Results", "text": "Results are shown in table 2.\nThe evaluation score for the Greek task is higher than expected, based on experiments with the training set, while that for Spanish is lower. The English and Dutch results are no surprise."}, {"heading": "4 Discussion", "text": "While this method obviously has some merit, there are weaknesses too. The consistently bad results for the Dutch task seem to reflect a drastic genre difference between the known and unknown texts. Many competitors did a lot better in this task, presumably by not concentrating on the local flow of characters and instead using linguistic knowledge or otherwise deriving longer range features.\nOne the other hand, where the genre and topic seem closer, this model performs very well despite using no specialist linguistic or natural language processing techniques. It ought to extrapolate well to other languages. It also ought to perform very well in concert with unrelated methods.\nWithout an active recurrent layer the model falls to predicting unigram character probabilities per author via the output bias vector. The cross entropy in this case amounts to weighting the frequencies of characters in the text. When (accidentally) run this way on the training set, the AUC score was 0.85 for English and 0.91 for Spanish; for English this was one of the best training results. While this is humiliating for the RNN, it confirms the validity of the training and scoring methods. By being entirely additive, cross entropy sidesteps the curse of dimensionality. It also eschews (perhaps too much) the possibility of an aha moment involving strong positive evidence\u2014positive evidence is typically accumulated a fraction of a bit at a time over the course of the entire document. This is in contrast to a typical human approach of identifying idiosyncratic usages and ignoring the boring bits in between; this contrast means the RNN might do well in ensembles with people. An RNN that directly reported an authorship probability distribution is conceivable but is unlikely to be easy to train. The character level language model learns to concentrate on the text; a more direct approach is likely to be more distracted. Tirelessly trying to understand the text is the strength of this method."}], "references": [{"title": "Statistical Language Models Based on Neural Networks", "author": ["T. Mikolov"], "venue": "Ph.D. thesis, Ph. D. thesis, Brno University of Technology", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["V. Nair", "G.E. Hinton"], "venue": "Proceedings of the 27th International Conference on Machine Learning (ICML-10). pp. 807\u2013814", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2010}, {"title": "Overview of the Author Identification Task at PAN 2015", "author": ["E. Stamatatos", "W. Daelemans", "B. Verhoeven", "P. Juola", "A. Lopez Lopez", "M. Potthast", "B. Stein"], "venue": "Working Notes Papers of the CLEF 2015 Evaluation Labs. CEUR Workshop Proceedings, CLEF and CEUR-WS.org (Sep", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "Tom\u00e1\u0161 Mikolov\u2019s PhD thesis [1] offers a good introduction to these algorithms and the use of simple recurrent neural networks for language modelling, a task he shows they excel at.", "startOffset": 27, "endOffset": 30}, {"referenceID": 2, "context": "[3] 1 Each mini-corpus contains 1 to 5 documents known to be by a single author.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "This follows the model of the widely used rectified linear unit (ReLU,[2] defined as f(x) = max(x, 0)) in that the output and derivative is zero for all non-positive numbers, which offers performance and propagative benefits and allows neurons to opt out of opining on areas outside their speciality.", "startOffset": 70, "endOffset": 73}], "year": 2015, "abstractText": "Recurrent neural networks (RNNs) are very good at modelling the flow of text, but typically need to be trained on a far larger corpus than is available for the PAN Author Identification task. This paper describes a novel approach where the output layer of a characterlevel RNN language model is split into several independent predictive clusters, each representing an author, while the recurrent layer is shared by all. This model allows the recurrent layer to model the language as a whole without over-fitting, while the outputs select aspects of the underlying model that reflect their author\u2019s style. The method proved to be quite competitive.", "creator": " XeTeX output 2015.06.13:2127"}}}