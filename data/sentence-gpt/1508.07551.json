{"id": "1508.07551", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Aug-2015", "title": "X-TREPAN: a multi class regression and adapted extraction of comprehensible decision tree in artificial neural networks", "abstract": "In this work, the TREPAN algorithm is enhanced and extended for extracting decision trees from neural networks. We empirically evaluated the performance of the algorithm on a set of databases from real world events. This benchmark enhancement was achieved by adapting Single-test TREPAN and C4CLM3 to parallel GPUs and running the benchmarking using a single test program. We further investigated the performance of the algorithm by combining single-test TREPAN and C4CLM3 (for multi-tasking tasks, C4CLM3 is a single test program only). We are particularly pleased to report a significant increase in the performance of the benchmarking algorithm for this particular task.\n\n\n\nWe are using a set of 10-layer networked models (one with two layers on the top layer, one with two layers on the bottom layer) to compute the final network size. Using the C4CLM3 benchmarking program, the network size is now more than twice the size of the network, and in the mean time time we are using it, a network length in a range of 1.4 million hours. A network size of approximately 200 thousand hours is a factor of two.\n\n\nThe network size has been adjusted to the average bandwidth of a typical cluster on the top layer (for single-test task tasks) for the entire time of the benchmarking program. For each of the 10-layer network nodes with four layers on the top layer, the average bandwidth of a typical cluster of 5.8 million hours is 20.4 hours, compared with about 5.8 million hours for a single-test task.\nThe overall network size is approximately 1.3 million hours. We have chosen to increase the average bandwidth of the network by 5-10 times. To optimize the network size, the network size was adjusted to the average bandwidth of the network on the top layer.\nFor each of the 10-layer network nodes with 4 layers on the top layer, the average bandwidth of a typical cluster of 4.9 million hours is 3.4 hours, compared with about 5.8 million hours for a single-test task. For each of the 10-layer network nodes with 4 layers on the top layer, the average bandwidth of a typical cluster of 4.4 million hours is 3.4 hours, compared with about 5.8 million hours for a single-test task. For each of the 10-layer network nodes with 4 layers on the top layer, the average bandwidth of a typical cluster", "histories": [["v1", "Sun, 30 Aug 2015 10:14:48 GMT  (415kb)", "http://arxiv.org/abs/1508.07551v1", "17 Pages, 8 Tables, 8 Figures, 6 Equations"]], "COMMENTS": "17 Pages, 8 Tables, 8 Figures, 6 Equations", "reviews": [], "SUBJECTS": "cs.LG cs.NE", "authors": ["awudu karim", "shangbo zhou"], "accepted": false, "id": "1508.07551"}, "pdf": {"name": "1508.07551.pdf", "metadata": {"source": "META", "title": "X-TREPAN", "authors": ["Awudu Karim", "Shangbo Zhou"], "emails": ["awudubody@yahoo.com"], "sections": [{"heading": null, "text": "In this work, the TREPAN algorithm is enhanced and extended for extracting decision trees from neural networks. We empirically evaluated the performance of the algorithm on a set of databases from real world events. This benchmark enhancement was achieved by adapting Single-test TREPAN and C4.5 decision tree induction algorithms to analyze the datasets. The models are then compared with X-TREPAN for comprehensibility and classification accuracy. Furthermore, we validate the experimentations by applying statistical methods. Finally, the modified algorithm is extended to work with multi-class regression problems and the ability to comprehend generalized feed forward networks is achieved.\nKEYWORDS:\nNeural Network, Feed Forward, Decision Tree, Extraction, Classification, Comprehensibility."}, {"heading": "1. INTRODUCTION", "text": "Artificial neural networks are modeled based on the human brain architecture. They offer a means of efficiently modeling large and complex problems in which there are hundreds of independent variables that have many interactions. Neural networks generate their own implicit rules by learning from examples. Artificial neural networks have been applied to a variety of problem domains [1] such as medical diagnostics [2], games [3], robotics [4], speech generation [5] and speech recognition [6]. The generalization ability of neural networks has proved to be superior to other learning systems over a wide range of applications [7].\nHowever despite their relative success, the further adoption of neural networks in some areas has been impeded due to their inability to explain, in a comprehensible form, how a decision has been arrived at. This lack of transparency in the neural network\u2019s reasoning has been termed the Black Box problem. Andrews et al. [8] observed that ANNs must obtain the capability to explain their decision in a human-comprehensible form before they can gain widespread acceptance and to enhance their overall utility as learning and generalization tools. This work intends to enhance TREPAN to be able to handle not only multi-class classification type but also multi-class regression type problems. And also to demonstrate that X-TREPAN can understand and analyze generalized feed forward networks (GFF). TREPAN is tested on different datasets and best settings for TREPAN algorithm are explored based on database type to generate heuristics for various problem domains. The best TREPAN model is then compared to the baseline C4.5 decision tree algorithm to test for accuracy.\nNeural networks store their \u201cKnowledge\u201d in a series of real-valued weight matrices representing a combination of nonlinear transforms from an input space to an output space. Rule extraction attempts to translate this numerically stored knowledge into a symbolic form that can be readily comprehended. The ability to extract symbolic knowledge has many potential advantages: the knowledge obtained from the neural network can lead to new insights into patterns and dependencies within the data; from symbolic knowledge, it is easier to see which features of the\ndata are the most important; and the explanation of a decision is essential for many applications, such as safety critical systems. Andrews et al. and Ticke et al. [9], [10] summarize several proposed approaches to rule extraction. Many of the earlier approaches required a specialized neural network architectures or training schemes. This limited their applicability; in particular they cannot be applied to in situ neural networks. The other approach is to view the extraction process as learning task. This approach does not examine the weight matrices directly but tries to approximate the neural network by learning its input-output mappings. Decision trees are a graphical representation of a decision process. The combination of symbolic information and graphical presentation make decision trees one of the most comprehensible representations of pattern recognition knowledge."}, {"heading": "2. BACKGROUND AND LITERATURE REVIEW", "text": ""}, {"heading": "2.1 Artificial Neural Network", "text": "Artificial neural networks as the name implies are modeled on the architecture of the human brain. They offer a means of efficiently modeling large and complex problems in which there may be hundreds of independent variables that have many interactions. Neural networks learn from examples by generating their own implicit rules. The generalization ability of neural networks has proved to be equal or superior to other learning systems over a wide range of applications."}, {"heading": "2.2 Neural Network Architecture", "text": "A neural network consists of a large number of units called processing elements or nodes or neurons that are connected on a parallel scale. The network starts with an input layer, where each node corresponds to an independent variable. Input nodes are connected to a number of nodes in a hidden layer. There may be more than one hidden layer and an output layer. Each node in the hidden layer takes in a set of inputs (X1, X2, \u2026, Xm), multiplies them by a connection weight (W1, W2, \u2026, Wm), then applies a function, f(WTX) to them and then passes the output to the nodes of the next layer. The connection weights are the unknown parameters that are estimated by an iterative training method to indicate the connection\u2019s strength and excitation. The calculation of the final outputs of the network proceeds layer by layer [11]. Each processing element of the hidden layer computes its output as a function of linear combination of inputs from the previous layer plus a bias. This output is propagated as input to the next layer and so on until the final layer is reached. Figure 1 shows the model of a single neuron [12]\nThe output of the neuron can be expressed as\nIn the above equations, W is the weight vector of the neural node, defined as\n[ ]TmwwwwW .......,.........,, 321= and X is the input vector , defined as\n[ ]TmxxxxX .......,.........,, 321= Figure 2. Shows a typical neural network architecture representation.\nThese are different types of activation functions that can be applied at the node of the network. Two of the most commonly used neural network functions are the hyperbolic and logistic (or sigmoid) functions. They are sometimes referred to as \u201csquashing\u201d functions since they map the inputs into a bounded range. Table 1 shows a list of activation functions that are available for use in neural networks\nHyperbolic\nExponential xx\nxx\nee\nee \u2212\n\u2212\n+ \u2212\nxe\n( )1,1+\u2212\n( )+\u221e,0\nSoftmax\n\u2211 \u2212\ni\nx\nx\nie\ne\n( )1,0 +\nUnit Sum\nSquare root \u2211 i ix\nx\nx\n( )1,0 +\n( )+\u221e,0\nSine\nRamp\nStep\n( )xSin\n \n \n\n+\u2265+\n<\u2212\n\u2212\u2264\u2212\n1,1\n1,\n1,1\nx\nxx\nx\n   \u2265+ < 0,1 0,0 x x\n( )1,0 +\n( )1,1+\u2212\n( )1,0 +"}, {"heading": "2.3 Multilayer Perceptrons", "text": "Multilayer Perceptrons (MLOs) are layered feed forward networks typically trained with back propagation. These networks have been used in numerous applications. Their main advantage is that they are easy to use, and that they can approximate any input/output map. A major disadvantage is that they train slowly, require lots of training data (typically three times more training samples then network weights)[14].\nFigure 3. A schematic Multilayered Perceptron Network\nA Generalized Feed Forward (GFF) network is a special case of a Multilayer Perception wherein connections can jump over one or more layers. Although an MLP can solve any problem that a GFF can solve, in practice, a GFF network can solve the problem more efficiently [14]. Figure 4 shows a general schematic of a Generalized Feed Forward Network."}, {"heading": "2.4 Neural Networks for Classification and Regression", "text": "Neural networks are one of the most widely used algorithms for classification problems. The output layer is indicative of the decision of the classifier. The cross entropy error function is most commonly used in classification problems in combination with logistic or soft max activation functions. Cross entropy assumes that the probability of the predicated values in a classification problem lie between 0 and 1. In a classification problem each output node of a neural network represents a different hypothesis and the node activations represent the probability that each hypothesis may be true. Each output node represents a probability distribution and the cross entropy measures calculate the difference between the network distribution and the actual distribution [15]. Assigning credit risk (good or bad) is an example of a neural network classification problem. Regression involves prediction the values of a continuous variable based on previously collected data. Mean square error is the function used for computing the error in regression networks. Projecting the profit of a company based on previous year\u2019s data is regression type neural network problem."}, {"heading": "2.5 Neural Network Training", "text": "The neural network approach is a two stage process. In the first stage a generalized network that maps the inputs data to the desired output using a training algorithm is derived. The next stage is\nthe \u201cproduction\u201d phase where the network is tested for its generalization ability against a new set of data.\nOften the neural network tends to over train and memorizes the data. To avoid this possibility, a cross-validation data set is use. The cross validation data set is a part of the data set which is set aside before training and is used to determine the level of generalization produced by the training set. As training processes the training error drops progressively. At first the cross validation error decreases but then begins to rise as the network over trains. Best generalization ability of the network can be tapped by stopping the algorithm where the error on the cross validation set starts to rise. Figure 5 illustrates the use of cross-validation during training."}, {"heading": "2.6 Rule Extraction from Neural Networks", "text": "Although neural networks are known to be robust classifiers, they have found limited use in decision-critical applications such as medical systems. Trained neural networks act like black boxes and are often difficult to interpret [16]. The availability of a system that would provide an explanation of the input/output mappings of a neural network in the form of rules would thus be very useful. Rule extraction is one such system that tries to elucidate to the user, how the neural network arrived at its decision in the form of if-then rules.\nTwo explicit approaches have been defined to date for transforming the knowledge and weights contained in a neural network into a set of symbolic rules de-compositional and pedagogical [17]. In the de-compositional approach the focus is on the extracting rules at an individual hidden and/or output level into a binary outcome. It involves the analysis of the weight vectors and biases associated with the processing elements in general. The subset [18] algorithm is an example of this category. The pedagogical approach treats neural networks like black boxes and aims to extract rules that map inputs directly to its output. The Validity Interval Analysis (VIA) [19] proposed by Thrum and TREPAN [20] is an example of one such technique .Andrews et al [21] proposed a third category called eclectic which combines the elements of the basic categories."}, {"heading": "2.7 Decision Trees", "text": "A decision tree is a special type of graph drawn in the form of a tree structure. It consists of internal nodes each associated with a logical test and its possible consequences. Decision trees are probably the most widely used symbolic learning algorithms as are neural networks in the nonsymbolic category."}, {"heading": "2.8 Decision Tree Classification", "text": "Decision trees classify data through recursive partitioning of the data set into mutually exclusive subsets which best explain the variation in the dependent variable under observation[22][23] . Decision trees classify instances (data points) by sorting them down the tree from the root node to some leaf node. This lead node gives the classification of the instance. Each branch of the decision tree represents a possible scenario of decision and its outcome.\nDecision tree algorithms depict concept descriptions in the form of a tree structure. They begin learning with a set of instances and create a tree structure that is used to classify new instances. An instance in a dataset is described by a set of feature values called attributes, which can have either continuous or nominal values. Decision tree induction is best suitable for data where each example in the dataset is described by a fixed number of attributes for all examples of that dataset. Decision tree methods use a divide and conquer approach. They can be used to classify an example by starting at the root of the tree and moving through it until a leaf node is reached, which provides the classification of the instance.\nEach node of a decision tree specifies a test of some attribute and each branch that descends from the node corresponds to a possible value for this attribute. The following example illustrates a simple decision tree.\nRoot Node\nCondition 1 Alternate Condition 1\nBranches\nLeaf Node 1 Leaf Node 2\nLeaf Node 3 Leaf Node 4\nCondition 2 Alternate Condition 2\nClass 1 Class 2"}, {"heading": "3. TREPAN ALGORITHM", "text": "The TREPAN [24] and [25] algorithms developed by Craven et al are novel rule-extraction algorithms that mimic the behavior of a neural network. Given a trained Neural Network, TREPAN extracts decision trees that provide a close approximation to the function represented by the network. In this work, we are concerned with its application to trained variety of learned models as well. TREPAN uses a concept of recursive partitioning similar to other decision tree induction algorithms. In contrast to the depth-first growth used by other decision tree algorithms, TREPAN expands using the best first principle. Thus node which increases the fidelity of the fidelity of the tree when expanded is deemed the best.\nIn conventional decision tree induction algorithms the amount of training data decreases as one traverses down the tree by selecting splitting tests. Thus there is not enough data at the bottom of the tree to determine class labels and is hence poorly chosen. In contrast TREPAN uses an \u2018Oracle\u2019 to answer queries, in addition to the training samples during the inductive learning process. Since the target here is the function represented by the neural network, the network itself is used as the \u2018Oracle\u2019. This learning from larger samples can prevent the lack of examples for the splitting tests at lower levels of the tree, which is usually a problem with conventional decision tree learning algorithms. It ensures that there is a minimum sample of instances available at a node before choosing a splitting test for that node where minimum sample is one of the user specified parameters. If the number of instances at the node, say m is less than minimum sample then TREPAN will make membership queries equal to (minimum sample m) from the \u2018Oracle\u2019 and then make a decision at the node. The following illustrates a pseudocode of the TREPAN algorithm [26].\nAlgorithm : TREPAN\nInput: Trained neural network; training examples { } = where yi , is the class label predicted by the trained neural network on the training example Xi , global stopping criteria.\nOutput : extracted decision tree\nBegin\nInitialize the tree as a leaf node\nWhile global stopping criteria are not met and the current tree can be further refined\nDo\nPick the most promising leaf node to expand\nDraw sample of examples\nUse the trained network to label these examples\nSelect a splitting test for the node\nFor each possible outcome of the test make a new leaf node\nEnd\nEnd"}, {"heading": "3.1 M-of-N Splitting tests", "text": "TREPAN uses the m-of-n test to partition the part of the instance space covered by a particular internal node. An m-of-n expression (a Boolean expression) is fulfilled when at least an integer threshold m of its n literals hold true. For example, consider four features a, b, c and d; the m-of-n test: 3-of-{a, b > 3.3, c, d} at a node signifies that if any of the 3 conditions of the given set of 4 are satisfied then an example will pass through that node. TREPAN employs a beam search method with beam width as a user defined parameter to find the best m-of-n test. Beam search is heuristic best-first each algorithm that evaluates that first n node (where n is a fixed value called the \u2018beam width\u2019) at each tree depth and picks the best out of them for the split. TREPAN uses both local and global stopping criteria. The growth of the tree stops when any of the following criteria are met: the size of the tree which is a user specific parameter or when all the training examples at node fall in the same class."}, {"heading": "3.1 Single Test TREPAN and Disjunctive TREPAN", "text": "In addition to TREPAN algorithm, Craven has also developed two of its important variations. The single test TREPAN algorithm is similar to TREPAN in all respects except that as its name suggests it uses single feature tests at the internal nodes. Disjunctive TREPAN on the other hand, uses disjunctive \u201cOR\u201d tests at the internal nodes of the tree instead of the m-of-n tests. A more detailed explanation of the TREPAN algorithm can be found in Craven\u2019s dissertation [27].\nBaesens et al [28] have applied TREPAN to credit risk evaluation and reported that it yields very good classification accuracy as compared to the logistic regression classifier and the popular C4.5 algorithm."}, {"heading": "4. C4.5 ALGORITHM", "text": "The C4.5 algorithm [29] is one of the most widely used decision tree learning algorithms. It is an advanced and incremental software extension of the basic ID3 algorithm [30] designed to address the issues that were not dealt with by ID3. The C4.5 algorithm has its origins in Hunt\u2019s Concept Learning Systems (CLS) [31]. It is a non-incremental algorithm, which means that it derives its classes from an initial set of training instances. The classes derived from these instances are expected to work for all future test instances. The algorithm uses the greedy search approach to select the best attribute and never looks back to reconsider earlier choices. The C4.5 algorithm searches through the attributes of the training instances and finds the attribute that best separates the data. If this attribute perfectly classifies the training set then it stops else it recursively works on the remaining in the subsets (m = the remaining possible values of the attribute) to get their best attribute. Some attributes split the data more purely than others. Their values correspond more consistently with instances that have particular values of the target class. Therefore it can be said that they contain more information than the other attributes. But there should be a method that helps quantify this information and compares different attributes in the data which will enable us to decide which attribute should be placed at the highest node in the tree."}, {"heading": "4.1 Information Gain, Entropy Measure and Gain Ratio", "text": "A fundamental part of any algorithm that constructs a decision tree from a dataset is the method in which it selects attributes at each node of the tree for splitting so that the depth of the tree is the minimum. ID3 uses the concept of Information Gain which is based on Information theory [32] to select the best attributes. Gain measures how well a given attribute separates training examples into its target classes. The one with the highest information is selected. Information gain calculates the reduction in entropy (or gain information) that would result from splitting the data into subsets based on an attribute.\nThe information gain of example set S on attribute A is defined as,\n( ) ( ) ( )\u2211\u2212= vv SEntropy S\nS SEntropyASGain ,\nIn the above equation, S is the number of instances and |Sv| is a subset of instances of S where A takes the value v. Entropy is a measure of the amount of information in an attribute. The higher the entropy, the more the information is required to completely describe the data. Hence, when building the decision tree, the idea is to decrease the entropy of the dataset until we reach a subset that is pure (a leaf), that has zero entropy and represents instances that all belong to one class. Entropy is given by,\n( ) ( ) ( )\u2211\u2212= IpIpSEntropy 2log where p(I) is the proportion of S belonging to Class I.\nSuppose we are constructing a decision tree with ID3 that will enable us to decide if the weather is favorable to play football. The input data to ID3 is shown in table 2 below adapted from Quinlan\u2019s C4.5.\nTable 2. Play Tennis Examples Dataset\nDay\nOutlook\nTemperature\nHumidity\nWind\nPlay Tennis\n1 Sunny Hot High Weak No 2 Sunny Hot High Strong No 3 Overcast Hot High Weak Yes 4 Rain Mild High Weak Yes 5 Rain Cool Normal Weak Yes 6 Rain Cool Normal Strong No 7 Overcast Cool Normal Strong Yes 8 Sunny Mild High Weak No 9 Sunny Cool Normal Weak Yes\n10 Rain Mild Normal Weak Yes 11 Sunny Mild Normal Strong Yes 12 Overcast Mild High Strong Yes 13 Overcast Hot Normal Weak Yes 14 Rain Mild High Strong No\nIn this example,\n( ) 9450.0 14\n5 log\n14\n5\n14\n9 log\n14\n9 22 =           \u2212           \u2212=SEntropy\n(Note: Number of instances where play tennis = yes is 9 and play tennis = No is 5)\nThe best attribute of the four is selected by calculating the Information Gain for each attribute as follows,\n( ) ( ) ( ) ( ) ( )RainEntrOvercastEntrSunnyEntrSEntrOutlookSGain . 14\n5 .\n14\n4 .\n14\n5 ., \u2212\u2212\u2212=\n( ) 2670.03364.003364.09450.0, =\u2212\u2212\u2212=OutlookSGain\nEq.1\nEq.2\nEq.3\nEq.4\nSimilarly, ( ) 42.0, \u2212=TempSGain and ( ) 1515.0, =WindSGain\nThe attribute outlook has the highest gain and hence it is used as the decision attribute in the root node. The root node has three branches since the attribute outlook has three possible values, (Sunny, Overcast, and Rain). Only the remaining attributes are tested at the sunny branch node since outlook has already been used at the node. This process is recursively repeated until: all the training instances have been classified or every attribute has been utilized in the decision tree. The ID3 has a strong bias in favor of tests with many outcomes. Consider an employee database that consists of an employee identification number. Every attribute intended to be unique and partitioning any set of training cases on the values of this attribute will lead to a large number of subsets, each containing only one case. Hence the C4.5 algorithm incorporates use of a statistic called the \u201cGain Ratio\u201d that compensates for the number of attributes by normalizing with information encoded in the split itself.\n( ) ( )AI ASGain GainRatio , =\nIn the above equation,\n( ) ( ) ( )\u2211\u2212= AA IpIpAI 2log C4.5 has another advantage over ID3; it can deal with numeric attributes, missing values and noisy data."}, {"heading": "5. EXPERIMENTATION AND RESULT ANALYSIS", "text": "We analyze three datasets with classes greater than two and we compare the results of Single-test TREPAN and C4.5 with that of X-TREPAN in terms of comprehensibility and classification accuracy. A generalized feed forward network was trained in order to investigate the ability of XTREPAN in comprehending GFF networks. The traditional \u2018using-network\u2019 command was used to validate that X-TREPAN was producing correct outputs for the network. In all the experiments, we adopted the Single-test TREPAN as the best variant for comparison with the new model."}, {"heading": "5.1 Body Fat", "text": "Body Fat is a regression problem in the simple machine learning dataset category. The instances are sought to predict body fat percentage based on body characteristics. A 14-4-1 MLP with hyperbolic tangent function was used to train the network for 1500 epochs giving an r (correlation co-efficient) value of 0.9882. Figure 6 shows the comparison of classification accuracy of body fat by the three models.\nEq.5\nEq.6\nTREPAN achieves a classification accuracy of 94% and C4.5 produces a classification accuracy of 91% while X-TREPAN achieves a comparatively much higher accuracy of 96%. Additionally, both X-TREPAN and TREPAN generate similar trees in terms of size but accuracy and comprehensibility attained by X-TREPAN are comparatively higher.\nThe tables below show the confusion matrix of the classification accuracy achieved by TREPAN in comparison with X-TREPAN. While TREPAN produces a classification accuracy of 92.06% X-TREPAN produces a comparatively much higher accuracy of 96.83% as indicated in Table 3 below.\nAdditionally, both TREPAN and X-TREPAN generate identical trees in terms of size but accuracy attained by X-TREPAN is comparatively higher."}, {"heading": "5.2 Outages", "text": "Outages constitute a database from the small dataset category. A12-3-1 MLP network with a hyperbolic tangent and bias axon transfer functions in the first and the second hidden layer respectively gave the best accuracy. The model was trained for 12000 epochs and achieved an r (correlation co-efficient) value of 0.985 (or an r2 of (0.985)2). Figure 7 shows the comparison of classification accuracy of outages by the three algorithms.\nIn terms of classification accuracy, as can be seen in the figure above, TREPAN achieves 84%, C4.5 achieves 91% while X-TREPAN achieves 92%.\nHowever, here TREPAN, C4.5 and X-TREPAN all generate very different trees in terms of size with C4.5 producing the largest and most complex decision tree while X-TREPAN produces the simplest and smallest decision tree with comparatively higher accuracy and comprehensibility.\nThe tables below show the confusion matrix of the classification accuracy achieved by both algorithms. X-TREPAN achieves 85% while TREPAN achieves 76%.\nC13 0 6 7 1 0 C14 0 0 0 5 0 C15 0 0 0 0 0\nClassification Accuracy (%)\n40.00% 79.63% 70.00% 83.33% 0.00%\nTotal Accuracy (%) 76.00%"}, {"heading": "5.3 Admissions", "text": "A typical University admissions database model based on a 22-15-10-2 MLP network. Two hidden layers with the hyperbolic tangent transfer functions were used for modeling. The best model was obtained by the X-TREPAN with a minimum sample size of 1000, tree size of 50 and classification accuracy of 74%. Figure 8 gives the comparison of classification accuracy of Admissions by the three models.\nOn the other hand, C4.5 achieved an accuracy of 71.97% (not rounded) almost equaling that of TREPAN of 72%, but produced a significantly large and complex decision tree.\nIn terms of Confusion Matrix, TREPAN achieved an accuracy of 71.6% very close to that of XTREPAN. The confusion matrix is shown in the Tables below.\nYes 379 190 No 259 774\nClassification Accuracy (%) 59.40% 80.29\nTotal Accuracy (%) 71.67%"}, {"heading": "6. PERFORMANCE ASSESSMENT", "text": ""}, {"heading": "6.1 Classification Accuracy", "text": "The classification accuracy or error rate is the percentage of correct predictions made by the model over a data set. It is assessed using the confusion matrix. A confusion matrix is a matrix plot of predicted versus actual classes with all of the correct classifications depicted along the diagonal of the matrix. It gives the number of correctly classified instances, incorrectly classified instances and overall classification accuracy.\nThe accuracy of the classifier is given by the formula,\n( ) ( ) 100 )( % \u00d7 +++ + = TNFPFNTP TNTP Accuracy\nWhere true positive = (TP), true negative = (TN) false positive = (FP) and false negative = (FN). A false positive (FP) is when a negative instance incorrectly classified as a positive and false negative (FN) is when a positive instance is incorrectly classified as a negative. A true positive (TP) is when an instance is correctly classified as positive and true negative (TN) is when an instance is correctly classified as negative and so on.\nA confusion matrix is a primary tool in visualizing the performance of a classifier. However it does not take into account the fact that some misclassifications are worse than others. To overcome this problem we use a measure called the Kappa Statistic which considers the fact that correct values in a confusion matrix are due to chance agreement.\nThe Kappa statistic is defined as,\n( ) )(1 )()(^ EP EPAP k \u2212 \u2212 =\nIn this equation, P(A) is the proportion of times the model values were equal to the actual value and, P(E) is the expected proportion by Chance.\nFor perfect agreement, Kappa = 1. For example: a Kappa statistic of 0.84 would imply that the classification process was avoiding 84% of the errors that a completely random classification would generate."}, {"heading": "6.2 Comprehensibility", "text": "The comprehensibility of the tree structure decreases with the increase in the size and complexity. The principle of Occam\u2019s Razors says \u201cwhen you have two competing theories which make exactly the same projections, the one that is simpler is the better\u201d [33]. Therefore, among the three algorithms, X-TREPAN is better as it produces smaller and simpler trees as against Singletest TREPAN and C4.5 in most scenarios.\nEq.5\nEq.6"}, {"heading": "7. CONCLUSION", "text": "The TREPAN algorithm code was modified (X-TREPAN) to be able to work with multi-class regression type problems. Various experiments were run to investigate its compatibility with generalized feed forward networks. The weights and network file were restructured to present GFF networks in a format recognized by X-TREPAN. Neural Network models were trained on each dataset varying parameters like network architecture and transfer functions. The weights and biases obtained from the trained models of the three datasets were fed to X-TREPAN for decision tree learning from neural networks. For performance assessment, classification accuracy of Single-test TREPAN, C4.5 and X-TREPAN were compared. In the scenarios discussed in the paper, X-TREPAN model significantly outperformed the Single-test TREPAN and C4.5 algorithms in terms of classification accuracy as well as size, complexity and comprehensibility of decision trees. To validate the results, we use classification accuracy not as the only measure of performance, but also the kappa statistics. The kappa statistical values further validate the conclusions that X-TREPAN is a better one in terms of decision tree induction."}], "references": [{"title": "Artificial Neural Networks for the Diagnosis of Aggressive Periodontitis Trained by Immunologic Parameters", "author": ["G. Papantonopoulos", "K. Takahashi", "T. Bountis", "B.G. Loos"], "venue": "PLoS ONE 9(3):", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Behavior Analysis through Games Using Artificial Neural Networks", "author": ["D. Puzenat"], "venue": "Third International Conference on Advances in Computer-Human Interactions (IEEE),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "An Artificial Neural Network Based Robot Controller that Uses Rat\u2019s", "author": ["M. Mano", "G. Capi", "N. Tanaka", "S. Kawahara"], "venue": "Brain Signals, Robotics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2020}, {"title": "Prahallad, speech generation", "author": ["E.V. Raghavendra", "K.P. Vijayaditya"], "venue": "National Conference on Communications (NCC),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Implementation Of Back-Propagation Neural Network For Isolated Bangla Speech Recognition, International Journal of Information Sciences and Techniques", "author": ["A. Hossain", "M. Rahman", "U.K.Prodhan", "F. Khan"], "venue": "(IJIST) vol", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Comparison between Artificial Neural Network Learning Algorithms for Prediction of Student Average considering Effective Factors in Learning and Educational Progress", "author": ["S. Ayat", "Z.A. Pour"], "venue": "Journal of mathematics and computer science", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "The truth will come to light: Directions and challenges in extracting the knowledge embedded within trained artificial neural networks", "author": ["A.B. Ticke", "R. Andrews", "M. Golea", "J. Diederich"], "venue": "IEEE Trans. Neural Network,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1998}, {"title": "Lessons from past current issues and future research directions in extracting knowledge embedded in artificial neural networks in Hybrid", "author": ["A. Ticke", "F. Maire", "G. Bologna", "R. Andrews", "J. Diederich"], "venue": "Neural Systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2000}, {"title": "Teach/Me Data Analysis, Springer-Verlag, Berlin-New York-Tokyo", "author": ["H. Lohminger"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1999}, {"title": "Exploratory analysis of metallurgical process data with neural networks and related methods", "author": ["C. Aldrich"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Exercises in Rethinking Innateness: A handbook for connectionist simulations", "author": ["K. Plunkeet", "J.L. Elman"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1997}, {"title": "Shavli, Extracting Refined Rules from Knowledge-based Neural Networks", "author": ["J.W.G.G. Towell"], "venue": "Machine Learning,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1993}, {"title": "Using sampling and queries to extract rules from trained neural networks, Machine Learning", "author": ["M.W Craven", "J.W. Shavlik"], "venue": "Proceedings of the Eleventh International Conference,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1995}, {"title": "Rule Learning by searching on adopted nets", "author": ["L. Fu"], "venue": "In Proceedings of the 9th National Conference on Artificial Intelligence, Anaheim, CA,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1991}, {"title": "Extracting rules from artificial neural networks with distributed representations, In Advances in Neural Information Processing Systems 7, Cambridge, MA:Mit press, pp", "author": ["S. Thrums"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1995}, {"title": "Extracting Comprehensible models from trained Neural Network, PhD Thesis, Computer Science Department", "author": ["M.W. Craven"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1996}, {"title": "A survey and critique of techniques for extracting rules from trained neural networks", "author": ["R. Andrews", "J. Diederich", "A.B. Tickle"], "venue": "Knowledge Based Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1995}, {"title": "A method of choosing multiway partitions for classification and decision tree", "author": ["D. Biggs", "B. de Ville", "E. Suen"], "venue": "Journal of Applied Statistics", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1991}, {"title": "Machine Learning techniques for natural resource data analysis", "author": ["G. Liepins", "R. Goeltz", "R. Rush"], "venue": "AI Applications 4(3):9-18,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1990}, {"title": "Using sampling and queries to extract rules from trained neural networks, Machine Learning", "author": ["M.W. Craven", "J.W. Shavlik"], "venue": "Proceedings of the Eleventh Inter-national Conference,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1995}, {"title": "Extracting tree-structured representations of trained networks", "author": ["M.W. Craven", "J.W. Shavlik"], "venue": "In Advance in Neural Information Procession Systems,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1996}, {"title": "Learning accurate and understandable rules from SVM classifiers, M", "author": ["F. Chen"], "venue": "Sc. Thesis, School of computing science,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2004}, {"title": "Extracting Comprehensible models from trained Neural Network", "author": ["M.W. Craven"], "venue": "PhD Thesis, Computer Science Department,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1996}, {"title": "Using Neural Network Rule Extraction and Decision Tables for Credit-Risk Evaluation management", "author": ["B. Baesens", "R. Setiono", "C. Mues", "J. Vanthienen"], "venue": "Science, vol. 49,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2003}, {"title": "Programs for Machine Learning", "author": ["J.R. Quinlan"], "venue": null, "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1993}, {"title": "ID3 Algorithm, Machine Learning, University of Sydney, book", "author": ["J. Ross Quinlan"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1975}, {"title": "Classification and regression trees", "author": ["L.J. Breiman", "R. Friedman", "C. Olshen"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 1984}, {"title": "Classification and regression trees", "author": ["L. Breiman", "J. Friedman", "R. Olshen", "C. Stone"], "venue": null, "citeRegEx": "33", "shortCiteRegEx": "33", "year": 1984}], "referenceMentions": [{"referenceID": 0, "context": "Artificial neural networks have been applied to a variety of problem domains [1] such as medical diagnostics [2], games [3], robotics [4], speech generation [5] and speech recognition [6].", "startOffset": 109, "endOffset": 112}, {"referenceID": 1, "context": "Artificial neural networks have been applied to a variety of problem domains [1] such as medical diagnostics [2], games [3], robotics [4], speech generation [5] and speech recognition [6].", "startOffset": 120, "endOffset": 123}, {"referenceID": 2, "context": "Artificial neural networks have been applied to a variety of problem domains [1] such as medical diagnostics [2], games [3], robotics [4], speech generation [5] and speech recognition [6].", "startOffset": 134, "endOffset": 137}, {"referenceID": 3, "context": "Artificial neural networks have been applied to a variety of problem domains [1] such as medical diagnostics [2], games [3], robotics [4], speech generation [5] and speech recognition [6].", "startOffset": 157, "endOffset": 160}, {"referenceID": 4, "context": "Artificial neural networks have been applied to a variety of problem domains [1] such as medical diagnostics [2], games [3], robotics [4], speech generation [5] and speech recognition [6].", "startOffset": 184, "endOffset": 187}, {"referenceID": 5, "context": "The generalization ability of neural networks has proved to be superior to other learning systems over a wide range of applications [7].", "startOffset": 132, "endOffset": 135}, {"referenceID": 6, "context": "[9], [10] summarize several proposed approaches to rule extraction.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[9], [10] summarize several proposed approaches to rule extraction.", "startOffset": 5, "endOffset": 9}, {"referenceID": 8, "context": "The calculation of the final outputs of the network proceeds layer by layer [11].", "startOffset": 76, "endOffset": 80}, {"referenceID": 9, "context": "Figure 1 shows the model of a single neuron [12]", "startOffset": 44, "endOffset": 48}, {"referenceID": 10, "context": "Each output node represents a probability distribution and the cross entropy measures calculate the difference between the network distribution and the actual distribution [15].", "startOffset": 172, "endOffset": 176}, {"referenceID": 11, "context": "Trained neural networks act like black boxes and are often difficult to interpret [16].", "startOffset": 82, "endOffset": 86}, {"referenceID": 12, "context": "Two explicit approaches have been defined to date for transforming the knowledge and weights contained in a neural network into a set of symbolic rules de-compositional and pedagogical [17].", "startOffset": 185, "endOffset": 189}, {"referenceID": 13, "context": "The subset [18] algorithm is an example of this category.", "startOffset": 11, "endOffset": 15}, {"referenceID": 14, "context": "The Validity Interval Analysis (VIA) [19] proposed by Thrum and TREPAN [20] is an example of one such technique .", "startOffset": 37, "endOffset": 41}, {"referenceID": 15, "context": "The Validity Interval Analysis (VIA) [19] proposed by Thrum and TREPAN [20] is an example of one such technique .", "startOffset": 71, "endOffset": 75}, {"referenceID": 16, "context": "Andrews et al [21] proposed a third category called eclectic which combines the elements of the basic categories.", "startOffset": 14, "endOffset": 18}, {"referenceID": 17, "context": "8 Decision Tree Classification Decision trees classify data through recursive partitioning of the data set into mutually exclusive subsets which best explain the variation in the dependent variable under observation[22][23] .", "startOffset": 215, "endOffset": 219}, {"referenceID": 18, "context": "8 Decision Tree Classification Decision trees classify data through recursive partitioning of the data set into mutually exclusive subsets which best explain the variation in the dependent variable under observation[22][23] .", "startOffset": 219, "endOffset": 223}, {"referenceID": 19, "context": "TREPAN ALGORITHM The TREPAN [24] and [25] algorithms developed by Craven et al are novel rule-extraction algorithms that mimic the behavior of a neural network.", "startOffset": 28, "endOffset": 32}, {"referenceID": 20, "context": "TREPAN ALGORITHM The TREPAN [24] and [25] algorithms developed by Craven et al are novel rule-extraction algorithms that mimic the behavior of a neural network.", "startOffset": 37, "endOffset": 41}, {"referenceID": 21, "context": "The following illustrates a pseudocode of the TREPAN algorithm [26].", "startOffset": 63, "endOffset": 67}, {"referenceID": 22, "context": "A more detailed explanation of the TREPAN algorithm can be found in Craven\u2019s dissertation [27].", "startOffset": 90, "endOffset": 94}, {"referenceID": 23, "context": "Baesens et al [28] have applied TREPAN to credit risk evaluation and reported that it yields very good classification accuracy as compared to the logistic regression classifier and the popular C4.", "startOffset": 14, "endOffset": 18}, {"referenceID": 24, "context": "5 algorithm [29] is one of the most widely used decision tree learning algorithms.", "startOffset": 12, "endOffset": 16}, {"referenceID": 25, "context": "It is an advanced and incremental software extension of the basic ID3 algorithm [30] designed to address the issues that were not dealt with by ID3.", "startOffset": 80, "endOffset": 84}, {"referenceID": 26, "context": "ID3 uses the concept of Information Gain which is based on Information theory [32] to select the best attributes.", "startOffset": 78, "endOffset": 82}, {"referenceID": 27, "context": "The principle of Occam\u2019s Razors says \u201cwhen you have two competing theories which make exactly the same projections, the one that is simpler is the better\u201d [33].", "startOffset": 155, "endOffset": 159}], "year": 2015, "abstractText": "In this work, the TREPAN algorithm is enhanced and extended for extracting decision trees from neural networks. We empirically evaluated the performance of the algorithm on a set of databases from real world events. This benchmark enhancement was achieved by adapting Single-test TREPAN and C4.5 decision tree induction algorithms to analyze the datasets. The models are then compared with X-TREPAN for comprehensibility and classification accuracy. Furthermore, we validate the experimentations by applying statistical methods. Finally, the modified algorithm is extended to work with multi-class regression problems and the ability to comprehend generalized feed forward networks is achieved.", "creator": "PDF24 Creator"}}}