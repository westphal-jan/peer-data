{"id": "1509.03475", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Sep-2015", "title": "Hessian-free Optimization for Learning Deep Multidimensional Recurrent Neural Networks", "abstract": "Multidimensional recurrent neural network (MDRNN) has shown a remarkable performance in speech and handwriting recognition. The performance of MDRNN is improved by further increasing its depth, and the difficulty of learning the deeper network is overcome by Hessian-free (HF) optimization. Considering that connectionist temporal classification (CTC) is utilized as an objective of learning MDRNN for sequence labelling, the non-convexity of CTC poses a problem to apply HF to the network.\n\n\n\n\nLack of FIFY\n\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\n\nLack of FIFY\nLack of FIFY\n\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack of FIFY\n\nLack of FIFY\nLack of FIFY\n\nLack of FIFY\nLack of FIFY\nLack of FIFY\nLack", "histories": [["v1", "Fri, 11 Sep 2015 12:28:36 GMT  (26kb)", "http://arxiv.org/abs/1509.03475v1", "to appear at NIPS 2015"], ["v2", "Fri, 23 Oct 2015 07:14:04 GMT  (28kb)", "http://arxiv.org/abs/1509.03475v2", "to appear at NIPS 2015"]], "COMMENTS": "to appear at NIPS 2015", "reviews": [], "SUBJECTS": "cs.LG cs.NE stat.ML", "authors": ["minhyung cho", "chandra shekhar dhir", "jaehyung lee"], "accepted": true, "id": "1509.03475"}, "pdf": {"name": "1509.03475.pdf", "metadata": {"source": "CRF", "title": "Hessian-Free Optimization For Learning Deep Multidimensional Recurrent Neural Networks", "authors": ["Minhyung Cho Chandra", "Shekhar Dhir Jaehyung Lee"], "emails": ["mhyung.cho@gmail.com", "shekhardhir@gmail.com", "jaehyung.lee@kaist.ac.kr"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 9.\n03 47\n5v 1\n[ cs\n.L G\n] 1\n1 Se\nMultidimensional recurrent neural network (MDRNN) has shown a remarkable performance in speech and handwriting recognition. The performance of MDRNN is improved by further increasing its depth, and the difficulty of learning the deeper network is overcome by Hessian-free (HF) optimization. Considering that connectionist temporal classification (CTC) is utilized as an objective of learning MDRNN for sequence labelling, the non-convexity of CTC poses a problem to apply HF to the network. As a solution to this, a convex approximation of CTC is formulated and its relationship with the EM algorithm and the Fisher information matrix is discussed. MDRNN up to the depth of 15 layers is successfully trained using HF, resulting in improved performance for sequence labelling."}, {"heading": "1 Introduction", "text": "Multidimensional recurrent neural network (MDRNN) is an efficient architecture to build multidimensional context into recurrent neural networks [1]. End-to-end training of MDRNN in conjunction with connectionist temporal classification (CTC) has shown the state-of-the-art performance in on/off-line handwriting recognition [2, 3] and speech recognition [4].\nIn previous approaches, the performance of MDRNN has been demonstrated with the networks having up to depth of 5 layers, which are relatively limited compared to the recent progress on feedforward networks [5]. The effectiveness of deeper MDRNNs beyond 5 layers has been unknown.\nTraining a deeper architecture has always been a challenging topic in machine learning. Notable breakthrough was made where deep feedforward neural networks were initialized using layer-wise pre-training [6]. Recently, there has been approaches to add supervision to intermediate layers to train deep networks [5, 7]. To our knowledge, no such pre-training or bootstrapping method has been developed for MDRNN which potentially utilizes LSTM cells [8] as its hidden unit.\nAlternatively, HF optimization is an appealing approach to train deep neural networks due to its ability to overcome pathological curvature of the objective function [9]. Furthermore it can be applied to any connectionist model as long as its objective function is differentiable. The recent success of HF to deep feedforward and recurrent neural networks [9, 10] encourages the use of HF to MDRNN.\nIn this paper, we claim that MDRNN can benefit from deeper architecture, and applying second order optimization like HF enables its successful learning. First we offer details to develop HF optimization for MDRNN. Then, to apply HF optimization for sequence labelling tasks, we address the problem of non-convexity of CTC, and formulate a convex approximation. Also, its relationship with the EM algorithm and the Fisher information matrix is discussed. Experimental results of offline handwriting recognition and phoneme recognition show that MDRNN with HF performs better as the depth of the network increases up to fifteen."}, {"heading": "2 Multidimensional recurrent neural networks", "text": "MDRNN is a generalization of RNN to process multidimensional data by replacing the single recurrent connection with as many connections as dimensions of the data [1]. The network can access the contextual information from 2N directions, allowing to make a collective decision based on rich context information. To enhance its ability of exploiting context information, long short-term memory (LSTM) [8] cells are usually utilized as hidden units. In addition, stacking MDRNNs to construct deeper networks further improves the performance as the depth increases, reporting the state-of-the-art performance in phoneme recognition [4]. For sequence labelling, CTC is applied as a loss function of MDRNN. The important advantage of using CTC is that any pre-segmented sequences are not required, and the entire transcription of the input sample is sufficient."}, {"heading": "2.1 Learning MDRNN", "text": "A d-dimensional MDRNN with M inputs and K outputs is regarded as a mapping from an input sequence x \u2208 RM\u00d7T1\u00d7\u00b7\u00b7\u00b7\u00d7Td to an output sequence a \u2208 (RK)T of length T , where input data for M input neurons is given by vectorization of a d-dimensional data and T1, . . . , Td is the length of the sequence in each dimension. All learnable weights and biases are concatenated to obtain a parameter vector \u03b8 \u2208 RN . In the learning phase with fixed training data, MDRNN is formalized as a mapping N : RN \u2192 (RK)T from the parameters \u03b8 to the output sequence a, i.e. a = N (\u03b8). The scalar loss function is defined over the output sequence as L : (RK)T \u2192 R. Learning MDRNN is viewed as an optimization of the objective function L(N (\u03b8)) = L \u25e6 N (\u03b8) with respect to \u03b8."}, {"heading": "2.2 Notation", "text": "The Jacobian JF of a function F : Rm \u2192 Rn is the n \u00d7m matrix where each element is a partial derivative of an element of output with respect to an element of input. The Hessian HF of a scalar function F : Rm \u2192 R is the m \u00d7 m matrix of second-order partial derivatives of the output with respect to its inputs. Throughout the paper, a symbol \u22a4 is used for denoting the transpose of a vector or matrix. For variables, a sequence of vector is denoted by boldface a, a vector at time t in a is denoted by at, and the k-th element of at is denoted by atk."}, {"heading": "3 Hessian-free optimization for MDRNN", "text": "In this section, we discuss two main points to develop HF optimization for MDRNN. One is obtaining a local quadratic approximation for MDRNN, and the other is an efficient calculation of the matrix-vector product used at each iteration of the conjugate gradient (CG) method.\nHF minimizes an objective by constructing a local quadratic approximation to the objective function and minimizing the approximate function instead of the original one. The loss function L(\u03b8) needs to be approximated at each point \u03b8n of the n-th iteration as follows:\nQn(\u03b8) = L(\u03b8n) +\u2207\u03b8L| \u22a4 \u03b8n \u03b4n +\n1 2 \u03b4\u22a4n G\u03b4n, (1)\nwhere \u03b4n = \u03b8 \u2212 \u03b8n is the search direction, i.e. parameters of the optimization, and G is a local approximation to the curvature of L(\u03b8) at \u03b8n, which is typically obtained by the generalized GaussNewton (GGN) matrix as an approximation of the Hessian.\nHF uses the CG method in a subroutine to minimize the quadratic objective above for utilizing the complete curvature information and achieving computational efficiency. CG requires the computation of Gv for an arbitrary vector v, but not the explicit evaluation of G. For neural networks, an efficient way to compute Gv was proposed by [11], extending the work of [12]. In section 3.2, we provide the details for the efficient computation of Gv for MDRNN."}, {"heading": "3.1 Quadratic approximation of loss function", "text": "The Hessian matrix, HL\u25e6N , of the objective L (N (\u03b8)) is written as\nHL\u25e6N = J \u22a4 NHLJN +\nKT \u2211\ni=1\n[JL]iH[N ]i , (2)\nwhere JN \u2208 RKT\u00d7N , HL \u2208 RKT\u00d7KT , and [q]i denotes the i-th component of the vector q. An indefinite Hessian matrix is problematic for 2nd-order optimization because it defines an unbounded local quadratic approximation [13]. For nonlinear systems, the Hessian is not necessarily positive semidefinite, thus the GGN matrix is used as an approximation of the Hessian [11, 9]. The GGN matrix is obtained by ignoring the second term in Eq. (2), as given by\nGL\u25e6N = J \u22a4 NHLJN . (3)\nThe sufficient condition for the GGN approximation to be exact is that the network makes a perfect prediction for every given sample, that is, JL = 0, or [N ]i stays in the linear region for all i, that is, H[N ]i = 0.\nGL\u25e6N has less rank than KT and is positive semidefinite as long as HL is. Thus, L is chosen to be a convex function so that HL is positive semidefinite. In principle, it is best to define L and N in a way that L performs as much of the computation as possible, with the positive semidefiniteness of HL as a minimum requirement [13]. In practice, a nonlinear output layer along with its matching loss function [11], such as the softmax function with cross-entropy loss, is widely used.\nConsidering that MDRNN is normally applied to model sequential data such as speech or handwriting, complex loss functions need to be adopted, like the one provided by CTC. A detailed discussion of approximating the Hessian for CTC is provided in section 4."}, {"heading": "3.2 Computation of matrix-vector product for MDRNN", "text": "The product of an arbitrary vector v by the GGN matrix, Gv = J\u22a4NHLJN v, amounts to the sequential multiplication of v by three matrices. First, the product JN v is a Jacobian times vector and is therefore equal to the directional derivative of N (\u03b8) along the direction of v. Thus, JN v can be written using a differential operator JN v = Rv(N (\u03b8)) [12], and the properties of the operator can be utilized for efficient computation. Because MDRNN is a composition of differentiable components, the computation of Rv(N (\u03b8)) throughout the whole network can be accomplished by repeatedly applying the sum, product, and chain rules starting from the input layer. The detailed derivation of R operator to LSTM, normally used as a hidden unit in MDRNN, is provided in appendix A.\nNext, the multiplication of JN v by HL can be done by direct computation. At first sight, the dimension of HL could be seen problematic since the dimension of the output vector used by the loss function L can be as high as KT , especially if CTC is adopted as an objective for MDRNN. If the loss function can be expressed as the sum of individual loss functions with restricted domain in time, the computation can be reduced significantly. For example, with the commonly used crossentropy loss function, KT \u00d7 KT matrix HL can be turned into a block diagonal matrix with T blocks of K \u00d7K Hessian matrix. Let HL,t be the t-th block in HL. Then, the GGN matrix can be written as\nGL\u25e6N = \u2211\nt\nJ\u22a4NtHL,tJNt , (4)\nwhere JNt is the Jacobian of the network at time t.\nFinally, the multiplication of a vector u = HLJN v by the matrix J\u22a4N is calculated using the backpropagation through time algorithm by propagating u instead of the error at the output layer."}, {"heading": "4 Convex approximation of CTC for application to HF optimization", "text": "Connectioninst temporal classification (CTC) [14] provides an objective function of learning MDRNN for sequence labelling. In this section, we derive a convex approximation of CTC inspired by the GGN approximation according to the following steps. First, the non-convex part from the original objective is separated out by reformulating the softmax part. Next, the remaining convex part is approximated without altering its Hessian, making it well matched to the non-convex part. Finally, the convex approximation is obtained by reuniting the convex and non-convex part."}, {"heading": "4.1 Connectionist temporal classification", "text": "CTC is formulated as the mapping from an output sequence of the recurrent network, a \u2208 (RK)T , to a scalar loss. The output activations at time t are normalized using the softmax function\nytk = exp(atk) \u2211\nk\u2032 exp(a t k\u2032)\n, (5)\nwhere ytk is the probability of label k given a at time t.\nThe conditional probability of the path \u03c0 is calculated by the multiplication of the label probabilities at each timestep, as given by\np(\u03c0|a) = T \u220f\nt=1\nyt\u03c0t , (6)\nwhere \u03c0t is the label observed at time t along the path \u03c0. The path \u03c0 of length T is mapped to a label sequence of length M \u2264 T by an operator B which removes the repeated labels and then the blanks. Several mutually exclusive paths can map to the same label sequence. Let S be a set containing every possible sequence mapped by B, that is, S = {s|s \u2208 B(\u03c0) for some \u03c0}, and let |S| denote the cardinality of the set.\nThe conditional probability of a label sequence l is given by\np(l|a) = \u2211\n\u03c0\u2208B\u22121(l)\np(\u03c0|a), (7)\nwhich is the sum of probabilities of all the paths mapped to a label sequence l by B.\nThe cross-entropy loss assigns a negative log probability to the correct answer. Given a target sequence z, the loss function of CTC for the sample is written as\nL(a) = \u2212 log p(z|a). (8)\nFrom the description above, CTC is composed of the sum of the product of softmax components. The function \u2212 log(ytk), corresponding to the softmax with cross-entropy loss, is convex [11]. Therefore, ytk is log-concave. Whereas log-concavity is closed under multiplication, the sum of log-concave functions is not log-concave in general [15]. As a result, the CTC objective is not convex in general because it contains the sum of softmax components in Eq. (7)."}, {"heading": "4.2 Reformulation of CTC objective function", "text": "We reformulate the CTC objective Eq. (8) to separate terms which are responsible for the nonconvexity of the function. By reformulation, the softmax function is defined over the categorical label sequences.\nBy substituting Eq. (5) into Eq. (6), it follows that\np(\u03c0|a) = exp(b\u03c0) \u2211\n\u03c0\u2032\u2208all exp(b\u03c0\u2032) , (9)\nwhere b\u03c0 = \u2211 t a t \u03c0t . By substituting Eq. (9) into Eq. (7) and setting l = z, p(z|a) can be re-written as\np(z|a) =\n\u2211\n\u03c0\u2208B\u22121(z) exp(b\u03c0) \u2211\n\u03c0\u2208all exp(b\u03c0) =\nexp(fz) \u2211\nz\u2032\u2208S exp(fz\u2032) , (10)\nwhere S is the set of every possible label sequence and fz = log ( \u2211 \u03c0\u2208B\u22121(z) exp(b\u03c0) ) is the logsum-exp function1, which is proportional to the probability of observing the label sequence z among all the other label sequences.\nWith the reformulation above, the CTC objective can be regarded as the cross-entropy loss with the softmax output which is defined over all the possible label sequences. Because the cross-entropy\n1f(x1, . . . , xn) = log(e x1 + \u00b7 \u00b7 \u00b7+ exn) is the log-sum-exp function defined on Rn\nloss function matches the softmax output layer [11], the CTC objective is convex except the part which computes fz for each of the label sequences. At this point, an obvious candidate for the convex approximation of CTC is the GGN matrix separating the convex part and non-convex part.\nLet the non-convex part be Nc and the convex part be Lc. The mapping Nc : (RK)T \u2192 R|S| is defined by\nNc(a) = F = [fz1 , . . . , fz|S| ] \u22a4, (11)\nwhere fz is given above, and |S| is the number of all the possible label sequences. For given F as above, the mapping Lc : R|S| \u2192 R is defined by\nLc(F ) = \u2212 log exp(fz) \u2211\nz\u2032\u2208S exp(fz\u2032) = \u2212fz + log\n(\n\u2211\nz\u2032\u2208S\nexp(fz\u2032)\n)\n, (12)\nwhere z is the label sequence corresponding to a.\nThe final reformulation for the loss function of CTC is given by L(a) = Lc \u25e6 Nc(a). (13)"}, {"heading": "4.3 Convex approximation of CTC loss function", "text": "The GGN approximation of Eq. (13) immediately gives a convex approximation of the Hessian for CTC as GLc\u25e6Nc = J \u22a4 Nc\nHLcJNc . Although HLc has the form of a diagonal matrix plus a rank-1 matrix, i.e. diag(Y ) \u2212 Y Y \u22a4, the dimension of HLc is |S| \u00d7 |S| where |S| becomes exponentially large as the length of the sequence increases. It makes the practical calculation of HLc difficult.\nOn the other hand, removing the linear team \u2212fz from Lc(F ) in Eq. (12) does not alter its Hessian. The resulting formula is Lp(F ) = log ( \u2211 z\u2032\u2208S exp(fz\u2032) )\n. The GGN matrices of L = Lc \u25e6 Nc and M = Lp \u25e6 Nc are exactly the same, i.e. GLc\u25e6Nc = GLp\u25e6Nc . Therefore the Hessian matrices of them are approximations of each other. The condition that the two Hessian matrices, HL and HM, converges to the same matrix is discussed later.\nInterestingly, M is given as a compact formula M(a) = Lp \u25e6Nc(a) = \u2211 t log \u2211 k exp(a t k), where atk is the output unit k at time t. Its Hessian HM can be directly computed, resulting in a block diagonal matrix. Each block is restricted in time, and the t-th block is given by\nHM,t = diag(Y t)\u2212 Y tY t \u22a4 , (14)\nwhere Y t = [yt1, . . . , y t K ] \u22a4 and ytk is given in Eq. (5). Because the Hessian of each block is positive semidefinite, HM is positive semidefinite. A convex approximation of the Hessian of MDRNN using the CTC objective can be obtained by substituting HM for HL in Eq. (3). Note that the resulting matrix is block diagonal, and Eq. (4) can be utilized for efficient computation.\nSummary of our derivation is as follows:\n1. HL = HLc\u25e6Nc is not positive semidefinite.\n2. GLc\u25e6Nc = GLp\u25e6Nc is positive semidefinite but is not computationally tractable.\n3. HLp\u25e6Nc is positive semidefinite and computationally tractable."}, {"heading": "4.4 Sufficient condition for the proposed approximation to be exact", "text": "From Eq. (2), the condition HLc\u25e6Nc = HLp\u25e6Nc holds if and only if \u2211KT\ni=1[JLc ]iH[Nc]i = \u2211KT\ni=1[JLp ]iH[Nc]i . Since JLc 6= JLp in general, we consider only the case of H[Nc]i = 0 for all i, which corresponds to the case that Nc is a linear mapping.\n[Nc]i contains a log-sum-exp function mapping from paths to a label sequence. Let z be the label sequence corresponding to [Nc]i, then [Nc]i = fz(. . . , b\u03c0, . . . ) for \u03c0 \u2208 B\u22121(z). If the probability of one path \u03c0\u2032 is large enough to ignore all the other paths, that is, exp(b\u03c0\u2032) \u226b exp(b\u03c0) for \u03c0 \u2208 {B\u22121(z)\\\u03c0\u2032}, it follows that fz(. . . , b\u03c0\u2032 , . . . ) = b\u03c0\u2032 . This is a linear mapping, which results in H[Nc]i = 0.\nIn conclusion, the condition HLc\u25e6Nc = HLp\u25e6Nc holds if one dominant path \u03c0 \u2208 B \u22121(z) exists such that fz(. . . , b\u03c0, . . . ) = b\u03c0 for every label sequence z."}, {"heading": "4.5 Derivation of the proposed approximation from the Fisher information matrix", "text": "The identity of the GGN and the Fisher information matrix [16] has been shown for the network using the softmax with cross-entropy loss [17, 18]. Thus, it follows that the GGN matrix of Eq. (13) is identical to the Fisher information matrix. Now we show that the Fisher information matrix is equivalent to the proposed matrix in Eq. (14) under the condition in section 4.4. The Fisher information matrix of MDRNN using CTC is written as\nF = Ex\n[\nJ\u22a4NEl\u223cp(l|a)\n[\n(\n\u2202 log p(l|a) \u2202a\n)\u22a4 ( \u2202 log p(l|a)\n\u2202a\n)\n]\nJN\n]\n, (15)\nwhere a = a(x, \u03b8) is the KT -dimensional output of the network N . CTC assumes output probabilities at each timestep to be independent of those at other timesteps [1], therefore its Fisher information matrix is given as the sum of every timestep. It follows that\nF = Ex\n[\n\u2211\nt\nJ\u22a4NtEl\u223cp(l|a)\n[\n(\n\u2202 log p(l|a) \u2202at\n)\u22a4 ( \u2202 log p(l|a)\n\u2202at\n)\n]\nJNt\n]\n. (16)\nUnder the condition in section 4.4, the Fisher information matrix is given by\nF = Ex\n[\n\u2211\nt\nJ\u22a4Nt(diag(Y t)\u2212 Y tY t \u22a4 )JNt\n]\n, (17)\nwhich is the same form as Eq. (4) and (14) combined. See appendix B for the detailed derivation."}, {"heading": "4.6 EM interpretation of the proposed approximation", "text": "The goal of the Expectation-Maximization (EM) algorithm is to find the maximum likelihood solution for models having latent variables [19]. Given an input sequence x, and its corresponding target label sequence z, the log likelihood of z is given by log p(z|x, \u03b8) = log \u2211\n\u03c0\u2208B\u22121(z) p(\u03c0|x, \u03b8), where \u03b8 represents the model parameters. For each observation x, we have a corresponding latent variable q which is a 1-of-k binary vector where k is the number of all the paths mapped to z. The log likelihood can be written in terms of q as log p(z, q|x, \u03b8) = \u2211\n\u03c0\u2208B\u22121(z) q\u03c0|x,z log p(\u03c0|x, \u03b8).\nEM algorithm starts with an initial parameter \u03b8\u0302, and repeats the following process until convergence.\nExpectation step calculates: \u03b3\u03c0|x,z = p(\u03c0|x,\u03b8\u0302)\n\u2211 \u03c0\u2208B\u22121(z) p(\u03c0|x,\u03b8\u0302)\n.\nMaximization step updates: \u03b8\u0302 = argmax\u03b8Q(\u03b8), where Q(\u03b8) = \u2211 \u03c0\u2208B\u22121(z) \u03b3\u03c0|x,z log p(\u03c0|x, \u03b8).\nIn the context of CTC and RNN, p(\u03c0|x, \u03b8) is given as p(\u03c0|a(x, \u03b8)) as in Eq. (6), where a(x, \u03b8) is the KT -dimensional output of the neural network. Taking the second-order derivative of log p(\u03c0|a) with respect to at gives diag(Y t)\u2212Y tY t\u22a4 , with Y t as in Eq. (14). Because this term is independent of \u03c0 and \u2211\n\u03c0\u2208B\u22121(z) \u03b3\u03c0|x,z = 1, the Hessian of Q with respect to a t is given by\nHQ,t = diag(Y t)\u2212 Y tY t \u22a4 , (18)\nwhich is the same as the convex approximation in Eq. (14)."}, {"heading": "5 Experiments", "text": "In this section, we present the experimental results on two different tasks of sequence labelling, offline handwriting recognition and phoneme recognition. The performance of Hessian-free optimization for MDRNN with the proposed matrix is compared with the one of stochastic gradient descent (SGD) optimization on the same settings."}, {"heading": "5.1 Database and preprocessing", "text": "IFN/ENIT Database [20] is a database of handwritten Arabic words, which consists of 32,492 images written by 411 writers. The entire dataset has 5 subsets (a, b, c, d, e). The 25,955 images corresponding to the subsets (b \u2212 e) are used for training. The validation set consists of 3,269 images\ncorresponding to the first half of the sorted list in alphabetical order (ae07 001.tif \u2212 ai54 028.tif) in set a. Rest of the images in set a, which amounts to 3,268, are used for test. The intensity of pixels is centered and scaled using the mean and standard deviation calculated from the training set.\nTIMIT corpus [21] is a benchmark database for evaluating speech recognition performance. The standard training, validation, and core dataset are used for performance evaluation. Each set contains 3,696 sentences, 400 sentences, and 192 sentences respectively. Mel spectrum with 26 coefficients is used as a feature vector with a pre-emphasis filter, 25 ms window size, and 10 ms shift size. Each input feature of the training set is normalized to have zero mean and unit variance. Similarly, the features of core and validation sets are centered and scaled using the mean and standard deviation of the training set."}, {"heading": "5.2 Experimental setup", "text": "For handwriting recognition, the basic architecture was adopted from the one proposed in [3]. Deeper networks were constructed by replacing the top layer by more layers. The number of LSTM cells in the augmented layer was chosen to make the total number of weights between different networks similar to each other. Detailed architectures are described in Table 1 with results.\nFor phoneme recognition, deep bidirectional LSTM and CTC in [4] was adopted as the basic architecture. Additionally, the memory cell block [8], in which the cells share the gates, was applied for efficient information sharing. Each LSTM block was constrained to have 10 memory cells.\nWe have found that using a large value of bias for input/output gates is beneficial for training deep MDRNN. A possible explanation is that the activation of neurons is exponentially decayed by input/output gates during the propagation. Thus, setting large bias values for those gates may help sending information through many layers at the beginning of the learning. For this reason, biases of input and output gates were initialized to 2, whereas the ones for forget gates and memory cells were initialized to 0. All the other weight parameters of MDRNN were initialized randomly from a uniform distribution in the range of [\u22120.1, 0.1].\nLabel error rate was used as the metric for performance evaluation along with the average loss of CTC in Eq. (8). It is defined by the edit distance which sums the total number of insertions, deletions, and substitutions required to match two given sequences. The final performance in Table 1 and 2 was evaluated using the weight parameters which gave the best label error rate on the validation set. To map output probabilities to a label sequence, best path decoding [1] was used for Arabic handwriting, and beam search decoding [4, 22] with the beam width of 100 was used for phoneme recognition. For phoneme recognition, 61 phoneme labels were used during training and decoding, and then mapped to 39 classes for calculating the phoneme error rate (PER) in Table 2 [4, 23] .\nFor phoneme recognition, the regularization method suggested in [24] was used. We applied Gaussian weight noise of standard deviation \u03c3 = {0.03, 0.04, 0.05} along with L2 regularization of strength 0.001. Table 2 presents the best result from different values of \u03c3. The network was first trained without noise, then it was initialized to the weights that gave the lowest CTC loss on the validation set. After that, the network was retrained with Gaussian weight noise [4]."}, {"heading": "5.2.1 Parameters", "text": "For HF optimization, we followed the basic setup described in [9], but different parameters were utilized. Tikhonov damping were used along with Levenberg-Marquardt heuristics. The value of the damping parameter \u03bb was initialized to 0.1, and adjusted according to the reduction ratio \u03c1 (multiplied by 0.9 if \u03c1 > 0.75, divided by 0.9 if \u03c1 < 0.25, and unchanged otherwise). The initial search direction for each run of CG was set to the CG direction found by the previous HF iteration decayed by 0.7. To ensure that CG follows the descent direction, we continued to perform minimum 5 and maximum 30 more CG iterations after it found the first descent direction. We terminated CG at iteration i before reaching the maximum iteration if the following condition is satisfied: (\u03c6(xi)\u2212 \u03c6(xi\u22125))/\u03c6(xi) < 0.005 where \u03c6 is the quadratic objective of CG without offset. The training data was divided into 100 and 50 mini-batches for handwriting and phoneme recognition experiments respectively, and used for both of the gradient and matrix-vector product calculation. The learning was stopped if any of two criteria did not improve for 20 epochs in handwriting recognition and for 10 epochs in phoneme recognition, respectively.\nFor SGD optimization, the learning rate \u01eb was chosen from {10\u22124, 10\u22125, 10\u22126}, and the momentum \u00b5 from {0.9, 0.95, 0.99}. For handwriting recognition, the best performance from all the possible combinations of parameters is presented in Table 1. For phoneme recognition, the best parameters out of 9 candidates for each network were selected after initialization (training without weight noise) based on the CTC loss. Then the networks were trained with weight noise. Additionally, the backpropagated error in LSTM layer was clipped to stay in the range [\u22121, 1] for stable learning [25]. The learning was stopped after 1000 epochs had been processed. Note that in order to guarantee the convergence, we selected a conservative criteria compared to the reference where the network converged after 85 epochs in handwriting recognition [3] and after 55-150 epochs in phoneme recognition [4]."}, {"heading": "5.3 Results", "text": "Table 1 presents the label error rate on the test set for handwriting recognition. In all cases, the networks trained using HF optimization outperformed the ones using SGD. The advantage of using HF is more pronounced as the depth increases. The improvements from deeper architecture can be seen with the error rate dropping from 6.1% to 4.5% as the depth increases from 3 to 13.\nTable 2 shows the phoneme error rate (PER) on the core set for phoneme recognition. The improved performance according to the depth can be observed for both optimization methods. The best PER for HF is 18.54% at 15 layers , and the one for SGD is 18.46% at 10 layers, which are comparable to the one in [4] where the reported results are PER 18.6% from the network with 3 layers having 3.8 million weights and PER 18.4% from the network with 5 layers having 6.8 million weights. The benefit from deeper network is obvious in terms of the number of weight parameters, although this is not meant to be the definitive performance comparison due to different preprocessing. The advantage of HF is not prominent for the experiments using TIMIT database. One explanation is that the networks tend to overfit to relatively small number of the training data samples, which removes the advantage of using advanced optimization techniques."}, {"heading": "6 Conclusion", "text": "Hessian-free optimization as an approach for successful learning of deep MDRNN, in conjunction with CTC, has been presented. To apply HF to CTC, a convex approximation of its objective function has been explored. Improvements in performance are seen as the depth of the network increases for both HF and SGD. HF shows significantly better performance for handwriting recognition compared to SGD, and comparable performance for speech recognition."}, {"heading": "A R operator to LSTM", "text": "We follow the version of LSTM in [4]. The forward pass of LSTM is to calculate the following functions:\nit = \u03c3(Wxixt +Whiht\u22121 +Wcict\u22121 + bi),\nft = \u03c3(Wxfxt +Whfht\u22121 +Wcf ct\u22121 + bf ),\nct = ft \u00b7 ct\u22121 + it \u00b7 tanh(Wxcxt +Whcht\u22121 + bc),\not = \u03c3(Wxoxt +Whoht\u22121Wcoct + bo),\nht = ot \u00b7 tanh(ct),\nwhere \u00b7 denotes the element-wise vector product, \u03c3 is the logistic sigmoid function, x, h, and c are the input, hidden, and cell activation vector respectively, and i, o, and f are the input, output, and forget gates respectively. All the gates and cells have the same size as the hidden vector h.\nApplying R operator to the above equations gives\nRv(it) = \u03c3 \u2032(Wxixt +Whiht\u22121 +Wcict\u22121 + bi)\n\u00b7 (Vxixt + Vhiht\u22121 + Vcict\u22121 + Vi +WhiRv(ht\u22121) +WciRv(ct\u22121)),\nRv(ft) = \u03c3 \u2032(Wxfxt +Whfht\u22121 +Wcfct\u22121 + bf )\n\u00b7 (Vxfxt + Vhfht\u22121 + Vcfct\u22121 + Vf +WhfRv(ht\u22121) +WcfRv(ct\u22121)),\nRv(ct) = Rv(ft) \u00b7 ct\u22121 + ft \u00b7 Rv(ct\u22121) +Rv(it) \u00b7 tanh(Wxcxt +Whcht\u22121 + bc)\n+ it \u00b7 tanh \u2032(Wxcxt +Whcht\u22121 + bc) \u00b7 (Vxcxt + Vhcht\u22121 + Vc +WhcRv(ht\u22121)),\nRv(ot) = \u03c3 \u2032(Wxoxt +Whoht\u22121 +Wcoct + bo),\n\u00b7 (Vxoxt + Vhoht\u22121 + Vcoct + Vo +WhoRv(ht\u22121) +WcoRv(ct)),\nRv(ht) = Rv(ot) \u00b7 tanh(ct) + ot \u00b7 tanh \u2032(ct) \u00b7 Rv(ct),\nwhere Vij and Vi are taken from v at the same point of Wij and bi in \u03b8, respectively. Note that \u03b8 and v have the same dimension."}, {"heading": "B Detailed derivation of the proposed approximation from the Fisher information matrix", "text": "The derivative of the negative log probability of Eq. (7) is given by\n\u2212 \u2202 log p(l|a)\n\u2202atk = ytk \u2212\n1\np(l|a)\n\u2211\ns\u2208lab(l,k)\n\u03b1t(s)\u03b2t(s). (19)\nwhere \u03b1t(s) and \u03b2t(s) denote forward and backward variables respectively, and lab(l, k) = {u|lu = k} is the set of positions where label k occurs in l [1, 3]. For compact notation, let Y t denote a column matrix containing ytk as its k-th element, and let V\nt denote a column matrix containing vtk = 1 p(l|a) \u2211 s\u2208lab(l,k) \u03b1t(s)\u03b2t(s) as its k-th element.\nThe Fisher information matrix [16] is defined by\nF = Ex\n[\nEl\u223cp(l|x)\n[\n(\n\u2202 log p(l|x, \u03b8) \u2202\u03b8\n)\u22a4 ( \u2202 log p(l|x, \u03b8)\n\u2202\u03b8\n)\n]]\n. (20)\nThe Fisher information matrix of MDRNN using CTC is written as\nF = Ex\n[\nEl\u223cp(l|x)\n[\n(\n\u2202 log p(l|a) \u2202a JN\n)\u22a4 ( \u2202 log p(l|a)\n\u2202a JN\n)\n]]\n(21)\n= Ex\n[\nJ\u22a4NEl\u223cp(l|a)\n[\n(\n\u2202 log p(l|a) \u2202a\n)\u22a4 ( \u2202 log p(l|a)\n\u2202a\n)\n]\nJN\n]\n, (22)\nwhere a = a(x, \u03b8) is the KT -dimensional output of the network N . The last step follows from that JN is independent of l.\nCTC assumes output probabilities at each timestep to be independent of those at other timesteps [1], therefore its Fisher information matrix is given as the sum of every timestep. It follows that\nF = Ex\n[\n\u2211\nt\nJ\u22a4NtEl\u223cp(l|a)\n[\n(\n\u2202 log p(l|a) \u2202at\n)\u22a4 ( \u2202 log p(l|a)\n\u2202at\n)\n]\nJNt\n]\n(23)\n= Ex\n[\n\u2211\nt\nJ\u22a4NtEl\u223cp(l|a)\n[\n( Y t \u2212 V t ) ( Y t \u2212 V t )\u22a4\n]\nJNt\n]\n(24)\n= Ex\n[\n\u2211\nt\nJ\u22a4Nt\n(\nY tY t \u22a4 \u2212 Y tEl [ V t ]\u22a4 \u2212 El [ V t ] Y t \u22a4 + El\n[ V tV t \u22a4 ])\nJNt\n]\n, (25)\nwhere Y t and V t are defined above.\nEl[v t k] is given by\nEl[v t k] = El\u223cp(l|a)\n\n\n1\np(l|a)\n\u2211\ns\u2208lab(l,k)\n\u03b1t(s)\u03b2t(s)\n\n (26)\n= \u2211\nl\n\u2211\ns\u2208lab(l,k)\n\u03b1t(s)\u03b2t(s) (27)\n= ytk. (28)\nEl[v t iv t j ] is given by\nEl[v t iv t j ] = El\u223cp(l|a)\n\n\n1\np(l|a)2 \u2211\ns\u2208lab(l,i)\n\u03b1t(s)\u03b2t(s) \u2211\ns\u2208lab(l,j)\n\u03b1t(s)\u03b2t(s)\n\n . (29)\nUnfortunately Eq. (29) cannot be analytically calculated in general. We apply the sufficient condition for the proposed approximation to be exact in section 4.4. By the assumption of one dominant path in a label sequence, El[vtiv t j ] = 0 for i 6= j. If the dominant path visits i at time t, \u2211\ns\u2208lab(l,i) \u03b1t(s)\u03b2t(s) = p(l|a). Otherwise \u2211\ns\u2208lab(l,i) \u03b1t(s)\u03b2t(s) = 0. Under this condition, Eq. (29) can be written as\nEl[v t iv t j ] = \u03b4ij\n\u2211\nl\n\u2211\ns\u2208lab(l,i)\n\u03b1t(s)\u03b2t(s) (30)\n= \u03b4ijy t i , (31)\nwhere \u03b4ij is Kronecker delta. Substituting El[V t] = Y t and El[V tV t \u22a4 ] = diag(Y t) into Eq. (25) gives\nF = Ex\n[\n\u2211\nt\nJ\u22a4Nt(diag(Y t)\u2212 Y tY t \u22a4 )JNt\n]\n, (32)\nwhich is the same form as Eq. (4) and (14) combined."}], "references": [{"title": "Supervised sequence labelling with recurrent neural networks, volume 385", "author": ["Alex Graves"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Unconstrained on-line handwriting recognition with recurrent neural networks", "author": ["Alex Graves", "Marcus Liwicki", "Horst Bunke", "J\u00fcrgen Schmidhuber", "Santiago Fern\u00e1ndez"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Offline handwriting recognition with multidimensional recurrent neural networks", "author": ["Alex Graves", "J\u00fcrgen Schmidhuber"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alex Graves", "Abdel-ranhman Mohamed", "Geoffrey Hinton"], "venue": "In Proceedings of ICASSP,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Fitnets: Hints for thin deep nets", "author": ["Adriana Romero", "Nicolas Ballas", "Samira Ebrahimi Kahou", "Antoine Chassang", "Carlo Gatta", "Yoshua Bengio"], "venue": "CoRR, abs/1412.6550,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "Reducing the dimensionality of data with neural networks", "author": ["Geoffrey E Hinton", "Ruslan R Salakhutdinov"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1997}, {"title": "Deep learning via Hessian-free optimization", "author": ["James Martens"], "venue": "In Proceedings of the 27th International Conference on Machine Learning,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2010}, {"title": "Learning recurrent neural networks with Hessian-free optimization", "author": ["James Martens", "Ilya Sutskever"], "venue": "In Proceedings of the 28th International Conference on Machine Learning,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "Fast curvature matrix-vector products for second-order gradient descent", "author": ["Nicol N Schraudolph"], "venue": "Neural Computation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2002}, {"title": "Fast exact multiplication by the hessian", "author": ["Barak A Pearlmutter"], "venue": "Neural Computation,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "Training deep and recurrent networks with Hessian-free optimization", "author": ["James Martens", "Ilya Sutskever"], "venue": "In Neural Networks: Tricks of the Trade,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks", "author": ["Alex Graves", "Santiago Fern\u00e1ndez", "Faustino Gomez", "J\u00fcrgen Schmidhuber"], "venue": "In Proceedings of the 23rd International Conference on Machine Learning,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "Convex Optimization", "author": ["Stephen Boyd", "Lieven Vandenberghe", "editors"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "Natural gradient works efficiently in learning", "author": ["Shun-Ichi Amari"], "venue": "Neural computation,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1998}, {"title": "Revisiting natural gradient for deep networks", "author": ["Razvan Pascanu", "Yoshua Bengio"], "venue": "In International Conference on Learning Representations,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Adaptive natural gradient learning algorithms for various stochastic models", "author": ["Hyeyoung Park", "S-I Amari", "Kenji Fukumizu"], "venue": "Neural Networks,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2000}, {"title": "Pattern Recognition and Machine Learning", "author": ["Christopher M. Bishop", "editor"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}, {"title": "IFN/ENIT-database of handwritten arabic words", "author": ["Mario Pechwitz", "S Snoussi Maddouri", "Volker M\u00e4rgner", "Noureddine Ellouze", "Hamid Amiri"], "venue": "In Proceedings of CIFED,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2002}, {"title": "Sequence transduction with recurrent neural networks", "author": ["Alex Graves"], "venue": "In ICML Representation Learning Workshop,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2012}, {"title": "Speaker-independent phone recognition using hidden markov models", "author": ["Kai-Fu Lee", "Hsiao-Wuen Hon"], "venue": "IEEE Transactions on Acoustics, Speech and Signal Processing,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1989}, {"title": "Practical variational inference for neural networks", "author": ["Alex Graves"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Multidimensional recurrent neural network (MDRNN) is an efficient architecture to build multidimensional context into recurrent neural networks [1].", "startOffset": 144, "endOffset": 147}, {"referenceID": 1, "context": "End-to-end training of MDRNN in conjunction with connectionist temporal classification (CTC) has shown the state-of-the-art performance in on/off-line handwriting recognition [2, 3] and speech recognition [4].", "startOffset": 175, "endOffset": 181}, {"referenceID": 2, "context": "End-to-end training of MDRNN in conjunction with connectionist temporal classification (CTC) has shown the state-of-the-art performance in on/off-line handwriting recognition [2, 3] and speech recognition [4].", "startOffset": 175, "endOffset": 181}, {"referenceID": 3, "context": "End-to-end training of MDRNN in conjunction with connectionist temporal classification (CTC) has shown the state-of-the-art performance in on/off-line handwriting recognition [2, 3] and speech recognition [4].", "startOffset": 205, "endOffset": 208}, {"referenceID": 4, "context": "In previous approaches, the performance of MDRNN has been demonstrated with the networks having up to depth of 5 layers, which are relatively limited compared to the recent progress on feedforward networks [5].", "startOffset": 206, "endOffset": 209}, {"referenceID": 5, "context": "Notable breakthrough was made where deep feedforward neural networks were initialized using layer-wise pre-training [6].", "startOffset": 116, "endOffset": 119}, {"referenceID": 4, "context": "Recently, there has been approaches to add supervision to intermediate layers to train deep networks [5, 7].", "startOffset": 101, "endOffset": 107}, {"referenceID": 6, "context": "To our knowledge, no such pre-training or bootstrapping method has been developed for MDRNN which potentially utilizes LSTM cells [8] as its hidden unit.", "startOffset": 130, "endOffset": 133}, {"referenceID": 7, "context": "Alternatively, HF optimization is an appealing approach to train deep neural networks due to its ability to overcome pathological curvature of the objective function [9].", "startOffset": 166, "endOffset": 169}, {"referenceID": 7, "context": "The recent success of HF to deep feedforward and recurrent neural networks [9, 10] encourages the use of HF to MDRNN.", "startOffset": 75, "endOffset": 82}, {"referenceID": 8, "context": "The recent success of HF to deep feedforward and recurrent neural networks [9, 10] encourages the use of HF to MDRNN.", "startOffset": 75, "endOffset": 82}, {"referenceID": 0, "context": "2 Multidimensional recurrent neural networks MDRNN is a generalization of RNN to process multidimensional data by replacing the single recurrent connection with as many connections as dimensions of the data [1].", "startOffset": 207, "endOffset": 210}, {"referenceID": 6, "context": "To enhance its ability of exploiting context information, long short-term memory (LSTM) [8] cells are usually utilized as hidden units.", "startOffset": 88, "endOffset": 91}, {"referenceID": 3, "context": "In addition, stacking MDRNNs to construct deeper networks further improves the performance as the depth increases, reporting the state-of-the-art performance in phoneme recognition [4].", "startOffset": 181, "endOffset": 184}, {"referenceID": 9, "context": "For neural networks, an efficient way to compute Gv was proposed by [11], extending the work of [12].", "startOffset": 68, "endOffset": 72}, {"referenceID": 10, "context": "For neural networks, an efficient way to compute Gv was proposed by [11], extending the work of [12].", "startOffset": 96, "endOffset": 100}, {"referenceID": 11, "context": "An indefinite Hessian matrix is problematic for 2nd-order optimization because it defines an unbounded local quadratic approximation [13].", "startOffset": 133, "endOffset": 137}, {"referenceID": 9, "context": "For nonlinear systems, the Hessian is not necessarily positive semidefinite, thus the GGN matrix is used as an approximation of the Hessian [11, 9].", "startOffset": 140, "endOffset": 147}, {"referenceID": 7, "context": "For nonlinear systems, the Hessian is not necessarily positive semidefinite, thus the GGN matrix is used as an approximation of the Hessian [11, 9].", "startOffset": 140, "endOffset": 147}, {"referenceID": 11, "context": "In principle, it is best to define L and N in a way that L performs as much of the computation as possible, with the positive semidefiniteness of HL as a minimum requirement [13].", "startOffset": 174, "endOffset": 178}, {"referenceID": 9, "context": "In practice, a nonlinear output layer along with its matching loss function [11], such as the softmax function with cross-entropy loss, is widely used.", "startOffset": 76, "endOffset": 80}, {"referenceID": 10, "context": "Thus, JN v can be written using a differential operator JN v = Rv(N (\u03b8)) [12], and the properties of the operator can be utilized for efficient computation.", "startOffset": 73, "endOffset": 77}, {"referenceID": 12, "context": "Connectioninst temporal classification (CTC) [14] provides an objective function of learning MDRNN for sequence labelling.", "startOffset": 45, "endOffset": 49}, {"referenceID": 9, "context": "The function \u2212 log(y k), corresponding to the softmax with cross-entropy loss, is convex [11].", "startOffset": 89, "endOffset": 93}, {"referenceID": 13, "context": "Whereas log-concavity is closed under multiplication, the sum of log-concave functions is not log-concave in general [15].", "startOffset": 117, "endOffset": 121}, {"referenceID": 9, "context": "loss function matches the softmax output layer [11], the CTC objective is convex except the part which computes fz for each of the label sequences.", "startOffset": 47, "endOffset": 51}, {"referenceID": 14, "context": "5 Derivation of the proposed approximation from the Fisher information matrix The identity of the GGN and the Fisher information matrix [16] has been shown for the network using the softmax with cross-entropy loss [17, 18].", "startOffset": 136, "endOffset": 140}, {"referenceID": 15, "context": "5 Derivation of the proposed approximation from the Fisher information matrix The identity of the GGN and the Fisher information matrix [16] has been shown for the network using the softmax with cross-entropy loss [17, 18].", "startOffset": 214, "endOffset": 222}, {"referenceID": 16, "context": "5 Derivation of the proposed approximation from the Fisher information matrix The identity of the GGN and the Fisher information matrix [16] has been shown for the network using the softmax with cross-entropy loss [17, 18].", "startOffset": 214, "endOffset": 222}, {"referenceID": 0, "context": "CTC assumes output probabilities at each timestep to be independent of those at other timesteps [1], therefore its Fisher information matrix is given as the sum of every timestep.", "startOffset": 96, "endOffset": 99}, {"referenceID": 17, "context": "6 EM interpretation of the proposed approximation The goal of the Expectation-Maximization (EM) algorithm is to find the maximum likelihood solution for models having latent variables [19].", "startOffset": 184, "endOffset": 188}, {"referenceID": 18, "context": "1 Database and preprocessing IFN/ENIT Database [20] is a database of handwritten Arabic words, which consists of 32,492 images written by 411 writers.", "startOffset": 47, "endOffset": 51}, {"referenceID": 2, "context": "2 Experimental setup For handwriting recognition, the basic architecture was adopted from the one proposed in [3].", "startOffset": 110, "endOffset": 113}, {"referenceID": 3, "context": "For phoneme recognition, deep bidirectional LSTM and CTC in [4] was adopted as the basic architecture.", "startOffset": 60, "endOffset": 63}, {"referenceID": 6, "context": "Additionally, the memory cell block [8], in which the cells share the gates, was applied for efficient information sharing.", "startOffset": 36, "endOffset": 39}, {"referenceID": 0, "context": "To map output probabilities to a label sequence, best path decoding [1] was used for Arabic handwriting, and beam search decoding [4, 22] with the beam width of 100 was used for phoneme recognition.", "startOffset": 68, "endOffset": 71}, {"referenceID": 3, "context": "To map output probabilities to a label sequence, best path decoding [1] was used for Arabic handwriting, and beam search decoding [4, 22] with the beam width of 100 was used for phoneme recognition.", "startOffset": 130, "endOffset": 137}, {"referenceID": 19, "context": "To map output probabilities to a label sequence, best path decoding [1] was used for Arabic handwriting, and beam search decoding [4, 22] with the beam width of 100 was used for phoneme recognition.", "startOffset": 130, "endOffset": 137}, {"referenceID": 3, "context": "For phoneme recognition, 61 phoneme labels were used during training and decoding, and then mapped to 39 classes for calculating the phoneme error rate (PER) in Table 2 [4, 23] .", "startOffset": 169, "endOffset": 176}, {"referenceID": 20, "context": "For phoneme recognition, 61 phoneme labels were used during training and decoding, and then mapped to 39 classes for calculating the phoneme error rate (PER) in Table 2 [4, 23] .", "startOffset": 169, "endOffset": 176}, {"referenceID": 21, "context": "For phoneme recognition, the regularization method suggested in [24] was used.", "startOffset": 64, "endOffset": 68}, {"referenceID": 3, "context": "After that, the network was retrained with Gaussian weight noise [4].", "startOffset": 65, "endOffset": 68}, {"referenceID": 7, "context": "1 Parameters For HF optimization, we followed the basic setup described in [9], but different parameters were utilized.", "startOffset": 75, "endOffset": 78}, {"referenceID": 2, "context": "Note that in order to guarantee the convergence, we selected a conservative criteria compared to the reference where the network converged after 85 epochs in handwriting recognition [3] and after 55-150 epochs in phoneme recognition [4].", "startOffset": 182, "endOffset": 185}, {"referenceID": 3, "context": "Note that in order to guarantee the convergence, we selected a conservative criteria compared to the reference where the network converged after 85 epochs in handwriting recognition [3] and after 55-150 epochs in phoneme recognition [4].", "startOffset": 233, "endOffset": 236}, {"referenceID": 3, "context": "46% at 10 layers, which are comparable to the one in [4] where the reported results are PER 18.", "startOffset": 53, "endOffset": 56}], "year": 2017, "abstractText": "Multidimensional recurrent neural network (MDRNN) has shown a remarkable performance in speech and handwriting recognition. The performance of MDRNN is improved by further increasing its depth, and the difficulty of learning the deeper network is overcome by Hessian-free (HF) optimization. Considering that connectionist temporal classification (CTC) is utilized as an objective of learning MDRNN for sequence labelling, the non-convexity of CTC poses a problem to apply HF to the network. As a solution to this, a convex approximation of CTC is formulated and its relationship with the EM algorithm and the Fisher information matrix is discussed. MDRNN up to the depth of 15 layers is successfully trained using HF, resulting in improved performance for sequence labelling.", "creator": "LaTeX with hyperref package"}}}