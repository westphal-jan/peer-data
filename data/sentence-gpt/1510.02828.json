{"id": "1510.02828", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Oct-2015", "title": "Gelisp: A Library to Represent Musical CSPs and Search Strategies", "abstract": "In this paper we present Gelisp, a new library to represent musical Constraint Satisfaction Problems and search strategies intuitively. Gelisp has two interfaces, a command-line one for Common Lisp and a graphical one for OpenMusic. Using Gelisp, we solved a problem of automatic music generation proposed by composer Michael Jarrell and we found solutions for the All-interval series. We created a framework for music generation using Gelisp.\n\n\n\n\nThe two interfaces include two standard types of solstices: solstices (e.g., the last and last solstices), a single one for the last solstices and a single one for the last solstices. Gelisp can be used to represent the solstices.\nThe first type of solstices: solstices (e.g., a solstices), a single one for the last solstices.\nWe defined a type of solstices by adding a new method to the current solstices: the first type of solstices is a simple solstice: solstices (e.g., a solstices), a single one for the last solstices. The second type is a single solstice: solstices (e.g., a solstices), a single one for the last solstices. We created a solstices for the last solstices.\nA key feature of Gelisp is that it can be used in some cases to achieve specific solstices: that it can also be used in other instances. We defined a solstice as a single solstice, and we defined an object as a single solstice: solstices (e.g., a solstices), a single solstice, and a single solstice: solstices (e.g., a solstices), a single solstice, and a single solstice: solstices (e.g., a solstices), a single solstice, and a single solstice: solstices (e.g., a solstices), a single solstice, and a single solstice: solstices (e.g., a solstices), a single solstice, and a single solstice: solstices (e.g., a solstices), a single solstice, and a single solstice: solstices (e.g.,", "histories": [["v1", "Fri, 9 Oct 2015 21:32:13 GMT  (152kb,D)", "http://arxiv.org/abs/1510.02828v1", "7 pages, 2 figures, not published"]], "COMMENTS": "7 pages, 2 figures, not published", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mauricio toro", "camilo rueda", "carlos ag\\'on", "g\\'erard assayag"], "accepted": false, "id": "1510.02828"}, "pdf": {"name": "1510.02828.pdf", "metadata": {"source": "CRF", "title": "Gelisp: A Library to Represent Musical CSPs and Search Strategies", "authors": ["Mauricio Toro", "Camilo Rueda", "Carlos Ag\u00f3n", "G\u00e9rard Assayag"], "emails": [], "sections": [{"heading": null, "text": "In this paper we present Gelisp, a new library to represent musical Constraint Satisfaction Problems and search strategies intuitively. Gelisp has two interfaces, a command-line one for Common Lisp and a graphical one for OpenMusic. Using Gelisp, we solved a problem of automatic music generation proposed by composer Michael Jarrell and we found solutions for the All-interval series."}, {"heading": "1 Introduction", "text": "A Constraint Satisfaction Problem (CSP) is a formalism to represent combinatorial problems. To solve a CSP we need to find objects that satisfy a number of constraints (i.e., criteria over those variables). CSPs provide a declarative way to represent combinatorial problems, specifying constraints instead of a sequence of steps to find the solution (as used in imperative programming). Additionally, it is possible to specify strategies to choo-se between branches during search.\nCSPs in computer music can be used to solve harmonic, rhythmic or melodic problems. In addition, they can be used for automatic generation of musical structures satisfying a set of rules. For instance, we can find solutions for the All-interval series [6], where we need to find a sequence of 12 different pitches with 12 different intervals.\nIn order to solve a CSP, we can use constraint programming languages such as Prolog or MozartOz [28]. In order to solve a CSP, those languages use a Constraint Solving Library (CSL) such as Gecode [12]. CLSs are usually written in C++."}, {"heading": "1.1 The problem", "text": "Using traditional CSL\u2019s or programming languages to solve CSPs is time-demanding and it is intended for specialized users because they usually require deep knowledge on C++ or logic programming. This makes these tools often unpractical to specify musical CSPs. Furthermore, these tools do not provide a representation for musical data structures."}, {"heading": "1.2 Our solution", "text": "Gelisp1 is a wrapper for Gecode to Common Lisp. Gelisp was originally developed by Rueda in 2006 and we modified it to work with current version of Gecode. Furthermore, we added support to model CSPs and search strategies graphically on OpenMusic (OM) [1]. In addition, Gelisp can take advantage of the musical data structures and functions defined for OM.\nThe novelty of Gelisp is to provide a graphical representation for search strategies (e.g., Depth First Search) and global constraints (e.g., \u201call the intervals of a sequence must be different\u201d), based on an efficient CSL."}, {"heading": "1.3 Related Work", "text": "Several graphical CSLs for OM have been developed in the last decade. Situation [10] generates music based on constraints, OmRc [11] finds structures corresponding to rhythmical constraints,\n1http://gelisp.sourceforge.net/\nar X\niv :1\n51 0.\n02 82\n8v 1\n[ cs\n.A I]\n9 O\nct 2\n01 5\nOmClouds [27] finds approximated solutions to a CSP, and OMBacktrack (http://www.ircam.fr/ equipes/repmus/) is a wrapper for the CSL Screamer [13] (a CSL written on Lisp).\nA graphical CSL to solve musical CSPs should be able to setup search strategies in a graphical way, post multiple kinds of constraints graphically without declaring explicitly loops and recursion, and solve the problem using state-of-art algorithms.\nUnfortunately, OmRC and OmSituation are designed to solve specific problems. OmBacktrack is no longer available for current versions of OM. Finally, OmClouds does not guarantee a solution satisfying all the constraints (i.e., a complete solution)."}, {"heading": "2 Gecode", "text": "Gecode is a Constraint Solving Library (CSL) written in C++. Gecode provides a propagator for each type of constraint. Propagators translate a constraint into basic constraints supplying the same information. Basic (finite domain) constraints have the form x \u2208 [a..b]. For instance, in a store (i.e., a set with all the constraints asserted) containing pitch1 \u2208 [36..72] and pitch2 \u2208 [60..80], a propagator for the constraint pitch1 > pitch2 + 2 would add constraints pitch1 \u2208 [63..72] and pitch2 \u2208 [60..69].\nAs described in the above example, the action of propagators ends up narrowing down the set of possible values for each variable. This, however, does not guarantee that it will eventually be inferred a single value for each variable. Gecode thus include search engines. The purpose of a search engine is to choose additional basic constraints to add into the store until all variables have reduced their domain to a single value. Using them we can find one, many, or all the solutions for a CSP.\nGecode works on different operating systems and it will be used as the CSL for Mozart-Oz, therefore it is very likely to be maintained for a long time. Furthermore, it provides an extensible API, allowing the user to create new propagators and user-defined search engines. For instance, we can extend Gecode to reason about trees and graphs, which are useful in musical CSPs."}, {"heading": "3 Gelisp", "text": "Gelisp provides an interface for Common Lisp and another for OM. In Gelisp, sequences of variables are represented by lists, as opposed to Gecode, where they are represented by arrays. This makes the power of list processing (provided by Lisp and OM) available for Gelisp users."}, {"heading": "3.1 Interface for Common Lisp", "text": "To solve a problem using this interface, we need to write a script. A script is a function to define the problem variables and their domains (the possible values that a variable can take), post constraints over the variables, and setup a search strategy.\nThis interface allows the user to call most of Gecode propagators for both, Finite Domain (FD) and Finite Set (FS) constraints. Basic FD constraints deal with expressions of the form x \u2208 R, where R is a range or a set of ranges of integers. On the other hand, FS constraints deal with expressions among sets of FD variables. In what follows, we present some propagators that Gelisp provides for FD and FS.\nGelisp provides FD propagators for defining domains (e.g., Domain(X) = [2, 5]), equalities and inequalities (e.g., X+Y < Z), cardinality (e.g., 1 occurs two times in [XY Z]), boolean constraints, regular expression constraints and the all-distinct constraint. The all-distinct constraint makes the elements of a sequence pairwise different.\nOn the other hand, for FS we provide constraints for defining domains (e.g., V \u2286 {1, 2, 3}) and set relations (e.g., X \u2282 A \u222aB).\nIn addition, Gelisp includes two search engines, Depth Search First (DSF) and Branch-andbound (BAB). The DFS engine works by choosing some variable, then a value for that variable, if this does not succeed (a constraint does not hold) then choo-ses another value. If the value succeed, then choo-ses another variable, then a value for it, etc.\nThe BAB engine works in a similar way, but solutions are computed in such a way that each subsequent solution increases or decreases the value of some user specified FD variable. Both engines can be used for both FS and FD. In addition, we can define search heuristics for value (i.e., the order to assign a value to a variable) and variable order (i.e., the order to choose a variable). These heuristics are parameters for the search engines."}, {"heading": "3.2 Graphical Interface for OpenMusic", "text": "Instead of writing a script, in the graphical interface we represent a program with a special patch, called CSP patch. A patch is a visual algorithm, in which boxes represent functional calls, and connections are functional compositions. Inside a CSP patch, we can place special boxes to define a constraint in the CSP, variable and value heuristics, the variable to be optimized during the search, and a time limit in the search.\nFor instance, we provide a variety of boxes to represent simple constraints (e.g., a = 2) and global constraints (e.g., \u201call the intervals from a sequence must be different\u201d).\nUsing the graphical interface we can express a variety of problems declaratively with global constraints. Global constraints have parameters. For instance, the graphical box to find the intervals of a list \u201cx \u2192 dx\u201d has a parameter to choose among absolute, non-absolute, or modulo n intervals (calculated as (Vi+1 \u2212 Vi)%n). Additionally, it has a parameter to post an all-distinct constraint over the intervals.\nMoreover, the output of a CSP patch can be connected to a box to find one solution or a box to find n the solutions"}, {"heading": "4 Applications", "text": "In this section, we describe both, an intuitive and formal definition of two CSPs and we explain how to solve them with Gelisp. Formally, a CSP is triple < X,D,C >, where X is a set of variables, D is the domain for each variable, and C is a set of constraints (read as conjunction) over the variables."}, {"heading": "4.1 All-interval series", "text": "In this problem, we need to find a sequence of 12 different pitches with 12 different intervals (fig. 1). This problem can be generalized to find n different pitches with n different intervals equivalent under inversion 2. For instance, a value of n = 24 represents the all-interval series for microtones.\nTherefore, a solution to this CSP is a sequence of n pairwise different variables with domain [1..n], where all modulo n intervals of the sequence are pairwise different. We give bellow a formalization of this problem\nVariables: V1 ... Vn Domains: [1..n] ... [1..n] Constraints:\n\u2022 C1 alldiff(V ) \u2022 C2 alldiff((Vi+1 \u2212 Vi)%n, i \u2264 n) 2For instance, an interval C-E is equivalent to E-C.\nThere is not a constraint over the interval (Vn\u2212V0) because that interval is always six, according to the literature. Furthermore, it is enough to calculate the series where V0 = 0 because the other ones can be obtained from that one using transposition. In addition, we know that if V1..Vn is an all-interval serie, Vn...V1 is also one. For those reasons, we include these two constraints to avoid symmetrical solutions:\n\u2022 C3 V0 = 0 \u2022 C4 V0 < Vn We represent graphically this CSP (fig. 2) with a box to create n all-different variables with domain [1..n], an x\u2192 dx box for C2 with an all-different parameter , an equality box for C3, and an inequality box for C4."}, {"heading": "4.2 Jarrell CSP", "text": "Composer Michael Jarrell proposed an idea for automatic music generation [4]. The goal is to generate a sequence of n notes. There is a fix number of occurrences OM1...OMA for each sequences of intervals (called motives) M1...MA over the sequence of non-absolute intervals of the output sequence. In addition, each note of the output sequence belongs to a Chord Ch. Moreover, the first L1 and the last note L2 of the output sequence are fixed. We give bellow a formalization of\nthis problem\nInputs:\n\u2022 Motives [M1...MA], Limits L1 and L2, Occurrences [OM1...OMA], Chord Ch\nVariables: V1 ... Vn Domains: [0..127] ... [0..127] Constraints:\n\u2022 C1 \u22001<i<A |{j,Mi is a subsequence of the variables\u2019 intervals that starts on j}| = OMi \u2022 C2 \u22001<i<n Vi \u2208 Ch \u2022 C3 V1 = L1 \u2227 Vn = L2 We represent graphically (fig.3) the constraint C1. We use the x\u2192dx and motives-occurs=\nboxes to fix the number of occurrences of each motive over the intervals of the output sequence.\nJarrell also proposes in [4] to consider absolute intervals and octaviation for the chords, the limits and the motives. For instance, using absolute intervals, an interval Vi+1 \u2212 Vi is equal to Vi\u2212Vi+1 and using octaviation, a pitch G4 is equivalent to G1,G2,G5, etc. Finally, he also proposes to have specific motives and chords for each segment of the output sequence, according to a userdefined segmentation. For simplicity, we do not present those constraints in this paper. However, a complete model of this problem can be found at Gelisp website."}, {"heading": "5 Concluding Remarks and Future Work", "text": "We presented a library for Common Lisp and OM providing a variety of constraints and search engines. Gelisp provides graphical boxes to represent some constraints and search strategies. Gelisp abstracts minor details that are not necessary for musicians and mathematicians.\nIt would be pretentious to conclude that we can easily model any musical CSP using Gelisp graphical interface, or using the command-line interface. However, we can model a variety of\nproblems using Gelisp in a simple way taking advantage of the state-of-the-art propagators and search engines provided by Gecode.\nAn approach related to CSPs is concurrent constraint programming, a family of process calculi often used to model musical interactions problems. Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].\nIn future works, we will explore a bigger sample of musical CSPs and their representation using global constraints. In addition, the idea of representing CSPs and their search strategies with business rules from Rules2Cp [5] can be extended to generate a musical CSP based on musical rules."}, {"heading": "6 ACKNOWLEDGMENTS", "text": "Thanks to Moreno Andreatta, Jean Bresson, Serge Lemouton, Killian Sprotte, and Guido Tack for their valuable comments when developing Gelisp. Thanks to Carlos Toro and Jorge Pe\u0301rez for their remarks on this paper."}], "references": [{"title": "Objects, Time and Constraints in OpenMusic", "author": ["C. Ag\u00f3n", "G. Assayag", "O. Delerue", "C. Rueda"], "venue": "In Proceedings of the International Computer Music Conference", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1998}, {"title": "Modeling temporal constrains for a system of interactive score", "author": ["A. Allombert", "M. Desainte-Catherine", "M. Toro"], "venue": "G. Assayag and C. Truchet, editors, Constraint Programming in Music, chapter 1, pages 1\u201323. Wiley", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2011}, {"title": "An overview of FORCES: an INRIA project on declarative formalisms for emergent systems", "author": ["J. Aranda", "G. Assayag", "C. Olarte", "J.A. P\u00e9rez", "C. Rueda", "M. Toro", "F.D. Valencia"], "venue": "P. M. Hill and D. S. Warren, editors, Logic Programming, 25th International Conference, ICLP 2009, Pasadena, CA, USA, July 14-17, 2009. Proceedings, volume 5649 of Lecture Notes in Computer Science, pages 509\u2013513. Springer", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "L\u2019utilisation de la CAO dans Congruences", "author": ["F. Courtot", "M. Jarrell"], "venue": "Cahiers d\u2019exploitation Ircam", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1990}, {"title": "From rules to constraint programs with the rules2cp modelling language", "author": ["F. Fages", "J. Martin"], "venue": "13th Worshop on Constraint Solving and Constraint Logic Programming, CSCLP\u201908", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2008}, {"title": "The structure of the all-interval series", "author": ["R. Morris", "D. Starr"], "venue": "Journal of Music Theory, 2(13)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1974}, {"title": "Concurrent Constraints Models of Music Interaction", "author": ["C. Olarte", "C. Rueda", "G. Sarria", "M. Toro", "F. Valencia"], "venue": "G. Assayag and C. Truchet, editors, Constraint Programming in Music, chapter 6, pages 133\u2013153. Wiley, Hoboken, NJ, USA.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Process Ordering in a Process Calculus for Spatially-Explicit Ecological Models", "author": ["A. Philippou", "M. Toro"], "venue": "Proceedings of MOKMASD\u201913, LNCS 8368, pages 345\u2013361. Springer", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}, {"title": "Simulation and Verification for a Process Calculus for Spatially-Explicit Ecological Models", "author": ["A. Philippou", "M. Toro", "M. Antonaki"], "venue": "Scientific Annals of Computer Science, 23(1):119\u2013167", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Integrating constraint programming in visual musical composition languages", "author": ["C. Rueda", "M. Lindberg", "M. Laurson", "G. Block", "G. Assayag"], "venue": "ECAI 98 Workshop on Constraints for Artistic Applications, Brighton", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1998}, {"title": "Searching for a rhythmical language", "author": ["O. Sandred"], "venue": "PRISMA 01 Review. EuresisEdizioni, Milano", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "Efficient constraint propagation engines", "author": ["C. Schulte", "P.J. Stuckey"], "venue": "CoRR, abs/cs/0611009", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "Nondeterministic lisp as a substrate for constraint logic programming", "author": ["J.M. Siskind", "D.A. Mcallester"], "venue": "proceedings of AAAI-93, pages 133\u2013138. AAAI Press", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1993}, {"title": "Probabilistic Extension to the Factor Oracle Model for Music Improvisation", "author": ["M. Toro"], "venue": "Master\u2019s thesis, Pontificia Universidad Javeriana Cali, Colombia", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2009}, {"title": "Towards a correct and efficient implementation of simulation and verification tools for probabilistic ntcc", "author": ["M. Toro"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Structured interactive musical scores", "author": ["M. Toro"], "venue": "M. V. Hermenegildo and T. Schaub, editors, Technical Communications of the 26th International Conference on Logic Programming, ICLP 2010, July 16-19, 2010, Edinburgh, Scotland, UK, volume 7 of LIPIcs, pages 300\u2013302. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2010}, {"title": "Structured Interactive Scores: From a simple structural description of a multimedia scenario to a real-time capable implementation with formal semantics", "author": ["M. Toro"], "venue": "PhD thesis, Univerist\u00e9 de Bordeaux 1, France", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "Structured interactive music scores", "author": ["M. Toro"], "venue": "CoRR, abs/1508.05559", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "Concurrent constraint conditional branching interactive scores", "author": ["M. Toro", "M. Desainte-Catherine"], "venue": "Proc. of SMC \u201910, Barcelona, Spain", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2010}, {"title": "A model for interactive scores with temporal constraints and conditional branching", "author": ["M. Toro", "M. Desainte-Catherine", "P. Baltazar"], "venue": "In Proc. of Journe\u0301es d\u2019Informatique Musical (JIM)", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "An extension of interactive scores for multimedia scenarios with temporal relations for micro and macro controls", "author": ["M. Toro", "M. Desainte-Catherine", "J. Castet"], "venue": "In Proc. of Sound and Music Computing", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "Formal semantics for interactive music scores: a framework to design", "author": ["M. Toro", "M. Desainte-Catherine", "C. Rueda"], "venue": "specify properties and execute interactive scenarios. Journal of Mathematics and Music, 8(1):93\u2013112", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2014}, {"title": "Mean-field semantics for a Process Calculus for Spatially-Explicit Ecological Models", "author": ["M. Toro", "A. Philippou", "S. Arboleda", "C. V\u00e9lez", "M. Puerta"], "venue": "Technical report, Department of Informatics and Systems, Universidad Eafit", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Synchronous parallel composition in a process calculus for ecological models", "author": ["M. Toro", "A. Philippou", "C. Kassara", "S. Sfenthourakis"], "venue": "G. Ciobanu and D. M\u00e9ry, editors, Proceedings of the 11th International Colloquium on Theoretical Aspects of Computing - ICTAC 2014, Bucharest, Romania, September 17-19, volume 8687 of Lecture Notes in Computer Science, pages 424\u2013441. Springer", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2014}, {"title": "ntccrt: A ntcc generic real-time interpreter", "author": ["M. Toro-Berm\u00fadez"], "venue": "more information available at https://sourceforge.net/projects/ntccrt . Internet", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2008}, {"title": "Towards non-threaded concurrent constraint programming for implementing multimedia interaction", "author": ["M. Toro-Berm\u00fadez"], "venue": null, "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2008}, {"title": "Omclouds", "author": ["C. Truchet", "G. Assayag", "P. Codognet"], "venue": "a heuristic solver for musical constraints. In MIC03, Metaheuristics International Conference, Kyoto", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2003}, {"title": "Concepts, Techniques, and Models of Computer Programming", "author": ["P. Van Roy", "S. Haridi"], "venue": null, "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2004}], "referenceMentions": [{"referenceID": 5, "context": "For instance, we can find solutions for the All-interval series [6], where we need to find a sequence of 12 different pitches with 12 different intervals.", "startOffset": 64, "endOffset": 67}, {"referenceID": 27, "context": "In order to solve a CSP, we can use constraint programming languages such as Prolog or MozartOz [28].", "startOffset": 96, "endOffset": 100}, {"referenceID": 11, "context": "In order to solve a CSP, those languages use a Constraint Solving Library (CSL) such as Gecode [12].", "startOffset": 95, "endOffset": 99}, {"referenceID": 0, "context": "Furthermore, we added support to model CSPs and search strategies graphically on OpenMusic (OM) [1].", "startOffset": 96, "endOffset": 99}, {"referenceID": 9, "context": "Situation [10] generates music based on constraints, OmRc [11] finds structures corresponding to rhythmical constraints,", "startOffset": 10, "endOffset": 14}, {"referenceID": 10, "context": "Situation [10] generates music based on constraints, OmRc [11] finds structures corresponding to rhythmical constraints,", "startOffset": 58, "endOffset": 62}, {"referenceID": 26, "context": "OmClouds [27] finds approximated solutions to a CSP, and OMBacktrack (http://www.", "startOffset": 9, "endOffset": 13}, {"referenceID": 12, "context": "fr/ equipes/repmus/) is a wrapper for the CSL Screamer [13] (a CSL written on Lisp).", "startOffset": 55, "endOffset": 59}, {"referenceID": 1, "context": ", Domain(X) = [2, 5]), equalities and inequalities (e.", "startOffset": 14, "endOffset": 20}, {"referenceID": 4, "context": ", Domain(X) = [2, 5]), equalities and inequalities (e.", "startOffset": 14, "endOffset": 20}, {"referenceID": 3, "context": "Composer Michael Jarrell proposed an idea for automatic music generation [4].", "startOffset": 73, "endOffset": 76}, {"referenceID": 3, "context": "Jarrell also proposes in [4] to consider absolute intervals and octaviation for the chords, the limits and the motives.", "startOffset": 25, "endOffset": 28}, {"referenceID": 1, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 21, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 24, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 6, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 16, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 13, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 15, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 17, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 2, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 20, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 14, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 18, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 19, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 25, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 78, "endOffset": 131}, {"referenceID": 7, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 155, "endOffset": 169}, {"referenceID": 23, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 155, "endOffset": 169}, {"referenceID": 8, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 155, "endOffset": 169}, {"referenceID": 22, "context": "Process calculi has been applied to the modeling of interactive music systems [2, 22, 25, 7, 17, 14, 16, 18, 3, 21, 15, 19, 20, 26] and ecological systems [8, 24, 9, 23].", "startOffset": 155, "endOffset": 169}, {"referenceID": 4, "context": "In addition, the idea of representing CSPs and their search strategies with business rules from Rules2Cp [5] can be extended to generate a musical CSP based on musical rules.", "startOffset": 105, "endOffset": 108}], "year": 2015, "abstractText": "In this paper we present Gelisp, a new library to represent musical Constraint Satisfaction Problems and search strategies intuitively. Gelisp has two interfaces, a command-line one for Common Lisp and a graphical one for OpenMusic. Using Gelisp, we solved a problem of automatic music generation proposed by composer Michael Jarrell and we found solutions for the All-interval series.", "creator": "easychair.cls-3.4"}}}