{"id": "1510.04206", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Oct-2015", "title": "Exploiters-Based Knowledge Extraction in Object-Oriented Knowledge Representation", "abstract": "This paper contains the consideration of knowledge extraction mechanisms of such object-oriented knowledge representation models as frames, object-oriented programming and object-oriented dynamic networks. In addition, conception of universal exploiters within object-oriented dynamic networks is also discussed. The main result of the paper is introduction of new exploiters-based knowledge extraction approach, which provides generation of a finite set of new classes of objects, based on the basic set of classes. The methods for calculation of quantity of new classes, which can be obtained using proposed approach, and of quantity of types, which each of them describes, are proposed. Proof that basic set of classes, extended according to proposed approach, together with union exploiter create upper semilattice is given. The approach always allows generating of finitely defined set of new classes of objects for any object-oriented dynamic network. A quantity of these classes can be precisely calculated before the generation. It allows saving of only basic set of classes in the knowledge base. The method is used for generation and generation of class hierarchies. To construct a class hierarchy, the function is invoked using a number of methods, with the purpose of eliminating the complexity of generation and for a reduction in class hierarchies. Finally, the method is used to construct a class hierarchy. In order to generate a class hierarchy, the method must also be used to generate a class hierarchy. By way of calculation of classes, a class hierarchy can also be created using a number of methods, with the purpose of producing a class hierarchy. In such a class hierarchy the number of methods must be used to produce a class hierarchy. A class hierarchy is formed using the method as its basis and is called for its own implementation. In order to achieve this, it must also have a class hierarchy. The method is used to create a class hierarchy. In fact, the method must also be used to generate a class hierarchy. For example, the method can be used to create a class hierarchy. The method can be used for generating a class hierarchy. The method is used to create a class hierarchy. The method is used to create a class hierarchy. The method is used to create a class hierarchy. The method is used to create a class hierarchy. The method is used to create a class hierarchy. The method is used to create a class hierarchy. The method is used to create a class hierarchy. In order to obtain the knowledge base for generating a class hierarchy, the method must also be used to generate a class hierarchy. In such a class hierarchy, the method must also", "histories": [["v1", "Wed, 14 Oct 2015 17:21:37 GMT  (10kb)", "http://arxiv.org/abs/1510.04206v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["dmytro terletskyi"], "accepted": false, "id": "1510.04206"}, "pdf": {"name": "1510.04206.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Dmytro Terletskyi", "Taras Shevchenko"], "emails": ["dmytro.terletskyi@gmail.com,"], "sections": [{"heading": null, "text": "ar X\niv :1\n51 0.\n04 20\n6v 1\n[ cs\n.A I]\n1 4\nO ct\nKeywords: knowledge extracting, object-oriented dynamic networks, inhomogeneous class, universal exploiters, upper semilattice."}, {"heading": "1 Introduction", "text": "Nowadays methods of knowledge extracting and reasoning about knowledge are significant constituent part of majority of knowledge-based systems. It gives an opportunity to extract or to obtain new knowledge, based on such called, basic knowledge. Such abilities make knowledge-based systems intelligent and applicable ones at least in such areas of artificial intelligence as information search, problem solving, planning, patterns recognition, decision making, etc.\nCurrently there is variety of knowledge representation models (KRMs), which implement different approaches to knowledge representation. One of them is an object-oriented knowledge representation, the main idea of which is representation of knowledge in terms of objects, classes of objects and relationships among them. Nowadays the most famous KRMs within this approach are frames and object-oriented programming (OOP). Both of them have their own knowledge extraction methods, which give some abilities for new knowledge obtaining. Let us consider these mechanisms and their main features in more detail."}, {"heading": "2 Knowledge Extraction in Frames and OOP", "text": "Frames as a KRM provide representation of knowledge in terms of hierarchies of frames (system of frames), where particular frame is a class-frame or instanceframe [3], [6]. Each frame is connected with others via relations of generalization (is-a, a-kind-of, an-instance-of, etc.), aggregation (a-part-of, part-whole, etc.) and association (owns, plays, creates, etc.). Relation of generalization provides implementation of inheritance mechanism that allows more specific frames, that situated lower in the hierarchy, inherit all slots from more general frames. Such structure of the system allows efficient knowledge representation, because it is based on the idea of representation of new knowledge via previously represented ones.\nIn addition, each frame can have definite procedural attachments, which allow execution of actions on it. Some procedures execute only when they are in need (when-procedures), other ones execute in particular situations. Thus, extracting of new knowledge in the frame system can be done by dint of the reasoning in inheritance hierarchy or by means of procedural attachments executing [10]. However, frames support two kinds of inheritance \u2013 single and multiple ones [6]. Inheritance can cause such problems as problem of exceptions, problem of redundancy and problem of ambiguity [1], [9]. Frames also allow overriding of values of slots in the instance-frames [6], that leads to the situation when the subclass or instance goes beyond its superclass.\nIn contrast to frames, OOP is divided on two styles \u2013 class-based and prototype based ones [5]. Similarly to frames, first approach provides knowledge representation in terms of hierarchies of classes, using inheritance. Second one gives an opportunity for knowledge representation in terms of prototypes. Despite that both styles are object-oriented ones, they have significant differences.\nClass-based approach provides ability to work only with instantiated objects, to change values of their properties, to execute their methods and in such a way to obtain new knowledge. We cannot change the description of a class, type of object or hierarchy of classes during program execution. It means that we can obtain only objects of the same type with changed values of the properties. In addition, inheritance in OOP causes the same problems as in frames [5].\nPrototype-based style gives an opportunity to operate with prototypes. Each new prototype is a modified clone of another one. It means that such approach is more flexible for description of new concepts, because it allows creating of new prototypes during program execution and implements the idea of partial inheritance. However, it requires much more computer memory and leads to redundancy in representation of particular prototypes."}, {"heading": "3 Object-Oriented Dynamic Networks", "text": "Besides mentioned object-oriented KRMs, there is one more KRM, such as object-oriented dynamic networks (OODNs), that was proposed in [8]. This\nKRM has similarity with all mentioned KRMs, however it also has some specific features, which give new opportunities in knowledge representation within object-oriented approach. Let us consider structure of this model.\nDefinition 1 Object-Oriented Dynamic Network is a 5-tuple\nOODN = (O,C,R,E,M),\nwhere:\n\u2013 O \u2013 a set of objects; \u2013 C \u2013 a set of classes of objects, which describe objects from the set O; \u2013 R \u2013 a set of relations, which are defined on the set O and C; \u2013 E \u2013 a set of exploiters, which are defined on the set O and C; \u2013 M \u2013 a set of modifiers, which are defined on the set O and C.\nDefinitions of all elements from the tuple OODN = (O,C,R,E,M) were introduced and considered in detail in [8]. Each object from the set O has some properties, which define it as an essence. There are two kinds of object\u2019s properties \u2013 quantitative and qualitative ones, which definitions were introduced in [7]. However, we need to consider the properties of a class of objects. Let us define them.\nDefinition 2 Quantitative property of class of objects T is a tuple\np(T ) = (v(p(T )), u(p(T ))),\nwhere v(p(T )) is an quantitative value of p(T ) and u(p(T )) are units of its measure.\nDefinition 3 Qualitative property of class of objects T is a verification function p(T ) = vf(T ), which is defined as a mapping vf(T ) : p(T ) \u2192 [0, 1] and reflects the degree (measure) of truth (presence) of a property p(T ) for the class T .\nLet us define the conception of equivalence of these kinds of properties.\nDefinition 4 Two quantitative properties p(T1) and p(T2) of arbitrary classes of objects T1 and T2 are equivalent, i.e. Eq(p(T1), p(T2)) = 1, if and only if (u(p(T1)) = u(p(T2))) \u2227 (v(p(T1)) = v(p(T2))).\nDefinition 5 Two qualitative properties p1(T1) and p2(T2) of arbitrary classes of objects T1 and T2 are equivalent, i.e. Eq(p1(T1), p2(T2)) = 1, if and only if (vf1(T1) = vf2(T1)) \u2227 (vf1(T2) = vf2(T2)).\nFor every object of a class we can define methods, which can be applied to them and allow definition of their behaviour and manipulating on them.\nDefinition 6 Method of class of objects T is a function f(T ), which can be applied to the class T , considering the features of its specification (vector of properties).\nFrom the previous definition, we can see that method is a function, which is defined under the properties. To define the equivalence of methods we should define the equivalence of two arbitrary functions, but in general case such problem is unsolvable one. So, we are going to introduce the equivalence of methods via following definition.\nDefinition 7 Two methods f1(T1) and f2(T2) of arbitrary classes of objects T1 and T2 are equivalent, i.e. Eq(f1(T1), f2(T2)) = 1, if and only if (f1(T1) = f1(T2)) \u2227 (f2(T1) = f2(T2)).\nIt introduces the equivalence of two methods on the same argument. It means that two methods f1(T1) and f2(T2) can be different as functions, however they can return the same results on the same objects.\nConcepts of objects, classes and relations among them have different implementations in various KRMs. One of the main differences is the definition of the class. Within frames and OOP, concept of class is defined as abstract description of some quantity of objects, which have the same nature [3], [5]. That is why, it is possible to conclude, that such class is a homogeneous one, because it contains only objects of the same type. Nevertheless, there are classes, which are inhomogeneous ones [7]. Within OODNs, there are two definitions for both types of classes. Let us consider them in more details.\nDefinition 8 Homogeneous class of objects T is a tuple T = (P (T ), F (T )), where P (T ) is specification (a vector of properties) of some quantity of objects, and F (T ) is their signature (a vector of methods).\nAccording to this definition, all objects of such class have the same type, i.e. they have the same properties and methods as their class. Let us consider the definition of inhomogeneous class of objects.\nDefinition 9 Inhomogeneous (heterogeneous) class of objects T is a tuple\nT = (Core(T ), pr1(A1), . . . , prn(An)),\nwhere Core(T ) = (P (T ), F (T )) is the core of class of objects T , which includes only properties and methods similar to corresponding properties of specifications P (A1), . . . , P (An) and corresponding methods of signatures F (A1), . . . , F (An) respectively, and where pri(Ai) = (P (Ai), F (Ai)) , i = 1, n are projections of objects A1, . . . , An, which consist of properties and methods typical only for these objects.\nAccording to this definition, it is possible to represent certain amount of any types by dint of one class within object-oriented approach. While representation of each type of objects in OOP always requires definition of new class.\nAnalyzing definitions 8 and 9, we can conclude that a homogeneous class of objects defines a type of objects. In this case the type and the class of objects mean the same. However, an inhomogeneous class of objects defines at least two different types of objects within one class of objects that is why in this case the\ntype and the class are not equivalent. In other words inhomogeneous class of objects includes a few types of objects. Let us define a type of inhomogeneous class of objects.\nDefinition 10 Type of arbitrary inhomogeneous class of objects\nT = (Core(T ), pr1(T ), . . . , prn(T ))\nis a homogeneous class of objects Ti = (Core(T ), pri(T )), where i = 1, n.\nNow, let us define the following tree kinds of subclass relations for classes of objects: homogeneous \u2286 homogeneous, inhomogeneous \u2286 inhomogeneous and homogeneous \u2286 inhomogeneous.\nDefinition 11 Homogeneous class of objects T1 = (P (T1), F (T1)) is a subclass of homogeneous class of objects T2 = (P (T2), F (T2)), i.e. T1 \u2286 T2 if and only if\n(\u2200pi \u2208 P1 \u2203pj \u2208 P2 | Eq(pi, pj) = 1) \u2227 (\u2200fk \u2208 F1 \u2203fw \u2208 F2 | Eq(fk, fw) = 1),\nwhere P1, P2, F1, F2 are sets, which contain elements of vectors P (T1), P (T2), F (T1), F (T2) respectively and i = 1, |P1|, j = 1, |P2|, k = 1, |F1|, w = 1, |F2|.\nDefinition 12 Inhomogeneous class of objects\nT1 = (Core(T1), pr1(T1), . . . , prn(T1))\nis a subclass of inhomogeneous class of objects\nT2 = (Core(T2), pr1(T2), . . . , prm(T2)),\ni.e. T1 \u2286 T2 if and only if\n(\u2200ai \u2208 C1 \u2203aj \u2208 C2 | Eq(ai, aj) = 1)\u2227\n\u2227(\u2200bhk \u2208 prh \u2203!bvw , prv \u2227 bvw \u2208 prv | Eq(bhk , bvw) = 1),\nwhere C1, C2, prh, prv are sets, which contain elements of vectors from the sets Core(T1), Core(T2), prh(T1), prv(T2) respectively and i = 1, |C1|, j = 1, |C2|, k = 1, |prh|, w = 1, |prv|, h = 1, n, v = 1,m.\nDefinition 13 Homogeneous class of objects T1 = (P (T1), F (T1)) is a subclass of inhomogeneous class of objects T2 = (Core(T2), pr1(T2), . . . , prn(T2)), i.e. T1 \u2286 T2 if and only if\n(\u2200pi \u2208 P1 \u2203pj \u2208 C2 \u2228 prv | Eq(pi, pj) = 1)\u2227\n\u2227(\u2200fk \u2208 F1 \u2203fw \u2208 C2 \u2228 prv | Eq(fk, fw) = 1),\nwhere P1, F1 are sets, which contain elements of vectors P (T1), F (T1) and C2, prv are sets, which contain elements of vectors from the sets Core(T2) and prv(T2) respectively, i = 1, |P1|, j = 1, |C2|+ |prv|, k = 1, |F1|, w = 1, |C2|+ |prv|, v = 1, n.\nAccording to the definitions of class of objects, it is possible to define the vector of methods for each class of objects, concerning its specification. Such kind of methods are internal ones, because they are defined under particular properties of the class. Besides them, there are methods, which are called external ones and are defined under whole specification of the class. Depending on the character of actions, all methods can be divided on exploiters and modifiers. Exploiters do not change objects or classes, they just use them as parameters for new knowledge obtaining. While, modifiers change the basic knowledge and allow modelling of their changes or evolution over the time. That is why F (T ) contains internal, E and M contain external methods of the class of objects.\nSummarizing, OODN can be considered as two conceptual parts. First of them is declarative, which includes sets O, C, R, and allows representation of knowledge about particular domain. Second part is procedural one. It includes sets E, M and provides the tools for obtaining new knowledge from basic ones. All following considerations are connected with applications of procedural part of OODN, in particular exploiters-based knowledge extraction."}, {"heading": "4 Exploiters-Based Knowledge Extraction", "text": "As it was mentioned above, exploiters form significant constituent of procedural part of OODN. Generally, we can define variety of exploiters for each class of objects, however majority of them are locally closed under their classes. That is why, such universal exploiters as union, intersection, difference and symmetrical difference were introduced in [7]. Their applications allow building of new classes of objects. This fact has significant value not only in knowledge extraction, but also in programming, because it is a step toward the implementation of runtime class generation.\nLet us define union exploiter for classes of objects, using definition 10.\nDefinition 14 Union \u222a of two arbitrary nonequivalent classes of objects T1 and T2 is an inhomogeneous class of objects T = (Core(T ), pr1(T ), . . . , prn(T )), where Core(T ) = (P (T ), F (T )) is its core and includes only properties and methods, which are similar for types T11 , . . . , T1m , T21 , . . . , T2k , and where prj(T ) = (P (T ), F (T )) is projection of type Tij , i = 1, 2, j = 1, n, n = m+k which consist of properties and methods typical only for this type.\nApplication of union exploiter to classes of objects has some important features besides generation of new classes of objects. Let us formulate and prove a few theorems, which illustrate these features.\nTheorem 1 For any OODN = (O,C = {T1, . . . , Tn}, R,E = {\u222a},M), where classes T1, . . . , Tn are homogeneous ones and do not have any common properties and methods, all possible applications of union exploiter \u222a, including all possible its superpositions, to classes of objects from the set C always generate finite quantity of new classes of objects, which can be calculated by the following formula:\nq(CE) = 2 n \u2212 n\u2212 1,\nwhere n = |C|.\nProof. It is known that the number of all possible unique k-elements combinations from the n-elements set can be calculated as Ckn. Similarly, the number of all possible unique classes of objects created from the basic set of classes C = {T1, . . . , Tn} using union exploiter can be represented as a combination of k = 2, n different classes from the set C. It is known that\nk\u2211\nn=0\nCkn = 2 n.\nHowever, we cannot create classes of objects, which describe 1 and 0 different types, applying union exploiter to the classes of objects from the set C, i.e. we do not count C0n and C 1 n, we can conclude that\nq(CE) = n\u2211\nk=0\nCkn \u2212 C 0 n \u2212 C 1 n =\nn\u2211\nk=2\nCkn = 2 n \u2212 n\u2212 1.\nUsing Theorem 1, we can formulate one more important theorem.\nTheorem 2 Set of classes of objects\nC = {T1, . . . , Tn, Tn+1, . . . , T2n\u22121}\nof any OODN, extended according to Theorem 1, with exploiter \u222a create the upper semilattice, where class T1,...,n = T1 \u222a \u00b7 \u00b7 \u00b7 \u222a Tn is its greatest upper bound.\nProof. According to the definition of upper semilattice, it should be a system SL = (A,\u2126), where A is a poset, \u2126 = {\u2228} and \u2228 is binary, idempotent, commutative and associative operation [2], [4].\nIn our case, carrier of upper semilattice is the set of classes C, where we define exploiter \u222a, thus SL = (C,\u2126), where \u2126 = {\u222a}. From the definition 14 it follows, that mentioned properties of \u2228 are true for \u222a, i.e.\n1. T1 \u222a T1 = T1; 2. T1 \u222a T2 = T2 \u222a T1; 3. T1 \u222a (T2 \u222a T3) = (T1 \u222a T2) \u222a T3.\nNow, let us show that C is a poset. For this, we should define \u2200T1, T2 \u2208 C |T1 \u2286 T2 \u21d4 T1 \u222a T2 = T2 and show that \u2286 is a relation of partial order under the set C. It means, we should prove that relation \u2286 is reflexive, antisymmetric, and transitive one.\n1. T1 \u2286 T1 \u21d4 T1 \u222a T1 = T1 follows from idempotency of \u222a; 2. T1 \u2286 T2 \u21d4 T1 \u222a T2 = T2, T2 \u2286 T1 \u21d4 T2 \u222a T1 = T1 and from commutativity\nof \u222a, we can conclude that T1 = T2;\n3. T1 \u2286 T2 \u21d4 T1 \u222a T2 = T2, T2 \u2286 T3 \u21d4 T2 \u222a T3 = T3 \u21d2 (T1 \u222a T2) \u222a T3 = T1 \u222a (T2 \u222a T3) = T1 \u222a T3 = T3 \u21d2 T1 \u222a T3 = T3 \u21d4 T1 \u2286 T3.\nThus, SL = (C = {T1, . . . , Tn, Tn+1, . . . , T2n\u22121}, \u2126 = {\u222a}) is an upper semilattice, where T1,...,n = T1 \u222a \u00b7 \u00b7 \u00b7 \u222a Tn is its greatest upper bound.\nUsing results of Theorem 2, we can formulate the following corollary.\nCorollary 21 Set of classes of objects C of any OODN, extended according to Theorem 1, and union exploiter \u222a, which is defined under it, create a finitelygenerated universal algebra\nG = (C = {T1, . . . , Tn, Tn+1, . . . , T2n\u22121}, \u2126 = {\u222a}) ,\nwhere Cb = {T1, . . . , Tn} is generative set for the set C.\nNow let us consider an example, which illustrates specific of exploiters-based knowledge extraction within OODN. Let us define the OODN\nSalad = (O,C,R,E,M),\nwhich describes some ingredients of a salad, for example cucumber, tomato, onion, cabbage, salt and sunflower oil. For this purpose, we define following sets of objects O, classes of objects C and set of relations R\nO = {cuc, tom, on, cab, sal, soil},\nC = {Cuc, T om,Cab,On, Spi, Oil},\nR = {cuc an\u2212inst.\u2212of \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Cuc, tom an\u2212inst.\u2212of \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Tom, cab an\u2212inst.\u2212of \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Cab,\non an\u2212inst.\u2212of \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 On, sal an\u2212inst.\u2212of \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Spi, soil an\u2212inst.\u2212of \u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2192 Oil.}.\nSuppose the set of exploiters is defined as E = {\u222a}. We do not define the set of modifiers M , because it is not necessary within consideration of exploiters-based knowledge extraction.\nLet us define the specifications of classes from set C in the following way\nP (Cuc) = (p1(Cuc), . . . , p4(Cuc)), P (Tom) = (p1(Tom), . . . , p4(Tom)),\nP (Cab) = (p1(Cab), . . . , p4(Cab)), P (On) = (p1(On), . . . , p4(On)),\nP (Spi) = (p1(Spi), . . . , p4(Spi)), P (Oil) = (p1(Oil), . . . , p4(Oil)),\nwhere p1(Cuc), p1(Tom), p1(Cab), p1(On) \u2013 masses of vegetables, p1(Spi) \u2013 type of spices, p1(Oil) \u2013 type of oil, p2(Cuc), p2(Tom), p2(Cab), p2(On) \u2013 colors of vegetables, p2(Spi) \u2013 mass of spices, p2(Oil) \u2013 volume of oil, p3(Cuc), p3(Tom), p3(Cab), p3(On) \u2013 freshness of vegetables, p3(Spi) \u2013 taste of spices, p3(Oil) \u2013 color of oil, p4(Cuc), p4(Tom), p4(Cab), p4(On), p4(Spi), p4(Oil) \u2013 prices. Values of all properties of these classes are defined in Table 1.\nLet us define the specifications of objects from the set O, using specifications of their classes (see Table 2).\nWe have described the OODN for the salad. Clearly that all elements of sets O, C and R are basic knowledge. Let us obtain all possible new knowledge from them using exploiter \u222a. According to Theorems 1-2 we obtain such 15 classes, that each of them describes 2 different types of objects\nCucTom, CucCab, CucOn, CucSpi, CucOil, T omCab, T omOn, TomSpi,\nT omOil, CabOn, CabSpi, CabOil, OnSpi, OnOil, SpiOil;\nsuch 20 classes, that each of them describes 3 different types of objects\nCucTomCab, CucTomOn, CucTomSpi, CucTomOil, CucCabOn,\nCucCabSpi, CucCabOil, CucOnSpi, CucOnOil, CucSpiOil,"}, {"heading": "T omCabOn, T omCabSpi, T omCabOil, T omOnSpi, T omOnOil,", "text": "T omSpiOil, CabOnSpi, CabOnOil, CabSpiOil, OnSpiOil;\nsuch 15 classes, that each of them describes 4 different types of objects\nCucTomCabOn, CucTomCabSpi, CucTomCabOil, CucTomOnSpi,\nCucTomOnOil, CucTomSpiOil, CucCabOnSpi, CucCabOnOil,\nCucCabSpiOil, CucOnSpiOil, T omCabOnSpi, T omCabOnOil,\nT omCabSpiOil, T omOnSpiOil, CabOnSpiOil;\nsuch 6 classes, that each of them describes 5 different types of objects\nCucTomCabOnSpi, CucTomCabOnOil, CucTomCabSpiOil,\nCucTomOnSpiOil, CucCabOnSpiOil, T omCabOnSpiOil;\nand 1 class, which describes 6 different types of objects\nCucTomCabOnSpiOil.\nAs we can see, we obtain 57 new classes of objects, or in other words, 57 different combinations of salad\u2019s ingredients from the 6 basic ones. In such a way we extended the set of classes C by adding new knowledge, extracted from basic ones. The most general obtained class CucTomCabOnSpiOil is an inhomogeneous one and has following structure\nCucTomCabOnSpiOil = (pr1(CucTomCabOnSpiOil), . . . ,\npr6(CucTomCabOnSpiOil)),\nwhere\npr1(CucTomCabOnSpiOil) = P (Cuc), pr2(CucTomCabOnSpiOil) = P (Tom),\npr3(CucTomCabOnSpiOil) = P (Cab), pr4(CucTomCabOnSpiOil) = P (On),\npr5(CucTomCabOnSpiOil) = P (Spi), pr6(CucTomCabOnSpiOil) = P (Oil).\nAll other obtained classes have the similar structure. According to Theorem 2, the extended set of classes C and exploiter \u222a create upper semilattice. It means, that there is partial order relation \u2286, which is defined on the set C. Furthermore, according to Corollary 21 they create a finitely-generated universal algebra\nG = (C = {Cuc, T om,Cab,On, Spi, Oil, . . . , CucTomCabOnSpiOil}, E = {\u222a}),\nwhere Cb = {Cuc, T om,Cab,On, Spi, Oil} \u2286 C is generative or basic set for the set C.\nSummarizing, we obtained all possible unions of the basic classes from the set C. All these classes can be viewed as schemas or recipes for which we can use objects defined in Table 2. In means that in such a way we can create particular salad, moreover we can create different salads using one scheme putting different proportions of ingredients. Using chosen scheme, we can calculate different properties of the cooked salad, for example its prise, mass, etc."}, {"heading": "5 Conclusions", "text": "This paper contains consideration of main features of knowledge extraction mechanisms of such object-oriented KRMs as frames, OOP and OODNs. Furthermore, conception of universal exploiters within object-oriented dynamic networks is also discussed.\nThe main achievement of the paper is introduction of new exploiters-based knowledge extraction method for OODNs, which always provides generating of finitely defined set of new classes of objects, based on the basic set of classes. The main features of the proposed method are:\n\u2013 ability to calculate: \u2022 quantity of new classes, which can be obtained, using proposed approach, \u2022 quantity of different types, which each of obtained classes describes;\n\u2013 the basic set of classes of any OODN, extended according to proposed approach, together with union exploiter, create: \u2022 upper semilattice, \u2022 finitely generated universal algebra, for which the basic set of classes of OODN is a generative set.\nIt allows us to extract new knowledge from the basic ones when we need them and to save only basic set of classes in the knowledge base and database. Moreover, obtained knowledge always have the defined structure, i.e. they form the upper semilattice. It means that we can use the results of upper semilattice theory in such kind of knowledge extraction and representation.\nHowever, despite all advantages, proposed approach requires further research, at least in the following directions:\n\u2013 study of the case when the basic set of classes of OODN contains classes that has some common properties or methods, \u2013 study of the case when the OODN is a fuzzy one, \u2013 adapting and usage of proposed approach in other known object-oriented\nKRMs."}, {"heading": "1. Al-Asady, R.: Inheritance Theory: An Artificial Intelligence Approach. Ablex Publishing Corporation, Norwood, New Jersey (1995)", "text": ""}, {"heading": "2. Birkhoff, G.: Lattice theory. 3-rd Revised edition. American Mathematical Society Colloquium Publications, New York (1967)", "text": ""}, {"heading": "3. Brachman, R.J., Levesque, H.J.: Knowledge Representation and Reasoning. Morgan Kaufmann Publishers, San Francisco, California (2004)", "text": ""}, {"heading": "4. Davey, B.A., Priestley, H.A.: Introduction to Lattices and Order. Second Edition. Cambridge University Press, New York (2002)", "text": ""}, {"heading": "5. Craig, I.D.: Object-Oriented Programming Languages: Interpretation. Springer,", "text": "London (2007) 6. Negnevitsky, M.: Artificial Intelligence: A Guide to Intelligent Systems: Second Edition. Addison-Wesley, Herlow, Essex (2004) 7. Terletskyi, D.O., Provotar, O.I.: Mathematical Foundations for Designing and Development of Intelligent Systems of Information Analysis. Scientific Journal \u201cProblems in Programming\u201d. 15, 233\u2013241 (2014) 8. Terletskyi, D.O., Provotar, O.I.: Object-Oriented Dynamic Networks. In: Setlak, G., Markov, K. (eds.) Computational Models for Business and Engineering Domains. IBS ISC, vol. 30, pp. 123\u2013136. ITHEA (2014) 9. Touretzky, D.S.: The Mathematics of Inheritance Systems. Morgan Kaufmann Publishers, Los Altos, California (1986) 10. Ueno, H., Koiama, T., Okamoto, T., Matsubi, B., Isidzuka, M.: Representation and Usage of Knowledge (In Russian). Mir, Moscow (1987)"}], "references": [{"title": "Inheritance Theory: An Artificial Intelligence Approach", "author": ["R. Al-Asady"], "venue": "Ablex Publishing Corporation, Norwood, New Jersey", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1995}, {"title": "Lattice theory", "author": ["G. Birkhoff"], "venue": "3-rd Revised edition. American Mathematical Society Colloquium Publications, New York", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1967}, {"title": "Knowledge Representation and Reasoning", "author": ["R.J. Brachman", "H.J. Levesque"], "venue": "Morgan Kaufmann Publishers, San Francisco, California", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "Introduction to Lattices and Order", "author": ["B.A. Davey", "H.A. Priestley"], "venue": "Second Edition. Cambridge University Press, New York", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2002}, {"title": "Object-Oriented Programming Languages: Interpretation", "author": ["I.D. Craig"], "venue": "Springer, London", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2007}, {"title": "Artificial Intelligence: A Guide to Intelligent Systems: Second Edition", "author": ["M. Negnevitsky"], "venue": "Addison-Wesley, Herlow, Essex", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2004}, {"title": "Mathematical Foundations for Designing and Development of Intelligent Systems of Information Analysis", "author": ["D.O. Terletskyi", "O.I. Provotar"], "venue": "Scientific Journal \u201cProblems in Programming\u201d. 15, 233\u2013241", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Object-Oriented Dynamic Networks", "author": ["D.O. Terletskyi", "O.I. Provotar"], "venue": "Setlak, G., Markov, K. (eds.) Computational Models for Business and Engineering Domains. IBS ISC, vol. 30, pp. 123\u2013136. ITHEA", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "The Mathematics of Inheritance Systems", "author": ["D.S. Touretzky"], "venue": "Morgan Kaufmann Publishers, Los Altos, California", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1986}, {"title": "Representation and Usage of Knowledge (In Russian)", "author": ["H. Ueno", "T. Koiama", "T. Okamoto", "B. Matsubi", "M. Isidzuka"], "venue": "Mir, Moscow", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1987}], "referenceMentions": [{"referenceID": 2, "context": "Frames as a KRM provide representation of knowledge in terms of hierarchies of frames (system of frames), where particular frame is a class-frame or instanceframe [3], [6].", "startOffset": 163, "endOffset": 166}, {"referenceID": 5, "context": "Frames as a KRM provide representation of knowledge in terms of hierarchies of frames (system of frames), where particular frame is a class-frame or instanceframe [3], [6].", "startOffset": 168, "endOffset": 171}, {"referenceID": 9, "context": "Thus, extracting of new knowledge in the frame system can be done by dint of the reasoning in inheritance hierarchy or by means of procedural attachments executing [10].", "startOffset": 164, "endOffset": 168}, {"referenceID": 5, "context": "However, frames support two kinds of inheritance \u2013 single and multiple ones [6].", "startOffset": 76, "endOffset": 79}, {"referenceID": 0, "context": "Inheritance can cause such problems as problem of exceptions, problem of redundancy and problem of ambiguity [1], [9].", "startOffset": 109, "endOffset": 112}, {"referenceID": 8, "context": "Inheritance can cause such problems as problem of exceptions, problem of redundancy and problem of ambiguity [1], [9].", "startOffset": 114, "endOffset": 117}, {"referenceID": 5, "context": "Frames also allow overriding of values of slots in the instance-frames [6], that leads to the situation when the subclass or instance goes beyond its superclass.", "startOffset": 71, "endOffset": 74}, {"referenceID": 4, "context": "In contrast to frames, OOP is divided on two styles \u2013 class-based and prototype based ones [5].", "startOffset": 91, "endOffset": 94}, {"referenceID": 4, "context": "In addition, inheritance in OOP causes the same problems as in frames [5].", "startOffset": 70, "endOffset": 73}, {"referenceID": 7, "context": "Besides mentioned object-oriented KRMs, there is one more KRM, such as object-oriented dynamic networks (OODNs), that was proposed in [8].", "startOffset": 134, "endOffset": 137}, {"referenceID": 7, "context": "Definitions of all elements from the tuple OODN = (O,C,R,E,M) were introduced and considered in detail in [8].", "startOffset": 106, "endOffset": 109}, {"referenceID": 6, "context": "There are two kinds of object\u2019s properties \u2013 quantitative and qualitative ones, which definitions were introduced in [7].", "startOffset": 117, "endOffset": 120}, {"referenceID": 0, "context": "Definition 3 Qualitative property of class of objects T is a verification function p(T ) = vf(T ), which is defined as a mapping vf(T ) : p(T ) \u2192 [0, 1] and reflects the degree (measure) of truth (presence) of a property p(T ) for the class T .", "startOffset": 146, "endOffset": 152}, {"referenceID": 2, "context": "Within frames and OOP, concept of class is defined as abstract description of some quantity of objects, which have the same nature [3], [5].", "startOffset": 131, "endOffset": 134}, {"referenceID": 4, "context": "Within frames and OOP, concept of class is defined as abstract description of some quantity of objects, which have the same nature [3], [5].", "startOffset": 136, "endOffset": 139}, {"referenceID": 6, "context": "Nevertheless, there are classes, which are inhomogeneous ones [7].", "startOffset": 62, "endOffset": 65}, {"referenceID": 6, "context": "That is why, such universal exploiters as union, intersection, difference and symmetrical difference were introduced in [7].", "startOffset": 120, "endOffset": 123}, {"referenceID": 1, "context": "According to the definition of upper semilattice, it should be a system SL = (A,\u03a9), where A is a poset, \u03a9 = {\u2228} and \u2228 is binary, idempotent, commutative and associative operation [2], [4].", "startOffset": 179, "endOffset": 182}, {"referenceID": 3, "context": "According to the definition of upper semilattice, it should be a system SL = (A,\u03a9), where A is a poset, \u03a9 = {\u2228} and \u2228 is binary, idempotent, commutative and associative operation [2], [4].", "startOffset": 184, "endOffset": 187}], "year": 2015, "abstractText": "This paper contains the consideration of knowledge extraction mechanisms of such object-oriented knowledge representation models as frames, object-oriented programming and object-oriented dynamic networks. In addition, conception of universal exploiters within objectoriented dynamic networks is also discussed. The main result of the paper is introduction of new exploiters-based knowledge extraction approach, which provides generation of a finite set of new classes of objects, based on the basic set of classes. The methods for calculation of quantity of new classes, which can be obtained using proposed approach, and of quantity of types, which each of them describes, are proposed. Proof that basic set of classes, extended according to proposed approach, together with union exploiter create upper semilattice is given. The approach always allows generating of finitely defined set of new classes of objects for any object-oriented dynamic network. A quantity of these classes can be precisely calculated before the generation. It allows saving of only basic set of classes in the knowledge base.", "creator": "LaTeX with hyperref package"}}}