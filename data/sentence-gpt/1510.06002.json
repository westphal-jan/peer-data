{"id": "1510.06002", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Oct-2015", "title": "Fast and Scalable Structural SVM with Slack Rescaling", "abstract": "We present an efficient method for training slack-rescaled structural SVM. Although finding the most violating label in a margin-rescaled formulation is often easy since the target function decomposes with respect to the structure, this is not the case for a slack-rescaled formulation, and finding the most violated label might be very difficult. Our core contribution is an efficient method for finding the most-violating-label in a slack-rescaled formulation, given an oracle that returns the most-violating-label in a (slightly modified) margin-rescaled formulation. We show that our method enables accurate and scalable training for slack-rescaled SVMs, reducing runtime by an order of magnitude compared to previous approaches to slack-rescaled SVMs. Our optimization, in fact, can be used to maximize training for slack-rescaled SVMs.\n\n\n\n\n\n\nWe have shown that our method offers more than a minimal amount of training time. This is because the difference between the maximum training time and the maximum training time between the maximum training time and the maximum training time in the given direction is greater than in the other direction. In addition, we have shown that the number of slack-rescaled SVMs used on a particular network is greater than in the other direction (see Fig. 2 A). We are proposing that the number of slack-rescaled SVMs used on a particular network (i.e., in the network) is decreased by 3.5% in the given direction (Fig. 3 C). The effect of this reduction on training time on the number of slack-rescaled SVMs is much greater than in the current direction. This may reflect that we used an approach to evaluate our method using the time-delayed parameter, namely:\nWe used a small regression model to test for a number of variables we included, but we did not detect that we didn't know if we actually used this parameter. In the prior, we did not find any significant change in training time (Fig. 3 D) (Supplementary Table S5). We also found that the value of the minimum training time for a network with a maximum capacity for 2.5 Gb was decreased by 2.5% compared with the maximum training time for a network with a minimum capacity for a network with a maximum capacity for a network with a maximum capacity for a network with a maximum capacity for a network with a maximum capacity for a network with a maximum", "histories": [["v1", "Tue, 20 Oct 2015 18:25:45 GMT  (248kb,D)", "https://arxiv.org/abs/1510.06002v1", null], ["v2", "Tue, 27 Oct 2015 22:25:33 GMT  (252kb,D)", "http://arxiv.org/abs/1510.06002v2", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["heejin choi", "ofer meshi", "nathan srebro"], "accepted": false, "id": "1510.06002"}, "pdf": {"name": "1510.06002.pdf", "metadata": {"source": "CRF", "title": "Fast and Scalable Structural SVM with Slack Rescaling", "authors": ["Heejin Choi", "Ofer Meshi", "Nathan Srebro"], "emails": [], "sections": [{"heading": null, "text": "We present an efficient method for training slackrescaled structural SVM. Although finding the most violating label in a margin-rescaled formulation is often easy since the target function decomposes with respect to the structure, this is not the case for a slack-rescaled formulation, and finding the most violated label might be very difficult. Our core contribution is an efficient method for finding the most-violatinglabel in a slack-rescaled formulation, given an oracle that returns the most-violating-label in a (slightly modified) margin-rescaled formulation. We show that our method enables accurate and scalable training for slack-rescaled SVMs, reducing runtime by an order of magnitude compared to previous approaches to slack-rescaled SVMs."}, {"heading": "1 Introduction", "text": "Many problems in machine learning can be seen as structured output prediction tasks, where one would like to predict a set of labels with rich internal structure [1]. This general framework has proved useful for a wide range of applications from computer vision, natural language processing, computational biology, and others. In order to achieve high prediction accuracy, the parameters of structured predictors are learned from training data. One of the most effective and commonly used approaches for this supervised learning task is Structural SVM, a method that generalizes binary SVM to structured outputs [15]. Since the structured error is non-convex, Tsochantaridis et al. [15] propose to replace it with a convex surrogate loss function. They formulate two such surrogates, known as margin and slack rescaling.\nWhile slack rescaling often produces more accurate pre-\ndictors, margin rescaling has been far more popular due to its better computational requirements. In particular, both formulations require optimizing over the output space, but while margin rescaling preserves the structure of the score and error functions, the slack-rescaling does not. This results in harder inference problems during training. To address this challenge, Sarawagi and Gupta [11] propose a method to reduce the problem of slack rescaling to a series of modified margin rescaling problems. They show that their method outperforms margin rescaling in several domains. However, there are two main caveats in their approach. First, the optimization is only heuristic, that is, it is not guaranteed to solve the slack rescaling objective exactly. Second, their method is specific to the cutting plane algorithm and does not easily extend to stochastic training algorithms. More recently, Bauer et al. [2] proposed an elegant dynamic programming approach to the slack rescaling optimization problem. However, their formulation is restricted to sequence labeling and hamming error, and does not apply to more general structures.\nIn this paper we propose an efficient method for solving the optimization problem arising from slack rescaling formulation. Similar to Sarawagi and Gupta [11] our method reduces finding the most violated label in slack rescaling to a series of margin rescaling problems. However, in contrast to their approach, our approach can be easily used with training algorithms like stochastic gradient descent (SGD) [10] and block Frank-Wolfe (FW) [7], which often scale much better than cutting plane. We first propose a very simple approach that minimizes an upper bound on the slack rescaling objective function, and only requires access to a margin rescaling oracle. This formulation is quite general and can be used with any error function and model structure, and many training algorithms such as cutting plane, SGD and FW. However, this method is not guaranteed to always find the most violating label. Indeed, we show that always finding the most violating label for a slack-rescaled formulation is impossible using only a margin rescaling oracle. To address this, we suggest using a modified oracle, that is typically as easy to implement as margin rescaling, and present a more sophisticated algorithm which solves the slack rescaling formulation exactly, and also enjoys good approximation guarantees after a small number of itar X iv :1 51 0.\n06 00\n2v 2\n[ cs\n.L G\n] 2\n7 O\nct 2\n01 5\nerations. We demonstrate empirically that our algorithm outperforms existing baselines on several real-world applications, including hierarchical and multi-label classification."}, {"heading": "2 Problem Formulation", "text": "In this section we review the basics of structured output prediction and describe the relevant training objectives. In structured output prediction the task is to map data instances x to a set of output labels y \u2208 Y . Structured SVMs use a linear discriminant mapping of the form y(x;w) = argmaxy\u2208Y w\n>\u03c6(x, y), where \u03c6(x, y) \u2208 Rd is a feature function relating input-output pairs, and w \u2208 Rd is a corresponding vector of weights. Our interest is in the supervised learning setting, where w is learned from training data {xi, yi}ni=1 by minimizing the empirical risk. The prediction quality is measured by an error function L(y, yi) \u2265 0 which determines how bad it is to predict y when the ground-truth is in fact yi.\nSince optimizing L(y, yi) directly is hard due to its complicated dependence on w, several alternative formulations minimize a convex upper bound instead. Structural SVM is an elegant max-margin approach which uses a structured hinge loss surrogate [15, 14]. Two popular surrogates are margin and slack rescaling. In particular, denoting the model score by f(y) = w>\u03c6(x, y) (we omit the dependence on x and w to simplify notation), the margin rescaling training objective is given by:\nmin w,\u03be\nC 2 \u2016w\u201622 + 1 n \u2211 i \u03bei (1)\ns.t. f(yi)\u2212 f(y) \u2265 L(y, yi)\u2212 \u03bei \u2200i, y 6= yi \u03bei \u2265 0 \u2200i\nwhere C is the regularization constant. Similarly, the slack rescaling formulation scales the slack variables by the error term:\nmin w,\u03be\nC 2 \u2016w\u201622 + 1 n \u2211 i \u03bei (2)\ns.t. f(yi)\u2212 f(y) \u2265 1\u2212 \u03bei\nL(y, yi) \u2200i, y 6= yi\n\u03bei \u2265 0 \u2200i\nIntuitively, both formulations seek to find a w which assigns high scores to the ground-truth compared to the other possible labellings. When y is very different than the true yi (L is large) then the difference in scores should also be larger. There is, however, an important difference between the two forms. In margin rescaling, high loss can occur for labellings with high error even though they are already classified correctly with a margin. This may divert training\nfrom the interesting labellings where the classifier errs, especially when L can take large values, as in the common case of hamming error. In contrast, in slack rescaling labellings that are classified with a margin incur no loss. Another difference between the two formulations is that the slack rescaling loss is invariant to scaling of the error term, while in margin rescaling such scaling changes the meaning of the features \u03c6.\nIn many cases it is easier to optimize an unconstrained problem. In our case it is easy to write (1) and (2) in an unconstrained form:\nmin w\nC 2 \u2016w\u201622 + 1n \u2211 i max y\u2208Y (L(y, yi) + f(y)\u2212 f(yi)) (3)\nmin w\nC 2 \u2016w\u201622 + 1n \u2211 i max y\u2208Y L(y, yi) (1 + f(y)\u2212 f(yi)) (4)\nMost of the existing training algorithms for structural SVM require solving the maximization-over-labellings problems in (4) and (3):\nMargin rescaling : argmaxy\u2208Y L(y, yi) + f(y)\u2212 f(yi) (5)\nSlack rescaling : argmaxy\u2208Y L(y, yi) (1 + f(y)\u2212 f(yi)) (6)\nTo better understand the difference between margin and slack rescaling we focus on a single training instance i and define the functions: h(y) = 1 + f(y) \u2212 f(yi) and g(y) = L(yi, y). With these definitions we see that the maximization (5) for margin rescaling is maxy\u2208Y h(y) + g(y), while the maximization (6) for slack rescaling is maxy\u2208Y h(y)g(y). It is now obvious why margin rescaling is often easier. When the score and error functions h and g decompose into a sum of simpler functions, we can exploit that structure in order to solve the maximization efficiently [15, 14, 5]. In contrast, the slack rescaling score does not decompose even when both h and g do. What we show, then, is how to solve problems of the form maxy h(y)g(y), and thus the maximization (6), having access only to an oracle for additive problems of the form maxy h(y) +\u03bbg(y).\nThat is, we assume that we have access to a procedure, referred to as the \u03bb-oracle, which can efficiently solve the problem:\ny\u03bb = O(\u03bb) = argmax y\u2208Y L\u03bb(y) (7)\nwhereL\u03bb(y) = h(y)+\u03bbg(y). This problem is just a rescaling of (5). E.g., for linear responses it is obtained by scaling the weight vector by 1/\u03bb. If we can handle margin rescaling efficiently we can most likely implement the \u03bboracle efficiently. This is also the oracle used by Sarawagi and Gupta [11]. In Section 4, we show how to obtain a solution to the slack-rescaling problem (6) using such a \u03bboracle. Our method can be used as a subroutine in a variety of training algorithms, and we demonstrate that it is more\nscalable than previous methods. However, we also show that this approach is limited, since no procedure that only has access to a \u03bb-oracle can guarantee the quality of its solution, no matter how much time it is allowed to run.\nTherefore, we propose an alternative procedure that can access a more powerful oracle, which we call the constrained \u03bb-oracle:\ny\u03bb,\u03b1,\u03b2 = Oc(\u03bb, \u03b1, \u03b2) = max y\u2208Y, \u03b1h(y)>g(y), \u03b2h(y)\u2264g(y) L\u03bb(y),\n(8)\nwhere \u03b1, \u03b2 \u2208 R. This oracle is similar to the \u03bb-oracle, but can additionally handle linear constraints on the values h(y) and g(y). In the sequel we show that in many interesting cases this oracle is not more computationally expensive than the basic one. For example, when the \u03bb-oracle is implemented as a linear program (LP), the additional constraints are simply added to the LP formulation and do not complicate the problem significantly. Before presenting our algorithms for optimizing (6), we first review the training framework in the next section."}, {"heading": "3 Optimization for Slack Rescaling", "text": "In this section we briefly survey cutting plane and stochastic gradient descent optimization for the slack rescaled objective (2) and (4). This will be helpful in understanding the difference between our approach and that of prior work on the slack rescaled objective by Sarawagi and Gupta [11].\nThe cutting plane algorithm was proposed for solving the structural SVM formulation in [15, 6]. This algorithm has also been used in previous work on slack rescaling optimization [11, 2]. The difficulty in optimizing (2) stems from the number of constraints, which is equal to the size of the output space Y (for each training instance). The cutting plane method maintains a small set of constraints and solves the optimization only over that set. At each iteration the active set of constraints is augmented with new violated constraints, and it can be shown that not too many such constraints need to be added for a good solution to be found [6]. The main computational bottleneck here is to find a violating constraint at each iteration, which is challenging since it requires searching over the output space for some violating labeling y.\nRelying on this framework, Sarawagi and Gupta [11] use the formulation in (2) and rewrite the constraints as:\n1 + f(y)\u2212 f(yi)\u2212 \u03bei\nL(y, yi) \u2264 0 \u2200i, y 6= yi (9)\nHence, to find a violated constraint they attempt to maximize: solve the problem with substitution of:\nargmax y\u2208Y\u2032\n( h(y)\u2212 \u03bei\ng(y)\n) (10)\nwhere Y \u2032 = {y|y \u2208 Y, h(y) > 0, y 6= yi} and we use our notation h(y) = 1 + f(y) \u2212 f(yi) and g(y) = L(y, yi). They suggest minimizing a convex upper bound of (10) which stems from the convex conjugate function of \u03bei g(y) :\nmax y\u2208Y\u2032 h(y)\u2212 \u03bei g(y) = max y\u2208Y\u2032 min \u03bb\u22650\n( h(y) + \u03bbg(y)\u2212 2 \u221a \u03bei\u03bb )\n\u2264min \u03bb\u22650 max y\u2208Y\u2032 F \u2032(\u03bb, y) = min \u03bb\u22650 max y\u2208Y\u2032 F \u2032(\u03bb, y) = min \u03bb\u22650 F (\u03bb)\n(11)\nwhere F (\u03bb) = max y\u2208Y\u2032\nF \u2032(\u03bb, y) = maxy\u2208Y\u2032 h(y) + \u03bbg(y)\u2212\n2 \u221a \u03bei\u03bb. Since F (\u03bb) is a convex function, (11) can be solved by a simple search method such as golden search over \u03bb [11].\nAlthough this approach is suitable for the cutting plane algorithm, unfortunately it cannot be easily extended to other training algorithms. In particular, F \u2032(\u03bb, y) is defined in terms of \u03bei, which ties it to the constrained form (2). On the other hand, algorithms such as stochastic gradient descent (SGD) [10, 12], stochastic dual coordinate ascent (SDCA) [13], or block-coordinate Frank-Wolfe (FW) [7], all optimize the unconstrained objective form (4). These methods are typically preferable in the large scale setting, since they have very low per-iteration cost, handling a single example at a time, with the same overall iteration complexity as cutting plane methods. In contrast, the cutting plane algorithm considers the entire training set at each iteration, so the method does not scale well to large problems. Since our goal in this work is to handle large datasets, we would like to be able to use the stochastic methods mentioned above, working on the unconstrained formulation (4). The update in these algorithms requires solving the maximization problem (6), which is the goal of Section 4. Note that solving (6) also allows using a cutting plane method if desired."}, {"heading": "4 Algorithms", "text": "In this section we present our main contribution, a framework for solving the maximization problem (6), which we write as:\nmax y \u03a6(y) := max y h(y)g(y) (12)\nWe describe two new algorithms to solve this problem using access to the \u03bb-oracle, which have several advantages over previous approaches. However, we also show that any algorithm which uses only the \u03bb-oracle cannot always recover an optimal solution. Therefore, in Section 4.5 we proposed an improved algorithm which requires access to an augmented \u03bb-oracle that can also handle linear constraints."}, {"heading": "4.1 Binary search", "text": "We first present a binary search algorithm similar to the one proposed by Sarawagi and Gupta [11], but with one main difference. Our algorithm can be easily used with training methods that optimize the unconstrained objective (4), and can therefore be used for SGD, SDCA and FW. The algorithm minimizes a convex upper bound on \u03a6 without slack variable \u03bei. The algorithm is based on the following lemma (details and proofs are in Appendix A).\nLemma 1. Let F\u0304 (\u03bb) = 14 maxy\u2208Y+ ( 1 \u03bbh(y) + \u03bbg(y) )2 , then\nmax y\u2208Y \u03a6(y) \u2264 min \u03bb>0 F\u0304 (\u03bb)\nand F\u0304 (\u03bb) is a convex function in \u03bb.\nRather than minimizing this upper bound, we next present an algorithm that aims to optimize \u03a6(y) in a more direct manner, using a geometrical interpretation of mapping labels into R2."}, {"heading": "4.2 Geometrical Interpretation of \u03bb-oracle search", "text": "To understand the problem better and motivate our methods, it is useful to consider the following geometrical interpretation of (12): we map each labels y to a vector ~y = [h(y) g(y)] \u2208 R2. Let ~Y = {~y \u2208 R2|y \u2208 Y} be the set of the all mapped labels. The maximization (12) reduces to the problem: given a set of points ~Y \u2282 R2, maximize the product of their coordinates ~y\u2217 = argmax~y\u2208~Y [~y]1 \u00b7 [~y]2.\nThe contours of our objective function ~\u03a6(~y) = [~y]1 \u00b7 [~y]2 are then hyperbolas. We would like to maximize this function by repeatedly finding points that maximize linear objectives of the form ~L\u03bb(~y) = [~y]1 + \u03bb[~y]2, whose contours form lines in the plane. See Figure 1.\nAn example of mapping of label into R2 is shown in Appendix B.\nThe importance of the R2 mapping is that each y\u03bb revealed\nby the \u03bb-oracle shows that y\u2217 can only reside in a small slice of the plane. See figure 2.\nLemma 2. Let S\u03bb be a line through ~y\u03bb and ~z = [\u03bb[~y\u03bb]2, 1 \u03bb [~y\u03bb]1], and let C\u03bb = {~y \u2208 R\n2|[~y]1 \u00b7 [~y]2 = ~\u03a6(~y\u03bb)} be the hyperbola through ~y\u03bb. Then, ~y\u2217 is on or below line S\u03bb, and ~y\u2217 is on or above hyperbola C\u03bb.\nProof. If there exists a ~y \u2208 ~Y which is above S\u03bb, it contradicts the fact that ~y\u03bb is the argmax point for function ~L\u03bb. And the second argument follows from ~y\u2217 being the argmax label w.r.t. ~\u03a6, and the area above C\u03bb corresponds to points whose ~\u03a6 value is greater than ~y\u03bb.\nIt follows that h(y\u2217) and g(y\u2217) must each reside in a segment:\nLemma 3. Let H\u0307 = [min([ ~y\u03bb]1, [~z]1),max([ ~y\u03bb]1, [~z]1)] and G\u0307 = [min([ ~y\u03bb]2, [~z]2),max([ ~y\u03bb]2, [~z]2)]. Then,\nh(y\u2217) \u2208 H\u0307, g(y\u2217) \u2208 G\u0307\nProof. This follows from the fact that S\u03bb and C\u03bb intersects at two points, ~y\u03bb and ~z, and the boundaries, S\u03bb and C\u03bb, are strictly decreasing functions."}, {"heading": "4.3 Bisecting search", "text": "In this section, we propose a search algorithm which is based on the previous geometric interpretation. Similar to the binary search, our method also relies on the basic \u03bboracle.\nWe next give an overview of the algorithm. We maintain a set of possible value ranges \u03bb\u2217 = argmax\u03bb>0 \u03a6(y\u03bb),\nh(\u03bb\u2217), and g(\u03bb\u2217) as L,H, and G, respectively; all initialized as R. First, for each y\u03bb returned by the oracle, we take an intersection of G and H with a segment of possible values of h(y) and g(y), respectively, using Lemmas 2 and 3. Second, we reduce the space L of potential \u03bb\u2019s based on the following Lemma (proved in the Appendix). Lemma 4. h(y\u03bb) is a non-increasing function of \u03bb, and g(y\u03bb) is a non-decreasing function of \u03bb.\nThus, we can discard {\u03bb\u2032|\u03bb\u2032 > \u03bb} if h(y\u2217\u03bb) > h(y\u03bb) or {\u03bb\u2032|\u03bb\u2032 < \u03bb} otherwise from L. Next, we pick \u03bb \u2208 L in the middle, and query y\u03bb. The algorithm continues until at least one of L,H, and G is empty.\nSimilar to the binary search from the previous section, this algorithm can be used with training methods like SGD and SDCA, as well as the cutting-plane algorithm. However, this approach has several advantages compared to the binary search. First, the binary search needs explicit upper and lower bounds on \u03bb, thus it has to search the entire \u03bb space [11]. However, the bisecting search can directly start from any \u03bb without an initial range, and for instance, this can be used to warm-start from the optimal \u03bb in the previous iteration. Furthermore, we point out that since the search space of h and g is also bisected, the procedure can terminate early if either of them becomes empty.\nFinally, in Appendix D we propose two improvements that can be applied to either the binary search or the bisecting search. Specifically, we first provide a simple stopping criterion that can be used to terminate the search when the current solution y\u03bbt will not further improve. Second, we show how to obtain a bound on the suboptimality of the current solution, which can give some guarantee on its quality.\nSo far we have used the \u03bb-oracle as a basic subroutine in our search algorithms. Unfortunately, as we show next, this approach is limited as we cannot guarantee finding the optimal solution y\u2217, even with unlimited number of calls to the \u03bb-oracle. This is somewhat distressing since with unlimited computation we can find the optimum of (6) by enumerating all y\u2019s."}, {"heading": "4.4 Limitation of the \u03bb-oracle", "text": "Until now, we used only the \u03bb-oracle to search for \u03a6\u2217 without directly accessing the functions h and g. We now show that this approach, searching \u03a6\u2217 with only a \u03bb-oracle, is very limited: even with an unlimited number of queries, the search cannot be exact and might return a trivial solution in the worst case (see Appendix E for proof). Theorem 1. Let H\u0302 = maxy h(y) and G\u0302 = maxy g(y). For any > 0, there exists a problem with 3 labels such that for any \u03bb \u2265 0, \u03a6(y\u03bb) = miny\u2208Y \u03a6(y) < , while \u03a6(y\u2217) = 1\n4 H\u0302G\u0302.\nTheorem 1 shows that any search algorithm that can access\nAlgorithm 1 Bisecting search 1: procedure BISECTING(\u03bb0) Input: Initial \u03bb for the search \u03bb0 \u2208 R+ Output: y\u0302 \u2208 Y. Initialize: H = G = L = R+, \u03bb = \u03bb0, \u03a6\u0302 = 0.\n2: while H 6= \u2205 and G 6= \u2205 do 3: y\u2032 \u2190 O(\u03bb) 4: u\u2190 [h(y\u2032) \u03bbg(y\u2032)], v \u2190 [g(y\u2032) 1\u03bbh(y\n\u2032)] 5: H \u2190 H \u2229 {h\u2032|minu \u2264 h\u2032 \u2264 maxu} .\nUpdate 6: G\u2190 G \u2229 {g\u2032|min v \u2264 g\u2032 \u2264 max v} 7: if v1 \u2264 v2 then . Increase \u03bb 8: L\u2190 L \u2229 {\u03bb\u2032 \u2208 R|\u03bb\u2032 \u2265 \u03bb} 9: else . Decrease \u03bb\n10: L\u2190 L \u2229 {\u03bb\u2032 \u2208 R|\u03bb\u2032 \u2264 \u03bb} 11: \u03bb\u2190 12 (minL+ maxL) 12: if h(y\u2032)g(y\u2032) \u2265 \u03a6\u0302 then 13: y\u0302 \u2190 y\u2032, \u03a6\u0302\u2190 h(y\u2032)g(y\u2032).\nthe function only through \u03bb-oracle, including the method of Sarawagi and Gupta [11] and both methods presented above, cannot be guaranteed to find a label optimizing \u03a6(y), even approximately, and even with unlimited accesses to the oracle. This problem calls for a more powerful oracle."}, {"heading": "4.5 Angular search with the constrained-\u03bb-oracle", "text": "The constrained \u03bb-oracle defined in (8) has two inequality constraints to restrict the search space. Using this modified algorithm, we can present an algorithm that is guranteed to find the most violating constraint, as captured by the following guarantee, proved in Appendix F:\nTheorem 2. Angular search described in Algorithm 2 finds the optimum y\u2217 = argmaxy\u2208Y \u03a6(y) using at most t = 2M + 1 iteration where M is the number of the labels.\nThis is already an improvement over the previous methods, as at least we are guaranteed to return the actual most violating label. However, it is still disappointing since the number of iterations, and thus number of oracle accesses might actually be larger than the number of labels. This defies the whole point, since we might as well just enumerate over all M possible labels. Unfortunately, even with a constrained oracle, this is almost the best we can hope for. In fact, even if we allow additional linear constraints, we might still need M oracle accesses, as indicated by the following Theorem, proved in Appendix E.\nTheorem 3. Any search algorithm accessing labels only through a \u03bb-oracle with any number of linear constraints cannot find y\u2217 using less than M iterations in the worst case, where M is the number of labellings.\nFortunately, even though we cannot guarantee optimizing\n\u03a6(y) exactly using a small number of oracle accesses, we can at least do so approximately. This can be achieved by Algorithm 2 (see Appendix F), as the next theorem states.\nTheorem 4. In angular search, described in Algorithm 2, at iteration t,\n\u03a6(y\u2217) \u03a6(y\u0302t) \u2264 (v1) 4 t+1\nwhere y\u0302t = argmaxt y t is the optimum up to t, v1 =\nmax { \u03bb0 \u2202(y1) , \u2202(y1) \u03bb0 } , \u03bb0 is the initial \u03bb used, and y1 is the first label returned by constrained \u03bb-oracle.\nWe use \u2202(a) = a2a1 to denote the slope of a vector.\nWith proper initialization, we get the following runtime guarantee:\nTheorem 5. Assuming \u03a6(y\u2217) > \u03c6, angular search de-\nscribed in algorithm 2 with \u03bb0 = G\u0302\nH\u0302 , \u03b10 =\nG\u03022\n\u03c6 , \u03b20 =\n\u03c6\nH\u03022 ,\nfinds an -optimal solution, \u03a6(y) \u2265 (1 \u2212 )\u03a6(y\u2217), in T\nqueries and O(T ) operations, where T = 4 log\n( G\u0302H\u0302\n\u03c6\n) \u00b7\n1\n, and \u03b4-optimal solution, \u03a6(y) \u2265 \u03a6(y\u2217)\u2212\u03b4, in T \u2032 queries\nand O(T \u2032) operations, where T \u2032 = 4 log\n( G\u0302H\u0302\n\u03c6\n) \u00b7 \u03a6(y \u2217)\n\u03b4 .\nHere we give an overview of the algorithm with an illustration in Figure 3. The constrained \u03bb-oracle restricts the search space, and this restriction can be illustrated as a linear upper bound U and a lower bound L. The search is initialized with the entire right angle: U = [0 \u221e] and L = [\u221e 0], and maintains that ~y\u2217 is always between U and L. The constrained \u03bb-oracle is used with U,L and a certain \u03bb to reduce the potential area where ~y\u2217 can reside.\nSpecifically, the search space is reduced using an angle defined by U = OP and L = OQ. In the next iteration, the constrained \u03bb-oracle is invoked with U1 = OP and L1 = OM , and also with U2 = OM and L2 = OQ. Intuitively, each such query shrinks the search space, and as the search space shrinks, the suboptimaly bound improves. This process is continued until the remaining search space is empty. The angular search algorithm defines the optimal \u03bb and values to be passed to the constrained \u03bb-oracle.\nIn Algorithm 2 each angle is dequeued, split, and enqueued recursively. Each angle maintains its upper bound from the previous iterations and stops splitting itself and terminate if it is ensured that there exists no label with larger \u03a6 value within the angle. When the oracle reveals a label with \u03a6(y\u03bb) = c, we can safely discard all area corresponding to {~y|\u03a6(~y) \u2264 c}. This works as a global constraint which shrinks the search space. Therefore, acquiring a label with high \u03a6 value in the early stages facilitate convergence. Thus, it is suggested to use a priority queue, and dequeue the angle with the highest upper bound on \u03a6. A similar strategy is to have a label cache, the subset of previous most violated labels, denoted as C. With the label cache, we can discard a large part of the search space {~y|\u03a6(~y) \u2264 maxy\u2032\u2208C \u03a6(~y\u2032)} immediately. Algorithm 2 also uses the constrained \u03bb-oracle to avoid returning previously found labels. Finally, for \u03bb0, we suggest to use \u03bb0 =\nH\u0302 G\u0302 , with H\u0302 calculated from the current weights w.\nSee Appendix G for the illustration of the angular search."}, {"heading": "5 Experiments", "text": "In this section, we validate our contributions by comparing the different behaviors of the search algorithms on standard benchmark datasets, and its effect on the optimization. Specifically, we show that angular search with SGD is not only much faster than the other alternatives, but also enables much more precise optimization with slack rescaling formulation, outperforming margin rescaling.\nUnlike the simple structure used in [2], we show applicability to complicated structure. We experiment with multilabel dataset modeled by a Markov Random Field with pair-wise potentials as in [5]. Since the inference of margin scaling is NP-hard in this case, we rely on linear programming relaxation. Note that this complicates the problem, and the number of labels becomes even larger (adds fractional solutions). Also notice that all of our results in previous sections apply with mild modification to this harder setting. Two standard benchmark multi-label datasets, yeast[4] (14 labels)and RCV1[8], are tested. For RCV1 we reduce the data to the 50 most frequent labels. For angular search, we stop the search whenever \u03a6(y\u0302)\u03a6(y\u2217) > 0.999 holds, to avoid numerical issues."}, {"heading": "5.1 Comparison of the search algorithms", "text": "Table 1 compares the performance of the search in terms of the time spend, the number of queries, and the success percentage of finding the most violating label. The cutting-plane algorithm calls the search algorithms to find the most violating label y\u0302, and adds it the active set if the violation is larger than some margin , i.e., \u2206(y\u0302, yi)(1 + f(y\u0302) \u2212 f(yi)) > \u03bei + . For cutting-plain optimization, we compare all three algorithms: Angular search, Bisecting search, and Sarawagi and Gupta\u2019s [11] (but just used Angular search for the update). Success percentage is the percentage that the search algorithm finds such a violating label. As expected from Theorem 1, bisecting and Sarawagi\u2019s search miss the violating label in cases where angular search successfully finds one. This is important for obtaining high accuracy solution. For RCV1 dataset, not only is angular search more accurate, but it also uses about 2.6 times less queries than bisecting and 10.1 times less queries than Sarawagi\u2019s search. As for the timing, angular search is 1.18 times faster than bisecting search, and 4.7 times faster than Sarawagi\u2019s algorithm.\nIn figure 4, we compare the convergence rate and the accuracy of the different optimization schemes using different search algorithms. Additional plots showing convergence w.r.t. the number of queries and iterations are in Appendix I. These show that angular search with SGD converges order of magnitude faster.\nTable 2 shows a performance comparison for the multilabel datasets. For RCV1 dataset it shows a slight performance gain, which shows that the benefit of slack rescaling formulation is greater when the label space is large."}, {"heading": "5.2 Hierarchical Multi-label Classification", "text": "We further experimented on problem of hierarchical multilabel classification [3]. In hierarchical multi-label classification, each label y is a leaf node in a given graph, and each label y shares ancestor nodes. It can be described as a graphical model where a potential of a multi-label Y = {y1, . . . , yk} is the sum of all potentials of its ancestors, i.e., \u03a6(Y ) = \u2211 n\u2208 \u22c3 n\u2208Y Anc(n) \u03a6(n). We extracted\n1500 instances with dimensionality 17944 with a graph structure of 156 nodes with 123 label from SWIKI-2011. SWIKI-2011 is a multi-label dataset of wikipedia pages from LSHTC competition1. We used 750 instances as training set, 250 instances as holdout set, and 750 instances as test set. The Hamming distance is used as label loss. We show that slack rescaling in such large label structure is tractable and outperforms margin rescaling."}, {"heading": "6 Summary", "text": "As we saw in our experiments, and has also been previously noted, slack rescaling is often beneficial compared to margin rescaling in terms of predictive performance. However, the margin-rescaled argmax (5) is often much easier computationally due to its additive form. Margin rescaling is thus much more frequently used in practice. Here, we show how an oracle for solving an argmax of the form (5), or perhaps a slightly modified form (the constrained-\u03bb oracle), is sufficient for also obtaining exact solutions to the slackrescale argmax (6). This allows us to train slack-rescaled SVMs using SGD, obtaining better predictive performance than using margin rescaling. Prior work in this direction [11] was only approximate, and more significantly, only enabled using cutting-plane methods, not SGD, and was thus not appropriate for large scale problems. More recently, [2] proposed an efficient dynamic programming approach for solving the slack-rescaled argmax (6), but their approach is only valid for sequence problems2 and only when using hamming errors, not for more general structured prediction problems. Here, we provide a generic method relying on a simple explicitly specified oracle that is guaranteed to be exact and efficient even when the number of labels are in-\n1http://lshtc.iit.demokritos.gr/ 2The approach can also be generalized to tree-structured prob-\nlems.\nfinite and allows using SGD and thus working with large scale problems."}, {"heading": "Appendix A Details of binary search", "text": "Lemma 1. Let F\u0304 (\u03bb) = 14 maxy\u2208Y+ ( 1 \u03bbh(y) + \u03bbg(y) )2 , then\nmax y\u2208Y \u03a6(y) \u2264 min \u03bb>0 F\u0304 (\u03bb)\nand F\u0304 (\u03bb) is a convex function in \u03bb.\nProof. First, let Y+ = {y|y \u2208 Y, h(y) > 0}, then maxy\u2208Y \u03a6(y) = maxy\u2208Y+ \u03a6(y), since any solution y such that h(y) < 0 is dominated by yi, which has zero loss. Second, we prove the bound w.r.t. y \u2208 Y+. In the following proof we use a quadratic bound (for a similar bound see [9]).\nmax y\u2208Y+ \u03a6(y) = max y\u2208Y+ h(y)g(y) = max y\u2208Y+\n1\n4\n( 2 \u221a h(y)g(y) )2 = 1\n4 ( max y\u2208Y+ min \u03bb>0 { 1 \u03bb h(y) + \u03bbg(y) })2 \u2264 1\n4 ( min \u03bb>0 max y\u2208Y+ { 1 \u03bb h(y) + \u03bbg(y) })2 (13)\nTo see the convexity of F\u0304 (\u03bb), we differentiate twice to obtain:\n\u22022F\u0304 (\u03bb)\n\u2202\u03bb2 =\n1 4 max y\u2208Y+ 6 1 \u03bb4 h(y)2 + 2g(y)2 > 0\nSimilar to [11], we obtain a convex upper bound on our objective. Evaluation of the upper bound F\u0304 (\u03bb) requires using only the \u03bb-oracle. Importantly, this alternative bound F\u0304 (\u03bb) does not depend on the slack variable \u03bei, so it can be used with algorithms that optimize the unconstrained formulation (4), such as SGD, SDCA and FW. As in [11], we minimize F\u0304 (\u03bb) using binary search over \u03bb. The algorithm keeps track of y\u03bbt , the label returned by the \u03bb-oracle for intermediate values \u03bbt encountered during the binary search, and returns the maximum label maxt \u03a6(y\u03bbt). This algorithm focuses on the upper bound min\u03bb>0 F\u0304 (\u03bb), and interacts with the target function \u03a6 only through evaluations \u03a6(y\u03bbt) (similar to [11])."}, {"heading": "Appendix B An example of label mapping", "text": ""}, {"heading": "Appendix C Monotonicity of h and g in \u03bb", "text": "Proof. Let g1 = g(y\u03bb1), h1 = h(y\u03bb1), g2 = g(y\u03bb2), and h2 = h(y\u03bb2).\nh1 + \u03bb1g1 \u2265 h2 + \u03bb1g2, h2 + \u03bb2g2 \u2265 h1 + \u03bb2g1 \u21d4 h1 \u2212 h2 + \u03bb1(g1 \u2212 g2) \u2265 0,\u2212h1 + h2 + \u03bb2(g2 \u2212 g1) \u2265 0 \u21d4 (g2 \u2212 g1)(\u03bb2 \u2212 \u03bb1) \u2265 0\nFor h, change the role of g and h."}, {"heading": "Appendix D Improvements for the binary", "text": "search"}, {"heading": "Appendix D.1 Early stopping", "text": "If L = [\u03bbm, \u03bbM ], and both endpoints have the same label, i.e., y\u03bbm = y\u03bbM , then we can terminate the binary search safely because from lemma 4, it follows that the solution y\u03bb will not change in this segment."}, {"heading": "Appendix D.2 Suboptimality bound", "text": "Let K(\u03bb) be the value of the \u03bb-oracle. i.e.,\nK(\u03bb) = max y\u2208Y h(y) + \u03bbg(y). (14)\nLemma 5. \u03a6\u2217 is upper bounded by\n\u03a6(y\u2217) \u2264 K(\u03bb) 2\n4\u03bb (15)\nProof.\nh(y) + \u03bbg(y) \u2264 K(\u03bb) \u21d0\u21d2 g(y)(h(y) + \u03bbg(y)) \u2264 g(y)K(\u03bb) \u21d0\u21d2 \u03a6(y) \u2264 g(y)K(\u03bb)\u2212 \u03bbg(y)2\n= \u2212\u03bb ( g(y)\u2212 K(\u03bb)\n2\u03bb\n)2 + K(\u03bb)2\n4\u03bb \u2264 K(\u03bb)\n2\n4\u03bb"}, {"heading": "Appendix E Proof of the limitation of the", "text": "\u03bb-oracle search\nTheorem 1. Let H\u0302 = maxy h(y) and G\u0302 = maxy g(y). For any > 0, there exists a problem with 3 labels such that for any \u03bb \u2265 0, y\u03bb = argminy\u2208Y \u03a6(y) < , while \u03a6(y\u2217) = 1\n4 H\u0302G\u0302.Let H\u0302 = maxy h(y) and G\u0302 = maxy g(y).\nFor any > 0 and \u03bb > 0, there exists a problem of 3 labels that y\u03bb = argminy\u2208Y \u03a6(y) < , and \u03a6(y\n\u2217) \u2212 \u03a6(y\u03bb) = 1 4 H\u0302G\u0302.\nProof. We will first prove following lemma which will be used in the proof.\nLemma 6. Let A = [A1 A2] \u2208 R2, B = [B1 B2] \u2208 R2, and C = [C1 C2] \u2208 R2, and A1 < B1 < C1. If B is under the line AC, i.e.,\u2203t,0 \u2264 t \u2264 1,D = tA + (1 \u2212 t)C, D1 = B1, D2 > B2. Then, @\u03bb \u2265 0, v = [1 \u03bb] \u2208 R2, such that\nv \u00b7B > v \u00b7A and v \u00b7B > v \u00b7 C (16)\nProof. Translate vectors A,B, and C into coordinates of [0, A2], [a, b], [C1, 0] by adding a vector [\u2212A1,\u2212C2] to each vectors A,B, and C, since it does not change B \u2212 A or B \u2212 C. Let X = C1 and Y = A2.\nIf 0 \u2264 \u03bb \u2264 X Y\n, then v\u00b7A = \u03bbY \u2264 X = v\u00b7C. v\u00b7(B\u2212C) > 0 \u21d0\u21d2 (a \u2212 X) + \u03bbb > 0 corresponds to all the points above line AC. Similarly, if \u03bb \u2265 X Y , (16) corresponds to a+ \u03bb(b\u2212 Y ) > 0 is also all the points above AC.\nFrom lemma 6, if y1,y2 \u2208 Y , then all the labels which lies under line y1 and y2 will not be found by \u03bb-oracle. In the adversarial case, this holds when label lies on the line also. Therefore, Theorem 1 holds when there exists three labels, for arbitrary small > 0, A = [ , G\u0302], B = [H\u0302, ], and C = [ 12H\u0302, 1 2 G\u0302], Y = {A,B,C}. In this case \u03a6\u0302 \u2248 0.\nTherefore, corollary ?? holds for any problems with any Y that {A,B,C} \u2286 Y and \u2200y \u2208 Y , y is on or below AC."}, {"heading": "Appendix F Angular search", "text": "We first introduce needed notations. \u2202\u22a5(a) be the perpendicular slope of a, i.e., \u2202\u22a5(a) = \u2212 1\u2202(a) = \u2212 a1 a2 . For A \u2286 R2, let label set restricted to A as ~YA = ~Y \u2229 A, and y\u03bb,A = O(\u03bb,A) = argmaxy\u2208Y,~y\u2208A h(y) + \u03bbg(y) = argmax~y\u2208~YA [~y]1 + \u03bb[~y]2. Note that if A = R 2, y\u03bb,R2 = y\u03bb. For P,Q \u2208 R2, define \u039b(P,Q) to be the area below the line PQ, i.e., \u039b(P,Q) = {~y \u2208 R2|[~y]2\u2212 [P ]2 \u2264 \u2202\u22a5(Q \u2212 P )([~y]2 \u2212 [P ]2)}. \u03a5\u03bb = {~y \u2208 R2|~\u03a6(~y) = [~y]1 \u00b7 [~y]2 \u2265 ~\u03a6(~y\u03bb,A)} be the area above C\u03bb, and \u03a5\u03bb = {~y \u2208 R2|~\u03a6(~y) = [~y]1 \u00b7 [~y]2 \u2264 ~\u03a6(~y\u03bb,A)} be the area below C\u03bb.\nRecall the constrained \u03bb-oracle defined in (8):\ny\u03bb,\u03b1,\u03b2 = Oc(\u03bb, \u03b1, \u03b2) = max y\u2208Y, \u03b1h(y)\u2265g(y), \u03b2h(y)<g(y) L\u03bb(y)\nwhere \u03b1, \u03b2 \u2208 R+ and \u03b1 \u2265 \u03b2 > 0. Let A(\u03b1, \u03b2) \u2286 R2 be the restricted search space, i.e., A(\u03b1, \u03b2) = {a \u2208 R2|\u03b2 < \u2202(a) \u2264 \u03b1}. Constrained \u03bb-oracle reveals maximal L\u03bb label within restricted area defined by \u03b1 and \u03b2. The area is bounded by two lines whose slope is \u03b1 and \u03b2. Define a pair (\u03b1, \u03b2), \u03b1, \u03b2 \u2208 R+, \u03b1 \u2265 \u03b2 > 0 as an angle. The angular search recursively divides an angle into two different angles, which we call the procedure as a split. For \u03b1 \u2265 \u03b2 \u2265 0, let \u03bb =\n1\u221a \u03b1\u03b2 , z = ~y\u03bb,\u03b1,\u03b2 and z\u2032 = [\u03bb[z]2, 1\u03bb [z]1].\nLet P be the point among z and z\u2032 which has the greater slope (any if two equal), and Q be the other point, i.e., if \u2202(z) \u2265 \u2202(z\u2032), P = z and Q = z\u2032, otherwise P = z\u2032 and Q = z. Let R = [\u221a \u03bb[z]1 \u00b7 [z]2 \u221a 1 \u03bb [z]1 \u00b7 [z]2 ] . Define split(\u03b1, \u03b2) as a procedure divides (\u03b1, \u03b2) into two angles (\u03b1+, \u03b3+) = (\u2202(P ), \u2202(R)) and (\u03b3+, \u03b2+) = (\u2202(R), \u2202(Q)).\nFirst, show that \u2202(P ) and \u2202(Q) are in between \u03b1 and \u03b2, and \u2202(R) is between \u2202(P ) and \u2202(Q).\nLemma 7. For each split(\u03b1, \u03b2),\n\u03b2 \u2264\u2202(Q) \u2264 \u2202(R) \u2264 \u2202(P ) \u2264 \u03b1\nProof. \u03b2 \u2264 \u2202(z) \u2264 \u03b1 follows from the definition of constrained \u03bb-oracle in (8).\n\u2202(z\u2032) = 1\n\u03bb2\u2202(z) =\n\u03b1\u03b2\n\u2202(z) =\u21d2 \u03b2 \u2264 \u2202(z\u2032) \u2264 \u03b1 =\u21d2 \u03b2 \u2264\n\u2202(Q) \u2264 \u2202(P ) \u2264 \u03b1. \u2202(Q) \u2264 \u2202(R) \u2264 \u2202(P ) \u21d0\u21d2 min { \u2202(z), 1\n\u03bb2\u2202(z)\n} \u2264\n1 \u03bb \u2264 max\n{ \u2202(z), 1\n\u03bb2\u2202(z)\n} from \u2200a, b \u2208 R+, b \u2264 a =\u21d2\nb \u2264 \u221a ab \u2264 a.\nAfter each split, the union of the divided angle (\u03b1+, \u03b3) and (\u03b3, \u03b2+) can be smaller than angle (\u03b1, \u03b2). However, follow-\ning lemma shows it is safe to use (\u03b1+, \u03b3) and (\u03b3, \u03b2+) when our objective is to find y\u2217.\nLemma 8.\n\u2200a \u2208 ~YA(\u03b1,\u03b2),\u03a6(a) > \u03a6(y\u03bb,\u03b1,\u03b2) =\u21d2 \u03b2+ < \u2202(a) < \u03b1+\nProof. From lemma 2, ~YA(\u03b1,\u03b2) \u2286 \u039b(P,Q). Let U = {a \u2208 R2|\u2202(a) \u2265 \u03b1+ = \u2202(P )}, B = {a \u2208 R2|\u2202(a) \u2264 \u03b2+ = \u2202(Q)}, and two contours of function C = {a \u2208 R2|~\u03a6(a) = \u03a6(y\u03bb,\u03b1,\u03b2)}, S = {a \u2208 R2|L\u03bb(a) = L\u03bb(~y\u03bb,\u03b1,\u03b2)}. S is the upper bound of \u039b(P,Q), and C is the upper bound of C = {a \u2208 R2|~\u03a6(a) \u2264 \u03a6(y\u03bb,\u03b1,\u03b2)}. P and Q are the intersections of C and S. For area of U and B, S is under C, therefore, \u039b(P,Q) \u2229 U \u2286 C, and \u039b(P,Q) \u2229 B \u2286 C. It implies that \u2200a \u2208 (\u039b(P,Q) \u2229 U) \u222a (\u039b(P,Q) \u2229 B) =\u21d2 ~\u03a6(a) \u2264 \u03a6(y\u03bb,\u03b1,\u03b2). And the lemma follows from A(\u03b1, \u03b2) = U \u222a B \u222a {a \u2208 R2|\u03b2+ < \u2202(a) < \u03b1+}.\nWe associate a quantity we call a capacity of an angle, which is used to prove the suboptimality of the algorithm. For an angle (\u03b1, \u03b2), the capacity of an angle v(\u03b1, \u03b2) is\nv(\u03b1, \u03b2) :=\n\u221a \u03b1\n\u03b2\nNote that from the definition of an angle, v(\u03b1, \u03b2) \u2265 1. First show that the capacity of angle decreases exponentially for each split.\nLemma 9. For any angle (\u03b1, \u03b2) and its split (\u03b1+, \u03b3+) and (\u03b3+, \u03b2+),\nv(\u03b1, \u03b2) \u2265 v(\u03b1+, \u03b2+) = v(\u03b1+, \u03b3+)2 = v(\u03b3+, \u03b2+)2\nProof. Assume \u2202(P ) \u2265 \u2202(Q) (the other case is follows the same proof with changing the role of P and Q), then \u03b1+ = \u2202(P ) and \u03b2+ = \u2202(Q). \u2202(Q) = 1\n\u03bb2\u2202(P ) =\n\u03b1\u03b2\n\u2202(P ) , v\n(\u03b1+, \u03b2+) = v(\u2202(P ), \u2202(Q)) = \u03bb\u2202(P ) = \u2202(P )\u221a \u03b1\u03b2 . Since \u03b1 is\nthe upper bound and \u03b2 is the lower bound of \u2202(P ),\n\u221a \u03b2\n\u03b1 \u2264 v(\u2202(P ), \u2202(Q)) \u2264 \u221a \u03b1\n\u03b2 . Last two equalities in the lemma are from v(\u2202(P ), \u2202(R)) = v(\u2202(R), \u2202(Q)) = \u221a\n\u2202(P )\u221a \u03b1\u03b2 by plugging in the coordinate of R.\nLemma 10. Let B(a) = 1 4\n( a+ 1\na\n)2 . The suboptimality\nbound of an angle (\u03b1, \u03b2) with \u03bb = 1\u221a \u03b1\u03b2 is\nmax~y\u2208~YA(\u03b1,\u03b2) ~\u03a6(~y)\n\u03a6(y\u03bb,\u03b1,\u03b2) \u2264 B(v(\u03b1, \u03b2)).\nProof. From lemma 2, ~YA(\u03b1,\u03b2) \u2286 \u039b(P,Q) = \u039b(z, z\u2032). Let \u2202(z) = \u03b3. From 7, \u03b2 \u2264 \u03b3 \u2264 \u03b1. Let m = argmaxa\u2208\u039b(z,z\u2032) ~\u03a6(a). m is on line zz\u2032 otherwise we can move m increasing direction of each axis till it meets the boundary zz\u2032 and \u03a6 only increases, thusm = tz+(1\u2212t)z\u2032. ~\u03a6(m) = maxt ~\u03a6(tz + (1 \u2212 t)z\u2032). \u2202~\u03a6(tz + (1\u2212 t)z\u2032)\n\u2202t =\n0 =\u21d2 t = 1 2 . m = 12 [z1 + \u03bbz2 z2 + z1 \u03bb ].\nmax~y\u2208~YA(\u03b1,\u03b2) ~\u03a6(~y)\n\u03a6(y\u03bb,\u03b1,\u03b2) =\n1\n4 (\u221a z1 \u03bbz2 + \u221a \u03bbz2 z1 )2\n= 1\n4 \u221a\u221a\u03b1\u03b2 \u03b3 + \u221a \u03b3\u221a \u03b1\u03b2 2\nSince v(a) = v (\n1 a\n) and v(a) increases monotonically for\na \u2265 1,\nB(a) \u2264 B(b) \u21d0\u21d2 max { a, 1\na\n} \u2264 max { b, 1\nb\n}\nIf \u221a \u03b1\u03b2\n\u03b3 \u2265 \u03b3\u221a \u03b1\u03b2 , then\n\u221a \u03b1\u03b2 \u03b3 \u2264 \u221a \u03b1 \u03b2 since \u03b3 \u2265 \u03b2.\nIf \u03b3\u221a \u03b1\u03b2\n\u2265 \u221a \u03b1\u03b2\n\u03b3 , then \u03b3\u221a \u03b1\u03b2\n\u2264 \u221a \u03b1\n\u03b2 since \u03b3 \u2264\n\u03b1. Therefore, max~y\u2208~YA(\u03b1,\u03b2)\n~\u03a6(~y)\n\u03a6(y\u03bb,\u03b1,\u03b2) = B\n(\u221a \u03b1\u03b2\n\u03b3\n) \u2264\nB(v(\u03b1, \u03b2)).\nNow we can prove the theorems.\nTheorem 2. Angular search described in algorithm 2 finds optimum y\u2217 = argmaxy\u2208Y \u03a6(y) at most t = 2M + 1 iteration where M is the number of the labels.\nProof. Denote yt, \u03b1t, \u03b2t, zt, z\u2032t,K 1 t , and K 2 t for y, \u03b1, \u03b2, z, z\u2032,K1, and K2 at iteration t respectively. A(\u03b1t, \u03b2t) is the search space at each iteration t. At the first iteration t = 1, the search space contains all the labels with positive \u03a6, i.e., {y|\u03a6(y) \u2265 0} \u2286 A(\u221e, 0). At iteration t > 1, firstly, when yt = \u2205, the search area A(\u03b1t, \u03b2t) is removed from the search since yt = \u2205 implies there is no label inside A(\u03b1t, \u03b2t). Secondly, when yt 6= \u2205, A(\u03b1t, \u03b2t) is dequeued, and K1t and K 2 t is enqueued. From lemma 8, at every step, we are ensured that do not loose y\u2217. By using strict inequalities in the constrained oracle with valuable s, we can ensure yt which oracle returns is an unseen label. Note that split only happens if a label is found, i.e., yt 6= \u2205. Therefore, there can be only M splits, and each split can be viewed as a branch in the binary tree, and the number of queries are the number of nodes. Maximum number of the nodes with M branches are 2M + 1.\nTheorem 4. In angular search described in algorithm 2, at iteration t,\n\u03a6(y\u2217)\n\u03a6(y\u0302) \u2264 (v1)\n4 t+1\nwhere v1 = max {\n\u03bb0 \u2202(y1) , \u2202(y1) \u03bb0\n} , \u03bb0 is the initial \u03bb used,\nand y1 is the first label returned by constrained \u03bb-oracle.\nProof. After t \u2265 2r \u2212 1 iteration as in algorithm 2 where r is an integer, for all the angle (\u03b1, \u03b2) in the queue Q, v(\u03b1, \u03b2) \u2264 (v1)2 1\u2212r . This follows from the fact that since the algorithm uses the depth first search, after 2r \u2212 1 iterations all the nodes at the search is at least r. At each iteration, for a angle, the capacity is square rooted from the lemma 9, and the depth is increased by one. And the theorem follows from the fact that after t \u2265 2r\u22121 iterations, all splits are at depth r\u2032 \u2265 r, and at least one of the split contains the optimum with suboptimality bound with lemma 10. Thus,\n\u03a6(y\u2217)\n\u03a6(y\u0302) \u2264 B\n( (v1) 21\u2212r ) < (v1) 22\u2212r \u2264 (v1) 4 t+1\nTheorem 5. Assuming \u03a6(y\u2217) > \u03c6, angular search de-\nscribed in algorithm 2 with \u03bb0 = G\u0302\nH\u0302 , \u03b10 =\nG\u03022\n\u03c6 , \u03b20 =\n\u03c6\nH\u03022 ,\nfinds -optimal solution, \u03a6(y) \u2265 (1\u2212 )\u03a6(y\u2217), in T queries\nand O(T ) operations where T = 4 log\n( G\u0302H\u0302\n\u03c6\n) \u00b7 1 , and \u03b4-\noptimal solution, \u03a6(y) \u2265 \u03a6(y\u2217) \u2212 \u03b4, in T \u2032 queries and\nO(T \u2032) operations where T \u2032 = 4 log\n( G\u0302H\u0302\n\u03c6\n) \u00b7 \u03a6(y \u2217)\n\u03b4 .\nProof. \u03a6(y\u2217) > \u03c6 \u21d4 \u03c6 H\u03022\n< g(y\u2217)\nh(y\u2217) = \u2202( ~y\u2217) <\nG\u03022\n\u03c6 .\nv1 = max { \u03bb0 \u2202(y1) , \u2202(y1) \u03bb0 } from Theorem 4. Algorithm finds y\u2217 if \u03b2 \u2264 \u2202( ~y\u2217) \u2264 \u03b1, thus set \u03b1 = G\u0302 2\n\u03c6 and\n\u03b2 = \u03c6\nH\u03022 . Also from the definition of constrained \u03bb-\noracle, \u03b2 = \u03c6\nH\u03022 \u2264 \u2202(y1) \u2264 \u03b1 =\nG\u03022\n\u03c6 . Therefore, v1 \u2264 max {\n\u03bb0 \u2202(y1) , \u2202(y1) \u03bb0\n} . And the upper bound of\ntwo terms equal when \u03bb0 = G\u0302\nH\u0302 , then v1 \u2264\nG\u0302H\u0302\n\u03c6 . \u03b4\nbound follows plugging in the upper bound of v1, and\n= \u03b4\n\u03a6(y\u2217) .\nAlgorithm 2 Angular search 1: procedure ANGULARSEARCH(\u03bb0, T ) Input: \u03bb0 \u2208 R+, and maximum iteration T \u2208 R+ Output: y\u0302 \u2208 Y. Initialize: \u03b10 = \u221e, \u03b20 = 0, Empty queue Q, y\u0302 = \u2205.\u03bb \u2190\n\u03bb0 2: ADD(Q, (\u03b1, \u03b2, 0)) 3: while Q 6= \u2205 do 4: (\u03b1, \u03b2, s)\u2190 Dequeue(Q) 5: if \u03b2 6= 0 then 6: \u03bb\u2190 1\u221a\n\u03b1\u03b2\n7: if s = 0 then 8: y \u2190 Oc(\u03bb, \u03b1, \u03b2) 9: else\n10: y \u2190 Oc(\u03bb, \u03b1, \u03b2) 11: if \u03a6(y) > \u03a6(y\u0302) then 12: y\u0302 \u2190 y 13: if y 6= \u2205 then 14: z \u2190 [h(y) g(y)], z\u2032 \u2190 [\u03bbg(y) 1\n\u03bb h(y)] 15: r \u2190 [\u221a \u03bbh(y)g(y) \u221a\n1 \u03bbh(y)g(y) ] 16: if z1 = z\u20321 then 17: return y 18: else if \u2202(z) > \u2202(z\u2032) then 19: K1 \u2190 (\u2202(z), \u2202(r), 1) 20: K2 \u2190 (\u2202(r), \u2202(z\u2032), 0) 21: else 22: K1 \u2190 (\u2202(z\u2032), \u2202(r), 1) 23: K2 \u2190 (\u2202(r), \u2202(z), 0) 24: ADD(Q,K1) .ADD(Q,K2)"}, {"heading": "25: t\u2190 t+ 1", "text": "26: if t = T then . maximum iteration reached 27: return y\u0302"}, {"heading": "Appendix G Illustration of the angular", "text": "search\nFollowing figure 6 illustrates Angular search. Block dots are the labels from figure 5. Blue X denotes the new label returned by the oracle. Red X is the maximum point. Two straights lines are the upper bound and the lower bound used by the constrained oracle. Constrained oracle returns a blue dot between the upper and lower bounds. We can draw a line that passes blue X that no label can be above the line. Then, split the angle into half. This process continues until the y\u2217 is found."}, {"heading": "Appendix H Limitation of the constraint", "text": "\u03bb-oracle search\nTheorem 3. Any search algorithm accessing labels only through \u03bb-oracle with any number of the linear constraints cannot find y\u2217 in less than M iterations in the worst case where M is the number of labels.\nProof. We show this in the perspective of a game between a searcher and an oracle. At each iteration, the searcher query the oracle with \u03bb and the search space denoted as A, and the oracle reveals a label according to the query. And the claim is that with any choice of M \u2212 1 queries, for each query the oracle can either give an consistent label or indicate that there is no label in A such that after M \u2212 1 queries the oracle provides an unseen label y\u2217 which has bigger \u03a6 than all previous revealed labels.\nDenote each query at iteration t with \u03bbt > 0 and a query closed and convex set At \u2286 R2, and denote the revealed label at iteration t as yt. We will use yt = \u2205 to denote that there is no label inside query space At. Let Yt = {yt\u2032 |t\u2032 < t}.\nAlgorithm 3 describes the pseudo code for generating such yt. The core of the algorithm is maintaining a rectangular areaRt for each iteration t with following properties. Last two properties are for yt.\n1. \u2200t\u2032 < t,\u2200y \u2208 Rt,\u03a6(y) > \u03a6(yt\u2032).\n2. \u2200t\u2032 < t,\u2200y \u2208 Rt \u2229 At\u2032 , h(yt\u2032) + \u03bbt\u2032g(yt\u2032) > h(y) + \u03bbt\u2032g(y).\n3. Rt \u2286 Rt\u22121.\n4. Rt is a non-empty open set.\n5. yt \u2208 Rt \u2229 At\n6. yt = argmaxy\u2208Yt\u2229At h(y) + \u03bbtg(y).\nNote that if these properties holds till iteration M , we can simply set y\u2217 as any label inRM which proves the claim.\nFirst, we show that property 4 is true. R0 is a non-empty open set. Consider iteration t, and assume Rt\u22121 is a nonempty open set. Then R\u0303 is an open set since Rt\u22121 is an open set. There are two unknown functions, Shrink and FindRect. For open set A \u2286 R2, y \u2208 R2, let Shink(A, y, \u03bb) = A \u2212 {y\u2032|\u03a6(y\u2032) \u2264 \u03a6(y) or h(y\u2032) + \u03bbg(y\u2032) \u2265 h(y) + \u03bbg(y)}. Note that Shrink(A, y, \u03bb) \u2286 A, and Shrink(A, y, \u03bb) is an open set. Assume now that there exists a y such that Shrink(Rt\u22121, y, \u03bbt) 6= \u2205 and FindPoint(Rt\u22121, \u03bbt) returns such y. Function FindPoint will be given later. FindRect(A) returns an open non-empty rectangle inside A. Note that Rect(A) \u2286 A, and since input to Rect is always non empty open set,\nAlgorithm 3 Construct a consistent label set Y .\nInput: {\u03bbt,At}M\u22121t=1 , \u03bbt > 0,At \u2286 R2,Atis closed and convex region. Output: {yt \u2208 R2}t=M\u22121t=1 , y\u2217 \u2208 R2 Initialize: R0 = {(a, b)|0 < a, 0 < b},Y0 = \u2205.\n1: for t = 1, 2, . . . ,M \u2212 1 do 2: if Yt\u22121 \u2229 At = \u2205 then 3: y\u0303 = argmaxy\u2208Yt h(y) + \u03bbtg(y). 4: R\u0303 = Rt\u22121\u2229{y|h(y)+\u03bbtg(y) < h(y\u0303)+\u03bbtg(y\u0303) or y /\u2208 At}. 5: else 6: y\u0303 = \u2205, R\u0303 = Rt\u22121 \u2212At. 7: if R\u0303 6= \u2205 then 8: yt = \u2205. Rt = FindRect(R\u0303) 9: else\n10: yt = FindPoint(Rt\u22121, \u03bbt). 11: Rt = FindRect(Shrink(Rt\u22121, yt, \u03bbt)). 12: if yt 6= \u2205 then 13: Y = Y \u222a {yt}. 14: Pick any y\u2217 \u2208 RM\u22121\nsuch rectangle exists. Since R0 is non-empty open set, \u2200t,Rt is a non-empty open set.\nProperty 3 and 5 are easy to check. Property 1 and 2 follows from the fact that \u2200t \u2208 {t|yt 6= \u2205},\u2200t\u2032 > t,Rt\u2032 \u2286 Shrink(Rt\u22121, yt, \u03bbt\u22121).\nProperty 6 follows from the facts that if Yt\u22121 \u2229 At 6= \u2205, R\u0303 = 0 =\u21d2 Rt\u22121 \u2286 {y|h(y) + \u03bbtg(y) > h(y\u0303) + \u03bbtg(y\u0303) and y \u2208 At}, otherwise Yt\u22121 \u2229 At = \u2205, andRt\u22121 \u2286 At.\nFindPoint(A, \u03bb) returns any y \u2208 A \u2212 {y \u2208 R2|\u03bby2 = y1}. Given input A is always an non-empty open set, such y exists. Shrink(Rt\u22121, y, \u03bbt) 6= \u2205 is ensured from the fact that two boundaries, c = {y\u2032|\u03a6(y\u2032) = \u03a6(y)} and d = {h(y\u2032) + \u03bbg(y\u2032) = h(y) + \u03bbg(y)} meets at y. Since c is a convex curve, c is under d on one side. Therefore the intersection of set above c and below d is non-empty and also open.\nAppendix I Additional Plots from the Experiments\nqueries #105 0.5 1 1.5 2 2.5 3 3.5 4 4.5\nob je\nct iv\ne\n8\n9\n10\n11\n12\n13\n14\n15 Yeast\n(7.38) Angular(SGD) (7.4) Angular(CP) (7.28) Bisecting(SGD) (7.34) Bisecting(CP) (9.44) Sarawagi(CP)\n(a) Objective vs queries\niterations 5 10 15 20 25 30\nob je\nct iv\ne\n8\n9\n10\n11\n12\n13\n14\n15 Yeast\n(7.38) Angular(SGD) (7.4) Angular(CP) (7.28) Bisecting(SGD) (7.34) Bisecting(CP) (9.44) Sarawagi(CP)\n(b) Objective vs iterations\niterations 5 10 15 20 25 30\nac cu\nra cy\n0\n0.05\n0.1\n0.15\n0.2\n0.25\n0.3\n0.35\n0.4\n0.45\n0.5\nYeast\n(0.54) Angular(SGD) (0.528) Angular(CP) (0.516) Bisecting(SGD) (0.537) Bisecting(CP) (0.483) Sarawagi(CP)\n(c) Accuracy vs iterations"}], "references": [{"title": "Predicting Structured Data", "author": ["G.H. Bakir", "T. Hofmann", "B. Sch\u00f6lkopf", "A.J. Smola", "B. Taskar", "S.V.N. Vishwanathan"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Efficient algorithms for exact inference in sequence labeling svms", "author": ["A. Bauer", "N. Gornitz", "F. Biegler", "Muller", "K.-R", "M. Kloft"], "venue": "Neural Networks and Learning Systems, IEEE Transactions on,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Hierarchical document categorization with support vector machines", "author": ["L. Cai", "T. Hofmann"], "venue": "In Proceedings of the thirteenth ACM international conference on Information and knowledge management,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "A kernel method for multi-labelled classification", "author": ["A. Elisseeff", "J. Weston"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2001}, {"title": "Training structural svms when exact inference is intractable", "author": ["T. Finley", "T. Joachims"], "venue": "In Proceedings of the 25th international conference on Machine learning,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Cutting-plane training of structural svms", "author": ["T. Joachims", "T. Finley", "Yu", "C.-N. J"], "venue": "Machine Learning,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "Block-coordinate frank-wolfe optimization for structural svms", "author": ["S. Lacoste-Julien", "M. Jaggi", "M. Schmidt", "P. Pletscher"], "venue": "In ICML 2013 International Conference on Machine Learning,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "Rcv1: A new benchmark collection for text categorization research", "author": ["D.D. Lewis", "Y. Yang", "T.G. Rose", "F. Li"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Minimizing the product of two discrete convex functions", "author": ["N.D. Nghia", "D.D. Chinh", "P.C. Duong"], "venue": "ACTA MATHEMATICA VIETNAMICA,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1995}, {"title": "Online) subgradient methods for structured prediction", "author": ["N. Ratliff", "J.A.D. Bagnell", "M. Zinkevich"], "venue": "In AISTATS", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2007}, {"title": "Accurate maxmargin training for structured output spaces", "author": ["S. Sarawagi", "R. Gupta"], "venue": "In Proceedings of the 25th international conference on Machine learning,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2008}, {"title": "Pegasos: Primal estimated sub-gradient solver for svm", "author": ["S. Shalev-Shwartz", "Y. Singer", "N. Srebro", "A. Cotter"], "venue": "Mathematical programming,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}, {"title": "Accelerated proximal stochastic dual coordinate ascent for regularized loss minimization", "author": ["S. Shalev-Shwartz", "T. Zhang"], "venue": "Mathematical Programming,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "Many problems in machine learning can be seen as structured output prediction tasks, where one would like to predict a set of labels with rich internal structure [1].", "startOffset": 162, "endOffset": 165}, {"referenceID": 10, "context": "To address this challenge, Sarawagi and Gupta [11] propose a method to reduce the problem of slack rescaling to a series of modified margin rescaling problems.", "startOffset": 46, "endOffset": 50}, {"referenceID": 1, "context": "[2] proposed an elegant dynamic programming approach to the slack rescaling optimization problem.", "startOffset": 0, "endOffset": 3}, {"referenceID": 10, "context": "Similar to Sarawagi and Gupta [11] our method reduces finding the most violated label in slack rescaling to a series of margin rescaling problems.", "startOffset": 30, "endOffset": 34}, {"referenceID": 9, "context": "However, in contrast to their approach, our approach can be easily used with training algorithms like stochastic gradient descent (SGD) [10] and block Frank-Wolfe (FW) [7], which often scale much better than cutting plane.", "startOffset": 136, "endOffset": 140}, {"referenceID": 6, "context": "However, in contrast to their approach, our approach can be easily used with training algorithms like stochastic gradient descent (SGD) [10] and block Frank-Wolfe (FW) [7], which often scale much better than cutting plane.", "startOffset": 168, "endOffset": 171}, {"referenceID": 4, "context": "When the score and error functions h and g decompose into a sum of simpler functions, we can exploit that structure in order to solve the maximization efficiently [15, 14, 5].", "startOffset": 163, "endOffset": 174}, {"referenceID": 10, "context": "This is also the oracle used by Sarawagi and Gupta [11].", "startOffset": 51, "endOffset": 55}, {"referenceID": 10, "context": "This will be helpful in understanding the difference between our approach and that of prior work on the slack rescaled objective by Sarawagi and Gupta [11].", "startOffset": 151, "endOffset": 155}, {"referenceID": 5, "context": "The cutting plane algorithm was proposed for solving the structural SVM formulation in [15, 6].", "startOffset": 87, "endOffset": 94}, {"referenceID": 10, "context": "This algorithm has also been used in previous work on slack rescaling optimization [11, 2].", "startOffset": 83, "endOffset": 90}, {"referenceID": 1, "context": "This algorithm has also been used in previous work on slack rescaling optimization [11, 2].", "startOffset": 83, "endOffset": 90}, {"referenceID": 5, "context": "At each iteration the active set of constraints is augmented with new violated constraints, and it can be shown that not too many such constraints need to be added for a good solution to be found [6].", "startOffset": 196, "endOffset": 199}, {"referenceID": 10, "context": "Relying on this framework, Sarawagi and Gupta [11] use the formulation in (2) and rewrite the constraints as:", "startOffset": 46, "endOffset": 50}, {"referenceID": 10, "context": "Since F (\u03bb) is a convex function, (11) can be solved by a simple search method such as golden search over \u03bb [11].", "startOffset": 108, "endOffset": 112}, {"referenceID": 9, "context": "On the other hand, algorithms such as stochastic gradient descent (SGD) [10, 12], stochastic dual coordinate ascent (SDCA) [13], or block-coordinate Frank-Wolfe (FW) [7], all optimize the unconstrained objective form (4).", "startOffset": 72, "endOffset": 80}, {"referenceID": 11, "context": "On the other hand, algorithms such as stochastic gradient descent (SGD) [10, 12], stochastic dual coordinate ascent (SDCA) [13], or block-coordinate Frank-Wolfe (FW) [7], all optimize the unconstrained objective form (4).", "startOffset": 72, "endOffset": 80}, {"referenceID": 12, "context": "On the other hand, algorithms such as stochastic gradient descent (SGD) [10, 12], stochastic dual coordinate ascent (SDCA) [13], or block-coordinate Frank-Wolfe (FW) [7], all optimize the unconstrained objective form (4).", "startOffset": 123, "endOffset": 127}, {"referenceID": 6, "context": "On the other hand, algorithms such as stochastic gradient descent (SGD) [10, 12], stochastic dual coordinate ascent (SDCA) [13], or block-coordinate Frank-Wolfe (FW) [7], all optimize the unconstrained objective form (4).", "startOffset": 166, "endOffset": 169}, {"referenceID": 10, "context": "We first present a binary search algorithm similar to the one proposed by Sarawagi and Gupta [11], but with one main difference.", "startOffset": 93, "endOffset": 97}, {"referenceID": 10, "context": "First, the binary search needs explicit upper and lower bounds on \u03bb, thus it has to search the entire \u03bb space [11].", "startOffset": 110, "endOffset": 114}, {"referenceID": 10, "context": "the function only through \u03bb-oracle, including the method of Sarawagi and Gupta [11] and both methods presented above, cannot be guaranteed to find a label optimizing \u03a6(y), even approximately, and even with unlimited accesses to the oracle.", "startOffset": 79, "endOffset": 83}, {"referenceID": 1, "context": "Unlike the simple structure used in [2], we show applicability to complicated structure.", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "We experiment with multilabel dataset modeled by a Markov Random Field with pair-wise potentials as in [5].", "startOffset": 103, "endOffset": 106}, {"referenceID": 3, "context": "Two standard benchmark multi-label datasets, yeast[4] (14 labels)and RCV1[8], are tested.", "startOffset": 50, "endOffset": 53}, {"referenceID": 7, "context": "Two standard benchmark multi-label datasets, yeast[4] (14 labels)and RCV1[8], are tested.", "startOffset": 73, "endOffset": 76}, {"referenceID": 10, "context": "For cutting-plain optimization, we compare all three algorithms: Angular search, Bisecting search, and Sarawagi and Gupta\u2019s [11] (but just used Angular search for the update).", "startOffset": 124, "endOffset": 128}, {"referenceID": 2, "context": "We further experimented on problem of hierarchical multilabel classification [3].", "startOffset": 77, "endOffset": 80}, {"referenceID": 10, "context": "Prior work in this direction [11] was only approximate, and more significantly, only enabled using cutting-plane methods, not SGD, and was thus not appropriate for large scale problems.", "startOffset": 29, "endOffset": 33}, {"referenceID": 1, "context": "More recently, [2] proposed an efficient dynamic programming approach for solving the slack-rescaled argmax (6), but their approach is only valid for sequence problems2 and only when using hamming errors, not for more general structured prediction problems.", "startOffset": 15, "endOffset": 18}], "year": 2015, "abstractText": "We present an efficient method for training slackrescaled structural SVM. Although finding the most violating label in a margin-rescaled formulation is often easy since the target function decomposes with respect to the structure, this is not the case for a slack-rescaled formulation, and finding the most violated label might be very difficult. Our core contribution is an efficient method for finding the most-violatinglabel in a slack-rescaled formulation, given an oracle that returns the most-violating-label in a (slightly modified) margin-rescaled formulation. We show that our method enables accurate and scalable training for slack-rescaled SVMs, reducing runtime by an order of magnitude compared to previous approaches to slack-rescaled SVMs.", "creator": "LaTeX with hyperref package"}}}