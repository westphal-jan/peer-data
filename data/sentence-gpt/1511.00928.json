{"id": "1511.00928", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Nov-2015", "title": "Visualising interactive inferences with IDPD3", "abstract": "A large part of the use of knowledge base systems is the interpretation of the output by the end-users and the interaction with these users. Even during the development process visualisations can be a great help to the developer. We created IDPD3 as a library to visualise models of logic theories, including the idea of how things should be handled.\n\nThe development process starts by implementing a small group of models (with many more to be implemented) in a small environment and then testing a large number of them in various environments. There is an active process of testing a model that looks at the outputs of the models with the appropriate understanding of the data set. In particular we want to test some model types of models:\nLet\u200f see if they are the same model, that model will be tested and not only can we use the same model, but they have different data set. The final example is a model with a set of two objects that are a result of two of two data sets, one from a model that is a result of two data sets. These objects represent three values. The first one, is the model for example in the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the model used by the model of the", "histories": [["v1", "Tue, 3 Nov 2015 14:40:57 GMT  (457kb,D)", "http://arxiv.org/abs/1511.00928v1", "International Workshop on User-Oriented Logic Programming (IULP 2015), co-located with the 31st International Conference on Logic Programming (ICLP 2015), Proceedings of the International Workshop on User-Oriented Logic Programming (IULP 2015), Editors: Stefan Ellmauthaler and Claudia Schulz, pages 67-81, August 2015"]], "COMMENTS": "International Workshop on User-Oriented Logic Programming (IULP 2015), co-located with the 31st International Conference on Logic Programming (ICLP 2015), Proceedings of the International Workshop on User-Oriented Logic Programming (IULP 2015), Editors: Stefan Ellmauthaler and Claudia Schulz, pages 67-81, August 2015", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["ruben lapauw", "ingmar dasseville", "marc denecker"], "accepted": false, "id": "1511.00928"}, "pdf": {"name": "1511.00928.pdf", "metadata": {"source": "CRF", "title": "Visualising interactive inferences with IDPD3", "authors": ["Ruben Lapauw", "Ingmar Dasseville", "Marc Denecker"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Current logic inference systems often communicate with the user in a text-based method. Interpreting output of the system, e.g. in the form of a structure of an answer set or a structure, is often difficult for the user. Appropriate visualisations of the output can be an enormous help to the user. However creating a fitting visualisation is a cumbersome task. Therefore in the past, several system were developed to build visualisations with logic inference engines where logic itself is used to describe the visualisation (e.g. Kara [5],ASPV IZ [3] and IDPDraw [6]).\nThese systems generally take an answer set containing special graphical facts. The combination of these facts is interpreted by the system to produce the visualisation. Kara extends this approach with a generalized visualisation approach that can visualise any answer set as a hypergraph. Kara also allows some interaction with the user by using abductive reasoning. This abductive reasoning will modify the initial interpretation to match the visualised output. This interactivity however cannot be used as a simulation.\nIDPD3 is the successor of IDPDraw. Unlike ID P Draw which was written in C++, IDPD3 is written in Lua and Javascript with supporting libraries in both languages: a JSON encoder for Lua and the d3 visualisation library [2].\nIDPD3 is now fully integrated with IDP and the IDP Web-IDE. This change allows for a better portability and maintenance. It also allows easier development of applications.\nIDPD3 keeps most of the original features like drawing multiple frames of rectangles and circles. It also keeps the possibility to visualise graphs with an automatically generated layout. However some functions like polygons are not yet implemented. The original system is extended with basic animations when transitioning between two frames. And more importantly IDPD3 has support for interactively visualised linear time calculus theories.\nIn Bogaerts, Jansen, Bruynooghe, De Cat, Vennekens, and Denecker [1] a system is described that takes as input a logic linear time calculus theory that\nar X\niv :1\n51 1.\n00 92\n8v 1\n[ cs\n.P L\n] 3\nN ov\n2 01\n5\ndescribes a domain of interactive processes. The system then simulates an interactive process satisfying this theory using in a loop of user input and the progression inference to decide the next state. So far this system was text-based. The IDPD3 library allows to build a graphical interface to this system, visualising the current state and capturing user interaction with this visualisation to determine the next state.\nIn the following sections we describe IDP as a knowledge base system, introduce IDPD3 with its features and implementation and show how to create a full interactive simulation of a linear time theory. After this we will compare IDPD3 to other visualisation systems and describe some future extensions."}, {"heading": "2 IDP", "text": "Input to IDP typically consists of four types of objects: a vocabulary (\u03a3), a theory (T ), a structure (S) and procedures. The first three declare the knowledge. The last is an imperative method to run inferences on the declared knowledge. An example of each can be found in Listing 1.\nA vocabulary object has the syntactical form:\nvocabulary <name> { <list of symbols>}\nThis declares a named vocabulary consisting of a set of symbols: types, typed predicates and typed functions.\nA theory object has the syntactical form:\ntheory <name> : <voc name> { <list of sentences> }\nThis form declares a named theory over a vocabulary with a given set of sentences. The symbols used in the sentences must be a part of the vocabulary. The language of sentences in IDP supports the classical logical operators (\u2227, \u2228, \u00ac, \u21d2,\u21d2,\u21d4). IDP extends this with predicates and quantifications (\u2200x/\u2203x : \u03c6(x)), with functions, arithmetic and aggregates (sum{x : P (x) : x}) for numeric support, with (inductive) definitions (sets of rules, calculated under the well-founded semantics [8]) and type derivation and checking. This language of IDP is an extension of first-order logic (FO) named FO(\u00b7)IDP.\nA structure object has the syntactical form\nstructure <name> : <voc name> { <list of interpretations> }\nThe structure must contain a full interpretation of the types of the vocabulary (the domain) and a partial interpretation of the other symbols in the vocabulary. A structure is called two-valued if every symbol is fully interpreted. A model is a structure that satisfies a theory.\nA procedure object has the syntactical form\nprocedure <name>(<parameters>) {<instructions>}\nA procedure has a name, parameters and imperative instructions in Lua. Lua is used as a scripting language in IDP to execute inferences on the above logic objects. Inferences are special procedures built in IDP to reason with these vocabularies, theories and structures (cf. De Cat, Bogaerts, Bruynooghe, and Denecker [4]). In this paper only two of these inferences are used: model expansion and progression [1].\nModelexpansion(T , S) The first inference, model expansion, expands a partial structure I to a model M so that I \u2286M and M T .\nFor example the vocabulary(V), theory(T) and structure(S) from Listing 1 can be expanded to the three models (M1, M2, M3) from Listing 2:\nvocabulary V : { type Num i sa int A : Num B : Num } theory T : V {\nA + B > 8 . } structure S : V {\nNum = {1 . . 5} } procedure main ( ) {\ns tdopt i on s . nbmodels=4; pr intmode l s (modelexpand\n(T, S) ) }\nListing 1: Input\nstructure M1 : V { Num = {1 . . 5} A = 4 B = 5 } structure M2 : V {\nNum = {1 . . 5} A = 5 B = 5\n} structure M3 : V {\nNum = {1 . . 5} A = 5 B = 4\n}\nListing 2: Output\nProgression(T , I0) The second inference, progression, is an inference that needs a linear time theory and a structure over the same vocabulary. Unlike model expansion, which creates a model with a full planning, progression generates the models of the next time step. We can choose the next state (a \u2018snapshot\u2019) before continuing. This way we can dynamically simulate a linear time theory step by step.\nA simulation has two parts. The first inference returns a list of possible initial states with initialise(T, S). The second inference, progress(T,Si), returns a list of models.\nThe models of these two inferences have a special vocabulary: the single state vocabulary. This is a vocabulary where every time parameter in a predicate or function of the original vocabulary is projected away. The model represents the state of the simulation at the current time."}, {"heading": "3 IDPD3", "text": "IDPD3 is a visualisation library for IDP. It is the successor of IDPDraw [6]. The goal of this library is to easily visualise structures as a drawing. An example can be found in Figure 2. IDPD3 consists of two parts. The first part creates a description of a drawing from a structure as a JSON string, it is an encoding of the relevant predicates and functions. This transformation is done in the Lua environment of IDP (cf. the left part of Figure 1). The second part is integrated with the IDP Web-IDE [7] and is written in Javascript. It interprets the description to visualise using the d3 visualisation library [2]. The d3 library can visualise any svg primitive that HTML supports. This part corresponds to the right part of Figure 1. Since Lua is always integrated in IDP and Javascript is a widely used language IDPD3 is more platform independent than the previous version IDPDraw which is written in C++.\nTo start, we will describe the features implemented in IDPD3. Next we will show how the encoding is done by the library and finally we will decode the input sent from the IDP Web-IDE."}, {"heading": "JSON", "text": ""}, {"heading": "3.1 Features", "text": "IDPD3 can visualise structures in an interactive way, the current snapshot in a sequence of snapshots that correspond to a model of the linear time theory. This way it can visualise the output of many forms of inferences such as model expansion, minimisation, expanding linear time theories and the simulation of linear time theories. To support this IDPDraw introduces frames. These are multiple drawings that can be viewed like a slideshow.\nIn IDPD3 frames are extended with animated transitions that are built in d3. Elements are defined by their keys. When attributes change for an element with the same key between two different frames, they can be animated. This helps the viewer to track the changed elements, even when some frames are\nskipped. For example the positions, sizes and colours can be interpolated by d3. Other animations, like morphing a rectangle to a circle, are not implemented, but they could be easily added without modifying the JSON encoding.\nElements can be one of four basic primitives: a rectangle, a circle, text or an image. Each has different attributes. Every primitive has a position (x, y), a z-order and a colour. Rectangles also have a size (width, height). Circles have a radius. Text has a string (label) and a size. Images have a URL, a size(width, height) and no colour.\nIf the function value is missing for some key the value may default. Colours default to black. The other numeric attributes default to zero, this means that when no size is given, the element will be invisible. When no position is given, the element will be positioned at the edge of the visualisation.\nThere is also a special primitive to create an undirected visual link between two basic primitives. It has three attributes: link-from, link-to and link-width. The first two declare the keys to the primitives that must be linked. The third declares the width of the link that must be drawn. This enables us to draw graphs just as Kara, ASPV IZ and IDPDraw. These tools also have automatic placement functions for graphs. In IDPD3 this is done with a declaration whether a primitive is a node and whether the primitives position is fixed. Declaring as a primitive a node adds it to a force-directed layout implemented in d3.\nFinally IDPD3 adds a hook on the elements. When an element is clicked a JSON string is sent to the IDP process. This string contains an identification of the current time-frame and the key of the element that was clicked. This hook is created to support simulated linear time theories."}, {"heading": "3.2 Creating drawings", "text": "For a visualisation we need a structure for which the vocabulary is an extension of the IDPD3 output vocabulary. The creation of this structure can be done in three ways. The first is to manually specify a structure. The second option is to place the visualisation code directly inside the original theory and expand this theory to a model. The third option is to separate the two logic theories and expand the visualisation theory together with the generated model of the original theory as an extra step. The last approach allows us to separate the concern of the original model from the visualising model. This separation of concerns is one of the core values in software engineering.\nIn Listing 3 the types of the vocabularies, both for input and for output, are defined. The output predicates and functions are also shown in this listing. These are the symbols that need to be used to create a visualisation.\nvocabulary V types { type shape constructed from { c i r c , rect , text , l ink , img} type time i sa int type key i sa string type c o l o r i sa string type l a b e l i sa string\ntype width i sa int type he ight i sa int type order i sa int type image i sa string\n} vocabulary V out {\nextern vocabulary V types\nd3 width ( time ) : width d3 he ight ( time ) : he ight partial d3 type ( time , key ) : shape partial d3 x ( time , key ) : width partial d3 y ( time , key ) : he ight partial d3 co l o r ( time , key ) : c o l o r partial d3 order ( time , key ) : order partial d 3 c i r c r ( time , key ) : width partial d3 rec t w id th ( time , key ) : width partial d3 r e c t h e i g h t ( time , key ) : he ight partial d 3 t e x t l a b e l ( time , key ) : l a b e l partial d 3 t e x t s i z e ( time , key ) : width partial d3 img path ( time , key ) : image partial d3 l i nk w id th ( time , key ) : width partial d3 l i nk f r om ( time , key ) : key partial d3 l i n k t o ( time , key ) : key d3 node ( time , key ) d3 i sF ixed ( time , key )\n}\nListing 3: The types vocabulary and the output vocabulary in IDPD3\nIDPD3 contains a procedure to transform a structure over the V out vocabulary to a JSON string. The algorithm does this by looping over every IDPD3 symbol in the output structure and reading every tuple of the predicate or of the graph interpretation of the function. The function mapping is then added to the element with the correct time-frame and key as a key-value pair. Extending this algorithm with a new attribute is easy, it is a new symbol that must be read and the tuples must be transformed to a new key-value pair to add at the correct place.\nWhen this JSON string is sent to the IDP Web-IDE it will be interpreted as an image and it will be visualised. First it is parsed and then interpreted by the online part of the library. The JSON encoding was chosen in such a way that it coincides largely with the data-driven approach of the d3 library.\nApplication: visualising a structure A structure over an extension of the output vocabulary can be visualised just by transforming it to JSON. For example the structure in Listing 4 has a rectangle with basic attributes a position (2,3), a width(4), a height(5) and with the default colour black. The dots signify places where more elements and attributes can be defined.\nstructure S : idpd3 : : V out { d3 type = {1 , \u201dkey \u201d , r e c t ( ) ; . . . } d3 width = {1 , \u201dkey \u201d , 4 ; . . . } d3 he ight = {1 , \u201dkey \u201d , 5 ; . . . } d3 x = {1 , \u201dkey \u201d , 2 ; . . . } d3 y = {1 , \u201dkey \u201d , 3 ; . . . } . . . } procedure main ( ) {\nv i s u a l i s e (S) ; }\nListing 4: Example structure\nThis structure is transformed to the following JSON specification by Lua. This can be done at any time for a two-valued structure over V out by calling \u201cidpd3:visualise(structure)\u201d. This method will transform the structure and print the specification.\n{\"animation\": [{\"time\":1, \"elements\": [{\"key\":\"key\", \"type\":\"rect\",\n\"y\":3, \"x\":2, \"rect_height\":\"5\", \"rect_width\":\"4\"}, ...]\n, ...}, ...]}\nThe IDP Web-IDE will filter the specification and visualise it immediately. Thus the IDP Web-IDE will draw this rectangle (and the other elements).\nApplication: Transforming a model to a drawing As a general principle in software development different responsibilities should be divided as much as possible. When you have a logic structure and theory that is expanded to a model you might want to visualise it. Without changing the original theory you can create a visualising theory to expand the original model to a model that can be visualised.\nFor example the structure S is a three by three chessboard grid. The structure is expanded under the theory T to a structure sol and then visualised.\nvocabulary V { type X i sa int i sB lack (X,X) } structure S : V {\nX = {1 . . 3} i sB lack = { (1 , 2 ) ; ( 2 , 1 ) ; ( 2 , 3 ) ; ( 3 , 2 ) }\n} vocabulary V out {\nextern vocabulary V extern vocabulary idpd3 : : V out toKey (X, X) : key\n}\ntheory T : V out { { d3 type (1 , toKey (x , y ) ) = r e c t . d3 x (1 , toKey (x , y ) ) = 4\u2217x \u2212 2 . d3 y (1 , toKey (x , y ) ) = 4\u2217y \u2212 2 . d3 rec t w id th (1 , toKey (x , y ) ) = 4 . d 3 r e c t h e i g h t (1 , toKey (x , y ) ) = 4 . d3 co l o r (1 , toKey (x , y ) ) = \u201d black \u201d \u2190 i sB lack (x , y ) . d3 co l o r (1 , toKey (x , y ) ) = \u201dwhite \u201d \u2190 \u00ac i sB lack (x , y ) . d3 width (1 ) = 14 . d3 he ight (1 ) = 14 . } } procedure toKey (x , y ) { re turn x . . \u201d \u2212\u201d . . y ; } structure S out : V out {\ntime = {1} c o l o r = {\u201d black \u201d ; \u201dwhite \u201d} width = {1 . . 1 5} he ight= {1 . . 1 5} X = {1 . . 3} toKey = procedure toKey\n} procedure main ( ) {\nl o c a l m = merge (S , S out ) ; l o c a l s o l = onemodel (T, m) ; v i s u a l i s e ( s o l ) ;\n}\nApplication: Comparing theories Another of our basic applications checks whether two theories are (approximately) equivalent on some partial structure. It is designed to highlight the errors of the user (or student) designed theory compared to a given correct theory. The application needs five arguments: a theory the user created (Tuser), the correct theory(Tcorr), a visualisation theory(Tvis) and two structures that contain as basic information for the user (S) and the basic information for the visualisation (Sout).\nThe application will try to find a model of the first theory that is not satisfied by the second theory. If it finds such a model exists, it is shown as a drawing where the errors are highlighted. Otherwise it will show one of the matching models. To reduce the amount of computing time, a finite number of models can be checked.\nThis application is used in the examples of the online editor of IDP. The example of Figure 2 can be found at https://dtai.cs.kuleuven.be/krr/ idp-ide/?present=Roster. There are currently two rules that are wrongly encoded, which is displayed in the images as the rectangles which are coloured"}, {"heading": "Mathematics", "text": ""}, {"heading": "Mathematics", "text": ""}, {"heading": "Mathematics Mathematics", "text": ""}, {"heading": "History History", "text": ""}, {"heading": "Mathematics", "text": ""}, {"heading": "Mathematics Mathematics", "text": ""}, {"heading": "Latin Math", "text": "according to the error that is made. The correct rules are supplied in the comments, activating these will remove the coloured rectangles."}, {"heading": "3.3 Interpreting interactions", "text": "Another extension of IDPDraw in IDPD3 is to support interaction with the user using logic LTC theories and progression inference. After an initial model is created and visualised, IDP will wait for input from the IDP Web-IDE. This input is interpreted by the library and transformed to an input structure. The union of the current snapshot and the input structure is expanded to a structure that holds the current state and the chosen action. This structure is then used to progress to the next state. This way we can create an interactive simulation of an LTC theory. This loop behaves like the Model-View-Controller pattern. Where the output theory creates the View, the input theory behaves as the Controller, and the progression theory handles the Model.\nIn IDPD3 the input is only click-based: the only predicate that is available in the input vocabulary is d3 click(Time, Key). The input is transformed to an IDP structure by handling every object defined by a time-key pair. For example when an element with key \u201ckey\u201d is clicked the drawing program will generate the following specification:\n[{\"time\":1,\"elements\":[{\"key\":\"key\",\"type\":\"click\"}]\nThis is transformed to the following structure:\nstructure S : V { time = {1} key = {\u201dkey \u201d ; . . . } d3 c l i c k = {1 , \u201dkey\u201d} }\nApplication: Interactive simulation Another application enables the interactive simulation of an LTC theory. This application needs 9 arguments. The first three are the progression theory (Tprog), the initial structure (Iinit) and the output vocabulary (Vstate). The next three handle the output: the output theory (Tout), structure (Sout) and vocabulary (Vout). The last three handle the input: the theory (Tin), structure (Iin) and vocabulary (Vin).\nThis application first calculates an initial model M0 by expanding Sinit with the theory Tprog. This model is merged with the output structure Sout and expanded to the visualisation model Mv0 using Tout. This visualisation model is transformed using the library to a JSON string and visualised by the IDP Web-IDE. The application then waits for input.\nWhen input is received it is added to Sin creating a more specific structure. This structure is expanded with Tin and projected to the actions of the model. The application keeps looping until no new model exists for one of the inferences.\nWEB-IDE\nFig. 3: The MVC loop\nA schematic view of the interactions between the theories and the structures is given in Figure 3.\nIn this way an interactive game, like Pac-Man (Figure 4), can be made. This application is available at http://dtai.cs.kuleuven.be/krr/idp-ide/ ?present=pacman."}, {"heading": "4 Full example", "text": "Suppose we have an LTC theory with a single function, count(Time) : Count. There are also three actions: countUp(Time), countDown(Time), setValue(Time, Value). This theory would be declared the following way:\nLTCvocabulary V types { type Count i sa int type Time Next (Time) : Time Star t : Time } LTCvocabulary V state { . . . } LTCvocabulary V act ion { . . . } LTCvocabulary V { . . . }\ntheory T : V { { count ( Sta r t ) = 0 . count (Next ( t ) ) = v \u2190 setValue ( t , v ) . count (Next ( t ) ) = count ( t ) + 1 \u2190 countUp ( t ) .\ncount (Next ( t ) ) = count ( t ) \u2212 1 \u2190 countDown( t ) . count (Next ( t ) ) = count ( t ) \u2190 \u00accountUp ( t ) \u2227\n\u00accountDown( t ) \u2227 \u2200v : \u00acsetValue ( t , v ) . } }\nThis theory can be augmented with IDPD3 by adding the visualisation theories. The output vocabulary is the union of the single-state vocabulary1 and the IDPD3 output-vocabulary. Helper functions and predicates can be added in this vocabulary. The output theory declares two text elements: the current count and a label to count up. The input vocabulary is the union of the single-state vocabulary and the IDPD3 input-vocabulary. The input theory declares two rules to convert the clicks from the user: when the \u201cCount up\u201d text is clicked the counter is incremented, when the count itself is clicked the counter resets to zero.\nLTCvocabulary V d3 { extern vocabulary V types extern vocabulary idpd3 : : V types toLabel (Count ) : l a b e l countLabel : l a b e l } vocabulary V d3 out { . . . } vocabulary V d3 in { . . . }\ntheory T out : V d3 out { { d3 width (1 ) = 10 . d3 he ight (1 ) = 10 .\nd3 type (1 , \u201d l a b e l \u201d) = text . d3 x (1 , \u201d l a b e l \u201d) = 1 . d3 y (1 , \u201d l a b e l \u201d) = 1 . d 3 t e x t s i z e (1 , \u201d l a b e l \u201d) = 1 . d 3 t e x t l a b e l (1 , \u201d l a b e l \u201d) = toLabel ( count ) .\nd3 type (1 , \u201dbutton \u201d) = text . d3 x (1 , \u201dbutton \u201d) = 1 . d3 y (1 , \u201dbutton \u201d) = 5 . d 3 t e x t s i z e (1 , \u201dbutton \u201d) = 1 . d 3 t e x t l a b e l (1 , \u201dbutton \u201d) = \u201dCount up \u201d .\n}} theory T in : V d3 in { { countUp \u2190 d3 c l i c k (1 , \u201dbutton \u201d) . setValue (0 ) \u2190 d3 c l i c k (1 , \u201d l a b e l \u201d) . }}\n1 V ss is an automatically generated vocabulary where Time is projected away from the vocabulary.\nFinally the basic structure and the Lua-scripting environment are declared. An IDP procedure is used to automatically convert from a number to a string. And due to quirks in IDP with types there is one structure that is projected to the different structures needed for the application. It is possible to disambiguate it, at the cost of using more advanced features in IDP. The full source code is available for testing at https://dtai.cs.kuleuven.be/krr/idp-ide/ ?present=Count.\nstructure S : V { Count = {0 . . 1 00} Star t = 0 } structure S d3 : V d3 ss {\nCount = {0 . . 1 00} time = {1} key = {\u201d l a b e l \u201d ; \u201dbutton \u201d} // l a b e l i s autogenerated by procedure output width = {0 . . 2 0} he ight = {0 . . 2 0} countLabel = \u201dCount up\u201d toLabel = procedure toText\n} procedure main ( ) {\ns tdopt i on s . s p l i t d e f s = f a l s e ; s tdopt i on s . p o s t p r o c e s s d e f s = f a l s e ; s tdopt i on s . cpsupport = f a l s e ; s tdopt i on s . xsb = f a l s e ; idpd3 browser : setLogLeve l (0 ) ; l o c a l go = idpd3 browser : createLTC (\nT, S , V s ta t e s s , T in , S d3 , V d3 in , T out , S d3 , V d3 out ) ;\nl o c a l l a s t S t a t e = go ( ) ; }"}, {"heading": "5 Related work", "text": "Multiple systems have already been created to visualise logic programs. The main systems are ASPV IZ [3], IDPDraw [6] and Kara [5].\nASPV IZ is one of the first visualisation tools for logic programs. This program joins the original logic program with a logic visualisation program before expanding it with an ASP solver. As it is one of the early visualisation tools created, it only supports basic primitives and visualising multiple frames. ASPV IZ supports saving images as svg, like IDPD3 and Kara.\nIDPDraw is another visualisation tool. It is the predecessor of IDPD3. The main improvement over IDPDraw is that the program is built on the core of IDP itself. We use an IDP vocabulary, which helps during the construction of\nvisualisation theories with grammar checking and debugging. Additionally, the transformation of the structures are written in Lua, the imperative language that drives the inferences. This means that while IDPDraw is capable of providing interactivity, it is limited to direct keyboard interaction with IDP and spawning multiple windows. IDPD3 has extended this to clicking with the mouse on drawn items.\nOne of the newest visualisation tool is Kara. This system is part of the SeaLion IDE. It supports an almost full superset of both ASPV IZ and IDPDraw, lacking only the ability to show short non-interactive frames. Like IDPDraw and IDPD3, Kara supports ordering elements by a z-axis. One of the strengths of Kara is that it supports some higher-level specifications that are not supported by the other main systems. It can generate layouts for graphs and visualise an arbitrary answer set model as a hyper-graph."}, {"heading": "6 Future work", "text": "In the future we would like to extend the framework of interactive animations to more practical applications. For this some basic functionality must be added: keyboard interaction and text fields are a standard way of entering information.\nAnother change we would like to implement is generalising the vocabulary of both input and output. Currently it takes a minimal but non-zero time to implement a new attribute. If this is done new attributes can be added without changing the library. This would decrease the time invested in maintaining the library in the same way as argued for the d3 visualisation library [2].\nHowever to really support practical applications we should need to move away from visualisations and support forms. A new library that uses many of the ideas currently implemented in IDPD3, would be created for this."}, {"heading": "7 Conclusion", "text": "In this paper we presented IDPD3 as the successor of IDPDraw. The main feature of IDPD3 is the possibility to visualise an interactive simulation of a linear time theory. Smaller features include the animation of basic primitives and the tutorial application. Due to it\u2019s integration with both IDP as a library and the IDP Web-IDE developing visualisations for IDP is easier and platform independent. The maintenance of the library should be easier than before. In the future we would like to implement the library for more practical applications involving data entry and perhaps forms."}], "references": [{"title": "Simulating Dynamic Systems Using Linear Time Calculus Theories", "author": ["Bart Bogaerts", "Joachim Jansen", "Maurice Bruynooghe", "Broes De Cat", "Joost Vennekens", "Marc Denecker"], "venue": "TPLP", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "D3: Data-Driven Documents", "author": ["Michael Bostock", "Vadim Ogievetsky", "Jeffrey Heer"], "venue": "IEEE Trans. Visualization & Comp. Graphics (Proc. InfoVis)", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "ASPVIZ: Declarative visualisation and animation using answer set programming", "author": ["Owen Cliffe", "Marina De Vos", "Martin Brain", "Julian Padget"], "venue": "Logic Programming. Springer,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Predicate Logic as a Modelling Language: The IDP System", "author": ["Broes De Cat", "Bart Bogaerts", "Maurice Bruynooghe", "Marc Denecker"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Kara: A system for visualising and visual editing of interpretations for answer-set programs", "author": ["Christian Kloim\u00fcllner", "Johannes Oetsch", "J\u00f6rg P\u00fchrer", "Hans Tompits"], "venue": "In: Applications of Declarative Programming and Knowledge Management. Springer,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Unfounded Sets and Well-Founded Semantics for General Logic Programs", "author": ["Allen Van Gelder", "Kenneth A. Ross", "John S. Schlipf"], "venue": "PODS. ACM,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1988}], "referenceMentions": [{"referenceID": 4, "context": "Kara [5],ASPV IZ [3] and IDDraw [6]).", "startOffset": 5, "endOffset": 8}, {"referenceID": 2, "context": "Kara [5],ASPV IZ [3] and IDDraw [6]).", "startOffset": 17, "endOffset": 20}, {"referenceID": 1, "context": "Unlike ID P Draw which was written in C++, IDPD3 is written in Lua and Javascript with supporting libraries in both languages: a JSON encoder for Lua and the d3 visualisation library [2].", "startOffset": 183, "endOffset": 186}, {"referenceID": 0, "context": "In Bogaerts, Jansen, Bruynooghe, De Cat, Vennekens, and Denecker [1] a system is described that takes as input a logic linear time calculus theory that ar X iv :1 51 1.", "startOffset": 65, "endOffset": 68}, {"referenceID": 5, "context": "IDP extends this with predicates and quantifications (\u2200x/\u2203x : \u03c6(x)), with functions, arithmetic and aggregates (sum{x : P (x) : x}) for numeric support, with (inductive) definitions (sets of rules, calculated under the well-founded semantics [8]) and type derivation and checking.", "startOffset": 242, "endOffset": 245}, {"referenceID": 3, "context": "De Cat, Bogaerts, Bruynooghe, and Denecker [4]).", "startOffset": 43, "endOffset": 46}, {"referenceID": 0, "context": "In this paper only two of these inferences are used: model expansion and progression [1].", "startOffset": 85, "endOffset": 88}, {"referenceID": 1, "context": "It interprets the description to visualise using the d3 visualisation library [2].", "startOffset": 78, "endOffset": 81}, {"referenceID": 2, "context": "The main systems are ASPV IZ [3], IDDraw [6] and Kara [5].", "startOffset": 29, "endOffset": 32}, {"referenceID": 4, "context": "The main systems are ASPV IZ [3], IDDraw [6] and Kara [5].", "startOffset": 54, "endOffset": 57}, {"referenceID": 1, "context": "This would decrease the time invested in maintaining the library in the same way as argued for the d3 visualisation library [2].", "startOffset": 124, "endOffset": 127}], "year": 2015, "abstractText": "A large part of the use of knowledge base systems is the interpretation of the output by the end-users and the interaction with these users. Even during the development process visualisations can be a great help to the developer. We created IDPD3 as a library to visualise models of logic theories. IDPD3 is a new version of IDDraw and adds support for visualised interactive simulations.", "creator": "LaTeX with hyperref package"}}}