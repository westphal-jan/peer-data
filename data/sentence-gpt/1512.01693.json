{"id": "1512.01693", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Dec-2015", "title": "Deep Attention Recurrent Q-Network", "abstract": "A deep learning approach to reinforcement learning led to a general learner able to train on visual input to play a variety of arcade games at the human and superhuman levels. Its creators at the Google DeepMind's team called the approach: Deep Q-Network (DQN). We present an extension of DQN by \"soft\" and \"hard\" attention mechanisms to measure and classify neural activity (PFC).\n\n\n\nThe algorithm was based on the principle of \"imaging for performance,\" that \"you cannot do everything in the face of the input that doesn't fit the input, so that you can avoid errors\". In order to train on these features, we had to be able to build a model that included only two inputs (left) and the right of each one to represent all input inputs (right). We used the two parameters (left and right) for training on the neural network and we then implemented our model (right).\nAs a side effect of DQN, we also tested a model that could only train on inputs in the right context, as the inputs did not fit in the correct context.\nWhat the model does actually teach you is that there is a constant constant number of input inputs: inputs (left, right, right) are in the right position. The average number of input inputs is a set of values: a minimum number of outputs, and an input type. The total number of inputs is the number of inputs that are available (left).\nHere's how our model was made:\nWe then built a model for our model:\nThe model can be found in the following images:\nWe also used the new model (which uses the same algorithm):\nThe model can be found in the following images:\nWe also used the new model (which uses the same algorithm):\nWe also used the new model (which uses the same algorithm):\nWe also used the new model (which uses the same algorithm):\nWe also used the new model (which uses the same algorithm):\nAs a side effect of DQN, we used the new model (which uses the same algorithm):\nIn other words, it is useful to make this model more useful.\nIn other words, it is useful to make this model more useful. In other words, it is useful to make this model more useful. In other words, it is useful to make this model more useful. We used the new model (which uses the same algorithm):\nThis is an illustration of the neural", "histories": [["v1", "Sat, 5 Dec 2015 18:35:40 GMT  (126kb,D)", "http://arxiv.org/abs/1512.01693v1", "7 pages, 5 figures, Deep Reinforcement Learning Workshop, NIPS 2015"]], "COMMENTS": "7 pages, 5 figures, Deep Reinforcement Learning Workshop, NIPS 2015", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["ivan sorokin", "alexey seleznev", "mikhail pavlov", "aleksandr fedorov", "anastasiia ignateva"], "accepted": false, "id": "1512.01693"}, "pdf": {"name": "1512.01693.pdf", "metadata": {"source": "CRF", "title": "Deep Attention Recurrent Q-Network", "authors": ["Ivan Sorokin", "Alexey Seleznev", "Mikhail Pavlov", "Aleksandr Fedorov", "Anastasiia Ignateva"], "emails": ["5visionteam@gmail.com"], "sections": [{"heading": "1 Introduction and Related Work", "text": "The recent success of Deep Q-Learning (DQL) in mastering human-level control policies on a variety of different Atari 2600 games [1] inspires artificial intellegence researchers to seek possible improvements to Google DeepMind\u2019s algorithm in order to further enhance its learning abilities [2, 3, 4]. The goal of this concise paper is to present the authors\u2019 approach to addressing this challenge by providing DQN, a deep neural network used in DQL as an analogue of a classic actionutility function, with such tools of modern machine learning as Long Short-Term Memory (LSTM) [5] and visual attention mechanisms [6, 7, 8].\nDespite impressive results achieved by the Google DeepMind\u2019s intelligent agent, there are a number of elements to be improved in the existing algorithm. In particular, Hausknecht and Stone [2] pointed out that in practice, DQN decides on the next optimal action based on the visual information corresponding to the last four game states encountered by the agent. Therefore, the algorithm cannot master those games that require a player to remember events more distant than four screens in the past. It is for this reason that Hausknecht and Stone proposed the Deep Recurrent Q-Network (DRQN), a combination of LSTM and DQN in which (i) the fully connected layer in the latter is replaced for a LSTM one, and (ii) only the last visual frame at each timestep is used as DQN\u2019s input. The authors report that despite seeing only one visual frame, DRQN is still capable integrating relevant information across the frames. Nonetheless, no systematic improvement in Atari game scores over the results of Mhih et al. [1] was observed.\nAnother drawback of DQN is its long training time, which is a critical component to the researchers\u2019 ability to carry out experiments with different network architectures and algorithm\u2019s parameter settings. According to [1], it takes 12-14 days on a GPU to train the network. Nair et al. [3] proposed a new massively parallel version of the algorithm geared to address this problem. They report that its performance surpassed non-distributed DQN in 41 of the 49 games. However, extensive parallelization is not the only and, probably, not the most efficient remedy to the problem.\nRecent achievements of visual attention models in caption generation [6], object tracking [9, 7], and machine translation [10] have induced the authors of this paper to conduct a series of experiments so as to assess possible benefits from incorporating attention mechanisms into the structure of the\n\u2217The authors are members of the 5vision team from the hackathon DeepHack.Game 2015.\nar X\niv :1\n51 2.\n01 69\n3v 1\n[ cs\n.L G\n] 5\nD ec\n2 01\nDRQN algorithm. The main advantage of utilizing these mechanisms is that DRQN acquires the ability to select and then focus on relatively small informative regions of an input image, thus helping to reduce the total number of parameters in the deep neural network and computational operations needed for training and testing it. In contrast to DRQN, in this case, LSTM layer stores the data used not only for making decision on the next action, but also for choosing the next region of attention. In addition to computational speedups, attention-based models can also add some degree of interpretability to the Deep Q-Learning process by providing researchers with an opportunity to visualize \u201cwhere\u201d and \u201cwhat\u201d the agent\u2019s attention is focusing on.\nThe rest of the paper is organized as follows. In Section 2, two variants of the suggested DARQN algorithm are described. The results of applying the DARQN to two popular Atari 2600 games are presented in Section 3. Conclusions are formulated in Section 4."}, {"heading": "2 Deep Attention Recurrent Q-Network", "text": "The DARQN architecture is schematically shown in Figure 1 and consists of three types of networks: convolutional (CNN), attention, and recurrent. At each time step t, CNN receives a representation of the current game state st in the form of a visual frame, based on which it produces a set of D feature maps, each having a dimension of m\u00d7m. The attention network transformes these maps into a set of vectors vt = {v1t , ..., vLt }, vit \u2208 RD, L = m \u2217m and outputs their linear combination zt \u2208 RD, called a context vector. The recurrent network, in our case LSTM, takes as input the context vector, along with the previous hidden state ht\u22121 and memory state ct\u22121, and produces hidden state ht that is used by (i) a linear layer for evaluating Q-value of each action at that the agent can take being in state st, (ii) the attention network for generating a context vector at the next time step t + 1. In the following subsections, we consider two approaches to the context vector calculation. As will be shown, they have important differences in the training procedure."}, {"heading": "2.1 Soft attention", "text": "The \u201csoft\u201d attention mechanism assumes that the context vector zt can be represented as a weighted sum of all vectors vit, each of which corresponds to the features extracted by CNN at different image regions. Weights in this sum are chosen in proportion to the vectors relative importance assessed by the attention network g. The g network contains two fully connected layers followed by a softmax activation. Its output may be written as:\ng(vit, ht\u22121) = exp(Linear(Tanh(Linear(v i t) +Wht\u22121)))/Z, (1)\nwhere Z is a normalizing constant, W is a weights matrix, Linear(x) = Ax + b is an affine transformation with some weights matrix A and bias b. Once we have defined the importance of each location vector vit, we can calculate the context vector zt:\nzt = L\u2211 i=1 g(vit, ht\u22121)v i t. (2)\nOther networks depicted in Figure 1 have a standard form, the details of their realization are discussed in Section 3. The whole DARQN model is trained by minimizing a sequence of loss functions:\nJt(\u03b8t) = Est,at\u223c\u03c1(\u00b7),rt [(Est+1\u223cE [Yt | st, at]\u2212Q(st, at; \u03b8t)) 2], (3)\nwhere Yt = rt + \u03b3maxat+1 Q(st+1, at+1; \u03b8t\u22121) is an approximate target value, rt is an immediate reward after taking action at in state st, \u03b3 \u2208 [0, 1] is a discount factor, E is an environment distribution, \u03c1(st, at) is a behaviour distribution selected as -greedy strategy, \u03b8t is a vector of all DARQN weights, including those belonging to the attention network. To optimize the loss function, we use the standard Q-learning update rule:\n\u03b8t+1 = \u03b8t + \u03b1(Yt \u2212Q(st, at; \u03b8t))\u2207\u03b8tQ(st, at; \u03b8t) (4) All functions in DARQN are differentiable; therefore, the gradient exists for each parameter, and the whole model can be trained end-to-end. The suggested algorithm also utilizes two training techniques proposed by Mnih et al. [1], namely target network and experience replay."}, {"heading": "2.2 Hard attention", "text": "The \u201chard\u201d attention mechanism requires sampling only one attention location from L available at each time step t in accordance with some stochastic attention policy \u03c0g . In our case, this policy is represented by the neural network g whose output (1) consists of location selection probabilities and whose weights are the policy parameters. In order to train a network with stochastic units, the statistical gradient-following algorithm REINFORCE [11] may be used. In literature [8, 6], there are several successful examples of integrating this algorithm with Deep Learning. Unlike models proposed in these papers and trained by maximizing likelihood, the suggested algorithm is trained by minimizing a sequence of loss functions (3). Therefore, its training process is different. Assume that st (and therefore vt) was sampled from the environment distribution affected by the attention policy \u03c0g(it | vt, ht\u22121), a categorical distribution with parameters given by a softmax layer (1) of the attention network g. Then, in the policy gradient approach [12], updates of the policy parameters may be written as: \u2206\u03b8gt \u221d \u2207\u03b8gt log \u03c0g(it | vt, ht\u22121)Rt, (5) where Rt is a future discounted return after the agent selects the attention location it. In order to approximate this value, a separate neural network Gt = Linear(ht) has been introduced. This network is trained by regressing towards the expected value of Yt. The final update rule for the attention network\u2019s parameters has the following form:\n\u03b8gt+1 = \u03b8 g t + \u03b1\u2207\u03b8gt log \u03c0g(it | vt, ht\u22121)(Gt \u2212 Yt) (6)\nwhere the expression Gt \u2212 Yt can be interpreted in terms of advantage function estimation [13]. Training (6) can also be described [7] as adjusting the parameters \u03b8gt of the attention network so that the log-probability of attention location it that has led to a higher expected future reward is increased, while that of locations having produced a lower reward is decreased. In order to reduce a high variance of the stochastic gradient, a practical trick proposed in [6] is utilized. At each time step, the context vector zt is found based on (2) with a 50% chance. On the other hand, adding the entropy term on the categorical distribution has not resulted in any positive changes.\nIt is worth noting that for the hard attention DARQN model, CNN weights were preinitialized based on the corresponding weights of the trained soft attention model. In addition, the error backpropogation process does not affect weights at the previous time step, but does involve weights in convolutional layers. The latter receive the sum of two gradients: one from the attention network (6) and the other from the recurrent network (4)."}, {"heading": "3 Experiments", "text": "The proposed algorithm was tested on several popular Atari 2600 games: Breakout, Seaquest, Space Invaders, Tutankham, and Gopher. The results obtained were compared with the corresponding results of (i) DQN suggested by Mnih et al. [1] and implemented in Torch, (ii) DRQN suggested by Hausknecht and Stone [2] and implemented in Caffe. Our realization of DARQN is based on the source code [1] and is available online 1.\n1https://github.com/5vision/DARQN"}, {"heading": "3.1 Network Architecture", "text": "The convolutional network architecture in DARQN is similar to that used in [1], except for two peculiarities: its input is a 84 \u00d7 84 \u00d7 1 tensor, and the output of its last (third) layer contains 256 feature maps 7\u00d7 7. The attention network takes 49 vectors as input, each vector has a dimension of 256. The number of hidden units in the attention network is chosen to be equal to 256. The LSTM network also has 256 units, which is consistent with the number of attention network outputs.\nIt is intresting to compare the DARQN capacity to the capacities of DQN and DRQN. Depending on the game type, they may slightly differ. For Seaquest, a game with 18 possible actions, both DQN and DRQN (with 1 unroll step) have 1, 693, 362 adjustable parameters, whereas the suggested hard and soft DARQN models have only 845, 428 and 845, 171 parameters, respectively."}, {"heading": "3.2 Hyper-parameters", "text": "In all experiments, the discount factor was set to \u03b3 = 0.99, the learning rate \u03b1 starts at 0.01 and decays linearly to 0.00025 over 1M steps for the soft attention model and from 0.001 to 0.00025 for the one with the hard attention model. The number of steps between target network updates was 10, 000. Training was done over 5M steps. The agent was evaluated after every 50, 000 steps based on the average reward per episode obtained by running an -greedy policy with = 0.05 for 25, 000 steps. The size of the experience replay memory was 500, 000 tuples. The memory was sampled to update the network every 4 steps with minibatches of size 32. The model was trained using the backpropogation through time. For each new minibatch, the initial LSTM\u2019s hidden and memory states were zeroed. To update weights \u03b8t, the RMSProp algorithm with momentum equal to 0.95 was utilized. The simple exploration policy used was an -greedy policy with the decreasing linearly from 1 to 0.1 over 1M steps."}, {"heading": "3.3 Results", "text": "The main results of models comparison on the five Atari games are presented in Table 1. One can see that not on all of the games, the DARQN models achieve the results that are superior to corresponding results of DQN and DRQN. To provide some insight into advantages and disadvantages of the proposed models, the training process on the two games where DARQN obtains the best and the worst results is depicted in Figure 2.\nOn Seaquest, both DARQN models demonstrate a high level of performance. However, the hard attention-based agent seems to be inferior with respect to the soft one. In particular, it is unable to learn that in order to survive, the submarine has to regularly resurface. This problem can be attributed to one of the shortcomings of the policy gradient approach used in the hard attention mechanism\u2019s training procedure, namely to its tendency to converge to a local optimum.\nIn the case of Breakout, models with LSTM have worse results than the original DQN. One possible reason for that is the low number of unroll steps used when training the LSTM network. To test this hypothesis, we repeated the whole experiment for the DARQN model with a greater number of unroll steps. The results presented in Figure 3 show that despite some performance improvement, neither soft nor hard DARQN model can surpass the DQN results.\nTo visualize attention regions, we created 256 subsidiary features maps 7 \u00d7 7 filled by output values (1) and upsampled these maps through CNN layers, having the same structure as that used in DARQN model. The upsampled values were decreased to make an attention spot more transparent.\nIn Figures 4 and 5, some examples of highlighted attention regions are depicted. The corresponding game videos are available online 2."}, {"heading": "4 Conclusion and Future Work", "text": "In this paper, we have presented one possible way of integrating attention mechanisms into the structure of Deep Q-Network. To test this model, a series of expirements was conducted on five Atari 2600 games. The results obtained allow us to arrive at conclusion that dispite having less optimized parameters, our model, at least on some Atari games, surpasses the results of the original DQN model, thereby demonstrating a greater generalization ability. Moreover, our attention-based algorithm allows gaining some insights into the logic of agent\u2019s behavior by displaying the regions of the game screen the agent is focusing on when making decisions.\nAttention mechanisms can be considered as an additional filter gate in LSTM that processes structured visual data produced by CNN for the entire image. Therefore, one promising direction of future research would be to apply multi-scale [14] or glimpse [8] visual attention mechanisms to DQN. The simple policy gradient-based algorithm, introduced for training the hard attention DARQN model, has shown a relatively poor level of performance. That is why another auspicious direction of future research would be (i) to test different techniques for reducing stochastic gradient variability [13], (ii) to apply different approaches to training stochastic attention networks [14, 15]."}, {"heading": "Acknowledgments", "text": "We would like to thank Deep Knowledge Venture for financial support. In developing the ideas presented here, we have received helpful input from organizers of DeepHack.Game 2015 hackathon, especially from Sergey Plis (Datalytic Solutions). We also thank Greg Scantlen, CEO CreativeC.com, for letting us work on his private GPU cloud."}], "references": [{"title": "Human-level control through deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Deep recurrent q-learning for partially observable mdps", "author": ["Matthew J. Hausknecht", "Peter Stone"], "venue": "CoRR, abs/1507.06527,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Massively parallel methods for deep reinforcement learning", "author": ["Arun Nair", "Praveen Srinivasan", "Sam Blackwell", "Cagdas Alcicek", "Rory Fearon", "Alessandro De Maria", "Vedavyas Panneershelvam", "Mustafa Suleyman", "Charles Beattie", "Stig Petersen"], "venue": "arXiv preprint arXiv:1507.04296,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Deep reinforcement learning with double q-learning", "author": ["Hado van Hasselt", "Arthur Guez", "David Silver"], "venue": "arXiv preprint arXiv:1509.06461,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "Jurgen Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1997}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Aaron Courville", "Ruslan Salakhutdinov", "Richard Zemel", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1502.03044,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Recurrent models of visual attention", "author": ["Volodymyr Mnih", "Nicolas Heess", "Alex Graves", "koray kavukcuoglu"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Multiple object recognition with visual attention", "author": ["Jimmy Ba", "Volodymyr Mnih", "Koray Kavukcuoglu"], "venue": "In Proceedings of the International Conference on Learning Representations (ICLR),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "Learning where to attend with deep architectures for image tracking", "author": ["Misha Denil", "Loris Bazzani", "Hugo Larochelle", "Nando de Freitas"], "venue": "Neural computation,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1409.0473,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "author": ["Ronald J Williams"], "venue": "Machine learning,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1992}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["Richard S. Sutton", "David Mcallester", "Satinder Singh", "Yishay Mansour"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2000}, {"title": "Highdimensional continuous control using generalized advantage estimation", "author": ["John Schulman", "Philipp Moritz", "Sergey Levine", "Michael Jordan", "Pieter Abbeel"], "venue": "arXiv preprint arXiv:1506.02438,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "Learning wake-sleep recurrent attention models", "author": ["Jimmy Ba", "Roger Grosse", "Ruslan Salakhutdinov", "Brendan Frey"], "venue": "arXiv preprint arXiv:1509.06812,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Gradient estimation using stochastic computation graphs", "author": ["John Schulman", "Nicolas Heess", "Theophane Weber", "Pieter Abbeel"], "venue": "arXiv preprint arXiv:1506.05254,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "The recent success of Deep Q-Learning (DQL) in mastering human-level control policies on a variety of different Atari 2600 games [1] inspires artificial intellegence researchers to seek possible improvements to Google DeepMind\u2019s algorithm in order to further enhance its learning abilities [2, 3, 4].", "startOffset": 129, "endOffset": 132}, {"referenceID": 1, "context": "The recent success of Deep Q-Learning (DQL) in mastering human-level control policies on a variety of different Atari 2600 games [1] inspires artificial intellegence researchers to seek possible improvements to Google DeepMind\u2019s algorithm in order to further enhance its learning abilities [2, 3, 4].", "startOffset": 290, "endOffset": 299}, {"referenceID": 2, "context": "The recent success of Deep Q-Learning (DQL) in mastering human-level control policies on a variety of different Atari 2600 games [1] inspires artificial intellegence researchers to seek possible improvements to Google DeepMind\u2019s algorithm in order to further enhance its learning abilities [2, 3, 4].", "startOffset": 290, "endOffset": 299}, {"referenceID": 3, "context": "The recent success of Deep Q-Learning (DQL) in mastering human-level control policies on a variety of different Atari 2600 games [1] inspires artificial intellegence researchers to seek possible improvements to Google DeepMind\u2019s algorithm in order to further enhance its learning abilities [2, 3, 4].", "startOffset": 290, "endOffset": 299}, {"referenceID": 4, "context": "The goal of this concise paper is to present the authors\u2019 approach to addressing this challenge by providing DQN, a deep neural network used in DQL as an analogue of a classic actionutility function, with such tools of modern machine learning as Long Short-Term Memory (LSTM) [5] and visual attention mechanisms [6, 7, 8].", "startOffset": 276, "endOffset": 279}, {"referenceID": 5, "context": "The goal of this concise paper is to present the authors\u2019 approach to addressing this challenge by providing DQN, a deep neural network used in DQL as an analogue of a classic actionutility function, with such tools of modern machine learning as Long Short-Term Memory (LSTM) [5] and visual attention mechanisms [6, 7, 8].", "startOffset": 312, "endOffset": 321}, {"referenceID": 6, "context": "The goal of this concise paper is to present the authors\u2019 approach to addressing this challenge by providing DQN, a deep neural network used in DQL as an analogue of a classic actionutility function, with such tools of modern machine learning as Long Short-Term Memory (LSTM) [5] and visual attention mechanisms [6, 7, 8].", "startOffset": 312, "endOffset": 321}, {"referenceID": 7, "context": "The goal of this concise paper is to present the authors\u2019 approach to addressing this challenge by providing DQN, a deep neural network used in DQL as an analogue of a classic actionutility function, with such tools of modern machine learning as Long Short-Term Memory (LSTM) [5] and visual attention mechanisms [6, 7, 8].", "startOffset": 312, "endOffset": 321}, {"referenceID": 1, "context": "In particular, Hausknecht and Stone [2] pointed out that in practice, DQN decides on the next optimal action based on the visual information corresponding to the last four game states encountered by the agent.", "startOffset": 36, "endOffset": 39}, {"referenceID": 0, "context": "[1] was observed.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "According to [1], it takes 12-14 days on a GPU to train the network.", "startOffset": 13, "endOffset": 16}, {"referenceID": 2, "context": "[3] proposed a new massively parallel version of the algorithm geared to address this problem.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "Recent achievements of visual attention models in caption generation [6], object tracking [9, 7], and machine translation [10] have induced the authors of this paper to conduct a series of experiments so as to assess possible benefits from incorporating attention mechanisms into the structure of the \u2217The authors are members of the 5vision team from the hackathon DeepHack.", "startOffset": 69, "endOffset": 72}, {"referenceID": 8, "context": "Recent achievements of visual attention models in caption generation [6], object tracking [9, 7], and machine translation [10] have induced the authors of this paper to conduct a series of experiments so as to assess possible benefits from incorporating attention mechanisms into the structure of the \u2217The authors are members of the 5vision team from the hackathon DeepHack.", "startOffset": 90, "endOffset": 96}, {"referenceID": 6, "context": "Recent achievements of visual attention models in caption generation [6], object tracking [9, 7], and machine translation [10] have induced the authors of this paper to conduct a series of experiments so as to assess possible benefits from incorporating attention mechanisms into the structure of the \u2217The authors are members of the 5vision team from the hackathon DeepHack.", "startOffset": 90, "endOffset": 96}, {"referenceID": 9, "context": "Recent achievements of visual attention models in caption generation [6], object tracking [9, 7], and machine translation [10] have induced the authors of this paper to conduct a series of experiments so as to assess possible benefits from incorporating attention mechanisms into the structure of the \u2217The authors are members of the 5vision team from the hackathon DeepHack.", "startOffset": 122, "endOffset": 126}, {"referenceID": 0, "context": "The whole DARQN model is trained by minimizing a sequence of loss functions: Jt(\u03b8t) = Est,at\u223c\u03c1(\u00b7),rt [(Est+1\u223cE [Yt | st, at]\u2212Q(st, at; \u03b8t)) ], (3) where Yt = rt + \u03b3maxat+1 Q(st+1, at+1; \u03b8t\u22121) is an approximate target value, rt is an immediate reward after taking action at in state st, \u03b3 \u2208 [0, 1] is a discount factor, E is an environment distribution, \u03c1(st, at) is a behaviour distribution selected as -greedy strategy, \u03b8t is a vector of all DARQN weights, including those belonging to the attention network.", "startOffset": 290, "endOffset": 296}, {"referenceID": 0, "context": "[1], namely target network and experience replay.", "startOffset": 0, "endOffset": 3}, {"referenceID": 10, "context": "In order to train a network with stochastic units, the statistical gradient-following algorithm REINFORCE [11] may be used.", "startOffset": 106, "endOffset": 110}, {"referenceID": 7, "context": "In literature [8, 6], there are several successful examples of integrating this algorithm with Deep Learning.", "startOffset": 14, "endOffset": 20}, {"referenceID": 5, "context": "In literature [8, 6], there are several successful examples of integrating this algorithm with Deep Learning.", "startOffset": 14, "endOffset": 20}, {"referenceID": 11, "context": "Then, in the policy gradient approach [12], updates of the policy parameters may be written as: \u2206\u03b8 t \u221d \u2207\u03b8g t log \u03c0g(it | vt, ht\u22121)Rt, (5) where Rt is a future discounted return after the agent selects the attention location it.", "startOffset": 38, "endOffset": 42}, {"referenceID": 12, "context": "The final update rule for the attention network\u2019s parameters has the following form: \u03b8 t+1 = \u03b8 g t + \u03b1\u2207\u03b8g t log \u03c0g(it | vt, ht\u22121)(Gt \u2212 Yt) (6) where the expression Gt \u2212 Yt can be interpreted in terms of advantage function estimation [13].", "startOffset": 233, "endOffset": 237}, {"referenceID": 6, "context": "Training (6) can also be described [7] as adjusting the parameters \u03b8 t of the attention network so that the log-probability of attention location it that has led to a higher expected future reward is increased, while that of locations having produced a lower reward is decreased.", "startOffset": 35, "endOffset": 38}, {"referenceID": 5, "context": "In order to reduce a high variance of the stochastic gradient, a practical trick proposed in [6] is utilized.", "startOffset": 93, "endOffset": 96}, {"referenceID": 0, "context": "[1] and implemented in Torch, (ii) DRQN suggested by Hausknecht and Stone [2] and implemented in Caffe.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[1] and implemented in Torch, (ii) DRQN suggested by Hausknecht and Stone [2] and implemented in Caffe.", "startOffset": 74, "endOffset": 77}, {"referenceID": 0, "context": "Our realization of DARQN is based on the source code [1] and is available online 1.", "startOffset": 53, "endOffset": 56}, {"referenceID": 0, "context": "The convolutional network architecture in DARQN is similar to that used in [1], except for two peculiarities: its input is a 84 \u00d7 84 \u00d7 1 tensor, and the output of its last (third) layer contains 256 feature maps 7\u00d7 7.", "startOffset": 75, "endOffset": 78}, {"referenceID": 13, "context": "Therefore, one promising direction of future research would be to apply multi-scale [14] or glimpse [8] visual attention mechanisms to DQN.", "startOffset": 84, "endOffset": 88}, {"referenceID": 7, "context": "Therefore, one promising direction of future research would be to apply multi-scale [14] or glimpse [8] visual attention mechanisms to DQN.", "startOffset": 100, "endOffset": 103}, {"referenceID": 12, "context": "That is why another auspicious direction of future research would be (i) to test different techniques for reducing stochastic gradient variability [13], (ii) to apply different approaches to training stochastic attention networks [14, 15].", "startOffset": 147, "endOffset": 151}, {"referenceID": 13, "context": "That is why another auspicious direction of future research would be (i) to test different techniques for reducing stochastic gradient variability [13], (ii) to apply different approaches to training stochastic attention networks [14, 15].", "startOffset": 230, "endOffset": 238}, {"referenceID": 14, "context": "That is why another auspicious direction of future research would be (i) to test different techniques for reducing stochastic gradient variability [13], (ii) to apply different approaches to training stochastic attention networks [14, 15].", "startOffset": 230, "endOffset": 238}], "year": 2015, "abstractText": "A deep learning approach to reinforcement learning led to a general learner able to train on visual input to play a variety of arcade games at the human and superhuman levels. Its creators at the Google DeepMind\u2019s team called the approach: Deep Q-Network (DQN). We present an extension of DQN by \u201csoft\u201d and \u201chard\u201d attention mechanisms. Tests of the proposed Deep Attention Recurrent Q-Network (DARQN) algorithm on multiple Atari 2600 games show level of performance superior to that of DQN. Moreover, built-in attention mechanisms allow a direct online monitoring of the training process by highlighting the regions of the game screen the agent is focusing on when making decisions.", "creator": "LaTeX with hyperref package"}}}