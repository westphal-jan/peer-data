{"id": "1512.09176", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Dec-2015", "title": "Personalized Course Sequence Recommendations", "abstract": "Given the variability in student learning it is becoming increasingly important to tailor courses as well as course sequences to student needs. This paper presents a systematic methodology for offering personalized course sequence recommendations to students. First, a forward-search backward-induction algorithm is developed that can optimally select course sequences to decrease the time required for a student to graduate, or for a student to move from an already low school to an already high school. Second, the algorithm's implementation provides detailed information about the student's time to graduate and provide useful guidance. Third, it creates a more consistent and accessible learning experience by giving students additional insight into the various stages of progress, including how to apply the algorithm. The algorithm's design will help to improve the effectiveness of course sequence recommendations for students, and to improve the effectiveness of course sequence recommendations for students. In order to maximize the value of course sequence recommendations, researchers are required to present multiple course sequences to each student to determine their own learning experience. A comprehensive index of the course sequences to the students's needs for further information is presented in the accompanying online form.", "histories": [["v1", "Wed, 30 Dec 2015 22:57:13 GMT  (498kb)", "http://arxiv.org/abs/1512.09176v1", null], ["v2", "Tue, 12 Jan 2016 01:37:55 GMT  (376kb)", "http://arxiv.org/abs/1512.09176v2", null]], "reviews": [], "SUBJECTS": "cs.CY cs.LG", "authors": ["jie xu", "tianwei xing", "mihaela van der schaar"], "accepted": false, "id": "1512.09176"}, "pdf": {"name": "1512.09176.pdf", "metadata": {"source": "CRF", "title": "Personalized Course Sequence Recommendations", "authors": ["Jie Xu"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n51 2.\n09 17\n6v 1\n[ cs\n.C Y\n] 3\n0 D\nec 2\n01 5\nI. INTRODUCTION\nRecent studies [1][2] find that the vast majority of college students in the United States do not complete college in four years and that fewer college students are today graduating on time than a decade ago. Taking longer to graduate is not cheap - it costs $15,933 more in tuition, fees and living expenses for every extra year at a public two-year college and $22,826 for every added year at a public four-year college [1]. While many factors contribute to students taking longer to graduate, such as credits lost in transfer, uninformed choices due to the low advisor-student ratios and poor preparation for college, the inability of students to take required courses when needed is among the leading causes [1]. If courses are elected and taken myopically, without a clear plan, a student may end up in an awkward situation in which required subsequent courses are offered (much) later, thereby (significantly) prolonging graduation time. To reduce the time-to-graduation, it is therefore of paramount importance for the student to elect courses in a foresighted way by taking into account the possible subsequent course sequences (including which courses are mandatory and which ones are not, and the course prerequisites) and when the various courses are offered. More importantly, because the number and variety (in backgrounds, in knowledge, in goals) of students is expanding rapidly, it is more and more important to tailor course sequences to students since the same learning path is unlikely to best serve all students. Therefore, it is necessary to develop an automated course sequence recommendation system that learns from the performance of previous\nJ. Xu is with the Department of Electrical and Computer Engineering, University of Miami, Coral Gables, FL 33146, USA. Email: jiexu@miami.edu.\nT. Xing and M. van der Schaar are with the Department of Electrical Engineering, University of California, Los Angeles, CA 90095, USA. Emails: twxing@ucla.edu, mihaela@ee.ucla.edu.\nstudents in various courses/sequences and uses what it has learned to adaptively recommend course sequences that are personalized for the current student, depending on the student\u2019s background and his/her completion status of the program in order to maximize any of a variety of objectives including time to graduation, grades and the trade-off between the two. Issuing personalized course sequences recommendations for students poses numerous challenges, some of which are unique to this type of recommendation system:\n\u2022 Sequences Unlike most existing recommendation systems (such as those used to recommend movies or products to purchase), course sequence recommendations requires issuing sequences of courses (items) rather than a single item at a time. Hence, such course sequence recommendations require dealing with a large decision space which grows combinatorially with the number of courses. Searching for the best sequence to make personalized recommendations to a student represents a challenging problem even when the number of courses is moderate. When the number of offered courses is large (as it is typical in academic programs at the undergraduate or graduate level), offering personalized recommendations becomes a very challenge problem. \u2022 Flexibility and Constraints There is a great deal of flexibility in course sequence recommendation since multiple courses can be taken simultaneously. At the same time, course sequence recommendation is also subject to many constraints - some courses are mandatory while some are not, and some courses are prerequisite of others. Both the flexibility and the constraints make course sequence recommendation an extremely complex problem. \u2022 Evolving Recommendation Any static course sequence is sub-optimal since the knowledge, experience and performance of a student develops and evolves in the process of learning. Students may arrive at different completion status of the academic program at a given time depending on their performance in the finished courses and hence, they should be given different recommendations of subsequent courses. \u2022 Personalization An even more difficult challenge is that students vary tremendously in backgrounds, knowledge and goals. As a result, the same recommendation policy is unlikely to best serve all students and provide the best learning experience for every student. However, personalizing course sequence recommendation seems a daunting task since students attend college only once and hence, it is unrealistic to try different course sequences on a student and learn the best course sequence for this student.\n2\nIn this paper, we develop an automated course sequence recommendation system that is able to provide personalized and adaptive recommendation to students depending on their background as well as their evolving performance in the program. In order to reduce complexity and enable tractable solutions, we solve this problem in two steps. The first step (Section III) involves offline learning, in which a set of candidate recommendation policies are determined to minimize the expected time to graduation or maximize the on-time graduation probability using an existing dataset of anonymized student records. A dynamic programming based approach is adopted to solve the adaptive sequence recommendation which recommends subsequent course sequences to students depending on their completion status of the academic program by taking into account the prerequisite relationship among courses and the course availability across academic terms (quarters/semesters). The second step (Section IV) involves online learning, in which for each new student, a suitable course sequence recommendation policy is selected depending on this student\u2019s background using the learned knowledge from the previous students. Online contextual multi-armed bandit techniques are used to develop policy selection algorithms to maximize the students\u2019 grades given the time-tocompletion constraints. To enable fast learning, the algorithm exploits the similarity among students and adaptively clusters students and refines the clustering as more students enter and finish the program. See Figure 1 for a depiction of the system.\nThe main contributions of this paper are as follows:\n\u2022 We formulate the personalized and adaptive course sequence recommendation problem and develop systematic solutions aimed at reducing time to graduation and maximizing students\u2019 grades upon graduation. \u2022 We provide analytical characterizations on the impact of course prerequisite dependency and the course availability on the possible emerging subsequent course sequences as well the structure of the optimal course sequence recommendation policy in certain specific scenarios. \u2022 We rigorously analyze the performance of the online personalized policy selection algorithm and prove that the proposed algorithm converges fast and is able to select the optimal personalized course sequence recommendation policy for students. \u2022 Extensive simulations are carried out on a real-world stu-\ndent record dataset to verify the efficacy of the proposed system. They also reveal how the time-to-graduation is affected by the course prerequisite dependency as well as the course availability across academic terms, thereby providing important insights and guidelines on how to plan the curriculum and allocate teaching resources to improve the on-time graduation ratio.\nThe rest of this paper is organized as follows. In Section II, we review the literature and highlight our contribution. In Section III, we study the offline learning problem to determine a set of candidate course sequence recommendation policies based on dynamic programming. In Section IV, we study the online learning problem to select personalized policies for students based on online contextual multi-armed bandits techniques. Section V provides simulation results. In Section VI, we conclude the paper."}, {"heading": "II. RELATED WORK", "text": "Machine learning for education has recently gained much attention [3][4]. Previous research focuses on grade prediction [5], drop-out prediction [6], personalized teaching styles and materials [7], estimating learners\u2019 knowledge of concepts underlying a domain [8], multimedia and cooperative learning [9] etc. This paper studies the important, yet much less investigated problem of (personalized) course sequence recommendation. Solving this problem has the potentially significant impact of shortening the time that students need to graduate. Methods solving this problem can then be combined with other methods to provide a comprehensive set of tools for personalizing education.\nThere is much work on recommending relevant courses/learning materials to students according to students\u2019 types (e.g. interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16]. Besides course recommendation, there is extensive work on recommender systems for assisting users with finding desirable products or services [17] [18] [19]. However, several unique features of course sequence recommendation make these approaches unsuitable for the considered problem. First, while traditional recommendation systems deal with the problem of recommending items or sets of items, most of them do not take into account prerequisites while recommending an item: a course can be taken only when all its prerequisite courses have been taken and passed. Thus, it does not make sense to recommend to a student a course if the prerequisite courses have not been completed. Secondly, there are complex constraints on the recommendation: the courses taken by a student must satisfy requirements (e.g. take 10 mandatory courses and 5 out of 12 elective courses) in order for the student to graduate. Thirdly, courses are not available in all quarters due to teaching resource constraints. If the next available quarter of a required course is far away from the current quarter, then it might be wiser to take this course earlier rather than later.\nRecommendation with prerequisites was studied in [20], in which the goal is to recommend the best set of k items when there is an inherent ordering between items. Various\n3 prerequisite structures were studied and the complexity of determining the best set is proven to be NP-Hard. Several heuristic approximation algorithms were developed to solve the recommendation problem. However, the problem is formulated as a set recommendation problem rather than a sequential recommendation problem, which ignores the course prerequites, the evolving knowledge of students (and grades so far) as well as the course availability in different quarters.\nRecommendation with complex constraints was studied in [21] where increasingly expressive models were developed to check if the requirements are satisfied and course recommendations were made by taking into account these requirements. However, the course prerequisites and the course availability are not considered. A Markov Decision Process based recommender system was developed in [22] to take into the long-term effects of each recommendation. However, this approach is not able to handle the course prerequisites or the course requirement constraints.\nOur algorithm for online personalized recommendation policy selection builds on the contextual multi-armed bandits methods [23] [24] [25] [26]. Most of the prior work on contextual bandits is focused on an agent making singlestage decisions based on the provided context information. In contrast, in this paper, arms are the course sequence recommendation policies which are selected depending on the student\u2019s background but the policy itself also induces a sequence of decision making depending on the evolving performance of the student."}, {"heading": "III. COURSE SEQUENCE RECOMMENDATION: POLICY CONSTRUCTION", "text": "We consider a curriculum consisting of a set of courses N = {1, 2, ..., N}. Among these courses, there are M mandatory courses and E = N \u2212 M elective courses. We consider a discrete time system where a student takes courses quarter by quarter 1 and can stay in the program for at most T quarters. Quarters are indexed by t = 1, 2, ..., T . Let s(t) be a course state vector of size N which is used to indicate the courses that a student has already taken and passed by the end of quarter t. The first M elements are with respect to the mandatory courses and the remaining E elements are with respect to the elective courses. Each element of s(t) takes a binary value where sn(t) = 1 means that the student has taken and passed course n and sn(t) = 0 otherwise. Initially each student passes zero courses such that each element of s(0) satisfies sn(0) = 0, \u2200n.\nIn each quarter, the maximum number of courses a student can take is C. Let A(t) denote the elected courses in quarter t. However, even though the student is free to elect courses, A(t) must come from a set of feasible courses F(t, s(t\u2212 1)) depending on the index t of the quarter as well as the course state s(t\u2212 1) of the student. Firstly, courses that have already been taken and passed cannot be retaken. Secondly, the student can only take courses that are available in that quarter since a course is usually not offered in every quarter. Let \u0393(t) \u2286 N\n1We use the quarter system for illustration but our approach also works for the semester system.\n!\"#$\n%&'\n()*+\n,-.\n/012\n345\n678 9:\n;<= >?\n@AB CDE\nFGH IJK\nLMN OPQ RST UV WXY Z[\\]\n^_` abc\ndef ghi\njkl mno\npq rs\ntuv\nwx\nyz{ |}~\nFig. 2. The prerequisite graph for the undergraduate program in the Mechanical and Aerospace Engineering department at UCLA.\ndenote the set of available courses offered in quarter t. Thirdly, the student can only take a course when he/she has finished all its prerequisite courses. We formalize course prerequisite in more detail as follows.\nCourse Prerequisite Courses have prerequisite dependencies, namely courses can be elected only when certain prerequisite courses have been taken and passed. In general, the prerequisite dependency can be described as a directed acyclic graph (DAG), denoted by G = \u3008N , E\u3009 where N is the set of courses and E is the set of directed edges. A directed edge m \u2192 n between two courses m and n means that course m is a prerequisite of course n. Let P (n) = {m : m \u2192 n \u2208 E} be the set of prerequisite courses of n. Only when all courses in P (n) have been taken can course n be elected. Note that if P (n) is an empty set, then course n has no prerequisite courses and hence can be elected at any time (whenever available). Moreover, any elective course cannot be the prerequisite course of a mandatory course. Otherwise, the elective course effectively becomes mandatory. Nevertheless, an elective course can be the prerequisite of another elective course. Figure 2 illustrates part of the prerequisite graph for the undergraduate program in the Mechanical and Aerospace Engineering department at UCLA.\nGiven these constraints, the feasible set of courses that a student can take in quarter t given his/her course state s(t\u22121) can be computed as follows:\nF(t, s(t\u2212 1)) = {n :sn(t\u2212 1) = 0;n \u2208 \u0393(t);\n\u2200m \u2208 P (n), sm(t\u2212 1) = 1} (1)\nSince a student cannot take more than C courses per quarter, the possible combinations of courses that can be elected by a student is\nA(t, s(t\u2212 1)) = {A : A \u2286 F(t, s(t\u2212 1)); |A| \u2264 C} (2)\nAt the end of each quarter t, the student either passes or fails the course that he/she takes in this quarter. The probability that a student fails a course depends on the difficulty of the course as well as how many courses that he/she is taking simultaneously in the same quarter, which can be estimated from the student academic record dataset. Denote the probability that the student fails a course n by \u01ebn(k) where k is the number of simultaneous courses. Typically, \u01ebn(k) is a nondecreasing function in k to capture the fact that the student\u2019s effort has to be distributed into multiple courses. Depending on the course performance outcome in this quarter, the course\n4 state will evolve from s(t\u2212 1) to s(t). If the student passes a course n \u2208 A(t), then sn(t) = 1; otherwise, sn(t) remains 0.\nA student graduates when he/she has taken and passed all mandatory courses and at least E0 \u2264 E elective courses before the end of T quarters where E0 is a predefined number by the program. The course states in which the student can graduate are called terminal states, which must satisfy \u2200n = 1, ...,M, sn = 1 and N \u2211\nn=M+1\nsn \u2265 E0. Let S\u0302\nbe the set of all terminal course states. There is a reward function U : S\u0302 \u00d7 {1, ..., T } \u2192 R for each terminal state indicating the reward of reaching the terminal state by a specific quarter. For example, U(s\u0302, t) = 1, \u2200s\u0302 \u2208 S\u0302, \u2200t assigns equal value to all terminal states if the system only cares about whether the student can graduate on time. For another example, U(s\u0302, t) = T \u2212 t + 1, \u2200s\u0302 \u2208 S\u0302 allows the system to take into account the exact time of graduation.\nA course sequence recommendation policy specifies for each course state in any quarter, the next courses that should be taken. Let \u03c0(s, t) denote the courses that are recommended to take in quarter t given the course state s. Given a course sequence recommendation policy \u03c0, starting with any state s in any quarter t, the course state s evolves stochastically (since a student may pass or fail the course with probabilities), thereby inducing a probability distribution over the terminal state that can be reached. Let V (s, t) = \u2211\ns\u0302,\u03c4\u2265t p\u03c0s\u0302,\u03c4 (s, t)U(s\u0302, \u03c4) denote\nthe value of state s in quarter t when policy \u03c0 is adopted where p\u03c0s\u0302,\u03c4 (s, t) is the probability of reaching a terminal state s\u0302 in quarter \u03c4 \u2265 t starting with state s in quarter t. The objective of the system is to determine the optimal policy that maximizes the value of the initial state s(0), i.e. \u03c0\u2217 = argmax\u03c0 V (s(0), 1).\nOur solution to find the optimal policy \u03c0\u2217 consists of two phases. In the first phase, we perform a forward search starting from quarter 1 through quarter T to determine all possible course states that can emerge on the learning path. The purpose of this phase is to reduce the course state space in each quarter that the system should look at. In the second phase, we perform a backward induction starting from quarter T through quarter 1 to compute the optimal set of courses that should be taken in each possible course state. The purpose of this phase is to determine the course sequence recommendation that minimizes the graduation time (or ensure that students graduate before a desired time)."}, {"heading": "A. Forward Search Phase", "text": "Since the number of possible course states grows exponentially with the number of courses in the curriculum, the course state space can be huge for even a moderate number of courses. However, thanks to the course prerequisite constraint and the course availability constraint, the number of course states that can emerge in a particular quarter can be significantly limited. The purpose of the forward search is to determine the possible course states, thereby reducing the problem complexity.\nLet L(t) denote the set of possible course states by the end of quarter t and H(t) denote the set of state-course pairs in quarter t. Initially L(0) = {s(0)}. In each quarter t, the\n(0)L (1)L (2)L(1)H (2)H\nFig. 3. Illustration for Forward Search. Each course state (circle) represents the completion status of the three courses. For instance, 100 means that only the first course is taken and passed. Each state-course pair (rectangle) represents the next courses elected in a given state. For instance, 100/2 means that course 2 is elected as the next course to take in a state 100.\nalgorithm examines each non-terminal course state s(t\u2212 1) \u2208 L(t\u2212 1) and determines the feasible course set F(t, s(t\u2212 1)) for this course state hence the possible combinations of course A(t, s(t \u2212 1)) that can be elected in this quarter. For each combination of courses A \u2208 A(t, s(t \u2212 1)), the state-course pair (s(t\u2212 1), A) is inserted into H(t). Then all possible new course states s(t) with respect to (s(t\u2212 1), A) is included in L(t). Moreover, the probability that s(t\u2212 1) transits to s(t) is computed by\np(s(t)|s(t\u2212 1), A)\n= \u220f\nn:n\u2208A,sn(t)=1\n(1\u2212 \u01ebn(|A|)) \u220f\nn:n\u2208A,sn(t)=0\n\u01ebn(|A|) (3)\nThis algorithm is summarized in Algorithm 1 and is illustrated in Figure 2.\nAlgorithm 1 Forward Search 1: Initialization: L(t) = \u2205,H(t) = \u2205, \u2200t. 2: Initial possible course states L(0) = s(0) = {sn = 0, \u2200n} 3: For quarter t = 1 To quarter T : 4: For each course state s \u2208 L(t\u2212 1) 5: Determine feasible course set F(t, s) and feasi-\nble courses-to-take set A(t, s) 6: For each feasible combinations of courses A \u2208\nA(t, s) 7: Update the current list H(t) \u2190 H(t) \u222a\n(s, A) 8: Update L(t) by adding all possible states 9: End For\n10: End For 11: End For\nNext, we analyze the property of the set L(t) of possible course states.\nLemma 1. For any course prerequisite and course availability constraints, L(t) is weakly expanding, i.e. L(0) \u2286 L(1)... \u2286 L(T ).\n5 Proof. Consider any course state s \u2208 L(t). Since the student can take no course in the subsequent quarter t+1 and hence, the course state remains the same. Therefore, L(t + 1) must at least include s and hence, L(t) \u2286 L(t+ 1).\nLemma 1 states an intuitive result that the possible course states grow over quarters. However, how fast this set grows depend on the specific course prerequisite dependency as well as the course availability. A formal characterization for a general DAG seems extremely complicated; in the proposition below, we determine the growth rate of L(t) for two specific cases.\nProposition 1. Suppose all courses are offered in all quarters and C = 1. (1) If the course prerequisite DAG is a line, then |L(t)| = t. (2) If the course prerequisite DAG is an empty graph (i.e. no prerequisite dependency), then |L(t)| = t \u2211\n\u03c4=0\n(\nN \u03c4\n)\n. (3) For any general prerequisite DAG,\nt \u2264 |L(t)| \u2264 t \u2211\n\u03c4=0\n(\nN \u03c4\n)\n.\nProof. (1) By any quarter t, the student can take and pass at most t courses. The only possible course states that can emerge in quarter t is {1}, {1, 2}, ..., {1, 2, ..., t}. Therefore, there are totally t possible course states.\n(2) In quarter 1, the student can take any one of the N courses or does not take any course. The number of possible states is thus N + 1. If this student passes this course, he/she can take any one of the remaining N \u2212 1 courses or does not take any course in quarter 2. The possible states with two courses passed is (\nN 2\n)\n+ N + 1. Continuing in this way, we obtain the result.\n(3) It is easy to see that (1) and (2) are two extreme cases of a general DAG, therefore, the number of possible states is bounded by t and t \u2211\n\u03c4=0\n(\nN \u03c4\n)\n.\nProposition 1 shows that the possible course states highly depend on the course prerequisite constraints. The number of possible course states grows linearly when the prerequisite is strict while it grows exponentially when the prerequisite is loose. Note that in the above proposition we did not impose any restriction on the course availability. In practice, only a limited number of courses are offered in each quarter, thereby further limiting the size of |L(t)|.\nRemark: L(t) contains all possible course completion states by the end of quarter t if students randomly choose their course sequences. Therefore, L(t) reflects how diverse the students learning experience can be by adopting a specific curriculum. The larger L(t), the more diverse learning experience that students can have by the end of quarter t. A more diverse student learning experience (which is determined by the curriculum but not the course sequence recommendation) has two implications. On one hand, finding the best course sequence to recommend becomes more difficult since the searching space is larger. On the other hand, the best course sequence may yield better learning outcome.\n(0)L (1)L (2)L(1)H (2)H\nFig. 4. Illustration for Backward Induction. The red thick arrow represents the next course elected for each course state."}, {"heading": "B. Backward Induction Phase", "text": "The outcome of the Forward Search phase is actually an AND/OR graph where each course subsequence is a subgraph of the AND/OR graph. In this graph, each OR node represents a course state s \u2208 L(t) in which different possible combinations of subsequence courses can be elected. Each AND node (s, A) corresponds to electing courses A in course state s. The AND node also stores a probability distribution over the possible next states by taking these courses, which is computed by (3). The value of the optimal course sequence recommendation for this AND/OR graph can be computed by a bottom-up sweep through the graph. This computation can be viewed as a backward induction. First, the value of all OR nodes that are non-terminal states and all AND nodes are initialized to 0, and the value of all OR nodes that are terminal states are initialized to the reward of the corresponding terminal states. Next, starting from quarter T , for each quarter t, we update the value of the AND nodes in H(t) using the value of the OR nodes in L(t), i.e. \u2200(s, A) \u2208 H(t),\nQ(s, t, A) = \u2211\ns\u2032\u2208L(t)\np(s\u2032|s, A)V (s\u2032, t) (4)\nWe then update the value of the OR nodes in L(t\u2212 1) using the value of the AND nodes in H(t), i.e. \u2200s \u2208 L(t\u2212 1),\nV (s, t\u2212 1) = max A Q(s, t, A) (5)\nand we record the combinations of courses in the course recommendation policy\n\u03c0\u2217(s, t\u2212 1) = argmax A Q(s, t, A) (6)\nAs mentioned, depending on the choice of the reward function for the terminal course states, different system objectives can be achieved by solving the above problem. The algorithm is summarized in Algorithm 2 and illustrated in Figure 4.\nNext, we analyze the property of the value function V (s, t) and the structure of the optimal policy \u03c0\u2217. We say s \u227a s\u0303 if sn = 1 implies s\u0303n = 1. That is, all courses that are passed in s are also passed in s\u0303.\n6 Algorithm 2 Backward Induction 1: Initialization: \u2200s 6\u2208 s\u0302, V (s, t) = 0, Q(s, t, A) = 0; \u2200s \u2208\ns\u0302, V (s, t) = U(s, t). 2: For quarter t = T To quarter 1 3: For each state and courses-to-take pair s, A \u2208 H(t) 4: Update Q(s, t, A) = \u2211\ns\u2032\u2208L(t) p(s\u2032|s, A)V (s\u2032, t)\n5: End For 6: For each course state s \u2208 L(t\u2212 1) 7: Update value function V (s, t \u2212 1) =\nmaxA Q(s, t, A) 8: Update policy \u03c0(s, t\u22121) = argmaxA Q(s, t, A) 9: End For\n10: End For\nProposition 2. For any t, s and s\u0303, if s \u227a s\u0303, then V (s\u0303, t) \u2265 V (s, t).\nProof. Let A\u2217 be the optimal courses for s, i.e. V (s(t), t) = Q(s(t), t + 1, A\u2217). To prove V (s\u0303(t), t) \u2265 V (s(t), t), we will prove for any A\u2217, we can find A\u0303 \u2208 A(t + 1, s\u0303(t)) such that Q(s\u0303(t), t + 1, A\u0303) \u2265 Q(s(t), t + 1, A\u2217). Since V (s\u0303(t), t) \u2265 Q(s\u0303(t), t+1, A\u0303), we will get V (s\u0303, t) \u2265 V (s, t). The proof uses induction. It is straightforward to see that V (s\u0303, T ) \u2265 V (s, T ) since if s is a terminal state, s\u0303 must also be a terminal state. Suppose the claim holds for all t+ 1, ..., T .\nCase 1: A\u2217 \u2208 A(t + 1, s\u0303(t)). In this case, we let A\u0303 = A\u2217, namely we select the same set of courses for the student to take. Since the courses taken are the same, the probability to pass each of these courses is the same. For each possible next state s\u2032(t+1), there must exist a corresponding next state s\u0303\u2032(t+1) such that p(s\u2032(t+1)|s(t), A\u2217) = p(s\u0303\u2032(t+1)|s\u0303(t), A\u2217). Moreover, s\u2032(t+1) \u227a s\u0303\u2032(t+1). By induction, we have V (s\u2032(t+ 1), t+ 1) \u2264 V (s\u0303\u2032(t+ 1), t+ 1). Therefore,\nQ(s(t), t+ 1, A\u2217)\n= \u2211\ns\u2032(t+1)\np(s\u2032(t+ 1)|s(t+ 1), A\u2217)V (s\u2032(t+ 1), t+ 1)\n= \u2211\ns\u2032(t+1)\np(s\u0303\u2032(t+ 1)|s\u0303(t), A\u2217)V (s\u2032(t+ 1), t+ 1)\n\u2264 \u2211\ns\u0303\u2032(t+1)\np(s\u0303\u2032(t+ 1)|s\u0303(t), A\u2217)V (s\u0303\u2032(t+ 1), t+ 1)\n=Q(s\u0303(t), t+ 1, A\u2217) (7)\nCase 2: A\u2217 6\u2208 A(t+1, s\u0303(t)). In this case, we let A\u0303 to be the largest subset of A\u2217 that belongs to A(t+1, s\u0303(t)). Moreover, since s \u227a s\u0303, the remaining subset of A\u2217 must be courses that have already been passed in s\u0303. Suppose that courses in A\u2217\u2212A\u0303 are passed with probability 1 starting from s(t) and the remaining courses are passed with probability 1 \u2212 \u01ebn(|A\u0303|) > 1 \u2212 \u01ebn(|A\u2217|). Due to induction, such relaxation provides an upper bound on Q(s(t), t + 1, A\u2217). Moreover, this relaxation is the same as\n\u2211\ns\u0303\u2032(t+1)\np(s\u0303\u2032(t+ 1)|s\u0303(t), A\u2217)V (s\u0303\u2032(t+ 1), t+ 1)\n=Q(s\u0303(t), t+ 1, A\u0303) (8)\nThus, Q(s(t), t+ 1, A\u2217) \u2264 Q(s\u0303(t), t+ 1, A\u0303).\nProposition 2 implies that a course state where a larger set of courses have been passed has a higher value since there is more flexibility in choosing subsequent course sequences. A question naturally arises that is it always better to take as many courses as possible in any quarter? The answer turns out to be correct only in certain scenarios. The following proposition identifies one of such scenarios.\nProposition 3. Suppose E = \u2205 (i.e. no prerequisites for all courses) and \u0393(t) = N , \u2200t (i.e. each course is offered in all quarters), if \u01ebn(|A|) = \u01ebn is a constant, then at any t and given state s(t \u2212 1), the optimal policy recommends that the student should take the maximum number of C courses.\nProof. Consider any policy that selects K < C courses in quarter t and a policy that selects these K courses plus one more course n. For any possible next course state s\u2032, by selecting one more course, we have\np(s\u2032|s,K) = p(s\u2032|s,K + 1) + p(s\u0303\u2032|s,K + 1) (9)\nwhere s\u2032 \u227a s\u0302\u2032 and s\u0302\u2032n = 1. Due to the course failure probability being independent, p(s\u2032|s, C) = \u01ebnp(s\u2032|s,K) and p(s\u0303\u2032|s, C) = (1 \u2212 \u01ebn)p(s\u2032|s,K). Since V (s\u0303\u2032) \u2265 V (s\u0303) according to Proposition 2, we have Q(s,K) \u2264 Q(s,K + 1). Therefore, taking C courses yields higher value than taking fewer courses.\nProposition 3 states that it is always better to take many courses as early as possible when there is no constraint on course prerequisite and course availability. In practice, course sequence recommendations are subject to many constraints. We provide a counter-example below to show that the result of proposition 3 does not hold in the general case.\nCounter-Example: Consider a program consisting of two courses and two quarters. Thus N = {1, 2} and T = 2. Assume that there is no prerequisite course dependency, i.e. E = \u2205. The course availability is \u0393(1) = {1, 2} and \u0393(2) = {2}. That is, course 1 is offered only in the first quarter. C = 2 so students are allowed to take up to 2 courses. Let \u01eb(K) denote the probability of failing a course when K courses are taken simultaneously.\n\u2022 Option 1: Take 2 courses in quarter 1. The probability of graduation on time can be computed as (1 \u2212 \u01eb(2))(1 \u2212 \u01eb(2) + \u01eb(2)(1\u2212 \u01eb(1))) = (1\u2212 \u01eb(2))(1 \u2212 \u01eb(2)\u01eb(1)) \u2022 Option 2: Take course 1 only in quarter 1. The probability of graduation on time can be computed as (1\u2212 \u01eb(1))(1\u2212 \u01eb(1)).\nThus if (1\u2212 \u01eb(2))(1\u2212 \u01eb(2)\u01eb(1)) < (1\u2212 \u01eb(1))(1\u2212 \u01eb(1)), then taking only 1 course in the first quarter leads to a higher probability of graduation. For instance, taking \u01eb(1) = 0.1 and \u01eb(2) = 0.2 satisfies this condition. This counter-example demonstrates the need for carefully planning the course sequence according to the course prerequisite and course availability because myopic course selection may lead to lower learning reward if these constraints are ignored.\nRemark: The complexity of the proposed forward-search backward-induction algorithm to determine the optimal policy depends on, the number of courses, the specific course\n7 prerequisite and availability constraints. As shown in Proposition 1, the set of possible course states grow at different speeds depending on these constraints. The time and memory complexity generally depend on the size of L(t) and H(t), namely O( T \u2211\nt=0 (|L(t)|+ |H(t)|)), which can be large in certain\nscenarios. However, since our algorithm in this section is an offline algorithm and only needs to be executed once, complexity is not a big concern.\nC. Implications on Curriculum Planning\nTeaching resources are limited. An important question for curriculum planning is how to allocate the limited available teaching resources to the courses to minimize students\u2019 timeto-graduation. Our framework can be helpful in answering part of this question. The proposition below shows, in a simplified scenario, that courses with many dependent courses should receive more teaching resource in order to minimize the timeto-graduation.\nProposition 4. Consider N + 1 courses and the prerequisite DAG satisfies P (n) = {1}, \u2200n > 1 (i.e. course 1 is the prerequisite course of all other courses). Consider the following two cases of course availability constraints\n\u2022 Case 1: Course 1 is offered in each quarter with probability p < 1 and all other courses is offered in each quarter with probability 1. \u2022 Case 2: Course 2 is offered in each quarter with probability p < 1 and all other courses is offered in each quarter with probability 1.\nAssume C = 1 and if p < 1\u221a N+1 , then the expected graduation time in case 1 is larger than in case 2.\nProof. Since course 1 is the prerequisite of all the other courses, it has to be passed before any other course can be taken.\nCase 1: The expected time to finish course 1 is 1(1\u2212\u01eb)p where \u01eb is the probability of failing a course. The expected time to finish the remaining N courses is N1\u2212\u01eb . Thus, the total expected time to graduate is\n\u03c41 = 1\n(1\u2212 \u01eb)p +\nN\n1\u2212 \u01eb (10)\nCase 2: The expected time to finish course 1 is 1(1\u2212\u01eb) . Computing the expected time to finish the remaining N courses is more complicated since one of the courses has different course availability than others. We consider an upper bound on this time. In particular, this upper bound is\n\u03c42 < 1\n1\u2212 \u01eb +max{\nN \u2212 1\n(1\u2212 \u01eb)(1\u2212 p) ,\n1\n(1 \u2212 \u01eb)p } , \u03c4\u03042 (11)\nDepending on the values of p and N , \u03c4\u0304 can be written as\n\u03c4\u03042 =\n{\n1 1\u2212\u01eb + 1 (1\u2212\u01eb)p , if p \u2264 1 N\n1 1\u2212\u01eb + N\u22121 (1\u2212\u01eb)(1\u2212p) , if p > 1 N\n(12)\nIf p \u2264 1N , it is easy to see that \u03c4\u03042 < \u03c41 and hence \u03c42 < \u03c41. If p > 1N ,\n\u03c41 \u2212 \u03c4\u03042 = 1\n1\u2212 \u01eb\n(\n1 p +N \u2212 1\u2212 N \u2212 1 1\u2212 p\n)\n= 1\n1\u2212 \u01eb\n(1\u2212 p)2 \u2212 p2N\np(1\u2212 p) (13)\nTherefore, if p < 1\u221a N+1 , then \u03c41 > \u03c4\u03042 > \u03c42.\nIt is intuitive to understand that courses that are prerequisites for many other courses are more \u201cimportant\u201d. Subsequent courses can be taken only if the prerequisite course is passed. Therefore, much time will be wasted if students cannot take the prerequisite courses. On the other hand, even if a student needs to but cannot take a course that is not a prerequisite for other courses, he/she can still take other courses while waiting for this course to become available."}, {"heading": "D. Joint Optimization of Time-to-Graduation and GPA Performance", "text": "So far, we focused on constructing course sequence recommendation policies that minimize the time-to-graduation. However, the exact learning performance upon graduation (e.g. GPA) is neglected. Nevertheless, the above dynamic programming based framework can be easily extended to the case of joint optimization of time-to-graduation and GPA performance, provided that a sufficiently large dataset is available to estimate the various model parameters. We elaborate on this point below.\nThe grade that a student can receive in a course often depends on the grades that the student received in the prerequisite courses and perhaps how long ago the prerequisite courses were taken. Thus, the course sequence that the student is taking may have a significant impact on the GPA that he/she can obtain. To account for this effect, we modify the problem formulation: instead of keeping a course completion state, which records the courses that have been taken and passed, we keep a course performance state, which records the grades that the student has received in the passed courses and when these courses were taken. Then for each performance state, the policy tries to find the set of next courses to take in order to maximize an objective function that jointly considers the time of graduation and the obtained final GPA. However, solving this problem requires addressing several key challenges. First, the course performance state space is significantly larger than the course completion state space and grows exponentially with the number of possible grades. In particular, suppose the number of grade levels is K , then the number of all possible states is KN . Second, a huge dataset of student records is needed to estimate the conditional probabilities of grades of each course depending on all possible course performance states. Therefore, solving the optimal course recommendation policy is extremely difficult.\nTo derive efficient solutions without a large initial dataset, we construct course sequence recommendation policies that jointly consider the GPA and time to graduation in two steps. Firstly, we determine a set of course sequence recommendation\n8 policies that satisfy desired time to graduation constraints using our method developed in this section. Since there is a lack of dataset to estimate the course failure probabilities, the course sequence recommendation policy can even be constructed by ignoring the course failure probabilities (i.e. treating \u01ebn \u2192 0, \u2200n). In the second step, we maximize the student GPA by considering only the policies derived in the first step. In particular, we aim to select for each student a personalized policy that most suits this student and results in the highest GPA. We formalize the personalized policy selection problem in the next section.\nRemark: Readers may wonder why there are multiple solutions of course sequence recommendation policies from the first step so that personalization is possible in the second step. A couple of reasons can lead to multiple solutions. First, multiple solutions may occur due to ties, which are more likely to happen when the randomness disappears as \u01ebn \u2192 0. For instance, consider 4 courses {1, 2, 3, 4} and course 1 is the prerequisite of the other three courses. Assume C = 2 and all courses are offered in all quarters, then course sequences 1 \u2192 {2, 3} \u2192 4, 1 \u2192 {2, 4} \u2192 3 and 1 \u2192 {3, 4} \u2192 2 all lead to the same shortest time-to-graduation. Second, instead of keeping only the course sequence recommendation policy that yields the shortest time-to-graduation, the first step of our approach can also generate a set of course sequence recommendation policies that result in on-time graduation."}, {"heading": "IV. ONLINE RECOMMENDATION POLICY PERSONALIZATION", "text": ""}, {"heading": "A. Problem Formulation", "text": "We consider an online setting where students enter the program in sequence. The students are indexed by {1, 2, ..., i, ...}. Students come with different background (e.g. schools from which the students graduated, SAT scores). We use a context vector \u03b8i \u2208 \u0398 to denote the student background where \u0398 = [0, 1]W is the normalized context space with dimension W . We have a set of Z course sequence recommendation policies constructed, denoted by Z , using our method proposed in Section III. These recommendation policies ensure that students will graduate early with high probability. However, the impact of these recommendation policies on the students\u2019 GPA performance is unknown a priori and may be different for students with different backgrounds.\nFor each student i, the system selects one of the Z policies to recommended course sequence to this student. When the student completes the program by following the recommended course sequence, the GPA that he/she obtains is revealed as ri. Let \u00b5z(\u03b8) = E{r|\u03b8} be the expected GPA for the student with background \u03b8 if a recommendation policy z is adopted. If \u00b5z(\u03b8) were known for each policy z, then the policy selection problem would have been simple - selecting z\u2217(\u03b8) = argmaxz \u00b5z(\u03b8) maximizes the expected GPA for this student. However, since the effectiveness of the recommendation policies is unknown a priori, the best policies must be learned for each student.\nLet \u03c3 be an online learning algorithm for policy selection and \u03c3(i) \u2208 Z denote the policy that is used on student i. We\nuse learning regret as the performance metric for a learning algorithm. The learning regret up to student I is defined as the aggregate GPA difference between our learning algorithm and the oracle solution that selects the best policy z\u2217(\u03b8i), \u2200i, i.e.\nReg(I) := E[ I \u2211\ni=1\n\u00b5z\u2217(\u03b8i)(\u03b8i)\u2212 I \u2211\ni=1\nri(\u03c3(i))] (14)\nwhere the expectation is taken with respect to the randomness in grade realization and the selected policies. The regret characterizes the loss incurred due to the unknown system dynamics and gives convergence rate of the total expected GPA of the learning algorithm to the value of the oracle solution. The regret is non-decreasing in the total number of incoming students, but we want it to increase as slow as possible. Any algorithm whose regret is sublinear in I , i.e. Reg(I) = O(I\u03b1) such that \u03b1 < 1, will converge to the optimal solution in terms of the average reward, i.e. lim\nI\u2192\u221e Reg(I) I = 0. The regret\nof learning also gives a measure for the rate of learning. A smaller \u03b1 will result in a faster convergence to the optimal average reward and thus, learning the optimal course sequence recommendation is faster if \u03b1 is smaller."}, {"heading": "B. Context-Aware Adaptive Policy Selection", "text": "A natural way to learn a course sequence recommendation policy\u2019s effectiveness is to record and update the sample mean GPA obtained as students arrive and complete the program by adopting this policy. Using such a sample mean-based approach for policy selection is the basic idea of our learning algorithm. However, major challenges still remain. Without using the context information, we have only learned the average performance of each recommendation policy and thus, a single policy will always be selected. On the other hand, personalizing the policy for each student according to his/her background can be very difficult since the students can have diverse background and hence the context space \u0398 can be huge. The sample mean reward approach can fail to work since there will be very limited number of students who have the same background. Our method to overcome this difficulty is by exploiting the similarity of students based on the assumption that students with similar background will achieve similar expected GPA by following the same course sequence recommendation policy. Our learning algorithm starts with a larger context space to learn the best recommendation policy for this space and then gradually refines the learning by partitioning the context space into smaller spaces.\nBefore we describe the details of our algorithm, we introduce several useful concepts.\n\u2022 Student Cluster. A student cluster is represented by the range of context information that is associated with students in the cluster. In this paper, we consider student clusters that are created by uniformly partitioning the context space on each dimension, which are enough to guarantee sublinear learning regrets. Thus, each student cluster is a W -dimensional hypercube with side length being 2\u2212l for some l. This hypercube represents a level-l student cluster. At any moment\n9\nin time when a recommendation policy is applied to a student i, the algorithm keeps a set of mutually exclusive student clusters that cover the entire student population. We call these student clusters the active student clusters, and denote this set by \u2126. Since the active student clusters evolve (i.e. become more refined) as more students are enrolled and graduate, the active set \u2126i uses a superscript i, which is the student index, to represent its dynamic nature. For instance, in the one-dimensional case, {[0, 1/2), [1/2, 1]} is a feasible set of active student clusters and {[0, 1/4), [1/4, 1/2), [1/2, 3/4), [3/4, 7/8), [7/8, 1]} is another feasible set of active student clusters. Figure 5 illustrates a 2-dimensional student clustering. \u2022 Counters. For each active student cluster C, the algorithm maintains Z counters: for each recommendation policy z \u2208 Z , MC(z) records the number of students so far in which z is applied to. \u2022 GPA Estimates. For each active student cluster, the algorithm also maintains the sample mean GPA estimates r\u0304C(z) for each policy z \u2208 Z using the realized GPA of students that belong to C so far.\nThe algorithm (see Algorithm 3) works as follows. For each student i, the algorithm works in two steps.\n\u2022 Policy Selection Step. When an student arrives, the algorithm first checks which active student cluster C \u2208 \u2126i\nit belongs to. Then it investigates counter MC(z) for all z \u2208 Z to see if there exists any under-explored policy such that MC(z) \u2264 \u03b3(i, l) where \u03b3(i, l) is a deterministic control function depending on the index of the student i and the level of the student cluster l. If there exists such an under-explored policy z, then the algorithm uses this policy to recommend course sequence for this student i. If there does not exist any under-explored policy, then the algorithm selects the policy with the highest GPA estimate for the cluster C, i.e. argmaxz r\u0304C(z). \u2022 Variable Update Step. After the student completes the program and the GPA is realized, the GPA estimate of the selected policy is updated. Moreover, if the number of students in the student cluster C satisfies \u2211\nz MC(z) \u2265 \u03b6(l)\nwhere \u03b6(l) is a deterministic control function depending on the level of student cluster, the current student cluster C is partitioned into 2W level-(l + 1) smaller student clusters. For the next student on, C is deactivated and\nthe new level-(l+ 1) student clusters are activated.\nRemark: In the policy selection step, the algorithm may select an under-explored policy for a student. The purpose of this exploration is to learn the effectiveness of every policy with high confidence. However, this exploration does raise fairness issues for some students. There are a couple of solutions that can be used to address this \u201cunfair\u201d policy selection issue. First, the policy selection is merely a recommendation, students can still freely choose whichever course sequence they want to follow. Second, rewards mechanisms can be designed to incentivize students to follow the recommended policy. For example, students who follow an under-explored policy can enjoy a lower tuition or receive some form of compensation through some special fellowship.\nAlgorithm 3 Policy Selection and Adaptive Clustering 1: Initialize \u2126 = \u0398, r\u0304\u0398(z) = 0,M\u0398(\u03c0) = 0, \u2200z \u2208 Z . 2: for each student i do 3: Determine active cluster C \u2208 \u2126i such that \u03b8i \u2208 C 4: Case 1: \u2203z \u2208 Z such that MC(z) \u2264 \u03b3(i, l) 5: Randomly select among such policies \u03c3i = z 6: Case 2: \u2200z \u2208 Z , MC(z) > \u03b3(i, l) 7: Select \u03c3t = argmin\nz\u2208Z r\u0304C(z).\n8: Set MC(\u03c3i) \u2190 MC(\u03c3i) + 1 9: (The student GPA ri is realized.)\n10: Update r\u0304C(\u03c3t) 11: if \u2211\nz MC(z) \u2265 \u03b6(l) then 12: Uniformly partition C into 2W level-(l+1) student\nclusters. 13: Update the set of active clusters \u2126i. 14: Update the counters and GPA estimates for all new\nstudent clusters 15: endif 16: endfor"}, {"heading": "C. Control Function Determination", "text": "In this subsection, we determine the control function \u03b3(i, l) and \u03b6(l) and evaluate the performance of the policy selection algorithm. The following assumption on student similarity is needed for the regret analysis but not needed in the algorithm.\nAssumption 1. (Student Similarity). For each policy z \u2208 Z , there exists \u03b1 > 0 such that for all \u03b8, \u03b8\u2032 \u2208 \u0398, we have |\u00b5\u03b8(z)\u2212 \u00b5\u03b8\u2032(z)| \u2264 \u2016\u03b8, \u03b8 \u2032\u2016\u03b1.\nThe above assumption states that if the student background (i.e. context) is similar, then the expected GPA by using the same course sequence recommendation policy is also similar.\nProposition 5. By setting \u03b3(i, l) = 22\u03b1l ln i and \u03b6(l) = A2pl, the learning regret for students up to I is\nReg(I) \u2264 lmax(I) \u2211\nl=1\n[Sl(I)Z2 2\u03b1l ln I\n+Yl(I)(Z\n\u221e \u2211\ni=1\ni\u22122 +A(2W\u03b1/2 + 2)2(p\u2212\u03b1)l)] (15)\n10\nwhere Yl(I) is the number of level-l student clusters that are activated at student I , Sl(I) is the number of level-l active student clusters at student I and lmax(I) is the maximum level of student clusters at student I .\nProof. We break down the learning regret into three parts Reg(I) = Reg1(I) + Reg2(I) + Reg3(I) that are respective regrets due to exploration, selection of suboptimal policies in exploitation and selection of near-optimal policies in exploitation. For each of these three parts we can provide a bound. In particular, Reg1(I) can be bounded by lmax(I) \u2211\nl=1\n[Sl(I)Z2 2\u03b1l ln I] since the number of exploration steps\nincreases sublinearly in I . Reg2(I) can be bounded by Yl(I)Z \u221e \u2211\ni=1\ni\u22122 since the probability of choosing a suboptimal\npolicy in exploitation steps decreases sufficiently rapidly using a Chernoff-Hoeffding bound. Reg3(I) can be bounded by Yl(I)A(2W\n\u03b1/2+2)2(p\u2212\u03b1)l since the marginal cost of selecting a near-optimal policy decreases sufficiently rapidly.\nCorollary 1. If the student context arrivals by student I is uniformly distributed, we have\nReg(I) < I 2\u03b1+W 3\u03b1+W [Z(ln I +\n\u221e \u2211\ni=1\ni\u22122) + (W\u03b1/2 + 2)22\u03b1+W ]\n(16)\nAs we can see, the regret bound is sublinear in the number of students I and hence, if I is sufficiently large, then the average regret will be close to 0, which means that the optimal average GPA is achieved."}, {"heading": "V. EXPERIMENTS", "text": "In this section, we apply the forward-search backwardinduction method presented in Section III, and the regret minimization learning algorithm developed in Section IV to our dataset."}, {"heading": "A. Dataset", "text": "Our experiments are based on a dataset from the undergraduate curriculum of the Mechanical and Aerospace Engineering (MAE) department at UCLA. The dataset contains the course sequences and the course grades of 1444 anonymized students who graduated between the academic years 2013 and 2015. The course availability varies across years; typically, a course is offered either once or twice every academic year but some courses are offered once every two years. UCLA adopts the quarter system and in each academic year and courses are mostly offered in Fall, Winter, Spring quarters but not Summer quarters. Therefore, we will consider that one academic year consists of three quarters (hence, four academic years equal 12 quarters).\nThe dataset also includes context information of the students, including their SAT scores and their high school GPAs. We observe that many students in the dataset take courses outside of the curriculum (such as the art courses). Our model can be extended to capture this possibility with added model complexity but our experiment in this paper does not consider\nthe recommendation of such courses. Some of the students in the dataset are transfer students, and they do not need to take the same number of courses as the regular students, since they may have fulfilled several requirements before coming to UCLA. Since the course information before the transferring is not included in this dataset, we exclude such transfer students from our analysis. Figure 6 shows the graduation time distribution of the students in the dataset. As we can see, even though the majority of students graduate on time within the desired four years (12 quarters), many students do not graduate on time and stay in the college for one or even two more years. There is also a noticeable difference in the graduation time distributions for students with different context information: students with higher math SAT scores have a higher probability to graduate on time. This suggests that personalization based on the students\u2019 context information has indeed the potential to provide better learning experience and lead to better learning outcomes.\nB. Impact of constraints\nIn this subsection we illustrate how course prerequisite and availability reduce the number of possible course sequence recommendations for students in MAE department at UCLA. Figure 2 in Sec. III depicts the prerequisite DAG of the 19 courses used for analysis. Most of these courses are math, physics, and core MAE major courses. Generally speaking, math courses are prerequisites of physics courses which are further prerequisites of MAE major courses. We consider two cases of course availability constraints. In the first case, most courses are offered twice every academic year and in the second case, most courses are offered once every academic year. This allows us to investigate the impact of course availability on course sequence recommendation. We focus on how to recommend course sequences to complete these 19 courses as soon as possible.\nFirst, we investigate the possible course completion states that can emerge. Although there are totally 219 = 524288 possible states, the course prerequisites and availability significantly limit the number of possible states that can emerge. Figure 7 illustrates the number of possible states (i.e. the size of the state set L(t) defined in Section III-A). Interestingly, the course prerequisite constraint limits lim\nt\u2192\u221e L(t) as the quarters\ngo by. In our experiment, there are totally 4880 possible completion states depending on whether the student has taken, passed or failed the course, which are significantly fewer than the possible states without any prerequisite constraints.\n11\nMoreover, the maximal number of possible states are reached within a finite number of quarters. On the other hand, the course availability constraint affects how fast the set L(t) expands and reaches its maximal size. When courses are offered less frequently, L(t) expands more slowly but will eventually reach the maximal size."}, {"heading": "C. Course sequences", "text": "In this subsection, we apply the forward-search backwardinduction algorithm presented in Sec. III to compute candidate course sequence recommendation policies to students to complete the 19 courses presented in Sec. V-C. Although the course difficulty varies across courses, for illustrative purposes, we set the course failure ratio to be the same \u01eb = 0.1 for all courses. Indeed, common practice tells us that teachers often curve the students grades so that the passing ratios of courses do not vary significantly across courses. Table I and II show the best sequences that can be obtained for the two course availability cases when the student does not fail any course. It is worth noting that while some courses are taken after some others in the first case, the order can be reversed in the second case due to different course availability constraints. For instance, course CS 31 is taken in the first quarter before courses MATH 31B and MSE 104 in the first cases but it is taken in the third quarter after courses MATH 31B and MSE 104 in the second case. The generated course sequence is also useful for the students to decide when is good time to take extracurricular courses (e.g. the art courses). For instance, a student should focus on the curriculum courses in quarter 1, 3 and 5 since three courses need to be taken in each of these quarters while quarters 4 and 8 are good time for the student to take extracurricular courses that fall in the student\u2019s interest.\nSince students may fail the course, the best course sequence can no longer be followed by a student. Once this happens, it becomes important to determine the subsequent courses to recommend in any possible course completion state. The course sequence recommendation policy generated by our algorithm can provide us with these answers for any course\nfailure ratio. Table III shows the results by running our algorithm aimed at maximizing the on-time graduation probability or minimizing the graduation time for the two course availability cases. When courses are offered more frequently, the expected graduation time is significantly reduced and the on-time graduation probability is significantly improved. The proposed framework can also be used to evaluate different allocations of teaching resources by calculating their expected on-time graduation probability and expected graduation time."}, {"heading": "D. Personalized policy selection", "text": "As mentioned in Sec. IV, depending on the context information of the students, different course sequence recommendation policies may result in different learning experience. The first step of our framework constructs course sequence recommendation policies to minimize time-to-graduation. The second step then personalizes the recommendation according to the students\u2019 context to achieve a high GPA.\nDue to the limited number of student records that we have, we focus on the subsequence recommendation for a subset of 3 MAE major courses (i.e. MAE 101, MAE 103, MAE 105A). From our dataset, we observe that there are six sequences that student use to take these 3 courses. We will use these six typical sequences to validate the proposed personalized policy selection algorithm. Note that we are not using the policies generated in the first step to make course sequence recommendations because the results on the students\n12\nin the dataset cannot be known if they are not aligned with the actual sequences that the students take. Thus, instead of evaluating the joint efficacy of the policy construction and policy selection, we only evaluate the efficacy of the policy selection algorithm in this subsection.\nTable IV shows the statistics regarding these 6 subsequences. As we can see, depending on the context information (i.e. math SAT score) of the students, different course sequences yield different GPA performance. The average GPA of these students is 3.26. The evaluation of the proposed personalized policy selection will use the statistics given in Table IV. We compare the proposed algorithm with several benchmarks:\n\u2022 Oracle: the oracle algorithm knows the GPA statistics a priori and hence always recommends the best course sequence to each student. \u2022 Learning without Personalization: this algorithm does not know the GPA statistics. However, when recommending course sequences, it ignores the context information of the students. \u2022 Random: this algorithm simply recommends course sequence to students randomly.\nFigure 8 shows the average GPA that the students can obtain as the proposed algorithm recommends course sequences to more students. Initially, the achievable GPA is low since the algorithm does not have sufficient training samples. As more training samples are provided, the performance of the algorithm improves, causing an increase in the simulated GPA for the selected course sequence. Moreover, the algorithm adaptively clusters the students according to their context information and significantly outperforms sequence recommendation that ignores the personalized context information. It is noteworthy that the Random scheme achieves a similar GPA as the actual average GPA in the dataset (i.e. 3.26). This suggests that the current practice of course sequence selection does not recognize the difference in individual students and hence, there is much room to improve the students\u2019 learning outcomes by personalizing the course sequences recommended to students."}, {"heading": "VI. CONCLUSION", "text": "In this paper, we studied the problem of personalized course sequence recommendation. The problem is solved in two steps. In the first step, we determine candidate course sequence recommendation policies that result in short time-to-graduation\nusing a Forward-Search Backward-Induction algorithm. In the second step, we develop an online regret minimization learning algorithm to select personalized course sequence recommendation policies among the candidate policies for students aimed at maximizing students\u2019 GPA performance. Our analysis and simulation results show that the proposed personalized course sequence recommendation method is able to shorten the students\u2019 graduation time and improve students\u2019 GPAs. Our framework also has important implications on how the curriculum planner should design the curriculum and allocate teaching resources."}, {"heading": "ACKNOWLEDGMENT", "text": "The authors are indebted to Mr. John S. Toledo, Research Associate, Evaluation and Educational Assessment, UCLA Office of Instructional Development for providing us the data based on which our methods were evaluated."}], "references": [{"title": "Degree attainment rates at american colleges and universities: Revised edition", "author": ["A.W. Astin", "L. Oseguera"], "venue": "Higher Education Research Institution, University of California Los Angeles, 2005.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2005}, {"title": "Open education: New opportunities for signal processing", "author": ["R. Baraniuk"], "venue": "Acoustics, Speech and Signal Processing (ICASSP), 2015 IEEE International Conference on.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "Big education: Opportunities for big data analytics", "author": ["L. Cen", "D. Ruta", "J. Ng"], "venue": "Digital Signal Processing (DSP), 2015 IEEE International Conference on, July 2015, pp. 502\u2013506.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Predicting grades", "author": ["Y. Meier", "J. Xu", "O. Atan", "M. van der Schaar"], "venue": "Signal Processing, IEEE Transactions on, vol. PP, no. 99, pp. 1\u20131, 2015.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "etutor: Online learning for personalized education", "author": ["C. Tekin", "J. Braun", "M. van der Schaar"], "venue": "Acoustics, Speech and Signal Processing (ICASSP), 2015 IEEE International Conference on, April 2015, pp. 5545\u20135549.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "Sparse factor analysis for learning and content analytics", "author": ["A.S. Lan", "A.E. Waters", "C. Studer", "R.G. Baraniuk"], "venue": "The Journal of Machine Learning Research, vol. 15, no. 1, pp. 1959\u20132008, 2014.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1959}, {"title": "Multimedia and cooperative learning in signal processing techniques in communications", "author": ["A. Asif"], "venue": "Signal Processing Letters, IEEE, vol. 11, no. 2, pp. 278\u2013281, 2004.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "Elearning personalization based on hybrid recommendation strategy and learning style identification", "author": ["A. Klasnja-Milicevic", "B. Vesin", "M. Ivanovic", "Z. Budimac"], "venue": "Computers & Education, vol. 56, no. 3, pp. 885\u2013899, 2011.  13", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Personalized e-learning system using item response theory", "author": ["C.-M. Chen", "H.-M. Lee", "Y.-H. Chen"], "venue": "Computers & Education, vol. 44, no. 3, pp. 237\u2013255, 2005.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}, {"title": "Effective e-learning recommendation system based on self-organizing maps and association mining", "author": ["D. Wen-Shung Tai", "H.-J. Wu", "P.-H. Li"], "venue": "The Electronic Library, vol. 26, no. 3, pp. 329\u2013344, 2008.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2008}, {"title": "Social navigation support in a course recommendation system", "author": ["R. Farzan", "P. Brusilovsky"], "venue": "Adaptive hypermedia and adaptive webbased systems. Springer, 2006, pp. 91\u2013100.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2006}, {"title": "Using association rules for course recommendation", "author": ["N. Bendakir", "E. Aimeur"], "venue": "Proceedings of the AAAI Workshop on Educational Data Mining, vol. 3, 2006.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "Learning materials recommendation using good learners ratings and content-based filtering", "author": ["K.I. Ghauth", "N.A. Abdullah"], "venue": "Educational Technology Research and Development, vol. 58, no. 6, pp. 711\u2013727, 2010.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Review of personalized recommendation techniques for learners in elearning systems", "author": ["S. Shishehchi", "S.Y. Banihashem", "N.A.M. Zin", "S.A.M. Noah"], "venue": "Semantic Technology and Information Retrieval (STAIR), 2011 International Conference on. IEEE, 2011, pp. 277\u2013281.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "Recommender systems", "author": ["P. Resnick", "H.R. Varian"], "venue": "Communications of the ACM, vol. 40, no. 3, pp. 56\u201358, 1997.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1997}, {"title": "Fab: content-based, collaborative recommendation", "author": ["M. Balabanovi\u0107", "Y. Shoham"], "venue": "Communications of the ACM, vol. 40, no. 3, pp. 66\u2013 72, 1997.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1997}, {"title": "Introduction to recommender systems handbook", "author": ["F. Ricci", "L. Rokach", "B. Shapira"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2011}, {"title": "Evaluating, combining and generalizing recommendations with prerequisites", "author": ["A.G. Parameswaran", "H. Garcia-Molina", "J.D. Ullman"], "venue": "Proceedings of the 19th ACM international conference on Information and knowledge management. ACM, 2010, pp. 919\u2013928.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}, {"title": "Recommendation systems with complex constraints: A course recommendation perspective", "author": ["A. Parameswaran", "P. Venetis", "H. Garcia-Molina"], "venue": "ACM Transactions on Information Systems (TOIS), vol. 29, no. 4, p. 20, 2011.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2011}, {"title": "An mdp-based recommender system", "author": ["G. Shani", "R.I. Brafman", "D. Heckerman"], "venue": "Proceedings of the Eighteenth conference on Uncertainty in artificial intelligence. Morgan Kaufmann Publishers Inc., 2002, pp. 453\u2013460.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2002}, {"title": "Contextual bandits with similarity information", "author": ["A. Slivkins"], "venue": "The Journal of Machine Learning Research, vol. 15, no. 1, pp. 2533\u20132568, 2014.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2014}, {"title": "Efficient optimal learning for contextual bandits", "author": ["M. Dudik", "D. Hsu", "S. Kale", "N. Karampatziakis", "J. Langford", "L. Reyzin", "T. Zhang"], "venue": "arXiv preprint arXiv:1106.2369, 2011.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "The epoch-greedy algorithm for multiarmed bandits with side information", "author": ["J. Langford", "T. Zhang"], "venue": "Advances in neural information processing systems, 2008, pp. 817\u2013824.", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2008}, {"title": "Contextual bandits with linear payoff functions", "author": ["W. Chu", "L. Li", "L. Reyzin", "R.E. Schapire"], "venue": "International Conference on Artificial Intelligence and Statistics, 2011, pp. 208\u2013214.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Recent studies [1][2] find that the vast majority of college students in the United States do not complete college in four years and that fewer college students are today graduating on time than a decade ago.", "startOffset": 18, "endOffset": 21}, {"referenceID": 1, "context": "Machine learning for education has recently gained much attention [3][4].", "startOffset": 66, "endOffset": 69}, {"referenceID": 2, "context": "Machine learning for education has recently gained much attention [3][4].", "startOffset": 69, "endOffset": 72}, {"referenceID": 3, "context": "Previous research focuses on grade prediction [5], drop-out prediction [6], personalized teaching styles and materials [7], estimating learners\u2019 knowledge of concepts underlying a domain [8], multimedia and cooperative learning [9] etc.", "startOffset": 46, "endOffset": 49}, {"referenceID": 4, "context": "Previous research focuses on grade prediction [5], drop-out prediction [6], personalized teaching styles and materials [7], estimating learners\u2019 knowledge of concepts underlying a domain [8], multimedia and cooperative learning [9] etc.", "startOffset": 119, "endOffset": 122}, {"referenceID": 5, "context": "Previous research focuses on grade prediction [5], drop-out prediction [6], personalized teaching styles and materials [7], estimating learners\u2019 knowledge of concepts underlying a domain [8], multimedia and cooperative learning [9] etc.", "startOffset": 187, "endOffset": 190}, {"referenceID": 6, "context": "Previous research focuses on grade prediction [5], drop-out prediction [6], personalized teaching styles and materials [7], estimating learners\u2019 knowledge of concepts underlying a domain [8], multimedia and cooperative learning [9] etc.", "startOffset": 228, "endOffset": 231}, {"referenceID": 7, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 59, "endOffset": 63}, {"referenceID": 8, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 64, "endOffset": 68}, {"referenceID": 9, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 69, "endOffset": 73}, {"referenceID": 10, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 74, "endOffset": 78}, {"referenceID": 11, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 79, "endOffset": 83}, {"referenceID": 12, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 84, "endOffset": 88}, {"referenceID": 13, "context": "interests, knowledge levels, learning styles and feedback) [10] [11] [12] [13] [14] [15] [16].", "startOffset": 89, "endOffset": 93}, {"referenceID": 14, "context": "Besides course recommendation, there is extensive work on recommender systems for assisting users with finding desirable products or services [17] [18] [19].", "startOffset": 142, "endOffset": 146}, {"referenceID": 15, "context": "Besides course recommendation, there is extensive work on recommender systems for assisting users with finding desirable products or services [17] [18] [19].", "startOffset": 147, "endOffset": 151}, {"referenceID": 16, "context": "Besides course recommendation, there is extensive work on recommender systems for assisting users with finding desirable products or services [17] [18] [19].", "startOffset": 152, "endOffset": 156}, {"referenceID": 17, "context": "Recommendation with prerequisites was studied in [20], in which the goal is to recommend the best set of k items when there is an inherent ordering between items.", "startOffset": 49, "endOffset": 53}, {"referenceID": 18, "context": "Recommendation with complex constraints was studied in [21] where increasingly expressive models were developed to check if the requirements are satisfied and course recommendations were made by taking into account these requirements.", "startOffset": 55, "endOffset": 59}, {"referenceID": 19, "context": "A Markov Decision Process based recommender system was developed in [22] to take into the long-term effects of each recommendation.", "startOffset": 68, "endOffset": 72}, {"referenceID": 20, "context": "Our algorithm for online personalized recommendation policy selection builds on the contextual multi-armed bandits methods [23] [24] [25] [26].", "startOffset": 123, "endOffset": 127}, {"referenceID": 21, "context": "Our algorithm for online personalized recommendation policy selection builds on the contextual multi-armed bandits methods [23] [24] [25] [26].", "startOffset": 128, "endOffset": 132}, {"referenceID": 22, "context": "Our algorithm for online personalized recommendation policy selection builds on the contextual multi-armed bandits methods [23] [24] [25] [26].", "startOffset": 133, "endOffset": 137}, {"referenceID": 23, "context": "Our algorithm for online personalized recommendation policy selection builds on the contextual multi-armed bandits methods [23] [24] [25] [26].", "startOffset": 138, "endOffset": 142}], "year": 2017, "abstractText": "Given the variability in student learning it is becoming increasingly important to tailor courses as well as course sequences to student needs. This paper presents a systematic methodology for offering personalized course sequence recommendations to students. First, a forward-search backwardinduction algorithm is developed that can optimally select course sequences to decrease the time required for a student to graduate. The algorithm accounts for prerequisite requirements (typically present in higher level education) and course availability. Second, using the tools of multi-armed bandits, an algorithm is developed that can optimally recommend a course sequence that both reduces the time to graduate while also increasing the overall GPA of the student. The algorithm dynamically learns how students with different contextual backgrounds perform for given course sequences and then recommends an optimal course sequence for new students. Using real-world student data from the UCLA Mechanical and Aerospace Engineering department, we illustrate how the proposed algorithms outperform other methods that do not include student contextual information when making course sequence recommendations.", "creator": "LaTeX with hyperref package"}}}