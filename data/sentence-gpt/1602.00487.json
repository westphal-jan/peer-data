{"id": "1602.00487", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Feb-2016", "title": "Towards a Cognitive Routing Engine for Software Defined Networks", "abstract": "Most Software Defined Networks (SDN) traffic engineering applications use excessive and frequent global monitoring in order to find the optimal Quality-of-Service (QoS) paths for the current state of the network. In this work, we present the motivations, architecture and initial evaluation of a SDN application called Cognitive Routing Engine (CRE) which is able to find near-optimal paths for a user-specified QoS while using a very small monitoring overhead compared to global monitoring which is required to guarantee that optimal paths are found. Smaller monitoring overheads bring the advantage of smaller response time for the SDN controllers and switches which are required for full-scale use such as traffic engineering. The approach uses an interconnecting algorithm to connect multiple controllers with one another using a single, high-end network. The problem of this approach is that the main benefit to an application is to have the lowest latency of an application, whereas the benefits of a smaller response time are very attractive. For example, the data generated on a user-specified QoS is not sufficient to verify that the user-specified QoS is correct on a specific path and thus that the user-specified QoS should be corrected.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 1 Feb 2016 11:56:44 GMT  (293kb,D)", "http://arxiv.org/abs/1602.00487v1", "This is a non-final version of the paper submitted to IEEE ICC 2016"]], "COMMENTS": "This is a non-final version of the paper submitted to IEEE ICC 2016", "reviews": [], "SUBJECTS": "cs.NI cs.AI", "authors": ["frederic francois", "erol gelenbe"], "accepted": false, "id": "1602.00487"}, "pdf": {"name": "1602.00487.pdf", "metadata": {"source": "CRF", "title": "Towards a Cognitive Routing Engine for Software Defined Networks", "authors": ["Frederic Francois"], "emails": ["e.gelenbe}@imperial.ac.uk"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nThe ossification of computer networks due to the use of nonstandardized and closed source protocols between the control and data plane of commercial Network Forwarding Elements (NFEs) has led researchers to develop Software Defined Networks (SDNs) [1] where open and standardized protocols, such as OpenFlow (OF) [2], are used to program the data plane of NFEs. In order to route traffic, SDNs usually make use of routing applications which runs on top of the SDN controller. These routing applications make routing decisions based on network policies and the state of the network but unfortunately, gathering the state of the network is an expensive activity both in terms of processing overhead at the controller and NFEs and control traffic [3]. With this in mind, we develop a new routing application called Cognitive Routing Engine (CRE) which significantly increases the efficiency of the network state gathering process while obtaining enough information about the network to calculate the best paths that meet the Quality of Service (QoS) requirements of the host applications which use them. The design objectives of CRE are: \u2022 the state of the network should be gathered in an efficient\nway, i.e. a minimum number of OF messages should be exchanged between the SDN controller and the NFEs during the gathering process since each OF message has a processing overhead and occupies bandwidth on the control network of the SDN; \u2022 the optimization of the network monitoring process should not lead to worse paths being found by the CRE\nSDN application; \u2022 the use of CRE should not lead to frequent changes in\nthe path chosen by CRE for a given traffic flow, i.e. no frequent oscillations of the path for a given flow by CRE which can increase the control plane processing and bandwidth overhead inside SDNs; \u2022 updates to the flow tables of the NFEs must not have an adverse impact on the traffic being transported by the NFEs. For e.g., no packet loss and forwarding loops when flow tables are updated; and \u2022 the implementation of CRE should be compatible with existing SDN-enabled NFEs so as to enable more network operators to adopt CRE without purchasing new hardware and software, and avoid lengthy standardization processes.\nII. RELATED WORK\nIn current literature, most traffic engineering techniques [4] used in SDN takes the view that SDN provides a global view of the current network state and topology in a logically centralized controller and therefore, optimization can be performed on the network by running different types of global traffic engineering algorithms such as constrained shortest path first. In this paper, we take the view that networks can be large and therefore, it is inefficient to obtain accurate and updated state information for the whole network at a frequency required for effective traffic optimization. This view is supported by the large amount of work that is currently undertaken to reduce the excessive overhead linked with accurate and frequent global monitoring the network [3]. Existing work on network monitoring in SDN can be divided into 2 categories: active and passive monitoring [3]. Active monitoring involves either the actual probing of the network by sending special packets [5] and/or polling the state of the network through OF mechanism, e.g. retrieving the value of OF counters [2], while passive monitoring either only observes the existing SDN behaviour to infer the state of the network, e.g. Packet-In and Flow Removed OF control messages [6], or calculates the network state based on the collected sampled packets [7].\nThe Cognitive Routing Engine developed in this paper is similar to the routing algorithm that is used in Cognitive Packet Networks (CPNs) [8]\u2013[11] but with the significant and\nar X\niv :1\n60 2.\n00 48\n7v 1\n[ cs\n.N I]\n1 F\neb 2\n01 6\nimportant differences that in CPN, each router runs its own routing and learning algorithm for every source-destination pair and QoS requirement and, the routers collect the network state through the use of smart packets and their associated acknowledgment packets. This is in contrast with CRE which runs in a logically centralized manner on top of the SDN controller and uses exclusively OF mechanisms to gather network state. Hence, CRE can be viewed as a SDN-compatible version of CPN and can be used with the large number of SDN-enabled switches that has already been deployed. CPN has been used successful in various settings [12], for e.g., traffic engineering [13], routing in wireless [14] and sensor [15] networks and defence against Denial-of-Service (DoS) attacks [16].\nThe main contribution of this paper is a SDN-compatible CPN application which reduces the amount of network monitoring while maintaining the ability to discover paths which meet the QoS requirements of host applications.\nIII. OVERALL ARCHICTECTURE\nFig. 1 shows where the CRE application is located in the overall SDN architecture and how it interacts with the various other components of a typical SDN deployment.\nA brief description of each component of the overall SDN architecture is provided as follows:\nNetwork Forwarding Elements (NFE)\u2014are SDN-enabled packet switches and use OpenFlow v1.3 [2] as the communication protocol between the control and data plane of the NFEs in this particular instance.\nSDN Controller\u2014a.k.a Network Operating System, is responsible to send and receive OF messages from the NFEs. In addition, the SDN controller typically parses the received OF messages into data structures which can be understood by the different applications running on top of the controller.\nApplications\u2014are pieces of software running on top of the controller which provides specialized network functions such\nas Network Address Transation (NAT) and firewall. In this particular instance, there are 2 applications: \u2022 Link Discovery application\u2014which discovers the data\nplane topology of the network by using the standardized Link Layer Discovery Protocol (LLDP) [17]. A link is defined in this paper as unidirectional. \u2022 CRE application\u2014which efficiently finds and installs new suitable paths in the network as requested by other SDN applications. CRE is made of 3 main modules:\n\u2013 the Cognitive Routing Algorithm Module (CRAM)\u2014which uses Random Neural Networks (RNNs) with Reinforcement Learning (RL) to find network paths which maximize a customizable objective function and therefore, meet the QoS requirements of host applications, \u2013 a Network Monitoring Module (NMM)\u2014which efficiently either uses past network measurements and/or probes and/or poll the network to get the necessary network state information to update the RNNs in the CRAM. \u2013 a Path-to-OF Translator Module (PTM)\u2014which is able to convert the paths found by the CRAM into the appropriate set of OF messages so that paths are either created or updated with minimum inconsistency in the network.\nIV. MESSAGE EXCHANGE SEQUENCE BETWEEN DIFFERENT COMPONENTS OF SDN ARCHITECTURE\nFig. 2 provides an example of the sequence of message exchange between the different components of the SDN architecture when a new flow arrives at the network and paths need to be set up to route the flow through the SDN according to the network policies set by the network operator. A flow in the electrical domain is considered by OF as a collection of packets where the value of a subset of the layer 2 to 4 fields are the same and a new flow is one where there is no rule which matches the flow inside the flow table(s) of the first encountered NFE.\nThe different steps in Fig. 2 are described below:\n\u2022 Step 1: A new flow F1,3 arrives at the NFE N1 which needs to travel to NFE N3. \u2022 Step 2: NFE N1 analyzes the first packet of the flow F1,3 and finds that there is no rule inside its flow table(s) which matches the packet. Therefore, N1 encapsulates the packet into an OF Packet-In message and sends the message to its master SDN controller since the default action for a table-miss event was set to forward the packet to the master controller during the configuration of the NFE. \u2022 Step 3: The master SDN controller receives the OF Packet-In message and parses it into a data structure more suitable for processing by different applications running on top of the SDN controller. The SDN controller notifies and sends the data structure to all SDN applications which have registered with it to receive the OF Packet-In messages. \u2022 Step 4: Notified applications decide if they are interested to perform actions based on the data structure that is sent by the controller. In this particular scenario, the CRE application is the only relevant application which will perform actions due to the new flow F1,3. \u2022 Step 5 & 6: CRE first installs a path for flow F1,3 by calculating the shortest path based on hop count between NFE N1 and N2 by using the network topology discovered by the Link Discovery application. This allows packets to be routed in the network fast without waiting for CRE to collect network measurements and find a path based on RNN which can lead to packet loss. The PTM module of CRE is responsible to implement the new path for flow F1,3 in the NFEs by installing the appropriate OF rules as will be described in Section VII. Next, CRAM finds the most suitable links for a given path request by using RNNs with RL. In order for CRAM to operate, it needs to gather information about the network state, which is the responsibility of the NMM in CRE. The detailed description of how CRAM operates will be given in the following Section V. \u2022 Step 6, 7 & 8: The NMM receives requests from the CRAM for certain characteristics of links in the network so that CRAM can calculate the numeric value of the objective function of the whole path that it has chosen and also updates its RNNs so that it chooses better paths in the future. Currently, NMM can obtain utilization, quality (based on packet loss and frame errors) and delay of the links of the network. NMM can retrieve and calculate link utilization and quality of a given link by using the OF Port Stats Request messages. On the other hand, OF doesn\u2019t have any native ability to obtain the necessary information from the network in order to calculate the packet delay on a link but the SDN controller can send probe packets to obtain a good estimate of packet delays [5]. In addition, NMM is intelligent enough that it does not always query the network for new data but it can use its database of recently gathered data to reply to the requests made by CRAM. This increases the efficiency\nof the network monitoring process for the whole CRE. \u2022 Step 9: CRAM updates its RNNs through reinforcement\nlearning based on the data received from the NMM and will output the best paths found. If paths need to be updated, they are then passed to the PTM. \u2022 Step 10: The PTM is responsible to implement the paths in the NFEs by modifying the flow table(s) of the NFEs in a way which will not lead to packet loss and forwarding loops in the network. This is explained in detail in Section VII.\nV. CRAM: COGNITIVE ROUTING ALGORITHM MODULE\nCRAM is a routing algorithm which is based on Random Neural Network (RNN) with Reinforcement Learning (RL) [8]\u2013[11]. For a given flow, a new RNN is created for each NFE along the path initially found through shortest path routing. A RNN consists of a network of interconnected neurons where each neuron represents one active port of the NFE. The decision of the RNN on which output to use as the next hop can be either exploratory or exploitation. When the RNN is in exploratory mode, it chooses the output port randomly while when the RNN is in exploitation mode, it chooses the neuron which has the highest potential as will be described in the next paragraph. Exploratory mode is chosen with a probablity X%, e.g. 5% [12], of the time and exploitation mode is chosen for the remaining (1\u2212X)% of the time. If the next hop NFE does not currently have a representative RNN for this particular flow, a new RNN is created for it.\nEach neuron has a property called potential and the neuron with the highest potential is selected as the output when the RNN is in exploitation mode and therefore, the most excited neuron determines the next hop NFE of the path. The potential, qi, of neuron i can be calculated by using:\nqi = \u03bb+i\nri + \u03bb \u2212 i\n(1)\nwhere \u03bb+i and \u03bb \u2212 i are respectively the total positive and negative potential that are transferred from other neurons connected to neuron i in the RNN. These total potentials are dependent on both the potential of the neurons themselves and the weights of the links and can be calculated as:\n\u03bb+i = \u2211 j\u2208N qjw + j,i + \u039b + i where j 6= i (2)\n\u03bb\u2212i = \u2211 j\u2208N qjw \u2212 j,i + \u039b \u2212 i where j 6= i\nwhere w+j,i and w \u2212 j,i are respectively the positive and negative weight of the link from the other neurons j in the RNN to the neuron i and N is the set of all neurons in the RNN. \u039b+i and \u039b\u2212i are the fixed rate at which external positive and negative spikes arrives at the neuron respectively. ri is a normalization factor (firing rate in [12]) which is calculated as:\nri = \u2211 j\u2208N [w+i,j + w \u2212 i,j ] where j 6= i (3)\nThe positive w+i,j and negative w \u2212 i,j weight of each link are determined with the help of reinforcement learning. The current exponential averaged value of the objective function Osd[t] of a path with source s and destination d is calculated as follows:\nOsd[t] = \u03b1Osd[t\u2212 1] + (1\u2212 \u03b1)(osd[t]) where 0<\u03b1<1 (4)\nwhere Osd[t\u22121] is the previous value of the objective function, osd[t] is the current value of the objective function and \u03b1 is the exponential average parameter which determines the relative importance of the current value of the objective function compared to the previous values. If the objective function is to be minimized, the reward Rsd[t] of the path is calculated as Rsd[t] = ( Osd[t] )\u22121 . The effect of Rsd[t] on the link weights in all RNNs along the found path depends on whether Rsd[t] is greater or less than a threshold \u03b3sd[t] with \u03b3sd[t] calculated as follows:\n\u03b3sd[t] = \u03b2\u03b3sd[t\u2212 1] + (1\u2212 \u03b2)Rsd[t] where 0<\u03b2<1 (5)\nwhere \u03b2 is the exponential average parameter. If Rsd[t] \u2265 \u03b3sd[t], i.e. the reward of the new path is greater than the threshold and therefore the RNNs have made the right decision, the link weights in each RNN is updated as follows: w+j,i = w + j,i+Rsd[t] and w \u2212 j,k = w \u2212 j,k+ Rsd[t] |N |\u22122 where j \u2208 N and k 6= i. In the first link weight update operation, the positive link weights from other neurons j to the chosen neuron i are increased so that the potential qi of neuron i is increased and the port associated with neuron i is chosen again as output for the next search if the RNN is in exploitation mode. In the second link weight update operation, the negative link weights from neurons j in the RNN to other neurons other than i are then increased so that their potential is decreased with as end result the reduction of the probability that their associated ports will be chosen as output if the RNN is in exploitation mode.\nOn the other hand, if Rsd[t] \u2264 \u03b3sd[t], i.e. the reward of the new path is less than the threshold and therefore the RNNs have made the wrong decision, the link weights in each RNN is updated as follows: w+j,i = w + j,i + Rsd[t] |N |\u22122 and w\u2212j,k = w \u2212 j,k + Rsd[t] where k 6= i. In the first case, the positive link weights from neurons j in the RNN to other neurons other than i are increased so that their potential is increased and it is more likely that one of them will have its associated port chosen as the output during the next search rather than the previously chosen associated port of neuron i. In the second case, the negative link weights from other neurons j to the chosen neuron i are increased so that the potential qi of neuron i is decreased with as end result the reduction of the probability that the port associated with i will be chosen as output during the next search.\nIn order to prevent the link weights W to increase indefinitely, they are re-normalized by first calculating the new r\u2217i by using the updated W values in eq. (3) and updating the link weights as follows: W = W rir\u2217i .\nFurthermore, CRAM keeps a record of the best Z recent paths found for each path request and the best path out of the\nZ paths is used for the actual routing of the traffic flow if the existing path has been active for longer than minimum time period to avoid frequent path fluctuations.\nVI. NMM: NETWORK MONITORING MODULE\nThe Network Monitoring Module (NMM) is responsible for providing to the CRAM and external SDN applications the characteristics of the links that they request. The link characteristics that can currently be monitored and calculated by NMM are: utilization, quality (based on packet loss and frame errors) and delay. It should be noted that NMM cannot directly measure these characteristics but can obtain them after performing operations on measurement information provided by the NFEs and sending probe packets if necessary. The NMM is made of the following components:\n\u2022 Northbound API\u2014allows the NMM to interact with the CRAM and external SDN applications. The characteristics of links can be requested to the NMM and the NMM can also receive information from other SDN applications, for e.g., the links which are active in the network can be received from the Link Discovery application [17]. \u2022 NFEs Database\u2014stores information about the fixed characteristics of NFEs. During the initial contact between the NFEs and the SDN controller, the NFEs send information about their identity and the features that they support by sending OF Features Reply messages [2] (it should be noted that the port description in OF v1.3 [2] is now obtained through the use of OF Port Description Request/Reply messages). The following information are stored: NFE Data Plane Identifier (DPID), and the port number, MAC address and speed (as negotiated between 2 adjacent NFEs) of the different ports of the NFEs. \u2022 Links Database\u2014stores information about the characteristics of each unidirectional link in the SDN. There are 2 types of characteristics stored about the links: fixed and non-fixed. Fixed characteristics of the links are: source NFE DPID s, destination NFE DPID d, source port number at s, destination port number at d and capacity b. The non-fixed characteristics are: operational status, utilization, quality and delay. In addition, each non-fixed characteristic of the link has an associated timestamp field which stores the time when the characteristic was last updated. \u2022 Link Delay Monitoring\u2014sends and receives probe packets in the network in order to measure the delay of a link in a similar way as in [18]. The detailed procedure will be described below. \u2022 OF Statistics Gathering\u2014send (resp. receive) OF Port Stats Requests (resp. Replies) to calculate the utilization and quality of a link. The detailed procedure will be described below. \u2022 Southbound API\u2014allows the NMM to interact with the SDN controller in order to send and receive OF statistics messages as well as probing packets for delay measurements."}, {"heading": "A. Link Delay Monitoring", "text": "A Link Delay Monitoring mechanism based on using only the features that OF [2] provides so that CRE is compatible with OF-enabled NFEs which are already deployed in the field. Since the OF protocol as of [2] does not specify that an OFcompatible NFE can measure and store link delay by itself, it is necessary to make use of probe packets in order to measure and calculate the delay of the link between 2 NFEs. The Link Delay Monitoring mechanism follows the following steps to calculate the link delay between 2 NFEs Ns and Nd with source and destination port Ps and Pd respectively: \u2022 Step 1: An OF Echo Request message (with a specified\ntransaction id xid) along with an OF Barrier Request message is sent to NFE Ns and the time TNs it takes for Ns to reply back with a corresponding OF Echo Reply (identified by the xid value) is measured. The same is done for Nd. \u2022 Step 2: The SDN controller is instructed to send an OF Packet Out message to NFE Ns where the source and destination MAC of the packet is set to the MAC address of the port Ps and port Pd respectively. The MAC addresses are obtained by using an OF Port Description Request message in OF v1.3 [2] during the population of the NFEs Database. The Packet Out message also contains the single action of outputing the packet on the port Ps. The Ethernet protocol type of the packet is set to an arbitrary value, e.g. 0x07c3, so that the SDN controller can identify the packet as a probe packet. The time Tt that it takes for the SDN controller to receive the probe packet from Nd is measured. The delay Dsd between Ns and Nd is calculated as Dsd = Tt \u2212 TNs2 \u2212 TNd 2 \u2022 Step 3: The NMM will instruct the SDN controller to periodically send probe packets as in step 2 above if the link continues to be selected by any RNN for probing. TNs and TNd are periodically measured also since these may change during the network operation."}, {"heading": "B. OF Statistics Gathering", "text": "SDN-enabled NFEs have counters [2] which can count different port characteristics such as sent and received packet and number of received packet with errors per port. This information is retrieved on either a per NFE-basis or port-basis by the SDN controller by sending an OF Port Stats Request message to the relevant NFE with the port number specified if retrieving information on a per-port basis.\nTo retrieve the following characteristic of a link: \u2022 Utilization\u2014is calculated by first obtaining the number\nof transmitted bytes A being sent over a links by sending to the source NFE of the link an OF Port Stats Request message specifying the port number of the source port of the link so that only statistics about this port is retrieved and not for all the ports of the NFE [2]. The utilization U of a link can be calcutated as:\nU = A[t]\u2212A[t\u2212 1]\n\u03b4b (6)\nwhere \u03b4 is the time period between the 2 times at which the number of transmitted bytes A is polled from the NFE. \u03b4 can be adjusted according to the accuracy and overhead required, a smaller \u03b4 will lead to a more accurate U but more overhead in terms of processing and bandwidth used by the control messages. \u2022 Quality\u2014(based on packet loss and frame errors) is calculated by first obtaining the statistics of the source (s, i) and destination (d, i) ports of the link in the same manner as above for utilization. The link quality Q can be calculated by using:\nQ =(As,i \u2212ADroppeds,i \u2212A Error s,i \u2212Rd,i) + (R Dropped d,i +\nRErrord,i ) + (A Dropped s,i +A Error s,i )\n(7)\nwhere As,i, A Dropped s,i and A Error s,i are respectively the total no. of packets transmitted, dropped and containing errors on the transmission pipeline of port i of source NFE s. Rd,i, R Dropped d,i and R Error d,i are respectively the total no. of packets received, dropped and containing errors on the reception pipeline of port i of destination NFE d."}, {"heading": "C. Optimizing the Network Monitoring Process", "text": "The network monitoring process can be optimized through the following: \u2022 the monitoring information is shared between the differ-\nent RNNs by re-using the monitoring information already in the monitoring databases if it is recent. This is different to traditional CPN [11] where each NFE will send smart packets for each of its RNNs to collect network state. This allows CRE to have a worst-case/upper bound on its network monitoring activity that is the same as when the current global SDN traffic engineering applications [4] poll every NFEs in the network. Moreover, CRE runs a global and optimal routing algorithm when it finds itself in a scenario where it is monitoring the whole network. \u2022 the NMM will not repeat the network monitoring if last monitoring was done less than threshold time te ago. te can be seen as a trade-off between having updated network state and overhead associated with network monitoring. In addition, te is an adjustable parameter that can be optimized for e.g., depending on the rate of change of the link characteristic. If the link characteristic is stable, then a longer te can be used [19]. \u2022 OF statistics are stored in the database and reused if appropriate and needed. For e.g., 1 RNN may request the NMM to provide the quality of a link and shortly after, another RNN may request for the utilization of the same link. Since OF returns all the port counters after an OF Port Stats Request message [2], the NMM may have the updated information already in its database without having to poll the involved NFE(s) again.\nVII. PTM: PATH-TO-OF TRANSLATOR MODULE The main objective of the Path-to-OF Translator Module (PTM) is to install and/or update OF flow rules in the network\nso that the traffic flow follows the path chosen by CRAM without any packet loss, forwarding loops and unecessary Packet-In messages being sent to the SDN controller. PTM operates in the following manner if the path is made of 2 or more NFEs: \u2022 New path\u2014OF rules are inserted at the NFEs by starting\nwith the last NFE of the path to the first NFE so that Packet-In are not triggered by the NFEs for flows for which CRAM has already calculated a path. For the last NFE, a rule is added which matches the original flow with the addition of VLAN ID 1. The actions of the rule is to remove the VLAN tag and output the packet to the destination port. Next, the rule with the same match as the previous rule is added to all intermediate NFEs except the first NFEs of the path. The action of the rule is to output to the relevant port as selected by CRAM. Finally, for the first NFE of the path, the rule is to match the orginal flow only with actions being tag the flow packets with VLAN ID 1 with action of forwarding the flow to the output port connected to the next NFE of the path. \u2022 Change existing path\u2014OF rules are inserted for all NFEs except the first NFE as the previous case with the difference that the VLAN ID used is 2 if 1 was previously used for the flow and 1 if 2 was used. The use of VLAN tags is used to avoid conflict between the old and new rules for the same flow. The OF rule for the flow in the first switch is modified so that now it tags the flow packets with the new VLAN ID and outputs the packet to the port connected to the next NFE of the new path. Finally, the old rules in the intermediate and last NFE of the old path are deleted.\nIt should be noted that if the source and destination of the flow is directly connected to the same NFE, CRE does not need to calculate a path, it just inserts a rule which matches the flow with the single action of outputing the flow packets to the port connected to the destination NFE.\nIn order to automatically remove rules for flows with no traffic for the last ti seconds, the idle timeout is set to ti for all the rules inserted in the NFE. The hard timeout is set to 0 so that the network always has a path for a current active flow even if the controller becomes disconnected.\nVIII. EVALUATION\nThe following evaluations scenarios where carried out using the SDN emulator Mininet [20] where custom topology can be deployed with custom delay, bandwidth, packet loss and queue length for each link."}, {"heading": "A. Scenario 1: Delay Detection and Path Switching in illustrative network", "text": "The aim of scenario 1 is to demonstrate CRE finding, monitoring and switching paths in a network where the delay on links can vary. Scenario 1 uses the topology in Fig. 1 where the initial link delays are shown in the figure. When Ping #1 enters the network with source 1 and destination 2, CRE first installs 2 paths G1,2 = H1 \u2192 N1 \u2192 N2 \u2192 H2 and\nG2,1 = H2 \u2192 N2 \u2192 N1 \u2192 H1 based on shortest path based on hop count which also coincidentally gives the paths with the shortest delay with the Ping Round-Trip Time (RTT) of 120ms, the higher RTT for Ping #1 compared to subsequent Pings are due to the overhead of notifying the controller of new flows, calculating paths and inserting rules inside the NFEs. Then CRE starts to monitor the network based on RNN with RL. At time 9s in the experiment, the links from/to N1 to/from N2 L1,2 and L2,1 suffers from increased delay from 25ms to 200ms resulting in the Ping RTT to increase to 420ms. CRE detects this increase in path delays through its monitoring of the network, the first path that is changed is G2,1 where an alternative path G2,1 = H2 \u2192 N2 \u2192 N3 \u2192 N1 \u2192 H1 is found which reduces the Ping RTT to 280ms at Ping #18. Furthermore, the path G1,2 is changed to the G1,2 = H1 \u2192 N1 \u2192 N3 \u2192 N2 \u2192 H2 with the RTT becoming 140ms at Ping #20. These two new paths found by CRE are the optimal one for the new network conditions."}, {"heading": "B. Scenario 2: CRE convergence and monitoring reduction in the GEANT operational network", "text": "The network topology used is GEANT\u2014a European academic network which is made up of 23 Point of Presence (PoP), represented as NFEs in this experiment, and 74 unidirectional links, where the propagation delay of given link is calculated using the line-of-sight distance between the source and destination PoP of the link. The experiment objective is to measure the amount of time and monitoring probes that CRE takes to discover the best path in the network for a given Source-Destination (SD) pair compared to an optimal routing algorithm which probes all the 74 links each time that it probes the network. The experiments are run for 90s with the network being loaded around 20s into the experiment. The monitoring frequency of both CRE and the optimal algorithm is set to 5s\nTABLE I CRE CONVERGENCE VS OPTIMAL\nExp. No. No. of No. of CRE addit- Increase in Optimal CRE ional time CRE Ping RTT\nMonitoring Monitoring over Optimal over Optimal (s) (%)\n1 370 23 32.6 3.80 2 370 69 39.6 0 3 296 43 44.4 2.03 4 370 21 1.01 0 5 370 31 36.5 2.41\nAvg. 355.2 37.4 30.8 1.65\nFig. 4 shows the increase in Ping RTT around 20s when the network is loaded and the decrease in RTT when CRE finds iteratively better paths to route the flow.\nTable. I shows that CRE can reduce by up to 9.5 times the amount of monitoring required to find a best path which is on average only 1.65% worse than the optimal RTT and takes around 30.8s (with a 5s minimum update frequency) more time to find.\nIX. CONCLUSIONS AND FUTURE WORK\nIn this work, we show that CRE is able to find paths which are very close to the optimal ones without incurring a large monitoring overheard. CRE is able to achieve this performance without requiring any modification to already-deployed SDNs which run OpenFlow.\nIt is our intention to further improve the evaluation section of this work by carrying more sophisticated experiments with different CRE parameters, network topologies, traffic conditions, QoS metrics and network events such as link and node failures.\nREFERENCES [1] N. Feamster, J. Rexford, and E. Zegura, \u201cThe road to sdn,\u201d Queue,\nvol. 11, no. 12, pp. 20:20\u201320:40, Dec. 2013.\n[2] (2015, March) Openflow switch specification, version 1.3.5. Open Networking Foundation. [Online]. Available: https://www.opennetworking.org/images/stories/downloads/ sdn-resources/onf-specifications/openflow/openflow-switch-v1.3.5.pdf [3] A. Yassine, H. Rahimi, and S. Shirmohammadi, \u201cSoftware defined network traffic measurement: Current trends and challenges,\u201d Instrumentation Measurement Magazine, IEEE, vol. 18, no. 2, pp. 42\u201350, April 2015. [4] I. F. Akyildiz, A. Lee, P. Wang, M. Luo, and W. Chou, \u201cA roadmap for traffic engineering in sdn-openflow networks,\u201d Computer Networks, vol. 71, no. 0, pp. 1 \u2013 30, 2014. [5] K. Phemius and M. Bouet, \u201cMonitoring latency with openflow,\u201d in Network and Service Management (CNSM), 2013 9th International Conference on, Oct 2013, pp. 122\u2013125. [6] C. Yu, C. Lumezanu, Y. Zhang, V. Singh, G. Jiang, and H. Madhyastha, \u201cFlowsense: Monitoring network utilization with zero measurement cost,\u201d in Passive and Active Measurement, ser. Lecture Notes in Computer Science, M. Roughan and R. Chang, Eds. Springer Berlin Heidelberg, 2013, vol. 7799, pp. 31\u201341. [7] J. Suh, T. Kwon, C. Dixon, W. Felter, and J. Carter, \u201cOpensample: A low-latency, sampling-based measurement platform for commodity sdn,\u201d in Distributed Computing Systems (ICDCS), 2014 IEEE 34th International Conference on, June 2014, pp. 228\u2013237. [8] E. Gelenbe, Z. Xu, and E. Seref, \u201cCognitive packet networks,\u201d in Tools with Artificial Intelligence, 1999. Proceedings. 11th IEEE International Conference on, 1999, pp. 47\u201354. [9] E. Gelenbe, \u201cCognitive packet network,\u201d US Patent 09/680,184, October 12, 2004. [10] E. Gelenbe, R. Lent, and Z. Xu, \u201cDesign and performance of cognitive packet networks,\u201d Perform. Eval., vol. 46, no. 2-3, pp. 155\u2013176, Oct. 2001. [11] E. Gelenbe, R. Lent, A. Montuori, and Z. Xu, \u201cCognitive packet networks: Qos and performance,\u201d in Modeling, Analysis and Simulation of Computer and Telecommunications Systems, 2002. MASCOTS 2002. Proceedings. 10th IEEE International Symposium on, 2002, pp. 3\u20139. [12] G. Sakellari, \u201cThe cognitive packet network: A survey,\u201d The Computer Journal, vol. 53, no. 3, pp. 268\u2013279, 2010. [Online]. Available: http://comjnl.oxfordjournals.org/content/53/3/268.abstract [13] E. Gelenbe and A. Nunez, \u201cTraffic engineering with cognitive packet networks,\u201d in Simulation Series, vol. 35, 2003. [14] E. Gelenbe and R. Lent, \u201cPower-aware ad hoc cognitive packet networks,\u201d Ad Hoc Networks, vol. 2, no. 3, pp. 205 \u2013 216, 2004, quality of service in ad hoc networks. [15] L. Hey, \u201cPower aware smart routing in wireless sensor networks,\u201d in Next Generation Internet Networks, 2008. NGI 2008, April 2008, pp. 195\u2013202. [16] E. Gelenbe, M. Gellman, and G. Loukas, \u201cAn autonomic approach to denial of service defence,\u201d in World of Wireless Mobile and Multimedia Networks, 2005. WoWMoM 2005. Sixth IEEE International Symposium on a, June 2005, pp. 537\u2013541. [17] \u201cIeee standard for local and metropolitan area networks\u2013 station and media access control connectivity discovery,\u201d IEEE Std 802.1AB-2009 (Revision of IEEE Std 802.1AB-2005), pp. 1\u2013204, Sept 2009. [18] A. Iyer, V. Mann, and N. Samineni, \u201cSwitchreduce: Reducing switch state and controller involvement in openflow networks,\u201d in IFIP Networking Conference, 2013, May 2013, pp. 1\u20139. [19] N. Van Adrichem, C. Doerr, and F. Kuipers, \u201cOpennetmon: Network monitoring in openflow software-defined networks,\u201d in Network Operations and Management Symposium (NOMS), 2014 IEEE, May 2014, pp. 1\u20138. [20] B. Lantz, B. Heller, and N. McKeown, \u201cA network in a laptop: Rapid prototyping for software-defined networks,\u201d in Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks, ser. Hotnets-IX. New York, NY, USA: ACM, 2010, pp. 19:1\u201319:6."}], "references": [{"title": "The road to sdn", "author": ["N. Feamster", "J. Rexford", "E. Zegura"], "venue": "Queue, vol. 11, no. 12, pp. 20:20\u201320:40, Dec. 2013.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Software defined network traffic measurement: Current trends and challenges", "author": ["A. Yassine", "H. Rahimi", "S. Shirmohammadi"], "venue": "Instrumentation Measurement Magazine, IEEE, vol. 18, no. 2, pp. 42\u201350, April 2015.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "A roadmap for traffic engineering in sdn-openflow networks", "author": ["I.F. Akyildiz", "A. Lee", "P. Wang", "M. Luo", "W. Chou"], "venue": "Computer Networks, vol. 71, no. 0, pp. 1 \u2013 30, 2014.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Monitoring latency with openflow", "author": ["K. Phemius", "M. Bouet"], "venue": "Network and Service Management (CNSM), 2013 9th International Conference on, Oct 2013, pp. 122\u2013125.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Flowsense: Monitoring network utilization with zero measurement cost", "author": ["C. Yu", "C. Lumezanu", "Y. Zhang", "V. Singh", "G. Jiang", "H. Madhyastha"], "venue": "Passive and Active Measurement, ser. Lecture Notes in Computer Science, M. Roughan and R. Chang, Eds. Springer Berlin Heidelberg, 2013, vol. 7799, pp. 31\u201341.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "Opensample: A low-latency, sampling-based measurement platform for commodity sdn", "author": ["J. Suh", "T. Kwon", "C. Dixon", "W. Felter", "J. Carter"], "venue": "Distributed Computing Systems (ICDCS), 2014 IEEE 34th International Conference on, June 2014, pp. 228\u2013237.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Cognitive packet networks", "author": ["E. Gelenbe", "Z. Xu", "E. Seref"], "venue": "Tools with Artificial Intelligence, 1999. Proceedings. 11th IEEE International Conference on, 1999, pp. 47\u201354.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1999}, {"title": "Cognitive packet network", "author": ["E. Gelenbe"], "venue": "US Patent 09/680,184, October 12, 2004.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "Design and performance of cognitive packet networks", "author": ["E. Gelenbe", "R. Lent", "Z. Xu"], "venue": "Perform. Eval., vol. 46, no. 2-3, pp. 155\u2013176, Oct. 2001.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2001}, {"title": "Cognitive packet networks: Qos and performance", "author": ["E. Gelenbe", "R. Lent", "A. Montuori", "Z. Xu"], "venue": "Modeling, Analysis and Simulation of Computer and Telecommunications Systems, 2002. MASCOTS 2002. Proceedings. 10th IEEE International Symposium on, 2002, pp. 3\u20139.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2002}, {"title": "The cognitive packet network: A survey", "author": ["G. Sakellari"], "venue": "The Computer Journal, vol. 53, no. 3, pp. 268\u2013279, 2010. [Online]. Available: http://comjnl.oxfordjournals.org/content/53/3/268.abstract", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "Traffic engineering with cognitive packet networks", "author": ["E. Gelenbe", "A. Nunez"], "venue": "Simulation Series, vol. 35, 2003.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2003}, {"title": "Power-aware ad hoc cognitive packet networks", "author": ["E. Gelenbe", "R. Lent"], "venue": "Ad Hoc Networks, vol. 2, no. 3, pp. 205 \u2013 216, 2004, quality of service in ad hoc networks.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2004}, {"title": "Power aware smart routing in wireless sensor networks", "author": ["L. Hey"], "venue": "Next Generation Internet Networks, 2008. NGI 2008, April 2008, pp. 195\u2013202.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2008}, {"title": "An autonomic approach to denial of service defence", "author": ["E. Gelenbe", "M. Gellman", "G. Loukas"], "venue": "World of Wireless Mobile and Multimedia Networks, 2005. WoWMoM 2005. Sixth IEEE International Symposium on a, June 2005, pp. 537\u2013541.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2005}, {"title": "Switchreduce: Reducing switch state and controller involvement in openflow networks", "author": ["A. Iyer", "V. Mann", "N. Samineni"], "venue": "IFIP Networking Conference, 2013, May 2013, pp. 1\u20139.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Opennetmon: Network monitoring in openflow software-defined networks", "author": ["N. Van Adrichem", "C. Doerr", "F. Kuipers"], "venue": "Network Operations and Management Symposium (NOMS), 2014 IEEE, May 2014, pp. 1\u20138.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2014}, {"title": "A network in a laptop: Rapid prototyping for software-defined networks", "author": ["B. Lantz", "B. Heller", "N. McKeown"], "venue": "Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks, ser. Hotnets-IX. New York, NY, USA: ACM, 2010, pp. 19:1\u201319:6.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "The ossification of computer networks due to the use of nonstandardized and closed source protocols between the control and data plane of commercial Network Forwarding Elements (NFEs) has led researchers to develop Software Defined Networks (SDNs) [1] where open and standardized protocols, such as OpenFlow (OF) [2], are used to program the data plane of NFEs.", "startOffset": 248, "endOffset": 251}, {"referenceID": 1, "context": "These routing applications make routing decisions based on network policies and the state of the network but unfortunately, gathering the state of the network is an expensive activity both in terms of processing overhead at the controller and NFEs and control traffic [3].", "startOffset": 268, "endOffset": 271}, {"referenceID": 2, "context": "In current literature, most traffic engineering techniques [4] used in SDN takes the view that SDN provides a global view of the current network state and topology in a logically centralized controller and therefore, optimization can be performed on the network by running different types of global traffic engineering algorithms such as constrained shortest path first.", "startOffset": 59, "endOffset": 62}, {"referenceID": 1, "context": "the excessive overhead linked with accurate and frequent global monitoring the network [3].", "startOffset": 87, "endOffset": 90}, {"referenceID": 1, "context": "Existing work on network monitoring in SDN can be divided into 2 categories: active and passive monitoring [3].", "startOffset": 107, "endOffset": 110}, {"referenceID": 3, "context": "Active monitoring involves either the actual probing of the network by sending special packets [5] and/or polling the state of the network through OF mechanism,", "startOffset": 95, "endOffset": 98}, {"referenceID": 4, "context": "Packet-In and Flow Removed OF control messages [6], or calculates the network state based on the collected sampled packets [7].", "startOffset": 47, "endOffset": 50}, {"referenceID": 5, "context": "Packet-In and Flow Removed OF control messages [6], or calculates the network state based on the collected sampled packets [7].", "startOffset": 123, "endOffset": 126}, {"referenceID": 6, "context": "similar to the routing algorithm that is used in Cognitive Packet Networks (CPNs) [8]\u2013[11] but with the significant and ar X iv :1 60 2.", "startOffset": 82, "endOffset": 85}, {"referenceID": 9, "context": "similar to the routing algorithm that is used in Cognitive Packet Networks (CPNs) [8]\u2013[11] but with the significant and ar X iv :1 60 2.", "startOffset": 86, "endOffset": 90}, {"referenceID": 10, "context": "CPN has been used successful in various settings [12], for e.", "startOffset": 49, "endOffset": 53}, {"referenceID": 11, "context": ", traffic engineering [13], routing in wireless [14] and sensor [15] networks and defence against Denial-of-Service (DoS) attacks [16].", "startOffset": 22, "endOffset": 26}, {"referenceID": 12, "context": ", traffic engineering [13], routing in wireless [14] and sensor [15] networks and defence against Denial-of-Service (DoS) attacks [16].", "startOffset": 48, "endOffset": 52}, {"referenceID": 13, "context": ", traffic engineering [13], routing in wireless [14] and sensor [15] networks and defence against Denial-of-Service (DoS) attacks [16].", "startOffset": 64, "endOffset": 68}, {"referenceID": 14, "context": ", traffic engineering [13], routing in wireless [14] and sensor [15] networks and defence against Denial-of-Service (DoS) attacks [16].", "startOffset": 130, "endOffset": 134}, {"referenceID": 3, "context": "doesn\u2019t have any native ability to obtain the necessary information from the network in order to calculate the packet delay on a link but the SDN controller can send probe packets to obtain a good estimate of packet delays [5].", "startOffset": 223, "endOffset": 226}, {"referenceID": 6, "context": "CRAM is a routing algorithm which is based on Random Neural Network (RNN) with Reinforcement Learning (RL) [8]\u2013[11].", "startOffset": 107, "endOffset": 110}, {"referenceID": 9, "context": "CRAM is a routing algorithm which is based on Random Neural Network (RNN) with Reinforcement Learning (RL) [8]\u2013[11].", "startOffset": 111, "endOffset": 115}, {"referenceID": 10, "context": "5% [12], of the time and exploitation mode is chosen for the remaining (1\u2212X)% of the time.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "ri is a normalization factor (firing rate in [12]) which is calculated as:", "startOffset": 45, "endOffset": 49}, {"referenceID": 15, "context": "in a similar way as in [18].", "startOffset": 23, "endOffset": 27}, {"referenceID": 9, "context": "This is different to traditional CPN [11] where each NFE will send smart packets for each of its RNNs to collect network state.", "startOffset": 37, "endOffset": 41}, {"referenceID": 2, "context": "This allows CRE to have a worst-case/upper bound on its network monitoring activity that is the same as when the current global SDN traffic engineering applications [4] poll every NFEs in the network.", "startOffset": 165, "endOffset": 168}, {"referenceID": 16, "context": "If the link characteristic is stable, then a longer te can be used [19].", "startOffset": 67, "endOffset": 71}, {"referenceID": 17, "context": "The following evaluations scenarios where carried out using the SDN emulator Mininet [20] where custom topology can", "startOffset": 85, "endOffset": 89}], "year": 2016, "abstractText": "Most Software Defined Networks (SDN) traffic engineering applications use excessive and frequent global monitoring in order to find the optimal Quality-of-Service (QoS) paths for the current state of the network. In this work, we present the motivations, architecture and initial evaluation of a SDN application called Cognitive Routing Engine (CRE) which is able to find near-optimal paths for a user-specified QoS while using a very small monitoring overhead compared to global monitoring which is required to guarantee that optimal paths are found. Smaller monitoring overheads bring the advantage of smaller response time for the SDN controllers and switches. The initial evaluation of CRE on a SDN representation of the GEANT academic network shows that it is possible to find near-optimal paths with a small optimality gap of 1.65% while using 9.5 times less monitoring.", "creator": "LaTeX with hyperref package"}}}