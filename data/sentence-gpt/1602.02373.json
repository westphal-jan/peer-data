{"id": "1602.02373", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Feb-2016", "title": "Supervised and Semi-Supervised Text Categorization using LSTM for Region Embeddings", "abstract": "One-hot CNN (convolutional neural network) has been shown to be effective for text categorization in our previous work. We view it as a special case of a general framework which jointly trains a linear model with a non-linear feature generator consisting of `text region embedding + pooling'. Under this framework, we explore a more sophisticated region embedding method using Long Short-Term Memory (LSTM) which allows the neural network to be embeddable in any linear context, without having to re-imagine the current location in the model.\n\n\n\n\n\nThe following graph plots the model in each direction:\nThis graph shows the neural network from the neural network from the LSTM embedding procedure. Each model with the LSTM embedding function can be grouped into three subsets of three subtypes:\nThe two subtypes include a simple, simple, linear model with a high-level model that can be modeled with linear model.\nThe two subtypes include a simple, linear model with a high-level model that can be modeled with linear model.\nThe two subtypes include a simple, linear model with a high-level model that can be modeled with linear model.\nThe three subtypes include a simple, linear model with a high-level model that can be modeled with linear model.\nThe three subtypes include a simple, linear model with a high-level model that can be modeled with linear model.\nThe two subtypes include a simple, linear model with a high-level model that can be modeled with linear model.\nIn particular, the LSTM embedding algorithm is very easy to understand.\nWe now have a method to determine which subtype of the network is using and which subtype of the network is using. We use a linear feature generator, which makes finding the network easier by creating subtypes for each of the three subtypes.\nThe above is shown in Figure 1:\nThe LSTM embedding algorithm works in a linear model with a high-level model with a low-level model that can be modeled with linear model.\nUsing the LSTM embedding algorithm, we can now find out which subtype of the network is using.\nWe have a method to determine which subtype of the network is using.\nThe linear feature generator can be found in Figure 2:\nThe LSTM embedding algorithm works in a linear model with a high-level model that can be modeled with linear model", "histories": [["v1", "Sun, 7 Feb 2016 14:05:58 GMT  (206kb,D)", "http://arxiv.org/abs/1602.02373v1", null], ["v2", "Thu, 26 May 2016 15:26:34 GMT  (229kb,D)", "http://arxiv.org/abs/1602.02373v2", null]], "reviews": [], "SUBJECTS": "stat.ML cs.CL cs.LG", "authors": ["rie johnson", "tong zhang 0001"], "accepted": true, "id": "1602.02373"}, "pdf": {"name": "1602.02373.pdf", "metadata": {"source": "CRF", "title": "Supervised and Semi-Supervised Text Categorization using One-Hot LSTM for Region Embeddings", "authors": ["Rie Johnson", "Tong Zhang"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Text categorization is the task of assigning labels to documents written in a natural language, and it has numerous real-world applications including sentiment analysis as well as traditional topic assignment tasks. The state-of-the art methods for text categorization had long been linear predictors (e.g., SVM with a linear kernel) with either bag-ofword or bag-of-n-gram vectors (hereafter bow) as input, e.g., (Joachims, 1998; Lewis et al., 2004). This, however, has changed recently. Non-linear methods that can make effective use of word order have been shown to produce more accurate predictors than the traditional bow-based linear models, e.g., (Dai & Le, 2015; Johnson & Zhang, 2015a;b; Zhang et al., 2015). In particular, let us first focus on one-hot CNN which we proposed in JZ15 (Johnson & Zhang, 2015a;b).\nA convolutional neural network (CNN) (LeCun et al., 1986) is a feedforward neural network with convolution layers interleaved with pooling layers, originally developed for image processing. In its convolution layer, a small region of data (e.g., a small square of image) at every location is converted to a low-dimensional vector with information relevant to the task being preserved, which we loosely term \u2018embedding\u2019. The embedding function is shared among all the locations, so that useful features can be detected irrespective of their locations. In its simplest form, one-hot CNN works as follows. A document is represented as a sequence of one-hot vectors (each of which indicates a word by the position of a 1); a convolution layer converts small regions of the document (e.g., \u201cI love it\u201d) to low-dimensional vectors at every location (embedding of text regions); a pooling layer aggregates the region embedding results to a document vector by taking component-wise maximum or average; and the top layer classifies a document vector with a linear model (Figure 1). The one-hot CNN and its semi-supervised extension were shown to be superior to a number of previous methods.\nIn this work, we consider a more general framework (subsuming one-hot CNN) which jointly trains a feature generator and a linear model, where the feature generator consists of \u2018region embedding + pooling\u2019. The specific region embedding function of one-hot CNN takes the simple form\nv(x`) = max(0,Wx` + b) , (1)\nar X\niv :1\n60 2.\n02 37\n3v 1\n[ st\nat .M\nL ]\n7 F\neb 2\n01 6\nwhere x` is a concatenation of one-hot vectors (therefore, \u2018one-hot\u2019 in the name) of the words in the `-th region (of a fixed size), and the weight matrix W and the bias vector b need to be trained. It is simple and fast to compute, and considering its simplicity, the method works surprisingly well if the region size is appropriately set. However, there are also potential shortcomings. The region size must be fixed, which may not be optimal as the size of relevant regions may vary. Practically, the region size cannot be very large as the number of parameters to be learned (components of W) depends on it. In JZ15 we proposed variations to alleviate these issues. For example, a bow-input variation allows x` above to be a bow vector of the region. This enables a larger region, but at the expense of losing word order in the region and so its usage may be limited.\nIn this work, we build on the general framework of \u2018region embedding + pooling\u2019 and explore a more sophisticated region embedding via Long Short-Term Memory (LSTM), seeking to overcome the shortcomings above, in the supervised and semi-supervised settings. LSTM (Hochreiter & Schmidhuder, 1997) is a recurrent neural network. In its typical applications to text, an LSTM takes words in a sequence one by one; i.e., at time t, it takes as input the t-th word and the output from time t \u2212 1. Therefore, the output from each time step can be regarded as the embedding of the sequence of words that have been seen so far (or a relevant part of it). It is designed to enable learning of dependencies over larger time lags than feasible with traditional recurrent networks. That is, an LSTM can be used to embed text regions of variable (and possibly large) sizes.\nWe pursue the best use of LSTM for our purpose, and then compare the resulting model with the previous best methods including one-hot CNN and previous LSTM. Our strategy is to simplify the model as much as possible, starting with the idea of one-hot LSTM, which eliminates the word embedding layer customarily used to produce input to LSTM. Our findings are three-fold. First, in the supervised setting, elimination of a word embedding layer, combined with other simplifications of the model, leads to higher accuracy and faster training than previous LSTM, and we will explain why. Second, accuracy can be further improved by training one-hot LSTMs on unlabeled data and using them to produce additional input. Third, one-hot LSTM rivals or outperforms one-hot CNN in many cases, proving to be a good alternative, and more interestingly, both strongly outperform other methods including previous LSTM. The best results are obtained by combining these two types of region embeddings, indicating that their strengths are complementary. Overall, our results show that for text categorization, embeddings of text regions, which can convey higher-level concepts than single words in isolation, are more useful than word embeddings, and that useful region embeddings can be learned by working with one-hot vectors directly. We report performances exceeding the previous best results on four benchmark datasets. Our code and experimental details will be made publicly available for further research."}, {"heading": "1.1 Preliminary", "text": "On text, LSTM has been used for labeling or generating words. It has been also used for representing short sentences mostly for sentiment analysis, and some of them rely on syntactic parse trees; see e.g., (Zhu et al., 2015; Tang et al., 2015; Tai et al., 2015; Le & Zuidema, 2015). Unlike these studies, this work as well as JZ15 focuses on classifying general full-length documents without any special linguistic knowledge. Similarly, DL15 (Dai & Le, 2015) applied LSTM to categorizing general full-length documents. Therefore, our empirical comparisons will focus on DL15 and JZ15, both of which reported new state of the art results. Let us first introduce the general LSTM formulation, and\nthen briefly describe DL15\u2019s model as it illustrates the challenges in using LSTMs for this task.\nLSTM While several variations exist, we base our work on the following LSTM formulation, which was used in, e.g., (Zaremba & Sutskever, 2014)\nit = \u03c3(W (i)xt +U (i)ht\u22121 + b (i)) ,\not = \u03c3(W (o)xt +U (o)ht\u22121 + b (o)) ,\nft = \u03c3(W (f)xt +U (f)ht\u22121 + b (f)) ,\nut = tanh(W (u)xt +U (u)ht\u22121 + b (u)) ,\nct = it ut + ft ct\u22121 , ht = ot tanh(ct) ,\nwhere denotes element-wise multiplication and \u03c3 is an element-wise squash function to make the gating values in [0, 1]. We fix \u03c3 to sigmoid. xt is the input from the lower layer. W(\u2217), U(\u2217), and b(\u2217) (\u2217 \u2208 {i, o, f, u}) need to be trained. The centerpiece of LSTM is the memory cells ct, designed to counteract the risk of vanishing/exploding gradients, thus enabling learning of dependencies over larger time lags than feasible with traditional recurrent networks. The forget gate ft (Gers et al., 2000) is for resetting the memory cells. The input gate it and output gate ot control the input and output of the memory cells.\nWord-vector LSTM (wv-LSTM) [DL15] DL15\u2019s application of LSTM to text categorization is straightforward. As illustrated in Figure 2, for each document, the output of the LSTM layer is the output of the last time step (corresponding to the last word of the document), which represents the whole document (document embedding). Like many other studies of LSTM on text, words are first converted to low-dimensional dense word vectors via a word embedding layer; therefore, we call it word-vector LSTM or wv-LSTM. DL15 observed that wv-LSTM underperformed linear predictors and its training was unstable. This was attributed to the fact that documents are long.\nIn addition, we found that training and testing of wv-LSTM is time/resource consuming. To put it into perspective, using a GPU, one epoch of wv-LSTM training takes nearly 20 times longer than that of one-hot CNN training even though it achieves poorer accuracy (the first two rows of Table 1). This is due to the sequential nature of LSTM, i.e., computation at time t requires the output of time t \u2212 1, whereas modern computation depends on parallelization for speed-up. Documents in a mini-batch can be processed in parallel, but the variability of document lengths reduces the degree of parallelization1.\nIt was shown in DL15 that training becomes stable and accuracy improves drastically when LSTM and the word embedding layer are jointly pre-trained with either the language model learning objective (predicting the next word) or autoencoder objective (memorizing the document)."}, {"heading": "2 One-hot LSTM for text categorization", "text": "Within the framework of \u2018region embedding + pooling\u2019 for text categorization, we seek effective and efficient use of LSTM as a new region embedding method, starting with the idea of one-hot LSTM."}, {"heading": "2.1 One-hot LSTM: why is it a good idea?", "text": "We eliminate the word embedding layer used by wv-LSTM (as well as most of previous LSTMs on text) and directly feed one-hot vectors to LSTM, which we call one-hot LSTM. Here we focus on an end-to-end system in a supervised setting so that there is no additional data (e.g., unlabeled data) or additional algorithm (e.g., for learning a word embedding). In this setting, a word embedding layer, if included, needs to be initialized randomly and trained as\n1 (Sutskever et al., 2014) suggested making each mini-batch consist of sequences of similar lengths, but we found that on our tasks this strategy slows down convergence presumably by hampering the stochastic nature of SGD.\npart of the model. As presented later, our experiments show that inclusion of a word embedding layer in this setting degrades model accuracy. But why is that?\nFirst, we note the following. In the LSTM formulas, e.g., ut = tanh(W(u)xt + U(u)ht\u22121 + b(u)), if xt is a one-hot vector representing a word, then W(u)xt serves as a word embedding that converts word i to the i-th column vector of W(u). That is, one-hot LSTM inherently includes a word embedding in its LSTM computation.\nFurther note that a word embedding (or word vector lookup) is a linear operation that can be written as W(w)xt with xt being a one-hot vector and columns of W(w) being word vectors. Therefore, the word embedding layer can be merged into the LSTM layer by multiplying the LSTM weights W(\u2217) (\u2217 \u2208 {i, f, o, u}) by the word embedding matrix W(w). That is, by replacing the LSTM weights W(\u2217) with W(\u2217)W(w) and removing the word embedding layer, a word-vector LSTM can be turned into a one-hot LSTM without changing the model behavior. This means that \u201ca word embedding layer + an LSTM layer\u201d cannot be more expressive than a one-hot LSTM, even though it uses two layers. Thus, having an extra layer of word embedding does not provide better representation power.\nEmpirically, inclusion of a word embedding layer introduces harmful effects by making training (from scratch) harder, even with the help of adaptive learning rates; similar observations were made regarding CNN (Kim, 2014; Johnson & Zhang, 2015a). In the supervised setting, we should thus avoid a separate word embedding layer. If a word embedding was appropriately trained with unlabeled data, then its inclusion is a form of semi-supervised learning and could be useful. However, we have found that learning one-hot LSTMs on unlabeled data is a more effective way to exploit unlabeled data, which we will discuss in Section 3."}, {"heading": "2.2 More simplifications", "text": "Compared with the previously proposed wv-LSTM, we have simplified the model by eliminating the word embedding layer. Now we introduce four more useful modifications (simplifications except for one) that lead to higher accuracy or faster training.\nPooling: simplifying sub-problems Our framework of \u2018region embedding + pooling\u2019 has a simplification effect as follows. In wv-LSTM, the sub-problem that LSTM needs to solve is to represent the entire document by one vector (document embedding). We make this easy by changing it to detecting regions of text (of arbitrary sizes) that are relevant to the task and representing them by vectors (region embedding). As illustrated in Figure 3, we let the LSTM layer emit vectors ht at each time step, and let pooling aggregate them into a document vector. With wv-LSTM, LSTM has to remember relevant information until it gets to the end of the document even if relevant information was observed 10K words away. The task of our LSTM is easier as it is allowed to forget old things via the forget gate and can focus on representing the concepts conveyed by smaller segments such as phrases or sentences. It will be shown that this simplification improves accuracy.\nA related architecture appears in the Deep Learning Tutorials2 though it uses a word embedding. Another related work is (Lai et al., 2015), which combined pooling with non-LSTM recurrent networks and a word embedding.\nChopping for speeding up training In addition to simplifying the sub-problem, pooling has the merit of enabling faster training via chopping. Since we set the goal of LSTM to embedding text regions instead of documents, it is no longer crucial to go through the document from the beginning to the end sequentially. At the time of training, we can chop each document into segments of a fixed length that is sufficiently long (e.g., 50 or 100) and process all the segments in a mini batch in parallel as if these segments were individual documents. (Note that this is done only in the LSTM layer and pooling is done over the entire document.) We perform testing without chopping. That is, we train LSTM with approximations of sequences for speed up and test with real sequences for better accuracy. There is a risk of chopping important phrases (e.g., \u201cdon\u2019t | like it\u201d), and this can be easily avoided by having segments slightly overlap. However, we found that gains from overlapping segments tend to be small and so our experiments reported below were done without overlapping.\n2 http://deeplearning.net/tutorial/lstm.html\nRemoving the input/output gates We found that when LSTM is followed by pooling, the presence of input and output gates typically does not improve accuracy, while removing them nearly halves the time and memory required for training and testing. It is intuitive, in particular, that pooling can make the output gate unnecessary; the role of the output gate is to prevent undesirable information from entering the output ht, and such irrelevant information can be filtered out by max-pooling. Without the input and output gates, the LSTM formulation can be simplified to:\nft = \u03c3(W (f)xt +U (f)ht\u22121 + b (f)) , (2)\nut = tanh(W (u)xt +U (u)ht\u22121 + b (u)) , (3)\nct = ut + ft ct\u22121 , ht = tanh(ct) .\nThis is equivalent to fixing it and ot to all ones. It is in spirit similar to Gated Recurrent Units (Cho et al., 2014) but simpler, having fewer gates.\nBidirectional LSTM for better accuracy The changes from wv-LSTM above substantially reduce the time and memory required for training and make it practical to add one more layer of LSTM going in the opposite direction for accuracy improvement. As shown in Figure 4, we concatenate the output of a forward LSTM (left to right) and a backward LSTM (right to left), which is referred to as bidirectional LSTM in the literature. The resulting model is a one-hot bidirectional LSTM with pooling, and we abbreviate it to oh-2LSTMp. Table 1 shows how much accuracy and/or training speed can be improved by elimination of the word embedding layer, pooling, chopping, removing the input/output gates, and adding the backward LSTM."}, {"heading": "2.3 Experiments (supervised)", "text": "We used four datasets: IMDB3, Elec4, RCV1 (second-level topics), and 20-newsgroup (20NG)5, to facilitate direct comparison with JZ15 and DL15. The first three were used in JZ15. IMDB and 20NG of this version were used in DL15. The datasets are summarized in Table 2.\n3 http://ai.stanford.edu/\u02dcamaas/data/sentiment/ 4 http://riejohnson.com/cnn_data.html 5 \u2018all-terms\u2019 at http://ana.cachopo.org/datasets-for-single-label-text-categorization\nThe data was converted to lower-case letters. In the neural network experiments, vocabulary was reduced to the most frequent 30K words of the training data to reduce computational burden; square loss was minimized with dropout (Hinton et al., 2012) applied to the input to the top layer. Optimization was done with SGD with mini-batch size 50 or 100 with momentum or optionally rmsprop (Tieleman & Hinton, 2012) for acceleration.\nHyper parameters such as learning rates were chosen based on the performance on the development data, which was a held-out portion of the training data, and training was redone using all the training data with the chosen parameters.\nWe used the same pooling method as used in JZ15, which parameterizes the number of pooling regions so that pooling is done for k non-overlapping regions of equal size, and the resulting k vectors are concatenated to make one vector per document. The pooling settings chosen based on the performance on the development data are the same as JZ15a, which are max-pooling with k=1 on IMDB and Elec and average-pooling with k=10 on RCV1; on 20NG, max-pooling with k=10 was chosen.\nTable 3 shows the error rates obtained without any additional unlabeled data or pre-training of any sort. For meaningful comparison, this table shows neural networks with comparable dimensionality of embeddings, which are one-hot CNN with one convolution layer with 1000 feature maps and bidirectional LSTMs of 500 units each. In other words, the convolution layer produces a 1000-dimensional vector at each location, and the LSTM in each direction emits a 500-dimensional vector at each time step. An exception is wv-LSTM, equipped with 512 LSTM units (smaller than 2\u00d7500) and a word embedding layer of 512 dimensions; DL15 states that without pre-training, addition of more LSTM units broke down training. A more complex and larger one-hot CNN will be reviewed later.\nComparing the three types of LSTM in Table 3, we see that our one-hot bidirectional LSTM with pooling (oh2LSTMp) outperforms the others on all the datasets, which confirms the effectiveness of our simplifications. The purpose of testing wv-2LSTMp (word-vector bidirectional LSTM with pooling) was to measure the benefit of the elimination of word embedding. The only difference from oh-2LSTMp is that wv-2LSTMp has a word embedding layer of 500 dimensions feeding to LSTMs. Comparing it with oh-2LSTMp, we see that elimination of a word embedding layer results in error reduction, and comparison with wv-LSTM shows that pooling and addition of a\nbackward LSTM also reduce errors. Now we review the non-LSTM baseline methods. The last row of Table 3 shows the best one-hot CNN results within the constraints above. They were obtained by bow-CNN (whose input to the embedding function (1) is a bow vector of the region) with region size 20 on RCV1, and seq-CNN (with the regular concatenation input) with region size 3 on the others. In Table 3, on three out of the four datasets, oh-2LSTMp outperforms SVM and one-hot CNN. However, on RCV1, it underperforms both. We conjecture that this is because strict word order is not very useful on RCV1. This point can also be observed in the SVM and CNN performances. Only on RCV1, n-gram SVM is no better than bag-of-word SVM, and only on RCV1, bow-CNN outperforms seq-CNN. That is, on RCV1, bags of words in a window of 20 at every location are more useful than words in strict order. This is presumably because the former can more easily cover variability of expressions indicative of topics. Thus, LSTM, which does not have an ability to put words into bags, loses to bow-CNN.\nmethods IMDB Elec 20NG oh-2LSTMp, copied from Tab.3 8.14 7.33 13.32 oh-CNN, 2 region sizes [JZ15a] 8.04 7.48 13.55\nMore on one-hot CNN vs. one-hot LSTM LSTM can embed regions of variable (and possibly large) sizes whereas CNN requires the region size to be fixed. We attribute to this fact the small improvements of one-hot LSTM over one-hot CNN in Table 3. However, this shortcoming of CNN can be alleviated by having multiple convolution layers with distinct region sizes. We show in the table above that one-hot CNNs with two layers (of 1000 feature maps each) with two different region sizes rival one-hot LSTM. Although these models are larger than those in Table 3, training/testing is still faster than the LSTM models due to simplicity of the region embeddings. By comparison, the strength of LSTM to embed larger regions appears not to be a big contributor here. This may be because the amount of training data is not sufficient enough to learn the relevance of longer word sequences. Overall, we note that one-hot CNN works surprising well considering its simplicity, and this observation motivates the idea of combining the two types of region embeddings, discussed later.\nComparison with the previous best results on 20NG The previous best performance on 20NG is 15.3 (not shown in the table) of DL15, obtained by pre-training wv-LSTM of 1024 units with labeled training data. Our oh-2LSTMp achieved 13.32, which is 2% better. The previous best results on the other datasets use unlabeled data, and we will review them with our semi-supervised results."}, {"heading": "3 Semi-supervised one-hot LSTM", "text": "To exploit unlabeled data as an additional resource for LSTM, we use a non-linear extension of two-view feature learning, whose linear version appeared in our earlier work (Ando & Zhang, 2005; 2007). This was used in JZ15b to learn from unlabeled data a region embedding embodied by a convolution layer. In this work we use it to learn a region embedding embodied by a one-hot LSTM. Let us start with a brief review of non-linear two-view feature learning."}, {"heading": "3.1 Two-view embedding (tv-embedding) [JZ15b]", "text": "A rough sketch is as follows. Consider two views of the input. An embedding is called a tv-embedding if the embedded view is as good as the original view for the purpose of predicting the other view. If the two views and the labels (classification targets) are related to one another only through some hidden states, then the tv-embedded view is as good as the original view for the purpose of classification. Such an embedding is useful provided that its dimensionality is much lower than the original view.\nIn JZ15b we applied this idea by regarding text regions embedded by the convolution layer as one view and their surrounding context as the other view and training a tv-embedding (embodied by a convolution layer) on unlabeled data. The obtained tv-embeddings were used to produce additional input to a supervised region embedding of one-hot CNN, resulting in higher accuracy."}, {"heading": "3.2 Learning one-hot LSTM tv-embeddings", "text": "One-hot vectors\nLSTM\nA good buy !\nTop layer\ngood buy\n!\nbuy ! !\nA good buy !\nTop layer\nA A good A good buy\nFigure 5: Training LSTM tv-embeddings on unlabeled data\nWe obtain a tv-embedding in the form of LSTM from unlabeled data as follows. At each time step, we consider the following two views: the words we have already seen in the document (view-1), and the next few words (view-2). The task of tv-embedding learning is to predict view-2 based on view-1. We train one-hot LSTMs in both directions, as in Figure 5, on unlabeled data. For this purpose, we use the input and output gates as well as the forget gate as we found them to be useful.\nThe theory of tv-embedding says that the region embeddings obtained in this way are useful for the task of interest if the two views are related to each other through the concepts relevant to the task. To reduce undesirable relations between the views such as syntactic relations, in JZ15b we performed vocabulary control to remove function words from (and only from) the vocabulary of the target view, which we found useful also for LSTM.\nWe use the tv-embeddings obtained from unlabeled data to produce additional input to LSTM by replacing (2) and (3) by the following:\nft = \u03c3(W (f)xt + \u2211 j\u2208S W\u0303(j,f)x\u0303jt +U (f)ht\u22121 + b (f)) ,\nut = \u03c3(W (u)xt + \u2211 j\u2208S W\u0303(j,u)x\u0303jt +U (u)ht\u22121 + b (u)) .\nx\u0303jt is the output of a tv-embedding (a one-hot LSTM layer) indexed by j at time step t, and S is a set of tv-embeddings which contains the two LSTMs going forward and backward as in Figure 5. Although it is possible to fine-tune the tv-embeddings with labeled data, for simplicity and faster training, we fixed them in our experiments."}, {"heading": "3.3 Combining LSTM tv-embeddings and CNN tv-embeddings", "text": "It is easy to see that the set S above can be expanded with any tv-embeddings, not only those in the form of LSTM (LSTM tv-embeddings) but also with the tv-embeddings in the form of convolution layers (CNN tv-embeddings) such as those obtained in JZ15b. Similarly, it is possible to use LSTM tv-embeddings to produce additional input to onehot CNN. While both LSTM tv-embeddings and CNN tv-embeddings are region embeddings, their formulations are very different from each other; therefore, we expect that they complement each other and bring further performance improvements when combined. We will empirically confirm these conjectures in the experiments below. Note that being able to naturally combine several tv-embeddings is a strength of our framework, which uses unlabeled data to produce additional input to LSTM instead of pre-training."}, {"heading": "3.4 Semi-supervised experiments", "text": "We used IMDB, Elec, and RCV1 for our semi-supervised experiments; 20NG was excluded due to the absence of standard unlabeled data. Table 4 summarizes the unlabeled data.\nTo experiment with LSTM tv-embeddings, we trained two LSTMs (forward and backward) with 100 units each on unlabeled data. The training objective was to predict the next k words represented by a bag-of-word vector (i.e., position insensitive) where k was set to 20 for RCV1 and 5 for others. Similar to the CNN tv-embedding experiments in JZ15b, we minimized square loss with negative sampling for speed-up and with vocabulary control for reducing undesirable relations between views, which sets the vocabulary of the target (i.e., the k words) to the 30K most frequent words excluding function words (or stop words on RCV1). oh-2LSTMp in row#4 of Table 5 used the two LSTM tvembeddings trained on unlabeled data this way to produce additional input to one-hot LSTMs in two directions (500 units each). Compared with the supervised oh-2LSTMp (Table 3), clear performance improvements were obtained on all the datasets, thus, confirming the effectiveness of the LSTM tv-embedding learning.\nWe review the semi-supervised performance of wv-LSTMs (Table 5 row#1). DL15 states that the model consisted of a word embedding layer of 512 dimensions, a LSTM layer with 1024 units, and 30 hidden units on top of the LSTM layer, and dropout was applied to the input to the top layer; the word embedding layer and the LSTM were pre-trained with unlabeled data and were fine-tuned with labeled data; pre-training used either the language model objective or autoencoder objective. The error rate on IMDB is from DL15, and those on Elec and RCV1 are our best effort to perform pre-training with the language model objective. We used the same configuration on Elec as DL15; however, on RCV1, which has 55 classes, 30 hidden units turned out to be too few and we changed it to 1000. Although the pre-trained wv-LSTM outperformed the supervised wv-LSTM (Table 3), it underperformed our one-hot LSTM (Table 5 row#4) as well as one-hot CNN (row#5).\nAs mentioned earlier, previous studies on LSTM for text typically convert words into word vectors, and word2vec (Mikolov et al., 2013) is a popular choice for this purpose. The Google News word vectors were trained by word2vec on a huge (100 billion-word) news corpus and are provided publicly. On our tasks, wv-2LSTMp using the Google News vectors (Table 5 row#2) performed relatively poorly, though it was better than the supervised wv-2LSTMp (Table 3). When word2vec was trained with the domain unlabeled data, better results were observed after we scaled word vectors appropriately (Table 5 row#3). Still, it underperformed one-hot CNN (row#4) and one-hot LSTM (row#5). Fine-tuning of word vectors did not improve performance, and the reported performances were obtained by fixing the word vectors (after proper scaling). We attribute the superiority of one-hot CNN and one-hot LSTM to the fact that they both learn, from unlabeled data, embeddings of text regions, which can convey higher-level concepts than single words in isolation.\nNow we review the performance of one-hot CNN with one 200-dim CNN tv-embedding (Table 5 row#5) from JZ15b, which is comparable with our one-hot LSTM with two 100-dim LSTM tv-embeddings (row#4) in terms of the dimensionality of tv-embeddings. One-hot LSTM (row#4) rivals or outperforms one-hot CNN (row#5) on IMDB/Elec but underperforms it on RCV1. Increasing the dimensionality of LSTM tv-embeddings from 100 to 300 on RCV1, we obtain 8.62, but it still does not reach 7.97 of one-hot CNN. As discussed earlier, we attribute the superiority of one-hot CNN on RCV1 to its unique way of representing parts of documents via bow input."}, {"heading": "3.5 Experiments combining CNN tv-embeddings and LSTM tv-embeddings", "text": "In Section 3.3 we noted that LSTM tv-embeddings and CNN tv-embeddings can be naturally combined. We experimented with this idea in the following two settings.\nIn one setting, oh-2LSTMp takes additional input from five embeddings: two LSTM tv-embeddings used in Table 5 and three CNN tv-embeddings from JZ15b obtained by three distinct combinations of training objectives and input representations, which are publicly provided6. These CNN tv-embeddings were trained to be applied to text regions of size k at every location taking bow input, where k is 5 on IMDB/Elec and 20 on RCV1. We connect each of the CNN tv-embeddings to a LSTM by aligning the centers of the regions of the former with the LSTM time steps; e.g., the CNN tv-embedding result on the first five words is passed to the LSTM at the time step on the third word. In the second setting, we trained one-hot CNN with these five types of tv-embeddings by replacing (1) max(0,Wx`+b) by max(0,Wx` + \u2211 j W\u0303 (j)x\u0303j` + b) where x\u0303 j ` is the output of the j-th tv-embedding with the same alignment as above.\nRows 3\u20134 of Table 6 show the results of these two types of models. For comparison, we also show the results of one-hot LSTM with LSTM tv-embeddings only (row#1) and one-hot CNN with CNN tv-embeddings only (row#2); to see the effects of combination, compare row#3 with row#1, and compare row#4 with row#2. For example, adding the CNN tv-embeddings to the one-hot LSTM of row#1, the error rate on IMDB improved from 6.66 to 5.94, and adding the LSTM tv-embeddings to the one-hot CNN of row#2, the error rate on RCV1 improved from 7.71 to 7.20. The results indicate that, as expected, LSTM tv-embeddings and CNN tv-embeddings complement each other and improve performance when combined."}, {"heading": "3.6 Comparison with the previous best results", "text": "The previous best results in the literature are shown in Table 7. More results of previous semi-supervised models can be found in JZ15b, all of which clearly underperform the semi-supervised one-hot CNN of Table 7. The best supervised results on IMDB/Elec of JZ15a are in the first row, obtained by integrating a document embedding layer into one-hot CNN. One-hot LSTM could benefit from a similar integration though we did not attempt it. Many more\n6 http://riejohnson.com/cnn_download.html\nof the previous results on IMDB can be found in (Le & Mikolov, 2014), all of which are over 10% except for 8.78 by bi-gram NBSVM (Wang & Manning, 2012). 7.42 by paragraph vectors (Le & Mikolov, 2014) and 6.51 by JZ15b were considered to be large improvements. As shown in the last row of Table 7, our new model further improved it to 5.94; also on Elec and RCV1, our combination models exceeded the previous best results."}, {"heading": "4 Conclusion", "text": "Within the general framework of \u2018region embedding + pooling\u2019 for text categorization, we explored region embeddings via one-hot LSTM. The region embedding of one-hot LSTM rivaled or outperformed that of the state-of-the art onehot CNN, proving its effectiveness. We also found that these two types of one-hot models strongly outperformed other methods including previous LSTM. The best results were obtained by combining the two types of region embedding trained on unlabeled data, suggesting that their strengths are complementary. As a result, we reported substantial improvements over the previous best results on benchmark datasets.\nAt a high level, our results indicate the following. First, embeddings of text regions, which can convey higherlevel concepts, are more useful than embeddings of single words in isolation. Second, useful region embeddings can be learned by working with one-hot vectors directly, either on labeled data or unlabeled data. Finally, a promising future direction might be to seek, under this framework, new region embedding methods with complementary benefits."}], "references": [{"title": "A framework for learning predictive structures from multiple tasks and unlabeled data", "author": ["Ando", "Rie K", "Zhang", "Tong"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Ando et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Ando et al\\.", "year": 2005}, {"title": "Two-view feature generation model for semi-supervised learning", "author": ["Ando", "Rie K", "Zhang", "Tong"], "venue": "In Proceedings of ICML,", "citeRegEx": "Ando et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Ando et al\\.", "year": 2007}, {"title": "Learning phrase representations using RNN encoder-decoder for statistical machine translation", "author": ["Cho", "Kyunghyun", "van Merri\u00ebnboer", "Bart", "Gulcehre", "Caglar", "Bahdanau", "Dzmitry", "Bougares", "Fethi", "Schwenk", "Holger", "Bengio", "Yoshua"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Cho et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Semi-supervised sequence learning", "author": ["Dai", "Andrew M", "Le", "Quoc V"], "venue": "In NIPS,", "citeRegEx": "Dai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dai et al\\.", "year": 2015}, {"title": "Learning to forget: Continual prediction with LSTM", "author": ["Gers", "Felix A", "Schmidhuder", "J\u00fcrgen", "Cummins", "Fred"], "venue": "Neural Computation,", "citeRegEx": "Gers et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Gers et al\\.", "year": 2000}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["Hinton", "Geoffrey E", "Srivastava", "Nitish", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan R"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "Long short-term memory", "author": ["Hochreiter", "Sepp", "Schmidhuder", "J\u00fcrgen"], "venue": "Neural Computation,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "Text categorization with support vector machines: Learning with many relevant features", "author": ["Joachims", "Thorsten"], "venue": "In ECML,", "citeRegEx": "Joachims and Thorsten.,? \\Q1998\\E", "shortCiteRegEx": "Joachims and Thorsten.", "year": 1998}, {"title": "Effective use of word order for text categorization with convolutional neural networks", "author": ["Johnson", "Rie", "Zhang", "Tong"], "venue": "In NAACL HLT,", "citeRegEx": "Johnson et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2015}, {"title": "Semi-supervised convolutional neural networks for text categorization via region embedding", "author": ["Johnson", "Rie", "Zhang", "Tong"], "venue": "In NIPS,", "citeRegEx": "Johnson et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2015}, {"title": "Convolutional neural networks for sentence classification", "author": ["Kim", "Yoon"], "venue": "In Proceedings of EMNLP, pp. 1746\u20131751,", "citeRegEx": "Kim and Yoon.,? \\Q2014\\E", "shortCiteRegEx": "Kim and Yoon.", "year": 2014}, {"title": "Recurrent convolutional neural networks for text classification", "author": ["Lai", "Siwei", "Xu", "Liheng", "Liu", "Kang", "Zhao", "Jun"], "venue": "In Proceedings of AAAI,", "citeRegEx": "Lai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lai et al\\.", "year": 2015}, {"title": "Compositional distributional semantics with long short-term memory", "author": ["Le", "Phong", "Zuidema", "Willem"], "venue": "In Proceedings of the Fourth Joint Conference on Lexical and Computational Semantics,", "citeRegEx": "Le et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Le et al\\.", "year": 2015}, {"title": "Distributed representations of sentences and documents", "author": ["Le", "Quoc", "Mikolov", "Tomas"], "venue": "In Proceedings of ICML,", "citeRegEx": "Le et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Le et al\\.", "year": 2014}, {"title": "Gradient-based learning applied to document recognition", "author": ["LeCun", "Yann", "Bottou", "Le\u00f3n", "Bengio", "Yoshua", "Haffner", "Patrick"], "venue": "In Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1986\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1986}, {"title": "RCV1: A new benchmark collection for text categorization research", "author": ["Lewis", "David D", "Yang", "Yiming", "Rose", "Tony G", "Li", "Fan"], "venue": "Journal of Marchine Learning Research,", "citeRegEx": "Lewis et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Lewis et al\\.", "year": 2004}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["Mikolov", "Tomas", "Sutskever", "Ilya", "Chen", "Kai", "Corrado", "Greg", "Dean", "Jeffrey"], "venue": "In NIPS,", "citeRegEx": "Mikolov et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Sequence to sequence learning with neural netowkrs", "author": ["Sutskever", "Hya", "Vinyals", "Oriol", "Le", "Quoc V"], "venue": "In NIPS,", "citeRegEx": "Sutskever et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "Improved semantic representations from tree-structured long short-term memory networks", "author": ["Tai", "Kai Sheng", "Socher", "Richard", "Manning", "Christopher D"], "venue": "In Proceedings of ACL,", "citeRegEx": "Tai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tai et al\\.", "year": 2015}, {"title": "Document modeling with gated recurrent neural network for sentiment classification", "author": ["Tang", "Duyu", "Qin", "Bing", "Liu", "Ting"], "venue": "In Proceedings of EMNLP,", "citeRegEx": "Tang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tang et al\\.", "year": 2015}, {"title": "Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude", "author": ["Tieleman", "Tijman", "Hinton", "Geoffrey"], "venue": "COURSERA: Neural Networks for Machine Learning,", "citeRegEx": "Tieleman et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Tieleman et al\\.", "year": 2012}, {"title": "Baselines and bigrams: Simple, good sentiment and topic classification", "author": ["Wang", "Sida", "Manning", "Christopher D"], "venue": "In Proceedings of ACL,", "citeRegEx": "Wang et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2012}, {"title": "Character-level convolutional networks for text classification", "author": ["Zhang", "Xiang", "Zhao", "Junbo", "LeCunn", "Yann"], "venue": "In NIPS,", "citeRegEx": "Zhang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2015}, {"title": "Long short-term memory over recursive structures", "author": ["Zhu", "Xiaodan", "Sobhani", "Parinaz", "Guo", "Hongyu"], "venue": "In Proceedings of ICML,", "citeRegEx": "Zhu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhu et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 15, "context": ", (Joachims, 1998; Lewis et al., 2004).", "startOffset": 2, "endOffset": 38}, {"referenceID": 22, "context": ", (Dai & Le, 2015; Johnson & Zhang, 2015a;b; Zhang et al., 2015).", "startOffset": 2, "endOffset": 64}, {"referenceID": 14, "context": "A convolutional neural network (CNN) (LeCun et al., 1986) is a feedforward neural network with convolution layers interleaved with pooling layers, originally developed for image processing.", "startOffset": 37, "endOffset": 57}, {"referenceID": 23, "context": ", (Zhu et al., 2015; Tang et al., 2015; Tai et al., 2015; Le & Zuidema, 2015).", "startOffset": 2, "endOffset": 77}, {"referenceID": 19, "context": ", (Zhu et al., 2015; Tang et al., 2015; Tai et al., 2015; Le & Zuidema, 2015).", "startOffset": 2, "endOffset": 77}, {"referenceID": 18, "context": ", (Zhu et al., 2015; Tang et al., 2015; Tai et al., 2015; Le & Zuidema, 2015).", "startOffset": 2, "endOffset": 77}, {"referenceID": 4, "context": "The forget gate ft (Gers et al., 2000) is for resetting the memory cells.", "startOffset": 19, "endOffset": 38}, {"referenceID": 17, "context": "In this setting, a word embedding layer, if included, needs to be initialized randomly and trained as 1 (Sutskever et al., 2014) suggested making each mini-batch consist of sequences of similar lengths, but we found that on our tasks this strategy slows down convergence presumably by hampering the stochastic nature of SGD.", "startOffset": 104, "endOffset": 128}, {"referenceID": 11, "context": "Another related work is (Lai et al., 2015), which combined pooling with non-LSTM recurrent networks and a word embedding.", "startOffset": 24, "endOffset": 42}, {"referenceID": 2, "context": "It is in spirit similar to Gated Recurrent Units (Cho et al., 2014) but simpler, having fewer gates.", "startOffset": 49, "endOffset": 67}, {"referenceID": 5, "context": "In the neural network experiments, vocabulary was reduced to the most frequent 30K words of the training data to reduce computational burden; square loss was minimized with dropout (Hinton et al., 2012) applied to the input to the top layer.", "startOffset": 181, "endOffset": 202}, {"referenceID": 16, "context": "As mentioned earlier, previous studies on LSTM for text typically convert words into word vectors, and word2vec (Mikolov et al., 2013) is a popular choice for this purpose.", "startOffset": 112, "endOffset": 134}], "year": 2016, "abstractText": "One-hot CNN (convolutional neural network) has been shown to be effective for text categorization in our previous work. We view it as a special case of a general framework which jointly trains a linear model with a non-linear feature generator consisting of \u2018text region embedding + pooling\u2019. Under this framework, we explore a more sophisticated region embedding method using Long Short-Term Memory (LSTM). LSTM can embed text regions of variable (and possibly large) sizes, whereas the region size needs to be fixed in a CNN. We seek the best use of LSTM for the purpose in the supervised and semi-supervised settings, starting with the idea of one-hot LSTM, which eliminates the customarily used word embedding layer. Our results indicate that on this task, embeddings of text regions, which can convey higher concepts than single words in isolation, are more useful than word embeddings. We report performances exceeding the previous best results on four benchmark datasets.", "creator": "LaTeX with hyperref package"}}}