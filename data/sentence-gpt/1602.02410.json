{"id": "1602.02410", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Feb-2016", "title": "Exploring the Limits of Language Modeling", "abstract": "In this work we explore recent advances in Recurrent Neural Networks for large scale Language Modeling, a task central to language understanding. We extend current models to deal with two key challenges present in this task: corpora and vocabulary sizes, and complex, long term structure of language. We perform an exhaustive study on techniques such as character Convolutional Neural Networks or Long-Short Term Memory, on the One Billion Word Benchmark and on the other hand, on which we compare the results. We also analyze the role of large-scale model analysis of this task in language processing.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Sun, 7 Feb 2016 19:11:17 GMT  (76kb,D)", "http://arxiv.org/abs/1602.02410v1", null], ["v2", "Thu, 11 Feb 2016 23:01:48 GMT  (77kb,D)", "http://arxiv.org/abs/1602.02410v2", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["rafal jozefowicz", "oriol vinyals", "mike schuster", "noam shazeer", "yonghui wu"], "accepted": false, "id": "1602.02410"}, "pdf": {"name": "1602.02410.pdf", "metadata": {"source": "META", "title": "Exploring the Limits of Language Modeling", "authors": ["Rafal Jozefowicz", "Oriol Vinyals", "Mike Schuster", "Noam Shazeer", "Yonghui Wu"], "emails": ["RAFALJ@GOOGLE.COM", "VINYALS@GOOGLE.COM", "SCHUSTER@GOOGLE.COM", "NOAM@GOOGLE.COM", "YONGHUI@GOOGLE.COM"], "sections": [{"heading": "1. Introduction", "text": "Language Modeling (LM) is a task central to Natural Language Processing (NLP) and Language Understanding. Models which can accurately place distributions over sentences not only encode complexities of language such as grammatical structure, but also distill a fair amount of information about the knowledge that a corpora may contain. Indeed, models that are able to assign a low probability to sentences that are grammatically correct but unlikely may help other tasks in fundamental language understanding like question answering, machine translation, or text summarization.\nLMs have played a key role in traditional NLP tasks such as speech recognition (Arisoy et al., 2012), machine translation (Schwenk et al., 2012; Vaswani et al.), or text summarization (Rush et al., 2015; Filippova et al., 2015). Often (although not always), training better language models\nFigure 1. A high-level diagram of the models presented in this paper. (a) is a standard LSTM LM. (b) represents an LM where both input and Softmax embeddings have been replaced by a character CNN. In (c) we replace the Softmax by a next character prediction LSTM network.\nimproves the underlying metrics of the downstream task (such as word error rate for speech recognition, or BLEU score for translation), which makes the task of training better LMs valuable by itself.\nFurther, when trained on vast amounts of data, language models compactly extract knowledge encoded in the training data. For example, when trained on movie subtitles (Serban et al., 2015; Vinyals & Le, 2015), these language models are able to generate basic answers to questions about object colors, facts about people, etc. Lastly, recently proposed sequence-to-sequence models employ conditional language models as their key component to solve diverse tasks like machine translation (Sutskever et al., 2014; Cho et al., 2014) or video generation (Srivastava et al., 2015a).\nar X\niv :1\n60 2.\n02 41\n0v 1\n[ cs\n.C L\n] 7\nF eb\n2 01\nDeep Learning and Recurrent Neural Networks (RNNs) have fueled language modeling research in the past years as it allowed researchers to explore many tasks for which the strong conditional independence assumptions are unrealistic. Despite the fact that simpler models, such as Ngrams, only use a short history of previous words to predict the next word, they are still a key component to high quality, low perplexity LMs. Indeed, most recent work on large scale LM has shown that RNNs are great in combination with N-grams, as they may have different strengths that complement N-gram models, but worse when considered in isolation (Chelba et al., 2013; Williams et al., 2015; Ji et al., 2015a; Shazeer et al., 2015).\nWe believe that, despite much work being devoted to small data sets like the Penn Tree Bank (PTB) (Marcus et al., 1993), research on larger tasks is very relevant as overfitting is not the main limitation in current language modeling, but is the main characteristic of the PTB task. Results on larger corpora usually show better what matters as many ideas work well on small data sets but fail to improve on larger data sets. Further, given current hardware trends and vast amounts of text available on the Web, it is much more straightforward to tackle large scale modeling than it used to be. Thus, we hope that our work will help and motivate researchers to work on traditional LM beyond PTB \u2013 for this purpose, we will open-source our models and training recipes.\nWe focused on a well known, large scale LM benchmark: the One Billion Word Benchmark data set (Chelba et al., 2013). This data set is much larger than PTB (one thousand fold, 800k word vocabulary and 1B words training data) and far more challenging. Similar to Imagenet (Deng et al., 2009), which helped advance computer vision, we believe that releasing and working on large data sets and models with clear benchmarks will help advance Language Modeling.\nThe contributions of our work are as follows:\n\u2022 We explored, extended and tried to unify some of the current research on large scale LM.\n\u2022 Specifically, we designed a Softmax loss which is based on character level CNNs, is efficient to train, and is as precise as a full Softmax which has orders of magnitude more parameters.\n\u2022 Our study yielded significant improvements to the state-of-the-art on a well known, large scale LM task: from 51.3 down to 30.0 perplexity for single models whilst reducing the number of parameters by a factor of 20.\n\u2022 We show that an ensemble of a number of different models can bring down perplexity on this task to 24.2,\na large improvement compared to current state-of-art.\n\u2022 We share the model and recipes in order to help and motivate further research in this area.\nIn Section 2 we review important concepts and previous work on language modeling. Section 3 presents our contributions to the field of neural language modeling, emphasizing large scale recurrent neural network training. Sections 4 and 5 aim at exhaustively describing our experience and understanding throughout the project, as well as emplacing our work relative to other known approaches."}, {"heading": "2. Related Work", "text": "In this section we describe previous work relevant to the approaches discussed in this paper. A more detailed discussion on language modeling research is provided in (Mikolov, 2012)."}, {"heading": "2.1. Language Models", "text": "Language Modeling (LM) has been a central task in NLP. The goal of LM is to learn a probability distribution over sequences of symbols pertaining to a language. Much work has been done on both parametric (e.g., log-linear models) and non-parametric approaches (e.g., count-based LMs). Count-based approaches (based on statistics of N-grams) typically add smoothing which account for unseen (yet possible) sequences, and have been quite successful. To this extent, Kneser-Ney smoothed 5-gram models (Kneser & Ney, 1995) are a fairly strong baseline which, for large amounts of training data, have challenged other parametric approaches based on Neural Networks (Bengio et al., 2006).\nMost of our work is based on Recurrent Neural Networks (RNN) models which retain long term dependencies. To this extent, we used the Long-Short Term Memory model (Hochreiter & Schmidhuber, 1997) which uses a gating mechanism (Gers et al., 2000) to ensure proper propagation of information through many time steps. Much work has been done on small and large scale RNN-based LMs (Mikolov, 2012; Chelba et al., 2013; Zaremba et al., 2014; Williams et al., 2015; Ji et al., 2015a; Wang & Cho, 2015; Ji et al., 2015b). The architectures that we considered in this paper are represented in Figure 1.\nIn our work, we train models on the popular One Billion Word Benchmark, which can be considered to be a medium-sized data set for count-based LMs but a very large data set for NN-based LMs. This regime is most interesting to us as we believe learning a very good model of human language is a complex task which will require large models, and thus large amounts of data. Further advances in data availability and computational resources helped our study.\nWe argue this leap in scale enabled tremendous advances in deep learning. A clear example found in computer vision is Imagenet (Deng et al., 2009), which enabled learning complex vision models from large amounts of data (Krizhevsky et al., 2012).\nA crucial aspect which we discuss in detail in later sections is the size of our models. Despite the large number of parameters, we try to minimize computation as much as possible by adopting a strategy proposed in (Sak et al., 2014) of projecting a relatively big recurrent state space down so that the matrices involved remain relatively small, yet the model has large memory capacity."}, {"heading": "2.2. Convolutional Embedding Models", "text": "There is an increased interest in incorporating characterlevel inputs to build word embeddings for various NLP problems, including part-of-speech tagging, parsing and language modeling (Ling et al., 2015; Kim et al., 2015; Ballesteros et al., 2015). The additional character information has been shown useful on relatively small benchmark data sets.\nThe approach proposed in (Ling et al., 2015) builds word embeddings using bidirectional LSTMs (Schuster & Paliwal, 1997; Graves & Schmidhuber, 2005) over the characters. The recurrent networks process sequences of characters from both sides and their final state vectors are concatenated. The resulting representation is then fed to a Neural Network. This model achieved very good results on a partof-speech tagging task.\nIn (Kim et al., 2015), the words characters are processed by a 1-d CNN (Le Cun et al., 1990) with max-pooling across the sequence for each convolutional feature. The resulting features are fed to a 2-layer highway network (Srivastava et al., 2015b), which allows the embedding to learn semantic representations. The model was evaluated on smallscale language modeling experiments for various languages and matched the best results on the PTB data set despite having 60% fewer parameters."}, {"heading": "2.3. Softmax Over Large Vocabularies", "text": "Assigning probability distributions over large vocabularies is computationally challenging. For modeling language, maximizing log-likelihood of a given word sequence leads to optimizing cross-entropy between the target probability distribution (e.g., the target word we should be predicting), and our model predictions p. Generally, predictions come from a linear layer followed by a Softmax non-linearity: p(w) = exp(zw)\u2211\nw\u2032\u2208V exp(zw\u2032 )\nwhere zw is the logit correspond-\ning to a word w. The logit is generally computed as an inner product zw = hT ew where h is a context vector and ew is a \u201cword embedding\u201d for w.\nThe main challenge when |V | is very large (in the order of one million in this paper) is the fact that computing all inner products between h and all embeddings becomes prohibitively slow during training (even when exploiting matrix-matrix multiplications and modern GPUs). Several approaches have been proposed to cope with the scaling issue: importance sampling (Bengio et al., 2003; Bengio & Sene\u0301cal, 2008), Negative Contrast Estimation (NCE) (Gutmann & Hyva\u0308rinen, 2010; Mnih & Kavukcuoglu, 2013), self normalizing partition functions (Vincent et al., 2015) or Hierarchical Softmax (Morin & Bengio, 2005; Mnih & Hinton, 2009) \u2013 they all offer good solutions to this problem. We found importance sampling to be quite effective on this task, and explain the connection between it and NCE in the following section, as they are closely related."}, {"heading": "3. Language Modeling Improvements", "text": "Recurrent Neural Networks based LMs employ the chain rule to model joint probabilities over word sequences:\np(w1, . . . , wN ) = N\u220f i=1 p(wi|w1, . . . , wi\u22121)\nwhere the context of all previous words is encoded with an LSTM, and the probability over words uses a Softmax (see Figure 1(a))."}, {"heading": "3.1. Relationship between Noise Contrastive Estimation and Importance Sampling", "text": "As discussed in Section 2.3, a large scale Softmax is necessary for training good LMs because of the vocabulary size. A Hierarchical Softmax (Mnih & Hinton, 2009) employs a tree in which the probability distribution over words is decomposed into a product of two probabilities for each word, greatly reducing training and inference time as only the path specified by the hierarchy needs to be computed and updated. Choosing a good hierarchy is important for obtaining good results and we did not explore this approach further for this paper as sampling methods worked well for our setup.\nSampling approaches are only useful during training, as they propose an approximation to the loss which is cheap to compute (also in a distributed setting) \u2013 however, at inference time one still has to compute the normalization term over all words. Noise Contrastive Estimation (NCE) proposes to consider a surrogate binary classification task in which a classifier is trained to discriminate between true data, or samples coming from some arbitrary distribution. If both the noise and data distributions were known, the optimal classifier would be:\np(Y = true|w) = pd(w) pd(w) + kpn(w)\nwhere Y is the binary random variable indicating whether w comes from the true data distribution, k is the number of negative samples per positive word, and pd and pn are the data and noise distribution respectively (we dropped any dependency on previous words for notational simplicity).\nIt is easy to show that if we train a logistic classifier p\u03b8(Y = true|w) = \u03c3(s\u03b8(w, h) \u2212 log kpn(w)) where \u03c3 is the logistic function, then, p\u2032(w) = softmax(s\u03b8(w, h)) is a good approximation of pd(w) (s\u03b8 is a logit which e.g. an LSTM LM computes).\nThe other technique, which is based on importance sampling (IS), proposes to directly approximate the partition function (which comprises a sum over all words) with an estimate of it through importance sampling. Though the methods look superficially similar, we will derive a similar surrogate classification task akin to NCE which arrives at IS, showing a strong connection between the two.\nSuppose that, instead of having a binary task to decide if a word comes from the data or from the noise distribution, we want to identify the words coming from the true data distribution in a set W = {w1, . . . , wk+1}, comprised of k noise samples and one data distribution sample. Thus, we can train a multiclass loss over a multinomial random variable Y which maximizes log p(Y = 1|W ), assuming w.l.o.g. that w1 \u2208 W is always the word coming from true data. By Bayes rule, and ignoring terms that are constant with respect to Y , we can write:\np(Y = k|W ) \u221dY pd(wk)\npn(wk)\nand, following a similar argument than for NCE, if we define p(Y = k|W ) = softmax(s\u03b8(wk)\u2212 log pn(wk)) then p\u2032(w) = softmax(s\u03b8(w, h)) is a good approximation of pd(word). Note that the only difference between NCE and IS is that, in NCE, we define a binary classification task between true or noise words with a logistic loss, whereas in IS we define a multiclass classification problem with a Softmax and cross entropy loss. We hope that our derivation helps clarify the similarities and differences between the two. In particular, we observe that IS, as it optimizes a multiclass classification task (in contrast to solving a binary task), may be a better choice. Indeed, the updates to the logits with IS are tied whereas in NCE they are independent."}, {"heading": "3.2. CNN Softmax", "text": "The character-level features allow for a smoother and compact parametrization of the word embeddings. Recent ef-\nforts on small scale language modeling have used CNN character embeddings for the input embeddings (Kim et al., 2015). Although not as straightforward, we propose an extension to this idea to also reduce the number of parameters of the Softmax layer. Recall from Section 2.3 that the Softmax computes a logit as zw = hT ew where h is a context vector and ew the word embedding. Instead of building a matrix of |V | \u00d7 |h| (whose rows correspond to ew), we produce ew with a CNN over the characters ofw as ew = CNN(charsw) \u2013 we call this a CNN Softmax. We used the same network architecture to dynamically generate the Softmax word embeddings without sharing the parameters with the input word-embedding sub-network. For inference, the vectors ew can be precomputed, so there is no computational complexity increase w.r.t. the regular Softmax.\nWe note that, when using an importance sampling loss such as the one described in Section 3.1, only a few logits have non-zero gradient (those corresponding to the true and sampled words). With a Softmax where ew are independently learned word embeddings, this is not a problem. But we observed that, when using a CNN, all the logits become tied as the function mapping from w to ew is quite smooth. As a result, a much smaller learning rate had to be used. Even with this, the model lacks capacity to differentiate between words that have very different meanings but that are spelled similarly. Thus, a reasonable compromise was to add a small correction factor which is learned per word, such that:\nzw = h TCNN(charsw) + h TMcorrw\nwhere M is a matrix projecting a low-dimensional embedding vector corrw back up to the dimensionality of the projected LSTM hidden state of h. This amounts to adding a bottleneck linear layer, and brings the CNN Softmax much closer to our best result, as can be seen in Table 1, where adding a 128-dim correction halves the gap between regular and the CNN Softmax.\nAside from a big reduction in the number of parameters and incorporating morphological knowledge from words, the other benefit of this approach is that out-of-vocabulary (OOV) words can easily be scored. This may be useful for other problems such as Machine Translation where handling out-of-vocabulary words is very important (Luong et al., 2014). This approach also allows parallel training over various data sets since the model is no longer explicitly parametrized by the vocabulary size \u2013 or the language. This has shown to help when using byte-level input embeddings for named entity recognition (Gillick et al., 2015), and we hope it will enable similar gains when used to map onto words."}, {"heading": "3.3. Char LSTM Predictions", "text": "The CNN Softmax layer can handle arbitrary words and is much more efficient in terms of number of parameters than the full Softmax matrix. It is, though, still considerably slow, as to evaluate perplexities we need to compute the partition function. A class of models that solve this problem more efficiently are character-level LSTMs (Sutskever et al., 2011; Graves, 2013). They make predictions one character at a time, thus allowing to compute probabilities over a much smaller vocabulary. On the other hand, these models are more difficult to train and seem to perform worse even in small tasks like PTB (Graves, 2013). Most likely this is due to the sequences becoming much longer on average as the LSTM reads the input character by character instead of word by word.\nThus, we combine the word and character-level models by feeding a word-level LSTM hidden state h into a small LSTM that predicts the target word one character at a time (see Figure 1(c)). In order to make the whole process reasonably efficient, we train the standard LSTM model until convergence, freeze its weights, and replace the standard word-level Softmax layer with the aforementioned character-level LSTM.\nThe resulting model scales independently of vocabulary size \u2013 both for training and inference. However, it does seem to be worse than regular and CNN Softmax \u2013 we are hopeful that further research will enable these models to replace fixed vocabulary models whilst being computationally attractive."}, {"heading": "4. Experiments", "text": "All experiments were run using the TensorFlow system (Abadi et al., 2015), with the exception of some older models which were used in the ensemble."}, {"heading": "4.1. Data Set", "text": "The experiments are performed on the 1B Word Benchmark data set introduced by (Chelba et al., 2013), which is a publicly available benchmark for measuring progress of statistical language modeling. The data set contains about 0.8B words with a vocabulary of 793471 words, including sentence boundary markers. All the sentences are shuffled and the duplicates are removed. The words that are out of vocabulary (OOV) are marked with a special UNK token (there are approximately 0.3% such words)."}, {"heading": "4.2. Model Setup", "text": "The typical measure used for reporting progress in language modeling is perplexity, which is the average per-word log-probability on the holdout data set: e\u2212 1 N \u2211 i ln pwi . We follow the standard procedure and sum over all the words (including the end of sentence symbol).\nWe used the 1B Word Benchmark data set without any preprocessing. Given the shuffled sentences, they are input to the network as a batch of independent streams of words. Whenever a sentence ends, a new one starts without any padding (thus maximizing the occupancy per batch).\nFor the models that consume characters as inputs or as targets, each word is fed to the model as a sequence of character IDs of preespecified length (see Figure 1(b)). The words\nwere processed to include special begin and end of word tokens and were padded to reach the expected length. I.e. if the maximum word length was 10, the word \u201ccat\u201d would be transformed to \u201c$cat\u02c6 \u201d due to the CNN model.\nIn our experiments we found that limiting the maximum word length in training to 50 was sufficient to reach very good results while 32 was clearly insufficient. We used 256 characters in our vocabulary and the non-ascii symbols were represented as a sequence of bytes."}, {"heading": "4.3. Model Architecture", "text": "We evaluated many variations of RNN LM architectures. These include the dimensionalities of the embedding layers, the state, projection sizes, and number of LSTM layers to use. Exhaustively trying all combinations would be extremely time consuming for such a large data set, but our findings suggest that LSTMs with a projection layer (i.e., a bottleneck between hidden states as in (Sak et al., 2014)) trained with truncated BPTT (Williams & Peng, 1990) for 20 steps performed well.\nFollowing (Zaremba et al., 2014) we use dropout (Srivastava, 2013) before and after every LSTM layer. The biases of LSTM forget gate were initialized to 1.0 (Jozefowicz et al., 2015). The size of the models will be described in more detail in the following sections, and the choices of hyper-parameters will be released as open source upon publication.\nFor any model using character embedding CNNs, we closely follow the architecture from (Kim et al., 2015). The only important difference is that we use a larger number of convolutional features of 4096 to give enough capacity to the model. The resulting embedding is then linearly transformed to match the LSTM projection sizes. This allows it to match the performance of regular word embeddings but only uses a small fraction of parameters."}, {"heading": "4.4. Training Procedure", "text": "The models were trained until convergence with an AdaGrad optimizer using a learning rate of 0.2. In all the experiments the RNNs were unrolled for 20 steps without ever resetting the LSTM states. We used a batch size of 128. We clip the gradients of the LSTM weights such that their norm is bounded by 1.0.\nUsing these hyper-parameters we found large LSTMs to be relatively easy to train. The same learning rate was used in almost all of the experiments. In a few cases we had to reduce it by an order of magnitude. Unless otherwise stated, the experiments were performed with 32 GPU workers and asynchronous gradient updates. Further details will be fully specified with the code upon publication.\nTraining a model for such large target vocabulary (793471 words) required to be careful with some details about the approximation to full Softmax using importance sampling. We used a large number of negative (or noise) samples: 8192 such samples were drawn per step, but were shared across all the target words in the batch (2560 total, i.e. 128 times 20 unrolled steps). This results in multiplying (2560 x 1024) times (1024 x (8192+1)) (instead of (2560 x 1024) times (1024 x 793471)), i.e. about 100-fold less computation."}, {"heading": "5. Results and Analysis", "text": "In this section we summarize the results of our experiments and do an in-depth analysis. Table 1 contains all results for our models compared to previously published work. Table 2 shows previous and our own work on ensembles of models. We hope that our encouraging results, which improved the best perplexity of a single model from 51.3 to 30.0 (whilst reducing the model size considerably), and set a new record with ensembles at 24.2, will enable rapid research and progress to advance Language Modeling. For this purpose, we will release the model weights and recipes upon publication."}, {"heading": "5.1. Size Matters", "text": "Unsurprisingly, size matters: when training on a very large and complex data set, fitting the training data with an LSTM is fairly challenging. Thus, the size of the LSTM layer is a very important factor that influences the results, as seen in Table 1. The best models are the largest we were able to fit into a GPU memory. Our largest model was a 2- layer LSTM with 8192+1024 dimensional recurrent state in each of the layers. Increasing the embedding and projection size also helps but causes a large increase in the number of parameters, which is less desirable. Lastly, training an RNN instead of an LSTM yields poorer results (about 5 perplexity worse) for a comparable model size."}, {"heading": "5.2. Regularization Importance", "text": "As shown in Table 1, using dropout improves the results. To our surprise, even relatively small models (e.g., single layer LSTM with 2048 units projected to 512 dimensional outputs) can over-fit the training set if trained long enough, eventually yielding holdout set degradation.\nUsing dropout on non-recurrent connections largely mitigates these issues. While over-fitting still occurs, there is no more need for early stopping. For models that had 4096 or less units in the LSTM layer, we used 10% dropout probability. For larger models, 25% was significantly better. Even with such regularization, perplexities on the training set can be as much as 6 points below test.\nIn one experiment we tried to use a smaller vocabulary comprising of the 100,000 most frequent words and found the difference between train and test to be smaller \u2013 which suggests that too much capacity is given to rare words. This is less of an issue with character CNN embedding models as the embeddings are shared across all words."}, {"heading": "5.3. Importance Sampling is Data Efficient", "text": "Table 3 shows the test perplexities of NCE vs IS loss after a few epochs of 2048 unit LSTM with 512 projection. The IS objective significantly improves the speed and the overall performance of the model when compared to NCE."}, {"heading": "5.4. Word Embeddings vs Character CNN", "text": "Replacing the embedding layer with a parametrized neural network that process characters of a given word allows the model to consume arbitrary words and is not restricted to a fixed vocabulary. This property is useful for data sets with conversational or informal text as well as for morphologically rich languages. Our experiments show that using character-level embeddings is feasible and does not degrade performance \u2013 in fact, our best single model uses a Character CNN embedding.\nAn additional advantage is that the number of parameters of the input layer is reduced by a factor of 11 (though training speed is slightly worse). For inference, the embeddings can be precomputed so there is no speed penalty. Overall, the embedding of the best model is parametrized by 72M weights (down from 820M weights).\nTable 4 shows a few examples of nearest neighbor embeddings for some out-of-vocabulary words when character CNNs are used."}, {"heading": "5.5. Smaller Models with CNN Softmax", "text": "Even with character-level embeddings, the model is still fairly large (though much smaller than the best competing models from previous work). Most of the parameters are in the linear layer before the Softmax: 820M versus a total of 1.04B parameters.\nIn one of the experiments we froze the word-LSTM after convergence and replaced the Softmax layer with the CNN Softmax sub-network. Without any fine-tuning that model was able to reach 39.8 perplexity with only 293M weights (as seen in Table 1).\nAs described in Section 3.2, adding a \u201ccorrection\u201d word embedding term alleviates the gap between regular and\nCNN Softmax. Indeed, we can trade-off model size versus perplexity. For instance, by adding 100M weights (through a 128 dimensional bottleneck embedding) we achieve 35.8 perplexity (see Table 1).\nTo contrast with the CNN Softmax, we also evaluated a model that replaces the Softmax layer with a smaller LSTM that predicts one character at a time (see Section 3.3). Such a model does not have to learn long dependencies because the base LSTM still operates at the word-level (see Figure 1(c)). With a single-layer LSTM of 1024 units we reached 49.0 test perplexity, far below the best model. In order to make the comparisons more fair, we performed a very expensive marginalization over the words in the vocabulary (to rule out words not in the dictionary which the character LSTM would assign some probability). When doing this marginalization, the perplexity improved a bit down to 47.9."}, {"heading": "5.6. Training Speed", "text": "We used 32 Tesla K40 GPUs to train our models. The smaller version of the LSTM model with 2048 units and 512 projections needs less than 10 hours to reach below 45 perplexity and after only 2 hours of training the model beats previous state-of-the art on this data set. The best model needs about 5 days to get to 35 perplexity and 10 days to 32.5. The best results were achieved after 3 weeks of training. See Table 3 for more details."}, {"heading": "5.7. Ensembles", "text": "We averaged several of our best models and we were able to reach 24.2 test perplexity (more details and results can be seen in Table 2), which is more than 40% improve-\nment over previous work. Interestingly, including the best N-gram model reduces the perplexity by 1.2 point even though the model is rather weak on its own (67.6 perplexity). Most previous work had to either ensemble with the best N-gram model (as their RNN only used a limited output vocabulary of a few thousand words), or use N-gram features as additional input to the RNN. Our results, on the contrary, suggest that N-grams are of limited benefit, and suggest that a carefully trained LSTM LM is the most competitive model."}, {"heading": "5.8. LSTMs are best on the tail words", "text": "Figure 2 shows the difference in log probabilities between our best model (at 30.0 perplexity) and the KN-5. As can be seen from the plot, the LSTM is better across all the buckets and significantly outperforms KN-5 on the rare words. This is encouraging as it seems to suggest that LSTM LMs may fare even better for languages or data sets where the number of rare words is larger than traditional N-gram models."}, {"heading": "5.9. Samples from the model", "text": "To qualitatively evaluate the model, we sampled many sentences. We discarded short and politically incorrect ones, but the sample shown below is otherwise \u201craw\u201d (i.e., not hand picked). The samples are of high quality \u2013 which is not a surprise, given the perplexities attained \u2013 but there are still some occasional mistakes.\nSentences generated by the ensemble (about 26 perplexity):\n< S > With even more new technologies coming onto the market quickly during the past three years , an increasing number of companies now must tackle the ever-changing and ever-changing environmental challenges online . < S > Check back for updates on this breaking news story . < S > About 800 people gathered at Hever Castle on Long Beach from noon to 2pm , three to four times that of the funeral corte\u0300ge . < S > We are aware of written instructions from the copyright holder not to , in any way , mention Rosenberg \u2019s negative comments if they are relevant as indicated in the documents , \u201d eBay said in a statement . < S > It is now known that coffee and cacao products can do no harm on the body . < S > Yuri Zhirkov was in attendance at the Stamford Bridge at the start of the second half but neither Drogba nor Malouda was able to push on through the Barcelona defence ."}, {"heading": "6. Discussion and Conclusions", "text": "In this paper we have shown that RNN LMs can be trained on large amounts of data, and outperform competing models including carefully tuned N-grams. The reduction in perplexity from 51.3 to 30.0 is due to several key components which we studied in this paper. Thus, a large, regularized LSTM LM, with projection layers and trained with an approximation to the true Softmax with importance sampling performs much better than N-grams. Unlike previous work, we do not require to interpolate both the RNN LM and the N-gram, and the gains of doing so are rather marginal.\nBy exploring recent advances in model architectures (e.g. LSTMs), exploiting small character CNNs, and by sharing our findings in this paper and accompanying code and models (to be released upon publication), we hope to inspire research on large scale Language Modeling, a problem we consider crucial towards language understanding. We hope for future research to focus on reasonably sized datasets taking inspiration from recent advances seen in the computer vision community thanks to efforts such as Imagenet (Deng et al., 2009)."}, {"heading": "Acknowledgements", "text": "We thank Ciprian Chelba, Ilya Sutskever, and the Google Brain Team for their help and discussions. We also thank Koray Kavukcuoglu for his help with the manuscript."}], "references": [{"title": "TensorFlow: Large-scale machine learning", "author": ["Fernanda", "Vinyals", "Oriol", "Warden", "Pete", "Wattenberg", "Martin", "Wicke", "Yu", "Yuan", "Zheng", "Xiaoqiang"], "venue": "on heterogeneous systems,", "citeRegEx": "Fernanda et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Fernanda et al\\.", "year": 2015}, {"title": "Deep neural network language models", "author": ["Arisoy", "Ebru", "Sainath", "Tara N", "Kingsbury", "Brian", "Ramabhadran", "Bhuvana"], "venue": "In Proceedings of the NAACL-HLT", "citeRegEx": "Arisoy et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Arisoy et al\\.", "year": 2012}, {"title": "Improved transition-based parsing by modeling characters instead of words with lstms", "author": ["Ballesteros", "Miguel", "Dyer", "Chris", "Smith", "Noah A"], "venue": "arXiv preprint arXiv:1508.00657,", "citeRegEx": "Ballesteros et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ballesteros et al\\.", "year": 2015}, {"title": "Adaptive importance sampling to accelerate training of a neural probabilistic language model", "author": ["Bengio", "Yoshua", "Sen\u00e9cal", "Jean-S\u00e9bastien"], "venue": "Neural Networks, IEEE Transactions on,", "citeRegEx": "Bengio et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2008}, {"title": "Quick training of probabilistic neural nets by importance sampling", "author": ["Bengio", "Yoshua", "Sen\u00e9cal", "Jean-S\u00e9bastien"], "venue": "In AISTATS,", "citeRegEx": "Bengio et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2003}, {"title": "Neural probabilistic language models", "author": ["Bengio", "Yoshua", "Schwenk", "Holger", "Sen\u00e9cal", "JeanS\u00e9bastien", "Morin", "Fr\u00e9deric", "Gauvain", "Jean-Luc"], "venue": "In Innovations in Machine Learning,", "citeRegEx": "Bengio et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2006}, {"title": "One billion word benchmark for measuring progress in statistical language modeling", "author": ["Chelba", "Ciprian", "Mikolov", "Tomas", "Schuster", "Mike", "Ge", "Qi", "Brants", "Thorsten", "Koehn", "Phillipp", "Robinson", "Tony"], "venue": "arXiv preprint arXiv:1312.3005,", "citeRegEx": "Chelba et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Chelba et al\\.", "year": 2013}, {"title": "Learning phrase representations using rnn encoder-decoder for statistical machine translation", "author": ["Cho", "Kyunghyun", "Van Merri\u00ebnboer", "Bart", "Gulcehre", "Caglar", "Bahdanau", "Dzmitry", "Bougares", "Fethi", "Schwenk", "Holger", "Bengio", "Yoshua"], "venue": "arXiv preprint arXiv:1406.1078,", "citeRegEx": "Cho et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Imagenet: A large-scale hierarchical image database", "author": ["Deng", "Jia", "Dong", "Wei", "Socher", "Richard", "Li", "Li-Jia", "Kai", "Fei-Fei"], "venue": "In Computer Vision and Pattern Recognition,", "citeRegEx": "Deng et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2009}, {"title": "Sentence compression by deletion with lstms", "author": ["Filippova", "Katja", "Alfonseca", "Enrique", "Colmenares", "Carlos A", "Kaiser", "Lukasz", "Vinyals", "Oriol"], "venue": "In Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Filippova et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Filippova et al\\.", "year": 2015}, {"title": "Learning to forget: Continual prediction with lstm", "author": ["Gers", "Felix A", "Schmidhuber", "J\u00fcrgen", "Cummins", "Fred"], "venue": "Neural computation,", "citeRegEx": "Gers et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Gers et al\\.", "year": 2000}, {"title": "Multilingual language processing from bytes", "author": ["Gillick", "Dan", "Brunk", "Cliff", "Vinyals", "Oriol", "Subramanya", "Amarnag"], "venue": "arXiv preprint arXiv:1512.00103,", "citeRegEx": "Gillick et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gillick et al\\.", "year": 2015}, {"title": "Generating sequences with recurrent neural networks", "author": ["Graves", "Alex"], "venue": "arXiv preprint arXiv:1308.0850,", "citeRegEx": "Graves and Alex.,? \\Q2013\\E", "shortCiteRegEx": "Graves and Alex.", "year": 2013}, {"title": "Framewise phoneme classification with bidirectional lstm and other neural network architectures", "author": ["Graves", "Alex", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural Networks,", "citeRegEx": "Graves et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2005}, {"title": "Noisecontrastive estimation: A new estimation principle for unnormalized statistical models", "author": ["Gutmann", "Michael", "Hyv\u00e4rinen", "Aapo"], "venue": "In International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Gutmann et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Gutmann et al\\.", "year": 2010}, {"title": "Long shortterm memory", "author": ["Hochreiter", "Sepp", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural computation,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "Document context language models", "author": ["Ji", "Yangfeng", "Cohn", "Trevor", "Kong", "Lingpeng", "Dyer", "Chris", "Eisenstein", "Jacob"], "venue": "arXiv preprint arXiv:1511.03962,", "citeRegEx": "Ji et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ji et al\\.", "year": 2015}, {"title": "An empirical exploration of recurrent network architectures", "author": ["Jozefowicz", "Rafal", "Zaremba", "Wojciech", "Sutskever", "Ilya"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning", "citeRegEx": "Jozefowicz et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Jozefowicz et al\\.", "year": 2015}, {"title": "Character-aware neural language models", "author": ["Kim", "Yoon", "Jernite", "Yacine", "Sontag", "David", "Rush", "Alexander M"], "venue": "arXiv preprint arXiv:1508.06615,", "citeRegEx": "Kim et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kim et al\\.", "year": 2015}, {"title": "Improved backingoff for m-gram language modeling", "author": ["Kneser", "Reinhard", "Ney", "Hermann"], "venue": "In Acoustics, Speech, and Signal Processing,", "citeRegEx": "Kneser et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Kneser et al\\.", "year": 1995}, {"title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing", "author": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"], "venue": null, "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Handwritten digit recognition with a back-propagation network", "author": ["Le Cun", "B Boser", "Denker", "John S", "D Henderson", "Howard", "Richard E", "W Hubbard", "Jackel", "Lawrence D"], "venue": "In Advances in neural information processing systems. Citeseer,", "citeRegEx": "Cun et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Cun et al\\.", "year": 1990}, {"title": "Finding function in form: Compositional character models for open vocabulary word representation", "author": ["Ling", "Wang", "Lu\u0131\u0301s", "Tiago", "Marujo", "Astudillo", "Ram\u00f3n Fernandez", "Amir", "Silvio", "Dyer", "Chris", "Black", "Alan W", "Trancoso", "Isabel"], "venue": "arXiv preprint arXiv:1508.02096,", "citeRegEx": "Ling et al\\.,? \\Q2096\\E", "shortCiteRegEx": "Ling et al\\.", "year": 2096}, {"title": "Addressing the rare word problem in neural machine translation", "author": ["Luong", "Minh-Thang", "Sutskever", "Ilya", "Le", "Quoc V", "Vinyals", "Oriol", "Zaremba", "Wojciech"], "venue": "arXiv preprint arXiv:1410.8206,", "citeRegEx": "Luong et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Luong et al\\.", "year": 2014}, {"title": "Building a large annotated corpus of english: The penn treebank", "author": ["Marcus", "Mitchell P", "Marcinkiewicz", "Mary Ann", "Santorini", "Beatrice"], "venue": "Computational linguistics,", "citeRegEx": "Marcus et al\\.,? \\Q1993\\E", "shortCiteRegEx": "Marcus et al\\.", "year": 1993}, {"title": "Statistical language models based on neural networks. Presentation at Google", "author": ["Mikolov", "Tom\u00e1\u0161"], "venue": "Mountain View,", "citeRegEx": "Mikolov and Tom\u00e1\u0161.,? \\Q2012\\E", "shortCiteRegEx": "Mikolov and Tom\u00e1\u0161.", "year": 2012}, {"title": "A scalable hierarchical distributed language model", "author": ["Mnih", "Andriy", "Hinton", "Geoffrey E"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "Mnih et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2009}, {"title": "Learning word embeddings efficiently with noise-contrastive estimation", "author": ["Mnih", "Andriy", "Kavukcuoglu", "Koray"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Mnih et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2013}, {"title": "Hierarchical probabilistic neural network language model", "author": ["Morin", "Frederic", "Bengio", "Yoshua"], "venue": "In Aistats,", "citeRegEx": "Morin et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Morin et al\\.", "year": 2005}, {"title": "A neural attention model for abstractive sentence summarization", "author": ["Rush", "Alexander M", "Chopra", "Sumit", "Weston", "Jason"], "venue": "arXiv preprint arXiv:1509.00685,", "citeRegEx": "Rush et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Rush et al\\.", "year": 2015}, {"title": "Long short-term memory recurrent neural network architectures for large scale acoustic modeling", "author": ["Sak", "Hasim", "Senior", "Andrew W", "Beaufays", "Fran\u00e7oise"], "venue": "In INTERSPEECH,", "citeRegEx": "Sak et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sak et al\\.", "year": 2014}, {"title": "Bidirectional recurrent neural networks", "author": ["Schuster", "Mike", "Paliwal", "Kuldip K"], "venue": "Signal Processing, IEEE Transactions on,", "citeRegEx": "Schuster et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Schuster et al\\.", "year": 1997}, {"title": "Large, pruned or continuous space language models on a gpu for statistical machine translation", "author": ["Schwenk", "Holger", "Rousseau", "Anthony", "Attik", "Mohammed"], "venue": "In Proceedings of the NAACL-HLT", "citeRegEx": "Schwenk et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Schwenk et al\\.", "year": 2012}, {"title": "Hierarchical neural network generative models for movie dialogues", "author": ["Serban", "Iulian Vlad", "Sordoni", "Alessandro", "Bengio", "Yoshua", "Courville", "Aaron C", "Pineau", "Joelle"], "venue": "CoRR, abs/1507.04808,", "citeRegEx": "Serban et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Serban et al\\.", "year": 2015}, {"title": "Sparse non-negative matrix language modeling for skipgrams", "author": ["Shazeer", "Noam", "Pelemans", "Joris", "Chelba", "Ciprian"], "venue": "Proceedings of Interspeech,", "citeRegEx": "Shazeer et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Shazeer et al\\.", "year": 2015}, {"title": "Improving neural networks with dropout", "author": ["Srivastava", "Nitish"], "venue": "PhD thesis, University of Toronto,", "citeRegEx": "Srivastava and Nitish.,? \\Q2013\\E", "shortCiteRegEx": "Srivastava and Nitish.", "year": 2013}, {"title": "Unsupervised learning of video representations using lstms", "author": ["Srivastava", "Nitish", "Mansimov", "Elman", "Salakhutdinov", "Ruslan"], "venue": "arXiv preprint arXiv:1502.04681,", "citeRegEx": "Srivastava et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2015}, {"title": "Training very deep networks", "author": ["Srivastava", "Rupesh K", "Greff", "Klaus", "Schmidhuber", "J\u00fcrgen"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Srivastava et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2015}, {"title": "Generating text with recurrent neural networks", "author": ["Sutskever", "Ilya", "Martens", "James", "Hinton", "Geoffrey E"], "venue": "In Proceedings of the 28th International Conference on Machine Learning", "citeRegEx": "Sutskever et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2011}, {"title": "Sequence to sequence learning with neural networks. In Advances in neural information processing", "author": ["Sutskever", "Ilya", "Vinyals", "Oriol", "Le", "Quoc V"], "venue": null, "citeRegEx": "Sutskever et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "Efficient exact gradient update for training deep networks with very large sparse targets", "author": ["Vincent", "Pascal", "de Br\u00e9bisson", "Alexandre", "Bouthillier", "Xavier"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Vincent et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Vincent et al\\.", "year": 2015}, {"title": "A neural conversational model", "author": ["Vinyals", "Oriol", "Le", "Quoc"], "venue": "arXiv preprint arXiv:1506.05869,", "citeRegEx": "Vinyals et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Vinyals et al\\.", "year": 2015}, {"title": "Larger-context language modelling", "author": ["Wang", "Tian", "Cho", "Kyunghyun"], "venue": "arXiv preprint arXiv:1511.03729,", "citeRegEx": "Wang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "An efficient gradientbased algorithm for on-line training of recurrent network trajectories", "author": ["Williams", "Ronald J", "Peng", "Jing"], "venue": "Neural computation,", "citeRegEx": "Williams et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Williams et al\\.", "year": 1990}, {"title": "Scaling recurrent neural network language models", "author": ["Williams", "Will", "Prasad", "Niranjani", "Mrva", "David", "Ash", "Tom", "Robinson", "Tony"], "venue": "In Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "Williams et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Williams et al\\.", "year": 2015}, {"title": "Recurrent neural network regularization", "author": ["Zaremba", "Wojciech", "Sutskever", "Ilya", "Vinyals", "Oriol"], "venue": "arXiv preprint arXiv:1409.2329,", "citeRegEx": "Zaremba et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Zaremba et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 1, "context": "LMs have played a key role in traditional NLP tasks such as speech recognition (Arisoy et al., 2012), machine translation (Schwenk et al.", "startOffset": 79, "endOffset": 100}, {"referenceID": 29, "context": "), or text summarization (Rush et al., 2015; Filippova et al., 2015).", "startOffset": 25, "endOffset": 68}, {"referenceID": 9, "context": "), or text summarization (Rush et al., 2015; Filippova et al., 2015).", "startOffset": 25, "endOffset": 68}, {"referenceID": 33, "context": "For example, when trained on movie subtitles (Serban et al., 2015; Vinyals & Le, 2015), these language models are able to generate basic answers to questions about object colors, facts about people, etc.", "startOffset": 45, "endOffset": 86}, {"referenceID": 39, "context": "Lastly, recently proposed sequence-to-sequence models employ conditional language models as their key component to solve diverse tasks like machine translation (Sutskever et al., 2014; Cho et al., 2014) or video generation (Srivastava et al.", "startOffset": 160, "endOffset": 202}, {"referenceID": 7, "context": "Lastly, recently proposed sequence-to-sequence models employ conditional language models as their key component to solve diverse tasks like machine translation (Sutskever et al., 2014; Cho et al., 2014) or video generation (Srivastava et al.", "startOffset": 160, "endOffset": 202}, {"referenceID": 6, "context": "Indeed, most recent work on large scale LM has shown that RNNs are great in combination with N-grams, as they may have different strengths that complement N-gram models, but worse when considered in isolation (Chelba et al., 2013; Williams et al., 2015; Ji et al., 2015a; Shazeer et al., 2015).", "startOffset": 209, "endOffset": 293}, {"referenceID": 44, "context": "Indeed, most recent work on large scale LM has shown that RNNs are great in combination with N-grams, as they may have different strengths that complement N-gram models, but worse when considered in isolation (Chelba et al., 2013; Williams et al., 2015; Ji et al., 2015a; Shazeer et al., 2015).", "startOffset": 209, "endOffset": 293}, {"referenceID": 34, "context": "Indeed, most recent work on large scale LM has shown that RNNs are great in combination with N-grams, as they may have different strengths that complement N-gram models, but worse when considered in isolation (Chelba et al., 2013; Williams et al., 2015; Ji et al., 2015a; Shazeer et al., 2015).", "startOffset": 209, "endOffset": 293}, {"referenceID": 24, "context": "We believe that, despite much work being devoted to small data sets like the Penn Tree Bank (PTB) (Marcus et al., 1993), research on larger tasks is very relevant as overfitting is not the main limitation in current language modeling, but is the main characteristic of the PTB task.", "startOffset": 98, "endOffset": 119}, {"referenceID": 6, "context": "We focused on a well known, large scale LM benchmark: the One Billion Word Benchmark data set (Chelba et al., 2013).", "startOffset": 94, "endOffset": 115}, {"referenceID": 8, "context": "Similar to Imagenet (Deng et al., 2009), which helped advance computer vision, we believe that releasing and working on large data sets and models with clear benchmarks will help advance Language Modeling.", "startOffset": 20, "endOffset": 39}, {"referenceID": 5, "context": "To this extent, Kneser-Ney smoothed 5-gram models (Kneser & Ney, 1995) are a fairly strong baseline which, for large amounts of training data, have challenged other parametric approaches based on Neural Networks (Bengio et al., 2006).", "startOffset": 212, "endOffset": 233}, {"referenceID": 10, "context": "To this extent, we used the Long-Short Term Memory model (Hochreiter & Schmidhuber, 1997) which uses a gating mechanism (Gers et al., 2000) to ensure proper propagation of information through many time steps.", "startOffset": 120, "endOffset": 139}, {"referenceID": 6, "context": "Much work has been done on small and large scale RNN-based LMs (Mikolov, 2012; Chelba et al., 2013; Zaremba et al., 2014; Williams et al., 2015; Ji et al., 2015a; Wang & Cho, 2015; Ji et al., 2015b).", "startOffset": 63, "endOffset": 198}, {"referenceID": 45, "context": "Much work has been done on small and large scale RNN-based LMs (Mikolov, 2012; Chelba et al., 2013; Zaremba et al., 2014; Williams et al., 2015; Ji et al., 2015a; Wang & Cho, 2015; Ji et al., 2015b).", "startOffset": 63, "endOffset": 198}, {"referenceID": 44, "context": "Much work has been done on small and large scale RNN-based LMs (Mikolov, 2012; Chelba et al., 2013; Zaremba et al., 2014; Williams et al., 2015; Ji et al., 2015a; Wang & Cho, 2015; Ji et al., 2015b).", "startOffset": 63, "endOffset": 198}, {"referenceID": 8, "context": "A clear example found in computer vision is Imagenet (Deng et al., 2009), which enabled learning complex vision models from large amounts of data (Krizhevsky et al.", "startOffset": 53, "endOffset": 72}, {"referenceID": 20, "context": ", 2009), which enabled learning complex vision models from large amounts of data (Krizhevsky et al., 2012).", "startOffset": 81, "endOffset": 106}, {"referenceID": 30, "context": "Despite the large number of parameters, we try to minimize computation as much as possible by adopting a strategy proposed in (Sak et al., 2014) of projecting a relatively big recurrent state space down so that the matrices involved remain relatively small, yet the model has large memory capacity.", "startOffset": 126, "endOffset": 144}, {"referenceID": 18, "context": "There is an increased interest in incorporating characterlevel inputs to build word embeddings for various NLP problems, including part-of-speech tagging, parsing and language modeling (Ling et al., 2015; Kim et al., 2015; Ballesteros et al., 2015).", "startOffset": 185, "endOffset": 248}, {"referenceID": 2, "context": "There is an increased interest in incorporating characterlevel inputs to build word embeddings for various NLP problems, including part-of-speech tagging, parsing and language modeling (Ling et al., 2015; Kim et al., 2015; Ballesteros et al., 2015).", "startOffset": 185, "endOffset": 248}, {"referenceID": 18, "context": "In (Kim et al., 2015), the words characters are processed by a 1-d CNN (Le Cun et al.", "startOffset": 3, "endOffset": 21}, {"referenceID": 4, "context": "Several approaches have been proposed to cope with the scaling issue: importance sampling (Bengio et al., 2003; Bengio & Sen\u00e9cal, 2008), Negative Contrast Estimation (NCE) (Gutmann & Hyv\u00e4rinen, 2010; Mnih & Kavukcuoglu, 2013), self normalizing partition functions (Vincent et al.", "startOffset": 90, "endOffset": 135}, {"referenceID": 40, "context": ", 2003; Bengio & Sen\u00e9cal, 2008), Negative Contrast Estimation (NCE) (Gutmann & Hyv\u00e4rinen, 2010; Mnih & Kavukcuoglu, 2013), self normalizing partition functions (Vincent et al., 2015) or Hierarchical Softmax (Morin & Bengio, 2005; Mnih & Hinton, 2009) \u2013 they all offer good solutions to this problem.", "startOffset": 160, "endOffset": 182}, {"referenceID": 18, "context": "Recent efforts on small scale language modeling have used CNN character embeddings for the input embeddings (Kim et al., 2015).", "startOffset": 108, "endOffset": 126}, {"referenceID": 23, "context": "This may be useful for other problems such as Machine Translation where handling out-of-vocabulary words is very important (Luong et al., 2014).", "startOffset": 123, "endOffset": 143}, {"referenceID": 11, "context": "This has shown to help when using byte-level input embeddings for named entity recognition (Gillick et al., 2015), and we hope it will enable similar gains when used to map onto words.", "startOffset": 91, "endOffset": 113}, {"referenceID": 38, "context": "A class of models that solve this problem more efficiently are character-level LSTMs (Sutskever et al., 2011; Graves, 2013).", "startOffset": 85, "endOffset": 123}, {"referenceID": 6, "context": "The experiments are performed on the 1B Word Benchmark data set introduced by (Chelba et al., 2013), which is a publicly available benchmark for measuring progress of statistical language modeling.", "startOffset": 78, "endOffset": 99}, {"referenceID": 30, "context": ", a bottleneck between hidden states as in (Sak et al., 2014)) trained with truncated BPTT (Williams & Peng, 1990) for 20 steps performed well.", "startOffset": 43, "endOffset": 61}, {"referenceID": 45, "context": "Following (Zaremba et al., 2014) we use dropout (Srivastava, 2013) before and after every LSTM layer.", "startOffset": 10, "endOffset": 32}, {"referenceID": 17, "context": "0 (Jozefowicz et al., 2015).", "startOffset": 2, "endOffset": 27}, {"referenceID": 18, "context": "For any model using character embedding CNNs, we closely follow the architecture from (Kim et al., 2015).", "startOffset": 86, "endOffset": 104}, {"referenceID": 8, "context": "We hope for future research to focus on reasonably sized datasets taking inspiration from recent advances seen in the computer vision community thanks to efforts such as Imagenet (Deng et al., 2009).", "startOffset": 179, "endOffset": 198}], "year": 2016, "abstractText": "In this work we explore recent advances in Recurrent Neural Networks for large scale Language Modeling, a task central to language understanding. We extend current models to deal with two key challenges present in this task: corpora and vocabulary sizes, and complex, long term structure of language. We perform an exhaustive study on techniques such as character Convolutional Neural Networks or Long-Short Term Memory, on the One Billion Word Benchmark. Our best single model significantly improves state-of-the-art perplexity from 51.3 down to 30.0 (whilst reducing the number of parameters by a factor of 20), while an ensemble of models sets a new record by improving perplexity from 41.0 down to 24.2. We also release these models for the NLP and ML community to study and improve upon.", "creator": "LaTeX with hyperref package"}}}