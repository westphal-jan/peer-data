{"id": "1602.07024", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Feb-2016", "title": "Moving Target Defense for Web Applications using Bayesian Stackelberg Games", "abstract": "Web applications form a critical component of cyber security systems as they act as a gateway for many institutions. Vulnerabilities in web applications allow malicious actors to access and/or modify restricted data. Here the hackers have the opportunity to perform reconnaissance so as to gain knowledge about the web application layout before launching an attack, whereas the defender (administrator of the web application) must secure the application even with its potential vulnerabilities. In order to mask such vulnerabilities which are primarily associated with different individual configurations, Moving Target Defense systems were proposed wherein the defender switches between various configurations thereby making it difficult to attack with success, while maintaining a seamless experience for the genuine users. However, the design of good quality switching strategies is still an open problem which is crucial for the effectiveness of the Moving Target Defense approach. In this paper, we present a way to find effective switching strategies by modeling this ecosystem as a Bayesian Stackelberg game with the administrator as the leader and the hackers as the followers, which as we show succinctly captures various aspects of the Moving Target Defense systems. Furthermore, we show how to determine which vulnerability areas should be addressed first once the system is deployed and which attacker type uncertainties should be calibrated with high precision, for increasing the security of the web application. We present experimental results on a representative web application system demonstrating the utility of switching strategies obtained using the proposed method, and we discuss various future directions that are unique to the web application domain.", "histories": [["v1", "Tue, 23 Feb 2016 03:44:16 GMT  (1184kb,D)", "https://arxiv.org/abs/1602.07024v1", "10 pages, 2 figures"], ["v2", "Tue, 8 Nov 2016 18:20:38 GMT  (355kb,D)", "http://arxiv.org/abs/1602.07024v2", "7 pages, 2 figures"], ["v3", "Thu, 17 Nov 2016 01:04:59 GMT  (372kb,D)", "http://arxiv.org/abs/1602.07024v3", "9 pages, 4 figures"]], "COMMENTS": "10 pages, 2 figures", "reviews": [], "SUBJECTS": "cs.CR cs.AI cs.GT cs.MA", "authors": ["sailik sengupta", "satya gautam vadlamudi", "subbarao kambhampati", "marthony taguinod", "adam doup\\'e", "ziming zhao", "gail-joon ahn"], "accepted": false, "id": "1602.07024"}, "pdf": {"name": "1602.07024.pdf", "metadata": {"source": "CRF", "title": "Moving Target Defense for Web Applications using Bayesian Stackelberg Games", "authors": ["Sailik Sengupta", "Satya Gautam Vadlamudi", "Subbarao Kambhampati", "Marthony Taguinod", "Adam Doup\u00e9", "Ziming Zhao", "Gail-Joon Ahn"], "emails": ["rao}@asu.edu", "gahn}@asu.edu"], "sections": [{"heading": "1. INTRODUCTION", "text": "Present day web applications are widely used by businesses to provide services over the Internet. Oftentimes, sensitive business and user data are managed by these applications. Vulnerabilities in these web applications pose serious threats to the confidentiality and integrity of both businesses and users [16].\nThere exist numerous static (white-box) and dynamic (blackbox) analysis tools for identifying vulnerabilities in a system [2, 6]. These have become less effective in present times due to the increasing complexity of web applications, their dependency on downstream technologies, and the limited development and deployment time [22]. Worse yet, the attackers, with time on their side, can perform reconnaissance and attack. To address this challenge, we consider a Moving Target Defense (MTD) based approach [4],\nA shorter version of this paper appears in: Proceedings of the 15th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2016), May 9\u201313, 2016, Singapore.\nwhich complements the existing vulnerability analysis techniques through a defense-in-depth mechanism.\nThe MTD based approach dynamically shifts a system over time to increase the uncertainty and complexity for the attackers to perform probing and attacking [24], while ensuring that the system is available for legitimate users. As the window of attack opportunities decreases, the effort in finding and successfully executing an attack increases. Moreover, if an attacker succeeds in finding a vulnerability at one point in time, it may not be exploitable at another time because of the moving defense system, making the web application more resilient [18].\nVarious aspects that support Moving Target Defense approach such as, using multiple implementation languages, multiple database instances with synchronization, etc. are considered in different layers of web application architecture, along with ways to switch between them. However, the design of good quality switching strategies itself is left as an open problem. This is key to effectively leverage various move options\u2014thereby maximizing the complexity for the attacker and minimizing the damage for the defender.\nOur aim in this paper is to design effective switching policies for movement in the MTD system that maximize the security of the web application, given the set of components and configurations of the system which can be \u201cmoved around\u201d, while simultaneously considering realistic costs for \u201cmoving them around\u201d. In web applications, the defender (leader) deploys a system up-front. The attacker observes (or follows) the system over time before choosing an attack. These characteristics motivate us to formulate the MTD system as a repeated Bayesian Stackelberg Game (BSG). For this formulation to be meaningful in real-world applications, we use real world attack data for our model. We propose a framework to define attacker types for our game and automatically generate attack options for each of them by mining and characterizing Common Vulnerabilities and Exposures (CVEs). We develop a system that leverages the knowledge in public attack databases and expertise of system administrators for obtaining meaningful game utilities and switching costs respectively.\nFor computing the movement policy for the defender, we initially expected to be able to use existing solvers developed for physical security systems [17]. Unfortunately, none of them considered the cost of switching between strategies. Since this is highly relevant in cyber-security systems, we had to formulate an optimization problem to consider these costs when generating strategies.\nThe increased complexity in an MTD systems exacerbates the difficulty of prioritizing vulnerabilities that need to be fixed next. We define this problem formally and propose a preliminary solu-\ntion. Lastly, we talk about metrics to measure the robustness of switching strategies generated by various models when the uncertainty about attacker types vary in the real world.\nIn section 2, we introduce the reader to the different ways people have tried to address the problem of generating switching strategies for cyber-security systems. We introduce domain terminology related to MTD systems for web-applications in section 3. In section 4, we develop the Bayesian Game model for this system defining attacker types, attack classification, rewards generated from security databases and strategy switching costs. To find an effective switching strategy, we propose a solver that maximizes system security while accounting for switching costs in section 5. We empirically study the effectiveness and robustness of the strategy generated by our framework in section 6, comparing it to the stateof-the-art. We also formulate the problem of identifying critical vulnerabilities and propose a preliminary solution in section 6. We conclude the paper in section 7, highlighting promising research directions."}, {"heading": "2. RELATED WORK", "text": "Although there exists prior work on the design of switching strategies for MTD systems, most of it is domain specific. Evaluation of these strategies on real-world MTD systems for web applications is scarce. We discuss some of these works, highlighting their limitations in the domain of web applications, thus motivating the need for our solution. Existing efforts describe the use of randomized switching strategies, and show its effectiveness for MTD systems [24]. We empirically demonstrate that our strategy outperforms this state-of-the-art for web applications, especially when the cost of switching is negligible.\nAttacker-defender scenarios have been modeled earlier as stochastic games for attack-surface shifting [9]. Other works model the MTD problem as a repeated game where the defender uses uniform random strategy with the exception that the same defense configuration is not deployed in two consecutive rounds [23]. This work needs an in-depth analysis of code, which is unrealistic for complex web applications.\nSwitching strategies for MTD systems based on detection of probes by attackers are presented by [15]. Unfortunately, an accurate detection of attacks in web applications is difficult, if not impossible. Furthermore, such strategies can lead to a detrimental performance in repeated games if an intelligent attacker biases the system to switch more towards MTD configurations where the attacker attains higher reward. In [8], the MTD system is modeled as a game called PLADD, based on FlipIt games [19]. This work assumes that different agents control the server in different game rounds, which is impractical for most cyber-seccurity applications, essentially web applications. These techniques also fail to capture the reconnaissance aspect of the attackers which is shown to be an important aspect in the attack phase [12].\nIn [3], a game theoretic leader-follower type approach is presented for a dynamic platform defense where the strategies are chosen so as to be diverse, based on statistical analysis rather than being uniformly distributed. They find similarity among different configurations of the MTD system, which is difficult in the domain of web applications. The work fails to consider the uncertainty in the attacker model and the costs for switching.\nThese aspects of uncertainty in the attacker model and attacker reconnaissance are handled effectively via Bayesian Stackelberg Games (BSG), making it an appropriate choice for modeling the web applications domain. Our modeling could help us leverage the existing solution methods in the physical security domains [17] and provide scalable and optimal switching strategies for cyber-\nsecurity systems. Unfortunately, these works, to our knowledge, do not consider the cost the defenders incur when asked to switch from a particular strategy to another. Hence, we propose a solver that maximizes the defender\u2019s reward and minimizes the overall cost of switching between web-application configurations. Our solver is essentially an extension of the DOBSS solver [13]. Although there has been furhter development since DOBSS, the more recent solvers for BSGs make additional assumptions about the game structure\u2014either about the action sets of the defender, or the presence of hierarchical structure among attacker types [1], which do not hold for the web application domain.\nThe use of Common Vulnerabilitiy Scoring System (CVSS) for rating attacks is well studied in security [7]. We describe this metric later. CVSS provides a strong backbone for obtaining utilities for our game theoretic model. None of the existing works (to our knowledge) talk about the pragmatic aspect of prioritizing vulnerabilites in MTD systems. Also, there does not seem to be any standard metrics to capture the robustness of strategies generated by a model. We address both these issues in the upcoming sections."}, {"heading": "3. MOVING TARGET DEFENSE FOR WEB APPLICATIONS", "text": "In this section, we present a brief overview of the web application domain and its functionality which will be useful for understanding the challenges involved in generating solution strategies."}, {"heading": "3.1 Configuration", "text": "A configuration set for a web application stack is denoted asC = C1\u00d7C2 \u00b7 \u00b7 \u00b7\u00d7Cn where there are n-technological stacks. Here, Ci denotes the set of technologies that can be used in the i-th layer of the application stack. A valid configuration c is an n-tuple that preserves the system\u2019s operational goals.\nConsider a web application that has two layers (n = 2) where the first layer denotes the coding language the web-application was coded in and the second layer denotes the database that stores the data handled by this application. Say, the technologies used in each layer areC1 = {Python, PHP} andC2 = {MySQL, postgreSQL}. A valid configuration can be (PHP, MySQL). The diversity of an MTD system, which is the number of valid configurations, can be 4 (at max) in this case."}, {"heading": "3.2 Attack", "text": "Software security is defined in terms of three characteristics - Confidentiality, Integrity and Availability [10]. In a broad sense, an attack on a web application is defined as an act that compromises any of the aforementioned characteristics. The National Vulnerability Database (NVD) is a public directory of known vulnerabilities and exposures affecting all technologies that can be used in a web application. The Common Vulnerabilities and Exploits (CVEs) in this database list vulnerabilities and corresponding attacks that can be used to compromise an application using the affected technology. As each CVE has an exploit associated with it, we use the terms vulnerability and attack interchangeably going forward."}, {"heading": "3.3 Switching Strategy", "text": "This is a decision making process for the defender to select the next valid system configuration c\u2032 given c as the present system configuration (where both c, c\u2032 \u2208 C). If pc represents the probability that c is chosen in a given deployment cycle through randomization, a switching strategy is f : C \u2192 pc where\n\u2211 c\u2208C pc = 1 \u2200 pc \u2208\n[0, 1]. To add to the complexity, the cost for switching from a configuration c to another configuration c\u2032 can be nontrivial and non-\nuniform. Thus, the aim of a good strategy is to maximize the effectiveness of an MTD system while trying to minimize the cost for switching. Present state-of-the-art MTD system for web applications use a uniformly distributed switching strategy (pc = 1/|C|) and assume that switching between configurations incur a uniform cost [18].\nWe now develop a game theoretic system to generate switching strategies for the MTD web application that 1) shows a uniformly distributed switching strategy is sub-optimal and 2) considers the non-negative non-uniform costs of switching between different configurations of an MTD system."}, {"heading": "4. GAME THEORETIC MODELING", "text": "In this section, we model the setup of MTD systems in as a repeated step Bayesian Game."}, {"heading": "4.1 Agents and Agent types", "text": "There are (N =) two players in our game, a defender and an attacker. The set \u03b8i is the set of types for player i (= {1, 2}). Thus, \u03b81 and \u03b82 denotes the set of defender and attacker types respectively. The j\u2212th attacker type is represented by \u03b82j .\nWhen an attacker attacks an application, its beliefs about what (resource/data) is most valuable to the application owner (defender) remains consistent. Thus, we assume that the attacker knows that there is only one type of defender when (s)he attacks a particular web application. Thus, we have |\u03b81| = 1.\nWe consider finite types of attackers. Each attacker type is defined in our model using a 3 tuple,\n\u03b82i = \u3008name, {(expertise, technologies) . . . }, probability\u3009\nwhere the second field is a set of two dimentional values that express an attacker\u2019s expertise (\u2208 [0, 10]) in a technology. The rationale for using values in this range stems from the use of Common Vulnerability Scoring System (CVSS) described later. Lastly, the set of attacker types have a discrete probability distribution associated with it. The probability P\u03b82j represents the defender\u2019s belief about the attacker type \u03b82j attacking their application. Obviously, the probability values of all attacker types sum up to one.\u2211\n\u03b82j\u2208\u03b82\nP\u03b82j = 1\nNote that one can define attacker expertise over a \u2018category of attacks\u2019 (like \u2018BufferOverflowAttacks\u2019) instead of technology specific attacks. We feel the latter is more realistic for our domain. This definition captures the aspect that an attacker type can have expertise in a set of technologies. Since, these attacker types and the probability distribution over them are application specific, it is defined by a domain expert and taken as an input to our proposed model. For instance, a defender using a no-SQL database in all configurations of his MTD system, assigns zero probability to an \u2018SQL_database\u2019 attacker type because none of their attacks can compromise the security of his present system.\nThe assumption that the input probability distribution over all the attacker types can be accurately specified is a strong one. We later discuss how errors in judgment can affect the effectiveness of a switching strategy and define a measure to capture the robustness of the generated policy in such circumstances."}, {"heading": "4.2 Agent actions", "text": "We define A\u03b8i as a finite set of actions available to player i. The defender action set, A\u03b81 is a switch action to a valid configuration, c of the web application. The maximum number of actions (or pure\nstrategies) for the defender can ideally be |C1| \u00d7 |C2| \u00b7 \u00b7 \u00b7 \u00d7 |Cn|. This might be lower since a technology used in layer x might not be compatible when paired with a technology used in layer y ( 6= x) rendering that configuration invalid.\nFor the attacker, A\u03b82 represents the set of all attacks used by atleast one attacker type. A particular attack a belongs to the set A\u03b82 if it affects atleast one of the technologies used in the layers for our web application (C1 \u222a C2 \u00b7 \u00b7 \u00b7 \u222a Cn).\nWe now define a function f : (\u03b82t, a) \u2192 {1, 0} for our model. The function implies an attack a is a part of the attacker type \u03b82t\u2019s arsenal A\u03b82t(\u2286 A\u03b82) if the value of the function is 1. This function value is based on the similarity between (i) the expertise of the attacker type contrasted with the \u2018exploitability\u2019 necessary to execute the attack, and (ii) the attacker\u2019s expertise in the technology for which the attack can be used. We provide a concrete definition for the function f after elaborating on what we mean by exploitability of an attack.\nFor (almost all) CVEs listed in the NVD database, we have a sixdimensional CVSS v2 vector representing two independent scores \u2013 Impact Score (IS) and Exploitability Score (ES). For an attack action a, ESa (\u2208 [0, 10]) represents the ease of exploitability (higher is tougher). For each attack, the database also lists a set of technologies it affects, say T a.\nLet us consider the set of technologies an attacker type t has expertise in is Tt. Now we define the function f as,\nf(\u03b82t, a) = { 1, iff Tt \u2229 T a 6= \u03c6 \u2227 ESa \u2264 expertiset 0 otherwise"}, {"heading": "4.3 Reward values for the Game", "text": "Now that we have attack sets for each attacker type, the general reward structure for the proposed game is defined as follows:\nRAa,\u03b82i,c =  +xa if a \u2282 \u03c5(c)\u2212ya if a can be detected or a \u2282 c\u20320 otherwise RDa,\u03b82i,c =  \u2212xd if a \u2282 \u03c5(c)+yd if a can be detected or a \u2282 c\u2032 0 otherwise\nwhere RAa,\u03b82i,c and R D a,\u03b82i,c are the rewards for the attacker type and the defender respectively, when the attacker type \u03b82i uses an attack action a against a configuration c (\u2208 C). The function \u03c5(c) represents the set of security vulnerabilities (CVEs) that configuration c has. Also, c\u2032 refers to a honey-net configuration. A honey-net is a configuration setup with intentional vulnerabilities to invite attackers for catching (or observing) them.\nNote that the reward values when a attacker does not attack (NOOP action), is zero. Moreover, a defender gets zero reward for successfully defending a system. We reward him positively only if he/she is able to reveal some more information or catch the attacker without impacting operation requirements for the non-malicious users (or using honey-nets). He gets a negative reward if an attacker successfully exploits his(/her) system.\nTo obtain reward values for the variables xa, ya, xd and yd, we make use of CVSSv2 metric. This metric provides the Impact (IS) and Exploitability Scores (ES), stated above, which are combined to calculate a third score called Base Score (BS) [11]. Using these, we now define the following:\nxd = \u22121 \u2217 IS xa = BS\nNote that BS considers both the impact and the exploitability. When the IS for two attacks are the same, the one that is easier\nto exploit gets the attacker a higher reward value. The ease of an attack can be interpreted in terms of the resource and effort spent by an attacker for an attack Vs. the reward (s)he attains by harming the defender. Although the robustness of our framework provides provisions for having yd and ya, detecting attacks on a deployed system or setting up honey-nets is still in its nascent stages. Hence, there are no actions where values of yd or ya are required in our present application.\nBefore we move on, we describe briefly what security dimensions the independent scores (IS and ES) are actually trying to capture in the context of a real world software system. For this purpose, we first define the 6 independent values that generate these scores.\n\u2022 Access Vector (AV) is dependent on the amount of access an attacker needs to exploit a vulnerability. Thus, an attack that needs physical access to a system will have lower score than one that can be exploited over the Internet by any machine.\n\u2022 Access Complexity (AC) represents the complexity of exploiting an attack. A buffer overflow attack on an Internet service is less complex than an e-mail client vulnerability in which a user has perform attachment downloads followed by executing it and hence has lower AC value.\n\u2022 Authentication (Au) level required to execute the attack. For example, if no sign-up account is required to exploit the system, this value is high. In contrast, if one needs multiple accounts to exploit the vulnerability, the value is low.\n\u2022 Confidentiality Impact (C) scores are low if only some (nonrelevant) information gets leaked. Highest impact occurs when say, the entire database is compromised if the vulnerability is successfully exploited.\n\u2022 Integrity Impact (I) refers to the attacker\u2019s power to modify files or behaviour of a system if he executes the exploit successfully. The more the power\u2013 say the attacker is able to change code or remove arbitrary files in the system\u2013 the higher this value.\n\u2022 Availability Impact (A) represents the power of a successful exploit to bring down the availability of a system. A successful Denial of Service (DoS) that brings down an application server, will have high impact.\nFrom these values, one can obtain the two independent scores using the following formulas,\nES = 20 \u2217 (AV ) \u2217 (AC) \u2217 (Au) IS = \u221210.41 \u2217 (1\u2212 (1\u2212 C)(1\u2212 I)(1\u2212A))\nA rigorous treatment of assigning these values can be found in [11]. The CVSS values are generated by security experts across the globe and the database is updated every single day.\nOur model takes a time range as input. It then parses all the CVEs (a) from the NVD in that time range to finally filter out the ones that can affect atleast one of the configurations in our system (a \u2282 \u03c5(ci)). Note that old CVEs are irrelevant for generating attack sets for a relatively new MTD system as they either have no effect on the updated versions of the technologies they can affect or have popular solutions to prevent them while developing the application. For our application, we obtain this input range from our security experts."}, {"heading": "4.4 Switching Cost", "text": "The switching costs can be represented by aKn\u00d7n matrix where the n rows (and columns) denote the n system configurations. The\ncell Kij denotes the cost of switching when the defender moves from configuration i to configuration j. As mentioned earlier, the values in K are all non-negative. Our security experts, who have written the code to automatically move from one configuration to another, hand code these values in each cell of the martix. We provide some guidance in choosing these values here and give a concrete example on how we selected these for our application later.\nIf there is no common technology between configurations c and c\u2032 involved in a switch operation, the cost will be large. Also, switching technologies in a specific layer may incur more cost than switching technologies in other layers. In the developed MTD system, we find that switching between databases incur large costs because the structure of the data needs to be changed for shifting, and the time required to copy huge amounts of data from one database to another must also be accounted for.\nThe matrix K for our system turns out to be symmetric, i.e. Kij = Kji \u2200 i, j \u2208 {1, . . . n}. Also, Kii = 0, which implies that there is no cost if no configuration switch occurs. Note that although our security experts think this is the structure of rewards for the developed system, the modelling is generic enough to allow for asymmetric costs. Lastly, we choose the values of Kij in the range [0, 10]. The reason for this upper bound becomes clear in the upcoming section."}, {"heading": "5. SWITCHING STRATEGY GENERATION", "text": "In this section, we first introduce the notion of Stackelberg Equilibrium for our security game, that gives us a defender strategy that maximizes his reward (and thus the security of the system). We briefly talk of optimization methods, relevant to our domain, that can produce this. Finally, we incorporate the costs of switching into the objective function and propose our solver."}, {"heading": "5.1 Stackelberg Equilibrium", "text": "The strategy generated for the designed game needs to capture the reconnaissance aspect. Note that the game starts only after the defender has deployed the web application, acting as a leader. This now becomes a repeated game in which an attacker can observe a finite number of switch moves and probabilistically learn the switching strategy (since |C| \u221e) of the defender. Thus, the defender has to select a strategy that maximizes his reward in this game, given that the attacker knows his strategy. This is exactly the problem of finding the Stackelberg Equilibrium in a Bayesian Game [20]. The resulting mixed strategy is the switching strategy for the defender in our MTD system. Unfortunately, this problem becomes NP-hard in our case because of multiple attacker types [5].\nBefore we find a strong Stackelberg Equilibrium for our proposed game, we state a couple of well founded assumptions we make. Firstly, an attacker chooses a pure strategy, i.e., a single attack action that maximizes his reward value. This assumption is popular in prior work on security games because for every mixed strategy for the attacker, there is always a pure strategy in support for it [14]. Secondly, we assume that the pure strategy of an attacker type is not influenced by the strategy of other attacker types. This is not limiting for our web application domain since an attacker type\u2019s attack selection is independent of the attack action chosen by another type.\nTo solve for the optimal mixed strategy, one can use the Decomposed Optimal Bayesian Stackelberg Solver (DOBSS) [13]. This optimizes the expected reward of the defender over all possible mixed strategies for the defender (~x), and pure strategies for each attacker type (~n\u03b82i ) given the attacker type uncertainty (~P\u03b82i ). We now define the objective function of the Mixed Integer Quadratic\nProgram (MIQP) in Equation 1.\nmax x,n,v \u2211 c\u2208C \u2211 \u03b82i\u2208\u03b82 \u2211 a\u2208A\u03b82i P\u03b82iR D a,\u03b82i,c xcn \u03b82i a (1)\nNotice that this does not consider that switching costs between defender strategies. Essentially, this means the formulation assumes that switching costs are uniform. Before we address this limitation in the upcoming subsection, we take a little digression.\nFor our scenario, we have many attack actions. Thus, we observe that solving the MIQP version is more efficient (in computation time and memory usage) than solving the Mixed Integer Linear Program (MILP) version of the DOBSS. This can be attributed to the fact that the MILP formulation results in an increase in the dimensions of the solution space. Theoretically, the MIQP solves for |C|+ \u2211 \u03b82i\u2208\u03b82 \u2211 aj\u2208A\u03b82i\n|aj | variables where as the MILP solves for |C| \u2217 \u2211 \u03b82i\u2208\u03b82 \u2211 aj\u2208A\u03b82i |aj | variables."}, {"heading": "5.2 Incorporating Switching Costs", "text": "As defined in the last section, the cost for switching from a configuration i to a configuration j can be represented as Kij . The probability the system is in configuration i and then switches to configuration j is xi \u00b7 xj . Thus, the cost incurred by the defender for a switch action from i to j is Kij \u00b7 xi \u00b7 xj . The expected cost for any switch action is\n\u2211 i\u2208C \u2211 j\u2208C Kij \u00b7 xi \u00b7 xj .\nTo account for cost, we can subtract this from the objective function of Equation 1 with a cost-accountability factor \u03b1 (\u2265 0) to obtain\nmax x,n,v \u2211 c\u2208C \u2211 \u03b82i\u2208\u03b82 \u2211 a\u2208A\u03b82i P\u03b82iR D a,\u03b82i,c xcn \u03b82i a \u2212\u03b1\u00b7 \u2211 i\u2208C \u2211 j\u2208C Kij \u00b7xi\u00b7xj\nUnfortunately, this results in a Bilinear Mixed Integer Programming problem, which is not convex. To ameliorate this problem, we now introduce new variables wij that essentially represent an approximate value of xi \u00b7 xj . We first use the piecewise linear McCormick envelopes to design a convex function using these wijs that estimates a good solution to this problem [21]. Along with these constrains, we introduce further constrains which we describe after introducing the final MIQP convex optimization problem as follows,\nmax x,n,v \u2211 c\u2208C \u2211 \u03b82i\u2208\u03b82 \u2211 a\u2208A\u03b82i P\u03b82iR D a,\u03b82i,c xcn \u03b82i a \u2212 \u03b1 \u00b7 \u2211 i\u2208C \u2211 j\u2208C Kijwij\n(2) s.t. \u2211 c\u2208C xc = 1 (3)\n\u2211 a\u2208A\u03b82i n\u03b82ia = 1 (4)\n0 \u2264 v\u03b82i \u2212 \u2211 c\u2208C RAa,\u03b82i,cxc \u2264 (1\u2212 n \u03b82i a )M (5)\nwij \u2265 0 \u2200 i, j (6) wij \u2264 xi \u2200 i, j (7) wij \u2264 xj \u2200 i, j (8)\u2211\nj\u2208C \u2211 i\u2208C\nwij = 1 \u2200 i, j (9)\u2211 j\u2208C\nwij = xi \u2200 i (10)\u2211 i\u2208C wij = xj \u2200 j (11)\nxc \u2208 [0 . . . 1], n\u03b82ia \u2208 {0, 1}, v\u03b82i \u2208 R\n\u2200 c \u2208 C, \u03b82i \u2208 \u03b82, a \u2208 A\u03b82i where M is a large positive number. ~n\u03b82i and v\u03b82i give the pure strategy and its corresponding reward for the attacker type \u03b82i respectively, and ~x gives the mixed switching strategy for the defender. (5) solves the dual problem of maximizing rewards for each attacker type (v\u03b82i ) given the defender\u2019s strategy. This ensures that attackers always select the best attack action. The constrains (6), (7) and (8) represent the McCormick envelope that provides lower and upper bounds on eachwij . Since we consider all possible switches,\u2211 j\u2208C \u2211 i\u2208C xi \u00b7 xj = 1. This is enforced by constrain (9). Lastly, for\neach i, \u2211 j\u2208C xi \u00b7xj = xi \u00b7 ( \u2211 j\u2208C xj) = xi. This is represented by the constrains (10) and (11). If we now allow the maximum cost of switching to be 10, we can see that the values for the cost is comparable in magnitude to the value of the defenders rewards. This helps us to provide a semantic meaning for the cost-accountability factor, \u03b1.\nThe first term in the objective function seeks to maximize the defender\u2019s reward, which in turn maximizes the security of the web application. The second term on the other hand, seeks to reduce the expected cost of the switching actions. Thus, \u03b1 represents how much importance is given to the cost of switching Vs. the level of security desired. Consider the extreme cases, when \u03b1 = 0, we are producing the most secure strategy (which is the Stackelberg Equilibrium) and considering switching between configurations incur zero costs. This is the sub-set of solutions that are developed mostly for physical security systems. In contrast to that, when \u03b1 = 1, we are saying that we consider switching costs as important as the security of our MTD application.\nChoosing the correct value of \u03b1 is not trivial and often dependent on the specific web-application. For example, if a banking system someday seeks to operate on a MTD system, we hope it puts more weight on security than switching costs, selecting low \u03b1 values. To provide a sense to the reader, we later show in the experimental section, how strategies and reward values are effected with changing alpha values."}, {"heading": "6. EMPIRICAL EVALUATION", "text": "The goal of this section is to answer three key questions. Firstly, does our proposed Bayesian Stackelberg Game (BSG) model generate better strategies that the state-of-the-art? Secondly, can we effectively compute the set of critical vulnerabilities? Lastly, who are the sensitive attacker types and how robust is our model?\n6.1 Test Bed Description\nTo answer the questions mentioned above, we develop a real world MTD web application (shown in Figure 1) with 2 layers. The key idea of applying MTD to web applications requires you to have several versions of the same system, each written in either a different language, using a different database, etc.\nThis diversity is not ubiquitous in legacy web applications, due to cost, time, and resources required to build several versions of the same web application. To aid this, we developed a framework to automatically generate the diversity necessary for this web application. The current prototype is able to convert a web application coded in Python to an equivalent one coded in PHP, and vice versa, as well as a web application using a MySQL database to an identical version that uses PostgreSQL, and vice versa. In the future, as more and more variations are developed, the set of defender\u2019s actions will increase.\nThe present set of valid configurations for our system is C = {(PHP, MySQL), (Python, MySQL), (PHP, postgreSQL), (Python, postgreSQL )}. The costs for switching between configurations is shown in Table 1. These cost values generated by our system administrators are based on the following considerations:\n\u2022 Switching between different languages while keeping the same database dialect incurs minimal cost - workload is primarily done is primarily on rerouting to the correct server with the source language\n\u2022 Switching between different database dialects while keeping the same language incurs a slightly higher cost due to the conversion required for the database structure and its contents. One also has to account for copying large amounts of data to the database used in the current system configuration.\n\u2022 Switching between different database dialects AND different languages incur the most cost due to the combination of the costs of conversion for the database as well as the penalty for rerouting to the correct server with the source language.\nThe attacker types along with the attack action set size are defined in Table 2. We mined the NVD for obtaining CVE data from January, 2013 to August, 2016 to generate these attack sets. If the stakes of getting caught are too high for an attacker type given an MTD system, he/she may choose not to attack. Hence, we have a NO-OP action for each attacker type.\nThe optimization problems for the experiments were solved using Gurobi on an Intel Xeon E5 2643v3@3.40GHz machine with 6 cores and 64GB of RAM."}, {"heading": "6.2 Strategy Evaluation", "text": "We evaluate our method using Bayesian Stackelberg Games on our real life web application against the Uniform Random Strategy (URS), which is the state-of-the-art in such systems [18]. We plot the values of the objective function in Equation 2 for both the\nstrategies as \u03b1 varies from 0 to 1. For URS, we use the exact values of wij = 0.25 \u2217 0.25 = 0.0625 \u2200 i, j. The plot is shown in Figure 2. Both are straight lines because although the value of \u03b1 changes, the strategy for URS is same (by definition) and the one generated by BSG also remains the same. The latter case came as a surprise to us initially. On further investigation, we noticed that in the formulated game for our web-application, the Stackelberg Equilibrium for our application (luckily) coincides with the least switching cost strategy.\nThese attacker and defender strategies is shown in Table 3 alongwith the value of the defender\u2019s reward (i.e. the first term in the objective function in Equation 2). Notice that, not only is the mixed strategy generated by BSG more secure than URS, it leverages fewer configurations than all valid configurations |C| = 4 the system has to offer. This result is in unison with previous work in cyber-security which show that having many configurations does not necessary imply that all of them have to be used for providing the best security [3].\n6.2.1 Studying the effect of \u03b1-values To empirically show that our solver is actually considering costs\nof switching, we change the value for switching from (PHP, postgreSQL ) to (Python, postgreSQL) and vice-versa from 2 (yellow boxes in Table 1) to 10. We plot this scenario in Figure 3. As soon as \u03b1 \u2265 0.4, the BSG generates (0.25, 0.25, 0.25, 0.25, 0.25) (which is URS) as the most optimal strategy. After analysis, we note that this happens because the most powerful attack actions in the arsenal of the attacker types are for the systems (PHP, MySQL) and (Python, MySQL). When, one does not prioritize switching costs (\u03b1 \u2208 {0, 0.1, 0.2, 0.3}), the system keeps switching between the more secure configurations nullifying the good attacks of the attackers. As switching costs start to get more significant (\u03b1 \u2208 {0.4, 0.5, . . . 1.2}), the objective function value reduces if it sticks to the stronger configurations since switching costs are now high for these. It switches to the URS in this case. Beyond that, it switches\nto the strategy (0.25, 0.5, 0, 0.25) as \u03b1 keeps on increasing. When \u03b1 becomes close to 2, it completely ignores the security of the system and tries to minimize the switching cost by proposing the strategy (0.5, 0.5, 0, 0) as the cost for switching between (PHP, MySQL) and (Python, MySQL) is the least (= 2).\nIn the bottom of Figure 3, we showcase the change in the values of objective function. At the start, the BSG generates a better strategy when compared to URS. When the BSG strategy becomes the same as the URS (for 0.4 \u2264 \u03b1 \u2264 1.2), we observe that the objective function value for BSG is lower than URS. This is not surprising since BSG is merely trying to estimate the value xi \u00b7 xj with the variables wij , whereas URS is using the exact value. As we increase \u03b1 further, we are essentially discouraging an MTD system, since now the cost of switching has become so high, whereas naive URS pays no heed to this."}, {"heading": "6.3 Identifying Critical Vulnerabilities", "text": "In real-world development teams, it is impossible to solve all the vulnerabilities, especially in a system with so many technologies. In current software systems, given a set of vulnerabilities, a challenging question often asked is which vulnerabilities should one fix\nto improve the security? For an MTD system, this becomes a tough problem since the defender needs to reason about multiple attacker types\u2013 their probabilities and attack actions. For a given k, the set of k vulnerabilities, which on being fixed, result in the highest gain in defender strategy, is termed as the k critical vulnerability set (k\u2212CV).\nTo address this problem, we remove each k-sized attack set from the set of all attacks (A\u20322 = A2 \\ D \u2200 D \u2282 A2 & |D| = k) and evaluate the objective function (Equation 2). The sets A\u20322 that yield the highest objective values, provide the vulnerabilitiesD that should be fixed to improve the defender\u2019s system.\nWe tried to study this complicated behaviour for some toy examples before applying it to our application. An interesting phenomenon we noticed was that a k-set critical vulnerabilities (k\u2212CV) is not always a subset of the (k+1)\u2212CV. Suppose we want to find 3 vulnerabilities that we want to fix. Since it is not just a super-set of the 2-CV, we need to solve this problem from the scratch with k = 3. Hence, there is going to be combinatorial explosion here. As the value of k increases, we end up solving |A\u20322| = (|A2| k ) MIQP problems to identify the k\u2212CVs.\n6.3.1 Finding Critical Vulnerabilities in the Developed System\nFor our system, we start with k = 1, we increase number of critical vulnerabilities to be found by 1 at each step. The result remains the same for \u03b1 \u2208 [0, 1] for our system. We do not play around with \u03b1 beyond this, mostly because this would be unrealistic for any practical application. Unfortunately, the brute force approach and the scalability of algorithms for solving normal extensive form BSGs proves to be a key limitation.\nThis is not a surprise since the total number of unique CVEs spread out among the attackers is 287. When k = 3, we end up solving ( 287 3 ) optimization problems, which fails to scale in both time and memory. Thus, we only show critical vulnerabilities identified up to k = 2 (in Table 4) using \u03b1 = 0.2.\nAt present, we are trying to develop a single MIQP formulation that tries to approximately generate the k-CV set. To reduce the combinatorial explosion, we plan to use switch variables that can turn attack actions on and off. This comes at the cost of increasing the number of variables in the formulated optimization problem."}, {"heading": "6.4 Model Robustness & Attacker Type Sensitivity", "text": "It is often the case that a web application administrator (defender) cannot accurately specify the probability for a particular attacker type. In this section, we see how this uncertainty affects the optimal rewards generated by the system. We provide a notion for determining sensitive attacker types and measuring the robustness of a switching strategy.\nFor each attacker type i, we vary the probability P\u03b82i by \u00b1x% (Pnew\u03b82i = P\u03b82i(1 \u00b1 x 100\n)) where x is the sensitivity factor, which can be varied from a low value to a high value as needed. Note that now p = P\u03b82i\u00d7 x100 needs to be adjusted or distributed amongst the\nprobabilities of the remaining attacker types. To make sure that this distribution is done such that the sensitivity of attacker i actually stands out, we propose to distribute p amongst the other attacker types using a weighted model as per their existing probabilities as shown below. For attacker j ( 6= i), its new probability would be:\nPnew\u03b82j = P\u03b82j (1\u2213 p\u2211\nk(6=i) P\u03b82k\n) (12)\nWhen x% is subtracted from the probability ~P\u03b82i , then the sign in the above equation becomes positive, and vice-versa.\nWe now formally define the loss in reward to the defender as the probability distribution over the attacker types change. Let Ro be the overall reward for the defender when he uses the mixed strategy for the assumed (and possibly incorrect) model of attacker type uncertainty (~P\u03b82 ) on the true model (~P new \u03b82\n). LetRn be the defender\u2019s optimal reward value for the true model. We compute the Normalized Loss in Rewards (NLR) for the defender\u2019s strategy as follows:\nNLR = Rn\u2212Ro Rn\n(13)\nNote that NLR values are \u2265 0. Higher values of NLR represent more sensitive attacker types. Inaccurate probability estimates for the sensitive attackers can be detrimental to the security of our application. Note that lower NLR values indicate that a generated strategy is more robust.\n6.4.1 Evaluation Based on the Developed System We compute the attacker sensitivity for our system varying the\nprobability of each attacker type from \u2212100% to +100% (of its modeled probability) with 10% step sizes. We plot the results in Figure 4 using Equation 13. The Mainstream and Database hacker (MH & DH) are the least sensitive attacker types. The NLR values for both these attackers are 0. This is the case since the real world attack action used by these types remain the same even when their probabilities change. On the other hand, if the probability associated with the Script Kiddie (SK) is underestimated in our model, we see that the strategies deviate substantially from the optimal.\nFor our experiments in this section, we use \u03b1 = 0.2. The max NLR for our BSG strategy is 2.35 Vs. 9 for URS. The average of the 60 NLR values is 0.061 for BSG and 0.88 for URS. These values indicate our model is more robust to variance in attacker type uncertainty than the present state-of-the-art."}, {"heading": "7. CONCLUSIONS AND FUTURE WORK", "text": "In this paper, we propose a method to generate a switching strategy for real-world web application based on the Moving Target Defense (MTD) architecture. To find an effective switching strategy, we model the system as a repeated Bayesian game. We develop methods to assign attack actions to attacker types and generate realistic utilities based on expertise of security professionals. For obtaining real-world attack data, we mine vulnerabilities in the National Vulnerability Database (NVD) and obtain utilities based on the Common Vulnerability Scoring System (CVSS). We formulate an optimization problem which outputs a switching strategy that maximizes system security while accounting for switching costs. The generated strategy is shown to be more effective than the stateof-the-art for a real-world application. We also provide metrics that can be used to validate the robustness of switching strategies, absent in literature for multi-agent cyber-security systems. Lastly, we propose the problem of identifying critical vulnerabilities and provide a solution.\nThe techniques in this paper are not limited to only web applications. The attack actions mined from the security databases relate to\nall kinds of technologies, like operating systems, coding languages etc. Hence, the modelling should be relevant to any software applications using the MTD architecture. It would be interesting to see how effective they are in such scenarios.\nInvestigating the reward structure for a particular problem has helped design provably fast solvers in the physical security domains. We believe this direction of research might help in developing faster solvers, alleviating the scalability problem of identifying critical vulnerabilities, for the cyber-security domain as well."}, {"heading": "8. ACKNOWLEDGMENTS", "text": "This work was partially supported by the grants from National Science Foundation (NSF-SFS-1129561) and the Center for Cybersecurity and Digital Forensics at Arizona State University."}], "references": [{"title": "Gradient methods for stackelberg security games", "author": ["K. Amin", "S. Singh", "M. Wellman"], "venue": "AAMAS", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "Saner: Composing static and dynamic analysis to validate sanitization in web applications", "author": ["D. Balzarotti", "M. Cova", "V. Felmetsger", "N. Jovanovic", "E. Kirda", "C. Kruegel", "G. Vigna"], "venue": "Security & Privacy 2008. IEEE Symposium, pages 387\u2013401", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "A game theoretic approach to strategy determination for dynamic platform defenses", "author": ["K.M. Carter", "J.F. Riordan", "H. Okhravi"], "venue": "ACM MTD Workshop, 2014, MTD \u201914. ACM", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Moving-target defenses for computer networks", "author": ["M. Carvalho", "R. Ford"], "venue": "Security Privacy,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Computing the optimal strategy to commit to", "author": ["V. Conitzer", "T. Sandholm"], "venue": "Proceedings of the 7th ACM Conference on Electronic Commerce, EC \u201906, pages 82\u201390, New York, NY, USA", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2006}, {"title": "Enemy of the state: A state-aware black-box web vulnerability scanner", "author": ["A. Doup\u00e9", "L. Cavedon", "C. Kruegel", "G. Vigna"], "venue": "USENIX Security Symposium", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Quantifying security risk level from cvss estimates of frequency and impact", "author": ["S.H. Houmb", "V.N. Franqueira", "E.A. Engum"], "venue": "JSS, 83(9):1622\u20131634", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2010}, {"title": "Evaluating moving target defense with pladd", "author": ["S. Jones", "A. Outkin", "J. Gearhart", "J. Hobbs", "J. Siirola", "C. Phillips", "S. Verzi", "D. Tauritz", "S. Mulder", "A. Naugle"], "venue": "Technical report, Sandia National Labs-NM, Albuquerque", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Game theoretic approaches to attack surface shifting", "author": ["P. Manadhata"], "venue": "Moving Target Defense II, volume 100 of AIS, pages 1\u201313. Springer New York", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Information systems security: A comprehensive model", "author": ["J. McCumber"], "venue": "Proceedings of the 14th National Computer Security Conference", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1991}, {"title": "and S", "author": ["P. Mell", "K. Scarfone"], "venue": "Romanosky. Cvss v2 complete documentation", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2007}, {"title": "Finding focus in the blur of moving-target techniques", "author": ["H. Okhravi", "T. Hobson", "D. Bigelow", "W. Streilein"], "venue": "Security & Privacy, IEEE, 12(2):16\u201326", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2014}, {"title": "Playing games for security: An efficient exact algorithm for solving bayesian stackelberg games", "author": ["P. Paruchuri", "J.P. Pearce", "J. Marecki", "M. Tambe", "F. Ordonez", "S. Kraus"], "venue": "AAMAS, 2008, pages 895\u2013902", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2008}, {"title": "Deployed ARMOR protection: the application of a game theoretic model for security at the los angeles international airport", "author": ["J. Pita", "M. Jain", "J. Marecki", "F. Ord\u00f3\u00f1ez", "C. Portway", "M. Tambe", "C. Western", "P. Paruchuri", "S. Kraus"], "venue": "AAMAS 2008, Industry and Applications Track Proceedings, pages 125\u2013132", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2008}, {"title": "Empirical game-theoretic analysis for moving target defense", "author": ["A. Prakash", "M.P. Wellman"], "venue": "ACM MTD Workshop, 2015", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "JPMorgan Chase Hacking Affects 76 Million Households", "author": ["J. Silver-Greenberg", "M. Goldstein", "N. Perlroth"], "venue": "The New York Times", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2014}, {"title": "From physical security to cyber security", "author": ["A. Sinha", "T. Nguyen", "D. Kar", "M. Brown", "M. Tambe", "A.X. Jiang"], "venue": "Journal of Cybersecurity", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2016}, {"title": "Toward a Moving Target Defense for Web Applications", "author": ["M. Taguinod", "A. Doup\u00e9", "Z. Zhao", "G.-J. Ahn"], "venue": "Proceedings of 16th IEEE IC-IRI", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "Flipit: The game of \u201cstealthy takeover", "author": ["M. Van Dijk", "A. Juels", "A. Oprea", "R.L. Rivest"], "venue": "Journal of Cryptology, 26(4):655\u2013713", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2013}, {"title": "Market structure and equilibrium", "author": ["H. Von Stackelberg"], "venue": "Springer SBM", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}, {"title": "Piecewise milp under-and overestimators for global optimization of bilinear programs", "author": ["D.S. Wicaksono", "I. Karimi"], "venue": "AIChE Journal, 54(4):991\u20131008", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2008}, {"title": "Owasp top-10", "author": ["D. Wichers"], "venue": "OWASP", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2013}, {"title": "Adaptive attacker strategy development against moving target cyber defenses", "author": ["M. Winterrose", "K. Carter", "N. Wagner", "W. Streilein"], "venue": "arXiv:1407.8540", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2014}, {"title": "Towards a theory of moving target defense", "author": ["R. Zhuang", "S.A. DeLoach", "X. Ou"], "venue": "ACM MTD Workshop, 2014, pages 31\u201340. ACM", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 15, "context": "Vulnerabilities in these web applications pose serious threats to the confidentiality and integrity of both businesses and users [16].", "startOffset": 129, "endOffset": 133}, {"referenceID": 1, "context": "There exist numerous static (white-box) and dynamic (blackbox) analysis tools for identifying vulnerabilities in a system [2, 6].", "startOffset": 122, "endOffset": 128}, {"referenceID": 5, "context": "There exist numerous static (white-box) and dynamic (blackbox) analysis tools for identifying vulnerabilities in a system [2, 6].", "startOffset": 122, "endOffset": 128}, {"referenceID": 21, "context": "These have become less effective in present times due to the increasing complexity of web applications, their dependency on downstream technologies, and the limited development and deployment time [22].", "startOffset": 197, "endOffset": 201}, {"referenceID": 3, "context": "To address this challenge, we consider a Moving Target Defense (MTD) based approach [4],", "startOffset": 84, "endOffset": 87}, {"referenceID": 23, "context": "The MTD based approach dynamically shifts a system over time to increase the uncertainty and complexity for the attackers to perform probing and attacking [24], while ensuring that the system is available for legitimate users.", "startOffset": 155, "endOffset": 159}, {"referenceID": 17, "context": "Moreover, if an attacker succeeds in finding a vulnerability at one point in time, it may not be exploitable at another time because of the moving defense system, making the web application more resilient [18].", "startOffset": 205, "endOffset": 209}, {"referenceID": 16, "context": "For computing the movement policy for the defender, we initially expected to be able to use existing solvers developed for physical security systems [17].", "startOffset": 149, "endOffset": 153}, {"referenceID": 23, "context": "Existing efforts describe the use of randomized switching strategies, and show its effectiveness for MTD systems [24].", "startOffset": 113, "endOffset": 117}, {"referenceID": 8, "context": "Attacker-defender scenarios have been modeled earlier as stochastic games for attack-surface shifting [9].", "startOffset": 102, "endOffset": 105}, {"referenceID": 22, "context": "Other works model the MTD problem as a repeated game where the defender uses uniform random strategy with the exception that the same defense configuration is not deployed in two consecutive rounds [23].", "startOffset": 198, "endOffset": 202}, {"referenceID": 14, "context": "Switching strategies for MTD systems based on detection of probes by attackers are presented by [15].", "startOffset": 96, "endOffset": 100}, {"referenceID": 7, "context": "In [8], the MTD system is modeled as a game called PLADD, based on FlipIt games [19].", "startOffset": 3, "endOffset": 6}, {"referenceID": 18, "context": "In [8], the MTD system is modeled as a game called PLADD, based on FlipIt games [19].", "startOffset": 80, "endOffset": 84}, {"referenceID": 11, "context": "These techniques also fail to capture the reconnaissance aspect of the attackers which is shown to be an important aspect in the attack phase [12].", "startOffset": 142, "endOffset": 146}, {"referenceID": 2, "context": "In [3], a game theoretic leader-follower type approach is presented for a dynamic platform defense where the strategies are chosen so as to be diverse, based on statistical analysis rather than being uniformly distributed.", "startOffset": 3, "endOffset": 6}, {"referenceID": 16, "context": "Our modeling could help us leverage the existing solution methods in the physical security domains [17] and provide scalable and optimal switching strategies for cybersecurity systems.", "startOffset": 99, "endOffset": 103}, {"referenceID": 12, "context": "Our solver is essentially an extension of the DOBSS solver [13].", "startOffset": 59, "endOffset": 63}, {"referenceID": 0, "context": "Although there has been furhter development since DOBSS, the more recent solvers for BSGs make additional assumptions about the game structure\u2014either about the action sets of the defender, or the presence of hierarchical structure among attacker types [1], which do not hold for the web application domain.", "startOffset": 252, "endOffset": 255}, {"referenceID": 6, "context": "The use of Common Vulnerabilitiy Scoring System (CVSS) for rating attacks is well studied in security [7].", "startOffset": 102, "endOffset": 105}, {"referenceID": 9, "context": "Software security is defined in terms of three characteristics Confidentiality, Integrity and Availability [10].", "startOffset": 107, "endOffset": 111}, {"referenceID": 0, "context": "[0, 1].", "startOffset": 0, "endOffset": 6}, {"referenceID": 17, "context": "Present state-of-the-art MTD system for web applications use a uniformly distributed switching strategy (pc = 1/|C|) and assume that switching between configurations incur a uniform cost [18].", "startOffset": 187, "endOffset": 191}, {"referenceID": 9, "context": "where the second field is a set of two dimentional values that express an attacker\u2019s expertise (\u2208 [0, 10]) in a technology.", "startOffset": 98, "endOffset": 105}, {"referenceID": 9, "context": "For an attack action a, ESa (\u2208 [0, 10]) represents the ease of exploitability (higher is tougher).", "startOffset": 31, "endOffset": 38}, {"referenceID": 10, "context": "This metric provides the Impact (IS) and Exploitability Scores (ES), stated above, which are combined to calculate a third score called Base Score (BS) [11].", "startOffset": 152, "endOffset": 156}, {"referenceID": 10, "context": "A rigorous treatment of assigning these values can be found in [11].", "startOffset": 63, "endOffset": 67}, {"referenceID": 9, "context": "Lastly, we choose the values of Kij in the range [0, 10].", "startOffset": 49, "endOffset": 56}, {"referenceID": 19, "context": "This is exactly the problem of finding the Stackelberg Equilibrium in a Bayesian Game [20].", "startOffset": 86, "endOffset": 90}, {"referenceID": 4, "context": "Unfortunately, this problem becomes NP-hard in our case because of multiple attacker types [5].", "startOffset": 91, "endOffset": 94}, {"referenceID": 13, "context": "This assumption is popular in prior work on security games because for every mixed strategy for the attacker, there is always a pure strategy in support for it [14].", "startOffset": 160, "endOffset": 164}, {"referenceID": 12, "context": "To solve for the optimal mixed strategy, one can use the Decomposed Optimal Bayesian Stackelberg Solver (DOBSS) [13].", "startOffset": 112, "endOffset": 116}, {"referenceID": 20, "context": "We first use the piecewise linear McCormick envelopes to design a convex function using these wijs that estimates a good solution to this problem [21].", "startOffset": 146, "endOffset": 150}, {"referenceID": 17, "context": "We evaluate our method using Bayesian Stackelberg Games on our real life web application against the Uniform Random Strategy (URS), which is the state-of-the-art in such systems [18].", "startOffset": 178, "endOffset": 182}, {"referenceID": 2, "context": "This result is in unison with previous work in cyber-security which show that having many configurations does not necessary imply that all of them have to be used for providing the best security [3].", "startOffset": 195, "endOffset": 198}, {"referenceID": 0, "context": "The result remains the same for \u03b1 \u2208 [0, 1] for our system.", "startOffset": 36, "endOffset": 42}], "year": 2016, "abstractText": "The present complexity in designing web applications makes software security a difficult goal to achieve. An attacker can explore a deployed service on the web and attack at his/her own leisure. Moving Target Defense (MTD) in web applications is an effective mechanism to nullify this advantage of their reconnaissance but the framework demands a good switching strategy when switching between multiple configurations for its web-stack. To address this issue, we propose modeling of a real-world MTD web application as a repeated Bayesian game. We then formulate an optimization problem that generates an effective switching strategy while considering the cost of switching between different web-stack configurations. To incorporate this model into a developed MTD system, we develop an automated system for generating attack sets of Common Vulnerabilities and Exposures (CVEs) for input attacker types with predefined capabilities. Our framework obtains realistic reward values for the players (defenders and attackers) in this game by using security domain expertise on CVEs obtained from the National Vulnerability Database (NVD). We also address the issue of prioritizing vulnerabilities that when fixed, improves the security of the MTD system. Lastly, we demonstrate the robustness of our proposed model by evaluating its performance when there is uncertainty about input attacker information.", "creator": "LaTeX with hyperref package"}}}