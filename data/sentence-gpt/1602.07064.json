{"id": "1602.07064", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Feb-2016", "title": "SIFT: An Algorithm for Extracting Structural Information From Taxonomies", "abstract": "In this work we present SIFT, a 3-step algorithm for the analysis of the structural information represented by means of a taxonomy. The major advantage of this algorithm is the capability to leverage the information inherent to the hierarchical structures of taxonomies to infer correspondences which can allow to merge them in a later step. This method is particular relevant in scenarios where taxonomy alignment techniques exploiting textual information from taxonomy nodes cannot operate successfully with the standard way of using the term taxonomy.\n\n\nThe three main points of the algorithm are the two main components of the analysis. They are a search engine for information which is not a single-class entity or a single unit of group; it is the combined analysis of a group and an individual. Each analysis requires the following properties:\n\na set of properties and operations\na set of properties and operations\na set of operations\na pair of properties and operations\na pair of operations A and B which cannot be used for classification. Each analysis can only be performed with a combination of a number of different property values; for example, an item cannot be included in the collection of information of a given class, and a single value cannot be applied to the collection of information of a class.\nThe three main points of the algorithm are the two main components of the analysis. They are a search engine for information which is not a single-class entity or a single unit of group; it is the combined analysis of a group and an individual. Each analysis can only be performed with a combination of a number of different property values; for example, an item cannot be included in the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot be applied to the collection of information of a given class, and a single value cannot", "histories": [["v1", "Tue, 23 Feb 2016 07:33:02 GMT  (9kb)", "http://arxiv.org/abs/1602.07064v1", "12 pages"]], "COMMENTS": "12 pages", "reviews": [], "SUBJECTS": "cs.DB cs.AI", "authors": ["jorge martinez-gil"], "accepted": false, "id": "1602.07064"}, "pdf": {"name": "1602.07064.pdf", "metadata": {"source": "CRF", "title": "SIFT: An Algorithm for Extracting Structural Information From Taxonomies", "authors": ["Jorge Martinez-Gil"], "emails": ["jorgemar@acm.org"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 2.\n07 06\n4v 1\n[ cs\n.D B\n] 2\n3 Fe\nb 20\n16\nIn this work we present SIFT, a 3-step algorithm for the analysis of the structural information represented by means of a taxonomy. The major advantage of this algorithm is the capability to leverage the information inherent to the hierarchical structures of taxonomies to infer correspondences which can allow to merge them in a later step. This method is particular relevant in scenarios where taxonomy alignment techniques exploiting textual information from taxonomy nodes cannot operate successfully."}, {"heading": "1 Introduction", "text": "The problem of aligning taxonomies is one of the most interesting and relevant issues for knowledge engineers, since it has implications in a wide range of computational problems including file system merging, creation of operating systems distributions, catalog integration, distributed taxonomy search, and so on. The non-deterministic nature of the problem is given by the fact that not even humans are able to identify optimal alignments [6], so the process is highly subjective. This means that its boundaries often go further than the category of an engineering problem what makes difficult to find closed solutions in this area. However, the large amount of people, research groups and resources dedicated to provide solutions in this field, tells us that we are facing a key challenge in order for a convincing way to automatically integrate taxonomic knowledge to become real.\nIn the last years, the need for methods to integrate knowledge has increased. Note that the need for aligning taxonomies comes from the old field of database schema integration [16]. This field was born to work in a unified way with databases which had been developed independently. Nowadays researchers aim to make the techniques for aligning knowledge models flexible and powerful enough\nto work with all kind of database schemas, XML schemas, taxonomies, E/R models, dictionaries, and so on. Therefore, the problem we are facing consists of providing a set of correspondences between the nodes of two taxonomies about the same domain but which have been developed separately [18].\nThe major contribution of this work is the proposal of a 3-step algorithm that is able to analyze the structural information represented by means of a taxonomy. The major advantage of this analysis is that it can allow us to leverage the information inherent to the hierarchical structure of taxonomies to infer correspondences which can allow to automatically merging them in a later step. This is particular relevant in scenarios where taxonomy matching techniques exploiting textual information from the taxonomy nodes cannot operate successfully.\nFrom now on, this work is structured in the following way: The second section describes the state-of-the-art on taxonomy alignment. The third section describes the design and development of the algorithm. Case studies section provides some scenarios where our algorithm can help to solve real problems, including a brief discussion on the strengths and weaknesses of the proposal. Finally, we outline the key points of our contribution and propose future research tasks."}, {"heading": "2 Related Work", "text": "The problem of aligning taxonomies have received much attention by the research community since various knowledge based applications, including clustering algorithms, browsing support interfaces, and recommendation systems, perform more effectively when they are supported with domain describing taxonomies, which help to resolve ambiguities and provide context [3]. Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].\nTaxonomy alignment techniques are able to detect taxonomy concepts that are equivalent. But, when can we say that two concepts are equivalent? If we attend only to the text label for representing the concepts, we can find many examples in everyday life, for instance, lift and elevator or car and automobile seem to be equivalent concepts since they represent the same real idea or object. However, it is well known that when taxonomies are used as knowledge sources, the way users perceive the degree of likeness between pairs of concepts is highly dependent on the domain being explored [3]. Therefore, synonymy between text labels is not always an equivalence indicator, so it is necessary to\nfocus in the context the concepts are being considered.\nExisting taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13]. Our algorithm fits in this last category.\nAlgorithms implementing techniques for matching complex structures are mostly based on heuristics. Heuristics consider, for example, that elements of two distinct taxonomies are similar if their direct sub-concepts, and/or their direct super-concepts and/or their brother concepts are similar [17]. These structural techniques can be based on a fixed point like that proposed in [8], or can be viewed as a satisfiability problem of a set of propositional formulas [2]. There are also some proposals to align taxonomies supposed to be asymmetric from a structural point of view [5], or to create matching functions by means of a composition of various techniques designed to make best use of the characteristics of the taxonomies [17].\nDespite such advances in matching technologies, taxonomy alignments using linguistic information and other auxiliary information are rarely perfect [9]. In particular, imperfection can be due to homonyms (i.e., nodes with identical concept-names, but possibly different semantics) and synonyms (concepts with different names but same semantics). However, the major advantage of pure structural matching techniques is that finding perfect alignments is possible in many cases."}, {"heading": "3 Contribution", "text": "We approach the problem from the classic perspective, that it is to say, a taxonomy can be defined as a set of concepts that have been hierarchically organized to control the terms belonging to a vocabulary. The goal is to facilitate a number of operations on items from a repository. However, a problem occurs when two item repositories have to be merged, since it is also necessary to merge the two taxonomies which describe them.\nOur contribution to face this problem is the proposal of an efficient 3-step algorithm for the analysis of taxonomies describing such repositories. This analysis could be helpful for solving the problem of heterogeneity between the given taxonomies from a strictly structural point of view in a later step. As a collateral effect, the output data from our algorithm could be also used for exploiting any kind\nof solution involving the use of information from the structure of the given taxonomies. Use cases section will explore this in more detail.\nMore formally, we can define a mapping as an expression that can be written in the form (c, c\u2019, n, R). Where c and c\u2019 are concepts belonging to different taxonomies, R is the relation of correspondence and n is a real number between 0 and 1. n represents the degree of confidence for R. In our work, c and c\u2019 will be concepts represented by means of taxonomy nodes (a.k.a. taxons) which are assigned a rank and can be placed at a particular level in a systematic hierarchy reflecting relationships. Moreover, the relation R which describe how c and c\u2019 are related is going to be of similarity.\nThe algorithm that we propose is divided into three high level steps. The first step is optional since it is only necessary when the given knowledge model is not a taxonomy yet, but another kind of more general model like an graph or an ontology [19].\n1. To convert the knowledge model into a taxonomy (See Algorithm 1).\n2. To store the taxonomy in some parts of a special data structure (See Algorithm 2).\n3. To order and fill the data structure with complementary calculations (See Algorithm 3).\nFinally, it is necessary to call the algorithm (See Algorithm 4). The philosophy of the algorithm consists of detecting the changes in the depths of each taxon in the hierarchy. In this way, it is possible to count the different kinds of neighbors that a concept may have.\nBefore designing the algorithm, it is also necessary to define a data structure (DS) to store the data calculated by the algorithm. The data structure is a linked list with six records in each node: depth, children, brothers, brothers left, same level and name. Table 1 tells us the data type and a brief description of each of these records. In the next subsections, we are going to describe more in depth each of the main steps of the proposed algorithm."}, {"heading": "3.1 Converting a knowledge model into a taxonomy", "text": "This is the first step which consists of converting the model into a taxonomy which will allow us to compute more easily the data related to the neighborhood of each concept into the knowledge model. This step is optional and it is only necessary when the input is not a perfect hierarchy but contains some cycles. This is the usual case when working with graph models or ontologies, for example. The\nprocedure is inspired by one proposed in [12] to visit all the concepts in an ontology. Algorithm 1 shows the related portion of pseudocode.\nAlgorithm 1 ont2tax: Procedure for converting a generic knowledge model into a taxonomy Require: cls: class, occurs: list, depth: integer\n1: storingInTax(cls, depth); Step 2 2: if (cls.canAs( model.class ) AND (NOT occurs.contains( cls ))) then 3: while iterator = cls.SubClasses do 4: class sub := (class) iterator.next 5: occurs.add(cls) 6: ont2tax (sub, occurs, depth + 1) 7: occurs.remove(cls) 8: end while 9: end if\n10: return true"}, {"heading": "3.2 Storing the taxonomy in the data structure", "text": "In this second step, we only know the depth (number of indents for the taxon) and the name of each concept, so we can only partially fill the data structure, thus, we can only invoke the procedure with the arguments depth and concept name.\nAlgorithm 2 storingInTax: Storing the taxonomy in the data structure Require: cls: ontology, depth: integer\n1: Element e := new Element (depth, 0, 0, 0, 0, cls.getName) 2: DS.add (e) 3: return true"}, {"heading": "3.3 Ordering and filling the data structure", "text": "With data stored in the DS, we can now detect the changes in the depth of the entries in the taxonomy to compute the number of children, brothers and, so on. It is necessary to take into account the following rules:\n1. All taxons with the same depth are same level taxons.\n2. A chain of brothers is a chain of taxons at the same level.\n3. A change to an outer taxon breaks a chain of brothers.\n4. All brothers with a previous position are on the left.\n5. Given a taxon, if the following concept has an inner depth, it is a child.\n6. A chain of children can only be broken by a change to an outer taxon.\n7. An inner taxon (grandson taxon) does not break a chain of children.\nAlgorithm 3 shows us the procedural implementation for this set of rules. The computational complexity of this procedure is low, even in the worst of cases we would have O(n2), since the most complex portion of code can be implemented by means of two simple loops. This means that our solution presents a great scalability regardless of the platform on which the algorithm could be implemented and executed."}, {"heading": "3.4 Calling to the algorithm", "text": "Now, it is necessary to invoke the algorithm. At this point it is necessary to define the taxonomy model and to locate the concepts without ancestors, in order to begin to visit all the concepts. This is particular relevant in forest models1. Note that the ArrayList is necessary to store the visited concepts. Algorithm 4 shows the related portion of pseudocode.\n1Forest model is that kind of graph model where there is no connection between some graph components\nAlgorithm 3 finalStep: Ordering and filling the data structure Require: children, brothers, brothers left: integer Require: same level, i, j, k, t: integer Require: ag: boolean\n1: for i := 0 to DS.size do 2: children, brothers, brothers left := 0 3: for j := 0 to DS.size do 4: if if (j < i) then 5: if if (DS[i].depth = DS[j].depth) then 6: brothers++ 7: brothers left++ 8: end if 9: if (DS[i].depth < DS[j].depth) then\n10: brothers := 0 11: brothers left := 0 12: end if 13: end if 14: if (j > i) then 15: if (DS[i].depth = DS[j].depth) then 16: brothers++ 17: end if 18: if (DS[i].depth < DS[j].depth) then 19: break 20: end if 21: end if 22: if ((j = i+1) AND (DS[i].depth = DS[j].depth - 1) AND (NOT ag)) then 23: for for k := j to DS[j].depth < DS[k].depth do 24: if (DS[j].depth = DS[k].depth) then 25: child++ 26: ag := true 27: end if 28: end for 29: end if 30: end for 31: for for t := 0 to DS.size do 32: if if (NOT t=i) AND (DS[i].depth = DS[t].depth) then 33: same level++ 34: end if 35: end for 36: DS[i].addNumChildren (children) 37: DS[i].addNumBrothers (brothers) 38: DS[i].addNumBrothersOnTheLeft (brother left) 39: DS[i].addNumSameLevel (same level) 40: end for 41: return true\nAlgorithm 4 calling to the 3-step algorithm 1: Model m := createModel 2: Iterator i := m.listHierarchyRootClasses() 3: while i.hasNext() do 4: onto2tax((Class) i.next(), new ArrayList(), 0) 5: end while 6: finalStep ()"}, {"heading": "4 Case studies", "text": "The purpose of this section is to show the relative ease with which a taxonomy analysis can be performed or a new taxonomy matcher can be developed, based on the data obtained from the algorithm. In the next subsections we are going to show three use cases: how to use the algorithm to compute the leaves in a taxonomy, how to use it to obtain the structural index of a taxonomy, and finally how to use it to align taxonomies automatically."}, {"heading": "4.1 Computing the number of leaves in a taxonomy", "text": "There are techniques that compute the leaves in a graph for performing a graph analysis. In this sense, our algorithm is easy to extend in order to compute the number of leaves in a taxonomy. To do so, it is only necessary to compute the number of the deepest taxons. We are going to see how to compute the leaves of the taxonomy for an example but, it is possible to compute other features such as paths. Algorithm 5 shows us how to compute the leaves (i.e. terminal nodes) of a given taxonomy.\nAlgorithm 5 leaves: computing the leaves of a taxonomy Require: var max, leaves: integer\n1: max := leaves := 0 2: for i := 0 to DS.size do 3: if (DS[i].depth > max) then 4: max := DS[i].depth 5: end if 6: end for 7: for for j := 0 to DS.size do 8: if (DS[j].depth = max) then 9: leaves++\n10: end if 11: end for 12: return leaves"}, {"heading": "4.2 Comparing structural similarities", "text": "It is possible to use our algorithm for extracting structural indexes of taxonomies in order to compare its structural similarity. The structural index of a taxonomy is a kind of hash function that tells global information about the total number of children, brothers and so on.\nAs we show in the state-of-the-art, some techniques use statistical methods for obtaining the struc-\ntural similarity. It can be useful for adjusting the quality of the generated mappings, for example.\nAlgorithm 6 shows how to automatically compute one possible structural index from a taxonomy.\nAlgorithm 6 structuralIndex: extract a structural index of the ontology Require: var acum : integer\n1: acum := 0 2: for i := 0 to DS.size do 3: acum := acum + DS[i].depth 4: acum := acum + DS[i].children 5: acum := acum + DS[i].brothers 6: acum := acum + DS[i].leftbrothers 7: acum := acum + DS[i].samelevel 8: end for 9: return acum\nObviously, when comparing two structural indexes, the higher percentage, the higher the structural similarity of the compared taxonomies. This means that if two taxonomies share the same structural index, we can state that its structural organization is equivalent."}, {"heading": "4.3 Real alignment situations", "text": "Our algorithm also allows that information to be obtained from the analysis phase can be helpful in order to take decisions in taxonomy alignment scenarios. Output data from SIFT allow us to easily create customized rule-based matchers to obtain more accurate taxonomy alignments. For example, the similarity between two taxonomy concepts or taxons could be given by certain rules concerning ancestors, brothers, and so on.\nMoreover, it is possible to combine our proposal with other basic matching algorithms. This can be done by designing a formula that may allow us to align taxonomies from the point of view of the elements, and from the taxonomy structure. This is possible due to the fact one of the attributes (name) contains information at the element level, so it is possible to exploit this kind of information by\nusing some kind of computational method like the Levenshtein algorithm [7] which is able to calculate similarity between two text strings. In this way, if many attributes (whether structural or textual) are similar, the concepts are also supposed to be similar."}, {"heading": "5 Conclusions & Future Work", "text": "In this work, we have designed and implemented, SIFT that is a 3-step algorithm that allows us to analyze the structural information inherent to the hierarchical structures of taxonomies. This can be useful when solving problems concerning heterogeneity between taxonomies describing a same domain but which have been developed separately. Therefore, the algorithm that we propose is valid for taxonomy alignment, but also for aligning ontologies, directory listings, file systems, operating system distributions, and in general whatever kind of model which can be transformed into a taxonomy. Our algorithm tries to leverage the inherent characteristics from taxonomies to infer correspondences which can allow us to merge them in a later step, even without text labels describing each of the nodes from the taxonomy.\nAs future work, we should work to leverage the good performance of our algorithm by designing a combined alignment strategy. In this work, we have proposed to use each of the attributes with similar weights. However, this strategy could not be optimal in some specific cases. We aim to redefine this strategy so that a preliminary study should try to automatically determine the kind of problem we are facing at a given moment, and dynamically assign higher weights to the most promising taxon attributes.\nSource Code\nAn implementation of this algorithm can be found at https://github.com/jorgemartinezgil/sift"}], "references": [{"title": "Schema - an algorithm for automated product taxonomy mapping in e-commerce", "author": ["S.S. Aanen", "L.J. Nederstigt", "D. Vandic", "F. Frasincar"], "venue": "In ESWC,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "A large scale taxonomy mapping evaluation", "author": ["P. Avesani", "F. Giunchiglia", "M. Yatskevich"], "venue": "In International Semantic Web Conference,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Structure- and extension-informed taxonomy alignment", "author": ["K.S. Candan", "M. Cataldi", "M.L. Sapino", "C. Schifanella"], "venue": "In ODBIS, pages", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Semantic heterogeneity issues on the web", "author": ["J. Gracia", "E. Mena"], "venue": "IEEE Internet Computing,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Taxomap alignment and refinement modules: results for oaei", "author": ["F. Hamdi", "B. Safar", "N.B. Niraula", "C. Reynaud"], "venue": "In OM,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Taxonomy alignment for interoperability between heterogeneous digital libraries", "author": ["J.J. Jung"], "venue": "In ICADL,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "Binary codes capable of correcting deletions, insertions and reversals", "author": ["V.I. Levenshtein"], "venue": "Soviet Physics Doklady,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1966}, {"title": "Generic schema matching with cupid", "author": ["J. Madhavan", "P.A. Bernstein", "E. Rahm"], "venue": "In VLDB,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2001}, {"title": "An overview of textual semantic similarity measures based on web intelligence", "author": ["J. Martinez-Gil"], "venue": "Artif. Intell. Rev.,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Reverse ontology matching", "author": ["J. Martinez-Gil", "J.F. Aldana-Montes"], "venue": "SIGMOD Record,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "Semantic similarity measurement using historical google search patterns", "author": ["J. Martinez-Gil", "J.F. Aldana-Montes"], "venue": "Information Systems Frontiers,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "Jena: A semantic web toolkit", "author": ["B. McBride"], "venue": "IEEE Internet Computing,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Similarity flooding: A versatile graph matching algorithm and its application to schema matching", "author": ["S. Melnik", "H. Garcia-Molina", "E. Rahm"], "venue": "In ICDE,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2002}, {"title": "Hamster: Using search clicklogs for schema and taxonomy", "author": ["A. Nandi", "P.A. Bernstein"], "venue": "matching. PVLDB,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}, {"title": "Large-scale taxonomy mapping for restructuring and integrating wikipedia", "author": ["S.P. Ponzetto", "R. Navigli"], "venue": "In IJCAI,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "A survey of approaches to automatic schema matching", "author": ["E. Rahm", "P.A. Bernstein"], "venue": "VLDB J.,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2001}, {"title": "When usual structural alignment techniques don\u2019t apply", "author": ["C. Reynaud", "B. Safar"], "venue": "In Ontology Matching,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "Ontology matching: State of the art and future challenges", "author": ["P. Shvaiko", "J. Euzenat"], "venue": "IEEE Trans. Knowl. Data Eng.,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}, {"title": "The application of a hierarchical tree method to ontology knowledge engineering", "author": ["S. Sun", "D. Liu", "G. Li"], "venue": "International Journal of Software Engineering and Knowledge Engineering,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2012}], "referenceMentions": [{"referenceID": 5, "context": "The non-deterministic nature of the problem is given by the fact that not even humans are able to identify optimal alignments [6], so the process is highly subjective.", "startOffset": 126, "endOffset": 129}, {"referenceID": 15, "context": "Note that the need for aligning taxonomies comes from the old field of database schema integration [16].", "startOffset": 99, "endOffset": 103}, {"referenceID": 17, "context": "Therefore, the problem we are facing consists of providing a set of correspondences between the nodes of two taxonomies about the same domain but which have been developed separately [18].", "startOffset": 183, "endOffset": 187}, {"referenceID": 2, "context": "The problem of aligning taxonomies have received much attention by the research community since various knowledge based applications, including clustering algorithms, browsing support interfaces, and recommendation systems, perform more effectively when they are supported with domain describing taxonomies, which help to resolve ambiguities and provide context [3].", "startOffset": 362, "endOffset": 365}, {"referenceID": 5, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 106, "endOffset": 109}, {"referenceID": 0, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 120, "endOffset": 123}, {"referenceID": 13, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 124, "endOffset": 128}, {"referenceID": 3, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 155, "endOffset": 158}, {"referenceID": 14, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 159, "endOffset": 163}, {"referenceID": 2, "context": "However, it is well known that when taxonomies are used as knowledge sources, the way users perceive the degree of likeness between pairs of concepts is highly dependent on the domain being explored [3].", "startOffset": 199, "endOffset": 202}, {"referenceID": 9, "context": "Existing taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13].", "startOffset": 140, "endOffset": 144}, {"referenceID": 10, "context": "Existing taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13].", "startOffset": 223, "endOffset": 227}, {"referenceID": 12, "context": "Existing taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13].", "startOffset": 287, "endOffset": 291}, {"referenceID": 16, "context": "Heuristics consider, for example, that elements of two distinct taxonomies are similar if their direct sub-concepts, and/or their direct super-concepts and/or their brother concepts are similar [17].", "startOffset": 194, "endOffset": 198}, {"referenceID": 7, "context": "These structural techniques can be based on a fixed point like that proposed in [8], or can be viewed as a satisfiability problem of a set of propositional formulas [2].", "startOffset": 80, "endOffset": 83}, {"referenceID": 1, "context": "These structural techniques can be based on a fixed point like that proposed in [8], or can be viewed as a satisfiability problem of a set of propositional formulas [2].", "startOffset": 165, "endOffset": 168}, {"referenceID": 4, "context": "There are also some proposals to align taxonomies supposed to be asymmetric from a structural point of view [5], or to create matching functions by means of a composition of various techniques designed to make best use of the characteristics of the taxonomies [17].", "startOffset": 108, "endOffset": 111}, {"referenceID": 16, "context": "There are also some proposals to align taxonomies supposed to be asymmetric from a structural point of view [5], or to create matching functions by means of a composition of various techniques designed to make best use of the characteristics of the taxonomies [17].", "startOffset": 260, "endOffset": 264}, {"referenceID": 8, "context": "Despite such advances in matching technologies, taxonomy alignments using linguistic information and other auxiliary information are rarely perfect [9].", "startOffset": 148, "endOffset": 151}, {"referenceID": 18, "context": "The first step is optional since it is only necessary when the given knowledge model is not a taxonomy yet, but another kind of more general model like an graph or an ontology [19].", "startOffset": 176, "endOffset": 180}, {"referenceID": 11, "context": "procedure is inspired by one proposed in [12] to visit all the concepts in an ontology.", "startOffset": 41, "endOffset": 45}, {"referenceID": 6, "context": "using some kind of computational method like the Levenshtein algorithm [7] which is able to calculate similarity between two text strings.", "startOffset": 71, "endOffset": 74}], "year": 2016, "abstractText": "In this work we present SIFT, a 3-step algorithm for the analysis of the structural information represented by means of a taxonomy. The major advantage of this algorithm is the capability to leverage the information inherent to the hierarchical structures of taxonomies to infer correspondences which can allow to merge them in a later step. This method is particular relevant in scenarios where taxonomy alignment techniques exploiting textual information from taxonomy nodes cannot operate successfully.", "creator": "LaTeX with hyperref package"}}}