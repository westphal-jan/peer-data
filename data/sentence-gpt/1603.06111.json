{"id": "1603.06111", "review": {"conference": "EMNLP", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Mar-2016", "title": "How Transferable are Neural Networks in NLP Applications?", "abstract": "Transfer learning is aimed to make use of valuable knowledge in a source domain to help the model performance in a target domain. It is particularly important to neural networks because neural models are very likely to be overfitting. In some fields like image processing, many studies have shown the effectiveness of neural network-based transfer learning. For neural NLP, however, existing studies have only casually applied transfer learning, and conclusions are inconsistent. In this paper, we conduct a series of empirical studies and provide an illuminating picture on the transferability of neural networks in NLP. We hope that in this study we will share the insights we have gained from our results with the general public.\n\n\n\n\nThe present paper presents three main issues which influence the neural network transfer performance in NLP. First, the spatial and temporal properties of the neural network transfer are not the same, but are not fully understood. Second, the neural network transfer performance is based on the distribution of the neural network transfer time on the input input network (e.g. on the input and on the input) and on the input (e.g. on the input). The distribution of the neural network transfer time on the input (see Supplementary Table 3, and Supplementary Table 3) is highly similar to that found in other areas of the brain. The neural network transfer time on the input (the input) is significantly different, whereas the neural network transfer time on the input (the input) is significantly different. This means that only a relatively small fraction of the neural network transfer time is lost due to a mismatch between the input and the output.\nThe transferability of neural networks is an important feature of the neural network transfer process. It is important to note that, in this case, the transferability of neural networks is limited due to their relative strength and complexity. The problem of using the data transfer method has been identified in the recent literature and it is important to note that, in some cases, the transferability of neural networks can be compared with the transferability of the individual data transfer process. However, the differences in the transferability of neural networks are important because they are not a complete account of the specific features of each brain in a given region. However, the transferability of neural networks is a fundamental feature of neural network transfer, and that is especially important for neural network transfer.\nIn the present paper, we focus on the neural network transfer transfer time (also called the transfer/reputation) and spatial information processing and use of spatial coordinates in the model.", "histories": [["v1", "Sat, 19 Mar 2016 16:38:31 GMT  (1061kb,D)", "http://arxiv.org/abs/1603.06111v1", null], ["v2", "Thu, 13 Oct 2016 07:45:31 GMT  (2337kb,D)", "http://arxiv.org/abs/1603.06111v2", "Accepted by EMNLP-16"]], "reviews": [], "SUBJECTS": "cs.CL cs.LG cs.NE", "authors": ["lili mou", "zhao meng", "rui yan", "ge li", "yan xu", "lu zhang 0023", "zhi jin"], "accepted": true, "id": "1603.06111"}, "pdf": {"name": "1603.06111.pdf", "metadata": {"source": "CRF", "title": "How Transferable are Neural Networks in NLP Applications?", "authors": ["Lili Mou", "Zhao Meng", "Rui Yan", "Ge Li", "Yan Xu", "Lu Zhang", "Zhi Jin"], "emails": ["doublepower.mou@gmail.com,", "zhaomeng.pku@outlook.com", "lige@sei.pku.edu.cn", "xuyan14@sei.pku.edu.cn", "zhanglu@sei.pku.edu.cn", "zhijin@sei.pku.edu.cn", "rui.yan.peking@gmail.com"], "sections": [{"heading": "1 Introduction", "text": "Transfer learning, or sometimes known as domain adaptation,2 plays an important role in various natural language processing (NLP) applications, especially when we do not have a large enough dataset for the task of interest (called the target task T ). In such scenarios, we would like to transfer or adapt knowledge in datasets from other domains (called the source domains/tasks S) so as to mitigate the problem of overfitting and to improve performance. For traditional feature-rich or kernel-based models, researchers have developed a variety of elegant methods for domain adaptation; examples include EasyAdapt (Daume\u0301 III, 2007; Daume\u0301 III et al., 2010), instance weighting (Jiang and Zhai, 2007; Foster et al., 2010), struc-\n1We release our code on https://sites.google.com/site/ transfernlp/, which is implemented based on Mou et al. (2015a).\n2In this paper, we do not distinguish the conceptual difference between transfer learning and domain adaptation. Domain\u2014in the sense we use throughout this paper\u2014is defined by datasets.\ntural correspondence learning (Blitzer et al., 2006; Prettenhofer and Stein, 2010), etc.\nRecently, deep neural networks are emerging as the prevailing technical solution to almost every field in NLP. Although capable of learning highly nonlinear features, deep neural networks are very prone to overfitting (Peng et al., 2015) compared with traditional methods. Transfer learning therefore becomes even more important to neural models. Fortunately, neural networks can be trained in a transferable way by their incremental learning nature: we can directly use trained (tuned) parameters from a source task to initialize the network in the target task; alternatively, we may also train two tasks simultaneously with some parameters shared. But analysis is needed regarding the performance of neural transfer learning.\nExisting studies have already shown some evidence of the transferability of neural features. For example, in image processing, low-level neural layers resemble much to Gabor filters or color blobs (Zeiler and Fergus, 2014; Krizhevsky et al., 2012); they can be transferred well to different tasks, e.g., different image classification tasks. Donahue et al. (2014) suggest that high-level layers are also transferable in general visual recognition; Yosinski et al. (2014) further investigate the transferability of neural layers in different levels of abstraction.\nAlthough transfer learning is promising in image processing, conclusions appear to be less clear in NLP applications. Image pixels are low-level signals, which are generally continuous and less related to semantics. By contrast, natural language tokens are discrete: each word well reflects the thought of humans, but neighboring words do not share as much information as pixels in images do. Previous neural NLP studies have casually applied transferring techniques, but their results are not consistent. Collobert and Weston (2008) ap-\nar X\niv :1\n60 3.\n06 11\n1v 1\n[ cs\n.C L\n] 1\n9 M\nar 2\n01 6\nply multi-task learning to SRL, NER, POS, and CHK,3 but obtain only 0.04\u20130.21% error reduction4 (out of a base error rate of 16\u201318%). Bowman et al. (2015), however, improve a natural language inference task from an accuracy of 71.3% to 80.8% by initializing parameters with an additional dataset of 550,000 samples. Therefore, more systematic studies are needed to shed light on transferring neural networks in NLP applications.\nOur Contributions\nIn this paper, we investigate the question \u201cHow transferable are neural networks in NLP applications?\u201d\nWe distinguish two scenarios of transfer: (1) transferring knowledge to a semantically equivalent task but with a different dataset, which is semantically equivalent in general; (2) transferring knowledge to a task that is semantically different but shares the same neural topology/architecture so that neural parameters can be transferred. We further distinguish two transfer methods: (1) using the parameters trained on S to initialize T (INIT), and (2) multi-task learning (MULT), i.e., training S and T simultaneously. (Please see Sections 2 and 4).\nSpecifically, our study mainly focuses on the following research questions:\nRQ1: How transferable are neural networks between two tasks with similar or different semantics in NLP applications? RQ2: How transferable are different layers of NLP neural models? RQ3: How transferable are INIT and MULT, respectively? What is the effect of combining these two methods?\nWe conducted extensive experiments over three datasets on classifying sentence pairs. We leveraged the widely-studied convolutional neural network (CNN) as our neural model.\nBased on our experimental results, we have the following main observations, some of which are unexpected.\n3The acronyms refer to semantic role labeling, named entity recognition, part-of-speech tagging, and chunking, respectively.\n4Here, we quote the accuracies obtained by using unsupervised pretraining of word embeddings. This is the highest performance in that paper; using pretrained word embeddings is also a consensus in the literature. Besides, we would like to emphasize that our paper mainly focuses on transferring knowledge from supervised tasks.\n\u2022 Whether a neural network is transferable in NLP depends largely on how semantically similar the tasks are. \u2022 The output layer is mainly specific to the\ndataset and not transferable. The performance gain of neural domain adaptation comes mainly from transferring hidden layers. Word embeddings are likely to be transferable to semantically different tasks, but the boost is not large if they have been pretrained in an unsupervised way on a large corpus. \u2022 MULT appears to be slightly better than (but\ngenerally comparable to) INIT in our experiment; combining MULT and INIT does not result in further gain.\nThe rest of this paper is organized as follows. Section 2 introduces the datasets that our model is transferred across; Section 3 details the neural architecture and experimental settings. We describe two approaches (INIT and MULT) for transfer learning in Section 4. We present experimental results in Sections 5\u20136, and have concluding remarks in Section 7."}, {"heading": "2 Datasets", "text": "In our study, we used three open datasets as follows. \u2022 Stanford Natural Language Inference\n(SNLI): a newly-released large dataset containing more than 550,000 sentence pairs.5\nThe task is to recognize whether a sentence can be entailed (E) from another sentence, or the two sentences are contradictory (C) to each other. Besides, there is also a third target label, indicating the two sentences are irrelevant, denoted as neutral (N). \u2022 Sentences Involving Compositional Knowl-\nedge (SICK): a small dataset with exactly the same classification objective as SNLI.6 \u2022 Microsoft Research Paraphrase Corpus (MSRP): a (small) dataset for paraphrase detection.7 The objective is binary classification: judging whether two sentences have the same meaning. Table 1 illustrates several examples of the two tasks; relevant statistics are also provided.\nAlthough SNLI/SICK and MSRP are related to each other more or less, they are semantically dif-\n5http://nlp.stanford.edu/projects/snli/ 6http://http://alt.qcri.org/semeval2014/task1/ 7http://research.microsoft.com/en-us/downloads/\nferent. Therefore, we can distinguish two kinds of transfer regarding semantic similarity: semantically equivalent transfer (SNLI\u2192SICK) and semantically different transfer (SNLI\u2192MSRP).\nIt should be noticed that in image or speech processing (Yosinski et al., 2014; Wang and Zheng, 2015), the input of neural networks is pretty much consists of raw signals; hence, low-level feature detectors are almost always transferable, even if Yosinski et al. (2014) manually distinguish artificial objects and natural ones in an image classification task.\nDistinguishing semantic relatedness\u2014which emerges from very low layers of either word embeddings or its successive layer\u2014is specific to NLP and also a new insight of our paper. As we shall see in Sections 5 and 6 , the two scenarios lead to different results."}, {"heading": "3 The Neural Model and Settings", "text": "As all the above datasets can be viewed as a classification task over sentence pairs, we may use a single neural model to solve the three problems in a unified manner. That is to say, the neural architecture is the same among different datasets, which makes it possible to investigate transfer learning regardless of whether the tasks are semantically equivalent.\nFigure 1 depicts the basic neural network in our study. We leverage the widely-studied convolutional neural network (CNN) to capture the semantics of a single sentence; the convolution window size is 5. Then the vector representations of two\nsentences are combined by concatenation and fed to a hidden layer before the softmax output. Such a two-step strategy is called the \u201cSiamese\u201d structure (Bromley et al., 1993), and also used for various sentence pair modeling applications (Hu et al., 2014; Mou et al., 2015b).\nIn our experiments, the embeddings were pretrained by word2vec (Mikolov et al., 2013); all embeddings and hidden layers were 100 dimensional as in Bowman et al. (2015); we designated the relatively small dimension because of computational concerns.\nWe applied stochastic gradient descent with a mini-batch size of 50 for optimization. In each setting, we tuned the parameters as follows: learning rate from {1, 0.3, 0.1, 0.03}, power decay of learning rate from {fast, moderate, low} (defined by how much, after one epoch, the learning rate residual is: 0.1x, 0.3x, 0.9x, resp). We regularized our network by dropout with a rate from {0, 0.1, 0.2, 0.3}. Note that we might not run nonsensical settings, e.g., a larger dropout rate if the network has already been underfitting (i.e., accuracy has decreased when the dropout rate increases). However, we might try additional smaller learning rates, if needed, especially in transfer learning by INIT. We report the test performance associated with the highest validation accuracy.\nTo setup a baseline, we trained our model without transfer 5 times by different random parameter initializations. Results are reported in Table 2. Our model has achieved reasonable performance that is comparable to similar networks reported in the literature with all three datasets. Therefore, our implementation is fair and suitable for further study of transfer learning.\nIt should be mentioned that the goal of this paper is not to outperform state-of-the-art results; instead, we would like to conduct a fair comparison of different methods and settings for transfer learning in NLP."}, {"heading": "4 Transfer Methods", "text": "Transfer learning aims to use knowledge in a source domain to aid the target domain. As neural networks are usually trained incrementally with gradient descent (or variant), it is straightforward to use gradient information in both source and target domains for optimization so as to accomplish knowledge transfer. Depending on how samples in source and target domains are scheduled, there are two main approaches to neural network-based transfer learning: \u2022 Parameter initialization (INIT). The INIT ap-\nproach first trains the network on S , and then directly uses the tuned parameters to initialize the network for T . In the INIT approach, we may fix (\n\u00a0 \u00a1 \u2642 ) the parameters in the target domain (Glorot et al., 2011), i.e., no training is performed on T . But when labeled data are available in T , it would be better to finetune (1) the parameters like Bowman et al. (2015). INIT is also related to unsupervised pretraining such as word embedding learning (Mikolov et al., 2013) and autoencoders (Bengio et al., 2007). In these approaches, parameters that are (pre)trained in an unsupervised way are transferred to initialize the model for a supervised task (Plank and Moschitti, 2013). However, our paper focuses on \u201csupervised pretraining,\u201d which means we transfer knowledge from a labeled source domain. \u2022 Multi-task learning (MULT). MULT, on the\nother hand, simultaneously trains samples in both domains (Collobert and Weston, 2008;\nLiu et al., 2016). The overall cost function is given by J = \u03bbJT + (1\u2212 \u03bb)JS (1) where JT and JS are the individual cost function of each domain. (Both JT and JS are normalized by the number of training samples.) \u03bb \u2208 (0, 1) is a hyperparameter balancing the two domains. It is nontrivial to optimize Equation 1 in practice by gradient-based methods. One may take the partial derivative of J and thus \u03bb goes to the learning rate (Liu et al., 2016), but the model is then vulnerable because it is likely to blowup for large learning rates (multiplied by \u03bb or 1 \u2212 \u03bb) and be stuck in local optima for small ones. Collobert and Weston (2008) alternatively choose a data sample from either domain with a certain probability (controlled by \u03bb) and take the derivative for the data sample. In this way, domain transfer is independent of learning rates, but we may not be able to fully use the entire dataset of S if \u03bb is large. Due to the limitation of time and space, we adopted the latter approach in our experiment for simplicity. (More in-depth analysis may be needed in future work.) Formally, our multi-task learning strategy is as follows.\n1 Switch to T by prob. \u03bb, or to S by prob. 1\u2212 \u03bb. 2 Compute the gradient of the next data sample in the particular domain.\nFurther, INIT and MULT can be combined straightforwardly, and we obtain the third setting:\n\u2022 Combination (MULT+INIT). We first pretrain on the source domain S for parameter initialization, and then train S and T simultaneously.\nFrom a theoretical perspective, INIT and MULT work in different ways. In the MULT approach, the source domain regulates the model by \u201caliasing\u201d the error surface of the target domain; hence the neural network is less prone to overfitting. In INIT, T \u2019s error surface remains intact. Before training on the target dataset, the parameters are initialized in such a meaningful way that they contain additional knowledge in the source domain. However, in an extreme case where T \u2019s error surface is convex, INIT is ineffective because the parameters can reach the global optimum regardless of their initialization. Fortunately, deep neural networks usually have highly complicated, non-\nconvex error surfaces. By properly initializing parameters with the knowledge of S , we can reasonably expect that the parameters are in a better \u201ccatchment basin,\u201d and that the INIT approach can transfer knowledge from S to T ."}, {"heading": "5 Results of Transferring by INIT", "text": "We first analyze how INIT behaves in NLP-based transfer learning. In addition to two different transfer scenarios regarding semantic relatedness as described in Section 2, we further evaluated two settings: (1) fine-tuning parameters 1, and (2) freezing parameters after transfer\n\u00a0 \u00a1 \u2642 . Existing evidence shows that frozen parameters would generally hurt the performance (Peng et al., 2015), but it provides a more direct understanding how transferable the features are (because the factor of target domain optimization is ruled out). Therefore, we included this setting in our experiments. Moreover, we transferred parameters layer by layer to answer our second research question. Notice that the E\n\u00a0 \u00a1 \u2642 H \u00a0 \u00a1 \u2642 O \u00a0 \u00a1 \u2642 and E1H1O1 settings8 are inapplicable to SNLI\u2192MSRP, because the output targets do not share same meanings and numbers of target classes.\nThrough Subsections 5.1\u20135.3, we initialized the parameters of SICK and MSRP with the ones corresponding to the highest validation accuracy of SNLI. In Subsection 5.4, we further investigated when the parameters are ready to be transferred during the training on S."}, {"heading": "5.1 Overall Performance", "text": "Table 3 shows the main results of INIT. A quick observation is that using SNLI information significantly improves the SICK performance, which is not surprising and also reported in Bowman et al. (2015).\nFor MSRP, however, there is nearly no improvement in performance regardless of how we transfer the parameters. Although in previous studies, researchers have mainly drawn positive conclusions about transfer learning, we find a negative result similar to ours upon careful examination of Collobert and Weston (2008). In that paper, the authors report transferring NER, POS, CHK, and pretrained word embeddings improves the SRL task by 1.91\u20133.90% accuracy (out of 16.54\u2013 18.40% error rate), with gain mainly due to word embeddings. In the settings that use pretrained\n8Please refer to the caption of Table 3 for the 4, 2, 1, and \u00a0 \u00a1 \u2642 symbols."}, {"heading": "E4 H2 O2 70.9 69.0", "text": "\u00a0 \u00a1 \u2642\n: Parameters are transferred but frozen;\n1: Parameters are transferred and fine-tuned. +b: consistent with Bowman et al. (2015); +c: consistent with Collobert and Weston (2008).\nword embeddings (which is common in NLP), NER, POS, and CHK improve the SRL accuracy by 0.04\u20130.21%. Likewise, in the SNLI\u2192MSRP experiment, the E1H1O2 setting yields a degradation of 0.2% (\u223c.5x std and not statistically significant). The incapability of transferring is also proved by locking embeddings and hidden layers (E \u00a0 \u00a1 \u2642 H \u00a0 \u00a1 \u2642\nO2). We see in this setting, the test performance is even worse than majority-class guess. Further examining its training accuracy, which is 65.5%, we conclude that extracted features of SNLI by our CNN model are irrelevant to MSRP.\nThe above results are rather frustrating, indicating for RQ1 that neural networks may not be transferable to NLP tasks of different semantics. These results are different from those in the image processing domain, where feature detectors are almost always transferable (Donahue et al., 2014; Yosinski et al., 2014)."}, {"heading": "5.2 Layer-by-Layer Analysis", "text": "To answer RQ2, we next analyze the transferability of each layer. Since SNLI\u2192MSRP is nontransferable, we mainly focus on SNLI\u2192SICK in this section.\nFirst, we freeze both embeddings and hidden layers (E\n\u00a0 \u00a1 \u2642 H \u00a0 \u00a1 \u2642 ). If we further freeze the output layer (O\n\u00a0 \u00a1 \u2642 ), the performance in SNLI\u2192SICK drops by more than 30%, but by tuning the output layer\u2019s parameters (O2), we can obtain a similar result to the baseline (E4H2O2). In the finetuning settings (E1H1), transferring the output\nlayer (O1) improves the accuracy by 1.3% (\u223c1x std) compared with O2. The finding suggests that the output layer is mainly specific to a dataset. Transferring the output layer\u2019s parameters yields little (if any) gain.\nThe hidden layers bring about the main performance improvement of transferring. Even if we freeze embeddings and hidden layers (E\n\u00a0 \u00a1 \u2642 H \u00a0 \u00a1 \u2642 ), we obtain an accuracy similar to the baseline as long as the output is not frozen. Likewise, in the finetuning setting, hidden-layer transfer improves the accuracy by another 5.3% on the basis of transferring word embeddings (which improves the accuracy by 0.1%).\nRegarding MSRP, the embeddings are the only parameters that have been observed to be transferable, although the improvement (0.9% in accuracy, 1.8x std) is not large either. As the above studies use word2vec to pretrain word embeddings (E4) on the Wikipedia corpus (which is a common practice in the literature), a curious question is whether word embeddings are transferable, provided that they are randomly initialized.\nTo answer this question, we first trained SNLI again with word embeddings being randomly initialized, and then transferred the pretrained word embeddings (in a supervised manner on SNLI) to MSRP. Table 4 compares the result of transferring word embeddings (pretrained by supervised/unsupervied approaches) with nontransferring. As is seen, random initialization of word embeddings works fine for large datasets like SNLI, but performs very poorly in MSRP. Transferring word embeddings that are pretrained purely by supervised objective on SNLI significantly improves the performance, but is still worse than word2vec pretraining by 1.8x std. Therefore, we conclude\nWord embeddings (purely pretrained by supervised approaches on S) are indeed transferable across semantically different tasks. When large unlabeled corpora are available, however, unsupervised pretraining of word embeddings like word2vec is preferable."}, {"heading": "5.3 How does learning rate affect transfer?", "text": "Bowman et al. (2015) suggest that after transferring, a large learning rate may damage the knowledge stored in the parameters; in their paper, they transfer the learning rate information (AdaDelta) from S and T in addition to the parameters.\nAlthough the rule of the thumb is to choose all hyperparameters\u2014including the learning rate\u2014by validation, we are curious whether the above conjecture holds. Estimating a rough range of sensible hyperparameters can ease the burden of model selection; it also provides evidence to better understand how transfer learning actually works.\nWe plot the learning curves of different learning rates \u03b1 in Figure 2 (SNLI\u2192SICK, E1H1O2). (In the figure, no learning rate decay is applied.) As we see, with a large learning rate like \u03b1 = 0.3, the accuracy increases fast and peaks at the 10th epoch. Training with a small learning rate (e.g., \u03b1 = 0.01) is slow, but its peak performance is comparable to large learning rates when iterated by, say, 100 epochs. Aside from our main conclusions, we have the following additional finding:\nIn INIT, transferring learning rate information is not necessarily useful. A large learning rate does not damage the knowledge stored in the pretrained hyperparameters, but accelerates the training process to a large extent. In all, we may need perform validation to choose the learning rate if computational resources are available."}, {"heading": "5.4 When is it ready to transfer?", "text": "In the above experiments, we transfer the parameters when they achieve the highest validation performance on S. This is a straightforward and intuitive practice.\nHowever, we may imagine that the parameters well-tuned to the source dataset may be too specific to it, i.e., the model overfits S and thus may underfit T . Another advantage of early transfer lies in computational concerns. If we manage to transfer model parameters after one or a few epochs on S, we can save much time especially when S is large.\nWe therefore made efforts in studying when the neural model is ready to be transferred. Figure 3a plots the learning curve of the source task SNLI. The accuracy increases sharply from epochs 1\u20135; later, it reaches a plateau but is still growing slowly until the 23rd epoch gives the highest validation accuracy. (Results related to the validation set are not plotted in the figure).\nWe then transferred the parameters at different stages (epochs) of SNLI\u2019s training to SICK and MSRP (also with the setting E1H1O2). Their accuracies are plotted in Figure 3b.\nTransferring SNLI to MSRP at any epoch appears to be frustratingly ineffective. No matter how the model performs on SNLI, it can hardly fit MSRP better than without transfer. The results\nrule out some undesirable factors which may cause the failure to transfer from SNLI to MSRP in Subsection 5.1.\nThe SNLI\u2192SICK experiment produces interesting yet undesirable results. Using the second epoch of SNLI\u2019s training yields the highest transfer performance on SICK, i.e., 78.98%. However, the SNLI performance itself is comparatively low at that time (72.65% v.s. 76.26% at epoch 23). Later, the performance decreases gradually by 1\u2013 2%. Although the degradation is not significant, the tendency is reasonably perceptible, showing that by fitting S too well the parameters may be ineffective for T more or less. More evidence is needed in order to draw conclusions. Nevertheless, from Figure 3, we are reasonably safe to conclude\nWhen we apply INIT for transferring, only a few epochs over the source dataset are sufficient to capture transferable knowledge, although the source task performance has not been optimal."}, {"heading": "6 MULT, and its Combination with INIT", "text": "To answer RQ3, we investigate how multi-task learning performs in transfer learning; we also analyze the effect of the combination of MULT and INIT. In this section, we applied the setting: sharing embeddings and hidden layers (denoted as E\u2665H\u2665O2), analogous to E1H1O2 in INIT. Note that sharing all parameters E\u2665H\u2665O\u2665 is not applicable to MSRP because of different output objectives; thus we did not apply this setting.\nWe also tried the combination of MULT and INIT, i.e., we used the pretrained parameters on SNLI to initialize the multi-task training of SNLI and SICK/MSRP. This setting could be visually represented by E1\u2665H1\u2665O2.\nIn both MULT and MULT+INIT, we had a hyperparameter \u03bb \u2208 (0, 1) balancing the source and target tasks (defined in Section 4). \u03bb was tuned with a granularity of 0.1. As a friendly reminder, \u03bb = 1 refers to using T only; \u03bb = 0 refers to using S only. After finding that \u03bb = 0.1 yields the highest performance of MULT in the SNLI+SICK experiment (the thick blue line in Figure 4a), we further tuned the \u03bb from 0.01 to 0.09 with a finegrained granularity of 0.02.\nThe results are shown in Figure 4. From the green curves in the second subplot, we see MULT (with or without INIT of SNLI) does not improve the accuracy of MSRP; its inability to transfer is\ncross-checked with INIT in Section 5. For SICK, on the other hand, transferability of the neural model is also consistently positive (blue curves in Figure 4a), supporting our conclusion to RQ1 that NLP neural transfer learning depends largely on how similar in semantics the source and target datasets are.\nMoreover, we see that the peak performance of MULT is 79.6% when \u03bb is 0.03, slightly higher than 79.0% by INIT in Figure 3b. If \u03bb is large, (e.g., \u2265 0.5), the performance is generally similar to without transfer. Furthermore, we find that when \u03bb is very small (say 0.01 in MULT or 0.01 and 0.03 in MULT+INIT), the performance drops sharply, as it fits S too much and thus underfits T.\nThe transfer performance of MULT+INIT (E1\u2665H1\u2665O2) remains high for different values of \u03bb. As the parameters given by INIT have conveyed sufficient information about the source task, MULT+INIT consistently outperforms nontransferring (70.3%) by a large margin. Its peak performance 77.6% is achieved when \u03bb = 0.6, which is sightly higher than for merely applying INIT (76.3% in the E1H1O2 setting), but sightly lower than for MULT only. As these qualitative results are not very significant and may vary for different tasks and models, we answer our RQ3 as follows.\nIn our experiment, MULT and INIT are generally comparable, and MULT is slightly better than INIT. We do not obtain further gain by combining MULT and INIT.9"}, {"heading": "7 Concluding Remarks", "text": "In this paper, we addressed the problem of transfer learning in neural network-based NLP applications. We conducted experiments on three datasets, showing that the transferability of neural NLP models depends on the semantic relatedness of the source and target tasks. We analyzed the behavior of different neural layers: word embeddings are transferable but the results are similar to (or worse than) word2vec; hidden layers are the main transferable features that improve the performance; and the output layer is generally unable to transfer. We also experimented with two transfer methods: parameter initialization (INIT) and multi-task learning (MULT); they generally perform similarly in our experiment. Additional findings are boxed in Section 5 and not repeated here.\n9For aesthetic purposes, the main results that have been boxed in Section 1 are not boxed again.\nOur study provides insight on the transferability of neural NLP models; the results also help to better understand neural features in general.\nHow transferable are the conclusions in this paper? Although we had in total more than 3000 separate runs of experiments in this paper, we have to concede that empirical studies are subject to a variety of factors (e.g., models, tasks, datasets), and that conclusions may vary in different scenarios. Therefore, along with analyzing our own experimental data, we have also carefully collected related results in the literature, serving as additional evidence in answer to our research questions. As our results are generally consistent with previously reported ones, we think the generality of this work is fair and that the conclusions can be generalized to similar scenarios.\nFuture work. Our work also points out some future directions of research. We would like to analyze different MULT strategies; more efforts are also needed in developing an effective yet robust method for multi-task learning."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "Transfer learning is aimed to make use of valuable knowledge in a source domain to help the model performance in a target domain. It is particularly important to neural networks because neural models are very likely to be overfitting. In some fields like image processing, many studies have shown the effectiveness of neural networkbased transfer learning. For neural NLP, however, existing studies have only casually applied transfer learning, and conclusions are inconsistent. In this paper, we conduct a series of empirical studies and provide an illuminating picture on the transferability of neural networks in NLP.1", "creator": "TeX"}}}