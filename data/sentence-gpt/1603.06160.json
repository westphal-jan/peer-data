{"id": "1603.06160", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Mar-2016", "title": "Stochastic Variance Reduction for Nonconvex Optimization", "abstract": "We study nonconvex finite-sum problems and analyze stochastic variance reduced gradient (SVRG) methods for them. SVRG and related methods have recently surged into prominence for convex optimization given their edge over stochastic gradient descent (SGD); but their theoretical analysis almost exclusively assumes convexity. In contrast, we prove non-asymptotic rates of convergence (to stationary points) of SVRG for nonconvex optimization, and show that it is provably faster than SGD and gradient descent to estimate SVRG for nonconvex optimization. In addition, the empirical evidence supports that SVRG is less efficient than SGD and gradient descent to estimate SVRG for nonconvex optimization; it is also more efficient than SGD and gradient descent to estimate SVRG for nonconvex optimization.", "histories": [["v1", "Sat, 19 Mar 2016 23:37:38 GMT  (130kb,D)", "http://arxiv.org/abs/1603.06160v1", null], ["v2", "Mon, 4 Apr 2016 23:08:20 GMT  (130kb,D)", "http://arxiv.org/abs/1603.06160v2", "Minor feedback changes"]], "reviews": [], "SUBJECTS": "math.OC cs.LG cs.NE stat.ML", "authors": ["sashank j reddi", "ahmed hefny", "suvrit sra", "barnab\u00e1s p\u00f3czos", "alexander j smola"], "accepted": true, "id": "1603.06160"}, "pdf": {"name": "1603.06160.pdf", "metadata": {"source": "CRF", "title": "Stochastic Variance Reduction for Nonconvex Optimization", "authors": ["Sashank J. Reddi", "Ahmed Hefny"], "emails": ["sjakkamr@cs.cmu.edu", "ahefny@cs.cmu.edu", "suvrit@mit.edu", "bapoczos@cs.cmu.edu", "alex@smola.org"], "sections": [{"heading": "1 Introduction", "text": "We study nonconvex finite-sum problems of the form\nmin x\u2208Rd\nf(x) := 1\nn n\u2211 i=1 fi(x), (1)\nwhere neither f nor the individual fi (i \u2208 [n]) are necessarily convex; just Lipschitz smooth (i.e., Lipschitz continuous gradients). We use Fn to denote all functions of the form (1). We optimize such functions in the Incremental First-order Oracle (IFO) framework (Agarwal & Bottou, 2014) defined below.\nDefinition 1. For f \u2208 Fn, an IFO takes an index i \u2208 [n] and a point x \u2208 Rd, and returns the pair (fi(x),\u2207fi(x)).\nar X\niv :1\n60 3.\n06 16\n0v 1\n[ m\nIFO based complexity analysis was introduced to study lower bounds for finite-sum problems. Algorithms that use IFOs are favored in large-scale applications as they require only a small amount first-order information at each iteration. Two fundamental models in machine learning that profit from IFO algorithms are (i) empirical risk minimization, which typically uses convex finite-sum models; and (ii) deep learning, which uses nonconvex ones.\nThe prototypical IFO algorithm, stochastic gradient descent (Sgd)1 has witnessed tremendous progress in the recent years. By now a variety of accelerated, parallel, and faster converging versions are known. Among these, of particular importance are variance reduced (VR) stochastic methods (Schmidt et al., 2013; Johnson & Zhang, 2013; Defazio et al., 2014a), which have delivered exciting progress such as linear convergence rates (for strongly convex functions) as opposed to sublinear rates of ordinary Sgd (Robbins & Monro, 1951; Nemirovski et al., 2009). Similar (but not same) benefits of VR methods can also be seen in smooth convex functions. The Svrg algorithm of (Johnson & Zhang, 2013) is particularly attractive here because of its low storage requirement in comparison to the algorithms in (Schmidt et al., 2013; Defazio et al., 2014a).\nDespite the meteoric rise of VR methods, their analysis for general nonconvex problems is largely missing. Johnson & Zhang (2013) remark on convergence of Svrg when f \u2208 Fn is locally strongly convex and provide compelling experimental results (Fig. 4 in (Johnson & Zhang, 2013)). However, problems encountered in practice are typically not even locally convex, let alone strongly convex. The current analysis of Svrg does not extend to nonconvex functions as it relies heavily on convexity for controlling the variance. Given the dominance of stochastic gradient methods in optimizing deep neural nets and other large nonconvex models, theoretical investigation of faster nonconvex stochastic methods is much needed.\nConvex VR methods are known to enjoy the faster convergence rate of GradientDescent but with a much weaker dependence on n, without compromising the rate like Sgd. However, it is not clear if these benefits carry beyond convex problems, prompting the central question of this paper:\nFor nonconvex functions in Fn, can one achieve convergence rates faster than both Sgd and GradientDescent using an IFO? If so, then how does the rate depend on n and on the number of iterations performed by the algorithm?\nPerhaps surprisingly, we provide an affirmative answer to this question by showing that a careful selection of parameters in Svrg leads to faster convergence than both Sgd and GradientDescent.\n1We use \u2018incremental gradient\u2019 and \u2018stochastic gradient\u2019 interchangeably, though we are only interested in finite-sum problems.\nTo our knowledge, ours is the first work to improve convergence rates of Sgd and GradientDescent for IFO-based nonconvex optimization.\nMain Contributions. We summarize our main contributions below and also list the key results in Table 1.\n\u2022 We analyze nonconvex stochastic variance reduced gradient (Svrg), and prove that it has faster rates of convergence than GradientDescent and ordinary Sgd. We show that Svrg is faster than GradientDescent by a factor of n1/3 (see Table 1). \u2022 We provide new theoretical insights into the interplay between step-size, iteration complexity and convergence of nonconvex Svrg (see Corollary 2). \u2022 For an interesting nonconvex subclass of Fn called gradient dominated functions (Polyak, 1963; Nesterov & Polyak, 2006), we propose a variant of Svrg that attains a global linear rate of convergence. We improve upon many prior results for this subclass of functions (see Section 3.1). To the best of our knowledge, ours is the first work that shows a stochastic method with linear convergence for gradient dominated functions. \u2022 We analyze mini-batch nonconvex Svrg and show that it provably benefits from mini-batching. Specifically, we show theoretical linear speedups in parallel settings for large mini-batch sizes. By using a mini-batch of size b (< n2/3), we show that mini-batch nonconvex Svrg is faster by a factor of b (Theorem 7). We are not aware of any prior work on mini-batch first-order stochastic methods that shows linear speedup in parallel settings for nonconvex optimization. \u2022 Our analysis yields as a byproduct a direct convergence analysis for Svrg for smooth convex functions (Section 4). \u2022 We examine a variant of Svrg (called Msvrg) that has faster rates than both GradientDescent and Sgd."}, {"heading": "1.1 Related Work", "text": "Convex. Bertsekas (2011) surveys several incremental gradient methods for convex problems. A key reference for stochastic convex optimization (for minEz[F (x, z)]) is (Nemirovski et al., 2009). Faster rates of convergence are attained for problems in Fn by VR methods, see e.g., (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Konec\u030cny\u0301 et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b). Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015). Agarwal & Bottou (2014) study lower-bounds for convex finite-sum problems. ShalevShwartz (2015) prove linear convergence of stochastic dual coordinate ascent when the individual fi (i \u2208 [n]) are nonconvex but f is strongly convex. They do not study the general nonconvex case. Moreover, even in their special setting our results improve upon theirs for the high condition number regime.\nNonconvex. Sgd dates at least to the seminal work (Robbins & Monro, 1951); and since then it has been developed in several directions (Poljak & Tsypkin, 1973; Ljung, 1977; Bottou, 1991; Kushner & Clark, 2012). In the (nonsmooth) finite-sum setting, Sra (2012) considers proximal splitting methods, and analyzes asymptotic convergence with nonvanishing gradient errors. Hong (2014) studies a distributed nonconvex incremental ADMM algorithm.\nThese works, however, only prove expected convergence to stationary points and often lack analysis of rates. The first nonasymptotic convergence rate analysis for Sgd is in (Ghadimi & Lan, 2013), who show that Sgd ensures \u2016\u2207f\u20162 \u2264 in O(1/ 2) iterations. A similar rate for parallel and distributed Sgd was shown recently in (Lian et al., 2015). GradientDescent is known to ensure \u2016\u2207f\u20162 \u2264 in O(1/ ) iterations (Nesterov, 2003, Chap. 1.2.3).\nThe first analysis of nonconvex Svrg seems to be due to Shamir (2014), who considers the special problem of computing a few leading eigenvectors (e.g., for PCA); see also the follow up work (Shamir, 2015). Finally, we note another interesting example, stochastic optimization of locally quasi-convex functions (Hazan et al., 2015), wherein actually a O(1/ 2) convergence in function value is shown."}, {"heading": "2 Background & Problem Setup", "text": "We say f is L-smooth if there is a constant L such that\n\u2016\u2207f(x)\u2212\u2207f(y)\u2016 \u2264 L\u2016x\u2212 y\u2016, \u2200 x, y \u2208 Rd.\nThroughout, we assume that the functions fi in (1) are L-smooth, so that \u2016\u2207fi(x) \u2212 \u2207fi(y)\u2016 \u2264 L\u2016x\u2212 y\u2016 for all i \u2208 [n]. Such an assumption is very common in the analysis of first-order methods. Here the Lipschitz constant L is assumed to be independent of n. A function f is called \u03bb-strongly convex if there is \u03bb \u2265 0 such that\nf(x) \u2265 f(y) + \u3008\u2207f(y), x\u2212 y\u3009+ \u03bb2 \u2016x\u2212 y\u2016 2 \u2200x, y \u2208 Rd.\nThe quantity \u03ba := L/\u03bb is called the condition number of f , whenever f is L-smooth and \u03bb-strongly convex. We say f is non-strongly convex when f is 0-strongly convex.\nWe also recall the class of gradient dominated functions (Polyak, 1963; Nesterov & Polyak, 2006), where a function f is called \u03c4 -gradient dominated if for any x \u2208 Rd\nf(x)\u2212 f(x\u2217) \u2264 \u03c4\u2016\u2207f(x)\u20162, (2)\nwhere x\u2217 is a global minimizer of f . Note that such a function f need not be convex; it is also easy to show that a \u03bb-strongly convex function is 1/2\u03bb-gradient dominated.\nWe analyze convergence rates for the above classes of functions. Following Nesterov (2003); Ghadimi & Lan (2013) we use \u2016\u2207f(x)\u20162 \u2264 to judge when is iterate x approximately stationary. Contrast this with Sgd for convex f , where one uses [f(x) \u2212 f(x\u2217)] or \u2016x \u2212 x\u2217\u20162 as a convergence criterion. Unfortunately, such criteria cannot be used for nonconvex functions due to the hardness of the problem. While the quantities \u2016\u2207f(x)\u20162 and f(x)\u2212 f(x\u2217) or \u2016x\u2212 x\u2217\u20162 are not comparable in general (see (Ghadimi & Lan, 2013)), they are typically assumed to be of similar magnitude. Throughout our analysis, we do not assume n to be constant, and report dependence on it in our results. For our analysis, we need the following definition.\nDefinition 2. A point x is called -accurate if \u2016\u2207f(x)\u20162 \u2264 . A stochastic iterative algorithm is said to achieve -accuracy in t iterations if E[\u2016\u2207f(xt)\u20162] \u2264 , where the expectation is over the stochasticity of the algorithm.\nWe introduce one more definition useful in the analysis of Sgd methods for bounding the variance.\nDefinition 3. We say f \u2208 Fn has a \u03c3-bounded gradient if \u2016\u2207fi(x)\u2016 \u2264 \u03c3 for all i \u2208 [n] and x \u2208 Rd."}, {"heading": "2.1 Nonconvex SGD: Convergence Rate", "text": "Stochastic gradient descent (Sgd) is one of the simplest algorithms for solving (1); Algorithm 1 lists its pseudocode. By using a uniformly randomly chosen (with replacement) index it from [n], Sgd\nAlgorithm 1 SGD\nInput: x0 \u2208 Rd, Step-size sequence: {\u03b7t > 0}T\u22121t=0 for t = 0 to T \u2212 1 do\nUniformly randomly pick it from {1, . . . , n} xt+1 = xt \u2212 \u03b7t\u2207fit(x)\nend for\nuses an unbiased estimate of the gradient at each iteration. Under appropriate conditions, Ghadimi & Lan (2013) establish convergence rate of Sgd to a stationary point of f . Their results include the following theorem.\nTheorem 1. Suppose f has \u03c3-bounded gradient; let \u03b7t = \u03b7 = c/ \u221a T where c =\n\u221a 2(f(x0)\u2212f(x\u2217))\nL\u03c32 , and\nx\u2217 is an optimal solution to (1). Then, the iterates of Algorithm 1 satisfy\nmin 0\u2264t\u2264T\u22121\nE[\u2016\u2207f(xt)\u20162] \u2264 \u221a\n2(f(x0)\u2212 f(x\u2217))L T \u03c3.\nFor completeness we present a proof in the appendix. Note that our choice of step size \u03b7 requires knowing the total number of iterations T in advance. A more practical approach is to use a \u03b7t \u221d 1/ \u221a t or 1/t. A bound on IFO calls made by Algorithm 1 follows as a corollary of Theorem 1.\nCorollary 1. Suppose function f has \u03c3-bounded gradient, then the IFO complexity of Algorithm 1 to obtain an -accurate solution is O(1/ 2).\nAs seen in Theorem 1, Sgd has a convergence rate of O(1/ \u221a T). This rate is not improvable in general even when the function is (non-strongly) convex (Nemirovski & Yudin, 1983). This barrier is due to the variance introduced by the stochasticity of the gradients, and it is not clear if better rates can be obtained Sgd even for convex f \u2208 Fn."}, {"heading": "3 Nonconvex SVRG", "text": "We now turn our focus to variance reduced methods. We use Svrg (Johnson & Zhang, 2013), an algorithm recently shown to be very effective for reducing variance in convex problems. As a result, it has gained considerable interest in both machine learning and optimization communities. We seek to understand its benefits for nonconvex optimization. For reference, Algorithm 2 presents Svrg\u2019s pseudocode.\nObserve that Algorithm 2 operates in epochs. At the end of epoch s, a full gradient is calculated at the point x\u0303s, requiring n calls to the IFO. Within its inner loop Svrg performs m stochastic updates. The total number of IFO calls for each epoch is thus \u0398(m+ n). For m = 1, the algorithm reduces to the classic GradientDescent algorithm. Suppose m is chosen to be O(n) (typically used in practice), then the total IFO calls per epoch is \u0398(n). To enable a fair comparison with Sgd, we assume that the total number of inner iterations across all epochs in Algorithm 2 is T . Also note a simple but important implementation detail: as written, Algorithm 2 requires storing all the iterates xs+1t (0 \u2264 t \u2264 m). This storage can be avoided by keeping a running average with respect to the probability distribution {pi}mi=0.\nAlgorithm 2 attains linear convergence for strongly convex f (Johnson & Zhang, 2013); for nonstrongly convex functions, rates faster than Sgd can be shown by using an indirect perturbation argument\u2014see e.g., (Konec\u030cny\u0301 & Richta\u0301rik, 2013; Xiao & Zhang, 2014).\nWe first state an intermediate result for the iterates of nonconvex Svrg. To ease exposition, we define\n\u0393t = ( \u03b7t \u2212\nct+1\u03b7t \u03b2t\n\u2212 \u03b72tL\u2212 2ct+1\u03b72t ) , (3)\nfor some parameters ct+1 and \u03b2t (to be defined shortly). Our first main result is the following theorem that provides convergence rate of Algorithm 2.\nTheorem 2. Let f \u2208 Fn. Let cm = 0, \u03b7t = \u03b7 > 0, \u03b2t = \u03b2 > 0, and ct = ct+1(1+\u03b7\u03b2+2\u03b72L2)+\u03b72L3 such that \u0393t > 0 for 0 \u2264 t \u2264 m \u2212 1. Define the quantity \u03b3n := mint \u0393t. Further, let pi = 0 for 0 \u2264 i < m and pm = 1, and let T be a multiple of m. Then for the output xa of Algorithm 2 we have\nE[\u2016\u2207f(xa)\u20162] \u2264 f(x0)\u2212 f(x\u2217)\nT\u03b3n ,\nwhere x\u2217 is an optimal solution to (1).\nAlgorithm 2 SVRG ( x0, T,m, {pi}mi=0, {\u03b7i} m\u22121 i=0 ) 1: Input: x\u03030 = x0m = x\n0 \u2208 Rd, epoch length m, step sizes {\u03b7i > 0}m\u22121i=0 , S = dT/me, discrete probability distribution {pi}mi=0\n2: for s = 0 to S \u2212 1 do 3: xs+10 = x s m 4: gs+1 = 1 n \u2211n i=1\u2207fi(x\u0303\ns) 5: for t = 0 to m\u2212 1 do 6: Uniformly randomly pick it from {1, . . . , n} 7: vs+1t = \u2207fit(xs+1t )\u2212\u2207fit(x\u0303s) + gs+1 8: xs+1t+1 = x s+1 t \u2212 \u03b7tvs+1t\n9: end for 10: x\u0303s+1 = \u2211m i=0 pix s+1 i 11: end for 12: Output: Iterate xa chosen uniformly random from {{xs+1t }m\u22121t=0 } S\u22121 s=0 .\nFurthermore, we can also show that nonconvex Svrg exhibits expected descent (in objective) after every epoch. The condition that T is a multiple of m is solely for convenience and can be removed by slight modification of the theorem statement. Note that the value \u03b3n above can depend on n. To obtain an explicit dependence, we simplify it using specific choices for \u03b7 and \u03b2, as formalized below.\nTheorem 3. Suppose f \u2208 Fn. Let \u03b7 = \u00b50/(Ln\u03b1) (0 < \u00b50 < 1 and 0 < \u03b1 \u2264 1), \u03b2 = L/n\u03b1/2, m = bn3\u03b1/2/(3\u00b50)c and T is some multiple of m. Then there exists universal constants \u00b50, \u03bd > 0 such that we have the following: \u03b3n \u2265 \u03bdLn\u03b1 in Theorem 2 and\nE[\u2016\u2207f(xa)\u20162] \u2264 Ln\u03b1[f(x0)\u2212 f(x\u2217)]\nT\u03bd ,\nwhere x\u2217 is an optimal solution to the problem in (1) and xa is the output of Algorithm 2.\nBy rewriting the above result in terms IFO calls, we get the following general corollary for nonconvex Svrg.\nCorollary 2. Suppose f \u2208 Fn. Then the IFO complexity of Algorithm 2 (with parameters from Theorem 3) for achieving an -accurate solution is:\nIFO calls =\n{ O ( n+ (n1\u2212 \u03b1 2 / ) ) , if \u03b1 < 2/3,\nO (n+ (n\u03b1/ )) , if \u03b1 \u2265 2/3.\nCorollary 2 shows the interplay between step size and the IFO complexity. We observe that the number of IFO calls is minimized in Corollary 2 when \u03b1 = 2/3. This gives rise to the following key results of the paper.\nCorollary 3. Suppose f \u2208 Fn. Let \u03b7 = \u00b51/(Ln2/3) (0 < \u00b51 < 1), \u03b2 = L/n1/3, m = bn/(3\u00b51)c and T is some multiple of m. Then there exists universal constants \u00b51, \u03bd1 > 0 such that we have the following: \u03b3n \u2265 \u03bd1Ln2/3 in Theorem 2 and\nE[\u2016\u2207f(xa)\u20162] \u2264 Ln2/3[f(x0)\u2212 f(x\u2217)]\nT\u03bd1 ,\nwhere x\u2217 is an optimal solution to the problem in (1) and xa is the output of Algorithm 2.\nCorollary 4. If f \u2208 Fn, then the IFO complexity of Algorithm 2 (with parameters in Corollary 3) to obtain an -accurate solution is O(n+ (n2/3/ )).\nNote the rate of O(1/T ) in the above results, as opposed to slower O(1/ \u221a T ) rate of Sgd (The-\norem 1). For a more comprehensive comparison of the rates, refer to Section 6.\nAlgorithm 3 GD-SVRG ( x0,K, T,m, {pi}mi=0, {\u03b7i} m\u22121 i=0 ) Input: x0 \u2208 Rd, K, epoch length m, step sizes {\u03b7i > 0}m\u22121i=0 , discrete probability distribution {pi} m i=0\nfor k = 0 to K do xk = SVRG(xk\u22121, T,m, {pi}mi=0, {\u03b7i}m\u22121i=0 ) end for Output: xK"}, {"heading": "3.1 Gradient Dominated Functions", "text": "Before ending our discussion on convergence of nonconvex Svrg, we prove a linear convergence rate for the class of \u03c4 -gradient dominated functions (2). For ease of exposition, assume that \u03c4 > n1/3, a property analogous to the \u201chigh condition number regime\u201d for strongly convex functions typical in machine learning. Note that gradient dominated functions can be nonconvex.\nTheorem 4. Suppose f is \u03c4 -gradient dominated where \u03c4 > n1/3. Then, the iterates of Algorithm 3 with T = d2L\u03c4n2/3/\u03bd1e, m = bn/(3\u00b51)c, \u03b7t = \u00b51/(Ln2/3) for all 0 \u2264 t \u2264 m \u2212 1 and pm = 1 and pi = 0 for all 0 \u2264 i < m satisfy\nE[\u2016\u2207f(xk)\u20162] \u2264 2\u2212k[\u2016\u2207f(x0)\u20162].\nHere \u00b51 and \u03bd1 are the constants used in Corollary 3.\nIn fact, for \u03c4 -gradient dominated functions we can prove a stronger result of global linear convergence.\nTheorem 5. If f is \u03c4 -gradient dominated (\u03c4 > n1/3), then with T = d2L\u03c4n2/3/\u03bd1e, m = bn/(3\u00b51)c, \u03b7t = \u00b51/(Ln\n2/3) for 0 \u2264 t \u2264 m \u2212 1 and pm = 1 and pi = 0 for all 0 \u2264 i < m, the iterates of Algorithm 3 satisfy\nE[f(xk)\u2212 f(x\u2217)] \u2264 2\u2212k[f(x0)\u2212 f(x\u2217)].\nHere \u00b51, \u03bd1 are as in Corollary 3; x \u2217 is an optimal solution.\nAn immediate consequence is the following.\nCorollary 5. If f is \u03c4 -gradient dominated, the IFO complexity of Algorithm 3 (with parameters from Theorem 4) to compute an -accurate solution is O((n+ \u03c4n2/3) log(1/ )).\nNote that GradientDescent can also achieve linear convergence rate for gradient dominated functions (Polyak, 1963). However, GradientDescent requires O(n + n\u03c4 log(1/ )) IFO calls to obtain an -accurate solution as opposed to O(n + n2/3\u03c4 log(1/ )) for Svrg. Similar (but not the same) gains can be seen for Svrg for strongly convex functions (Johnson & Zhang, 2013). Also notice that we did not assume anything except smoothness on the individual functions fi in the above results. In particular, the following corollary is also an immediate consequence.\nCorollary 6. If f is \u03bb-strongly convex and the functions {fi}ni=1 are possibly nonconvex, then the number of IFO calls made by Algorithm 3 (with parameters from Theorem 4) to compute an -accurate solution is O((n+ n2/3\u03ba) log(1/ )).\nRecall that here \u03ba denotes the condition number L/\u03bb for a \u03bb-strongly convex function. Corollary 6 follows from Corollary 5 upon noting that \u03bb-strongly convex function is 1/2\u03bb-gradient dominated. Theorem 5 generalizes the linear convergence result in (Johnson & Zhang, 2013) since it allows nonconvex fi. Observe that Corollary 6 also applies when fi is strongly convex for all i \u2208 [n], though in this case a more refined result can be proved (Johnson & Zhang, 2013).\nFinally, we note that our result also improves on a recent result on Sdca in the setting of Corollary 6 when the condition number \u03ba is reasonably large \u2013 a case that typically arises in machine\nlearning. More precisely, for l2-regularized empirical loss minimization, Shalev-Shwartz (2015) show that Sdca requires O((n + \u03ba2) log(1/ ) iterations when the fi\u2019s are possibly nonconvex but their sum f is strongly convex. In comparison, we show that Algorithm 3 requires O((n+n2/3\u03ba) log(1/ )) iterations, which is an improvement over Sdca when \u03ba > n2/3."}, {"heading": "4 Convex Case", "text": "In the previous section, we showed nonconvex Svrg converges to a stationary point at the rate O(n2/3/T ). A natural question is whether this rate can be improved if we assume convexity? We provide an affirmative answer. For non-strongly convex functions, this yields a direct analysis (i.e., not based on strongly convex perturbations) for Svrg. While we state our results in terms of stationarity gap \u2016\u2207f(x)\u20162 for the ease of comparison, our analysis also provides rates with respect to the optimality gap [f(x)\u2212 f(x\u2217)] (see the proof of Theorem 6 in the appendix). Theorem 6. If fi is convex for all i \u2208 [n], pi = 1/m for 0 \u2264 i \u2264 m \u2212 1, and pm = 0, then for Algorithm 2, we have\nE[\u2016\u2207f(xa)\u20162] \u2264 L\u2016x0 \u2212 x\u2217\u20162 + 4mL2\u03b72[f(x0)\u2212 f(x\u2217)]\nT\u03b7(1\u2212 4L\u03b7) ,\nwhere x\u2217 is optimal for (1) and xa is the output of Algorithm 2.\nWe now state corollaries of this theorem that explicitly show the dependence on n in the convergence rates. Corollary 7. If m = n and \u03b7 = 1/(8L \u221a n) in Theorem 6, then we have the following bound:\nE[\u2016\u2207f(xa)\u20162] \u2264 L \u221a n(16L\u2016x0 \u2212 x\u2217\u20162 + [f(x0)\u2212 f(x\u2217)])\nT ,\nwhere x\u2217 is optimal for (1) and xa is the output of Algorithm 2.\nThe above result uses a step size that depends on n. For the convex case, we can also use step sizes independent of n. The following corollary states the associated result.\nCorollary 8. If m = n and \u03b7 = 1/(8L) in Theorem 6, then we have the following bound:\nE[\u2016\u2207f(xa)\u20162] \u2264 L(16L\u2016x0 \u2212 x\u2217\u20162 + n[f(x0)\u2212 f(x\u2217)])\nT ,\nwhere x\u2217 is optimal for (1) and xa is the output of Algorithm 2.\nWe can rewrite these corollaries in terms of IFO complexity to get the following corollaries.\nCorollary 9. If fi is convex for all i \u2208 [n], then the IFO complexity of Algorithm 2 (with parameters from Corollary 7) to compute an -accurate solution is O(n+ ( \u221a n/ )).\nCorollary 10. If fi is convex for all i \u2208 [n], then the IFO complexity of Algorithm 2 (with parameters from Corollary 8) to compute -accurate solution is O(n/ ).\nThese results follow from Corollary 7 and Corollary 8 and noting that for m = O(n) the total IFO calls made by Algorithm 2 is O(n). It is instructive to quantitatively compare Corollary 9 and Corollary10. With a step size independent of n, the convergence rate of Svrg has a dependence that is in the order of n (Corollary 8). But this dependence can be reduced to \u221a n by either carefully selecting a step size that diminishes with n (Corollary 7) or by using a good initial point x0 obtained by, say, running O(n) iterations of Sgd.\nWe emphasize that the convergence rate for convex case can be improved significantly by slightly modifying the algorithm (either by adding an appropriate strongly convex perturbation (Xiao & Zhang, 2014) or by using a choice of m that changes with epoch (Zhu & Yuan, 2015)). However, it is not clear if these strategies provide any theoretical gains for the general nonconvex case."}, {"heading": "5 Mini-batch Nonconvex SVRG", "text": "In this section, we study the mini-batch version of Algorithm 2. Mini-batching is a popular strategy, especially in multicore and distributed settings as it greatly helps one exploit parallelism and reduce the communication costs. The pseudocode for mini-batch nonconvex Svrg (Algorithm 4) is provided in the supplement due to lack of space. The key difference between the mini-batch Svrg and Algorithm 2 lies in lines 6 to 8. To use mini-batches we replace line 6 with sampling (with replacement) a mini-batch It \u2282 [n] of size b; lines 7 to 8 are replaced with the following updates:\nus+1t = 1 |It| \u2211 it\u2208It ( \u2207fit(xs+1t )\u2212\u2207fit(x\u0303s) ) + gs+1, xs+1t+1 = x s+1 t \u2212 \u03b7tus+1t\nWhen b = 1, this reduces to Algorithm 2. Mini-batch is typically used to reduce the variance of the stochastic gradient and increase the parallelism. Lemma 4 (in Section G of the appendix) shows the reduction in the variance of stochastic gradients with mini-batch size b. Using this lemma, one can derive the mini-batch equivalents of Lemma 1, Theorem 2 and Theorem 3. However, for the sake of brevity, we directly state the following main result for mini-batch Svrg.\nTheorem 7. Let \u03b3n denote the following quantity:\n\u03b3n := min 0\u2264t\u2264m\u22121\n( \u03b7 \u2212 ct+1\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2ct+1\u03b72 ) .\nwhere cm = 0, ct = ct+1(1 + \u03b7\u03b2 + 2\u03b7 2L2/b) + \u03b7 2 tL 3 /b for 0 \u2264 t \u2264 m \u2212 1. Suppose \u03b7 = \u00b52b/(Ln2/3) (0 < \u00b52 < 1), \u03b2 = L/n 1/3, m = bn/(3b\u00b52)c and T is some multiple of m. Then for the mini-batch version of Algorithm 2 with mini-batch size b < n2/3, there exists universal constants \u00b52, \u03bd2 > 0 such that we have the following: \u03b3n \u2265 \u03bd2bLn2/3 and\nE[\u2016\u2207f(xa)\u20162] \u2264 Ln2/3[f(x0)\u2212 f(x\u2217)]\nbT\u03bd2 ,\nwhere x\u2217 is optimal for (1).\nIt is important to compare this result with mini-batched Sgd. For a batch size of b, Sgd obtains a rate of O(1/ \u221a bT ) (Dekel et al., 2012) (obtainable by a simple modification of Theorem 1). Specifically, Sgd has a 1/ \u221a b dependence on the batch size. In contrast, Theorem 7 shows that Svrg has a much better dependence of 1/b on the batch size. Hence, compared to Sgd, Svrg allows more efficient mini-batching. More formally, in terms of IFO queries we have the following result.\nCorollary 11. If f \u2208 Fn, then the IFO complexity of the mini-batch version of Algorithm 2 (with parameters from Theorem 7 and mini-batch size b < n2/3) to obtain an -accurate solution is O(n+ (n2/3/ )).\nCorollary 11 shows an interesting property of mini-batch Svrg. First, note that b IFO calls are required for calculating the gradient on a mini-batch of size b. Hence, Svrg does not gain on IFO complexity by using mini-batches. However, if the b gradients are calculated in parallel, then this leads to a theoretical linear speedup in multicore and distributed settings. In contrast, Sgd does not yield an efficient mini-batch strategy as it requires O(b1/2/ 2) IFO calls for achieving an -accurate solution (Li et al., 2014). Thus, the performance of Sgd degrades with mini-batching."}, {"heading": "6 Comparison of the convergence rates", "text": "In this section, we give a comprehensive comparison of results obtained in this paper. In particular, we compare key aspects of the convergence rates for Sgd, GradientDescent, and Svrg. The comparison is based on IFO complexity to achieve an -accurate solution.\nDependence on n: The number of IFO calls of Svrg and GradientDescent depend explicitly on n. In contrast, the number of oracle calls of Sgd is independent of n (Theorem 1). However, this comes at the expense of worse dependence on . The number of IFO calls in GradientDescent is proportional to n. But for Svrg this dependence reduces to n1/2 for convex (Corollary 7) and n2/3 for nonconvex (Corollary 3) problems. Whether this difference in dependence on n is due to nonconvexity or just an artifact of our analysis is an interesting open problem.\nDependence on : The dependence on (or alternatively T ) follows from the convergence rates of the algorithms. Sgd is seen to depend as O(1/ 2) on , regardless of convexity or nonconvexity. In contrast, for both convex and nonconvex settings, Svrg and GradientDescent converge as O(1/ ). Furthermore, for gradient dominated functions, Svrg and GradientDescent have global linear convergence. This speedup in convergence over Sgd is especially significant when medium to high accuracy solutions are required (i.e., is small).\nAssumptions used in analysis: It is important to understand the assumptions used in deriving the convergence rates. All algorithms assume Lipschitz continuous gradients. However, Sgd requires two additional subtle but important assumptions: \u03c3-bounded gradients and advance knowledge of T (since its step sizes depend on T ). On the other hand, both Svrg and GradientDescent do not require these assumptions, and thus, are more flexible.\nStep size / learning rates: It is valuable to compare the step sizes used by the algorithms. The step sizes of Sgd shrink as the number of iterations T increases\u2014an undesirable property. On the other hand, the step sizes of Svrg and GradientDescent are independent of T . Hence, both these algorithms can be executed with a fixed step size. However, Svrg uses step sizes that depend on n (see Corollary 3 and Corollary 7). A step size independent of n can be used for Svrg for convex f , albeit at cost of worse dependence on n (Corollary 8). GradientDescent does not have this issue as its step size is independent of both n and T .\nDependence on initial point and mini-batch: Svrg is more sensitive to the initial point in comparison to Sgd. This can be seen by comparing Corollary 3 (of Svrg) to Theorem 1 (of Sgd). Hence, it is important to use a good initial point for Svrg. Similarly, a good mini-batch can be beneficial to Svrg. Moreover, mini-batches not only provides parallelism but also good theoretical guarantees (see Theorem 7). In contrast, the performance gain in Sgd with mini-batches is not very pronounced (see Section 5)."}, {"heading": "7 Best of two worlds", "text": "We have seen in the previous section that Svrg combines the benefits of both GradientDescent and Sgd. We now show that these benefits of Svrg can be made more pronounced by an appropriate step size under additional assumptions. In this case, the IFO complexity of Svrg is lower than those of Sgd and GradientDescent. This variant of Svrg (Msvrg) chooses a step size based on the total number of iterations T (or alternatively ). For our discussion below, we assume that T > n. Theorem 8. Let f \u2208 Fn have \u03c3-bounded gradients. Let \u03b7t = \u03b7 = max{c/ \u221a T , \u00b51/(Ln2/3)} (\u00b51 is the\nuniversal constant from Corollary 3), m = bn/(3\u00b51)c, and c = \u221a f(x0)\u2212f(x\u2217) 2L\u03c32 . Further, let T be a multiple of m, pm = 1, and pi = 0 for 0 \u2264 i < m. Then, the output xa of Algorithm 2 satisfies\nE[\u2016\u2207f(xa)\u20162]\n\u2264 \u03bd\u0304min { 2 \u221a 2(f(x0)\u2212 f(x\u2217))L\nT \u03c3, Ln2/3[f(x0)\u2212 f(x\u2217)]\nT\u03bd1\n} ,\nwhere \u03bd\u0304 is a universal constant, \u03bd1 is the universal constant from Corollary 3 and x \u2217 is an optimal solution to (1).\nCorollary 12. If f \u2208 Fn has \u03c3-bounded gradients, the IFO complexity of Algorithm 2 (with parameters from Theorem 8) to achieve an -accurate solution is O(min{1/ 2, n2/3/ }).\nAn almost identical reasoning can be applied when f is convex to get the bounds specified in Table 1. Hence, we omit the details and directly state the following result.\nCorollary 13. Suppose fi is convex for i \u2208 [n] and f has \u03c3-bounded gradients, then the IFO complexity of Algorithm 2 (with step size \u03b7 = max{1/(L \u221a T ), 1/(8L \u221a n)}, m = n and pi = 1/m for 0 \u2264 i \u2264 m\u2212 1 and pm = 0) to achieve an -accurate solution is O(min{1/ 2, \u221a n/ }).\nMsvrg has a convergence rate faster than those of both Sgd and Svrg, though this benefit is not without cost. Msvrg, in contrast to Svrg, uses the additional assumption of \u03c3-bounded gradients. Furthermore, its step size is not fixed since it depends on the number of iterations T . While it is often difficult in practice to compute the step size of Msvrg (Theorem 8), it is typical to try multiple step sizes and choose the one with the best results."}, {"heading": "8 Experiments", "text": "We present our empirical results in this section. For our experiments, we study the problem of multiclass classification using neural networks. This is a typical nonconvex problem encountered in machine learning.\nExperimental Setup. We train neural networks with one fully-connected hidden layer of 100 nodes and 10 softmax output nodes. We use `2-regularization for training. We use CIFAR-10\n2, MNIST3, and STL-104 datasets for our experiments. These datasets are standard in the neural networks literature. The `2 regularization is 1e-3 for CIFAR-10 and MNIST, and 1e-2 for STL-10. The features in the datasets are normalized to the interval [0, 1]. All the datasets come with a predefined split into training and test datasets.\nWe compare Sgd (the de-facto algorithm for training neural networks) against nonconvex Svrg. The step size (or learning rate) is critical for Sgd. We set the learning rate of Sgd using the popular t\u2212inverse schedule \u03b7t = \u03b70(1 + \u03b7\u2032bt/nc)\u22121, where \u03b70 and \u03b7\u2032 are chosen so that Sgd gives the best\n2www.cs.toronto.edu/~kriz/cifar.html 3http://yann.lecun.com/exdb/mnist/ 4https://cs.stanford.edu/~acoates/stl10/\nperformance on the training loss. In our experiments, we also use \u03b7\u2032 = 0; this results in a fixed step size for Sgd. For Svrg, we use a fixed step size as suggested by our analysis. Again, the step size is chosen so that Svrg gives the best performance on the training loss.\nInitialization & mini-batching. Initialization is critical to training of neural networks. We use the normalized initialization in (Glorot & Bengio, 2010) where parameters are chosen uniformly from [\u2212 \u221a 6/(ni + no), \u221a 6/(ni + no)] where ni and no are the number of input and output layers of the neural network, respectively. For Svrg, we use n iterations of Sgd for CIFAR-10 and MINST and 2n iterations of Sgd for STL-10 before running Algorithm 2. Such initialization is standard for variance reduced schemes even for convex problems (Johnson & Zhang, 2013; Schmidt et al., 2013). As noted earlier in Section 6, Svrg is more sensitive than Sgd to the initial point, so such an initialization is typically helpful. We use mini-batches of size 10 in our experiments. Sgd with mini-batches is common in training neural networks. Note that mini-batch training is especially beneficial for Svrg, as shown by our analysis in Section 5. Along the lines of theoretical analysis provided by Theorem 7, we use an epoch size m = n/10 in our experiments.\nResults. We report objective function (training loss), test error (classification error on the test set), and \u2016\u2207f(xt)\u20162 (convergence criterion throughout our analysis) for the datasets. For all the algorithms, we compare these criteria against the number of effective passes through the data, i.e., IFO calls divided by n. This includes the cost of calculating the full gradient at the end of each epoch of Svrg. Due to the Sgd initialization in Svrg and mini-batching, the Svrg plots start from x-axis value of 10 for CIFAR-10 and MNIST and 20 for STL-10. Figure 1 shows the results for our experiment. It can be seen that the \u2016\u2207f(xt)\u20162 for Svrg is lower compared to Sgd, suggesting faster convergence to a stationary point. Furthermore, the training loss is also lower compared to Sgd in all the datasets. Notably, the test error for CIFAR-10 is lower for Svrg, indicating better generalization; we did not notice substantial difference in test error for MNIST and STL-10 (see Section H in the appendix). Overall, these results on a network with one hidden layer are promising; it will be interesting to study Svrg for deep neural networks in the future."}, {"heading": "9 Discussion", "text": "In this paper, we examined a VR scheme for nonconvex optimization. We showed that by employing VR in stochastic methods, one can perform better than both Sgd and GradientDescent in the context of nonconvex optimization. When the function f in (1) is gradient dominated, we proposed a variant of Svrg that has linear convergence to the global minimum. Our analysis shows that Svrg has a number of interesting properties that include convergence with fixed step size, descent property after every epoch; a property that need not hold for Sgd. We also showed that Svrg, in contrast to Sgd, enjoys efficient mini-batching, attaining speedups linear in the size of the minibatches in parallel settings. Our analysis also reveals that the initial point and use of mini-batches are important to Svrg.\nBefore concluding the paper, we would like to discuss the implications of our work and few caveats. One should exercise some caution while interpreting the results in the paper. All our theoretical results are based on the stationarity gap. In general, this does not necessarily translate to optimality gap or low training loss and test error. One criticism against VR schemes in nonconvex optimization is the general wisdom that variance in the stochastic gradients of Sgd can actually help it escape local minimum and saddle points. In fact, Ge et al. (2015) add additional noise to the stochastic gradient in order to escape saddle points. However, one can reap the benefit of VR schemes even in such scenarios. For example, one can envision an algorithm which uses Sgd as an exploration tool to obtain a good initial point and then uses a VR algorithm as an exploitation tool to quickly converge to a good local minimum. In either case, we believe variance reduction can be used as an important tool alongside other tools like momentum, adaptive learning rates for faster and better nonconvex optimization."}, {"heading": "Appendix", "text": ""}, {"heading": "A Nonconvex SGD: Convergence Rate", "text": ""}, {"heading": "Proof of Theorem 1", "text": "Theorem. Suppose f has \u03c3-bounded gradient; let \u03b7t = \u03b7 = c/ \u221a T where c =\n\u221a 2(f(x0)\u2212f(x\u2217))\nL\u03c32 , and\nx\u2217 is an optimal solution to (1). Then, the iterates of Algorithm 1 satisfy\nmin 0\u2264t\u2264T\u22121\nE[\u2016\u2207f(xt)\u20162] \u2264 \u221a\n2(f(x0)\u2212f(x\u2217))L T \u03c3.\nProof. We include the proof here for completeness. Please refer to (Ghadimi & Lan, 2013) for a more general result.\nThe iterates of Algorithm 1 satisfy the following bound: E[f(xt+1)] \u2264 E[f(xt) + \u2329 \u2207f(xt), xt+1 \u2212 xt \u232a + L2 \u2016x t+1 \u2212 xt\u20162] (4)\n\u2264 E[f(xt)]\u2212 \u03b7tE[\u2016\u2207f(xt)\u20162] + L\u03b7 2 t 2 E[\u2016\u2207fit(x t)\u20162] \u2264 E[f(xt)]\u2212 \u03b7tE[\u2016\u2207f(xt)\u20162] + L\u03b7 2 t 2 \u03c3 2. (5)\nThe first inequality follows from Lipschitz continuity of \u2207f . The second inequality follows from the update in Algorithm 1 and since Eit [\u2207fit(xt)] = \u2207f(xt) (unbiasedness of the stochastic gradient). The last step uses our assumption on gradient boundedness. Rearranging Equation (5) we obtain\nE[\u2016\u2207f(xt)\u20162] \u2264 1\u03b7tE[f(x t)\u2212 f(xt+1)] + L\u03b7t2 \u03c3 2. (6)\nSumming Equation (6) from t = 0 to T \u2212 1 and using that \u03b7t is constant \u03b7 we obtain\nmin t\nE[\u2016\u2207f(xt)\u20162] \u2264 1T \u2211T\u22121 t=0 E[\u2016f(xt)\u20162]\n\u2264 1T\u03b7E[f(x 0)\u2212 f(xT )] + L\u03b72 \u03c3 2 \u2264 1T\u03b7 (f(x 0)\u2212 f(x\u2217)) + L\u03b72 \u03c3 2\n\u2264 1\u221a T ( 1 c ( f(x0)\u2212 f(x\u2217) ) + Lc2 \u03c3 2 ) .\nThe first step holds because the minimum is less than the average. The second and third steps are obtained from Equation (6) and the fact that f(x\u2217) \u2264 f(xT ), respectively. The final inequality follows upon using \u03b7 = c/ \u221a T . By setting\nc =\n\u221a 2(f(x0)\u2212 f(x\u2217))\nL\u03c32\nin the above inequality, we get the desired result."}, {"heading": "B Nonconvex SVRG", "text": "In this section, we provide the proofs of the results for nonconvex Svrg. We first start with few useful lemmas and then proceed towards the main results.\nLemma 1. For ct, ct+1, \u03b2t > 0, suppose we have\nct = ct+1(1 + \u03b7t\u03b2t + 2\u03b7 2 tL 2) + \u03b72tL 3.\nLet \u03b7t, \u03b2t and ct+1 be chosen such that \u0393t > 0 (in Equation (3)). The iterate x s+1 t in Algorithm 2 satisfy the bound:\nE[\u2016\u2207f(xs+1t )\u20162] \u2264 Rs+1t \u2212Rs+1t+1\n\u0393t ,\nwhere Rs+1t := E[f(x s+1 t ) + ct\u2016xs+1t \u2212 x\u0303s\u20162] for 0 \u2264 s \u2264 S \u2212 1.\nProof. Since f is L-smooth we have\nE[f(xs+1t+1 )] \u2264 E[f(x s+1 t ) + \u3008\u2207f(xs+1t ), xs+1t+1 \u2212 x s+1 t \u3009\n+ L2 \u2016x s+1 t+1 \u2212 x s+1 t \u20162].\nUsing the Svrg update in Algorithm 2 and its unbiasedness, the right hand side above is further upper bounded by\nE[f(xs+1t )\u2212 \u03b7t\u2016\u2207f(xs+1t )\u20162 + L\u03b72t 2 \u2016v s+1 t \u20162]. (7)\nConsider now the Lyapunov function\nRs+1t := E[f(x s+1 t ) + ct\u2016xs+1t \u2212 x\u0303s\u20162].\nFor bounding it we will require the following:\nE[\u2016xs+1t+1 \u2212 x\u0303s\u20162] = E[\u2016x s+1 t+1 \u2212 x s+1 t + x s+1 t \u2212 x\u0303s\u20162]\n= E[\u2016xs+1t+1 \u2212 x s+1 t \u20162 + \u2016xs+1t \u2212 x\u0303s\u20162\n+ 2\u3008xs+1t+1 \u2212 x s+1 t , x s+1 t \u2212 x\u0303s\u3009]\n= E[\u03b72t \u2016vs+1t \u20162 + \u2016xs+1t \u2212 x\u0303s\u20162] \u2212 2\u03b7tE[\u3008\u2207f(xs+1t ), xs+1t \u2212 x\u0303s\u3009] \u2264 E[\u03b72t \u2016vs+1t \u20162 + \u2016xs+1t \u2212 x\u0303s\u20162]\n+ 2\u03b7tE [\n1 2\u03b2t \u2016\u2207f(xs+1t )\u20162 + 12\u03b2t\u2016x s+1 t \u2212 x\u0303s\u20162\n] . (8)\nThe second equality follows from the unbiasedness of the update of Svrg. The last inequality follows from a simple application of Cauchy-Schwarz and Young\u2019s inequality. Plugging Equation (7) and Equation (8) into Rs+1t+1 , we obtain the following bound:\nRs+1t+1 \u2264 E[f(x s+1 t )\u2212 \u03b7t\u2016\u2207f(xs+1t )\u20162 + L\u03b72t 2 \u2016v s+1 t \u20162]\n+ E[ct+1\u03b72t \u2016vs+1t \u20162 + ct+1\u2016xs+1t \u2212 x\u0303s\u20162] + 2ct+1\u03b7tE [\n1 2\u03b2t \u2016\u2207f(xs+1t )\u20162 + 12\u03b2t\u2016x s+1 t \u2212 x\u0303s\u20162 ] \u2264 E[f(xs+1t )\u2212 ( \u03b7t \u2212 ct+1\u03b7t\u03b2t ) \u2016\u2207f(xs+1t )\u20162\n+ ( L\u03b72t 2 + ct+1\u03b7 2 t ) E[\u2016vs+1t \u20162]\n+ (ct+1 + ct+1\u03b7t\u03b2t)E [ \u2016xs+1t \u2212 x\u0303s\u20162 ] . (9)\nTo further bound this quantity, we use Lemma 3 to bound E[\u2016vs+1t \u20162], so that upon substituting it in Equation (9), we see that\nRs+1t+1 \u2264 E[f(x s+1 t )] \u2212 ( \u03b7t \u2212 ct+1\u03b7t\u03b2t \u2212 \u03b7 2 tL\u2212 2ct+1\u03b72t ) E[\u2016\u2207f(xs+1t )\u20162]\n+ [ ct+1 ( 1 + \u03b7t\u03b2t + 2\u03b7 2 tL 2 ) + \u03b72tL 3 ] E [ \u2016xs+1t \u2212 x\u0303s\u20162 ] \u2264 Rs+1t \u2212 ( \u03b7t \u2212 ct+1\u03b7t\u03b2t \u2212 \u03b7 2 tL\u2212 2ct+1\u03b72t ) E[\u2016\u2207f(xs+1t )\u20162].\nThe second inequality follows from the definition of ct and R s+1 t , thus concluding the proof."}, {"heading": "Proof of Theorem 2", "text": "Theorem. Let f \u2208 Fn. Let cm = 0, \u03b7t = \u03b7 > 0, \u03b2t = \u03b2 > 0, and ct = ct+1(1 + \u03b7\u03b2 + 2\u03b72L2) + \u03b72L3 such that \u0393t > 0 for 0 \u2264 t \u2264 m \u2212 1. Define the quantity \u03b3n := mint \u0393t. Further, let pi = 0 for\n0 \u2264 i < m and pm = 1, and let T be a multiple of m. Then for the output xa of Algorithm 2 we have\nE[\u2016\u2207f(xa)\u20162] \u2264 f(x0)\u2212 f(x\u2217)\nT\u03b3n ,\nwhere x\u2217 is an optimal solution to (1).\nProof. Since \u03b7t = \u03b7 for t \u2208 {0, . . . ,m\u2212 1}, using Lemma 1 and telescoping the sum, we obtain\u2211m\u22121 t=0 E[\u2016\u2207f(xs+1t )\u20162] \u2264 Rs+10 \u2212Rs+1m \u03b3n .\nThis inequality in turn implies that\u2211m\u22121 t=0 E[\u2016\u2207f(xs+1t )\u20162] \u2264 E[f(x\u0303s)\u2212 f(x\u0303s+1)] \u03b3n , (10)\nwhere we used that Rs+1m = E[f(xs+1m )] = E[f(x\u0303s+1)] (since cm = 0, pm = 1, and pi = 0 for i < m), and that Rs+10 = E[f(x\u0303s)] (since x s+1 0 = x\u0303\ns, as pm = 1 and pi = 0 for i < m). Now sum over all epochs to obtain\n1\nT S\u22121\u2211 s=0 m\u22121\u2211 t=0 E[\u2016\u2207f(xs+1t )\u20162] \u2264 f(x0)\u2212 f(x\u2217) T\u03b3n . (11)\nThe above inequality used the fact that x\u03030 = x0. Using the above inequality and the definition of xa in Algorithm 2, we obtain the desired result."}, {"heading": "Proof of Theorem 3", "text": "Theorem. Suppose f \u2208 Fn. Let \u03b7 = \u00b50/(Ln\u03b1) (0 < \u00b50 < 1 and 0 < \u03b1 \u2264 1), \u03b2 = L/n\u03b1/2, m = bn3\u03b1/2/(3\u00b50)c and T is some multiple of m. Then there exists universal constants \u00b50, \u03bd > 0 such that we have the following: \u03b3n \u2265 \u03bdLn\u03b1 in Theorem 2 and\nE[\u2016\u2207f(xa)\u20162] \u2264 Ln\u03b1[f(x0)\u2212 f(x\u2217)]\nT\u03bd ,\nwhere x\u2217 is an optimal solution to the problem in (1) and xa is the output of Algorithm 2.\nProof. For our analysis, we will require an upper bound on c0. We observe that c0 = \u00b520L n2\u03b1 (1+\u03b8)m\u22121 \u03b8 where \u03b8 = 2\u03b72L2 + \u03b7\u03b2. This is obtained using the relation ct = ct+1(1 + \u03b7\u03b2 + 2\u03b7 2L2) + \u03b72L3 and the fact that cm = 0. Using the specified values of \u03b2 and \u03b7 we have\n\u03b8 = 2\u03b72L2 + \u03b7\u03b2 = 2\u00b520 n2\u03b1 + \u00b50 n3\u03b1/2 \u2264 3\u00b50 n3\u03b1/2 .\nThe above inequality follows since \u00b50 \u2264 1 and n \u2265 1. Using the above bound on \u03b8, we get\nc0 = \u00b520L n2\u03b1 (1 + \u03b8)m \u2212 1 \u03b8 = \u00b50L((1 + \u03b8) m \u2212 1) 2\u00b50 + n\u03b1/2\n\u2264 \u00b50L((1 +\n3\u00b50 n3\u03b1/2 )bn 3\u03b1/2/3\u00b50c \u2212 1) 2\u00b50 + n\u03b1/2\n\u2264 n\u2212\u03b1/2(\u00b50L(e\u2212 1)), (12)\nwherein the second inequality follows upon noting that (1+ 1l ) l is increasing for l > 0 and liml\u2192\u221e(1+ 1 l ) l = e (here e is the Euler\u2019s number). Now we can lower bound \u03b3n, as\n\u03b3n = min t\n( \u03b7 \u2212 ct+1\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2ct+1\u03b72 )\n\u2265 ( \u03b7 \u2212 c0\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2c0\u03b72 ) \u2265 \u03bd Ln\u03b1 ,\nwhere \u03bd is a constant independent of n. The first inequality holds since ct decreases with t. The second inequality holds since (a) c0/\u03b2 is upper bounded by a constant independent of n as c0/\u03b2 \u2264 \u00b50(e \u2212 1) (follows from Equation (12)), (b) \u03b72L \u2264 \u00b50\u03b7 and (c) 2c0\u03b72 \u2264 2\u00b520(e \u2212 1)\u03b7 (follows from Equation (12)). By choosing \u00b50 (independent of n) appropriately, one can ensure that \u03b3n \u2265 \u03bd/(Ln\u03b1) for some universal constant \u03bd. For example, choosing \u00b50 = 1/4, we have \u03b3n \u2265 \u03bd/(Ln\u03b1) with \u03bd = 1/40. Substituting the above lower bound in Equation (11), we obtain the desired result."}, {"heading": "Proof of Corollary 2", "text": "Corollary. Suppose f \u2208 Fn. Then the IFO complexity of Algorithm 2 (with parameters from Theorem 3) for achieving an -accurate solution is:\nIFO calls =\n{ O ( n+ (n1\u2212 \u03b1 2 / ) ) , if \u03b1 < 2/3,\nO (n+ (n\u03b1/ )) , if \u03b1 \u2265 2/3.\nProof. This result follows from Theorem 3 and the fact that m = bn3\u03b1/2/(3\u00b50)c. Suppose \u03b1 < 2/3, then m = o(n). However, n IFO calls are invested in calculating the average gradient at the end of each epoch. That is, n IFO calls are required for m iterations of the algorithm. Using this\nrelationship, we get O ( n+ (n1\u2212 \u03b1 2 / ) ) in this case.\nOn the other hand, when \u03b1 \u2265 2/3, the total number of IFO calls made by Algorithm 2 in each epoch is \u2126(n) since m = bn3\u03b1/2/(3\u00b50)c. Hence, the oracle calls required for calculating the average gradient (per epoch) is of lower order, leading to O ( n+ (n\u03b1/ ) ) IFO calls."}, {"heading": "C GD-SVRG", "text": ""}, {"heading": "Proof of Theorem 4", "text": "Theorem. Suppose f is \u03c4 -gradient dominated where \u03c4 > n1/3. Then, the iterates of Algorithm 3 with T = d2L\u03c4n2/3/\u03bd1e, m = bn/(3\u00b51)c, \u03b7t = \u00b51/(Ln2/3) for all 0 \u2264 t \u2264 m \u2212 1 and pm = 1 and pi = 0 for all 0 \u2264 i < m satisfy\nE[\u2016\u2207f(xk)\u20162] \u2264 2\u2212k[\u2016\u2207f(x0)\u20162].\nHere \u00b51 and \u03bd1 are the constants used in Corollary 3.\nProof. Corollary 3 shows that the iterates of Algorithm 3 satisfy\nE[\u2016\u2207f(xk)\u20162] \u2264 Ln 2/3E[f(xk\u22121)\u2212 f(x\u2217)]\nT\u03bd1 .\nSubstituting the specified value of T in the above inequality, we have\nE[\u2016\u2207f(xk)\u20162] \u2264 1 2\u03c4\n( E[f(xk\u22121)\u2212 f(x\u2217)] ) \u2264 12E[\u2016\u2207f(x k\u22121)\u20162].\nThe second inequality follows from \u03c4 -gradient dominance of the function f ."}, {"heading": "Proof of Theorem 5", "text": "Theorem. If f is \u03c4 -gradient dominated (\u03c4 > n1/3), then with T = d2L\u03c4n2/3/\u03bd1e, m = bn/(3\u00b51)c, \u03b7t = \u00b51/(Ln\n2/3) for 0 \u2264 t \u2264 m \u2212 1 and pm = 1 and pi = 0 for all 0 \u2264 i < m, the iterates of Algorithm 3 satisfy\nE[f(xk)\u2212 f(x\u2217)] \u2264 2\u2212k[f(x0)\u2212 f(x\u2217)].\nHere \u00b51, \u03bd1 are as in Corollary 3; x \u2217 is an optimal solution.\nProof. The proof mimics that of Theorem 4; now we have the following condition on the iterates of Algorithm 3:\nE[\u2016\u2207f(xk)\u20162] \u2264 E[f(x k\u22121)\u2212 f(x\u2217)]\n2\u03c4 . (13)\nHowever, f is \u03c4 -gradient dominated, so E[\u2016\u2207f(xk)\u20162] \u2265 E[f(xk) \u2212 f(x\u2217)]/\u03c4 , which combined with Equation (13) concludes the proof."}, {"heading": "D Convex SVRG: Convergence Rate", "text": ""}, {"heading": "Proof of Theorem 6", "text": "Theorem. If fi is convex for all i \u2208 [n], pi = 1/m for 0 \u2264 i \u2264 m \u2212 1, and pm = 0, then for Algorithm 2, we have\nE[\u2016\u2207f(xa)\u20162] \u2264 L\u2016x0 \u2212 x\u2217\u20162 + 4mL2\u03b72[f(x0)\u2212 f(x\u2217)]\nT\u03b7(1\u2212 4L\u03b7) ,\nwhere x\u2217 is optimal for (1) and xa is the output of Algorithm 2.\nProof. Consider the following sequence of inequalities:\nE[\u2016xs+1t+1 \u2212 x\u2217\u20162] = E[\u2016x s+1 t \u2212 \u03b7vs+1t \u2212 x\u2217\u20162]\n\u2264 E[\u2016xs+1t \u2212 x\u2217\u20162] + \u03b72E[\u2016vs+1t \u20162] \u2212 2\u03b7E[\u3008vs+1t , xs+1t \u2212 x\u2217\u3009] \u2264 E[\u2016xs+1t \u2212 x\u2217\u20162] + \u03b72E[\u2016vs+1t \u20162] \u2212 2\u03b7E[f(xs+1t )\u2212 f(x\u2217)] \u2264 E[\u2016xs+1t \u2212 x\u2217\u20162]\u2212 2\u03b7(1\u2212 2L\u03b7)E[f(xs+1t )\u2212 f(x\u2217)] + 4L\u03b72E[f(x\u0303s)\u2212 f(x\u2217)] = E[\u2016xs+1t \u2212 x\u2217\u20162]\u2212 2\u03b7(1\u2212 4L\u03b7)E[f(xs+1t )\u2212 f(x\u2217)] + 4L\u03b72E[f(x\u0303s)\u2212 f(x\u2217)]\u2212 4L\u03b72E[f(xs+1t )\u2212 f(x\u2217)].\nThe second inequality uses unbiasedness of the Svrg update and convexity of f . The third inequality follows from Lemma 6. Defining the Lyapunov function\nP s := E[\u2016xsm \u2212 x\u2217\u20162] + 4mL\u03b72E[f(x\u0303s)\u2212 f(x\u2217)],\nand summing the above inequality over t, we get\n2\u03b7(1\u2212 4L\u03b7) m\u22121\u2211 t=0 E[f(xs+1t )\u2212 f(x\u2217)] \u2264 P s \u2212 P s+1.\nAlgorithm 4 Mini-batch SVRG\n1: Input: x\u03030 = x0m = x 0 \u2208 Rd, epoch length m, step sizes {\u03b7i > 0}m\u22121i=0 , S = dT/me, discrete probability\ndistribution {pi}mi=0, mini-batch size b 2: for s = 0 to S \u2212 1 do 3: xs+10 = x s m 4: gs+1 = 1 n \u2211n i=1\u2207fi(x\u0303\ns) 5: for t = 0 to m\u2212 1 do 6: Choose a mini-batch (uniformly random with replacement) It \u2282 [n] of size b 7: us+1t = 1 b \u2211 it\u2208It(\u2207fit(x s+1 t )\u2212\u2207fit(x\u0303s)) + gs+1 8: xs+1t+1 = x s+1 t \u2212 \u03b7tus+1t\n9: end for 10: x\u0303s+1 = \u2211m i=0 pix s+1 i 11: end for 12: Output: Iterate xa chosen uniformly random from {{xs+1t }m\u22121t=0 } S\u22121 s=0 .\nThis due is to the fact that\nP s+1 = E[\u2016xs+1m \u2212 x\u2217\u20162] + 4mL\u03b72E[f(x\u0303s+1)\u2212 f(x\u2217)]\n= E[\u2016xs+1m \u2212 x\u2217\u20162] + 4L\u03b72 m\u22121\u2211 t=0 E[f(xs+1t )\u2212 f(x\u2217)].\nThe above equality uses the fact that pm = 0 and pi = 1/m for 0 \u2264 i < m. Summing over all epochs and telescoping we then obtain\nE[f(xa)\u2212 f(x\u2217)] \u2264 P 0 ( 2T\u03b7(1\u2212 4L\u03b7) )\u22121 .\nThe inequality also uses the definition of xa given in Alg 2. On this inequality we use Lemma 5, which yields\nE[\u2016\u2207f(xa)\u20162] \u2264 2LE[f(xa)\u2212 f(x\u2217)]\n\u2264 L\u2016x 0 \u2212 x\u2217\u20162 + 4mL2\u03b72[f(x0)\u2212 f(x\u2217)]\nT\u03b7(1\u2212 4L\u03b7) .\nIt is easy to see that we can obtain convergence rates for E[f(xa) \u2212 f(x\u2217)] from the above reasoning. This leads to a direct analysis of Svrg for convex functions."}, {"heading": "E Minibatch Nonconvex SVRG", "text": ""}, {"heading": "Proof of Theorem 7", "text": "The proofs essentially follow along the lines of Lemma 1, Theorem 2 and Theorem 3 with the added complexity of mini-batch. We first prove few intermediate results before proceeding to the proof of Theorem 7.\nLemma 2. Suppose we have\nR s+1\nt := E[f(x s+1 t ) + ct\u2016xs+1t \u2212 x\u0303s\u20162],\nct = ct+1(1 + \u03b7t\u03b2t + 2\u03b72tL 2\nb ) +\n\u03b72tL 3\nb ,\nfor 0 \u2264 s \u2264 S \u2212 1 and 0 \u2264 t \u2264 m\u2212 1 and the parameters \u03b7t, \u03b2t and ct+1 are chosen such that( \u03b7t \u2212\nct+1\u03b7t \u03b2t\n\u2212 \u03b72tL\u2212 2ct+1\u03b72t ) \u2265 0.\nThen the iterates xs+1t in the mini-batch version of Algorithm 2 i.e., Algorithm 4 with mini-batch size b satisfy the bound:\nE[\u2016\u2207f(xs+1t )\u20162] \u2264 R s+1 t \u2212R s+1 t+1( \u03b7t \u2212 ct+1\u03b7t\u03b2t \u2212 \u03b7 2 tL\u2212 2ct+1\u03b72t ) , Proof. Using essentially the same argument as the proof of Lemma. 1 until Equation (9), we have\nR s+1 t+1 \u2264 E[f(xs+1t )\u2212 ( \u03b7t \u2212 ct+1\u03b7t\u03b2t ) \u2016\u2207f(xs+1t )\u20162\n+ ( L\u03b72t 2 + ct+1\u03b7 2 t ) E[\u2016us+1t \u20162]\n+ (ct+1 + ct+1\u03b7t\u03b2t)E [ \u2016xs+1t \u2212 x\u0303s\u20162 ] . (14)\nWe use Lemma 4 in order to bound E[\u2016us+1t \u20162] in the above inequality. Substituting it in Equation (14), we see that\nR s+1\nt+1 \u2264 E[f(xs+1t )] \u2212 ( \u03b7t \u2212 ct+1\u03b7t\u03b2t \u2212 \u03b7 2 tL\u2212 2ct+1\u03b72t ) E[\u2016\u2207f(xs+1t )\u20162]\n+ [ ct+1 ( 1 + \u03b7t\u03b2t + 2\u03b72tL 2\nb\n) + \u03b72tL 3\nb\n] E [ \u2016xs+1t \u2212 x\u0303s\u20162 ] \u2264 Rs+1t \u2212 ( \u03b7t \u2212 ct+1\u03b7t\u03b2t \u2212 \u03b7 2 tL\u2212 2ct+1\u03b72t ) E[\u2016\u2207f(xs+1t )\u20162].\nThe second inequality follows from the definition of ct and R s+1 t , thus concluding the proof.\nOur intermediate key result is the following theorem that provides convergence rate of mini-batch Svrg.\nTheorem 9. Let \u03b3n denote the following quantity:\n\u03b3n := min 0\u2264t\u2264m\u22121\n( \u03b7 \u2212 ct+1\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2ct+1\u03b72 ) .\nSuppose \u03b7t = \u03b7 and \u03b2t = \u03b2 for all t \u2208 {0, . . . ,m\u2212 1}, cm = 0, ct = ct+1(1 + \u03b7t\u03b2t + 2\u03b7 2 tL 2 b ) + \u03b72tL 3\nb for t \u2208 {0, . . . ,m\u2212 1} and \u03b3n > 0. Further, let pm = 1 and pi = 0 for 0 \u2264 i < m. Then for the output xa of mini-batch version of Algorithm 2 with mini-batch size b, we have\nE[\u2016\u2207f(xa)\u20162] \u2264 f(x0)\u2212 f(x\u2217)\nT\u03b3n ,\nwhere x\u2217 is an optimal solution to (1).\nProof. Since \u03b7t = \u03b7 for t \u2208 {0, . . . ,m\u2212 1}, using Lemma 2 and telescoping the sum, we obtain\n\u2211m\u22121 t=0 E[\u2016\u2207f(xs+1t )\u20162] \u2264 R s+1 0 \u2212R s+1 m\n\u03b3n .\nThis inequality in turn implies that\u2211m\u22121 t=0 E[\u2016\u2207f(xs+1t )\u20162] \u2264 E[f(x\u0303s)\u2212 f(x\u0303s+1)]\n\u03b3n ,\nwhere we used that R s+1\nm = E[f(xs+1m )] = E[f(x\u0303s+1)] (since cm = 0, pm = 1, and pi = 0 for i < m), and that R s+1\n0 = E[f(x\u0303s)] (since x s+1 0 = x\u0303 s, as pm = 1 and pi = 0 for i < m). Now sum over all epochs and using the fact that x\u03030 = x0, we get the desired result.\nWe now present the proof of Theorem 7 using the above results.\nTheorem. Let \u03b3n denote the following quantity:\n\u03b3n := min 0\u2264t\u2264m\u22121\n( \u03b7 \u2212 ct+1\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2ct+1\u03b72 ) .\nwhere cm = 0, ct = ct+1(1 + \u03b7\u03b2 + 2\u03b7 2L2/b) + \u03b7 2 tL 3 /b for 0 \u2264 t \u2264 m \u2212 1. Suppose \u03b7 = \u00b52b/(Ln2/3) (0 < \u00b52 < 1), \u03b2 = L/n 1/3, m = bn/(3b\u00b52)c and T is some multiple of m. Then for the mini-batch version of Algorithm 2 with mini-batch size b < n2/3, there exists universal constants \u00b52, \u03bd2 > 0 such that we have the following: \u03b3n \u2265 \u03bd2bLn2/3 and\nE[\u2016\u2207f(xa)\u20162] \u2264 Ln2/3[f(x0)\u2212 f(x\u2217)]\nbT\u03bd2 ,\nwhere x\u2217 is optimal for (1).\nProof of Theorem 7. We first observe that using the specified values of \u03b2 and \u03b7 we obtain\n\u03b8 := 2\u03b72L2\nb + \u03b7\u03b2 =\n2\u00b522b\nn4/3 + \u00b52b n \u2264 3\u00b52b n .\nThe above inequality follows since \u00b52 \u2264 1 and n \u2265 1. For our analysis, we will require the following bound on c0:\nc0 = \u00b522b 2L bn4/3 (1 + \u03b8)m \u2212 1 \u03b8 = \u00b52bL((1 + \u03b8) m \u2212 1) 2b\u00b52 + bn1/3\n\u2264 n\u22121/3(\u00b52L(e\u2212 1)), (15)\nwherein the first equality holds due to the relation ct = ct+1(1 + \u03b7t\u03b2t + 2\u03b72tL 2 b ) + \u03b72tL 3\nb , and the inequality follows upon again noting that (1 + 1/l)l is increasing for l > 0 and liml\u2192\u221e(1 + 1 l ) l = e. Now we can lower bound \u03b3n, as\n\u03b3n = min t\n( \u03b7 \u2212 ct+1\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2ct+1\u03b72 )\n\u2265 ( \u03b7 \u2212 c0\u03b7\u03b2 \u2212 \u03b7 2L\u2212 2c0\u03b72 ) \u2265 b\u03bd2 Ln2/3 ,\nwhere \u03bd2 is a constant independent of n. The first inequality holds since ct decreases with t. The second one holds since (a) c0/\u03b2 is upper bounded by a constant independent of n as c0/\u03b2 \u2264 \u00b52(e\u22121) (due to Equation (15)), (b) \u03b72L \u2264 \u00b52\u03b7 (as b < n2/3) and (c) 2c0\u03b72 \u2264 2\u00b522(e \u2212 1)\u03b7 (again due to Equation (15) and the fact b < n2/3). By choosing an appropriately small constant \u00b52 (independent of n), one can ensure that \u03b3n \u2265 b\u03bd2/(Ln2/3) for some universal constant \u03bd2. For example, choosing \u00b52 = 1/4, we have \u03b3n \u2265 b\u03bd2/(Ln2/3) with \u03bd2 = 1/40. Substituting the above lower bound in Theorem 9, we get the desired result."}, {"heading": "F MSVRG: Convergence Rate", "text": ""}, {"heading": "Proof of Theorem 8", "text": "Theorem. Let f \u2208 Fn have \u03c3-bounded gradients. Let \u03b7t = \u03b7 = max{c/ \u221a T , \u00b51/(Ln2/3)} (\u00b51 is the universal constant from Corollary 3), m = bn/(3\u00b51)c, and c = \u221a f(x0)\u2212f(x\u2217) 2L\u03c32 . Further, let T be a multiple of m, pm = 1, and pi = 0 for 0 \u2264 i < m. Then, the output xa of Algorithm 2 satisfies\nE[\u2016\u2207f(xa)\u20162]\n\u2264 \u03bd\u0304min { 2 \u221a 2(f(x0)\u2212 f(x\u2217))L\nT \u03c3, Ln2/3[f(x0)\u2212 f(x\u2217)]\nT\u03bd1\n} ,\nwhere \u03bd\u0304 is a universal constant, \u03bd1 is the universal constant from Corollary 3 and x \u2217 is an optimal solution to (1). Proof. First, we observe that the step size \u03b7 is chosen to be max{c/ \u221a T , \u00b51/(Ln 2/3)} where\nc =\n\u221a f(x0)\u2212 f(x\u2217)\n2L\u03c32 .\nSuppose \u03b7 = \u00b51/(Ln 2/3), we obtain the convergence rate in Corollary 3. Now, lets consider the case\nwhere \u03b7 = c/ \u221a T . In this case, we have the following bound:\nE[\u2016vs+1t \u20162] = E[\u2016\u2207fit(xs+1t )\u2212\u2207fit(x\u0303s) +\u2207f(x\u0303s)\u20162] \u2264 2 ( E[\u2016\u2207fit(xs+1t )\u20162 + \u2016\u2207fit(x\u0303s)\u2212\u2207f(x\u0303s)\u20162]\n) \u2264 2 ( E[\u2016\u2207fit(xs+1t )\u20162 + \u2016\u2207fit(x\u0303s)\u20162]\n) \u2264 4\u03c32.\nThe first inequality follows from Lemma 7 with r = 2. The second inequality follows from (a) \u03c3-bounded gradient property of f and (b) the fact that for a random variable \u03b6, E[\u2016\u03b6 \u2212 E[\u03b6]\u20162] \u2264 E[\u2016\u03b6\u20162]. The rest of the proof is along exactly the lines as in Theorem 1. This provides a convergence rate similar to Theorem 1. More specifically, using step size c/ \u221a T , we get\nE[\u2016f(xa)\u20162] \u2264 2 \u221a\n2(f(x0)\u2212 f(x\u2217))L T \u03c3. (16)\nThe only thing that remains to be proved is that with the step size choice of max{c/ \u221a T , \u00b51/(Ln\n2/3)}, the minimum of two bounds hold. Consider the case c/ \u221a T > \u00b51/(Ln\n2/3). In this case, we have the following:\n2 \u221a\n2(f(x0)\u2212f(x\u2217))L T \u03c3\nLn2/3[f(x0)\u2212f(x\u2217)] T\u03bd1\n= 2\u03bd1\u03c3\n\u221a 2LT\nLn2/3 \u221a f(x0)\u2212 f(x\u2217)\n\u2264 2\u03bd1/\u00b51 \u2264 \u03bd\u0304 := max {\n2\u03bd1 \u00b51 , \u00b51 2\u03bd1\n} ,\nwhere \u03bd1 is the constant in Corollary 3. This inequality holds since c/ \u221a T > \u00b51/(Ln\n2/3). Rearranging the above inequality, we have\n2\n\u221a 2(f(x0)\u2212 f(x\u2217))L\nT \u03c3 \u2264 \u03bd\u0304Ln 2/3[f(x0)\u2212 f(x\u2217)] T\nin this case. Note that the left hand side of the above inequality is precisely the bound obtained by using step size c/ \u221a T (see Equation (16)). Similarly, when c/ \u221a T \u2264 \u00b51/(Ln2/3), the inequality holds in the other direction. Using these two observations, we have the desired result."}, {"heading": "G Key Lemmatta", "text": "Lemma 3. For the intermediate iterates vs+1t computed by Algorithm 2, we have the following:\nE[\u2016vs+1t \u20162] \u2264 2E[\u2016\u2207f(xs+1t )\u20162] + 2L2E[\u2016xs+1t \u2212 x\u0303s\u20162].\nProof. The proof simply follows from the proof of Lemma 4 with It = {it}.\nWe now present a result to bound the variance of mini-batch Svrg.\nLemma 4. Let us+1t be computed by the mini-batch version of Algorithm 2 i.e., Algorithm 4 with mini-batch size b. Then,\nE[\u2016us+1t \u20162] \u2264 2E[\u2016\u2207f(xs+1t )\u20162] + 2L 2 b E[\u2016x s+1 t \u2212 x\u0303s\u20162].\nProof. For the ease of exposition, we use the following notation:\n\u03b6s+1t = 1 |It| \u2211 it\u2208It ( \u2207fit(xs+1t )\u2212\u2207fit(x\u0303s) ) .\nUse convexity of \u2016\u00b7\u20162 and definition of us+1t to get\nE[\u2016us+1t \u20162] = E[\u2016\u03b6s+1t +\u2207f(x\u0303s)\u20162] = E[\u2016\u03b6s+1t +\u2207f(x\u0303s)\u2212\u2207f(xs+1t ) +\u2207f(xs+1t )\u20162] \u2264 2E[\u2016\u2207f(xs+1t )\u20162] + 2E[\u2016\u03b6s+1t \u2212 E[\u03b6s+1t ]\u20162] \u2264 2E[\u2016\u2207f(xs+1t )\u20162] + 2E[\u2016\u03b6s+1t \u20162].\nThe first inequality follows from Lemma 7 (with r = 2) and the fact that E[\u03b6s+1t ] = \u2207f(xs+1t ) \u2212 \u2207f(x\u0303s). The second inequality is obtained by noting that for a random variable \u03b6, E[\u2016\u03b6 \u2212E[\u03b6]\u20162] \u2264 E[\u2016\u03b6\u20162]. Using Jensen\u2019s inequality in the inequality above, we get\nE[\u2016us+1t \u20162]\n\u2264 2E[\u2016\u2207f(xs+1t )\u20162] + 2\nb E[\u2016\u2207fit(xs+1t )\u2212\u2207fit(x\u0303s)\u20162]\n\u2264 2E[\u2016\u2207f(xs+1t )\u20162] + 2L2\nb E[\u2016xs+1t \u2212 x\u0303s\u20162].\nThe last inequality follows from L-smoothness of fit ."}, {"heading": "H Experiments", "text": "Figure 2 shows the remaining plots for MNIST and STL-10 datasets. As seen in the plots, there is no significant difference in the test error of Svrg and Sgd for these datasets."}, {"heading": "I Other Lemmas", "text": "We need Lemma 5 for our results in the convex case.\nLemma 5 (Johnson & Zhang (2013)). Let g : Rd \u2192 R be convex with L-Lipschitz continuous gradient. Then,\n\u2016\u2207g(x)\u2212\u2207g(y)\u20162 \u2264 2L[g(x)\u2212 g(y)\u2212 \u3008\u2207g(y), x\u2212 y\u3009],\nfor all x, y \u2208 Rd.\nProof. Consider h(x) := g(x)\u2212 g(y)\u2212 \u3008\u2207g(y), x\u2212 y\u3009 for arbitrary y \u2208 Rd. Observe that \u2207h is also L-Lipschitz continuous. Note that h(x) \u2265 0 (since h(y) = 0 and \u2207h(y) = 0, or alternatively since h defines a Bregman divergence), from which it follows that\n0 \u2264 min \u03c1 [h(x\u2212 \u03c1\u2207h(x))]\n\u2264 min \u03c1\n[h(x)\u2212 \u03c1\u2016\u2207h(x)\u20162 + L\u03c1 2\n2 \u2016\u2207h(x)\u2016 2]\n= h(x)\u2212 12L\u2016\u2207h(x)\u2016 2.\nRewriting in terms of g we obtain the required result.\nLemma 6 bounds the variance of Svrg for the convex case. Please refer to (Johnson & Zhang, 2013) for more details.\nLemma 6 ((Johnson & Zhang, 2013)). Suppose fi is convex for all i \u2208 [n]. For the updates in Algorithm 2 we have the following inequality:\nE[\u2016vs+1t \u20162] \u2264 4L[f(xs+1t )\u2212 f(x\u2217) + f(x\u0303s \u2212 f(x\u2217)].\nProof. The proof follows upon observing the following:\nE[\u2016vs+1t \u20162 = E[\u2016\u2207fit(xs+1t )\u2212\u2207fit(xs+10 ) +\u2207f(x\u0303s)\u20162] \u2264 2E[\u2016\u2207fit(xs+1t )\u2212\u2207fit(x\u2217)\u20162]\n+ 2E[\u2016\u2207fit(x\u0303s)\u2212\u2207fit(x\u2217)\u2212 (\u2207f(x\u0303s)\u2212\u2207f(x\u2217))\u20162] \u2264 2E[\u2016\u2207fit(xs+1t )\u2212\u2207fit(x\u2217)\u20162] + 2E[\u2016\u2207fit(x\u0303s)\u2212\u2207fit(x\u2217)\u20162] \u2264 4L[f(xs+1t \u2212 f(x\u2217) + f(x\u0303s)\u2212 f(x\u2217)].\nThe first inequality follows from Cauchy-Schwarz and Young inequality; the second one from E[\u2016\u03be\u2212 E[\u03be]\u20162] \u2264 E[\u2016\u03be\u20162], and the third one from Lemma 5.\nLemma 7. For random variables z1, . . . , zr, we have E [ \u2016z1 + ...+ zr\u20162 ] \u2264 rE [ \u2016z1\u20162 + ...+ \u2016zr\u20162 ] ."}], "references": [{"title": "A lower bound for the optimization of finite sums", "author": ["Agarwal", "Alekh", "Bottou", "Leon"], "venue": null, "citeRegEx": "Agarwal et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Agarwal et al\\.", "year": 2014}, {"title": "Incremental gradient, subgradient, and proximal methods for convex optimization: A survey", "author": ["Bertsekas", "Dimitri P"], "venue": null, "citeRegEx": "Bertsekas and P.,? \\Q2011\\E", "shortCiteRegEx": "Bertsekas and P.", "year": 2011}, {"title": "Stochastic gradient learning in neural networks", "author": ["Bottou", "L\u00e9on"], "venue": "Proceedings of Neuro-N\u0131mes,", "citeRegEx": "Bottou and L\u00e9on.,? \\Q1991\\E", "shortCiteRegEx": "Bottou and L\u00e9on.", "year": 1991}, {"title": "SAGA: A fast incremental gradient method with support for non-strongly convex composite objectives", "author": ["Defazio", "Aaron", "Bach", "Francis", "Lacoste-Julien", "Simon"], "venue": "In NIPS", "citeRegEx": "Defazio et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Defazio et al\\.", "year": 2014}, {"title": "Finito: A faster, permutable incremental gradient method for big data problems", "author": ["Defazio", "Aaron J", "Caetano", "Tib\u00e9rio S", "Domke", "Justin"], "venue": null, "citeRegEx": "Defazio et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Defazio et al\\.", "year": 2014}, {"title": "Optimal distributed online prediction using mini-batches", "author": ["Dekel", "Ofer", "Gilad-Bachrach", "Ran", "Shamir", "Ohad", "Xiao", "Lin"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Dekel et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Dekel et al\\.", "year": 2012}, {"title": "Escaping from saddle points - online stochastic gradient for tensor decomposition", "author": ["Ge", "Rong", "Huang", "Furong", "Jin", "Chi", "Yuan", "Yang"], "venue": "In Proceedings of The 28th Conference on Learning Theory,", "citeRegEx": "Ge et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ge et al\\.", "year": 2015}, {"title": "Stochastic first- and zeroth-order methods for nonconvex stochastic programming", "author": ["Ghadimi", "Saeed", "Lan", "Guanghui"], "venue": "SIAM Journal on Optimization,", "citeRegEx": "Ghadimi et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Ghadimi et al\\.", "year": 2013}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Glorot", "Xavier", "Bengio", "Yoshua"], "venue": "Proceedings of the International Conference on Artificial Intelligence and Statistics (AISTATS10),", "citeRegEx": "Glorot et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2010}, {"title": "Beyond convexity: Stochastic quasi-convex optimization", "author": ["Hazan", "Elad", "Levy", "Kfir", "Shalev-Shwartz", "Shai"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Hazan et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hazan et al\\.", "year": 2015}, {"title": "A distributed, asynchronous and incremental algorithm for nonconvex optimization: An admm based approach", "author": ["Hong", "Mingyi"], "venue": "arXiv preprint arXiv:1412.6058,", "citeRegEx": "Hong and Mingyi.,? \\Q2014\\E", "shortCiteRegEx": "Hong and Mingyi.", "year": 2014}, {"title": "Accelerating stochastic gradient descent using predictive variance reduction", "author": ["Johnson", "Rie", "Zhang", "Tong"], "venue": "In NIPS", "citeRegEx": "Johnson et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2013}, {"title": "Semi-Stochastic Gradient Descent Methods", "author": ["Kone\u010dn\u00fd", "Jakub", "Richt\u00e1rik", "Peter"], "venue": null, "citeRegEx": "Kone\u010dn\u00fd et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kone\u010dn\u00fd et al\\.", "year": 2013}, {"title": "Mini-Batch Semi-Stochastic Gradient Descent in the Proximal Setting", "author": ["Kone\u010dn\u00fd", "Jakub", "Liu", "Jie", "Richt\u00e1rik", "Peter", "Tak\u00e1\u010d", "Martin"], "venue": null, "citeRegEx": "Kone\u010dn\u00fd et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kone\u010dn\u00fd et al\\.", "year": 2015}, {"title": "Stochastic approximation methods for constrained and unconstrained systems, volume 26", "author": ["Kushner", "Harold Joseph", "Clark", "Dean S"], "venue": "Springer Science & Business Media,", "citeRegEx": "Kushner et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Kushner et al\\.", "year": 2012}, {"title": "Efficient mini-batch training for stochastic optimization", "author": ["Li", "Mu", "Zhang", "Tong", "Chen", "Yuqiang", "Smola", "Alexander J"], "venue": "In Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD", "citeRegEx": "Li et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Li et al\\.", "year": 2014}, {"title": "Asynchronous Parallel Stochastic Gradient for Nonconvex Optimization", "author": ["Lian", "Xiangru", "Huang", "Yijun", "Li", "Yuncheng", "Liu", "Ji"], "venue": "In NIPS,", "citeRegEx": "Lian et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lian et al\\.", "year": 2015}, {"title": "Analysis of recursive stochastic algorithms", "author": ["Ljung", "Lennart"], "venue": "Automatic Control, IEEE Transactions on,", "citeRegEx": "Ljung and Lennart.,? \\Q1977\\E", "shortCiteRegEx": "Ljung and Lennart.", "year": 1977}, {"title": "Robust stochastic approximation approach to stochastic programming", "author": ["A. Nemirovski", "A. Juditsky", "G. Lan", "A. Shapiro"], "venue": "SIAM Journal on Optimization,", "citeRegEx": "Nemirovski et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Nemirovski et al\\.", "year": 2009}, {"title": "Problem Complexity and Method Efficiency in Optimization", "author": ["Nemirovski", "Arkadi", "D. Yudin"], "venue": null, "citeRegEx": "Nemirovski et al\\.,? \\Q1983\\E", "shortCiteRegEx": "Nemirovski et al\\.", "year": 1983}, {"title": "Introductory Lectures On Convex Optimization: A Basic Course", "author": ["Nesterov", "Yurii"], "venue": null, "citeRegEx": "Nesterov and Yurii.,? \\Q2003\\E", "shortCiteRegEx": "Nesterov and Yurii.", "year": 2003}, {"title": "Cubic regularization of newton method and its global performance", "author": ["Nesterov", "Yurii", "Polyak", "Boris T"], "venue": "Mathematical Programming,", "citeRegEx": "Nesterov et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Nesterov et al\\.", "year": 2006}, {"title": "Pseudogradient adaptation and training algorithms", "author": ["BT Poljak", "Tsypkin", "Ya Z"], "venue": "Automation and Remote Control,", "citeRegEx": "Poljak et al\\.,? \\Q1973\\E", "shortCiteRegEx": "Poljak et al\\.", "year": 1973}, {"title": "Gradient methods for the minimisation of functionals", "author": ["B.T. Polyak"], "venue": "USSR Computational Mathematics and Mathematical Physics,", "citeRegEx": "Polyak,? \\Q1963\\E", "shortCiteRegEx": "Polyak", "year": 1963}, {"title": "On variance reduction in stochastic gradient descent and its asynchronous variants", "author": ["Reddi", "Sashank", "Hefny", "Ahmed", "Sra", "Suvrit", "Poczos", "Barnabas", "Smola", "Alex J"], "venue": "In NIPS", "citeRegEx": "Reddi et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Reddi et al\\.", "year": 2015}, {"title": "A stochastic approximation method", "author": ["H. Robbins", "S. Monro"], "venue": "Annals of Mathematical Statistics,", "citeRegEx": "Robbins and Monro,? \\Q1951\\E", "shortCiteRegEx": "Robbins and Monro", "year": 1951}, {"title": "Minimizing Finite Sums with the Stochastic Average Gradient", "author": ["Schmidt", "Mark W", "Roux", "Nicolas Le", "Bach", "Francis R"], "venue": null, "citeRegEx": "Schmidt et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Schmidt et al\\.", "year": 2013}, {"title": "Stochastic dual coordinate ascent methods for regularized loss", "author": ["Shalev-Shwartz", "Shai", "Zhang", "Tong"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Shalev.Shwartz et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Shalev.Shwartz et al\\.", "year": 2013}, {"title": "A stochastic PCA and SVD algorithm with an exponential convergence rate", "author": ["Shamir", "Ohad"], "venue": null, "citeRegEx": "Shamir and Ohad.,? \\Q2014\\E", "shortCiteRegEx": "Shamir and Ohad.", "year": 2014}, {"title": "Fast stochastic algorithms for SVD and PCA: Convergence properties and convexity", "author": ["Shamir", "Ohad"], "venue": null, "citeRegEx": "Shamir and Ohad.,? \\Q2015\\E", "shortCiteRegEx": "Shamir and Ohad.", "year": 2015}, {"title": "Scalable nonconvex inexact proximal splitting", "author": ["Sra", "Suvrit"], "venue": "In NIPS, pp", "citeRegEx": "Sra and Suvrit.,? \\Q2012\\E", "shortCiteRegEx": "Sra and Suvrit.", "year": 2012}, {"title": "A proximal stochastic gradient method with progressive variance reduction", "author": ["Xiao", "Lin", "Zhang", "Tong"], "venue": "SIAM Journal on Optimization,", "citeRegEx": "Xiao et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Xiao et al\\.", "year": 2014}, {"title": "Univr: A universal variance reduction framework for proximal stochastic gradient method", "author": ["Zhu", "Zeyuan Allen", "Yuan", "Yang"], "venue": "CoRR, abs/1506.01972,", "citeRegEx": "Zhu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhu et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 26, "context": "Among these, of particular importance are variance reduced (VR) stochastic methods (Schmidt et al., 2013; Johnson & Zhang, 2013; Defazio et al., 2014a), which have delivered exciting progress such as linear convergence rates (for strongly convex functions) as opposed to sublinear rates of ordinary Sgd (Robbins & Monro, 1951; Nemirovski et al.", "startOffset": 83, "endOffset": 151}, {"referenceID": 18, "context": ", 2014a), which have delivered exciting progress such as linear convergence rates (for strongly convex functions) as opposed to sublinear rates of ordinary Sgd (Robbins & Monro, 1951; Nemirovski et al., 2009).", "startOffset": 160, "endOffset": 208}, {"referenceID": 26, "context": "The Svrg algorithm of (Johnson & Zhang, 2013) is particularly attractive here because of its low storage requirement in comparison to the algorithms in (Schmidt et al., 2013; Defazio et al., 2014a).", "startOffset": 152, "endOffset": 197}, {"referenceID": 3, "context": ", 2013; Johnson & Zhang, 2013; Defazio et al., 2014a), which have delivered exciting progress such as linear convergence rates (for strongly convex functions) as opposed to sublinear rates of ordinary Sgd (Robbins & Monro, 1951; Nemirovski et al., 2009). Similar (but not same) benefits of VR methods can also be seen in smooth convex functions. The Svrg algorithm of (Johnson & Zhang, 2013) is particularly attractive here because of its low storage requirement in comparison to the algorithms in (Schmidt et al., 2013; Defazio et al., 2014a). Despite the meteoric rise of VR methods, their analysis for general nonconvex problems is largely missing. Johnson & Zhang (2013) remark on convergence of Svrg when f \u2208 Fn is locally strongly convex and provide compelling experimental results (Fig.", "startOffset": 31, "endOffset": 675}, {"referenceID": 23, "context": "\u2022 For an interesting nonconvex subclass of Fn called gradient dominated functions (Polyak, 1963; Nesterov & Polyak, 2006), we propose a variant of Svrg that attains a global linear rate of convergence.", "startOffset": 82, "endOffset": 121}, {"referenceID": 18, "context": "A key reference for stochastic convex optimization (for minEz[F (x, z)]) is (Nemirovski et al., 2009).", "startOffset": 76, "endOffset": 101}, {"referenceID": 26, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b).", "startOffset": 2, "endOffset": 145}, {"referenceID": 13, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b).", "startOffset": 2, "endOffset": 145}, {"referenceID": 24, "context": "Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015).", "startOffset": 44, "endOffset": 84}, {"referenceID": 16, "context": "A similar rate for parallel and distributed Sgd was shown recently in (Lian et al., 2015).", "startOffset": 70, "endOffset": 89}, {"referenceID": 9, "context": "Finally, we note another interesting example, stochastic optimization of locally quasi-convex functions (Hazan et al., 2015), wherein actually a O(1/ ) convergence in function value is shown.", "startOffset": 104, "endOffset": 124}, {"referenceID": 3, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b). Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015). Agarwal & Bottou (2014) study lower-bounds for convex finite-sum problems.", "startOffset": 3, "endOffset": 257}, {"referenceID": 3, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b). Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015). Agarwal & Bottou (2014) study lower-bounds for convex finite-sum problems. ShalevShwartz (2015) prove linear convergence of stochastic dual coordinate ascent when the individual fi (i \u2208 [n]) are nonconvex but f is strongly convex.", "startOffset": 3, "endOffset": 329}, {"referenceID": 3, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b). Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015). Agarwal & Bottou (2014) study lower-bounds for convex finite-sum problems. ShalevShwartz (2015) prove linear convergence of stochastic dual coordinate ascent when the individual fi (i \u2208 [n]) are nonconvex but f is strongly convex. They do not study the general nonconvex case. Moreover, even in their special setting our results improve upon theirs for the high condition number regime. Nonconvex. Sgd dates at least to the seminal work (Robbins & Monro, 1951); and since then it has been developed in several directions (Poljak & Tsypkin, 1973; Ljung, 1977; Bottou, 1991; Kushner & Clark, 2012). In the (nonsmooth) finite-sum setting, Sra (2012) considers proximal splitting methods, and analyzes asymptotic convergence with nonvanishing gradient errors.", "startOffset": 3, "endOffset": 880}, {"referenceID": 3, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b). Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015). Agarwal & Bottou (2014) study lower-bounds for convex finite-sum problems. ShalevShwartz (2015) prove linear convergence of stochastic dual coordinate ascent when the individual fi (i \u2208 [n]) are nonconvex but f is strongly convex. They do not study the general nonconvex case. Moreover, even in their special setting our results improve upon theirs for the high condition number regime. Nonconvex. Sgd dates at least to the seminal work (Robbins & Monro, 1951); and since then it has been developed in several directions (Poljak & Tsypkin, 1973; Ljung, 1977; Bottou, 1991; Kushner & Clark, 2012). In the (nonsmooth) finite-sum setting, Sra (2012) considers proximal splitting methods, and analyzes asymptotic convergence with nonvanishing gradient errors. Hong (2014) studies a distributed nonconvex incremental ADMM algorithm.", "startOffset": 3, "endOffset": 1001}, {"referenceID": 3, "context": ", (Defazio et al., 2014a; Johnson & Zhang, 2013; Schmidt et al., 2013; Kone\u010dn\u00fd et al., 2015; Shalev-Shwartz & Zhang, 2013; Defazio et al., 2014b). Asynchronous VR frameworks are developed in (Reddi et al., 2015; Mania et al., 2015). Agarwal & Bottou (2014) study lower-bounds for convex finite-sum problems. ShalevShwartz (2015) prove linear convergence of stochastic dual coordinate ascent when the individual fi (i \u2208 [n]) are nonconvex but f is strongly convex. They do not study the general nonconvex case. Moreover, even in their special setting our results improve upon theirs for the high condition number regime. Nonconvex. Sgd dates at least to the seminal work (Robbins & Monro, 1951); and since then it has been developed in several directions (Poljak & Tsypkin, 1973; Ljung, 1977; Bottou, 1991; Kushner & Clark, 2012). In the (nonsmooth) finite-sum setting, Sra (2012) considers proximal splitting methods, and analyzes asymptotic convergence with nonvanishing gradient errors. Hong (2014) studies a distributed nonconvex incremental ADMM algorithm. These works, however, only prove expected convergence to stationary points and often lack analysis of rates. The first nonasymptotic convergence rate analysis for Sgd is in (Ghadimi & Lan, 2013), who show that Sgd ensures \u2016\u2207f\u2016 \u2264 in O(1/ ) iterations. A similar rate for parallel and distributed Sgd was shown recently in (Lian et al., 2015). GradientDescent is known to ensure \u2016\u2207f\u2016 \u2264 in O(1/ ) iterations (Nesterov, 2003, Chap. 1.2.3). The first analysis of nonconvex Svrg seems to be due to Shamir (2014), who considers the special problem of computing a few leading eigenvectors (e.", "startOffset": 3, "endOffset": 1567}, {"referenceID": 23, "context": "We also recall the class of gradient dominated functions (Polyak, 1963; Nesterov & Polyak, 2006), where a function f is called \u03c4 -gradient dominated if for any x \u2208 R f(x)\u2212 f(x\u2217) \u2264 \u03c4\u2016\u2207f(x)\u2016, (2)", "startOffset": 57, "endOffset": 96}, {"referenceID": 23, "context": "Note that GradientDescent can also achieve linear convergence rate for gradient dominated functions (Polyak, 1963).", "startOffset": 100, "endOffset": 114}, {"referenceID": 5, "context": "For a batch size of b, Sgd obtains a rate of O(1/ \u221a bT ) (Dekel et al., 2012) (obtainable by a simple modification of Theorem 1).", "startOffset": 57, "endOffset": 77}, {"referenceID": 15, "context": "In contrast, Sgd does not yield an efficient mini-batch strategy as it requires O(b/ ) IFO calls for achieving an -accurate solution (Li et al., 2014).", "startOffset": 133, "endOffset": 150}, {"referenceID": 26, "context": "Such initialization is standard for variance reduced schemes even for convex problems (Johnson & Zhang, 2013; Schmidt et al., 2013).", "startOffset": 86, "endOffset": 131}, {"referenceID": 6, "context": "In fact, Ge et al. (2015) add additional noise to the stochastic gradient in order to escape saddle points.", "startOffset": 9, "endOffset": 26}], "year": 2017, "abstractText": "We study nonconvex finite-sum problems and analyze stochastic variance reduced gradient (Svrg) methods for them. Svrg and related methods have recently surged into prominence for convex optimization given their edge over stochastic gradient descent (Sgd); but their theoretical analysis almost exclusively assumes convexity. In contrast, we prove non-asymptotic rates of convergence (to stationary points) of Svrg for nonconvex optimization, and show that it is provably faster than Sgd and gradient descent. We also analyze a subclass of nonconvex problems on which Svrg attains linear convergence to the global optimum. We extend our analysis to mini-batch variants of Svrg, showing (theoretical) linear speedup due to mini-batching in parallel settings.", "creator": "TeX"}}}