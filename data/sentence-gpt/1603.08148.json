{"id": "1603.08148", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Mar-2016", "title": "Pointing the Unknown Words", "abstract": "The problem of rare and unknown words is an important issue that can potentially effect the performance of many NLP systems, including both traditional count based models and deep learning models. We propose a novel way to deal with the rare and unseen words for the neural network models with attention. Our model uses two softmax layers in order to predict the next word in conditional language models: one of the softmax layers predicts the location of a word in the source sentence, and the other softmax layer predicts a word in the shortlist vocabulary. This model also works with all the data we could gain from the dataset, with the result that it will take time to fully understand what is and is not the word itself. In order to build the model, we first use a linear model to estimate how much the neural network is trying to predict by focusing on the word rather than just the words. We also employ two simple models: two simple models and a deep learning model.\n\n\nOur model can be summarized using a complex model.\nLet\u2019s call the neural network model the model called \u2019DeepMind.\u2019 It uses the term deep-learning in conjunction with deep learning in its model. We will start by using an algorithm called \u201cDeepLearning. This is the first deep learning model. In the deep learning model, the words are only associated with the words but the words are associated with the words. So if we choose to add the words at the end, we have a strong sense of the word that is likely to make the word possible for the AI, we can then assign this word to our neural network model.\n\u201cDeep Learning model consists of only three parameters: semantic and social, and the sentence has an explicit message and it is considered as an important model,\u2019 according to the model. The sentence has an explicit message, and it is considered as an important model, according to the model. The sentence has an explicit message, and it is considered as an important model, according to the model. The sentence has an explicit message, and it is considered as an important model, according to the model. The sentence has an explicit message, and it is considered as an important model, according to the model. The sentence has an explicit message, and it is considered as an important model, according to the model. The sentence has an explicit message, and it is considered as an important model, according to the model. The sentence has an explicit message, and it is considered as an important model, according to", "histories": [["v1", "Sat, 26 Mar 2016 22:31:57 GMT  (50kb,D)", "https://arxiv.org/abs/1603.08148v1", null], ["v2", "Sun, 3 Apr 2016 21:12:57 GMT  (50kb,D)", "http://arxiv.org/abs/1603.08148v2", null], ["v3", "Sun, 21 Aug 2016 20:03:39 GMT  (156kb,D)", "http://arxiv.org/abs/1603.08148v3", "ACL 2016 Oral Paper"]], "reviews": [], "SUBJECTS": "cs.CL cs.LG cs.NE", "authors": ["\u00e7aglar g\u00fcl\u00e7ehre", "sungjin ahn", "ramesh nallapati", "bowen zhou", "yoshua bengio"], "accepted": true, "id": "1603.08148"}, "pdf": {"name": "1603.08148.pdf", "metadata": {"source": "CRF", "title": "Pointing the Unknown Words", "authors": ["Caglar Gulcehre", "Sungjin Ahn", "Ramesh Nallapati", "Yoshua Bengio"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Words are the basic input/output units in most of the NLP systems, and thus the ability to cover a large number of words is a key to building a robust NLP system. However, considering that (i) the number of all words in a language including named entities is very large and that (ii) language itself is an evolving system (people create new words), this can be a challenging problem.\nA common approach followed by the recent neural network based NLP systems is to use a\nsoftmax output layer where each of the output dimension corresponds to a word in a predefined word-shortlist. Because computing high dimensional softmax is computationally expensive, in practice the shortlist is limited to have only topK most frequent words in the training corpus. All other words are then replaced by a special word, called the unknown word (UNK).\nThe shortlist approach has two fundamental problems. The first problem, which is known as the rare word problem, is that some of the words in the shortlist occur less frequently in the training set and thus are difficult to learn a good representation, resulting in poor performance. Second, it is obvious that we can lose some important information by mapping different words to a single dummy token UNK. Even if we have a very large shortlist including all unique words in the training set, it does not necessarily improve the test performance, because there still exists a chance to see an unknown word at test time. This is known as the unknown word problem. In addition, increasing the shortlist size mostly leads to increasing rare words due to Zipf\u2019s Law.\nThese two problems can be particularly critical in language understanding tasks such as factoid question answering (Bordes et al., 2015) where the words that we are interested in are often named entities which are usually unknown or rare words.\nIn a similar situation, where we have a limited information on how to call an object of interest, it seems that humans (and also some primates) have an efficient behavioral mechanism of drawing attention to the object: pointing (Matthews et al., 2012). Pointing makes it possible to deliver information and to associate context to a particular object without knowing how to call it. In particular, human infants use pointing as a fundamental communication tool (Tomasello et al., 2007).\nIn this paper, inspired by the pointing behav-\nar X\niv :1\n60 3.\n08 14\n8v 3\n[ cs\n.C L\n] 2\n1 A\nug 2\n01 6\nior of humans and recent advances in the attention mechanism (Bahdanau et al., 2014) and the pointer networks (Vinyals et al., 2015), we propose a novel method to deal with the rare or unknown word problem. The basic idea is that we can see in many NLP problems as a task of predicting target text given context text, where some of the target words appear in the context as well. We observe that in this case we can make the model learn to point a word in the context and copy it to the target text, as well as when to point. For example, in machine translation, we can see the source sentence as the context, and the target sentence as what we need to predict. In Figure 1, we show an example depiction of how words can be copied from source to target in machine translation. Although the source and target languages are different, many of the words such as named entities are usually represented by the same characters in both languages, making it possible to copy. Similarly, in text summarization, it is natural to use some words in the original text in the summarized text as well.\nSpecifically, to predict a target word at each timestep, our model first determines the source of the word generation, that is, on whether to take one from a predefined shortlist or to copy one from the context. For the former, we apply the typical softmax operation, and for the latter, we use the attention mechanism to obtain the pointing softmax probability over the context words and pick the one of high probability. The model learns this decision so as to use the pointing only when the context includes a word that can be copied to the target. This way, our model can predict even the words which are not in the shortlist, as long as it appears in the context. Although some of the words still need to be labeled as UNK, i.e., if it is neither in the shortlist nor in the context, in experiments we show that this learning when and where to point improves the performance in machine translation and text summarization.\nThe rest of the paper is organized as follows. In the next section, we review the related works including pointer networks and previous approaches to the rare/unknown problem. In Section 3, we review the neural machine translation with attention mechanism which is the baseline in our experiments. Then, in Section 4, we propose our method dealing with the rare/unknown word problem, called the Pointer Softmax (PS). The exper-\nimental results are provided in the Section 5 and we conclude our work in Section 6."}, {"heading": "2 Related Work", "text": "The attention-based pointing mechanism is introduced first in the pointer networks (Vinyals et al., 2015). In the pointer networks, the output space of the target sequence is constrained to be the observations in the input sequence (not the input space). Instead of having a fixed dimension softmax output layer, softmax outputs of varying dimension is dynamically computed for each input sequence in such a way to maximize the attention probability of the target input. However, its applicability is rather limited because, unlike our model, there is no option to choose whether to point or not; it always points. In this sense, we can see the pointer networks as a special case of our model where we always choose to point a context word.\nSeveral approaches have been proposed towards solving the rare words/unknown words problem, which can be broadly divided into three categories. The first category of the approaches focuses on improving the computation speed of the softmax output so that it can maintain a very large vocabulary. Because this only increases the shortlist size, it helps to mitigate the unknown word problem, but still suffers from the rare word problem. The hierarchical softmax (Morin and Bengio, 2005), importance sampling (Bengio and Sene\u0301cal, 2008; Jean et al., 2014), and the noise contrastive estimation (Gutmann and Hyva\u0308rinen, 2012; Mnih and Kavukcuoglu, 2013) methods are in the class.\nThe second category, where our proposed method also belongs to, uses information from the context. Notable works are (Luong et al., 2015) and (Hermann et al., 2015). In particular, applying to machine translation task, (Luong et al., 2015) learns to point some words in source sentence and copy it to the target sentence, similarly\nto our method. However, it does not use attention mechanism, and by having fixed sized softmax output over the relative pointing range (e.g., -7, . . . , -1, 0, 1, . . . , 7), their model (the Positional All model) has a limitation in applying to more general problems such as summarization and question answering, where, unlike machine translation, the length of the context and the pointing locations in the context can vary dramatically. In question answering setting, (Hermann et al., 2015) have used placeholders on named entities in the context. However, the placeholder id is directly predicted in the softmax output rather than predicting its location in the context.\nThe third category of the approaches changes the unit of input/output itself from words to a smaller resolution such as characters (Graves, 2013) or bytecodes (Sennrich et al., 2015; Gillick et al., 2015). Although this approach has the main advantage that it could suffer less from the rare/unknown word problem, the training usually becomes much harder because the length of sequences significantly increases.\nSimultaneously to our work, (Gu et al., 2016) and (Cheng and Lapata, 2016) proposed models that learn to copy from source to target and both papers analyzed their models on summarization tasks."}, {"heading": "3 Neural Machine Translation Model with Attention", "text": "As the baseline neural machine translation system, we use the model proposed by (Bahdanau et al., 2014) that learns to (soft-)align and translate jointly. We refer this model as NMT.\nThe encoder of the NMT is a bidirectional RNN (Schuster and Paliwal, 1997). The forward RNN reads input sequence x = (x1, . . . , xT ) in left-to-right direction, resulting in a sequence of hidden states ( \u2212\u2192 h 1, . . . , \u2212\u2192 h T ). The backward RNN reads x in the reversed direction and outputs ( \u2190\u2212 h 1, . . . , \u2190\u2212 h T ). We then concatenate the hidden states of forward and backward RNNs at each time step and obtain a sequence of annotation vectors (h1, . . . ,hT ) where hj = [\u2212\u2192 h j || \u2190\u2212 h j ] . Here, || denotes the concatenation operator. Thus, each annotation vector hj encodes information about the j-th word with respect to all the other surrounding words in both directions.\nIn the decoder, we usually use gated recurrent unit (GRU) (Cho et al., 2014; Chung et al.,\n2014). Specifically, at each time-step t, the softalignment mechanism first computes the relevance weight etj which determines the contribution of annotation vector hj to the t-th target word. We use a non-linear mapping f (e.g., MLP) which takes hj , the previous decoder\u2019s hidden state st\u22121 and the previous output yt\u22121 as input:\netj = f(st\u22121,hj , yt\u22121).\nThe outputs etj are then normalized as follows:\nltj = exp(etj)\u2211T k=1 exp(etk) . (1)\nWe call ltj as the relevance score, or the alignment weight, of the j-th annotation vector.\nThe relevance scores are used to get the context vector ct of the t-th target word in the translation:\nct = T\u2211 j=1 ltjhj ,\nThe hidden state of the decoder st is computed based on the previous hidden state st\u22121, the context vector ct and the output word of the previous time-step yt\u22121:\nst = fr(st\u22121, yt\u22121, ct), (2)\nwhere fr is GRU. We use a deep output layer (Pascanu et al., 2013) to compute the conditional distribution over words:\np(yt = a|y<t,x) \u221d exp ( \u03c8a(Wo,bo)fo(st, yt\u22121, ct) ) ,\n(3)\nwhere W is a learned weight matrix and b is a bias of the output layer. fo is a single-layer feedforward neural network. \u03c8(Wo,bo)(\u00b7) is a function that performs an affine transformation on its input. And the superscript a in \u03c8a indicates the a-th column vector of \u03c8.\nThe whole model, including both the encoder and the decoder, is jointly trained to maximize the (conditional) log-likelihood of target sequences given input sequences, where the training corpus is a set of (xn,yn)\u2019s. Figure 2 illustrates the architecture of the NMT."}, {"heading": "4 The Pointer Softmax", "text": "In this section, we introduce our method, called as the pointer softmax (PS), to deal with the rare and unknown words. The pointer softmax can be an applicable approach to many NLP tasks, because it resolves the limitations about unknown words for neural networks. It can be used in parallel with other existing techniques such as the large vocabulary trick (Jean et al., 2014). Our model learns two key abilities jointly to make the pointing mechanism applicable in more general settings: (i) to predict whether it is required to use the pointing or not at each time step and (ii) to point any location of the context sequence whose length can vary widely over examples. Note that the pointer networks (Vinyals et al., 2015) are in lack of the ability (i), and the ability (ii) is not achieved in the models by (Luong et al., 2015).\nTo achieve this, our model uses two softmax output layers, the shortlist softmax and the location softmax. The shortlist softmax is the same as the typical softmax output layer where each dimension corresponds a word in the predefined word shortlist. The location softmax is a pointer network where each of the output dimension corresponds to the location of a word in the context sequence. Thus, the output dimension of the location softmax varies according to the length of the given context sequence.\nAt each time-step, if the model decides to use the shortlist softmax, we generate a word wt from the shortlist. Otherwise, if it is expected that the context sequence contains a word which needs to\nbe generated at the time step, we obtain the location of the context word lt from the location softmax. The key to making this possible is deciding when to use the shortlist softmax or the location softmax at each time step. In order to accomplish this, we introduce a switching network to the model. The switching network, which is a multilayer perceptron in our experiments, takes the representation of the context sequence (similar to the input annotation in NMT) and the previous hidden state of the output RNN as its input. It outputs a binary variable zt which indicates whether to use the shortlist softmax (when zt = 1) or the location softmax (when zt = 0). Note that if the word that is expected to be generated at each timestep is neither in the shortlist nor in the context sequence, the switching network selects the shortlist softmax, and then the shortlist softmax predicts UNK. The details of the pointer softmax model can be seen in Figure 3 as well.\nMore specifically, our goal is to maximize the probability of observing the target word sequence y = (y1, y2, . . . , yTy) and the word generation source z = (z1, z2, . . . , zTy), given the context sequence x = (x1, x2, . . . , xTx):\np\u03b8(y, z|x) = Ty\u220f t=1 p\u03b8(yt, zt|y<t, z<t,x). (4)\nNote that the word observation yt can be either a word wt from the shortlist softmax or a location lt from the location softmax, depending on the switching variable zt.\nConsidering this, we can factorize the above\nequation further p(y, z|x) = \u220f t\u2208Tw\np(wt, zt|(y, z)<t,x)\u00d7\u220f t\u2032\u2208Tl p(lt\u2032 , zt\u2032 |(y, z)<t\u2032 ,x). (5)\nHere, Tw is a set of time steps where zt = 1, and Tl is a set of time-steps where zt = 0. And, Tw\u222aTl = {1, 2, . . . , Ty} and Tw \u2229 Tl = \u2205. We denote all previous observations at step t by (y, z)<t. Note also that ht = f((y, z)<t).\nThen, the joint probabilities inside each product can be further factorized as follows:\np(wt, zt|(y, z)<t) = p(wt|zt = 1, (y, z)<t)\u00d7 p(zt = 1|(y, z)<t) (6)\np(lt, zt|(y, z)<t) = p(lt|zt = 0, (y, z)<t)\u00d7 p(zt = 0|(y, z)<t) (7)\nhere, we omitted x which is conditioned on all probabilities in the above.\nThe switch probability is modeled as a multilayer perceptron with binary output:\np(zt = 1|(y, z)<t,x) = \u03c3(f(x,ht\u22121; \u03b8)) (8) p(zt = 0|(y, z)<t,x) = 1\u2212 \u03c3(f(x,ht\u22121; \u03b8)). (9)\nAnd p(wt|zt = 1, (y, z)<t,x) is the shortlist softmax and p(lt|zt = 0, (y, z)<t,x) is the location softmax which can be a pointer network. \u03c3(\u00b7) stands for the sigmoid function, \u03c3(x) = 1 exp(-x)+1 .\nGivenN such context and target sequence pairs, our training objective is to maximize the following log likelihood w.r.t. the model parameter \u03b8\nargmax \u03b8\n1\nN N\u2211 n=1 log p\u03b8(yn, zn|xn). (10)"}, {"heading": "4.1 Basic Components of the Pointer Softmax", "text": "In this section, we discuss practical details of the three fundamental components of the pointer softmax. The interactions between these components and the model is depicted in Figure 3.\nLocation Softmax lt : The location of the word to copy from source text to the target is predicted by the location softmax lt. The location softmax outputs the conditional probability distribution p(lt|zt = 0, (y, z)<t,x). For models using the\nattention mechanism such as NMT, we can reuse the probability distributions over the source words in order to predict the location of the word to point. Otherwise we can simply use a pointer network of the model to predict the location.\nShortlist Softmax wt : The subset of the words in the vocabulary V is being predicted by the shortlist softmax wt.\nSwitching network dt : The switching network dt is an MLP with sigmoid output function that outputs a scalar probability of switching between lt and wt, and represents the conditional probability distribution p(zt|(y, z)<t,x). For NMT model, we condition the MLP that outputs the switching probability on the representation of the context of the source text ct and the hidden state of the decoder ht. Note that, during the training, dt is observed, and thus we do not have to sample.\nThe output of the pointer softmax, ft will be the concatenation of the the two vectors, dt \u00d7wt and (1\u2212 dt)\u00d7 lt.\nAt test time, we compute Eqn. (6) and (7) for all shortlist word wt and all location lt, and pick the word or location of the highest probability."}, {"heading": "5 Experiments", "text": "In this section, we provide our main experimental results with the pointer softmax on machine translation and summarization tasks. In our experiments, we have used the same baseline model and just replaced the softmax layer with pointer softmax layer at the language model. We use the Adadelta (Zeiler, 2012) learning rule for the training of NMT models. The code for pointer softmax model is available at https://github.com/ caglar/pointer_softmax."}, {"heading": "5.1 The Rarest Word Detection", "text": "We construct a synthetic task and run some preliminary experiments in order to compare the results with the pointer softmax and the regular softmax\u2019s performance for the rare-words. The vocabulary size of our synthetic task is |V |= 600 using sequences of length 7. The words in the sequences are sampled according to their unigram distribution which has the form of a geometric distribution. The task is to predict the least frequent word in the sequence according to unigram distribution of the words. During the training, the sequences are generated randomly. Before the training, val-\nidation and test sets are constructed with a fixed seed.\nWe use a GRU layer over the input sequence and take the last-hidden state, in order to get the summary ct of the input sequence. The wt, lt are only conditioned on ct, and the MLP predicting the dt is conditioned on the latent representations of wt and lt. We use minibatches of size 250 using adam adaptive learning rate algorithm (Kingma and Adam, 2015) using the learning rate of 8 \u00d7 10\u22124 and hidden layers with 1000 units.\nWe train a model with pointer softmax where we assign pointers for the rarest 60 words and the rest of the words are predicted from the shortlist softmax of size 540. We observe that increasing the inverse temperature of the sigmoid output of dt to 2, in other words making the decisions of dt to become sharper, works better, i.e. dt = \u03c3(2x).\nAt the end of training with pointer softmax we obtain the error rate of 17.4% and by using softmax over all 600 tokens, we obtain the error-rate of 48.2%."}, {"heading": "5.2 Summarization", "text": "In these series of experiments, we use the annotated Gigaword corpus as described in (Rush et al., 2015). Moreover, we use the scripts that are made available by the authors of (Rush et al., 2015) 1 to preprocess the data, which results to approximately 3.8M training examples. This script generates about 400K validation and an equal number of test examples, but we use a randomly sampled subset of 2000 examples each for validation and testing. We also have made small modifications to the script to extract not only the tokenized words, but also system-generated named-entity tags. We have created two different versions of training data for pointers, which we call UNK-pointers data and entity-pointers data respectively.\nFor the UNK-pointers data, we trim the vocabulary of the source and target data in the training set and replace a word by the UNK token whenever a word occurs less than 5 times in either source or target data separately. Then, we create pointers from each UNK token in the target data to the position in the corresponding source document where the same word occurs in the source, as seen in the data before UNK\u2019s were created. It is possible that the source can have an UNK in the matching posi-\n1https://github.com/facebook/NAMAS\ntion, but we still created a pointer in this scenario as well. The resulting data has 2.7 pointers per 100 examples in the training set and 9.1 pointers rate in the validation set.\nIn the entity-pointers data, we exploit the named-entity tags in the annotated corpus and first anonymize the entities by replacing them with an integer-id that always starts from 1 for each document and increments from left to right. Entities that occur more than once in a single document share the same id. We create the anonymization at token-level, so as to allow partial entity matches between the source and target for multi-token entities. Next, we create a pointer from the target to source on similar lines as before, but only for exact matches of the anonymized entities. The resulting data has 161 pointers per 100 examples in the training set and 139 pointers per 100 examples in the validation set.\nIf there are multiple matches in the source, either in the UNK-pointers data or the entitypointers data, we resolve the conflict in favor of the first occurrence of the matching word in the source document. In the UNK data, we model the UNK tokens on the source side using a single placeholder embedding that is shared across all documents, and in the entity-pointers data, we model each entity-id in the source by a distinct placeholder, each of which is shared across all documents.\nIn all our experiments, we use a bidirectional GRU-RNN (Chung et al., 2014) for the encoder and a uni-directional RNN for the decoder. To speed-up training, we use the large-vocabulary trick (Jean et al., 2014) where we limit the vocabulary of the softmax layer of the decoder to 2000 words dynamically chosen from the words in the source documents of each batch and the most common words in the target vocabulary. In both experiments, we fix the embedding size to 100 and the hidden state dimension to 200. We use pretrained word2vec vectors trained on the same corpus to initialize the embeddings, but we finetune them by backpropagating through the pre-trained embeddings during training. Our vocabulary sizes are fixed to 125K for source and 75K for target for both experiments.\nWe use the reference data for pointers for the model only at the training time. During the test time, the switch makes a decision at every timestep on which softmax layer to use.\nFor evaluation, we use full-length Rouge F1 using the official evaluation tool 2. In their work, the authors of (Bahdanau et al., 2014) use full-length Rouge Recall on this corpus, since the maximum length of limited-length version of Rouge recall of 75 bytes (intended for DUC data) is already long for Gigaword summaries. However, since full-length Recall can unfairly reward longer summaries, we also use full-length F1 in our experiments for a fair comparison between our models, independent of the summary length.\nThe experimental results comparing the Pointer Softmax with NMT model are displayed in Table 1 for the UNK pointers data and in Table 2 for the entity pointers data. As our experiments show, pointer softmax improves over the baseline NMT on both UNK data and entities data. Our hope was that the improvement would be larger for the entities data since the incidence of pointers was much greater. However, it turns out this is not the case, and we suspect the main reason is anonymization of entities which removed datasparsity by converting all entities to integer-ids that are shared across all documents. We believe that on de-anonymized data, our model could help more, since the issue of data-sparsity is more acute in this case.\nIn Table 3, we provide the results for summarization on Gigaword corpus in terms of recall as also similar comparison is done by (Rush et al., 2015). We observe improvements on all the scores with the addition of pointer softmax. Let us note\n2http://www.berouge.com/Pages/default. aspx\nthat, since the test set of (Rush et al., 2015) is not publicly available, we sample 2000 texts with their summaries without replacement from the validation set and used those examples as our test set.\nIn Table 4 we present a few system generated summaries from the Pointer Softmax model trained on the UNK pointers data. From those examples, it is apparent that the model has learned to accurately point to the source positions whenever it needs to generate rare words in the summary."}, {"heading": "5.3 Neural Machine Translation", "text": "In our neural machine translation (NMT) experiments, we train NMT models with attention over the Europarl corpus (Bahdanau et al., 2014) over the sequences of length up to 50 for English to French translation. 3. All models are trained with early-stopping which is done based on the negative log-likelihood (NLL) on the development set. Our evaluations to report the performance of our models are done on newstest2011 by using BLUE score. 4\nWe use 30, 000 tokens for both the source and the target language shortlist vocabularies (1 of the token is still reserved for the unknown words). The whole corpus contains 134, 831 unique English words and 153, 083 unique French words. We have created a word-level dictionary from French to English which contains translation of 15,953 words that are neither in shortlist vocabulary nor dictionary of common words for both the source and the target. There are about 49, 490 words shared between English and French parallel corpora of Europarl.\nDuring the training, in order to decide whether to pick a word from the source sentence using attention/pointers or to predict the word from the short-list vocabulary, we use the following simple heuristic. If the word is not in the short-list\n3In our experiments, we use an existing code, provided in https://github.com/kyunghyuncho/ dl4mt-material, and on the original model we only changed the last softmax layer for our experiments\n4We compute the BLEU score using the multi-blue.perl script from Moses on tokenized sentence pairs.\nvocabulary, we first check if the same word yt appears in the source sentence. If it is not, we then check if a translated version of the word exists in the source sentence by using a look-up table between the source and the target language. If the word is in the source sentence, we then use the location of the word in the source as the target. Otherwise we check if one of the English senses from the cross-language dictionary of the French word is in the source. If it is in the source sentence, then we use the location of that word as our translation. Otherwise we just use the argmax of lt as the target.\nFor switching network dt, we observed that using a two-layered MLP with noisy-tanh activation (Gulcehre et al., 2016) function with residual connection from the lower layer (He et al., 2015) activation function to the upper hidden layers improves the BLEU score about 1 points over the dt using ReLU activation function. We initialized the biases of the last sigmoid layer of dt to \u22121 such that if dt becomes more biased toward choosing the shortlist vocabulary at the beginning of the training. We renormalize the gradients if the norm of the gradients exceed 1 (Pascanu et al., 2012).\nIn Table 5, we provided the result of NMT with pointer softmax and we observe about 3.6 BLEU score improvement over our baseline.\nIn Figure 4, we show the validation curves of the NMT model with attention and the NMT model with shortlist-softmax layer. Pointer softmax converges faster in terms of number of minibatch updates and achieves a lower validation negative-log-likelihood (NLL) (63.91) after 200k updates over the Europarl dataset than the NMT\nmodel with shortlist softmax trained for 400k minibatch updates (65.26). Pointer softmax converges faster than the model using the shortlist softmax, because the targets provided to the pointer softmax also acts like guiding hints to the attention."}, {"heading": "6 Conclusion", "text": "In this paper, we propose a simple extension to the traditional soft attention-based shortlist softmax by using pointers over the input sequence. We show that the whole model can be trained jointly with single objective function. We observe noticeable improvements over the baselines on machine translation and summarization tasks by using pointer softmax. By doing a very simple modification over the NMT, our model is able to generalize to the unseen words and can deal with rarewords more efficiently. For the summarization task on Gigaword dataset, the pointer softmax was able to improve the results even when it is used together with the large-vocabulary trick. In the case of neural machine translation, we observed that the training with the pointer softmax is also improved the convergence speed of the model as well. For French to English machine translation on Europarl corpora, we observe that using the pointer softmax can also improve the training convergence of the model."}, {"heading": "Acknowledgments", "text": "We would like to thank the developers of Theano 5, for developing such a powerful tool for scientific computing (Theano Development Team, 2016). We acknowledge the support of the following organizations for research funding and computing\n5http://deeplearning.net/software/ theano/\nsupport: NSERC, Samsung, Calcul Que\u0301bec, Compute Canada, the Canada Research Chairs and CIFAR. C. G. thanks for IBM T.J. Watson Research for funding this research during his internship between October 2015 and January 2016."}], "references": [{"title": "Kyunghyun Cho", "author": ["Dzmitry Bahdanau"], "venue": "and Yoshua Bengio.", "citeRegEx": "Bahdanau et al.2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Adaptive importance sampling to accelerate training of a neural probabilistic language model", "author": ["Bengio", "Sen\u00e9cal2008] Yoshua Bengio", "JeanS\u00e9bastien Sen\u00e9cal"], "venue": "Neural Networks, IEEE Transactions", "citeRegEx": "Bengio et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2008}, {"title": "Sumit Chopra", "author": ["Antoine Bordes", "Nicolas Usunier"], "venue": "and Jason Weston.", "citeRegEx": "Bordes et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Neural summarization by extracting sentences and words. arXiv preprint arXiv:1603.07252", "author": ["Cheng", "Lapata2016] Jianpeng Cheng", "Mirella Lapata"], "venue": null, "citeRegEx": "Cheng et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 2016}, {"title": "KyungHyun Cho", "author": ["Junyoung Chung", "\u00c7aglar G\u00fcl\u00e7ehre"], "venue": "and Yoshua Bengio.", "citeRegEx": "Chung et al.2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Oriol Vinyals", "author": ["Dan Gillick", "Cliff Brunk"], "venue": "and Amarnag Subramanya.", "citeRegEx": "Gillick et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Generating sequences with recurrent neural networks. arXiv preprint arXiv:1308.0850", "author": ["Alex Graves"], "venue": null, "citeRegEx": "Graves.,? \\Q2013\\E", "shortCiteRegEx": "Graves.", "year": 2013}, {"title": "Hang Li", "author": ["Jiatao Gu", "Zhengdong Lu"], "venue": "and Victor OK Li.", "citeRegEx": "Gu et al.2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Misha Denil", "author": ["Caglar Gulcehre", "Marcin Moczulski"], "venue": "and Yoshua Bengio.", "citeRegEx": "Gulcehre et al.2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Noise-contrastive estimation of unnormalized statistical models, with applications to natural image statistics", "author": ["Gutmann", "Hyv\u00e4rinen2012] Michael U Gutmann", "Aapo Hyv\u00e4rinen"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Gutmann et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Gutmann et al\\.", "year": 2012}, {"title": "Shaoqing Ren", "author": ["Kaiming He", "Xiangyu Zhang"], "venue": "and Jian Sun.", "citeRegEx": "He et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Mustafa Suleyman", "author": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay"], "venue": "and Phil Blunsom.", "citeRegEx": "Hermann et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Roland Memisevic", "author": ["S\u00e9bastien Jean", "Kyunghyun Cho"], "venue": "and Yoshua Bengio.", "citeRegEx": "Jean et al.2014", "shortCiteRegEx": null, "year": 2014}, {"title": "A method for stochastic optimization", "author": ["Kingma", "Adam2015] Diederik P Kingma", "Jimmy Ba Adam"], "venue": "In International Conference on Learning Representation", "citeRegEx": "Kingma et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2015}, {"title": "Oriol Vinyals", "author": ["Minh-Thang Luong", "Ilya Sutskever", "Quoc V Le"], "venue": "and Wojciech Zaremba.", "citeRegEx": "Luong et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Elena Lieven", "author": ["Danielle Matthews", "Tanya Behne"], "venue": "and Michael Tomasello.", "citeRegEx": "Matthews et al.2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Learning word embeddings efficiently with noise-contrastive estimation", "author": ["Mnih", "Kavukcuoglu2013] Andriy Mnih", "Koray Kavukcuoglu"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Mnih et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2013}, {"title": "Hierarchical probabilistic neural network language model", "author": ["Morin", "Bengio2005] Frederic Morin", "Yoshua Bengio"], "venue": "In Aistats,", "citeRegEx": "Morin et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Morin et al\\.", "year": 2005}, {"title": "Tomas Mikolov", "author": ["Razvan Pascanu"], "venue": "and Yoshua Bengio.", "citeRegEx": "Pascanu et al.2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Kyunghyun Cho", "author": ["Razvan Pascanu", "Caglar Gulcehre"], "venue": "and Yoshua Bengio.", "citeRegEx": "Pascanu et al.2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Sumit Chopra", "author": ["Alexander M. Rush"], "venue": "and Jason Weston.", "citeRegEx": "Rush et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Bidirectional recurrent neural networks", "author": ["Schuster", "Paliwal1997] Mike Schuster", "Kuldip K Paliwal"], "venue": "Signal Processing, IEEE Transactions", "citeRegEx": "Schuster et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Schuster et al\\.", "year": 1997}, {"title": "Barry Haddow", "author": ["Rico Sennrich"], "venue": "and Alexandra Birch.", "citeRegEx": "Sennrich et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Malinda Carpenter", "author": ["Michael Tomasello"], "venue": "and Ulf Liszkowski.", "citeRegEx": "Tomasello et al.2007", "shortCiteRegEx": null, "year": 2007}, {"title": "Meire Fortunato", "author": ["Oriol Vinyals"], "venue": "and Navdeep Jaitly.", "citeRegEx": "Vinyals et al.2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Adadelta: an adaptive learning rate method", "author": ["Matthew D Zeiler"], "venue": "arXiv preprint arXiv:1212.5701", "citeRegEx": "Zeiler.,? \\Q2012\\E", "shortCiteRegEx": "Zeiler.", "year": 2012}], "referenceMentions": [], "year": 2016, "abstractText": "The problem of rare and unknown words is an important issue that can potentially effect the performance of many NLP systems, including both the traditional countbased and the deep learning models. We propose a novel way to deal with the rare and unseen words for the neural network models using attention. Our model uses two softmax layers in order to predict the next word in conditional language models: one predicts the location of a word in the source sentence, and the other predicts a word in the shortlist vocabulary. At each time-step, the decision of which softmax layer to use choose adaptively made by an MLP which is conditioned on the context. We motivate our work from a psychological evidence that humans naturally have a tendency to point towards objects in the context or the environment when the name of an object is not known. We observe improvements on two tasks, neural machine translation on the Europarl English to French parallel corpora and text summarization on the Gigaword dataset using our proposed model.", "creator": "LaTeX with hyperref package"}}}