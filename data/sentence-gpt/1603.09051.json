{"id": "1603.09051", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Mar-2016", "title": "Phoenix: A Self-Optimizing Chess Engine", "abstract": "Since the advent of computers, many tasks which required humans to spend a lot of time and energy have been trivialized by the computers' ability to perform repetitive tasks extremely quickly. However there are still many areas in which humans excel in comparison with the machines. One such area is chess. Even with great advances in the speed and computational power of modern machines, Grandmasters often beat the best chess programs in the world with relative ease. This may be due to the fact that a game of chess cannot be won by pure calculation. There is more to the goodness of a chess position than some numerical value which apparently can be seen only by the human brain. Here an effort has been made to improve current chess engines by letting themselves evolve over a period of time. Firstly, the problem of learning is reduced into an optimization problem by defining Position Evaluation in terms of Positional Value Tables (PVTs). Next, the PVTs are optimized using Multi-Niche Crowding which successfully identifies the optima in a multimodal function, thereby arriving at distinctly different solutions which are close to the global optimum. To make the optimization problem easier, it is important to first create an optimization problem which is similar to the Optima in Multi-Niche Crowding (PVTs).\n\nThe PVTs have not only been developed in the past with many new ideas of which there are numerous advantages. They have also been developed by many of the world's most advanced people. Thus for instance, a mathematical simulation of a given situation can now be used by the game of chess using several algorithms. This algorithm is a new approach which is capable of predicting the relative power of the algorithms that can perform different tasks. This new approach, by utilizing an algorithm based on the previous techniques and the first available algorithm, was used to determine the number of times the algorithm can perform the same task. By using the first algorithm in all situations, the PVTs can be used to predict the relative power of the algorithm. It is possible to solve this problem by using the first algorithm in all situations and finding a solution which is compatible with the second algorithm. Therefore, in order to reach the optimal results, it is necessary to make sure that each of these algorithms will perform the same task at the same time.\nThis approach is also possible in many other categories, including the game of chess in a multiverse, which includes many more possibilities. A more detailed and comprehensive, comprehensive, comprehensive analysis of the algorithms are available here.\nAll algorithms that have been built on", "histories": [["v1", "Wed, 30 Mar 2016 06:41:04 GMT  (332kb,D)", "http://arxiv.org/abs/1603.09051v1", null], ["v2", "Fri, 2 Sep 2016 04:53:19 GMT  (331kb,D)", "http://arxiv.org/abs/1603.09051v2", null], ["v3", "Wed, 16 Aug 2017 14:32:55 GMT  (332kb,D)", "http://arxiv.org/abs/1603.09051v3", "Accepted in CICN 2015. Preprint"], ["v4", "Sun, 20 Aug 2017 11:25:43 GMT  (332kb,D)", "http://arxiv.org/abs/1603.09051v4", "Accepted in CICN 2015. Preprint"]], "reviews": [], "SUBJECTS": "cs.AI cs.NE", "authors": ["rahul aralikatte", "g srinivasaraghavan"], "accepted": false, "id": "1603.09051"}, "pdf": {"name": "1603.09051.pdf", "metadata": {"source": "CRF", "title": "Phoenix: A Self-Optimizing Chess Engine", "authors": ["Rahul A R", "G Srinivasaraghavan"], "emails": ["rahular1@in.ibm.com", "gsr@iiitb.ac.in"], "sections": [{"heading": null, "text": "Keywords\u2014Multi-Niche Crowding; Genetic Optimization; Machine Learning; Computer Chess\nI. INTRODUCTION\nThe most important factor that influences the strength of a chess engine is the way in which it evaluates moves. Expert chess players master the game over years of learning and when they play the game their mental processes involve a complex synergy of computing possible board moves, memory from past games, heuristic thumb rules, watching for established patterns of play, etc. Invariably when humans play the game, the evaluation of a board position or a move is carried out over a complex hierarchy of abstractions which they are often unable to describe accurately. Trying to replicate or mimic these processes on a computer is futile given our current lack of understanding of these processes and abstractions that humans use. Most computer chess engines today resort to a range of heuristic tricks to somehow reduce the representation of a board position/move to a group of numbers. Every positional parameter which might influence its goodness must have a numerical equivalent in this group. The construction of such a group/vector of number is non-trivial. There are 2 main reasons for this:\n\u2022 A small change in the position can result in a large change in its goodness. For instance, 2 positions which are identical except for the position of a queen, which is offset by a single square, might differ largely in their goodness.\n1Assuming the engines are not running on specialized/massive hardware\n\u2022 The value of a position might vary from player to player as it depends on the goal (s)he sets for himself. That is, a position might be losing for a defensive player and might be drawable for an attacking player.\nMost chess engines today use brute force methods to simulate this thinking process by taking into consideration multiple parameters which influence the value of a position. But these parameters are decided by the programmers while coding and not by the engine itself. Here, an effort has been made to free the engine from such preconcieved notions and let it learn these parameters and their relative importance by itself using genetic algorithms."}, {"heading": "II. EVALUATION ROUTINE", "text": "At its simplest, an evaluation function of a chess position returns the material difference between the players. However it is generally not possible to claim equality of two positions taking into account only the material balance. In several opening lines, one side is ready to sacrifice a pawn on purpose; for e.g. king\u2019s gambit accepted (1. e4 e5 2. f4 exf4). Sometimes a player can sacrifice pieces (like exchanging an inactive rook for an active bishop or knight) for achieving some non-material advantage that is considered worthwhile. Moreover, highly skilled chess players often agree to call the game a draw even when there is material imbalance. So in all these situations, other factors apart from the material balance have to be taken into consideration during position evaluation. These factors are known as strategic or positional parameters.\nIn general, the evaluation function is a multivariate, linear function which measures the goodness of a chess position. There are various features2 which can be extracted from a chess position that will give us some insight into the goodness. The inputs to the evaluation function are numbers which quantify these features. The output is a single number called the Evaluation Score.\nF = N\u2211 i=0 xi \u00b7 vi, { xi \u2208 {0, 1} vi \u2208 R , i = 1, N\nHere xi indicates the presence of the ith parameter(feature) and vi represents its importance as a real number. The position is good for white if this score is positive and vice versa. Also in some programs, a positive score is considered to be good for the current player and a negative score for the opponent.\n2Here the terms feature and parameter are used interchangably\nRahul A R et al.\nar X\niv :1\n60 3.\n09 05\n1v 1\n[ cs\n.A I]\n3 0\nM ar\n2 01\n6"}, {"heading": "A. Positional Parameters", "text": "In non trivial chess engines, it is usually the positional parameters which play an important role in evaluation and give the engine an edge during gameplay. With the amount of computing resources available today, these parameters when combined with fast pruning [1] and deepening [2] techniques can easily achieve IM3 if not the GM4 level. Therefore it is important to incorporate them into any new chess program if the aim is to build a competitive engine. The most important ones are listed below:\n\u2022 Castling: It is very important for the king to be defended by friendly pieces in the opening and middle games. Pawns in the corner serve as excellent defenders.\n\u2022 Rook on an open file: Rook is the second most powerful piece on the board after the queen and has a long reach. But this reach is useless if there are other pieces blocking its way. Therefore rooks should ideally be placed on open files which helps a player to initiate an attack.\n\u2022 Rook on a semi-open file: A semi-open file is one in which there are only enemy pawns blocking the rook. Placed onto a semi-open file, a rook does not allow the opponent to leave his pawn unprotected, thus reducing the mobility of opponent\u2019s pieces.\n\u2022 Knight\u2019s mobility: A knight\u2019s mobility is directly dependant on its placement. A knight near the center of the board is far more valuable than one at the corners.\n\u2022 (Supported) knight/bishop outpost: Outposts are those squares on the opponent\u2019s side of the board where a piece cannot be attacked immediately. These squares act as launch points for a mating attack.\n\u2022 Bishop pair: A bishop pair is generally very useful in end games when there are few pieces left on the board. They are generally used in tandem to force the king out of outposts, break pawn chains and hinder the movement of passed pawns.\n\u2022 Center pawns (d4, d5, e4, e5): The main theme during openings is center control which results in healthy development of the minor pieces and hinder the opponent\u2019s development. This is largely achieved using the \u2018d\u2019 an \u2018e\u2019 pawns.\n\u2022 Doubled pawns: A good pawn structure is very important during middle and end games. Doubled pawns are usually considered to be a weakness. When doubled, the upper pawn blocks the lower and in many cases they need to be defended by a piece.\n\u2022 Backward pawn: A backward pawn generally holds an entire pawn chain in place. It is the pawn of a chain which is nearest to the back rank. Usually another piece must guard this against attacks which can be disadvantageous.\n3International Master 4Grandmaster\n\u2022 Rook(s) on the 7th rank: Rook(s) on the 7th rank impede the movement of the opponent\u2019s pieces and also act as a very strong launch pad for the start of a mating attack as the opponent\u2019s king will generally be confined to the 8th rank.\n\u2022 Connected rooks: When two rooks are on the same file/rank without pawns or pieces between them, they are said to be connected. Connected rooks are untouchable as they support each other and can cause huge damage.\n\u2022 Passed pawn: A pawn is said to be passed when there are no enemy pawns on its file or on either of the adjacent files. This pawn is usually considered very important as it has a high probability of getting promoted during end games.\n\u2022 Rook-supported passed pawn: When there is a passed pawn on the board, a general rule of thumb is to put a rook behind it. This prevents the opponent from capturing the pawn easily and forces him to block the pawn with a piece.\n\u2022 Isolated pawns: An isolated pawn has no friendly pawns on either of the adjacent files. This becomes a weak point in the game as it requires constant support from one of the other pieces.\n\u2022 Bishops on the large diagonals: a1-h8 and h1-a8 are known as the large diagonals. When bishops are placed along these diagonals, they can be tucked into corners while maintaining their reach. This is greatly used to mount an attack on the enemy king during closed5 middle games.\nThere are many other parameters which can be considered like pawn structures and closeness of positions. But the ones mentioned above can be easily represented using Positional Value Tables that will greatly simplify the formulation and optimization processes which is the main aim of this paper."}, {"heading": "III. GENETIC OPTIMIZATION", "text": ""}, {"heading": "A. Genetic Scheme", "text": "Genetic Algorithms are mainly used for optimization and their learning is loosely based on several features of biological evolution. Generally they require 5 components [3]:\n\u2022 A way to encode the solutions of a problem on chromosomes6.\n\u2022 A fitness function which returns a rating for each chromosome.\n\u2022 Operators that are applied on parent solutions when they reproduce to alter their genetic composition. Crossover and Mutation are the most common operators. Domain-specific operators can also be constructed and used(as done in this paper).\n5A position is said to be closed when there are 6 or more pawns occupying the 16 central squares\n6Chromosomes can be thought of as the fundamental building blocks of potential solutions consisting of the solutions\u2019 parameters.\nRahul A R et al.\n\u2022 Parameter settings for the algorithm like the population size, number of generations and so forth.\nWhen a genetic algorithm is run using a suitable solution representation the algorithm can produce populations whose individuals get better and better with time, finally converging to a solution which is close to the optimum.\nBut this approach is not sufficient here as there is no one right way to play chess. The style of a player who plays attacking chess cannot be compared to that of a player who prefers defensive positional play as both may be equally good. It is therefore safe to assume that, a mathematical function representing position evaluation (if it exists) is multimodal."}, {"heading": "B. Niching", "text": "The problem with simple genetic algorithms is that it will eventually converge to one of the many global optima (if they do not get trapped in local optima) which depend on the initial population and the random genetic drift [4] occurring throughout the run. Eventually we will get copies of the same individual in one of the valleys/plateau.\nFor instance, consider a simple function f(x) = sin(x2). A plot of the function along with the position of the individuals (red marks) trying to find the minimum is shown in Fig. 1.\nThis function has more than one minimum and it would be ideal if both the minima were found. This is where the concept of niching comes in handy. Niching is a general class of techniques that promote the formation and maintenance of stable sub-populations in a genetic algorithm. 2 main objectives of such techniques are:\n\u2022 To converge to multiple, highly fit, and signicantly different solutions (for multimodal optimization)\n\u2022 To slow down convergence in cases where only one solution is required (to avoid premature convergence)\nFig. 2 shows how individuals have converged onto 2 separate optima for f(x) = sin(x2) when using niching. There are many approaches to niching and the one used here is called multi-niche crowding (MNC).\n1) Multi-Niche Crowding: Crowding [5] is a generalization of pre-selection. In crowding, the selection and reproduction processes are the same as those carried out in simple genetic algorithms, but the replacement process is different. Assuming that 2 parents produce 2 offspring, in order to make room for the newborns, it is necessary to identify 2 members from the population for replacement. The policy of replacing a member of the present generation by an offspring is carried out as follows:\n\u2022 A group of C individuals is selected at random from the population. C is called the crowding factor and a value 2 or 3 appears to work well in [5].\n\u2022 The chromosomes of the offspring are compared with those of the C individuals in the group using Hamming distance as a measure of similarity. The group member which is most similar to the offspring is replaced by the offspring.\n\u2022 This procedure is repeated for the other offspring as well.\nCrowding is essentially a successive replacement strategy. This strategy maintains the diversity in the population and postpones premature convergence. However generic crowding cannot maintain stable subpopulations for long due to selection pressure7.\nIn multi-niche crowding (MNC), both selection and replacement steps are modified with some type of crowding. The idea is to eliminate the selection pressure caused by fitness proportionate reproduction (FPR) while allowing the population to maintain some diversity. This objective is achieved in part, by encouraging mating and replacement within members of the same niche while allowing for some competition for slots among the niches. The result is an algorithm that (a) maintains stable subpopulations within different niches, (b) maintains diversity throughout the search, and (c) converges to different optima.\nIn MNC, the FPR selection is replaced by what is called crowding selection. In crowding selection, each individual in the population has the same chance for mating in every generation. Application of this selection rule takes place in two steps. First, an individual A is selected for mating. This\n7Any cause that reduces reproductive success in a portion of the population\nRahul A R et al.\nselection can be either sequential or random. Second, its mate M is selected, not from the entire population, but from a group of individuals of size Cs, picked at random (with replacement) from the population. The mate M thus chosen must be the one which is the most \u2018similar\u2019 to A. The similarity metric used here is not a genotypic metric such as the Hamming distance, but a suitably defined phenotypic distance metric. Crowding selection promotes mating between individuals from the same niche while allowing mating between individuals from different niches.\nDuring the replacement step, MNC uses a replacement policy called worst among the most similar. The goal of this step is to pick an individual from the population for replacement by an offspring. Implementation of this policy follows these steps. First, Cf groups are created by randomly picking s individuals (with replacement) per group from the population. These groups are called crowding factor groups. Second, one individual from each group that is most phenotypically similar to the offspring is identified. This gives Cf individuals that are candidates for replacement by virtue of their similarity to the offspring that will replace them. From this group of most similar individuals, we pick the one with the lowest fitness to die and that slot is filled with the offspring. The offspring could possibly have a lower fitness than the individual being replaced [6]."}, {"heading": "C. Problem Formulation", "text": "Usually evaluation functions consider almost if not all the parameters discussed in the Positional Parameters section. But here, the evaluation has to be totally dependent on whatever the computer learns on its own and nothing else. Therefore the formulation of the problem had to be done in such a way that the engine itself recognizes the relative importance of each parameter. This requirement forced the use of PVTs8.\nA PVT is a grid of numbers which indicate the best squares for a piece to occupy. Greater the number, better is its position. For example, Fig. 3 shows the PVT for a black knight. It is easy to spot that the values at the center of the board are higher than those at the corners. This means it is desirable for the knight to be on the central squares rather than the corners.\nBy carefully constructing these PVTs, most of the positional parameters can be quantified. Even though some of the abstract ones such as rook behind a past pawn cannot be described using this technique alone, by combining this with other search algorithms, it is possible to get more accurate evaluation scores. This is achieved by using PVTs for move\n8Positional Value Tables\nordering [7] by arranging moves in descending order of the PVT values for the destination squares.\nIt is easy to see that each piece must have its own PVT. Also, most of the pieces have different responsibilities at different junctures of the game. Therefore it is necessary to maintain different PVTs for middle and end games (PVTs for openings are not required as moves are made using opening books). Table 1 shows the various PVTs that are maintained.\nEvery potential solution (player/individual in the population) should have a chromosome which will influence its gameplay. A good chromosome will often lead to victory where as a bad chromosome will result in a loss. Therefore each value in every PVT is considered as a parameter to be optimized and hence all the PVTs are joined together to form a chromosome as shown in Fig. 4.\nThis is essentially a single dimension array containing 640 floating point numbers (clubbing together the 10 PVTs mentioned in Table 1, each having 64 values). From here on, the problem of learning reduces to an optimization of these 640 values.\nD. Implementation\nCuckooChess [8] is an advanced free open source chess program under the GNU General Public License written in Java by Peter Osterlund. It contains many of the standard algorithms for computer chess discussed previously such as iterative deepening, quiescence search with SEE pruning, MVV/LVA move\nRahul A R et al.\nordering, hash table, history heuristic, recursive null moves, opening book and magic bit boards. It also uses some advanced techniques like Negascout, aspiration windows, futility pruning and late move reductions [9]. Version 1.12 of this engine has been modified suitably to achieve the intended results. These modifications include:\n\u2022 Replacing the entire evaluation module with a new module which utilizes the PVTs learnt by the system\n\u2022 Adding a genetic training system with a tournament selector which is used to learn the PVTs\n\u2022 Integrating the learning and playing pipelines\n\u2022 Modifying search behavior to take advantage of the new PVT based evaluation routine\n\u2022 A tournament simulator module which is used for both fitness evaluation and testing\nFig. 5 is a flowchart which gives an overview of what is going on under the hood.\nFig. 5: Workflow\nFirst, a population of 20 players is created. The players\u2019 chromosomes are randomly initialized. At this stage, the players make random and losing moves. They are pit against each other in a round-robin tournament where each player plays at least 3 games and the results are recorded. The players get 1 point for a win, 0.5 for a draw and 0 for a loss. After the tournament is finished, the results are tabulated and these points are used as an indicator of their chromosomes\u2019 fitness level.\nMNC is used to optimize the compressed PVTs. The individuals start converging towards optimal solutions which are stored in a database of chromosomes once any of the following end conditions are me:\n\u2022 1000 generations have passed\n\u2022 The best solution remains the same for 10 or more generations\n\u2022 The rate of change in the best solution chromosome structure is below 1% for 20 or more generations\nWhen the chess engine is asked to play, it selects one from the database and re-forms PVTs from the chromosome and uses it to make moves."}, {"heading": "IV. RESULTS", "text": "The best way to test a chess engine is to make it play against other engines. This can be daunting and painfully slow if there is no common language through which the engines can communicate. In chess programming, there exist 2 protocols which are used as standards while building chess engines. They are:\n\u2022 Universal Chess Interface (UCI) \u2022 Chess Engine Communication Protocol (used in\nXBoard and WinBoard)\nUCI is more robust and is supported by most of the prominent engines today. Therefore UCI is used as the communication protocol in this implementation. More information about this protocol can be found in [10]. Many chess GUIs also are UCI compatible and hence it is easy to plug the engine into a GUI such as Arena [11] and actually see the games being played, rather than read the PGN.\nThe engine was tested against the original CuckooChess engine as it would provide a clear benchmark about any improvements achieved. A total of 1000 games were played and recorded with a time control of 3 seconds per move. The games were then analyzed using the EloStat algorithm. This algorithm calculates the Elo rating [12] of a player provided the rating of the opponent is known. The results are tabulated below.\nFig. 6: EloStat Result\nCuckooChess is rated at 2530 according to CCRL (Computer Chess Ratings List). After 1000 games, it was seen that the modified engine outperformed its parent with a rating of\nRahul A R et al.\n2546 (an increase of 19 points). This rating puts Phoenix in the \u2018International Grandmaster\u2019 category.\nEven though the increase in rating seems small, it should be noted that the rise in rating is tapered off gradually when large number of games are played with an opponent of similar strength. It can be seen that Phoenix has won 422 games compared to the 328 games won by CuckooChess. This indicates that there is a considerable increase in strength of the modified engine.\nAlso it has to be noted that the solution we obtained is not optimal. With logging of the obtained chromosomes, it can be seen that some parts of the PVTs seem random. This is because it is not possible for the algorithm to find out which mutations will help in pushing the individual in the correct direction and which do not. This results in the replacement of some good values with random ones. Therefore there is still room for improvement in the engine if mutation techniques can be enhanced."}], "references": [{"title": "Analysis of the alphabeta pruning algorithm", "author": ["S.H. Fuller", "J.G. Gaschnig", "J.J. Gillogly"], "venue": "1973.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1973}, {"title": "Depth-first iterative-deepening: An optimal admissible tree search", "author": ["R.E. Korf"], "venue": "Artificial Intelligence, vol. 27, pp. 97\u2013109, 1985.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1985}, {"title": "Training feedforward neural networks using genetic algorithms", "author": ["D.J. Montana", "L. Davis"], "venue": "BBN Systems and Technologies Corp, Tech. Rep., 1989.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1989}, {"title": "Genetic drift in genetic algorithm selection schemes", "author": ["A. Rogers", "A. Prugel-Bennett"], "venue": "IEEE Transactions on Evolutionary Computation, 1999.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1999}, {"title": "An analysis of the behavior of a class of genetic adaptive systems", "author": ["K. DeJong"], "venue": "University of Michigan, Tech. Rep., 1975.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1975}, {"title": "Multi-niche crowding in genetic algorithms and its application to the assembly of dna restrictionfragments", "author": ["W. Cedeno", "V. Rao", "T. Slezak"], "venue": "University of California, Davis, Tech. Rep., 1994.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1994}, {"title": "The principal continuation and the killer heuristic", "author": ["S. Akl", "M. Newborn"], "venue": "vol. ACM77: Proceedings of the 1977 annual conference, p. 466473, 1977.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1977}, {"title": "cuckoochess", "author": ["P. Osterlund"], "venue": "https://code.google.com/p/cuckoochess/, 2010.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "The uci protocol", "author": ["S.-M. Kahlen"], "venue": "http://wbec-ridderkerk.nl/html/ UCIProtocol.html, 2004.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2004}, {"title": "Arena chess", "author": ["M. Bloom"], "venue": "http://www.playwitharena.com/, 2002.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2002}, {"title": "Elo rating system", "author": ["A. Elo"], "venue": "http://en.wikipedia.org/wiki/Elo rating system, 1960. Rahul A R et al.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1960}], "referenceMentions": [{"referenceID": 0, "context": "With the amount of computing resources available today, these parameters when combined with fast pruning [1] and deepening [2] techniques can easily achieve IM3 if not the GM4 level.", "startOffset": 105, "endOffset": 108}, {"referenceID": 1, "context": "With the amount of computing resources available today, these parameters when combined with fast pruning [1] and deepening [2] techniques can easily achieve IM3 if not the GM4 level.", "startOffset": 123, "endOffset": 126}, {"referenceID": 2, "context": "Generally they require 5 components [3]:", "startOffset": 36, "endOffset": 39}, {"referenceID": 3, "context": "The problem with simple genetic algorithms is that it will eventually converge to one of the many global optima (if they do not get trapped in local optima) which depend on the initial population and the random genetic drift [4] occurring throughout the run.", "startOffset": 225, "endOffset": 228}, {"referenceID": 4, "context": "1) Multi-Niche Crowding: Crowding [5] is a generalization of pre-selection.", "startOffset": 34, "endOffset": 37}, {"referenceID": 4, "context": "C is called the crowding factor and a value 2 or 3 appears to work well in [5].", "startOffset": 75, "endOffset": 78}, {"referenceID": 5, "context": "The offspring could possibly have a lower fitness than the individual being replaced [6].", "startOffset": 85, "endOffset": 88}, {"referenceID": 6, "context": "ordering [7] by arranging moves in descending order of the PVT values for the destination squares.", "startOffset": 9, "endOffset": 12}, {"referenceID": 7, "context": "CuckooChess [8] is an advanced free open source chess program under the GNU General Public License written in Java by Peter Osterlund.", "startOffset": 12, "endOffset": 15}, {"referenceID": 8, "context": "More information about this protocol can be found in [10].", "startOffset": 53, "endOffset": 57}, {"referenceID": 9, "context": "Many chess GUIs also are UCI compatible and hence it is easy to plug the engine into a GUI such as Arena [11] and actually see the games being played, rather than read the PGN.", "startOffset": 105, "endOffset": 109}, {"referenceID": 10, "context": "This algorithm calculates the Elo rating [12] of a player provided the rating of the opponent is known.", "startOffset": 41, "endOffset": 45}], "year": 2017, "abstractText": "Since the advent of computers, many tasks which required humans to spend a lot of time and energy have been trivialized by the computers\u2019 ability to perform repetitive tasks extremely quickly. However there are still many areas in which humans excel in comparison with the machines. One such area is chess. Even with great advances in the speed and computational power of modern machines, Grandmasters often beat the best chess programs in the world with relative ease. This may be due to the fact that a game of chess cannot be won by pure calculation. There is more to the goodness of a chess position than some numerical value which apparently can be seen only by the human brain. Here an effort has been made to improve current chess engines by letting themselves evolve over a period of time. Firstly, the problem of learning is reduced into an optimization problem by defining Position Evaluation in terms of Positional Value Tables (PVTs). Next, the PVTs are optimized using Multi-Niche Crowding which successfully identifies the optima in a multimodal function, thereby arriving at distinctly different solutions which are close to the global optimum. Keywords\u2014Multi-Niche Crowding; Genetic Optimization; Machine Learning; Computer Chess", "creator": "LaTeX with hyperref package"}}}