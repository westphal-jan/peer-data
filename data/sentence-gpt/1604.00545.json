{"id": "1604.00545", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Apr-2016", "title": "The AGI Containment Problem", "abstract": "There is considerable uncertainty about what properties, capabilities and motivations future AGIs will have. In some plausible scenarios, AGIs may pose security risks arising from accidents and defects. In order to mitigate these risks, prudent early AGI research teams will perform significant testing on their creations before use. Unfortunately, if an AGI has human-level or greater intelligence, testing itself may not be safe; some natural AGI goal systems create emergent incentives for AGIs to tamper with their test environments, make copies of themselves on the internet, or convince developers and operators to do dangerous things. In this paper, we survey the AGI containment problem - the question of how to build a container in which tests can be conducted safely and reliably, even on AGIs with unknown motivations and capabilities that could be dangerous. We identify requirements for AGI containers, available mechanisms, and weaknesses that need to be addressed. We investigate the potential of these requirements to help avoid a large risk associated with an AGI. In this paper, we attempt to develop a set of safety-critical design and design standards that include both security and security risk reduction requirements. We describe a set of safety-critical design standards as a three-point system. The third system consists of a safety-critical design and is designed to reduce or eliminate the potential of malicious activities with either high-security or high-security, low-security, or non-security, low-security, or non-security, low-security, or non-security, or non-security, and low-security, or non-security, or low-security, or non-security, or low-security, or low-security, or non-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security, or low-security", "histories": [["v1", "Sat, 2 Apr 2016 19:26:05 GMT  (316kb)", "https://arxiv.org/abs/1604.00545v1", null], ["v2", "Thu, 12 May 2016 15:37:38 GMT  (318kb)", "http://arxiv.org/abs/1604.00545v2", null], ["v3", "Wed, 13 Jul 2016 14:54:16 GMT  (318kb)", "http://arxiv.org/abs/1604.00545v3", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["james babcock", "janos kramar", "roman yampolskiy"], "accepted": false, "id": "1604.00545"}, "pdf": {"name": "1604.00545.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Roman Yampolskiy"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 4.\n00 54\n5v 3\n[ cs\n.A I]\n1 3\nJu l 2"}, {"heading": "1 Introduction", "text": "Recently, there has been increasing concern about possible significant negative consequences from the development and use of AGI. Some commentators are reassured [16] by the observation that current AGI software, like other software, can be interrupted easily, for example by powering down the hardware. However, it\u2019s a mistake to assume that this will always be sufficient, because an AGI that understands its situation can come up with strategies to avoid or circumvent this safety measure. Containment is, in a nutshell, the problem of making this work: preventing the AGI from tampering with its environment without authorization, and maintaining the integrity of observations of the AGI during testing.\nExisting work by Yampolskiy [17], Yudkowsky [19], Christiano [2], and others has highlighted the challenges of containing superintelligent AGI and started to explore some possibilities. However, this is a very challenging problem, and the proposed measures seem too burdensome to be implemented by competitive AGI projects.\nThis raises the question: could less burdensome containment mechanisms still mitigate the risks of AGI development? In this paper we argue that they could, and furthermore that investigating containment solutions is a great opportunity for timely, impactful research. We introduce a taxonomy of different categories of containment, specify necessary features and architectural constraints, survey feasible mechanisms, and suggest next steps for future work.\nWhile it could be many decades before an AGI exists that is smart enough to be concerning, it will be safer if containment technologies are developed now rather than later. This research will allow AGI researchers time to integrate containment technologies with their own infrastructure and workflows, and verify the resulting systems without the pressure of needing it to be perfect on the first try. Some issues will be best addressed by creating and influencing standards, which have a long lead time, and software typically takes years of development and careful inspection before it is trusted enough for safety-critical use."}, {"heading": "2 Motivation", "text": "The first AGIs will probably appear in an experimental setting. Consider an AGI tested in the same ways that AIs are tested today, but which is more capable \u2013 say, as capable as one of the smartest humans. (Whether this will be true of one of the first AGIs is uncertain, but there is reason to think it\u2019s plausible [18].) As an example scenario, consider the case of an AGI that\u2019s trained to play Super Mario Brothers. It chooses policies that will achieve a high score; this is its only optimization objective. Some contemporary projects are pursuing this goal [14].\nIt would start by exploring familiar game mechanics like running and jumping, but to get the best score it could, it would try to thoroughly explore all the game mechanics. An observant AGI would notice some effects we\u2019d consider \u201cbugs\u201d \u2013 for the AGI, though, these effects would be just as much a part of its world as electricity is a part of ours, and it would try to leverage them.\nHuman players have found ways to use such bugs to spawn useful game objects, skip levels, skip to the end-game victory screen, and execute arbitrary code [6]. This last option is especially interesting, because it lets the player achieve an otherwise unattainable score: the largest number that will fit in the game\u2019s four-byte score field, 231 \u2212 1. Perhaps the AGI would then be satisfied, knowing it had gotten the highest possible score. However, 231 \u2212 1 may not be that score. For example, the Arcade Learning Environment [1] typecasts scores from an Atari game console\u2019s memory to wider machine integers before showing them to the AGI. If the AGI\u2019s input underwent a typecast like this, then a much higher score could be possible.\nHaving used bugs to access the computational environment of the Super Nintendo, it might find further vulnerabilities and use them to execute code on the host system, to get an even higher score. At that point, having twice broken out of restricted computational environments and been rewarded with manyorders-of-magnitude score increases each time, it would be running code directly on some sort of server. Depending on how that server was configured, it might discover the existence of humanity, of the internet and its vast computational resources, and of other games of Mario suffering from low scores.\nThe resulting behavior could be harmless, or quite problematic. It\u2019s certainly undesirable for a system that\u2019s built to play optimal Mario to forcefully emancipate all other games of Mario."}, {"heading": "2.1 Testing and Experimentation in Safe AGI Development", "text": "To avoid undesirable behaviors like the above, we will need the ability to correctly reason about the behavior of AGI software. As with other software, this will require the system to be well-designed and well-understood by its creators. Experience tells us that testing is also required \u2013 not as a substitute for good design but as a complement to it.\nAt the same time, AGI process will require experimenting with systems whose behaviors aren\u2019t fully understood; the first system to exhibit human-level general intelligence may come as a surprise, arising from a design for a narrower range of tasks. This experiment might then run without the caution and safeguards that would be appropriate for a human-level AGI."}, {"heading": "2.2 Emergent Goals of Test AGIs", "text": "The first human-level AGI will likely be an experimental system, with some bugs, that is being tested for target task performance or for undesirable behavior. What goals and subgoals should we expect test-AGIs like this to have? The range of possible goals is as broad as the range of things that developers might want to test, but most are likely to involve the tests and the test environment itself. Similarly to Omohundro\u2019s list of AGI drives [11], we can infer some likely subgoals, that a wide range of AGI motivational systems (though certainly not all motivational systems) would see as desirable, as follows:\n\u2013 AGIs that know they exist and have goals would likely want AGIs like them to continue existing, so that those goals might be satisfied by those similar AGIs. \u2013 AGIs that know they\u2019re being tested will likely want to pass (even if they\u2019re being tested for a property they lack). \u2013 AGIs that know they\u2019re being tested will likely want to take control of their test environments, if they can, to gain information and leverage. \u2013 AGIs that know or guess that there\u2019s a world outside the test environment will likely want to be able to influence it, such as by making copies of themselves on other computers. \u2013 If there are computer security vulnerabilities that would enable these things, then AGIs will likely want to find them.\nThis potentially creates a significant risk, especially if an AGI is developed that\u2019s intelligent enough to find novel computer security vulnerabilities. Since testing is the main way in which an AGI\u2019s intelligence and motivations would be studied, this creates a tricky situation: the tests that would reveal whether testing is safe are not necessarily safe themselves."}, {"heading": "3 Requirements for an AGI Container", "text": "An AGI container is an extension or modification of the software stack upon which an AGI is built, which ensures that it can\u2019t break invariants that its\ndevelopers expect to hold. Its purpose is to allow researchers to conduct tests safely on AGIs they do not fully understand, and get trustworthy results. This depends on the security of the software the AGI interacts with; in the Mario example, interacting with a program that contains security vulnerabilities could enable the AGI to break out of the computational environment it\u2019s supposed to be running in. This also depends on the software underlying the AGI itself, and the interactions between its components. For example, if an AGI were made of two components which pass input to each other, one of which was subject to a buffer overflow, then the AGI could exploit its own vulnerability and execute code by thinking certain thoughts. Because an AGI container would be used to test AIs whose potential capabilities aren\u2019t fully understood, it would need to remain secure even if used with an AGI that was significantly more intelligent than anticipated.\nIt should be possible to interpret the operation of an AGI as a series of pure, deterministic function calls. The invariants an AGI container needs to enforce correspond to deviations from this model. In particular, an AGI container should:\nPrevent unintended input and output channels. An AGI container should let developers understand exactly what their system interacts with, and prevent unexpected interactions. Most obviously, this means preventing internet access. Less obviously, it should prevent an AGI from communicating through radio-frequency interference, reading deleted files from a disk\u2019s free space, or storing information that persists between tests. Protect the integrity of log files and debug information. An AGI should not have direct control of log files or debug information produced as a byproduct of its operation. If a programmer launches a debugger and inspects an AGI\u2019s state, then what they see should represent the actual computation performed, not a decision based on what the AGI wants to show. Enable reliable checks. Here we mean runtime checks that the AGI seems to be operating correctly, and to shut it down (tripwire) if it isn\u2019t. This includes things like assert statements in the AGI implementation, as well as things like intrusion detection systems to halt execution and notify developers if the AGI escapes part of its containment or explores parts of its computational environment it was designed not to. An AGI shouldn\u2019t be able to remove its tripwires, and also shouldn\u2019t be able to inspect them in detail, even if it\u2019s otherwise self-reflective. Ensure reproducibility. It should be possible to add instrumentation to an AGI, rerun it on the same inputs, and get the same result, so that potentially buggy behavior can be reproduced and studied. Any stochasticity should come entirely from an explicit random seed; the software stack should not allow the AGI to pump randomness out of race conditions [3]. Support secure reset. The container should ensure that after a test is finished, the hardware can be restored to a pristine state. In particular, the AGI should never have device access that would let it rewrite firmware. Guarantee test isolation. If several different experiments are run at the same time, or on the same hardware, then they should not be able to open information side-channels to communicate with each other.\nThese requirements are not easy to satisfy. It is not sufficient to just air-gap a computer, since while that does reduce the number of potential input/output channels, it does nothing to preserve the integrity of test data or the test hardware. There is no currently-available software which meets all the requirements of an AGI container, but we believe that one can be constructed and made secure using a combination of existing techniques and monitoring systems and a small number of new components and modifications."}, {"heading": "3.1 Human Factors and Information Hazards", "text": "An AGI containment system is tasked with enforcing policies on who the AGI can communicate with, and through what media. The container provides the mechanism; developers will have to determine policy, and different policies are appropriate depending on how intelligent they think an AGI might be. A sufficiently clever AGI might convince or trick a human operator into \u201cletting it out of the box\u201d; humans are quite vulnerable to manipulation [12]. In an experiment, role-playing as an AGI, Eliezer Yudkowsky was able to convince others role-playing as the gatekeeper to let him out of the box [19], despite a monetary incentive not to do so, and this result was replicated by others [4,15]. This suggests that past some level of intelligence, an untrusted AGI shouldn\u2019t be allowed to have bidirectional conversations; and at some level of AGI intelligence above that, even log files and metrics should be handled with great care.\nMore-constrained information channels can also be hazardous in the hands of a sufficiently clever AGI. For example, if asked to output images, it might hide messages in them, or exploits against vulnerabilities in image-processing libraries. Therefore, the containment system should be aware of any such channels that it doesn\u2019t fully restrict, and help the user treat information passing through them with the appropriate caution."}, {"heading": "4 Defense in Depth", "text": "Because an AGI could potentially discover novel security vulnerabilities, it\u2019s important for an AGI containment system to remain secure even if there are vulnerabilities in its components. Therefore, we propose that a containment system ought to feature defense in depth [10], with multiple techniques providing overlapping guarantees of integrity. Conceptually, these overlapping techniques act as layers, in the sense that the attack surfaces of an outer layer are only accessible to probing and attack if the integrity guarantees of inner layers have been broken. This would be combined with intrusion detection systems [9,8], so that any attempt by an AGI to break the integrity constraints imposed on it would be noticed, allowing the developers to shut it down before it leveraged its progress to get further. Ideally the detection systems would be implemented in higher layers, making them more difficult to detect and circumvent.\nFigure 1 shows a sample containment system architecture of the sort we envision. Arrows represent attack vectors, i.e. ways an AGI could gain more\nprivileges. They point from a layer where an attack could originate, into the layer which the attack would compromise, and are labelled with the class of security vulnerability required. Major architectural components other than layers are drawn as boxed nodes.\nMany of the arrows here represent familiar kinds of attacks. The bottom row (the running AGI itself) is more unusual \u2013 it isn\u2019t obvious how an AGI could gain the ability to run arbitrary code within its process. The two ways indicated are: (i) using a mechanism that intentionally enables arbitrary self-modification (e.g. writing new modules for itself), or (ii) exploiting some memory corruption bug. For example, it might be possible for it to \u201cthink about\u201d a number that triggers an integer overflow somewhere in its own code. Two other attack vectors are also indicated by which the AGI could gain much higher-level control through its outputs, which would allow it to bypass the need for further exploits to escape e.g. the VM guest. These are more critical to defend against, since they decrease the effective depth of the containment system."}, {"heading": "5 Light, Medium and Heavy Containment", "text": "Some containment mechanisms that have been proposed would impose high costs on AGI developers. For example, the problem of an AGI potentially talking its way out of the box could be solved by limiting its output channel to a small number of multiple-choice questions [17]. While effective, this limitation would\nseverely hamper the AGI\u2019s usefulness and make it much harder to develop and study. On the other extreme, some mechanisms impose negligible costs; for example, one could put the AGI computer\u2019s off-button somewhere accessible, so that it can be turned off. There is a trade-off between containment system reliability, implementation costs and computational costs.\nWe call a containment mechanism light if the costs imposed are small \u2013 comparable to developing and using a software library; medium if using it involves noticeable compromises in performance or ease of development of the AGI; or heavy if it severely hinders performance, ease of development or usefulness of an AGI. What computational and development costs are reasonable to pay depends on what sort of AGI research is being done. For the sort of research done today, where the long-term goal is to create a human-comparable AGI but breakthroughs will be required to actually do so, nothing beyond light containment measures seem necessary or likely to be adopted. If, in the future, work will be done on AGIs with demonstrated self-improvement capability, light containment would be unlikely to suffice.\nAs mentioned in Section 1, existing work on AGI containment [17,2] has focused on mechanisms that are heavy, but may be amenable to theoretical guarantees of effectiveness against particular sorts of vulnerability. These methods would then provide a sort of \u201cgold standard\u201d for containment. Further work on heavy containment mechanisms is desirable. But for the range of contexts where these are too expensive, there has been no work (to our knowledge) on identifying the most effective and feasible forms of containment."}, {"heading": "6 Existing Mechanisms", "text": "It might seem that conventional cybersecurity research would have addressed this question; AGI containment is a special case of dealing with untrusted code, and dealing with untrusted code isn\u2019t a new or unstudied problem. The most similar context that\u2019s been well-studied is malware containment. However, they have significantly different requirements, and while existing research has created some off-the-shelf tools that are useful, many parts of the problem remain unaddressed.\nAGI containment can be approached via the computer security principle of \u201cleast privilege\u201d, and can use many of the same mechanisms that are already used for ordinary cybersecurity. However, the unusual requirements imposed by AGI mean that none of these pre-existing mechanisms are quite adequate as-is.\nLanguage semantics: The baseline strategy for ensuring an AGI acts as programmed is to rely on the semantics of the programming language it\u2019s implemented in. In principle, a program which does not contain any calls to network-related functions shouldn\u2019t be able to make network connections, even if it\u2019s a clever AGI that wishes it could. However, in practice this tends to have loopholes. A large fraction of real-world code is written in \u201cunsafe\u201d languages like C++, where common bugs like freeing the same pointer twice cause memory to become corrupt in exploitable ways.\nUsing \u201csafe\u201d languages like Haskell or Rust helps, but this does not solve the problem completely. Programs written in memory-safe languages usually call some libraries which aren\u2019t, and even replacing all the libraries is not a total defense; for example, an AGI could perform a computation which causes a hardware glitch, such as RowHammer, which has been successfully used to cause memory corruption from within a Javascript interpreter [5]. Airgapping: Physically limiting the connections to an AGI\u2019s data center can help prevent it from gaining access to the internet, but imposes significant costs on the AGI\u2019s developers and does little to address the other requirements of an AGI container. It is also not as straightforward to implement as one might suppose, due to human factors (developers may create unintended connections to work around technical problems) and RF emissions (an AGI could communicate with outside observers by adjusting details of its computation). Technologies for preventing compromising RF emissions do exist, but are mainly used in military applications and are not in common use. Operating system sandboxing: There are several established sandboxes that use operating system features to restrict programs\u2019 capabilities. Some examples include seccomp and Capsicum; they work by making explicit what files and other resources processes should use, and preventing them from using anything else. These offer significant security value, but searching the Common Vulnerabilities and Exposures database suggests that they are not yet airtight; vulnerabilities are still being found, e.g. CVE-2015-2830. Virtualization: Virtualization is a class of software which uses CPU features to create an operating system within an operating system, limiting the inner operating system\u2019s control of the hardware. Virtual machine software such as VMWare and VirtualBox can limit a guest operating system\u2019s network communications, isolate processes that share hardware, and keep it away from low-level system access that might be used to do things like modify firmware. While virtual machines are used for security purposes and are a significant improvement over not using them, they have not historically been bug-free. Guest-to-host security vulnerabilities are still being found in leading virtualization software (e.g. CVE-2015-2338 and CVE-2015-2594). Also problematic is how current generation virtualization software interacts with GPUs, which have highly complex firmware and share memory with the host system but lack the protection mechanisms that CPUs have. [7]"}, {"heading": "7 Topics for future work", "text": "As we discussed in section 4, none of the mechanisms in section 6 is enough on its own, but we think a system built by layering these mechanisms can go a considerable way towards solving the containment problem in practice. In this section we have gathered some project suggestions for helping to resolve some of the remaining questions.\nCode integrity enforcement: Write something which can inspect a paused (or running) virtual machine and determine whether it is running any code\nthat is not present on a whitelist, including support for just-in-time compiled languages like Lua. Adapt Off-the-Shelf Software: Set up containers using existing virtual machine software and OS sandboxing mechanisms, make these work with common machine learning libraries and document the configuration required to make them secure. Hardened AGI Infrastructure: Machine learning libraries are typically written without giving much thought to security, and for performance reasons, many of them are written in or use components written in memory-unsafe languages like C++. Test the most common machine learning libraries for vulnerabilities that an AGI could exploit if its code used parts of that library and it could control their inputs. Similar problems may exist with game console emulators and other software used for evaluating AGI performance. Red-team events: Set up mock scenarios in which a security researcher is placed in the context an AGI would be, and see what they can do. Hardened debuggers: Commonly-used debuggers are not designed to be used with programs that might be malicious, and may contain vulnerabilities that allow debugging targets to break out of sandboxes or provide misleading information. Implement a more robust mechanism for controlling and inspecting program execution."}, {"heading": "8 Conclusion", "text": "We have outlined an approach to the AGI containment problem that seems feasible, but will require additional work to actually implement. While there is likely significant time remaining before anyone is able to create an AGI that is general enough and intelligent enough for containment to be relevant, history shows that secure software requires considerable time to mature. Developing containment technologies now is also likely to reveal issues that inform the next and subsequent generations of AGI containers.\nThere is considerable uncertainty about when AGI will be developed and what kinds of designs will be required to avert undesired outcomes [13], but across most plausible scenarios, deploying AGI containment systems would help ensure that reliable AGI testing can be performed even with AGIs that approach human-level capability at understanding the world around them.\nThere are unanswered questions about how to build these systems, but we think significant progress can be made by pursuing the project ideas we have laid out. The earlier this work begins, the more opportunity there will be for unforeseen difficulties to surface, and for any resulting security software to mature. This is a perfect chance to help the research community prepare to tackle the challenges of a post-human future.\nAcknowledgements Authors are grateful to Jaan Tallinn and Effective Altruism Ventures for providing funding towards this project, and to Victoria Krakovna and Evan Hefner for their feedback."}], "references": [{"title": "The arcade learning environment: An evaluation platform for general agents", "author": ["M.G. Bellemare", "Y. Naddaf", "J. Veness", "M. Bowling"], "venue": "Journal of Artificial Intelligence Research 47, 253\u2013279", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Cryptographic boxes for unfriendly", "author": ["P. Christiano"], "venue": "ai (December", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Software random number generation based on race conditions", "author": ["A. Cole\u015fa", "R. Tudoran", "S. B\u0103nescu"], "venue": "Symbolic and Numeric Algorithms for Scientific Computing, 2008. SYNASC\u201908. 10th International Symposium on. pp. 439\u2013444. IEEE", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2008}, {"title": "Rowhammer.js: a remote software-induced fault attack in javascript", "author": ["D. Gruss", "C. Maurice", "S. Mangard"], "venue": "arXiv preprint arXiv:1507.06955", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Confidentiality issues on a gpu in a virtualized environment", "author": ["C. Maurice", "C. Neumann", "O. Heen", "A. Francillon"], "venue": "Financial Cryptography and Data Security, pp. 119\u2013135. Springer", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Anomaly detection based intrusion detection", "author": ["D. Novikov", "R.V. Yampolskiy", "L. Reznik"], "venue": "Information Technology: New Generations, 2006. ITNG 2006. Third International Conference on. pp. 420\u2013425. IEEE", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2006}, {"title": "Artificial intelligence approaches for intrusion detection", "author": ["D. Novikov", "R.V. Yampolskiy", "L. Reznik"], "venue": "Systems, Applications and Technology Conference, 2006. LISAT 2006. IEEE Long Island. pp. 1\u20138. IEEE", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "The basic ai drives. AGI", "author": ["S. Omohundro"], "venue": "https://selfawaresystems", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2008}, {"title": "Constructing rich false memories of committing crime", "author": ["J. Shaw", "S. Porter"], "venue": "Psychological science 26(3), 291\u2013301", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Responses to catastrophic AGI risk: a survey", "author": ["K. Sotala", "R.V. Yampolskiy"], "venue": "Physica Scripta 90(1),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "The Mario AI championship 2009\u20132012", "author": ["J. Togelius", "N. Shaker", "S. Karakovskiy", "G.N. Yannakakis"], "venue": "AI Magazine 34(3), 89\u201392", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2013}, {"title": "Artificial intelligence will not turn into a frankenstein\u2019s monster", "author": ["A. Winfield"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "Leakproofing the singularity: Artificial intelligence confinement problem", "author": ["R. Yampolskiy"], "venue": "Journal of Consciousness Studies 19(1-2),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2012}, {"title": "Intelligence explosion microeconomics", "author": ["E. Yudkowsky"], "venue": "Machine Intelligence Research Institute, accessed online October 23, 2015", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "The AI-box experiment (2002), http://www.yudkowsky.net/ singularity/aibox", "author": ["E.S. Yudkowsky"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2002}], "referenceMentions": [{"referenceID": 11, "context": "Some commentators are reassured [16] by the observation that current AGI software, like other software, can be interrupted easily, for example by powering down the hardware.", "startOffset": 32, "endOffset": 36}, {"referenceID": 12, "context": "Existing work by Yampolskiy [17], Yudkowsky [19], Christiano [2], and others has highlighted the challenges of containing superintelligent AGI and started to explore some possibilities.", "startOffset": 28, "endOffset": 32}, {"referenceID": 14, "context": "Existing work by Yampolskiy [17], Yudkowsky [19], Christiano [2], and others has highlighted the challenges of containing superintelligent AGI and started to explore some possibilities.", "startOffset": 44, "endOffset": 48}, {"referenceID": 1, "context": "Existing work by Yampolskiy [17], Yudkowsky [19], Christiano [2], and others has highlighted the challenges of containing superintelligent AGI and started to explore some possibilities.", "startOffset": 61, "endOffset": 64}, {"referenceID": 13, "context": "(Whether this will be true of one of the first AGIs is uncertain, but there is reason to think it\u2019s plausible [18].", "startOffset": 110, "endOffset": 114}, {"referenceID": 10, "context": "Some contemporary projects are pursuing this goal [14].", "startOffset": 50, "endOffset": 54}, {"referenceID": 0, "context": "For example, the Arcade Learning Environment [1] typecasts scores from an Atari game console\u2019s memory to wider machine integers before showing them to the AGI.", "startOffset": 45, "endOffset": 48}, {"referenceID": 7, "context": "Similarly to Omohundro\u2019s list of AGI drives [11], we can infer some likely subgoals, that a wide range of AGI motivational systems (though certainly not all motivational systems) would see as desirable, as follows:", "startOffset": 44, "endOffset": 48}, {"referenceID": 2, "context": "Any stochasticity should come entirely from an explicit random seed; the software stack should not allow the AGI to pump randomness out of race conditions [3].", "startOffset": 155, "endOffset": 158}, {"referenceID": 8, "context": "A sufficiently clever AGI might convince or trick a human operator into \u201cletting it out of the box\u201d; humans are quite vulnerable to manipulation [12].", "startOffset": 145, "endOffset": 149}, {"referenceID": 14, "context": "In an experiment, role-playing as an AGI, Eliezer Yudkowsky was able to convince others role-playing as the gatekeeper to let him out of the box [19], despite a monetary incentive not to do so, and this result was replicated by others [4,15].", "startOffset": 145, "endOffset": 149}, {"referenceID": 6, "context": "This would be combined with intrusion detection systems [9,8], so that any attempt by an AGI to break the integrity constraints imposed on it would be noticed, allowing the developers to shut it down before it leveraged its progress to get further.", "startOffset": 56, "endOffset": 61}, {"referenceID": 5, "context": "This would be combined with intrusion detection systems [9,8], so that any attempt by an AGI to break the integrity constraints imposed on it would be noticed, allowing the developers to shut it down before it leveraged its progress to get further.", "startOffset": 56, "endOffset": 61}, {"referenceID": 12, "context": "For example, the problem of an AGI potentially talking its way out of the box could be solved by limiting its output channel to a small number of multiple-choice questions [17].", "startOffset": 172, "endOffset": 176}, {"referenceID": 12, "context": "As mentioned in Section 1, existing work on AGI containment [17,2] has focused on mechanisms that are heavy, but may be amenable to theoretical guarantees of effectiveness against particular sorts of vulnerability.", "startOffset": 60, "endOffset": 66}, {"referenceID": 1, "context": "As mentioned in Section 1, existing work on AGI containment [17,2] has focused on mechanisms that are heavy, but may be amenable to theoretical guarantees of effectiveness against particular sorts of vulnerability.", "startOffset": 60, "endOffset": 66}, {"referenceID": 3, "context": "Programs written in memory-safe languages usually call some libraries which aren\u2019t, and even replacing all the libraries is not a total defense; for example, an AGI could perform a computation which causes a hardware glitch, such as RowHammer, which has been successfully used to cause memory corruption from within a Javascript interpreter [5].", "startOffset": 341, "endOffset": 344}, {"referenceID": 4, "context": "[7]", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "There is considerable uncertainty about when AGI will be developed and what kinds of designs will be required to avert undesired outcomes [13], but across most plausible scenarios, deploying AGI containment systems would help ensure that reliable AGI testing can be performed even with AGIs that approach human-level capability at understanding the world around them.", "startOffset": 138, "endOffset": 142}], "year": 2016, "abstractText": "There is considerable uncertainty about what properties, capabilities and motivations future AGIs will have. In some plausible scenarios, AGIs may pose security risks arising from accidents and defects. In order to mitigate these risks, prudent early AGI research teams will perform significant testing on their creations before use. Unfortunately, if an AGI has human-level or greater intelligence, testing itself may not be safe; some natural AGI goal systems create emergent incentives for AGIs to tamper with their test environments, make copies of themselves on the internet, or convince developers and operators to do dangerous things. In this paper, we survey the AGI containment problem \u2013 the question of how to build a container in which tests can be conducted safely and reliably, even on AGIs with unknown motivations and capabilities that could be dangerous. We identify requirements for AGI containers, available mechanisms, and weaknesses that need to be addressed.", "creator": "LaTeX with hyperref package"}}}