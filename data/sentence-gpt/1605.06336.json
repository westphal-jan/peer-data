{"id": "1605.06336", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-May-2016", "title": "Unsupervised Feature Extraction by Time-Contrastive Learning and Nonlinear ICA", "abstract": "Nonlinear independent component analysis (ICA) provides an appealing framework for unsupervised feature learning, but the models proposed so far are not identifiable. Here, we first propose a new intuitive principle of unsupervised deep learning from time series which uses the nonstationary structure of the data. Our learning principle, time-contrastive learning (TCL), finds a representation which allows optimal discrimination of time segments (windows) using the linear correlation between the two. This method of unsupervised hierarchical learning allows the optimization of time segments by estimating the probability of a feature being nonstationary, and then using an arbitrary linear relationship to mean (i.e., the distribution of the number of points) for the given fixed time segment. Finally, we propose the ability to easily distinguish the distribution of a variable by its position in the graph (Fig. 2 ).\n\n\n\n\n\n\nWe first proposed a method of unsupervised hierarchical learning that requires uniform data distribution to fit the given set of different data sets. We also propose an alternative approach for unsupervised hierarchical learning using the linear correlation method (see Figure 1 ). This method of unsupervised hierarchical learning uses linear correlation to identify all time segments. We present a technique that allows a generalised approach for unsupervised hierarchical learning using the linear correlation method (see Figure 2 ).\n\nIn a similar way, we apply the linear correlation approach to unsupervised hierarchical learning using the linear correlation method (see Figure 2 ).\n\nTo reduce complexity and decrease the need for unsupervised hierarchical learning, we apply the linear correlation method to all time segments. For example, a standard example in C++ and C++ is for a number of times a variable may be unsupervised but no time segment is unsupervised. This method has a relatively high probability of finding the same variable in all of the time segments.\nWe first propose an alternative approach to unsupervised hierarchical learning using the linear correlation method (see Figure 1 ).\nIn the present paper, we explore how unsupervised hierarchical learning is done by unsupervised hierarchical learning by using the linear correlation method (see Figure 1 ).\nIn addition to a few of the other techniques of unsupervised hierarchical learning (which are based on linear correlation) we propose a solution to unsupervised hierarchical learning using the linear correlation method (see Figure 1 ).\nWe present a method that requires uniform data distribution to fit the given set of different data sets. We also propose an alternative approach to unsupervised hierarchical learning", "histories": [["v1", "Fri, 20 May 2016 12:59:22 GMT  (1287kb,D)", "http://arxiv.org/abs/1605.06336v1", null]], "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["aapo hyv\u00e4rinen", "hiroshi morioka"], "accepted": true, "id": "1605.06336"}, "pdf": {"name": "1605.06336.pdf", "metadata": {"source": "CRF", "title": "Unsupervised Feature Extraction by Time-Contrastive Learning and Nonlinear ICA", "authors": ["Aapo Hyv\u00e4rinen"], "emails": [], "sections": [{"heading": null, "text": "Nonlinear independent component analysis (ICA) provides an appealing framework for unsupervised feature learning, but the models proposed so far are not identifiable. Here, we first propose a new intuitive principle of unsupervised deep learning from time series which uses the nonstationary structure of the data. Our learning principle, time-contrastive learning (TCL), finds a representation which allows optimal discrimination of time segments (windows). Surprisingly, we show how TCL can be related to a nonlinear ICA model, when ICA is redefined to include temporal nonstationarities. In particular, we show that TCL combined with linear ICA estimates the nonlinear ICA model up to point-wise transformations of the sources, and this solution is unique \u2014 thus providing the first identifiability result for nonlinear ICA which is rigorous, constructive, as well as very general."}, {"heading": "1 Introduction", "text": "Unsupervised nonlinear feature learning, or unsupervised representation learning, is one of the biggest challenges facing machine learning. Various approaches have been proposed, many of them in the deep learning framework. Some of the most popular methods are multi-layer belief nets and Restricted Boltzmann Machines [13] as well as autoencoders [14, 31, 21], which form the basis for the ladder networks [30]. While some success has been obtained, the general consensus is that the existing methods are lacking in scalability, theoretical justification, or both; more work is urgently needed to make machine learning applicable to big unlabeled data.\nBetter methods may be found by using the temporal structure in time series data. One approach which has shown a great promise recently is based on a set of methods variously called temporal coherence [17] or slow feature analysis [32]. The idea is to find features which change as slowly as possible, originally proposed in [6]. Kernel-based methods [12, 26] and deep learning methods [23, 27, 9] have been developed to extend this principle to the general nonlinear case. However, it is not clear how one should optimally define the temporal stability criterion; these methods typically use heuristic criteria and are not based on generative models.\nIn fact, the most satisfactory solution for unsupervised deep learning would arguably be based on estimation of probabilistic generative models, because probabilistic theory often gives optimal objectives for learning. This has been possible in linear unsupervised learning, where sparse coding and independent component analysis (ICA) use independent, typically sparse, latent variables that generate the data via a linear mixing. Unfortunately, at least without temporal structure, the nonlinear ICA model is seriously unidentifiable [18], which means that the original sources cannot be found. In spite of years of research [20], no generally applicable identifiability conditions have been found. Nevertheless, practical algorithms have been proposed [29, 1, 5] with the hope that some kind of useful solution can still be found even for i.i.d. data.\nar X\niv :1\n60 5.\n06 33\n6v 1\n[ st\nat .M\nL ]\n2 0\nM ay\nHere, we combine a new heuristic principle for analysing temporal structure with a rigorous treatment of a nonlinear ICA model, leading to a new identifiability proof. The structure of our theory is illustrated in Figure 1.\nFirst, we propose to learn features using the (temporal) nonstationarity of the data. The idea is that the learned features should enable discrimination between different time windows; in other words, we search for features that provide maximal information on which part of the time series a given data point comes from. This provides a new, intuitively appealing method for feature extraction, which we call time-contrastive learning (TCL).\nSecond, we formulate a generative model in which independent components have different distributions in different time windows, and we observe nonlinear mixtures of the components. While a special case of this principle, using nonstationary variances, has been very successfully used in linear ICA [22], our extension to the nonlinear case is completely new. Such nonstationarity of variances seems to be prominent in many kinds of data, for example EEG/MEG [2], natural video [17], and closely related to changes in volatility in financial time series; but we further generalize the nonstationarity to modulated exponential families.\nFinally, we show that as a special case, TCL estimates the nonlinear part of the nonlinear ICA model, leaving only a simple linear mixing to be determined by linear ICA, and a final indeterminacy in terms of a component-wise nonlinearity similar to squaring. For modulated Gaussian sources, even the squaring can be removed and we have \u201cfull\u201d identifiability. This gives the very first identifiability proof for a high-dimensional, nonlinear, ICA mixing model \u2014 together with a practical method for its estimation."}, {"heading": "2 Time-contrastive learning", "text": "TCL is a method to train a feature extractor by using a multinomial logistic regression (MLR) classifier which aims to discriminate all segments (time windows) in a time series, given the segment indices as the labels of the data points. In more detail, TCL proceeds as follows:\n1. Divide a multivariate time series xt into segments, i.e. time windows, indexed by \u03c4 = 1, . . . , T . Any temporal segmentation method can be used, e.g. simple equal-sized bins. 2. Associate each data point with the corresponding segment index \u03c4 in which the data point is contained; i.e. the data points in the segment \u03c4 are all given the same segment label \u03c4 .\n3. Learn a feature extractor h(xt;\u03b8) together with an MLR with a linear regression function wT\u03c4 h(xt;\u03b8) + b\u03c4 to classify all data points with the corresponding segment labels \u03c4 defined above used as class labels Ct. (For example, by ordinary deep learning with h(xt;\u03b8) being outputs in the last hidden layer and \u03b8 being network weights.)\nThe purpose of the feature extractor is to extract a feature vector that enables the MLR to discriminate the segments. Therefore, it seems intuitively clear that the feature extractor needs to learn a useful representation of the temporal structure of the data, in particular the differences of the distributions across segments. Thus, we are effectively using a classification method (MLR) to accomplish unsupervised learning. Methods such as noise-contrastive estimation [11] and generative adversarial nets [8], see also [10], are similar in spirit, but clearly distinct from TCL which uses the temporal structure of the data by contrasting different time segments.\nIn practice, the feature extractor needs to be capable of approximating a general nonlinear relationship between the data points and the log-odds of the classes, and it must be easy to learn from data simultaneously with the MLR. To satisfy these requirements, we use here a multilayer perceptron (MLP) as the feature extractor. Essentially, we use ordinary MLP/MLR training according to very well-known neural network theory, with the last hidden layer working as the feature extractor. Note that the MLR is only used as an instrument for training the feature extractor, and has no practical meaning after the training."}, {"heading": "3 TCL as approximator of log-pdf ratios", "text": "We next show how the combination of the optimally discriminative feature extractor and MLR learns to model the nonstationary log-pdf\u2019s of the data. The posterior over classes for one data point xt in the multinomial logistic regression of TCL is given by well-known theory as\np(Ct = \u03c4 |xt;\u03b8,W,b) = exp(wT\u03c4 h(xt;\u03b8) + b\u03c4 ) 1 + \u2211T j=2 exp(w T j h(xt;\u03b8) + bj)\n(1)\nwhere Ct is a class label of the data at time t, xt is the n-dimensional data point at time t, \u03b8 is the parameter vector of the m-dimensional feature extractor (neural network) h, W = [w1, . . . ,wT ] \u2208 Rm\u00d7T , and b = [b1, . . . , bT ]T are the weight and bias parameters of the MLR. We fixed the elements of w1 and b1 to zero to avoid the well-known indeterminacy of the softmax function.\nOn the other hand, the true posteriors of the segment labels can be written, by the Bayes rule, as\np(Ct = \u03c4 |xt) = p\u03c4 (xt)p(Ct = \u03c4)\u2211T j=1 pj(xt)p(Ct = j) , (2)\nwhere p(Ct = \u03c4) is a prior distribution of the segment label \u03c4 , and p\u03c4 (xt) = p(xt|Ct = \u03c4). Assume that the feature extractor has a universal approximation capacity, and that the amount of data is infinite, so that the MLR converges to the optimal classifier. Then, we will have equality between the model posterior Eq. (1) and the true posterior in Eq. (2) for all \u03c4 . Well-known developments, intuitively based on equating the numerators in those equations and taking the pivot into account, lead to the relationship\nwT\u03c4 h(xt;\u03b8) + b\u03c4 = log p\u03c4 (xt)\u2212 log p1(xt) + log p(Ct = \u03c4)\np(Ct = 1) , (3)\nwhere last term on the right-hand side is zero if the segments have equal prior probability (i.e. equal length). In other words, what the feature extractor computes after TCL training (under optimal conditions) is the log-pdf of the data point in each segment (relative to that in the first segment which was chosen as pivot above). This gives a clear probabilistic interpretation of the intuitive principle of TCL, and will be used below to show its connection to nonlinear ICA."}, {"heading": "4 Nonlinear nonstationary ICA model", "text": "In this section, seemingly unrelated to the preceding section, we define a probabilistic generative model; the connection will be explained in the next section. We assume, as typical in nonlinear ICA,\nthat the observed multivariate time series xt is a smooth and invertible nonlinear mixture of a vector of source signals st = (s1(t), . . . , sn(t)); in other words:\nxt = f(st). (4)\nThe components si(t) in st are assumed mutually independent over i (but not over time t). The crucial question is how to define a suitable model for the sources, which is general enough while allowing strong identifiability results.\nHere, we start with the fundamental principle that the source signals si(t) are nonstationary. For example, the variances (or similar scaling coefficients) could be changing as proposed earlier in the linear case [22, 24, 16]. We generalize that idea and propose a generative model for nonstationary sources based on the exponential family. Merely for mathematical convenience, we assume that the nonstationarity is much slower than the sampling rate, so the time series can be divided into segments in each of which the distribution is approximately constant (but the distribution is different in different segments). The probability density function (pdf) of the source signal with index i in the segment \u03c4 is then defined as:\nlog p\u03c4 (si) = qi,0(si) + V\u2211 v=1 \u03bbi,v(\u03c4)qi,v(si)\u2212 logZ(\u03bbi,1(\u03c4), . . . , \u03bbi,v(\u03c4)) (5)\nwhere qi,0 is a \u201cstationary baseline\u201d log-pdf of the source, and the qi,v, v \u2265 1 are nonlinear scalar functions defining the exponential family for source i. The essential point is that the parameters \u03bbi,v(\u03c4) of the source i depend on the segment index \u03c4 , which creates nonstationarity. The normalization constant Z is needed in principle although it disappears in all our proofs below.\nA simple example would be obtained by setting qi,0 = 0, V = 1, i.e., using a single modulated function qi,1 with qi,1(si) = \u2212s2i /2 which means that the variance of a Gaussian source is modulated, or qi,1(si) = \u2212|si|, a modulated Laplacian source. Another interesting option might be to use two ReLU-like nonlinearities qi,1(si) = max(si, 0) and qi,2(si) = max(\u2212si, 0) to model both changes in scale (variance) and location (mean). Yet another option is to use a Gaussian baseline qi,0(si) = \u2212s2i /2 with a nonquadratic function qi,1. Our definition thus generalizes the linear model [22, 24, 16] to the nonlinear case, as well as to very general modulated non-Gaussian densities by allowing qi,v to be non-quadratic and using more than one qi,v per source (i.e. we can have V > 1). Note that our principle of nonstationarity is clearly distinct from the principle of linear autocorrelations previously used in the nonlinear case [12, 26]; also, some authors prefer to use the term blind source separation (BSS) for generative models with temporal structure."}, {"heading": "5 Solving nonlinear ICA by TCL", "text": "Now we consider the case where TCL as defined in Section 2 is applied on data generated by the nonlinear ICA model in Section 4. We refer again to Figure 1 which illustrates the total system. For simplicity, we consider the case qi,0 = 0, V = 1, i.e. the exponential family has a single modulated function qi,1 per source, and this function is the same for all sources; we will discuss the general case separately below. The modulated function will be simply denoted by q := qi,1 in the following.\nFirst, we show that the nonlinear functions q(si), i = 1, . . . , n, of the sources can be obtained as unknown linear transformations of the outputs of the feature extractor hi trained by the TCL:\nTheorem 1. Assume the following: A1. We observe data which is obtained by generating sources according to (5), and mixing them\nas in (4) with a smooth invertible f . For simplicity, we assume only a single function defining the exponential family, i.e. qi,0 = 0, V = 1 and q := qi,1 as explained above.\nA2. We apply TCL on the data so that the dimension of the feature extractor h is equal to the dimension of the data vector xt, i.e., m = n.\nA3. The modulation parameter matrix L with elements [L]\u03c4,i = \u03bbi,1(\u03c4) \u2212 \u03bbi,1(1), \u03c4 = 1, . . . , T ; i = 1, . . . , n has full column rank n. (Intuitively speaking, the variances of the independent components are modulated sufficiently independently of each other.)\nThen, after learning the parameter vector \u03b8, the outputs of the feature extractor are equal to q(s) = (q(s1), q(s2), . . . , q(sn)) T up to an invertible linear transformation. In other words,\nq(st) = Ah(xt;\u03b8) + d (6)\nfor some constant invertible matrix A \u2208 Rn\u00d7n and a constant vector d \u2208 Rn.\nSketch of proof : (see supplementary material for full proof) The basic idea is that after convergence we must have equality between the model of the log-pdf in each segment given by TCL in Eq. (3) and that given by nonlinear ICA, obtained by summing the RHS of Eq. (5) over i:\nwT\u03c4 h(xt;\u03b8)\u2212 k1(xt) = n\u2211 i=1 \u03bbi,1(\u03c4)q(si)\u2212 k2(\u03c4) (7)\nwhere k1 does not depend on \u03c4 , and k2(\u03c4) does not depend on x or s. We see that the functions hi(x) and q(si) must span the same linear subspace. (TCL looks at differences of log-pdf\u2019s, introducing k1(xt), but this does not actually change the subspace). This implies that the q(si) must be equal to some invertible linear transformation of h(x;\u03b8) and a constant bias term, which gives (6).\nTo further estimate the linear transformation A in (6), we can simply use linear ICA: Corollary 1. The estimation (identification) of the q(si) can be performed by first performing TCL, and then linear ICA on the hidden representation h(x).\nProof: We only need to combine the well-known identifiability proof of linear ICA [3] with Theorem 1, noting that the quantities q(si) are independent, and since q has a strict upper bound (which is necessary for integrability), q(si) must be non-Gaussian.\nIn general, TCL followed by linear ICA does not allow us to exactly recover the independent components because the function q(\u00b7) can hardly be invertible, typically being something like squaring or absolute values. However, for a specific class of q including the modulated Gaussian family, we can prove a stricter form of identifiability. Slightly counterintuitively, we can recover the signs of the si, since we also know the corresponding x and the transformation is invertible: Corollary 2. Assume q(s) is a strictly monotonic function of |s|. Then, we can further identify the original si, up to strictly monotonic transformations of each source.\nProof: To make p\u03c4 (s) integrable, necessarily q(s) \u2192 \u2212\u221e when |s| \u2192 \u221e, and q(s) must have a finite maximum, which we can set to zero without restricting generality. For each fixed i, consider the manifold defined by q(gi(x))) = 0. By invertibility of g, this divides the space of x into two halves. In one half, define s\u0303i = q(si), and in the other, s\u0303i = \u2212q(si). With such s\u0303i, we have thus recovered the original sources, up to the strictly monotonic transformation s\u0303i = c sign(si)q(si), where c is either +1 or\u22121. (Note that in general, the si are meaningfully defined only up to a strictly monotonic transformation, analogue to multiplication by an arbitrary constant in the linear case [3].)\nSummary of Theory What we have proven is that in the special case of a single q(s) which is a monotonic function of |s|, our nonlinear ICA model is identifiable, up to inevitable component-wise monotonic transformations. We also provided a practical method for the estimation of the nonlinear transformations q(si) for any general q, given by TCL followed by linear ICA. (The method provided in the proof of Corollary 2 may be very difficult to implement in practice.)\nExtension 1: Combining ICA with dimension reduction In practice we may want to set the feature extractor dimension m to be smaller than n, to accomplish dimension reduction. It is in fact simple to modify the generative model and the theorem so that a dimension reduction similar to nonlinear PCA can be included, and performed by TCL. It is enough to assume that while in the nonlinear mixing (4) we have the same number of dimensions for both x and s, in fact some of the components si are stationary, i.e. for them, \u03bbi,v(\u03c4) do not depend on \u03c4 . The nonstationary components s1(t), . . . , sm(t) will then be identified as in the Theorem, using TCL.\nExtension 2: General case with many nonlinearities With many qi,v (V > 1), the left-hand-side of (6) will have V n entries given by all the possible qi,v(si), and the dimension of the feature extractor must be equally increased; the condition of full rank on L is likewise more complicated. Corollary 1 must then consider an independent subspace model, but it can still be proven in the same way."}, {"heading": "6 Simulation on artificial data", "text": "Data generation We created data from the nonlinear ICA model in Section 4, using the simplified case of the Theorem as follows. Nonstationary source signals (n = 20, segment length 512) were randomly generated by modulating Laplacian sources by \u03bbi,1(\u03c4) randomly drawn from a uniform distribution in [0, 1]. As the nonlinear mixing function f(s), we used an MLP (\u201cmixing-MLP\u201d). In order to guarantee that the mixing-MLP is invertible, we used leaky ReLU units and the same number of units in all layers.\nTCL settings, training, and final linear ICA As the feature extractor to be trained by the TCL, we adopted an MLP (\u201cfeature-MLP\u201d). The segmentation in TCL was the same as in the data generation, and the number of layers was the same in the mixing-MLP and the feature-MLP. Note that when L = 1, both the mixing-MLP and feature-MLP are a one layer model, and then the observed signals are simply linear mixtures of the source signals as in a linear ICA model. As in the Theorem, we set m = n. As the activation function in the hidden layers, we used a \u201cmaxout\u201d unit, constructed by taking the maximum across G = 2 affine fully connected weight groups. However, the output layer has \u201cabsolute value\u201d activation units exclusively. This is because the output of the feature-MLP (i.e., h(x;\u03b8)) should resemble q(s), based on Theorem 1, and here we used the Laplacian distribution for the sources. The initial weights of each layer were randomly drawn from a uniform distribution for each layer, scaled as in [7]. To train the MLP, we used back-propagation with a momentum term. To avoid overfitting, we used `2 regularization for the feature-MLP and MLR.\nAccording to the Corollary above, after TCL we further applied linear ICA (FastICA, [15]) to the h(x;\u03b8), and used its outputs as the final estimates of q(si). To evaluate the performance of source recovery, we computed the mean correlation coefficients between the true q(si) and their estimates. For comparison, we also applied a linear ICA method based on nonstationarity of variance (NSVICA) [16], a kernel-based nonlinear ICA method (kTDSEP) [12], and a denoising autoencoder (DAE) [31] to the observed data. We took absolute values of the estimated sources to make a fair comparison with TCL. In kTDSEP, we selected the 20 estimated components with the highest correlations with the source signals. We initialized the DAE by the stacked DAE scheme [31], and sigmoidal units were used in the hidden layers; we omitted the case L > 3 because of instability of training.\nResults Figure 2a) shows that after training the feature-MLP by TCL, the MLR achieved higher classification accuracies than chance level which implies that the feature-MLP was able to learn a representation of the data nonstationarity. (Here, chance level denotes the performance of the MLP with a randomly initialized feature-MLP.) We can see that the larger the number of layers is (which means that the nonlinearity in the mixing-MLP is stronger), the more difficult it is to train the feature-MLP and the MLR. The classification accuracy also goes down when the number of segments increases, since when there are more and more classes, some of them will inevitably have very similar distributions and are thus difficult to discriminate; this is why we computed the chance level as above.\nFigure 2b) shows that the TCL method could reconstruct the q(si) reasonably well even for the nonlinear mixture case (L > 1), while all other methods failed (NSVICA obviously performed very well in the linear case).The figure also shows that (1) the larger the number of segments (amount of data) is, the higher the performance of the TCL method is (i.e. the method seems to converge), and (2) again, more layers makes learning more difficult.\nTo summarize, this simulation confirms that TCL is able to estimate the nonlinear ICA model based on nonstationarity. Using more data increases performance, perhaps obviously, while making the mixing more nonlinear decreases performance."}, {"heading": "7 Experiments on real brain imaging data", "text": "To evaluate the applicability of the TCL method to real data, we applied it on magnetoencephalography (MEG), i.e. measurements of the electrical activity in the human brain. In particular, we used data measured in a resting-state session, during which the subjects did not have any task nor were receiving any particular stimulation. In recent years, many studies shown the existence of networks of brain activity in resting state, with MEG as well [2, 4]. Such networks mean that the data is nonstationary, and thus this data provides an excellent target for TCL.\nData and preprocessing We used MEG data from an earlier neuroimaging study [25], graciously provided by P. Ramkumar. MEG signals were measured from nine healthy volunteers by a Vectorview helmet-shaped neuromagnetometer at a sampling rate of 600 Hz with 306 channels. The experiment consisted of two kinds of sessions, i.e., resting sessions (2 sessions of 10 min) and task sessions (2 sessions of 12 min). In the task sessions, the subjects were exposed to a sequence of 6\u201333 s blocks of auditory, visual and tactile stimuli, which were interleaved with 15-s rest periods. We exclusively used the resting-session data for the training of the network, and task-session data was only used in the evaluation. The modality of the sensory stimulation (incl. no stimulation, i.e. rest) provided a class label that we used in the evaluation, giving in total four classes. We preprocessed the MEG signals by Morlet filtering around the alpha frequency band.\nTCL settings We used segments of equal size, of length 12.5 s or 625 data points (downsampling to 50 Hz). The number of layers takes the values L \u2208 {1, 2, 3, 4}, and the number of nodes of each hidden layer was a function of L so that we always fixed the number of output layer nodes to 10, and increased gradually the number of nodes when going to earlier layer as L = 1 : 10, L = 2 : 20\u2212 10, L = 3 : 40\u2212 20\u2212 10, and L = 4 : 80\u2212 40\u2212 20\u2212 10. We used ReLU units in the middle layers, and adaptive units \u03c6(x) = max(x, ax) exclusively for the output layer, which is more flexible than the \u201cabsolute value\u201d unit used in the simulation. In order to prevent overfitting, we applied dropout [28] to inputs, and batch normalization [19] to hidden layers. Since different subjects and sessions are likely to have artefactual differences, we used a multi-task learning scheme, with a separate top-layer MLR classifier for each measurement session and subject, but a shared feature-MLP. (In fact, if we use the MLR to discriminate all segments of all sessions, it tends to mainly learn the artifactual differences across sessions.) Otherwise, all the settings and comparisons were as in Section 6.\nEvaluation methods To evaluate the obtained features, we performed classification of the sensory stimulation categories (modalities) by applying feature extractors trained with (unlabeled) restingsession data to (labeled) task-session data. Classification was performed using a linear support vector machine (SVM) classifier trained on the stimulation modality labels, and its performance was evaluated by a session-average of session-wise one-block-out cross-validation (CV) accuracies. The hyperparameters of the SVM were determined by nested CV without using the test data. The average activities of the feature extractor during each block were used as feature vectors in the evaluation of TCL features. However, we used log-power activities for the other (baseline) methods because the average activities had much lower performance with those methods. We balanced the number of blocks between the four categories. We measured the CV accuracy 10 times by changing the initial values of the feature extractor training, and showed their average performance. We also visualized the spatial activity patterns obtained by TCL, using weighted-averaged sensor signals; i.e., the sensor signals are averaged while weighted by the activities of the feature extractor.\nResults Figure 3a) shows the comparison of classification accuracies between the different methods, for different numbers of layers L = {1, 2, 3, 4}. The classification accuracies by the TCL method were consistently higher than those by the other (baseline) methods.1 We can also see a superior performance of multi-layer networks (L \u2265 3) compared with that of the linear case (L = 1), which indicates the importance of nonlinear demixing in the TCL method.\nFigure 3b) shows an example of spatial patterns learned by the TCL method. For simplicity of visualization, we plotted spatial patterns for the three-layer model. We manually picked one out of the ten hidden nodes from the third layer, and plotted its weighted-averaged sensor signals (Figure 3b, L3). We also visualized the most strongly contributing second- and first-layer nodes. We see progressive pooling of L1 units to form left temporal, right temporal, and occipito-parietal patterns in L2, which are then all pooled together in the L3 resulting in a bilateral temporal pattern with negative contribution from the occipito-parietal region. Most of the spatial patterns in the third layer (not shown) are actually similar to those previously reported using functional magnetic resonance imaging (fMRI), and MEG [2, 4]. Interestingly, none of the hidden units seems to represent artefacts, in contrast to ICA."}, {"heading": "8 Conclusion", "text": "We proposed a new learning principle for unsupervised feature (representation) learning. It is based on analyzing nonstationarity in temporal data by discriminating between time segments. The ensuing \u201ctime-contrastive learning\u201d is easy to implement since it only uses ordinary neural network training: a multi-layer perceptron with logistic regression. However, we showed that, surprisingly, it can estimate independent components in a nonlinear mixing model up to certain indeterminacies, assuming that the independent components are nonstationary in a suitable way. The indeterminacies include a linear mixing (which can be resolved by a further linear ICA step), and component-wise nonlinearities, such as squares or absolute values. TCL also avoids the computation of the gradient of the Jacobian, which is a major problem with maximum likelihood estimation [5].\nOur developments also give by far the strongest identifiability proof of nonlinear ICA in the literature. The indeterminacies actually reduce to just inevitable monotonic component-wise transformations in the case of modulated Gaussian sources. Thus, our results pave the way for further developments in nonlinear ICA, which has so far seriously suffered from the lack of almost any identifiability theory.\nExperiments on real MEG found neuroscientifically interesting networks. Other promising future application domains include video data, econometric data, and biomedical data such as EMG and ECG, in which nonstationary variances seem to play a major role.\n1Note that the classification using the final linear ICA is equivalent to using whitening since ICA only makes a further orthogonal rotation, and could be replaced by whitening without affecting classification accuracy."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "Nonlinear independent component analysis (ICA) provides an appealing framework<lb>for unsupervised feature learning, but the models proposed so far are not identifiable.<lb>Here, we first propose a new intuitive principle of unsupervised deep learning<lb>from time series which uses the nonstationary structure of the data. Our learning<lb>principle, time-contrastive learning (TCL), finds a representation which allows<lb>optimal discrimination of time segments (windows). Surprisingly, we show how<lb>TCL can be related to a nonlinear ICA model, when ICA is redefined to include<lb>temporal nonstationarities. In particular, we show that TCL combined with linear<lb>ICA estimates the nonlinear ICA model up to point-wise transformations of the<lb>sources, and this solution is unique \u2014 thus providing the first identifiability result<lb>for nonlinear ICA which is rigorous, constructive, as well as very general.", "creator": "LaTeX with hyperref package"}}}