{"id": "1605.09221", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-May-2016", "title": "Deep Reinforcement Learning Radio Control and Signal Detection with KeRLym, a Gym RL Agent", "abstract": "This paper presents research in progress investigating the viability and adaptation of reinforcement learning using deep neural network based function approximation for the task of radio control and signal detection in the wireless domain. We demonstrate a successful initial method for radio control which allows naive learning of search without the need for expert features, heuristics, or search strategies. We also introduce Kerlym, an open Keras based reinforcement learning agent collection for OpenAI's Gym. We use the basic Keras algorithm for training which has shown significant gains in performance in the current training context for the use of Deep Neural Networks in general. We are also interested in a technique of network training where the training is done by the learner in a computer operating system and the learner in a training environment.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 30 May 2016 13:23:04 GMT  (585kb,D)", "http://arxiv.org/abs/1605.09221v1", "7 pages, 4 figures"]], "COMMENTS": "7 pages, 4 figures", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["timothy j o'shea", "t charles clancy"], "accepted": false, "id": "1605.09221"}, "pdf": {"name": "1605.09221.pdf", "metadata": {"source": "CRF", "title": "Deep Reinforcement Learning Radio Control and Signal Detection with KeRLym, a Gym RL Agent", "authors": ["Timothy J O\u2019Shea", "Charles Clancy", "T. C. Clancy"], "emails": [], "sections": [{"heading": null, "text": "Introduction\nRadios are ubiquitous in modern society. Between cellular devices, wearable devices, computing devices, medical devices, and other devices we carry and operate regularly through each day, radio frequency communications have become the most pervasive and convenient way we communicate information in our daily lives. Unfortunately, our spectrum resources are limited and our data needs are growing in a seemingly unbounded manner. Despite this wireless spectrum crunch, our methods for allocation, adaptation and optimization of spectrum use remains very much in the dark ages today. Spectrum is still allocated in a static fashion, and devices are oblivious and unaware of the use of or the availability of resources in their direct vicinity. The field of cognitive radio and dynamic spectrum access have attempted to address this through the introduction of expert systems which attempt to perform spectrum sensing and some degree of characterization of their environment, but their impact has been heavily limited by their inability to generalize to new regions, protocols, emitters, and radio propagation environments.\nGeneralized policy learning has and continues to be an open challenge in CS and AI for many years, however in recent years advances in reinforcement learning have made massive strides towards the advancement of this field. Recent Work by Minh [3], Silver [11], Sutton [1], and others has begun to demonstrate the ability to learn exceedingly complex and varied tasks using deep neural network based policy function approximation to implement Q-Learning.\nTo address this problem of learning to rapidly understand the surrounding radio environment, we introduce a radio signal search environment for the recently released Gym RL framework from OpenAI in which to begin evaluating and scoring different approaches.\nar X\niv :1\n60 5.\n09 22\n1v 1\n[ cs\n.L G\n] 3\n0 M\nay 2\n01 6\nWe also implement a general purpose open source Deep Neural network based Q-Learning function approximation learner for Gym using Keras primitives to learn a policy for rapidly exploring this environment through its set of discrete actions and observations [5]."}, {"heading": "1 Reinforcement Learning Policy", "text": "We introduce KeRLym [9], an open source deep reinforcement learning agent collection written in python using Keras to implement GPU optimized deep neural networks on top of Theano [2] and TensorFlow [12]. OpenAI recently released Gym [8], a collection of reinforcement learning benchmark environments, an API to easily use them, and a web based high-score board for algorithm comparison. We leverage this API in our reinforcement learner to provide a standard agent interface and to rapidly provide a wide range of tasks we can test its performance and tuning against."}, {"heading": "1.1 Policy Learning", "text": "Since Google Deepmind\u2019s Nature paper on Deep-Q Networks [3], there has been a surge of interest in the capabilities of reinforcement learning use deep neural network policy network approximation. This is an exciting and growing area with much potential improvement for learning algorithms yet to come. For the scope of this work we implement a parametric version of the Deep Q-Learning algorithm along with a Double Q-Learning [7] implementation in the KeRLym toolbox. We implement a variety of function approximation networks which can be used inside them including dense fully connected networks, convolutional networks similar to those used in the Atari paper, and recurrent networks leveraging LSTM which may improve sequence learning in POMDPs as discussed in [6].\nThe approaches in are similar for both algorithms, a value function Q(s, a; \u03b8) is updated using a form of stochastic gradient descnt, SGD, in the form of:\n\u03b8t+1 = \u03b8t + \u03b1 (Yt,\u2212Q (St, At; \u03b8t))\u2207\u03b8Q(St, At; \u03b8t) (1)\nHowever, in single Q-learning we directly compute Yt in a greedy manner using our latest \u03b8 as:\nYt = Rt+1 + \u03b3max a Q (St+1, a; \u03b8t) (2)\nWhereas in double Q-learning we maintain two sets of weights \u03b8 and \u03b8\u2032 which we alternate between using for decision making and greedy policy update purposes:\nYt = Rt+1 + \u03b3Q ( St+1, argmax\na Q (St+1, a; \u03b8t) ; \u03b8\n\u2032 )\n(3)\nThis helps to reduce overestimation value bias and imrpoves policy learning rate and stability for many tasks.\nWe implement -greedy learning with a default constant value of 0.1, to choose the greedy policy 90% of the time, simply to avoid the tuning required with epsilon decay schedules for stability of comparison of this work.\nWe also implement experience replay, keeping around a memory of 1,000,000 previous actions to draw training samples from in addition to the new experience gained each time-step. We use a learning rate of 0.001 in a Keras Adam [4] solver, and a discount rate of \u03b3 = 0.99 in our experiments.\nWithin the KeRLym toolbox we hope to extend the number of solvers available"}, {"heading": "1.2 Deep-Q Network Implementation", "text": "Our Q function Q(s, a, \u03b8) is a Deep Neural Network with random initial parameters \u03b8 implemented in the Keras framework on top of Theano, running on an Nvidia Titan X. We zero the output regression layer weights to reduce initial error in value function output. We start with a similar architecture to the convolutional network used by Mnih et al in [3], but make changes which show improvement in our domain and account for the input information form.\nSince we are passing both scalar stored variables containing sensor information, and contiguous frequency domain values into the value function as the current state, we treat each input configuration value as an independent discrete input with fully connected logic, while we reduce the parameter space and allow frequency domain filters to form and be used shift-invariantly on the power spectrum by using a set of convolutional layers, similar to our approach on raw time-domain samples in [10].\nUltimately we concatenate the activations from both of these paths into dense fully connected layers to perform the output regression task for output action-value estimates."}, {"heading": "2 Radio Search Environment", "text": ""}, {"heading": "2.1 Environment Overview", "text": "Typical electronic devices such as cellular phones contain at this point highly flexible Radio Frequency Integrated Circuits (RFIC) which allow the frequency tuning and digitization of relatively large arbitrary bands of interest. Typically they are programmed in an exceedingly simple way by a carrier to brute force through a small list of carrier-assigned channels and bandwidth, however they are in fact capable of tuning to relatively arbitrary center frequencies between 100 MHz and 6GHz and providing often powers of two decimations of a 10-20 MHz wide bandwidth.\nInstead of brute force search for signals on several carrier centric bands, we propose instead to allow machine learning to derive a general search policy to identify signals providing useful connectivity while optimizing for minimal search time, battery consumption and power usage possible. To do this we boil the search task down into a relatively small set of possible discrete actions which may be taken towards the end-goal."}, {"heading": "2.2 Environment Implementation", "text": "We begin by building an environment for the Gym Reinforcement Learning environment to attempt to mirror our problem statement, and a reasonable set of assumptions for what a real system could do and sense, but at a relatively small scale of complexity for initial work.\nWe simulate a single radio receiver sampling at a bandwidth of 20 MHz, which can be decimated and re-tuned using the set of discrete actions in 2. The discrete actions we allow are as follows, where we refer to the variables: center frequency (fc), bandwidth (bw), maximum bandwidth (bwmax), minimum bandwidth (bwmin), maximum center frequency (fcmax), and minimum center frequency (fcmin).\n\u2013 Freq Down: fc\u2212 = max(bw/2, fcmin) \u2013 Freq Up: fc+ = min(bw/2, fcmax) \u2013 BW Down Left: bw = max(bw/2, bwmin); fc\u2212 = bw/2 \u2013 BW Down Left: bw = max(bw/2, bwmin); fc+ = bw/2 \u2013 BW Max: bw = bwmax \u2013 Detect: Assert that a signal is in the current window. \u2013 Finished: Assert that all signals in band have been detected.\nThe environment chooses a random frequency within the band of interest (100MHz to 200MHz in this work) to place a single sinusoidal tone. For each agent observation, it returns a small band-limited window into the environment tuned to the chosen center frequency and bandwidth. The Detect action asserts that there is a signal within the current band either correctly or falsely, Finish assets that we have correctly found the signal and our search path is complete, and bandwidth and frequency actions change our receiver configuration according to the list above. A single optimal path to a solution through the environment might look something like shown in figure 3. In this case each look window for a time-step is represented by a red bar above the wideband power spectrum plot."}, {"heading": "3 Training Considerations", "text": "There are numerous ways to define penalties and rewards for this search process within the environment which pose a number of different considerations for the training process, we propose 3 potential rewards schemes below.\nOour agent\u2019s goal at run-time is to detect the signal present somewhere in the band and localize the signal using BW-L and BW-R actions to zoom in on it, these rewards and penalties are designed to reflect that. Scheme A results in perhaps the fastest training rate and simples approach towards directly rewarding good actions, Scheme B provides a strong disincentive for false positive actions, but slows down learning, and Scheme C provides a simple final score which requires a more delayed-reward style of learning."}, {"heading": "4 Conclusions and Future Work", "text": "We can plot a number of statistics during the training process which give us insight into how the training is going. Shown in figure 4 we have the training statistics under Scheme B with early exiting (on Finish(False)). From this graph it is clear that we are learning a relatively clear separation between good and bad action values, as can be seen from the separation in the 3rd plot, and that our reward is growing and our finishing time is growing long enough to succeed some of the time.\n\u2019 In future work we hope to provide a more comprehensive trade between the trade offs described above, learn a policy which performs at a more satisfying reward level, and and compare the impact of reward/penalty schemes on traditional receiver operating characteristics, ROC, curves for performance. We are excited about the potential in this area and positive this approach will be fruitful."}], "references": [{"title": "Reinforcement learning: An introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT press", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1998}, {"title": "Theano: a CPU and GPU math expression compiler", "author": ["J. Bergstra", "O. Breuleux", "F. Bastien", "P. Lamblin", "R. Pascanu", "G. Desjardins", "J. Turian", "D. Warde-Farley", "Y. Bengio"], "venue": "Proceedings of the Python for Scientific Computing Conference (SciPy),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Playing atari with deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M. Riedmiller"], "venue": "arXiv preprint arXiv:1312.5602", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "Adam: a method for stochastic optimization", "author": ["D. Kingma", "J. Ba"], "venue": "arXiv preprint arXiv:1412.6980", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Keras", "author": ["F. Chollet"], "venue": "https://github.com/fchollet/keras", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep recurrent q-learning for partially observable mdps", "author": ["M. Hausknecht", "P. Stone"], "venue": "arXiv preprint arXiv:1507.06527", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep reinforcement learning with double q-learning", "author": ["H. Van Hasselt", "A. Guez", "D. Silver"], "venue": "arXiv preprint arXiv:1509.06461", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "Benchmarking deep reinforcement learning for continuous control", "author": ["Y. Duan", "X. Chen", "R. Houthooft", "J. Schulman", "P. Abbeel"], "venue": "arXiv preprint arXiv:1604.06778", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2016}, {"title": "Kerlym: keras reinforcement learning gym agents, https:// github.com/osh/kerlym, 2016", "author": ["T. O\u2019Shea"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2016}, {"title": "Convolutional radio modulation recognition networks", "author": ["T.J. O\u2019Shea", "J. Corgan", "T.C. Clancy"], "venue": "arXiv preprint arXiv:1602.04105,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "G", "author": ["D. Silver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre"], "venue": "Van Den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam, M. Lanctot, et al., \u201cMastering the game of go with deep neural networks and tree search\u201d, Nature, vol. 529, no. 7587, pp. 484\u2013489", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2016}, {"title": "Tensorflow: large-scale machine learning on heterogeneous systems, 2015", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin"], "venue": "Software available from tensorflow. org,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}], "referenceMentions": [{"referenceID": 2, "context": "Recent Work by Minh [3], Silver [11], Sutton [1], and others has begun to demonstrate the ability to learn exceedingly complex and varied tasks using deep neural network based policy function approximation to implement Q-Learning.", "startOffset": 20, "endOffset": 23}, {"referenceID": 10, "context": "Recent Work by Minh [3], Silver [11], Sutton [1], and others has begun to demonstrate the ability to learn exceedingly complex and varied tasks using deep neural network based policy function approximation to implement Q-Learning.", "startOffset": 32, "endOffset": 36}, {"referenceID": 0, "context": "Recent Work by Minh [3], Silver [11], Sutton [1], and others has begun to demonstrate the ability to learn exceedingly complex and varied tasks using deep neural network based policy function approximation to implement Q-Learning.", "startOffset": 45, "endOffset": 48}, {"referenceID": 4, "context": "We also implement a general purpose open source Deep Neural network based Q-Learning function approximation learner for Gym using Keras primitives to learn a policy for rapidly exploring this environment through its set of discrete actions and observations [5].", "startOffset": 257, "endOffset": 260}, {"referenceID": 8, "context": "We introduce KeRLym [9], an open source deep reinforcement learning agent collection written in python using Keras to implement GPU optimized deep neural networks on top of Theano [2] and TensorFlow [12].", "startOffset": 20, "endOffset": 23}, {"referenceID": 1, "context": "We introduce KeRLym [9], an open source deep reinforcement learning agent collection written in python using Keras to implement GPU optimized deep neural networks on top of Theano [2] and TensorFlow [12].", "startOffset": 180, "endOffset": 183}, {"referenceID": 11, "context": "We introduce KeRLym [9], an open source deep reinforcement learning agent collection written in python using Keras to implement GPU optimized deep neural networks on top of Theano [2] and TensorFlow [12].", "startOffset": 199, "endOffset": 203}, {"referenceID": 7, "context": "OpenAI recently released Gym [8], a collection of reinforcement learning benchmark environments, an API to easily use them, and a web based high-score board for algorithm comparison.", "startOffset": 29, "endOffset": 32}, {"referenceID": 2, "context": "Since Google Deepmind\u2019s Nature paper on Deep-Q Networks [3], there has been a surge of interest in the capabilities of reinforcement learning use deep neural network policy network approximation.", "startOffset": 56, "endOffset": 59}, {"referenceID": 6, "context": "For the scope of this work we implement a parametric version of the Deep Q-Learning algorithm along with a Double Q-Learning [7] implementation in the KeRLym toolbox.", "startOffset": 125, "endOffset": 128}, {"referenceID": 5, "context": "We implement a variety of function approximation networks which can be used inside them including dense fully connected networks, convolutional networks similar to those used in the Atari paper, and recurrent networks leveraging LSTM which may improve sequence learning in POMDPs as discussed in [6].", "startOffset": 296, "endOffset": 299}, {"referenceID": 3, "context": "001 in a Keras Adam [4] solver, and a discount rate of \u03b3 = 0.", "startOffset": 20, "endOffset": 23}, {"referenceID": 2, "context": "We start with a similar architecture to the convolutional network used by Mnih et al in [3], but make changes which show improvement in our domain and account for the input information form.", "startOffset": 88, "endOffset": 91}, {"referenceID": 9, "context": "Since we are passing both scalar stored variables containing sensor information, and contiguous frequency domain values into the value function as the current state, we treat each input configuration value as an independent discrete input with fully connected logic, while we reduce the parameter space and allow frequency domain filters to form and be used shift-invariantly on the power spectrum by using a set of convolutional layers, similar to our approach on raw time-domain samples in [10].", "startOffset": 492, "endOffset": 496}], "year": 2016, "abstractText": "This paper presents research in progress investigating the viability and adaptation of reinforcement learning using deep neural network based function approximation for the task of radio control and signal detection in the wireless domain. We demonstrate a successful initial method for radio control which allows naive learning of search without the need for expert features, heuristics, or search strategies. We also introduce Kerlym, an open Keras based reinforcement learning agent collection for OpenAI\u2019s Gym.", "creator": "LaTeX with hyperref package"}}}