{"id": "1605.09293", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-May-2016", "title": "Internal Guidance for Satallax", "abstract": "We propose a new internal guidance method for automated theorem provers based on the given-clause algorithm. Our method influences the choice of unprocessed clauses using positive and negative examples from previous proofs. To this end, we present an efficient scheme for Naive Bayesian classification by generalising label occurrences to types with monoid structure. This makes it possible to extend existing fast classifiers, which consider only positive examples, with negative ones. We implement the method in the higher-order logic prover Satallax, where we modify the delay with which propositions are processed. We evaluated our method on a simply-typed higher-order logic version of the Flyspeck project, where it solves 26% more problems than Satallax without internal guidance. This results in more accurate classification results, but has not yet been evaluated in a previous proof-of-concept study.", "histories": [["v1", "Mon, 30 May 2016 16:01:51 GMT  (193kb,D)", "http://arxiv.org/abs/1605.09293v1", null]], "reviews": [], "SUBJECTS": "cs.LO cs.AI cs.LG", "authors": ["michael f\\\"arber", "chad brown"], "accepted": false, "id": "1605.09293"}, "pdf": {"name": "1605.09293.pdf", "metadata": {"source": "META", "title": "Internal Guidance for Satallax", "authors": ["Michael F\u00e4rber", "Chad Brown"], "emails": ["michael.faerber@uibk.ac.at"], "sections": [{"heading": "1 Introduction", "text": "Experience can be described as knowing which methods to apply in which context. It is a result of experiments, which can show a method to either fail or succeed in a certain situation. Mathematicians solve problems by experience. When solving a problem, mathematicians gain experience, which in the future can help them to solve harder problems that they would not have been able to solve without the experience gained before.\nFully automated theorem provers (ATPs) attempt to prove mathematical problems without user interaction. A thriving field of research is how to make ATPs behave more like mathematicians, by learning which decisions to take from previous proof attempts, in order to find more proofs in shorter time, and to prove problems that were previously out of reach for the ATP. Machine learning can help advance that field, for it provides techniques to model experience and to compare the quality of possible decisions. Machine learning approaches to improve ATP performance include:\n\u2013 Premise selection: Preselecting a set of axioms for a problem can be done as a preprocessing step or inside the ATP at the beginning of proof search. Examples of this technique are the Sumo INference Engine (SInE) [HV11] and E.T. [KSUV15]. \u2013 Internal guidance: Unlike premise selection, internal guidance influences choices made during the proof search. The hints technique [Ver96] was among\nar X\niv :1\n60 5.\n09 29\n3v 1\n[ cs\n.L O\n] 3\n0 M\nay 2\nthe earliest attempts to directly influence proof search by learning from previous proofs. Other systems are E/TSM [Sch00], an extension of E [Sch13] with term space maps, and MaLeCoP [UV\u016011] respectively FEMaLeCoP [KU15], which are versions of leanCoP [Ott08] extended by Naive Bayesian learning. \u2013 Learning of strategies: Finding good settings for ATPs automatically has been researched for example in the Blind Strategymaker (BliStr) project [Urb15]. \u2013 Learning of strategy choice: Once one has found good ATP strategies for different sets of problems, it is not directly clear which strategies to apply for which time when encountering a new problem. This problem was treated in the Machine Learning of Strategies (MaLeS) [K\u00fc14].\nIn this paper, we show an internal guidance algorithm for ATPs that use (variations of) the given-clause algorithm. Specifically, we study a Naive Bayesian classification method, introduced for the connection calculus in FEMaLeCoP, and generalise it by measuring label occurrences with an arbitrary type having monoid structure, in place of a single number. This generalisation has the benefit that it can handle positive and negative occurrences. As a proof of concept, we implement the algorithm in the ATP Satallax [Bro12], using no features at all, which already solves 26% more problems given the same amount of time, and which can solve about as many problems in 1s than without internal guidance in 2s."}, {"heading": "2 Naive Bayesian classifier with monoids", "text": ""}, {"heading": "2.1 Motivation", "text": "Many automated theorem provers have a proof state in which they make decisions, by ranking available choices (e.g. which proposition to process) and choosing the best one. This is related to the classification problem in machine learning, which takes data about previous decisions, i.e. which situation has led to which choice, and then orders choices by usefulness for the current situation.\nFor example, let us assume that the state of the theorem prover is modelled by the set of constants appearing in the previously processed propositions or in the conjecture. Let our conjecture be x+ y = y + x and let our premises include\n\u2200P.[P (0) =\u21d2 (\u2200x.P (x) =\u21d2 P (s(x))) =\u21d2 \u2200x.P (x)], (1) x+ 0 = x. (2)\nIf we first process Equation 1, the prover state is characterised by F = {+, s, 0}. If we then continue to process Equation 2 and it turns out that this contributes to the final proof, we register that in the situation F , Equation 2 was useful.\nIn other proof searches, processing Equation 2 in a certain prover state will not contribute towards the final proof. We call such situations negative examples.\nIntuitively, we would like to apply propositions in situations that are similar to those in which the propositions were useful, and avoid processing propositions in situations similar to those where the propositions were useless. In general, examples (positive and negative) can be characterised by a prover state F and a proposition l that was processed in state F . This makes it possible to treat the choice of propositions as classification problem. In the next section, we show how to rank choices based on previous experience."}, {"heading": "2.2 Classifiers with positive examples", "text": "A classifier takes pairs (F, l), relating a set of features F with a label l, and produces a function that, given a set of features, predicts a label. Classifiers can be characterised by a function r(l, F ), which represents the relevance of a label wrt a set of features. For internal guidance, we use r to estimate the relevance of a clause l to process in the current prover state F .\nA Bayesian classifier estimates the relevance of a label by its probability to occur with a set of features, i.e. P (l | F ). By using the Naive Bayesian assumption that features are conditionally independent, the conditional probability is:\nP (l | F ) = P (l)P (F | l) P (F ) = P (l) \u220f f\u2208F P (f | l) P (F ) \u221d P (l) \u220f f\u2208F P (f | l).\nTo increase numerical stability, we use sums of logarithms. Furthermore, we weight the probabilities with the inverse document frequency (IDF) of the features, and we omit the constant factor P (F ). The resulting classifier then is:\nr(l, F ) = logP (l) + \u2211 f\u2208F log(idf(fi)) logP (f | l).\nIn FEMaLeCoP, the simplified probability functions3 are approximated by\nP (l) \u2248 Dl, P (f | l) \u2248 { c if Dl,f = 0 Dl,f Dl otherwise\nwhere Dl,f denotes the number of times l appeared among the training examples in conjunction with f , Dl denotes how often l appeared among all training examples, and c is a constant."}, {"heading": "2.3 Generalised classifiers", "text": "In our experiments, we found negative training examples to be crucial for internal guidance. Therefore, we generalised the classifier to represent the type of occurrences as a commutative monoid. 3 We omitted several constant factors. Furthermore, FEMaLeCoP considers also features of training examples that are not part of the features F , albeit this is a further derivation of the theoretical model.\nDefinition 1. A pair (M, +) is a monoid if there exists a neutral element 0 \u2208M such that for all x, y, z \u2208M , (x+ y) + z = x+ (y + z) and x+ 0 = 0 + x = x. If furthermore x+ y = y + x, then the monoid is commutative.\nThe generalised classifier is instantiated with a commutative monoid (M,+) and reads triples (F, l, o), which in addition to features and label now store the label occurrence o \u2208M . For example, if the classifier is to support positive and negative examples, then one can use the monoid (N\u00d7N,+2), where the first and second elements of the pair represent the number of positive respectively negative occurrences, the +2 operation is pairwise addition, and the neutral element is (0, 0). A triple learnt by this classifier could be (F, l, (1, 2)), meaning that l occurs with F once in a positive and twice in a negative way. Commutativity imposes that the order in which the classifier is trained does not matter.\nWe now formally define Dl (occurrences of label), Dl,f (co-occurrences of label with feature) and idf (inverse document frequency):\nDl = \u2211 {o | (F, l\u2032, o) \u2208 D, l = l\u2032},\nDl,f = \u2211 {o | (F, l\u2032, o) \u2208 D, l = l\u2032, f \u2208 F},\nidf(f) = |D| |{(F, l\u2032, o) | (F, l\u2032, o) \u2208 D, f \u2208 F}|\nWith this, our classifier for positive and negative examples can be defined as follows:\nP (l) = |p\u2212 n| p+ n (cpp+ cnn), P (fi | l) = { c if Dl,f = 0 cp pf p + cn nf n otherwise\nwhere (p, n) = Dl, (pf , nf ) = Dl,f , and c, cp, and cn are constants. The term |p\u2212n| p+n represents confidence and models our intuition that labels which appear always in the same role (say, as positive example) should have a greater influence than more ambivalent labels. For example, if a label occurs about the same number of times as positive and as negative example, confidence is approximately 0, and when a label is almost exclusively positive or negative, confidence is 1.\nWe call Dl, Dl,f , and idf classification data. They are precalculated to allow fast classification. Furthermore, new training examples can be added to existing classification data efficiently, similarly to [KU15]."}, {"heading": "3 Learning scenarios", "text": "In this section, we still consider ATPs as black boxes, taking as input a problem and classification data for internal guidance, returning as output training data (empty if the ATP did not find a proof).\nWe propose two different scenarios to generate training data and to use it in subsequent proof searches, see Figure 1:\n\u2013 On-line learning: We run the ATP on every problem with classification data. For every problem the ATP solves, we update the classifier with the training data from the ATP proof. \u2013 Off-line learning: We first run the ATP on all problems without classification data, saving training data for every problem solved. We then create classification data from the training data and rerun the ATP with the classifier on all problems.\nWhile the second scenario can be parallelised, thus taking less wall-clock time, it has to treat every problem twice in the worst case (namely when every problem fails), thus taking up to double the CPU time of the first scenario."}, {"heading": "4 Internal guidance for given-clause provers", "text": "Variants of the given-clause algorithm are commonly used in refutation-based ATPs, such as Vampire [KV13] or E [Sch13].4 We introduce a simple version of the 4 Technically, our reference prover Satallax does not implement a given-clause algorithm, as Satallax treats terms instead of clauses, and it interleaves the choice of unprocessed terms with other commands. However, for the sake of internal guidance, we can consider Satallax to implement a version of the given-clause algorithm. We describe the differences in more detail in section 6.\nalgorithm: Given an initial set of clauses to refute, the set of unprocessed clauses is initialised with the initial set of clauses, and the set of processed clauses is the empty set. At every iteration of the algorithm, a given clause is selected from the unprocessed clauses and moved to the processed clauses, possibly generating new clauses which are moved to the unprocessed clauses. The algorithm terminates as soon as either the set of unprocessed clauses is empty or the empty clause was generated.\nThe integration of our internal guidance method into an ATP with givenclause algorithm involves two tasks: The recording of training data, and the ranking of unprocessed clauses, which influences the choice of the given clause. To reduce the amount of data an ATP has to load for internal guidance, we process training data and transform it into classification data outside of the ATP. We describe these tasks below in the order they are executed when no internal guidance data is present yet."}, {"heading": "4.1 Recording training data", "text": "Recording training data can be done in different fashions:\n\u2013 In situ: Information about clause usage is recorded every time an unprocessed clause gets processed. This method allows for more expressive prover state characterisation, on the other hand, we found it to decrease the proof success rate, as the recording of proof data makes the inference slower. \u2013 Post mortem: Only when a proof was found, information about clause usage is reconstructed. As this method does not place any overhead on the proof search, we resorted to post-mortem recording, which is still sufficiently expressive for our purposes.\nFor every proof, we save: conjecture (if one was given), axioms A (premises given in the problem), processed clauses C, and clauses C+ that were used in the final proof (C+ \u2286 C). We call such information for a single proof a training datum. We ignore unprocessed clauses, as we cannot easily estimate whether they might have contributed to a proof."}, {"heading": "4.2 Postprocessing training data", "text": "In our experiments, we frequently encounter clauses that are the same, differing only by containing different Skolem constants. To this end, we process the training data before creating classification data from it. We tried different techniques to handle Skolem constants, as well as other postprocessing methods:\n\u2013 Skolem filtering: We discard clauses containing any Skolem constants. \u2013 Consistent Skolemisation: We normalise Skolem constants inside all\nclauses, similarly to [UV\u016011]. That is, a clause P (x, y, x), where x and y are Skolem constants, becomes P (c1, c2, c1).\n\u2013 Consistent normalisation: Similarly to consistent Skolemisation, we normalise all symbols of a clause. That is, P (x, y, x) as above becomes c1(c2, c3, c2). This allows the ATP to discover similar groups of clauses, for example a+ b = b+ a and a \u2217 b = b \u2217 a both map to c1(c2, c3) = c1(c3, c2), but on the other hand, this also maps possibly different clauses such as P (x) and Q(z) to the same clause. Still, in problem collections which do not share a common set of function constants (such as TPTP), this method is suitable. \u2013 Inference filtering: An interesting experiment is to discard all clauses generated during proof search that are not part of the initial clauses.\nWe denote the consistent Skolemisation/normalisation of a clause c described above as N (c)."}, {"heading": "4.3 Transforming training data to classification data", "text": "For a given training datum with processed clauses C and proof clauses C+, we define the corresponding classifier data to be:\n{(F(c), c, (1, 0)) | c \u2208 C+} \u222a {(F(c), c, (0, 1)) | c \u2208 C \\ C+},\nwhere F(c) denotes the features of a clause. We use the monoid (N\u00d7N,+2, (0, 0)) introduced in section 2, storing positive and negative examples. The classifier data of the whole training data is then the (multiset) union of the classifier data of the individual training data."}, {"heading": "4.4 Clause ranking", "text": "This section describes how our internal guidance method influences the choice of unprocessed clauses using a previously constructed classifier.\nAt the beginning of proof search, the ATP loads the classifier. Some learning ATPs, such as E/TSM [Sch00], select and prepare knowledge relevant to the current problem before the proof search. However, as we store classifier data in a hash table, filtering irrelevant knowledge to the problem at hand would require a relatively slow traversal of the whole table, whereas lookup of knowledge is fast even in the presence of a large number of irrelevant facts. For this reason we do not filter the classification data per problem.\nThen, at every choice point, i.e. every time the ATP chooses a clause from the unprocessed clauses C, it picks a clause c \u2208 C that maximises the clause rank R(c, F ), where\nR(c, F ) = rATP(c) + r(N (c), F ) and:\n\u2013 rATP(c) is an ATP function that calculates the relevance of a clause with traditional means (such as weight, age, . . . ), \u2013 F is the current prover state, \u2013 r(c, F ) is the Naive Bayesian ranking function as shown in section 2, and \u2013 N (c) is the normalisation function as introduced in subsection 4.2."}, {"heading": "5 Tuning of guidance parameters", "text": "We employed two different methods to automatically find good parameters for internal guidance, such as c, cp, and cn from section 2."}, {"heading": "5.1 Off-line tuning", "text": "Off-line tuning analyses existing training data and attempts to find parameters that give proof-relevant clauses from the training data a high rank, while giving proof-irrelevant clauses a low rank. To do this, we evaluate for every training datum the following formula, which adds for every proof-relevant clause the number of proof-irrelevant clauses that were ranked higher:\u2211\nc+\u2208C+\n|{c | R(c, F ) > R(c+, F+), c \u2208 C \\ C+}|,\nwhere C and C+ come from the training datum (see subsection 4.1), F and F+ are the features of the prover states when c respectively c+ were processed (we reconstruct these from the training datum), and R is the ranking formula from subsection 4.4.\nIn the end, we sum up the results of the formula above for all training data, and take the guidance parameters which minimise that sum."}, {"heading": "5.2 Particle Swarm Optimisation", "text": "Particle Swarm Optimisation [KE95] (PSO) is a standard optimisation algorithm that can be applied to minimise the output of a function f(x), where x is a vector of continuous values. A particle is defined by a location x (a candidate solution for the optimisation problem) and a velocity v. Initially, p particles are created with random locations and velocities. Then, at every iteration of the algorithm, a new velocity is calculated for every particle and the particle is moved by that amount. The new velocity of a particle is:\nv(t+ 1) = \u03c9 \u00b7 v(t) + \u03c6p \u00b7 rp \u00b7 (bp(t)\u2212 x(t)) + \u03c6g \u00b7 rg \u00b7 (bg(t)\u2212 x(t)),\nwhere:\n\u2013 v(t) is the old velocity of the particle, \u2013 bp(t) is the location of the best previously found solution among all particles, \u2013 bg(t) is the location of the best previously found solution of the particle, \u2013 rp and rg are random vectors generated at every evaluation of the formula,\nand \u2013 \u03c9 = 0.4, \u03c6p = 0.4, and \u03c6g = 3.6 are constants.\nWe apply PSO to optimise the performance of an ATP on a problem set S. For this, we define f(x) to be the number of problems in S the ATP can solve with a set of flags being set to x and with timeout t. We then run PSO and take the best global solution obtained after n iterations. We fixed t = 1s, p = 300, and |S| = 1000. The algorithm has worst-case execution time t \u00b7 p \u00b7 n \u00b7 |S|."}, {"heading": "6 Implementation", "text": "We implement our internal guidance in Satallax version 2.8. Satallax is an automated theorem prover for higher-order logic, based on a tableaux calculus with extensionality and choice. It is written in OCaml by Brown [Bro12]. Satallax implements a priority queue, on which it places several kinds of proof search commands: Among the 11 different commands in Satallax 2.8, there are for example proposition processing, mating, and confrontation. Proof search works by processing the commands on the priority queue by descending priority, until a proof is found or a timeout is reached. The priorities assigned to these commands are determined by flags, which are the settings Satallax uses for proof search. A set of flag settings is called a mode (in other ATPs frequently called strategies) and can be chosen by the user upon the start of Satallax. Similar to other modern ATPs such as Vampire [KV13] or E [Sch13], Satallax also supports timeslicing via strategies (in other ATPs frequently called schedules), which define a set of modes together with time amounts Satallax calls each mode with. Formally, a strategy is a sequence [(m1, t1), . . . , (mn, tn)], where mi is a mode and ti the time to run the mode with. The total time of the strategy is the sum of times, i.e. t\u03a3(S) = \u2211 (m,t)\u2208S t.\nAs a side-effect of this work, we have extended Satallax with the capability of loading user-defined strategies, which was previously not possible as strategies were hard-coded into the program. Furthermore, we implemented modifying flags via the command line, which is useful e.g. to change a flag among all modes of a strategy without changing the flag among all files of a strategy. We used this extensively in the automatic evaluation of flag settings via PSO, as shown in subsection 5.2.\nWhen running Satallax with a strategy S and a timeout tmax, then all the times of the strategy are multiplied by tmaxt\u03a3(S) if tmax > t\u03a3(S), to divide the time between modes appropriately when running Satallax for longer than what the strategy S specifies. Then, every mode mi in the strategy is run sequentially for time ti until a proof is found or the timeout tmax is hit.\nAn analysis of several proof searches yielded that on average, more than 90% of commands put onto the priority queue of Satallax are proposition processing commands, which correspond to processing a clause from the set of unprocessed clauses in given-clause provers. For that reason, we decided to influence the priority of proposition processing commands, giving those propositions with a high probability of being useful a higher priority. The procedure follows the one described in subsection 4.4, but the ranking of a proposition is performed when the proposition processing command is put onto the priority queue, and the Naive Bayes rank is added to the priority that Satallax without internal guidance would have assigned to the command. As other types of commands are in the priority queue as well, we pay attention not to influence the priority of term processing commands too much (by choosing too large guidance parameters), as this can lead to disproportionate displacement of other commands.\nTo record training data, we use the terms from the proof search that contributed to the final proof. For this, Satallax uses picomus [Bie08] to construct a minimal unsatisfiable core.\nTo characterise the prover state of Satallax, we tried different kinds of features:\n\u2013 Symbols of processed terms: We collect the symbols of all processed propositions at the time a proposition is inserted into the priority queue and call these symbols the features of the proposition. However, this experimentally turned out to be a bad choice, because the set of features for each proposition grows quite rapidly, as the set of processed propositions grows monotonically. \u2013 Axioms of the problem: We associate every proposition processed in a proof search with all the axioms of the problem. In contrast to the method above, this associates the same features to all propositions processed during the proof search for a problem, and is thus more a characterisation of the problem (similar to TPTP characteristics [SB10]) than of the prover state.\nIn our experiments, just calculating the influence of these features without them actually influencing the priority makes Satallax prove less problems (due to the additional calculation time), and the positive impact of the features on the proof search does not compensate for the initial loss of problems. Therefore, we currently do not use features at all and associate the empty set of features to all labels, i.e. F(c) = {}. However, it turns out that even without features, learning from previous proofs can be quite effective, as shown in the next section."}, {"heading": "7 Evaluation", "text": "To evaluate the performance of our internal guidance method in Satallax, we used a THF0 [SB10] version (simply-typed higher-order logic) of the top-level theorems of the Flyspeck [HAB+15] project, as generated by Kaliszyk and Urban [KU14]. The test set consists of 14185 problems from topology, geometry, integration, and other fields. The premises of each problem are the actual premises that were used in the Flyspeck proofs, amounting to an average of 84.3 premises per problem.5 We used an Intel Core i3-5010U CPU (2.1 GHz Dual Core, 3 MB Cache) and ran maximally one instance of Satallax at a time.\nTo evaluate the performance of the off-line learning scenario described in section 3, we run Satallax on all Flyspeck problems, generating training data whenever Satallax finds a proof. We use the Satallax 2.5 strategy (abbreviated as \u201cS2.5\u201d), because the newest strategy in Satallax 2.8 can not always retrieve the terms that were used in the final proof, which is important to obtain training data.\nAs the off-line learning scenario involves evaluating every problem twice (once to generate training data and once to prove the problem with internal guidance), 5 The test set, as well as our modified version of Satallax and instructions to recreate our evaluation, can be found under: http://cl-informatik.uibk.ac.at/~mfaerber/satallax. html.\nit doubles runtime in the worst case, i.e. if no problem is solved. Therefore, a user might like to compare its performance to simply running the ATP with double timeout directly: When increasing the timeout from 1s to 2s, the number of solved problems increases from 2717 to 3394. However, this is mostly due to the fact that Satallax tries more modes, so to measure the gain in solved problems more fairly, we create a strategy \u201cS2.5_1s\u201d which contains only those modes that were already used during the 1s run, and let each of them run about double the time. This strategy proves 2845 problems in 2s.\nWe now compare the different postprocessing options introduced in subsection 4.2. For this, we create a classifier from the training data gathered during the 1s run. We then run Satallax with internal guidance in off-line learning mode with 1s timeout and the Satallax 2.5 strategy. We perform this procedure for each postprocessing option. We call a problem \u201clost\u201d that Satallax with guidance could not solve and Satallax without guidance could. Vice versa for \u201cgained\u201d. The results are given in Table 1. We perform best when influencing only the priority of axioms (inference filtering), solving 786 problems that could not be solved by Satallax in 1s without internal guidance.\nTo evaluate online learning, we run Satallax on all Flyspeck problems by ascending order, accumulating training data and using it for all subsequent proof searches. We filter away terms in the training data that contain Skolem variables. As result, Satallax with online learning, running 1s per problem, solves 3374 problems (59 lost, 716 gained), which is a plus of 24%.\nIn the next experiment, we evaluate the prover performance with the \u201cS2.5_1s\u201d strategy and a timeout of 30s. For this, we use an 48-core server with 2.2GHz AMD Opteron CPUs and 320GB RAM, running 10 instances of Satallax in parallel. First, we run Satallax without internal guidance for 30s, which solves 3097 problems. Next, we create from the training data a classifier with Skolem filtering, which takes 3s and results in a 1.8M file. Finally, we run Satallax with internal guidance in off-line learning mode using the classifier. This proves 4028 problems in 30s, which is a plus of 30%. Results are shown in Figure 2. The \u201cjumps\u201d in the data stem from changes of modes."}, {"heading": "8 Conclusion", "text": "We have shown how to integrate internal guidance into ATPs based on the given-clause algorithm, using positive as well as negative examples. We have demonstrated the usefulness of this method experimentally, showing that on a given test set, we can solve up to 26% more problems. ATPs with internal guidance could be integrated into hammer systems such as Sledgehammer (which can already reconstruct Satallax proofs [SBP13]) or HOL(y)Hammer [KU14], continually improving their success rate with minimal overhead. It could also be interesting to learn internal guidance for ATPs from subgoals given by the user in previous proofs. Currently, we learn only from problems we could find a proof for, but in the future, we could benefit from considering also proof searches that did not yield proofs. Furthermore, it would be interesting to see the effect of negative examples on existing ATPs with internal guidance, such as FEMaLeCoP. We believe that finding good features that characterise prover state are important to further improve the learning results."}, {"heading": "Acknowledgements", "text": "We would like to thank Sebastian Joosten and Cezary Kaliszyk for reading initial drafts of the paper, and especially Josef Urban for inspiring discussions and inviting the authors to Prague. Furthermore, we would like to thank the anonymous IJCAR referees for their valuable comments.\nThis work has been supported by the Austrian Science Fund (FWF) grant P26201 as well as by the European Research Council (ERC) grant AI4REASON."}], "references": [{"title": "Satallax: An automatic higher-order prover", "author": ["Chad E. Brown"], "venue": "Automated Reasoning - 6th International Joint Conference,", "citeRegEx": "Brown.,? \\Q2012\\E", "shortCiteRegEx": "Brown.", "year": 2012}, {"title": "A formal proof of the Kepler conjecture", "author": ["Ky Khac Vu", "Roland Zumkeller"], "venue": "CoRR, abs/1501.02155,", "citeRegEx": "Vu and Zumkeller.,? \\Q2015\\E", "shortCiteRegEx": "Vu and Zumkeller.", "year": 2015}, {"title": "Sine qua non for large theory reasoning", "author": ["Krystof Hoder", "Andrei Voronkov"], "venue": "International Conference on Automated Deduction,", "citeRegEx": "Hoder and Voronkov.,? \\Q2011\\E", "shortCiteRegEx": "Hoder and Voronkov.", "year": 2011}, {"title": "Particle swarm optimization", "author": ["J. Kennedy", "R. Eberhart"], "venue": "In IEEE International Conference on Neural Networks,", "citeRegEx": "Kennedy and Eberhart.,? \\Q1995\\E", "shortCiteRegEx": "Kennedy and Eberhart.", "year": 1995}, {"title": "System description: E.T", "author": ["Cezary Kaliszyk", "Stephan Schulz", "Josef Urban", "Jir\u00ed Vyskocil"], "venue": "25th International Conference on Automated Deduction, Berlin,", "citeRegEx": "Kaliszyk et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kaliszyk et al\\.", "year": 2015}, {"title": "Learning-assisted automated reasoning with Flyspeck", "author": ["Cezary Kaliszyk", "Josef Urban"], "venue": "J. Autom. Reasoning,", "citeRegEx": "Kaliszyk and Urban.,? \\Q2014\\E", "shortCiteRegEx": "Kaliszyk and Urban.", "year": 2014}, {"title": "FEMaLeCoP: Fairly efficient machine learning connection prover", "author": ["Cezary Kaliszyk", "Josef Urban"], "venue": "Logic for Programming, Artificial Intelligence, and Reasoning - 20th International Conference,", "citeRegEx": "Kaliszyk and Urban.,? \\Q2015\\E", "shortCiteRegEx": "Kaliszyk and Urban.", "year": 2015}, {"title": "First-order theorem proving and Vampire", "author": ["Laura Kov\u00e1cs", "Andrei Voronkov"], "venue": "Computer Aided Verification - 25th International Conference,", "citeRegEx": "Kov\u00e1cs and Voronkov.,? \\Q2013\\E", "shortCiteRegEx": "Kov\u00e1cs and Voronkov.", "year": 2013}, {"title": "Machine Learning for Automated Reasoning", "author": ["Daniel A. K\u00fchlwein"], "venue": "PhD thesis, Radboud Universiteit Nijmegen,", "citeRegEx": "K\u00fchlwein.,? \\Q2014\\E", "shortCiteRegEx": "K\u00fchlwein.", "year": 2014}, {"title": "leanCoP 2.0 and ileanCoP 1.2: High performance lean theorem proving in classical and intuitionistic logic (system descriptions)", "author": ["Jens Otten"], "venue": "Automated Reasoning, 4th International Joint Conference,", "citeRegEx": "Otten.,? \\Q2008\\E", "shortCiteRegEx": "Otten.", "year": 2008}, {"title": "Automated reasoning in higher-order logic using the TPTP", "author": ["Geoff Sutcliffe", "Christoph Benzm\u00fcller"], "venue": "THF infrastructure. J. Formalized Reasoning,", "citeRegEx": "Sutcliffe and Benzm\u00fcller.,? \\Q2010\\E", "shortCiteRegEx": "Sutcliffe and Benzm\u00fcller.", "year": 2010}, {"title": "LEO-II and Satallax on the Sledgehammer test bench", "author": ["Nik Sultana", "Jasmin Christian Blanchette", "Lawrence C. Paulson"], "venue": "J. Applied Logic,", "citeRegEx": "Sultana et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Sultana et al\\.", "year": 2013}, {"title": "Learning Search Control Knowledge for Equational Deduction", "author": ["S. Schulz"], "venue": "Number 230 in DISKI. Akademische Verlagsgesellschaft Aka GmbH Berlin,", "citeRegEx": "Schulz.,? \\Q2000\\E", "shortCiteRegEx": "Schulz.", "year": 2000}, {"title": "Logic for Programming, Artificial Intelligence, and Reasoning - 19th International Conference, LPAR-19, Stellenbosch", "author": ["Stephan Schulz"], "venue": "South Africa, December 14-19,", "citeRegEx": "Schulz.,? \\Q2013\\E", "shortCiteRegEx": "Schulz.", "year": 2013}, {"title": "BliStr: The Blind Strategymaker", "author": ["Josef Urban"], "venue": "GCAI", "citeRegEx": "Urban.,? \\Q2015\\E", "shortCiteRegEx": "Urban.", "year": 2015}, {"title": "MaLeCoP machine learning connection prover", "author": ["Josef Urban", "Ji\u0159\u00ed Vysko\u010dil", "Petr \u0160t\u011bp\u00e1nek"], "venue": "Automated Reasoning with Analytic Tableaux and Related Methods - 20th International Conference,", "citeRegEx": "Urban et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Urban et al\\.", "year": 2011}, {"title": "Using hints to increase the effectiveness of an automated reasoning program: Case studies", "author": ["Robert Veroff"], "venue": "J. Autom. Reasoning,", "citeRegEx": "Veroff.,? \\Q1996\\E", "shortCiteRegEx": "Veroff.", "year": 1996}], "referenceMentions": [], "year": 2016, "abstractText": "We propose a new internal guidance method for automated theorem provers based on the given-clause algorithm. Our method influences the choice of unprocessed clauses using positive and negative examples from previous proofs. To this end, we present an efficient scheme for Naive Bayesian classification by generalising label occurrences to types with monoid structure. This makes it possible to extend existing fast classifiers, which consider only positive examples, with negative ones. We implement the method in the higher-order logic prover Satallax, where we modify the delay with which propositions are processed. We evaluated our method on a simply-typed higher-order logic version of the Flyspeck project, where it solves 26% more problems than Satallax without internal", "creator": "LaTeX with hyperref package"}}}