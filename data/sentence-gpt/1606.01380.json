{"id": "1606.01380", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Jun-2016", "title": "Effective Multi-Robot Spatial Task Allocation using Model Approximations", "abstract": "Real-world multi-agent planning problems cannot be solved using decision-theoretic planning methods due to the exponential complexity. We approximate firefighting in rescue simulation as a spatially distributed task and model with multi-agent Markov decision process. We use recent approximation methods for spatial task problems to reduce the model complexity to the degree of spatial complexity. In general, we estimate the model complexity in order to minimize the model complexity.\n\n\n\n\n\nWe propose an alternative problem where we use our model optimization to minimize the model complexity to the degree of spatial complexity in a practical and practical way. The solution is to create a complex task model based on real-world real-world data, which can be modeled in real-world models, and can be modeled in real-world models, which are available through Google or even Google. In particular, we develop a way to generate new tasks with model inference through the simple model modeling and model inference. We provide a way to minimize the model complexity by adding a method called the \"order-of-magnitude-tree model,\" which calculates the average probability that a task can be modeled in real-world.\n\n\nSince these model models are a real-world model, we use the following methods:\n\n(M_M_P_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M_T_E) .\n(M_M", "histories": [["v1", "Sat, 4 Jun 2016 14:12:32 GMT  (1033kb,D)", "http://arxiv.org/abs/1606.01380v1", "RoboCup 2016 Symposium"]], "COMMENTS": "RoboCup 2016 Symposium", "reviews": [], "SUBJECTS": "cs.AI cs.MA cs.RO", "authors": ["okan a\\c{s}{\\i}k", "h levent ak{\\i}n"], "accepted": false, "id": "1606.01380"}, "pdf": {"name": "1606.01380.pdf", "metadata": {"source": "CRF", "title": "Effective Multi-Robot Spatial Task Allocation using Model Approximations", "authors": ["Okan A\u015f\u0131k", "Levent Ak\u0131n"], "emails": ["akin}@boun.edu.tr"], "sections": [{"heading": "1 Introduction", "text": "Real-world multi-agent planning problems have a high complexity due to the curse of dimensionality. The number of agents also increases the complexity exponentially. Multi-agent planning can be defined as the coordination of a set of agents to get the highest possible reward from the environment they act in. Multi-agent planning has different categories, but in this work we consider only the centralized control of cooperative agents.\nThe spatial task allocation problem (SPATAP) is a subclass of multi-agent planning problems. In the SPATAP, a group of agents try to do the tasks which are spatially distributed to the environment. From the multi-agent planning perspective, the SPATAP has two important features; task interdependency, and agent interdependency. The tasks appear in the environment independently. Agents move in the environment without affecting each other. Despite these features, the SPATAP is still a complex multi-agent planning problem and cannot be solved using optimal algorithms as shown by Claes et. al [1].\nSPATAP is formalized as a Multi-agent Markov Decision Process (MMDP). The state space is defined by the agent and the task positions. The agents either move in the environment (such as grid world) or take the action to do the task at the current location. The reward is defined according to the total task completion. The complexity of a SPATAP is determined by the state space and the action space. The optimal MMDP algorithm cannot solve SPATAP problems having non-trivial number of locations, agents,\nar X\niv :1\n60 6.\n01 38\n0v 1\n[ cs\n.A I]\n4 J\nun 2\n01 6\ntasks and actions. There are two basic approaches to solve such complex MMDP problems; using approximate algorithms or approximate models. In this paper, we propose model approximations which are tailored for the SPATAPs.\nThe model approximation approach simplifies the given model and finds a solution for the simplified model as a proxy for the actual problem. The approximations aim to reduce the state space and action space of the actual problem. Claes et. al [1] propose a series of approximations for SPATAP planning. At every time step of the decision process, the method gets the current state of the actual problem and constructs a simpler model using the approximations. The algorithm calculates a policy for the simple model and the agents act on the actual decision process using the policy.\nThe approximations proposed by Claes et. al are subjective approximation, and phase approximation. The agent calculates the possible future positions of the agents by the assumption that they are the only agents in the environment. Then the agent can discount its own future reward according to the possibility of another agent being on that position. This removes the exponential complexity due to the number of agents in the state space. The agent assumes that a new task will not appear in the future. This also reduces the state space complexity due to the future tasks.\nWe extend the online planning framework of Claes et. al [1]. We first cluster tasks based on the distance between the tasks. Then, we first calculate the best cluster to go using the approximate model. Then, every agent plans only for the task in the assigned clusters. In these two levels of the planning, we apply subjective approximation and shortest-path pruning which removes the locations which are not on the shortest path between the agent and the tasks. We use Value Iteration [10] algorithm to calculate the best action, but we choose the planning horizon according to the time step required to reach k tasks.\nWe also generalize the SPATAP model from grid world to graph world where locations are represented by the vertices of a graph. We define Rescue Spatial Task Allocation Problem (Rescue-SPATAP) as an extension of SPATAP, and solve using SPATAP approximations. We show that the comparison with the optimal value not as good as pure SPATAP problems, but our method performs better than other algorithms including the SPATAP algorithm [1]. Finally, we apply our SPATAP approximations to RoboCup Rescue Simuation (RCRS) scenarios and have similar performance to Distributed Constraint Optimization (DCOP) methods of RMASBench [5]."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Multi-agent Markov Decision Process", "text": "A multi-agent Markov Decision Process (MMDP) is a mathematical formalization for the multi-agent planning in observable, but uncertain action environments.\nMultiagent MDP is 5-tuple \u3008D,S,A, T,R\u3009 where\n\u2013 D is the set of agents, \u2013 S is the finite set of states, \u2013 A is the finite set of joint actions (A1 \u00d7A2 \u00d7 ..\u00d7An),\n\u2013 T is the transition function which assigns probabilities for transitioning from one state to another given a joint action, \u2013 R is the immediate reward function.\nWe can solve an MMDP using the standard offline MDP planning algorithms such as value iteration [10]. The value iteration algorithm iteratively improves the estimation of the expected value of a state with the following Bellmann equation:\nQ(s, a) = R(s, a) + \u03b3 \u2211 s\u2032\u2208S T (s, a, s\u2032)V (s\u2032) (1)\nV (s) = max a\u2208A Q(s, a) (2)\ns stands for a state, a stands for a joint action and \u03b3 stands for the discount value to determine how valuable future rewards are."}, {"heading": "2.2 Rescue Spatial Task Allocation Problem", "text": "Spatial Task Allocation Problem (SPATAP) is introduced by Claes and et al. [1]. SPATAP is defined on a location set where a set of different tasks appear on different locations. Agents have movement actions (to move from one location to another) and also task actions (required to carry out a specific task). We can think of a grid world where there are two or more cleaning robots. Cleaning tasks appear at different cells on the grid world. Agents are supposed to act for cleaning tasks as efficiently as possible. Although the allocation of agents to their closest tasks would seem to be the optimal, the authors prove that SPATAP is as hard as MMDP.\nThe original SPATAP formulation models tasks as independent. Emergence of a task at a location is independent of other locations. We introduce the Rescue Spatial Task Allocation Problem (Rescue-SPATAP) where tasks are defined as fires and dependent on their neighbors, which makes Rescue-SPATAP harder than SPATAP. In RescueSPATAP, the location of initial tasks/fires are fixed at the start of the process and new tasks only appear based on the vicinity of the current tasks. In the SPATAP formulation, every task has the same reward, but in Rescue-SPATAP, if the agent extinguishes a fire, it gets a reward proportional to the size of the building. We show that the online approximations proposed for SPATAPs are also applicable for Rescue-SPATAPs.\nThe RoboCup Rescue Simulator (RCRS) has four mobile agents: fire brigades, police forces, ambulances, and civilians. There are also three stationary center agents which provide a communication channel for fire brigades, polices, and ambulances. There are three types of tasks: rescuing the civilians, firefighting, and removing the blockades on the road. In this study, we target the firefighting problem, but our approach is also applicable for all RCRS tasks because they can be defined as spatial task allocation problem. The simulator uses a map of the city. The map defines buildings and roads. The simulator creates a disaster scenario by defining fire ignition points. Since only buildings are flammable, the dynamic tasks emerge as the buildings are catching fire. The ultimate aim is to develop an algorithm to effectively allocate agents to the buildings which are on fire.\nWe define a Rescue-SPATAP based on the RCRS. The problem is defined on a graph world. The graph world has two types of vertices; buildings and roads as already defined in the RCRS. In the RCRS, buildings have fire levels: no fire, heating, burning, burnt, extinguished. However, to reduce the complexity, we define only two states: no fire, and burning. We map the RCRS fire states to the graph world fire states as follows:\n\u2013 no fire\u2190 { no fire, burnt, extinguished } \u2013 burning\u2190 { heating, burning }\nSince the fire simulator of the RCRS is quite complex to model [7], we model fire spreading as independent events where the building on fire affects the neighbor buildings\u2019 fire state. Every neighbor building in the vicinity of dmeters will add p probability to change the state from no fire to burning. The agents move on the graph by choosing the neighbors of the vertex where the agent is on (same as RCRS). Also, the building the agent is on stays in no fire state. In RCRS, agents extinguish fires based on the size of the building and the water the agent has in its tank. However, we simplify the fire extinguishing behavior by that an agent extinguishes the fire of the building which the agent is on, regardless of other factors. The reward is defined as the ratio of the sum of the area of the buildings which are in no fire state to the area of all buildings."}, {"heading": "3 Related Work", "text": "The teams in RoboCup Rescue Agent Simulation (RCRS) generally uses state-based strategies in behavioral agent frameworks 1. The teams prefer agent frameworks which enable them to exploit typical scenarios. These agent frameworks let the teams fine tune their behaviors according to the cases arising over the trial-error periods. In a recent study, Parker et al. report the performance of decentralized coalition formation approach for RCRS [8]. The agents use a greedy algorithm with a utility function which is designed for different tasks. They compare static and dynamic coalition formation with heterogeneous agents. Due to the different characteristics of every RCRS scenario, they found that different approaches may work well for different scenarios.\nIn the literature, the RCRS problem is also modeled as a task allocation problem. The tasks constitute rescuing a civilian, firefighting, and clearing the blockades. The tasks are discovered over time and agents do not know all the tasks of the current state. This distributed dynamic task allocation problem is modeled as the distributed constraint optimization problem (DCOP) [11] and solved using state of the art DCOP algorithms such as MaxSum [3], and DSA [4]. Pujol-Gonzalez et al. improve the computational efficiency of MaxSum by introducing Binary MaxSum for RCRS [9]. They also introduce a method to integrate team coordination to DCOPs. The authors show that, by defining coordination variables for police forces and fire brigades, they are able to improve the performance. Although these approaches have reasonable performances, they require a lot of domain knowledge to design good utility functions with inter-team coordination variables. Our approach has inherent capacity to represent different agent types without changing the problem definition.\n1 http://roborescue.sourceforge.net/blog/2015/08/ team-description-papers-tdps/\nThere are also attempts to solve fire task allocation problem with biologicallyinspired methods [2]. They propose a new algorithm, called eXtreme-Ants, where agents are modeled as insects which have response thresholds for tasks that are modeled as stimulus. They show that the performance of the algorithm is comparable to DCOP methods.\nRMASBench is an effort to provide a software repository to easily model RCRS as a DCOP and benchmark the different algorithms [5]. However, the current implementation requires the full state information of the simulation at every time step and the communication among DCOP agents isolated from RCRS. This hinders the application of the DCOP methods for RCRS. Also, modeling RCRS as task allocation problem neglects the dynamic nature of the problem and introduces the issue of designing good utility functions."}, {"heading": "4 Methods", "text": "We model the firefighting task of the RoboCup Rescue Simulation (RCRS) as a Multiagent Markov Decision Process(MMDP). We create an approximate MMDP model with single-agent, static task, shortest path pruning, task clustering, and online planning horizon approximations in our online planning framework.\nThe online planning framework gets the current state from the simulator (either Rescue-SPATAP simulator or RoboCup Rescue Simulator) and creates a new problem by clustering the near tasks together. Then, the approximations are applied to the clustered model to have less complex model. The policy for the approximated model is calculated using the Value Iteration [10] algorithm. We calculate the target of every agent by following the policies greedily to assign a cluster to every agent. Since we assigned a cluster to every agent, the model approximation and policy calculation is carried out considering only the tasks of the assigned clusters."}, {"heading": "4.1 Hierarchical Planning by Task Clustering", "text": "Before applying any approximations to the actual model of the problem, we create clusters to further reduce the complexity. Since fires propagate from the initial ignition points, tasks appear as a cluster. Therefore, we introduce a distance based task clustering algorithm. The tasks which are closer to each other more than d meters belong to the same cluster. We assign a cluster for every agent by model approximations and value iteration algorithm. After every agent is assigned to a cluster, we plan only for the tasks which belongs to the agent\u2019s cluster.\nTo create a cluster, we iterate over all the burning buildings and compare the distance between the building and the buildings in a cluster. If the building is closer than dmeters to one of the buildings which is in a cluster, the building is added to the cluster. The clustered buildings and their neighbors are removed. A new building for every cluster is created with the area equal to the sum of the area of the buildings in the cluster. Neighbors of the clustered buildings are also recreated as the neighbors of the cluster as seen in Figure 1.\nIn the SPATAP, the actions are taken according to the calculated value function, but our approach calculates a priority order of tasks for every agent using the depth-first graph traversal algorithm on the value function(taking the agent position as the root)."}, {"heading": "4.2 Single-Agent Approximation", "text": "The state space of multi-agent planning has exponential complexity due to the number of agents. To reduce this complexity, we plan as a single agent by using other agents\u2019 positions as an indication of their policies. We calculate a policy for all agents as if they are the only agent in the environment. Then, for every agent we calculate the other agents\u2019 total effect which is called presence mass [1]. Presence mass is the probability distribution of other agents\u2019 positions on the graph world.\nThe presence mass can be calculated only if we know the policy of the agents. We calculate a policy for every agent based on their positions on the graph by assuming that they are the only agent on the world. We use this policy to have an idea about the most desirable action from the perspective of that agent. To reflect the uncertainty, we use this policy to calculate a Boltzmann distribution over actions for every state. We define a Boltzmann distribution over the state-action values (the expected cumulative reward when an action is taken in a state). This distribution defines the probability of choosing an action in a state.\nThe best response of the agent based on the presence mass of other agents can be computed by changing the discount factor(\u03b3) of the Bellman equation (see Equation 1). By changing the discount factor value, we can punish the actions resulting on a position where other agents have high presence mass. Therefore, we discount the future expected reward according to presence mass as proposed by [1]:\nQi(si, ai) = R(si, ai) + \u2211 s\u2032i\u2208Si T (si, ai, s \u2032 i) [ (1\u2212 fi pmi(s\u2032i))Vi(s\u2032i) ] (3)\npmi(s \u2032 i) = \u2211 j 6=i Pr(sj = s \u2032 i|s)\nVi(si) = max ai Qi(si, ai)\nQi denotes the expected total reward for the agent i if it is in state si, and takes the action ai. Vi denotes the expected total reward for the agent i from the state s\u2032i. pm defines the presence mass of the other agents. The parameter fi which is used to scale the future value is calculated as the ratio of maximum reward to the maximum value as suggested by [1]."}, {"heading": "4.3 Static Task Approximation", "text": "We also aim to reduce the exponential complexity due to the fire levels of buildings. Therefore, we use the approximation proposed by [1] and redefine the state space to include only the buildings that are in burning state. Claes and et al. [1] propose this approximation for spatially distributed tasks where the occurrence of new tasks are independent. In the firefighting problem, there is the effect of neighbor buildings on the occurrence of new tasks. However, the propagation of fire on RCRS is slow such that we can plan considering only the buildings that are on fire without calculating their effects on their neighbors.\nThe deterministic actions and static task approximations on a graph world for a single agent MDP results in the following Bellman equation:\nV (s) = max s\u2032\u2208N(s)\nR(s\u2032) + \u03b3V (s\u2032) (4)\ns denotes the current state, s\u2032 the next state, N the neighbor function, \u03b3 is the discount factor and V stands for the value function. Since the actions are deterministic, reward function is only depended on the next state, s\u2032, and transition function (T ) is removed (i.e the action uniquely identifies the next state). Note that, we changed (s, a) term with s\u2032 since actions are deterministic. Every (s, a) term defines an s\u2032 (i.e. every action results in a single next state). N function defines the set of neighbor vertices of the given vertex (or state). This recursive equation will be calculated for h times with the initial values V (s) = 0 for h-horizon planning."}, {"heading": "4.4 The Shortest Path Approximation", "text": "The tractability of the Bellman equation depends on the state space and the transition function (i.e. neighbors). If the agent does not move to the vertex which is in burning state, the state can only be identified by the position of the agent. If we remove the neighbors which will not be visited by the agent, we achieve to reduce the state space and also branching factor of the transition function. The value iteration algorithm propagates rewards from the goal state, in our case this is one of the vertices which is in the burning state.\nWe calculate the shortest path between the agent and the vertices that are in burning state, and also all possible burning vertex pairs. Since the actions are deterministic and tasks are static, the optimal policy will result in a movement of the agent on the shortest path from its own position to the one of the tasks."}, {"heading": "4.5 Online Dynamic Planning Horizon", "text": "The running time of the value iteration algorithm for the finite horizon problems also depends on the planning horizon which determines the number of iterations of the algorithm. If we consider Rescue-SPATAP, we should plan according to the current time step of RCRS for the optimal performance. The RCRS simulation runs for 300 time steps. For example, if we are in 30th time step, we should construct our approximate model and plan with the value iteration for 300\u2212 30 = 270 time steps. However, since we already approximated the problem, it might not increase the performance after a certain horizon. Therefore, we propose to determine the planning horizon based on the reachability of the vertices that are in burning state.\nAs shown by Claes et al. [1], if the agents plan only for the k closest tasks, the algorithm still has reasonable performance. In the value iteration algorithm, the reward propagates from the vertex that is in burning state since the agent gets higher reward when it can change the state of the vertex from burning to no fire. For example, we can consider a graph world with the initial state shown in Figure 2. There are five vertices where the agent is located on the vertex 1 and the vertex 5 is in burning state. The agent should choose an action based on the values of the vertices 2 and 3. The three iterations of the value iteration algorithm for the example graph world can be seen in Figure 2. The values of the vertices correspond to the states where the agent is on\nthat vertex location. After the first and the second iterations of the algorithm, the agent cannot differentiate between the actions A1 and A2. However, after the third iteration of the algorithm, the agent can differentiate two vertices based on the value propagated to the vertex 2 and 3. In our small graph, three iterations of the algorithm is enough to differentiate two actions, but as the distance of the vertices that are in burning state increases, the minimum number of iteration of the algorithm will increase.\nTo calculate the planning horizon (i.e. the minimum number of iterations), we use the breath first graph traversal algorithm. We set the vertex of the agent as the root of the graph, and traverse the graph. When we find k numbers of burning vertices, we end the traversal and choose the last level of the tree as our planning horizon and remove the vertices which are not visited from our graph world."}, {"heading": "5 Experiments and Results", "text": "We evaluate the effectiveness of our approach on the sampled graphs from RCRS maps. All the experiments are implemented using the BURLAP [6] library."}, {"heading": "5.1 Comparison with The Optimal Policy", "text": "To measure the feasibility of our approach, we developed a Rescue-SPATAP simulator. We create 10 random scenarios having 8 buildings from five city graphs of RoboCup Rescue Simulation (RCRS), namely Istanbul, Berlin, Eindhoven, Joao Pessoa, and Kobe. The graph sampling can be seen as the random extraction of districts from a city map (see Figure 3).\nWe define three random ignition points and two agents which are positioned on random locations. In the initial state, ignition buildings are in the burning state. The distance of the building to propagate the fire is d = 50 meters and burning buildings add p = 0.05 probability to their neighbors\u2019 fire ignition. For example, if a building has 2 neighbor burning buildings, the probability of changing the state from no fire to burning will be (0.05 + 0.05) = 0.1. During all the experiments, we use the nearest burning building parameter as k = 3. Since we calculate the optimal policy for these simple graph worlds, we model agents\u2019 actions as deterministic to reduce the complexity. This assumption also complies with the RCRS in that the movement noise of agents is almost negligible, if we neglect the congestion of the roads.\nWe show the average expected reward per time step over a horizon of 20 steps in Table 1. We present the results for random agent, single-agent approximation, greedy agent, SPATAP and SPATAP-Ext agents for 50 randomly generated scenarios and 100 samples for every scenario. Single-agent algorithm plans using the value iteration algorithm as if they were the only agent in the world and act this way. Greedy agent chooses to go to the closest vertex that is in burning state. Random agents choose random actions. SPATAP denotes the online approximations proposed by Claes et al. [1]. The online approximations proposed in this study as an extension to SPATAP is shown as SPATAP-Ext. For single-agent and SPATAP algorithms, we coordinate the selection of vertices when two agents are at the same position so that two agents do not choose the same best action. For greedy algorithm and SPATAP-Ext, we coordinate the choice of the target so that two agents do not go to the same target. We show that our approach is better than other algorithms. All the competing algorithms achieve 87% of optimal average reward, but the SPATAP-Ext achieves 92%."}, {"heading": "5.2 Scalability", "text": "In Figure 4a, we show the average reward per time step for scenarios having different number of buildings. These scenarios have five agents and three random ignition points. The values are averaged over 50 runs and every run is set for 50 horizon. We can see that SPATAP-Ext performs better or equal compared to Greedy algorithm. Depending on the ignition points, agents\u2019 positions and graph, the difference between two algorithms might increase or decrease.\n1015202530354045 50 60 70 80 90 100 The number of vertices\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\n1.2\nTh e\nav er\nag e\nre w\nar d\npe r\ntim e\nst ep\nGreedy SPATAP-Ext\n(a) The average reward per time step versus the number of vertices (b) The average size of the state versus the time step\nDue to the approximations, we are able to have linear running time increases when the number of agents or the number buildings increases. The shortest path pruning and the dynamic planning horizon approximations result in further reduction in the size of the state space. We show the effect of these extensions in terms of the state space in\nFigure 4b. Our approach reduces the state space by thousandfold compared to SPATAP only approximations. We use 10 runs of a sample scenario having 10 buildings and 2 agents."}, {"heading": "5.3 RoboCup Rescue RMASBench", "text": "To benchmark SPATAP-Ext, we created 10 scenarios on the test map (having 37 buildings) of the RCRS. All of the scenarios 2 have five to ten ignition points, 8 agents\n2 Test scenarios: https://github.com/okanasik/spatial_task_allocation\nin random positions and 100 horizon 3. The agents do not act before the 20th time step of the simulation to ensure the propagation of the fire. The score of the RCRS at the end of the simulation is shown in Table 2. Since the fire propagation behavior is not randomized, we report results over a single run. This score represents the percentage of the damage on the city. We compare the performance of the SPATAP-Ext with DCOP algorithms (Greedy, DSA, BinaryMaxSum) of the RMASBench [5]. Although DCOP methods generally perform better than SPATAP-Ext, they have the advantage of well-tuned utility function. Another important factor affecting the performance of SPATAP-Ext is the assumption that a single agent can extinguish a fire in a single time step irrespective of the size of the building. This results in the distinct targets for every agent and increases the chances of the propagation of the fire. In RCRS, if more agents act to extinguish a fire, the faster the fire will be extinguished. When we analyze the results, we see that even DCOP greedy agent performs better than other methods, this suggest that reflex behavior is more important for such small maps.\nTo increase the performance of SPATAP-Ext agents on RCRS, we also create a set of buildings in unit sizes to enable more agents to extinguish the same building. Although this improved the performance, we see that agents are more likely to choose the closer buildings."}, {"heading": "6 Conclusion", "text": "We show the application of online approximations for one of the challenging multiagent planning problems. Our approach extends SPATAP framework with the introduction of the shortest path pruning, dynamic planning horizon and task clustering approximations for a harder problem Rescue-SPATAP. We show that our approach is better than Greedy approach and has similar performance to SPATAP, but requires less computation.\n3 An example run can be seen here: https://youtu.be/nuj8s9aFAlg\nAs a future work, we plan to extend this framework for heterogeneous agents to model whole RCRS problem. By introducing partial observability, communication, and decentralized planning, we plan to fully implement online planning framework for RCRS. We will also reduce the complexity by introducing macro-actions."}], "references": [{"title": "Effective Approximations for Multi-Robot Coordination in Spatially Distributed Tasks", "author": ["D. Claes", "P. Robbel", "F.A. Oliehoek", "K. Tuyls", "D. Hennes", "W. van der Hoek"], "venue": "Proceedings of the 14th International Conference on Autonomous Agents and Multiagent Systems. pp. 881\u2013890", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Towards efficient multiagent task allocation in the robocup rescue: a biologically-inspired approach", "author": ["F. Dos Santos", "A.L. Bazzan"], "venue": "Autonomous Agents and Multi-Agent Systems 22(3), 465\u2013486", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2011}, {"title": "Decentralised Coordination of LowPower Embedded Devices Using the Max-Sum Algorithm", "author": ["A. Farinelli", "A. Rogers", "A. Petcu", "N.R. Jennings"], "venue": "Proceedings of the 7th International Joint Conference on Autonomous Agents and Multiagent Systems (AAMAS). pp. 639\u2013646", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2008}, {"title": "Distributed Coordination through Anarchic Optimization", "author": ["S. Fitzpatrick", "L. Meertens"], "venue": "Distributed Sensor Networks: A Multiagent Perspective, pp. 257\u2013295", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2003}, {"title": "Rmasbench: Benchmarking dynamic multi-agent coordination in urban search and rescue", "author": ["A. Kleiner", "A. Farinelli", "S. Ramchurn", "B. Shi", "F. Maffioletti", "R. Reffato"], "venue": "Proceedings of the 2013 International Conference on Autonomous Agents and Multi-agent Systems. pp. 1195\u20131196. AAMAS \u201913, International Foundation for Autonomous Agents and Multiagent Systems, Richland, SC", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Burlap library (2016), http://burlap.cs.brown.edu", "author": ["J. MacGlashan"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Approaching Urban Disaster Reality : The ResQ Firesimulator", "author": ["T.A. N\u00fcssle", "A. Kleiner", "M. Brenner"], "venue": "RoboCup 2004: Robot Soccer World Cup VIII. pp. 474\u2013482. Springer", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "Exploiting spatial locality and heterogeneity of agents for search and rescue teamwork", "author": ["J. Parker", "E. Nunes", "J. Godoy", "M. Gini"], "venue": "Journal of Field Robotics 7(PART 1), n/a\u2013n/a", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Efficient Inter-Team Task Allocation in RoboCup Rescue", "author": ["M. Pujol-Gonzalez", "J. Cerquides", "A. Farinelli", "P. Meseguer", "J.A. Rodriguez-Aguilar"], "venue": "Proceedings of the 14th International Conference on Autonomous Agents and Multiagent Systems. pp. 413\u2013421", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Markov decision processes: discrete stochastic dynamic programming", "author": ["M.L. Puterman"], "venue": "John Wiley & Sons", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2014}, {"title": "Allocating tasks in extreme teams", "author": ["P. Scerri", "A. Farinelli", "S. Okamoto", "M. Tambe"], "venue": "Proceedings of the fourth international joint conference on Autonomous agents and multiagent systems. pp. 727\u2013734. ACM", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}], "referenceMentions": [{"referenceID": 0, "context": "al [1].", "startOffset": 3, "endOffset": 6}, {"referenceID": 0, "context": "al [1] propose a series of approximations for SPATAP planning.", "startOffset": 3, "endOffset": 6}, {"referenceID": 0, "context": "al [1].", "startOffset": 3, "endOffset": 6}, {"referenceID": 9, "context": "We use Value Iteration [10] algorithm to calculate the best action, but we choose the planning horizon according to the time step required to reach k tasks.", "startOffset": 23, "endOffset": 27}, {"referenceID": 0, "context": "We show that the comparison with the optimal value not as good as pure SPATAP problems, but our method performs better than other algorithms including the SPATAP algorithm [1].", "startOffset": 172, "endOffset": 175}, {"referenceID": 4, "context": "Finally, we apply our SPATAP approximations to RoboCup Rescue Simuation (RCRS) scenarios and have similar performance to Distributed Constraint Optimization (DCOP) methods of RMASBench [5].", "startOffset": 185, "endOffset": 188}, {"referenceID": 9, "context": "We can solve an MMDP using the standard offline MDP planning algorithms such as value iteration [10].", "startOffset": 96, "endOffset": 100}, {"referenceID": 0, "context": "[1].", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "Since the fire simulator of the RCRS is quite complex to model [7], we model fire spreading as independent events where the building on fire affects the neighbor buildings\u2019 fire state.", "startOffset": 63, "endOffset": 66}, {"referenceID": 7, "context": "report the performance of decentralized coalition formation approach for RCRS [8].", "startOffset": 78, "endOffset": 81}, {"referenceID": 10, "context": "This distributed dynamic task allocation problem is modeled as the distributed constraint optimization problem (DCOP) [11] and solved using state of the art DCOP algorithms such as MaxSum [3], and DSA [4].", "startOffset": 118, "endOffset": 122}, {"referenceID": 2, "context": "This distributed dynamic task allocation problem is modeled as the distributed constraint optimization problem (DCOP) [11] and solved using state of the art DCOP algorithms such as MaxSum [3], and DSA [4].", "startOffset": 188, "endOffset": 191}, {"referenceID": 3, "context": "This distributed dynamic task allocation problem is modeled as the distributed constraint optimization problem (DCOP) [11] and solved using state of the art DCOP algorithms such as MaxSum [3], and DSA [4].", "startOffset": 201, "endOffset": 204}, {"referenceID": 8, "context": "improve the computational efficiency of MaxSum by introducing Binary MaxSum for RCRS [9].", "startOffset": 85, "endOffset": 88}, {"referenceID": 1, "context": "There are also attempts to solve fire task allocation problem with biologicallyinspired methods [2].", "startOffset": 96, "endOffset": 99}, {"referenceID": 4, "context": "RMASBench is an effort to provide a software repository to easily model RCRS as a DCOP and benchmark the different algorithms [5].", "startOffset": 126, "endOffset": 129}, {"referenceID": 9, "context": "The policy for the approximated model is calculated using the Value Iteration [10] algorithm.", "startOffset": 78, "endOffset": 82}, {"referenceID": 0, "context": "Then, for every agent we calculate the other agents\u2019 total effect which is called presence mass [1].", "startOffset": 96, "endOffset": 99}, {"referenceID": 0, "context": "Therefore, we discount the future expected reward according to presence mass as proposed by [1]:", "startOffset": 92, "endOffset": 95}, {"referenceID": 0, "context": "The parameter fi which is used to scale the future value is calculated as the ratio of maximum reward to the maximum value as suggested by [1].", "startOffset": 139, "endOffset": 142}, {"referenceID": 0, "context": "Therefore, we use the approximation proposed by [1] and redefine the state space to include only the buildings that are in burning state.", "startOffset": 48, "endOffset": 51}, {"referenceID": 0, "context": "[1] propose this approximation for spatially distributed tasks where the occurrence of new tasks are independent.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "[1], if the agents plan only for the k closest tasks, the algorithm still has reasonable performance.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "All the experiments are implemented using the BURLAP [6] library.", "startOffset": 53, "endOffset": 56}, {"referenceID": 0, "context": "[1].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "We compare the performance of the SPATAP-Ext with DCOP algorithms (Greedy, DSA, BinaryMaxSum) of the RMASBench [5].", "startOffset": 111, "endOffset": 114}], "year": 2016, "abstractText": "Real-world multi-agent planning problems cannot be solved using decision-theoretic planning methods due to the exponential complexity. We approximate firefighting in rescue simulation as a spatially distributed task and model with multi-agent Markov decision process. We use recent approximation methods for spatial task problems to reduce the model complexity. Our approximations are single-agent, static task, shortest path pruning, dynamic planning horizon, and task clustering. We create scenarios from RoboCup Rescue Simulation maps and evaluate our methods on these graph worlds. The results show that our approach is faster and better than comparable methods and has negligible performance loss compared to the optimal policy. We also show that our method has a similar performance as DCOP methods on example RCRS scenarios.", "creator": "LaTeX with hyperref package"}}}