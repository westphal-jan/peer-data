{"id": "1606.03498", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Jun-2016", "title": "Improved Techniques for Training GANs", "abstract": "We present a variety of new architectural features and training procedures that we apply to the generative adversarial networks (GANs) framework. We focus on two applications of GANs: semi-supervised learning, and the generation of images that humans find visually realistic. Unlike most work on generative models, our primary goal is not to train a model that assigns high likelihood to test data, nor do we require the model to be able to learn well without using any labels, parameters, or labels. Rather, we aim to train model architectures that do not produce images for humans. By using this approach, we demonstrate the benefits of using the \"new\" model to design a new neural network. Our goal is to train model architectures that do not directly rely on labels, parameters, or labels as a means of learning.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Fri, 10 Jun 2016 22:53:35 GMT  (5720kb,D)", "http://arxiv.org/abs/1606.03498v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["tim salimans", "ian j goodfellow", "wojciech zaremba", "vicki cheung", "alec radford", "xi chen"], "accepted": true, "id": "1606.03498"}, "pdf": {"name": "1606.03498.pdf", "metadata": {"source": "CRF", "title": "Improved Techniques for Training GANs", "authors": ["Tim Salimans", "Ian Goodfellow", "Wojciech Zaremba", "Vicki Cheung"], "emails": ["tim@openai.com", "ian@openai.com", "woj@openai.com", "vicki@openai.com", "alec.radford@gmail.com", "peter@openai.com"], "sections": [{"heading": null, "text": "We present a variety of new architectural features and training procedures that we apply to the generative adversarial networks (GANs) framework. We focus on two applications of GANs: semi-supervised learning, and the generation of images that humans find visually realistic. Unlike most work on generative models, our primary goal is not to train a model that assigns high likelihood to test data, nor do we require the model to be able to learn well without using any labels. Using our new techniques, we achieve state-of-the-art results in semi-supervised classification on MNIST, CIFAR-10 and SVHN. The generated images are of high quality as confirmed by a visual Turing test: our model generates MNIST samples that humans cannot distinguish from real data, and CIFAR-10 samples that yield a human error rate of 21.3%. We also present ImageNet samples with unprecedented resolution and show that our methods enable the model to learn recognizable features of ImageNet classes."}, {"heading": "1 Introduction", "text": "Generative adversarial networks [1] (GANs) are a class of methods for learning generative models based on game theory. The goal of GANs is to train a generator network G(z;\u03b8(G)) that produces samples from the data distribution, pdata(x), by transforming vectors of noise z as x = G(z;\u03b8(G)). The training signal for G is provided by a discriminator network D(x) that is trained to distinguish samples from the generator distribution pmodel(x) from real data. The generator network G in turn is then trained to fool the discriminator into accepting its outputs as being real.\nRecent applications of GANs have shown that they can produce excellent samples [2, 3]. However, training GANs requires finding a Nash equilibrium of a non-convex game with continuous, highdimensional parameters. GANs are typically trained using gradient descent techniques that are designed to find a low value of a cost function, rather than to find the Nash equilibrium of a game. When used to seek for a Nash equilibrium, these algorithms may fail to converge [4].\nIn this work, we introduce several techniques intended to encourage convergence of the GANs game. These techniques are motivated by a heuristic understanding of the non-convergence problem. They lead to improved semi-supervised learning peformance and improved sample generation. We hope that some of them may form the basis for future work, providing formal guarantees of convergence.\nAll code and hyperparameters may be found at: https://github.com/openai/ improved_gan\nar X\niv :1\n60 6.\n03 49\n8v 1\n[ cs\n.L G\n] 1\n0 Ju\nn 20"}, {"heading": "2 Related work", "text": "Several recent papers focus on improving the stability of training and the resulting perceptual quality of GAN samples [2, 3, 5, 6]. We build on some of these techniques in this work. For instance, we use some of the \u201cDCGAN\u201d architectural innovations proposed in Radford et al. [3], as discussed below.\nOne of our proposed techniques, feature matching, discussed in Sec. 3.1, is similar in spirit to approaches that use maximum mean discrepancy [7, 8, 9] to train generator networks [10, 11]. Another of our proposed techniques, minibatch features, is based in part on ideas used for batch normalization [12], while our proposed virtual batch normalization is a direct extension of batch normalization.\nOne of the primary goals of this work is to improve the effectiveness of generative adversarial networks for semi-supervised learning (improving the performance of a supervised task, in this case, classification, by learning on additional unlabeled examples). Like many deep generative models, GANs have previously been applied to semi-supervised learning [13, 14], and our work can be seen as a continuation and refinement of this effort."}, {"heading": "3 Toward Convergent GAN Training", "text": "Training GANs consists in finding a Nash equilibrium to a two-player non-cooperative game. Each player wishes to minimize its own cost function, J (D)(\u03b8(D),\u03b8(G)) for the discriminator and J (G)(\u03b8(D),\u03b8(G)) for the generator. A Nash equilibirum is a point (\u03b8(D),\u03b8(G)) such that J (D) is at a minimum with respect to \u03b8(D) and J (G) is at a minimum with respect to \u03b8(G). Unfortunately, finding Nash equilibria is a very difficult problem. Algorithms exist for specialized cases, but we are not aware of any that are feasible to apply to the GAN game, where the cost functions are non-convex, the parameters are continuous, and the parameter space is extremely high-dimensional.\nThe idea that a Nash equilibrium occurs when each player has minimal cost seems to intuitively motivate the idea of using traditional gradient-based minimization techniques to minimize each player\u2019s cost simultaneously. Unfortunately, a modification to \u03b8(D) that reduces J (D) can increase J (G), and a modification to \u03b8(G) that reduces J (G) can increase J (D). Gradient descent thus fails to converge for many games. For example, when one player minimizes xy with respect to x and another player minimizes \u2212xy with respect to y, gradient descent enters a stable orbit, rather than converging to x = y = 0, the desired equilibrium point [15]. Previous approaches to GAN training have thus applied gradient descent on each player\u2019s cost simultaneously, despite the lack of guarantee that this procedure will converge. We introduce the following techniques that are heuristically motivated to encourage convergence:"}, {"heading": "3.1 Feature matching", "text": "Feature matching addresses the instability of GANs by specifying a new objective for the generator that prevents it from overtraining on the current discriminator. Instead of directly maximizing the output of the discriminator, the new objective requires the generator to generate data that matches the statistics of the real data, where we use the discriminator only to specify the statistics that we think are worth matching. Specifically, we train the generator to match the expected value of the features on an intermediate layer of the discriminator. This is a natural choice of statistics for the generator to match, since by training the discriminator we ask it to find those features that are most discriminative of real data versus data generated by the current model.\nLetting f(x) denote activations on an intermediate layer of the discriminator, our new objective for the generator is defined as: ||Ex\u223cpdataf(x) \u2212 Ez\u223cpz(z)f(G(z))||22. The discriminator, and hence f(x), are trained in the usual way. As with regular GAN training, the objective has a fixed point where G exactly matches the distribution of training data. We have no guarantee of reaching this fixed point in practice, but our empirical results indicate that feature matching is indeed effective in situations where regular GAN becomes unstable."}, {"heading": "3.2 Minibatch discrimination", "text": "One of the main failure modes for GAN is for the generator to collapse to a parameter setting where it always emits the same point. When collapse to a single mode is imminent, the gradient of the discriminator may point in similar directions for many similar points. Because the discriminator processes each example independently, there is no coordination between its gradients, and thus no mechanism to tell the outputs of the generator to become more dissimilar to each other. Instead, all outputs race toward a single point that the discriminator currently believes is highly realistic. After collapse has occurred, the discriminator learns that this single point comes from the generator, but gradient descent is unable to separate the identical outputs. The gradients of the discriminator then push the single point produced by the generator around space forever, and the algorithm cannot converge to a distribution with the correct amount of entropy. An obvious strategy to avoid this type of failure is to allow the discriminator to look at multiple data examples in combination, and perform what we call minibatch discrimination.\nThe concept of minibatch discrimination is quite general: any discriminator model that looks at multiple examples in combination, rather than in isolation, could potentially help avoid collapse of the generator. In fact, the successful application of batch normalization in the discriminator by Radford et al. [3] is well explained from this perspective. So far, however, we have restricted our experiments to models that explicitly aim to identify generator samples that are particularly close together. One successful specification for modelling the closeness between examples in a minibatch is as follows: Let f(xi) \u2208 RA denote a vector of features for input xi, produced by some intermediate layer in the discriminator. We then multiply the vector f(xi) by a tensor T \u2208 RA\u00d7B\u00d7C , which results in a matrix Mi \u2208 RB\u00d7C . We then compute the L1-distance between the rows of the resulting matrix Mi across samples i \u2208 {1, 2, . . . , n} and apply a negative exponential (Fig. 1): cb(xi,xj) = exp(\u2212||Mi,b \u2212 Mj,b||L1) \u2208 R.\nThe output o(xi) for this minibatch layer for a sample xi is then defined as the sum of the cb(xi,xj)\u2019s to all other samples:\no(xi)b = n\u2211 j=1 cb(xi,xj) \u2208 R\no(xi) = [ o(xi)1, o(xi)2, . . . , o(xi)B ] \u2208 RB\no(X) \u2208 Rn\u00d7B\nNext, we concatenate the output o(xi) of the minibatch layer with the intermediate features f(xi) that were its input, and we feed the result into the next layer of the discriminator. We compute these minibatch features separately for samples from the generator and from the training data. As before, the discriminator is still required to output a single number for each example indicating how\nlikely it is to come from the training data: The task of the discriminator is thus effectively still to classify single examples as real data or generated data, but it is now able to use the other examples in the minibatch as side information. Minibatch discrimination allows us to generate visually appealing samples very quickly, and in this regard it is superior to feature matching (Section 6). Interestingly, however, feature matching was found to work much better if the goal is to obtain a strong classifier using the approach to semi-supervised learning described in Section 5."}, {"heading": "3.3 Historical averaging", "text": "When applying this technique, we modify each player\u2019s cost to include a term ||\u03b8\u2212 1t \u2211t i=1 \u03b8[i]||2, where \u03b8[i] is the value of the parameters at past time i. The historical average of the parameters can be updated in an online fashion so this learning rule scales well to long time series. This approach is loosely inspired by the fictitious play [16] algorithm that can find equilibria in other kinds of games. We found that our approach was able to find equilibria of low-dimensional, continuous non-convex games, such as the minimax game with one player controlling x, the other player controlling y, and value function (f(x) \u2212 1)(y \u2212 1), where f(x) = x for x < 0 and f(x) = x2 otherwise. For\nthese same toy games, gradient descent fails by going into extended orbits that do not approach the equilibrium point."}, {"heading": "3.4 One-sided label smoothing", "text": "Label smoothing, a technique from the 1980s recently independently re-discovered by Szegedy et. al [17], replaces the 0 and 1 targets for a classifier with smoothed values, like .9 or .1, and was recently shown to reduce the vulnerability of neural networks to adversarial examples [18].\nReplacing positive classification targets with \u03b1 and negative targets with \u03b2, the optimal discriminator becomes D(x) = \u03b1pdata(x)+\u03b2pmodel(x)pdata(x)+pmodel(x) . The presence of pmodel in the numerator is problematic because, in areas where pdata is approximately zero and pmodel is large, erroneous samples from pmodel have no incentive to move nearer to the data. We therefore smooth only the positive labels to \u03b1, leaving negative labels set to 0."}, {"heading": "3.5 Virtual batch normalization", "text": "Batch normalization greatly improves optimization of neural networks, and was shown to be highly effective for DCGANs [3]. However, it causes the output of a neural network for an input example x to be highly dependent on several other inputs x\u2032 in the same minibatch. To avoid this problem we introduce virtual batch normalization (VBN), in which each example x is normalized based on the statistics collected on a reference batch of examples that are chosen once and fixed at the start of training, and on x itself. The reference batch is normalized using only its own statistics. VBN is computationally expensive because it requires running forward propagation on two minibatches of data, so we use it only in the generator network."}, {"heading": "4 Assessment of image quality", "text": "Generative adversarial networks lack an objective function, which makes it difficult to compare performance of different models. One intuitive metric of performance can be obtained by having human annotators judge the visual quality of samples [2]. We automate this process using Amazon Mechanical Turk (MTurk), using the web interface in figure Fig. 2 (live at http://infinite-chamber-35121.herokuapp.com/ cifar-minibatch/), which we use to ask annotators to distinguish between generated data and real data. The resulting quality assessments of our models are described in Section 6.\nAs an alternative to human annotators, we propose an automatic method to evaluate samples, which we find to correlate well with human evaluation: We apply the Inception model1 [19] to every generated image to get the conditional label distribution p(y|x). Images that contain meaningful objects should have a conditional label distribution p(y|x) with low entropy. Moreover, we expect the model to generate varied images, so the marginal \u222b p(y|x = G(z))dz should have high entropy. Combining these two requirements, the metric that we propose is: exp(ExKL(p(y|x)||p(y))), where we exponentiate results so the values are easier to compare. Our Inception score is closely related to the objective used for training generative models in CatGAN [14]: Although we had less success using such an objective for training, we find it is a good metric for evaluation that correlates very\n1We use the pretrained Inception model from http://download.tensorflow.org/models/ image/imagenet/inception-2015-12-05.tgz. Code to compute the Inception score with this model will be made available by the time of publication.\nwell with human judgment. We find that it\u2019s important to evaluate the metric on a large enough number of samples (i.e. 50k) as part of this metric measures diversity."}, {"heading": "5 Semi-supervised learning", "text": "Consider a standard classifier for classifying a data point x into one of K possible classes. Such a model takes in x as input and outputs a K-dimensional vector of logits {l1, . . . , lK}, that can be turned into class probabilities by applying the softmax: pmodel(y = j|x) = exp(lj)\u2211K\nk=1 exp(lk) . In\nsupervised learning, such a model is then trained by minimizing the cross-entropy between the observed labels and the model predictive distribution pmodel(y|x). We can do semi-supervised learning with any standard classifier by simply adding samples from the GAN generator G to our data set, labeling them with a new \u201cgenerated\u201d class y = K + 1, and correspondingly increasing the dimension of our classifier output from K to K + 1. We may then use pmodel(y = K + 1 | x) to supply the probability that x is fake, corresponding to 1 \u2212D(x) in the original GAN framework. We can now also learn from unlabeled data, as long as we know that it corresponds to one of the K classes of real data by maximizing log pmodel(y \u2208 {1, . . . ,K}|x). Assuming half of our data set consists of real data and half of it is generated (this is arbitrary), our loss function for training the classifier then becomes\nL = \u2212Ex,y\u223cpdata(x,y)[log pmodel(y|x)]\u2212 Ex\u223cG[log pmodel(y = K + 1|x)] = Lsupervised + Lunsupervised, where\nLsupervised = \u2212Ex,y\u223cpdata(x,y) log pmodel(y|x, y < K + 1) Lunsupervised = \u2212{Ex\u223cpdata(x) log[1\u2212 pmodel(y = K + 1|x)] + Ex\u223cG log[pmodel(y = K + 1|x)]},\nwhere we have decomposed the total cross-entropy loss into our standard supervised loss function Lsupervised (the negative log probability of the label, given that the data is real) and an unsupervised loss Lunsupervised which is in fact the standard GAN game-value as becomes evident when we substitute D(x) = 1\u2212 pmodel(y = K + 1|x) into the expression:\nLunsupervised = \u2212{Ex\u223cpdata(x) logD(x) + Ez\u223cnoise log(1\u2212D(G(z)))}.\nThe optimal solution for minimizing both Lsupervised and Lunsupervised is to have exp[lj(x)] = c(x)p(y=j,x)\u2200j<K+1 and exp[lK+1(x)] = c(x)pG(x) for some undetermined scaling function c(x). The unsupervised loss is thus consistent with the supervised loss in the sense of Sutskever et al. [13], and we can hope to better estimate this optimal solution from the data by minimizing these two loss functions jointly. In practice, Lunsupervised will only help if it is not trivial to minimize for our classifier and we thus need to train G to approximate the data distribution. One way to do this is by training G to minimize the GAN game-value, using the discriminator D defined by our classifier. This approach introduces an interaction between G and our classifier that we do not fully understand yet, but empirically we find that optimizing G using feature matching GAN works very well for semi-supervised learning, while training G using GAN with minibatch discrimination does not work at all. Here we present our empirical results using this approach; developing a full theoretical understanding of the interaction between D and G using this approach is left for future work.\nFinally, note that our classifier with K + 1 outputs is over-parameterized: subtracting a general function f(x) from each output logit, i.e. setting lj(x) \u2190 lj(x) \u2212 f(x)\u2200j, does not change the output of the softmax. This means we may equivalently fix lK+1(x) = 0\u2200x, in which case Lsupervised becomes the standard supervised loss function of our original classifier with K classes, and our discriminator D is given by D(x) = Z(x)Z(x)+1 , where Z(x) = \u2211K k=1 exp[lk(x)]."}, {"heading": "5.1 Importance of labels for image quality", "text": "Besides achieving state-of-the-art results in semi-supervised learning, the approach described above also has the surprising effect of improving the quality of generated images as judged by human annotators. The reason appears to be that the human visual system is strongly attuned to image statistics that can help infer what class of object an image represents, while it is presumably less sensitive to local statistics that are less important for interpretation of the image. This is supported\nby the high correlation we find between the quality reported by human annotators and the Inception score we developed in Section 4, which is explicitly constructed to measure the \u201cobjectness\u201d of a generated image. By having the discriminatorD classify the object shown in the image, we bias it to develop an internal representation that puts emphasis on the same features humans emphasize. This effect can be understood as a method for transfer learning, and could potentially be applied much more broadly. We leave further exploration of this possibility for future work."}, {"heading": "6 Experiments", "text": "We performed semi-supervised experiments on MNIST, CIFAR-10 and SVHN, and sample generation experiments on MNIST, CIFAR-10, SVHN and ImageNet. We provide code to reproduce the majority of our experiments.\n6.1 MNIST\nThe MNIST dataset contains 60, 000 labeled images of digits. We perform semi-supervised training with a small randomly picked fraction of these, considering setups with 20, 50, 100, and 200 labeled examples. Results are averaged over 10 random subsets of labeled data, each chosen to have a balanced number of examples from each class. The remaining training images are provided without labels. Our networks have 5 hidden layers each. We use weight normalization [20] and add Gaussian noise to the output of each layer of the discriminator. Table 1 summarizes our results.\nSamples generated by the generator during semi-supervised learning using feature matching (Section 3.1) do not look visually appealing (left Fig. 3). By using minibatch discrimination\ninstead (Section 3.2) we can improve their visual quality. On MTurk, annotators were able to distinguish samples in 52.4% of cases (2000 votes total), where 50% would be obtained by random guessing. Similarly, researchers in our institution were not able to find any artifacts that would allow them to distinguish samples. However, semi-supervised learning with minibatch discrimination does not produce as good a classifier as does feature matching."}, {"heading": "6.2 CIFAR-10", "text": "CIFAR-10 is a small, well studied dataset of 32 \u00d7 32 natural images. We use this data set to study semi-supervised learning, as well as to examine the visual quality of samples that can be achieved. For the discriminator in our GAN we use a 9 layer deep convolutional network with dropout and weight normalization. The generator is a 4 layer deep CNN with batch normalization. Table 2 summarizes our results on the semi-supervised learning task.\nWhen presented with 50% real and 50% fake data generated by our best CIFAR-10 model, MTurk users correctly categorized 78.7% of images correctly. However, MTurk users may not be sufficiently familiar with CIFAR-10 images or sufficiently motivated; we ourselves were able to categorize images with > 95% accuracy. We validated the Inception score described above by observing that MTurk accuracy drops to 71.4% when the data is filtered by using only the top 1% of samples according to the Inception score. We performed a series of ablation experiments to demonstrate that our proposed techniques improve the Inception score, presented in Table 3. We also present images for these ablation experiments\u2014in our opinion, the Inception score correlates well with our subjective judgment of image quality. Samples from the dataset achieve the highest value. All the models that even partially collapse have relatively low scores. We caution that the Inception score should be used as a rough guide to evaluate models that were trained via some independent criterion; directly optimizing Inception score will lead to the generation of adversarial examples [25]."}, {"heading": "6.3 SVHN", "text": "For the SVHN data set, we used the same architecture and experimental setup as for CIFAR-10."}, {"heading": "6.4 ImageNet", "text": "We tested our techniques on a dataset of unprecedented scale: 128 \u00d7 128 images from the ILSVRC2012 dataset with 1,000 categories. To our knowledge, no previous publication has applied a generative model to a dataset with both this large of a resolution and this large a number of object classes. The large number of object classes is particularly challenging for GANs due to their tendency to underestimate the entropy in the distribution. We extensively modified a publicly available implementation of DCGANs2 using TensorFlow [26] to achieve high performance, using a multi-GPU implementation. DCGANs without modification learn some basic image statistics and generate contiguous shapes with somewhat natural color and texture but do not learn any objects. Using the techniques described in this paper, GANs learn to generate objects that resemble animals, but with incorrect anatomy. Results are shown in Fig. 6.\n2https://github.com/carpedm20/DCGAN-tensorflow"}, {"heading": "7 Conclusion", "text": "Generative adversarial networks are a promising class of generative models that has so far been held back by unstable training and by the lack of a proper evaluation metric. This work presents partial solutions to both of these problems. We propose several techniques to stabilize training that allow us to train models that were previously untrainable. Moreover, our proposed evaluation metric (the Inception score) gives us a basis for comparing the quality of these models. We apply our techniques to the problem of semi-supervised learning, achieving state-of-the-art results on a number of different data sets in computer vision. The contributions made in this work are of a practical nature; we hope to develop a more rigorous theoretical understanding in future work."}], "references": [{"title": "Generative adversarial nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza"], "venue": "In NIPS,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Deep generative image models using a laplacian pyramid of adversarial networks", "author": ["Emily Denton", "Soumith Chintala", "Arthur Szlam", "Rob Fergus"], "venue": "arXiv preprint arXiv:1506.05751,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "author": ["Alec Radford", "Luke Metz", "Soumith Chintala"], "venue": "arXiv preprint arXiv:1511.06434,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "On distinguishability criteria for estimating generative models", "author": ["Ian J Goodfellow"], "venue": "arXiv preprint arXiv:1412.6515,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Generating images with recurrent adversarial networks", "author": ["Daniel Jiwoong Im", "Chris Dongjoo Kim", "Hui Jiang", "Roland Memisevic"], "venue": "arXiv preprint arXiv:1602.05110,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Pixel-level domain transfer", "author": ["Donggeun Yoo", "Namil Kim", "Sunggyun Park", "Anthony S Paek", "In So Kweon"], "venue": "arXiv preprint arXiv:1603.07442,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Measuring statistical dependence with hilbert-schmidt norms", "author": ["Arthur Gretton", "Olivier Bousquet", "Alex Smola", "Bernhard Sch\u00f6lkopf"], "venue": "In Algorithmic learning theory,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "Kernel measures of conditional dependence", "author": ["Kenji Fukumizu", "Arthur Gretton", "Xiaohai Sun", "Bernhard Sch\u00f6lkopf"], "venue": "In NIPS,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2007}, {"title": "A hilbert space embedding for distributions", "author": ["Alex Smola", "Arthur Gretton", "Le Song", "Bernhard Sch\u00f6lkopf"], "venue": "In Algorithmic learning theory,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2007}, {"title": "Generative moment matching", "author": ["Yujia Li", "Kevin Swersky", "Richard S. Zemel"], "venue": "networks. CoRR,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Training generative neural networks via maximum mean discrepancy optimization", "author": ["Gintare Karolina Dziugaite", "Daniel M Roy", "Zoubin Ghahramani"], "venue": "arXiv preprint arXiv:1505.03906,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "arXiv preprint arXiv:1502.03167,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Towards principled unsupervised learning", "author": ["Ilya Sutskever", "Rafal Jozefowicz", "Karol Gregor"], "venue": "arXiv preprint arXiv:1511.06440,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "Unsupervised and semi-supervised learning with categorical generative adversarial networks", "author": ["Jost Tobias Springenberg"], "venue": "arXiv preprint arXiv:1511.06390,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Iterative solution of games by fictitious play", "author": ["George W Brown"], "venue": "Activity analysis of production and allocation,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1951}, {"title": "Rethinking the Inception Architecture for Computer Vision", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens", "Z. Wojna"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Adversarial perturbations of deep neural networks", "author": ["David Warde-Farley", "Ian Goodfellow"], "venue": "Perturbations, Optimization, and Statistics,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2016}, {"title": "Rethinking the inception architecture for computer vision", "author": ["Christian Szegedy", "Vincent Vanhoucke", "Sergey Ioffe", "Jonathon Shlens", "Zbigniew Wojna"], "venue": "arXiv preprint arXiv:1512.00567,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Weight normalization: A simple reparameterization to accelerate training of deep neural networks", "author": ["Tim Salimans", "Diederik P Kingma"], "venue": "arXiv preprint arXiv:1602.07868,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2016}, {"title": "Semi-supervised learning with deep generative models", "author": ["Diederik P Kingma", "Shakir Mohamed", "Danilo Jimenez Rezende", "Max Welling"], "venue": "In Neural Information Processing Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Distributional smoothing by virtual adversarial examples", "author": ["Takeru Miyato", "Shin-ichi Maeda", "Masanori Koyama", "Ken Nakae", "Shin Ishii"], "venue": "arXiv preprint arXiv:1507.00677,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Auxiliary deep generative models", "author": ["Lars Maal\u00f8e", "Casper Kaae S\u00f8nderby", "S\u00f8ren Kaae S\u00f8nderby", "Ole Winther"], "venue": "arXiv preprint arXiv:1602.05473,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2016}, {"title": "Semi-supervised learning with ladder networks", "author": ["Antti Rasmus", "Mathias Berglund", "Mikko Honkala", "Harri Valpola", "Tapani Raiko"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Intriguing properties of neural networks", "author": ["Christian Szegedy", "Wojciech Zaremba", "Ilya Sutskever"], "venue": "arXiv preprint arXiv:1312.6199,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2013}, {"title": "TensorFlow: Large-scale machine learning", "author": ["Mart\u0131\u0301n Abadi", "Ashish Agarwal", "Paul Barham"], "venue": "on heterogeneous systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "Generative adversarial networks [1] (GANs) are a class of methods for learning generative models based on game theory.", "startOffset": 32, "endOffset": 35}, {"referenceID": 1, "context": "Recent applications of GANs have shown that they can produce excellent samples [2, 3].", "startOffset": 79, "endOffset": 85}, {"referenceID": 2, "context": "Recent applications of GANs have shown that they can produce excellent samples [2, 3].", "startOffset": 79, "endOffset": 85}, {"referenceID": 3, "context": "When used to seek for a Nash equilibrium, these algorithms may fail to converge [4].", "startOffset": 80, "endOffset": 83}, {"referenceID": 1, "context": "Several recent papers focus on improving the stability of training and the resulting perceptual quality of GAN samples [2, 3, 5, 6].", "startOffset": 119, "endOffset": 131}, {"referenceID": 2, "context": "Several recent papers focus on improving the stability of training and the resulting perceptual quality of GAN samples [2, 3, 5, 6].", "startOffset": 119, "endOffset": 131}, {"referenceID": 4, "context": "Several recent papers focus on improving the stability of training and the resulting perceptual quality of GAN samples [2, 3, 5, 6].", "startOffset": 119, "endOffset": 131}, {"referenceID": 5, "context": "Several recent papers focus on improving the stability of training and the resulting perceptual quality of GAN samples [2, 3, 5, 6].", "startOffset": 119, "endOffset": 131}, {"referenceID": 2, "context": "[3], as discussed below.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "1, is similar in spirit to approaches that use maximum mean discrepancy [7, 8, 9] to train generator networks [10, 11].", "startOffset": 72, "endOffset": 81}, {"referenceID": 7, "context": "1, is similar in spirit to approaches that use maximum mean discrepancy [7, 8, 9] to train generator networks [10, 11].", "startOffset": 72, "endOffset": 81}, {"referenceID": 8, "context": "1, is similar in spirit to approaches that use maximum mean discrepancy [7, 8, 9] to train generator networks [10, 11].", "startOffset": 72, "endOffset": 81}, {"referenceID": 9, "context": "1, is similar in spirit to approaches that use maximum mean discrepancy [7, 8, 9] to train generator networks [10, 11].", "startOffset": 110, "endOffset": 118}, {"referenceID": 10, "context": "1, is similar in spirit to approaches that use maximum mean discrepancy [7, 8, 9] to train generator networks [10, 11].", "startOffset": 110, "endOffset": 118}, {"referenceID": 11, "context": "Another of our proposed techniques, minibatch features, is based in part on ideas used for batch normalization [12], while our proposed virtual batch normalization is a direct extension of batch normalization.", "startOffset": 111, "endOffset": 115}, {"referenceID": 12, "context": "Like many deep generative models, GANs have previously been applied to semi-supervised learning [13, 14], and our work can be seen as a continuation and refinement of this effort.", "startOffset": 96, "endOffset": 104}, {"referenceID": 13, "context": "Like many deep generative models, GANs have previously been applied to semi-supervised learning [13, 14], and our work can be seen as a continuation and refinement of this effort.", "startOffset": 96, "endOffset": 104}, {"referenceID": 2, "context": "[3] is well explained from this perspective.", "startOffset": 0, "endOffset": 3}, {"referenceID": 14, "context": "This approach is loosely inspired by the fictitious play [16] algorithm that can find equilibria in other kinds of games.", "startOffset": 57, "endOffset": 61}, {"referenceID": 15, "context": "al [17], replaces the 0 and 1 targets for a classifier with smoothed values, like .", "startOffset": 3, "endOffset": 7}, {"referenceID": 16, "context": "1, and was recently shown to reduce the vulnerability of neural networks to adversarial examples [18].", "startOffset": 97, "endOffset": 101}, {"referenceID": 2, "context": "Batch normalization greatly improves optimization of neural networks, and was shown to be highly effective for DCGANs [3].", "startOffset": 118, "endOffset": 121}, {"referenceID": 1, "context": "One intuitive metric of performance can be obtained by having human annotators judge the visual quality of samples [2].", "startOffset": 115, "endOffset": 118}, {"referenceID": 17, "context": "As an alternative to human annotators, we propose an automatic method to evaluate samples, which we find to correlate well with human evaluation: We apply the Inception model1 [19] to every generated image to get the conditional label distribution p(y|x).", "startOffset": 176, "endOffset": 180}, {"referenceID": 13, "context": "Our Inception score is closely related to the objective used for training generative models in CatGAN [14]: Although we had less success using such an objective for training, we find it is a good metric for evaluation that correlates very", "startOffset": 102, "endOffset": 106}, {"referenceID": 12, "context": "[13], and we can hope to better estimate this optimal solution from the data by minimizing these two loss functions jointly.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "We use weight normalization [20] and add Gaussian noise to the output of each layer of the discriminator.", "startOffset": 28, "endOffset": 32}, {"referenceID": 19, "context": "DGN [21] 333 \u00b1 14 Virtual Adversarial [22] 212 CatGAN [14] 191 \u00b1 10 Skip Deep Generative Model [23] 132 \u00b1 7 Ladder network [24] 106 \u00b1 37 Auxiliary Deep Generative Model [23] 96 \u00b1 2 Our model 1677 \u00b1 452 221 \u00b1 136 93 \u00b1 6.", "startOffset": 4, "endOffset": 8}, {"referenceID": 20, "context": "DGN [21] 333 \u00b1 14 Virtual Adversarial [22] 212 CatGAN [14] 191 \u00b1 10 Skip Deep Generative Model [23] 132 \u00b1 7 Ladder network [24] 106 \u00b1 37 Auxiliary Deep Generative Model [23] 96 \u00b1 2 Our model 1677 \u00b1 452 221 \u00b1 136 93 \u00b1 6.", "startOffset": 38, "endOffset": 42}, {"referenceID": 13, "context": "DGN [21] 333 \u00b1 14 Virtual Adversarial [22] 212 CatGAN [14] 191 \u00b1 10 Skip Deep Generative Model [23] 132 \u00b1 7 Ladder network [24] 106 \u00b1 37 Auxiliary Deep Generative Model [23] 96 \u00b1 2 Our model 1677 \u00b1 452 221 \u00b1 136 93 \u00b1 6.", "startOffset": 54, "endOffset": 58}, {"referenceID": 21, "context": "DGN [21] 333 \u00b1 14 Virtual Adversarial [22] 212 CatGAN [14] 191 \u00b1 10 Skip Deep Generative Model [23] 132 \u00b1 7 Ladder network [24] 106 \u00b1 37 Auxiliary Deep Generative Model [23] 96 \u00b1 2 Our model 1677 \u00b1 452 221 \u00b1 136 93 \u00b1 6.", "startOffset": 95, "endOffset": 99}, {"referenceID": 22, "context": "DGN [21] 333 \u00b1 14 Virtual Adversarial [22] 212 CatGAN [14] 191 \u00b1 10 Skip Deep Generative Model [23] 132 \u00b1 7 Ladder network [24] 106 \u00b1 37 Auxiliary Deep Generative Model [23] 96 \u00b1 2 Our model 1677 \u00b1 452 221 \u00b1 136 93 \u00b1 6.", "startOffset": 123, "endOffset": 127}, {"referenceID": 21, "context": "DGN [21] 333 \u00b1 14 Virtual Adversarial [22] 212 CatGAN [14] 191 \u00b1 10 Skip Deep Generative Model [23] 132 \u00b1 7 Ladder network [24] 106 \u00b1 37 Auxiliary Deep Generative Model [23] 96 \u00b1 2 Our model 1677 \u00b1 452 221 \u00b1 136 93 \u00b1 6.", "startOffset": 169, "endOffset": 173}, {"referenceID": 22, "context": "Ladder network [24] 20.", "startOffset": 15, "endOffset": 19}, {"referenceID": 13, "context": "47 CatGAN [14] 19.", "startOffset": 10, "endOffset": 14}, {"referenceID": 23, "context": "We caution that the Inception score should be used as a rough guide to evaluate models that were trained via some independent criterion; directly optimizing Inception score will lead to the generation of adversarial examples [25].", "startOffset": 225, "endOffset": 229}, {"referenceID": 19, "context": "DGN [21] 36.", "startOffset": 4, "endOffset": 8}, {"referenceID": 20, "context": "10 Virtual Adversarial [22] 24.", "startOffset": 23, "endOffset": 27}, {"referenceID": 21, "context": "63 Auxiliary Deep Generative Model [23] 22.", "startOffset": 35, "endOffset": 39}, {"referenceID": 21, "context": "86 Skip Deep Generative Model [23] 16.", "startOffset": 30, "endOffset": 34}, {"referenceID": 24, "context": "We extensively modified a publicly available implementation of DCGANs2 using TensorFlow [26] to achieve high performance, using a multi-GPU implementation.", "startOffset": 88, "endOffset": 92}], "year": 2016, "abstractText": "We present a variety of new architectural features and training procedures that we apply to the generative adversarial networks (GANs) framework. We focus on two applications of GANs: semi-supervised learning, and the generation of images that humans find visually realistic. Unlike most work on generative models, our primary goal is not to train a model that assigns high likelihood to test data, nor do we require the model to be able to learn well without using any labels. Using our new techniques, we achieve state-of-the-art results in semi-supervised classification on MNIST, CIFAR-10 and SVHN. The generated images are of high quality as confirmed by a visual Turing test: our model generates MNIST samples that humans cannot distinguish from real data, and CIFAR-10 samples that yield a human error rate of 21.3%. We also present ImageNet samples with unprecedented resolution and show that our methods enable the model to learn recognizable features of ImageNet classes.", "creator": "LaTeX with hyperref package"}}}