{"id": "1606.03508", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jun-2016", "title": "Distributed Machine Learning in Materials that Couple Sensing, Actuation, Computation and Communication", "abstract": "This paper reviews machine learning applications and approaches to detection, classification and control of intelligent materials and structures with embedded distributed computation elements. The purpose of this survey is to identify desired tasks to be performed in each type of material or structure (e.g., damage detection in composites), identify and compare common approaches to learning such tasks, and investigate models and training paradigms used. Machine learning approaches and common temporal features used in the domains of structural health monitoring, morphable aircraft, wearable computing and robotic skins are explored. As the ultimate goal of this research is to incorporate the approaches described in this survey into a robotic material paradigm, the potential for adapting the computational models used in these applications, and corresponding training algorithms, to an amorphous network of computing nodes is considered. Distributed versions of support vector machines, graphical models and mixture models developed in the field of wireless sensor networks are reviewed. Potential areas of investigation, including possible architectures for incorporating machine learning into robotic nodes, training approaches, and the possibility of using deep learning approaches for automatic feature extraction, are discussed.", "histories": [["v1", "Sat, 11 Jun 2016 00:18:35 GMT  (8878kb,D)", "http://arxiv.org/abs/1606.03508v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.RO", "authors": ["dana hughes", "nikolaus correll"], "accepted": false, "id": "1606.03508"}, "pdf": {"name": "1606.03508.pdf", "metadata": {"source": "CRF", "title": "Distributed Machine Learning in Materials that Couple Sensing, Actuation, Computation and Communication", "authors": ["Dana Hughes", "Nikolaus Correll"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Over the last few decades, there has been growing interest in extending the functionality of engineered materials, such as composites, cement-based materials, polymers and textiles, beyond that of a purely structural material. From a purely materials perspective, a class of materials (referred to in the literature as \u201cfunctional materials\u201d or \u201csmart materials\u201d) has emerged to describe materials which respond to some external stimuli. Examples of such materials include piezoelectric materials, shape memory alloys, chromic materials, and polycaprolactone. During the same time, microelectromechanical systems (MEMS) were developed, which resulted in a suite of sensors and actuators, including accelerometers, gyroscopes, pressure sensors, LEDs, ultrasonic transducers and microphones, which are on the millimeter scale. Small, inexpensive components such as these has allowed for active sensing to be embedded into engineering materials, to assist with monitoring the local properties of a structure [57\u201360]. Microcontrollers and microprocessors have also become available on\nar X\niv :1\n60 6.\n03 50\n8v 1\n[ cs\n.L G\n] 1\n1 Ju\nn 20\na similar scale. Combining these with sensors and actuators can extend the capabilities materials to be programmed to respond in a desired manner to external stimulus.\nThe advancement of these constituent parts has resulted in several concepts which incorporate one or more of these parts into a new class of material. \u201cIntelligent Materials\u201d was introduced in 1990 as \u201cmaterials that respond to environmental changes at the most optimum condition and manifest their own functions according to these changes\u201d [155]. This approach is proposed as a natural extension to functional materials: by incorporating information or software directly into the material, the material itself behaves intelligently, rather than simply being reactive to its environment.\nRecently, \u201crobotic materials\u201d has been proposed as the combination of a network of sensing-computing-actuating elements with manufactured materials, such as polymers, composites, cement-based materials, and fabrics [99]. Robotic materials may be viewed as a continuous material, which responds to external physical stimuli, interacting with discrete elements, which can locally sense the state and locally modify some property of the material, as shown in Figure 1. The ability to program the discrete elements allows robotic materials to approximate the goal of intelligent materials. Several applications of robotic materials have already been explored, such as gesture recognition in architectural facades [31] and robotic skins [56], detection, localization and identification of tactile interaction with textured surfaces [55], and garments capable of auditory scene monitoring [123].\nThe above applications often assume a simplified model of the underlying physical process being measured. In [55], the skin is assumed to be a infinite thin plate of constant thickness, the analysis of which may not apply in the presence of connectors, joints or locations where the skin is excessively stretched. Similarly, in [123], determining which sound to respond to simply involves identifying when measured signal exceeds the ambient sound by some threshold, rather than attempting to identify specific sounds of interest (e.g., sirens, gun fire, etc.).\nMachine learning is one promising approach to developing intelligent behavior in robotic materials. Broadly speaking, machine learning approaches attempt to learn a particular general task, such as identifying a pattern or learning a function, from a set of provided examples. Typically, the physical response of a material to some stimulus, such as the vibrations generated from an impact, is only well defined for very simple structures (e.g., rectangular planar composite panels). More complex geometries, such as those found in real\nworld structures, require computationally intensive numerical modeling approaches, such as finite element methods (FEM) [179]. Machine learning approaches, in contrast, utilize a set of examples to learn how a structure responds to an external stimulus from several sample stimuli. For robotic materials, it is typically expected that both spatial and temporal aspects will be present in learning a task.\nThe goal of this paper is to explore the potential of using machine learning techniques for robotic material applications. Specifically, this paper aims to address the following:\n\u2022 Identify specific fields and applications where robotic materials can be suitably utilized.\n\u2022 Review the existing literature in these fields for examples where machine learning has been used for a particular task, identifying the features, models and learning approaches used.\n\u2022 Investigate distributed machine learning algorithms and models, specifically those developed for sensor networks.\n\u2022 Identify potential areas to investigate for intelligent robotic materials. This includes determining appropriate models for data fusion and learning time series, automatic feature extraction, training issues, and the effects that limited memory, communication and computation abilities of individual nodes.\nThe remainder of this paper is organized in the following manner: Section 2 provides an overview of fields and concepts which motivated robotic materials, a detailed description of robotic materials, an reviews successful applications in this field. Section 3 explores potential approaches to incorporating machine learning models and algorithms into a robotic material, specifically citing recent applications in the field of wireless sensor networks. Section 4 surveys machine learning applications in fields which have been suggested as potential robotic materials, namely structural health monitoring, aerospace structures, wearable computing and robotic skins. Section 5 discusses the potential research challenges to applying machine learning to robotic materials, and concludes in Section 6. An overview of the machine learning models and features used are discussed in the appendix: Appendix A reviews machine learning algorithms of interest for this paper, and Appendix B describes common features used in the literature reviewed."}, {"heading": "2 Overview of Robotic Materials", "text": ""}, {"heading": "2.1 Background", "text": "Robotic materials are a recently introduced class of multi-functional materials which tightly integrate sensing, actuation, communication, and computation [99]. Robotic materials have been influenced by ideas presented in distributed MEMS [15], programmable matter [40], amorphous computation [1], morphological computation [120], intelligent materials [155], sensor networks [2] and pervasive intelligence [141].\nThe concept of distributed MEMS evolved from fabrication techniques which enable miniaturization and batch fabrication of sensors and actuators. As the physical size and\ncost of sensors and actuators decrease, systems with thousands or millions of units become feasible. Photolithographic processes provide a means to manufacture mechanical components in MEMS in conjunction with microelectronic components, which provide a means to control the resulting sensor and actuator arrays. Conceptual applications include \u201csmart dust\u201d, where MEMS sensors are diffused into an environment, active surfaces, where MEMS actuators influence the surrounding environment, and smart structures, where MEMS elements are fixed in place and interactions are coupled through the dynamics of the material to which they are attached.\nProgrammable matter views miniaturization of computing components as a means of reproducing moving physical 3D objects, similar to how video and audio can reproduce sounds and moving images. At the core, programmable matter consists of an ensemble of claytronic atoms (catoms), which are capable of moving in three dimensions, adhere to and communicate with other catoms, and compute state information. Unlike microrobotics, it is unnecessary to make catoms completely autonomous; rather, catoms need only respond to a set of rules based on local state. Shape formation becomes possible by incorporating holes in the ensemble, with random velocity, and enforcing shape goals at edge regions in the ensemble.\nAmorphous computing is similar to the concept of programmable matter, though individual elements are influenced by biological cells. One main concept in amorphous computing is that there is no underlying structure to the individual cells, and communication is not viewed as discrete events. Rather, messages are diffused throughout the material, and individual cells respond to concentrations of received messages. In this way, programs are designed such that state propagates through the material similar to wave propagation in physics, and based on markers within cells and local response rules, pattern formation is possible.\nMorhpological computation attempts to shift intelligence in robotics from a concept embedded purely into computation to one in which the physical body and surrounding environment of the robot play some role in performing an intelligent action. For example, perception for obstacle avoidance can be easily solved through non-homogeneous arrangement of light sensors, and fast and efficient locomotion, which is difficult to control using feedback control loops, is easily achieved through the interplay of simple oscillations, springed legs, a flexible spine and gravity. This same concept is useful in robotic materials: physical properties of a structure or material may be exploited to aid or perform certain types of computation. For instance, the cross-section of a composite panel can be designed to be resonant at a particular frequency. This lets the material act as a natural filter for vibration frequencies, which can simplify the signal analysis.\nIntelligent Materials was introduced in 1990 as \u201cmaterials that respond to environmental changes at the most optimum condition and manifest their own functions according to these changes\u201d [155]. This approach is proposed as a natural extension to functional materials: by incorporating information or software directly into the material, the material itself behaves intelligently, rather than simply being reactive to its environment. It is suggested that these types of materials be constructed from components at scale with the overall structure (e.g., drug delivery systems should have nano-scale computing and actuation elements, while structural materials can have meter-scale components) [127], or computing, sensing and actuation components be directly incorporated into the material construction itself, using manufacturing processes used for electronic components. From the perspective of information\nprocessing, holonic systems, neural networks and cellular automata have been suggested as computational models for intelligent materials [176].\nSensor networks emerged in the late 1990s from the combination of advancements in wireless communication and a reduction in cost of electronics [2, 125]. Sensor networks consist of a large number of sensor nodes distributed in an environment, typically for monitoring some aspect of the environment, such as temperature. Nodes in a sensor network are typically deployed densely in an environment, the topology changes frequently, and communicate through wireless broadcasting. In contract, robotic materials assume a network with fixed topology, and communication between neighboring nodes. The typical goal of sensor networks is to aggregate measurements and communicate the results to an external device through one or more sink nodes. While machine learning approaches have been used with sensor networks for certain tasks, such as determining the location of a target in the environment, research is primarily concerned with system-level aspects, such as operating systems, communication protocols, routing and simulation frameworks.\nThe concept of pervasive intelligence provides a promising paradigm for incorporating intelligence into robotic materials [141]. Pervasive intelligence argues for a combination of reactive multi-agent systems and amorphous computing: the amorphous computing paradigm provides a suitable computing environment for which an ecosystem of reactive agents could evolve in a self-organized manner. In the environment, communication between agents is not discrete; rather, agents can be viewed as receiving a continuum of information as it diffuses through the environment. Based on this, agents are required to evolve or learn an appropriate response using few resources. This paradigm shares several aspects with a robotic materials: hypothetical agents in a robotic material (i.e., individual computing nodes) have limited resources to learn appropriate reactions, will potentially interact with a continuum of information from the physical dynamics of the underlying material, and communication between individual agents/nodes may be unreliable, based on communication bandwidth and possible node failure. However, computing nodes are arranged in a lattice, which could provide some advantages over an amorphous medium: nodes have a fixed number of neighboring agents which it can communicate with, rather than requiring an agent to accept messages from an arbitrary source. Additionally, nodes located in a physically similar area of the material, such as would be the case with local neighbors, would be expected to react the same, and consequently could have the same learned behavior."}, {"heading": "2.2 Algorithmic Considerations", "text": "There are several necessary considerations associated with algorithms implemented in a robotic material [99]. Algorithms must scale as the material grows in size. As it is desired to keep the cost of individual nodes to a minimum, algorithms must be able to run on the limited computing capabilities and memory of the selected microcontroller. Furthermore, algorithms must be robust to failure of individual nodes. These considerations have many implications with regard to use machine learning approaches with robotic materials.\nScalability implies that any algorithm cannot have full access to all sensor data or all actuators in the system. One approach is to ensure that nodes have limited support over the sensors, i.e., a learned task relies only on information gathered by nodes in a local neighborhood. For many applications, it is reasonable to assume that information gathered\nfrom a local neighborhood of nodes would be sufficient for the task of interest. For example, detecting the location of the source of a vibration requires only a small number of sensing nodes [55]. The intensity of vibration due to an impact decreases as distance increases from the location of impact. Consequently, nodes outside a sufficiently large enough radius from the source would not detect the impact, and only nodes within the radius need be used to calculate the location of the impact.\nComputing and memory limitations place a limitation on the size or complexity of a machine learning model used on an individual sensing node. For instance, while increasing the number of components in a GMM or the number of hidden units in a neural network may increase the representation power or classification accuracy of the model. However, the increased number of parameters may exceed the memory capacity of an individual node. This issue may at least be partially assuaged by the distributed nature of robotic materials. Sensor nodes may reduce the amount of data collected locally, such as through filtering, transforms or encoding of the data. In addition, as data is propagated through the network, a node can combine its measurements with data shared from neighboring nodes.\nFinally, several possibilities exist to enable robustness to failure of individual nodes. Data from a failed node can simply be treated as missing data in neighboring nodes. Several techniques already exist for handling missing data [37]. Furthermore, due to the spatial nature of robotic materials, the impact of missing data may not be as significant as in other machine learning tasks, as data from nearby nodes will likely be highly correlated with the data expected from the failed node."}, {"heading": "2.3 Applications", "text": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55]. Each application highlights one or more aspects of robotic materials, and each demonstrate an application in the specific fields explored in Section 4. Prototypes of these applications are shown in Figure 2."}, {"heading": "2.3.1 Smart Facades", "text": "Smart facades consist of configurable architectural components (i.e., \u201csmart bricks\u201d), where each brick represents a node in an architectural robotic material, and bricks are assembled to form an architectural facade. Each brick can detect environmental properties, such as ambient light or temperature, and can detect touch through capacitive sensing, allowing the facade to act as a user interface. Bricks can respond to the environment or users by changing color or opacity, route air through the facade through a series of fans, or play sound (e.g., music). Research on this material centers around developing touch interfaces, from menus and widgets [31] to recognizing letters from a set of predefined gestures [53]. Recognition of a gesture must be performed in a distributed manner, as touches span several individual blocks, and recognition algorithms must be robust to various scales of the gesture. To identify a particular gesture, local neighborhoods of nodes interpolate a motion vector. The sequence of motion vectors form a gesture chain, which can be used to calculate the nearest gesture in a dictionary using 1-nearest neighbor (1-NN). This computation can be\ndistributed throughout the network by distributing the dictionary throughout the network and performing 1-NN on the gestures in the local dataset, by performing 1-NN on the full dataset using only the local motion vector, or through a hybrid approach of the two. This contribution demonstrates the utility of using local communication to reduce dimensionality of distributed measurements, as well as showing the capability of storing and computing over large datasets with limited node memory. While this project does not specifically correlate to one of the applications of interest in this paper, it does demonstrate the suitability of robotic materials as civil and architectural structural components, and provides a physical platform for tasks such as health monitoring of civil structures."}, {"heading": "2.3.2 Variable Stiffness Composites", "text": "Variable stiffness materials are composite materials consisting of a thermoplastic base material embedded in silicone rubber. Individual portions of the material can be heated using nichrome heating wire wrapped around the base material, and local temperature can be monitored using thermistors [101]. By creating the composite material from a lattice of variable stiffness bars and embedding computing nodes to monitor and control the local temperature, variable stiffness sheets and beams can be realized as a robotic material, where the local modulus of elasticity can be changed in response to the environment or for programmable configuration. Performing a sequence of heating and cooling at specific portions\nof the beam or sheet enables changing the shape of the composite, either using gravity [101] or cables [98] to generate a distributed load on the structure. Performing shape change in this manner provides a very high degree of freedom structure, which would normally require a prohibitive number of motors or other actuators to get equivalent behavior. This application demonstrates the importance of understanding material and actuator properties, and the correspondence between the two, in robotic materials. Shape-changing and variable stiffness materials have been proposed to be used as aerodynamic surfaces in cars, boats and airplanes, or for medical applications such as orthopedic casts [100]."}, {"heading": "2.3.3 Textile Materials", "text": "Flutter [123] is a prototype wearable assistive technology for the hearing impaired community. Flutter is designed to augment hearing with vibrotactile feedback indicating the direction from which an alert, alarm, siren, or similar sound originates. This garment is fabricated from textiles incorporating a network of computing nodes, each of which is able to detect sounds and control a vibration motor. Locally, nodes continuously monitor the audio scene, calculating the spectrum of the scene and maintaining an estimate of the local ambient noise. When a sound is detected which is sufficiently above the ambient levels (e.g., a siren), the energy of the spectrum is computed and compared with neighboring nodes. In this way, individual nodes can determine if it has measured the highest spectral energy, and respond by pulsing its vibration motor. This project shows that e-textiles are excellent candidates for robotic materials, specifically due to constraints on energy consumption and the size of components."}, {"heading": "2.3.4 Amorphous Robotic Skin", "text": "Amorphous robotic skin is a final example of the potential of robotic materials [54,55]. The skin in this investigation is designed to localize tactile stimulation on the surface of the skin using a sparse network of sensing nodes, and identify the texture rubbed against the skin, by detecting vibrations propagating through the skin. This architecture differs greatly from traditional skin approaches, where measurements from an array or matrix of densely packed sensors are performed by a central computer. Vibration-based tactile sensing is very high bandwidth\u2013sample rates for a single sensor are at least several kHz, whereas pressurebased sensing is sampled at most of up to several hundreds of Hz [138]. Consequently, when using vibration as a sensing modality in robotic skin, the bandwidth of communication or computation limits the scalability of a centralized approach much more rapidly than when using pressure alone. Local sensing nodes in the skin monitor vibrations and detects deviations from ambient vibrations in a similar manner to Flutter. When a significantly large vibration is detected, the spectrum of the vibration is shared with local neighbors. Spectral energy is used to elect a node to perform localization and identification of the source of the stimulus. Using a plate model of the skin, gradient descent is used to estimate the position of the vibration source from the measurements. A logistic regression model is used to identify which texture rubbed against the skin. In this manner, the skin can provide information about interactions with the environment through sparse, event-driven communication, rather than continual monitoring of the individual sensors. This approach\nshows the benefit of designing algorithms around the physical properties of the underlying material, and the capability of a robotic material to operate autonomously and interact with one or more external systems."}, {"heading": "3 Machine Learning Approaches for Robotic Materials", "text": "The robotic material examples provided in Section 2.3 describe several applications where local algorithms are typically designed with some simplifying assumption. For example, in [123], triggering the garment\u2019s feedback is based simply on sound levels which exceed some threshold of the ambient sound level, and in [55], the underlying skin is modeled as a thin, homogeneous plate. For several of these applications, it is preferable for the material to respond to a specific stimulus (e.g., a garment that responds to sirens and car horns), or one which is robust to variations in the underlying structure (e.g., fasteners present at various locations in the skin). One approach to achieve this is to utilize machine learning to identify the specific patterns of interest, or to be able to adapt to local variations in the material. This section describes machine learning approaches and features used in the examples in Section 2.3 (and described in more detail in Section 4), and describes how distributed implementations of several of these approaches have been achieved recently in the sensor networks domain."}, {"heading": "3.1 Machine Learning Algorithms", "text": "Several machine learning approaches have been applied to the various fields described in Section 4, as well as being adapted for use with sensor networks. While specific tasks, models and feature selection vary among the applications, the desired tasks fall broadly into one of the following categories: classification (identifying which class a set of measurements belongs to), regression (fitting a function to example input-output pairs), and novelty detection (identifying when a particular measurement occurs outside of a nominal mode of operation). This section provides a brief overview of the machine learning approaches of interest; a complete description of these approaches are provided in Appendix A. The models discussed here have been selected based on their how often they have been used in the reviewed literature, and their applicability for robotic materials. For example, support vector machines and Bayesian models have been adapted for use with sensor networks, neural networks and Bayesian models have temporal implementations (RNNs, DBNs and HMMs), and convolutional neural networks are useful for automatically extracting robust features in time or spatial domains."}, {"heading": "3.1.1 Novelty Detection", "text": "Novelty detection, also referred to as anomaly or outlier detection in the literature, is the task of identifying situations which occur outside of a nominal state or mode of operation. Novelty detection has been utilized extensively in structural health monitoring to detect the presence of damage [32,32,171,172]. While a classification model could be trained to identify defective and non-defective cases, this approach is limited in its potential, as collecting data\nfor the defective cases is often costly. Consequently, it is more common to collect data under normal operating conditions, and determining if novel measurements lie outside some threshold of normal operation. Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].\nVariation from a nominal state or operation can be measured as a novelty indicator (NI), also called a damage indicator (DI) in the structural health monitoring literature, a scalar measurement representing the deviation from normal operation [32], based on extracted features. Measurements can be based on the statistical distribution of feature sets from samples extracted from a training set, and relating the NI of a novel measurement to the likelihood that the measurement was generated from a nominal state. Mahalanobis Squared Distance (MSD) assumes measurements from nominal states is accurately represented by a multivariate Gaussian distribution. Kernel density estimate (KDE) is a more direct approach which estimates the probability density function directly from sampled data from a nominal state [171]. KDE generates a distribution as the sum of kernel functions centered around a set of training data points, where each kernel is smoothed by a bandwidth parameter.\nNovelty indicators may also be based on the residual error calculated from a novel measurement and the reconstruction of a model based on training data. Autoencoder models can be trained to accurately reconstruct a set of training data from nominal states. Factor analysis, which describes correlations between observed features and a small number of unobserved independent variables (factors), can be used to build models as linear combinations of the factors [32]. Once models are constructed, novel measurements can be reconstructed from the models. A new measurement would not likely be accurately reconstructed; the norm of the residual between the measurement and reconstruction can be used as a NI.\nNovelty indicators have also been computed by performing singular value decomposition (SVD) on a matrix of training values collected from a nominal state. Assuming data from a nominal state is composed of a linear combination of a finite number of characteristic vectors, which represent particular properties of the structure, SVD can be used to detected novelty [133]. Combining a set of training data into a training matrix, SVD can be used to calculate the rank of the training matrix (i.e., number of characteristic vectors), or, in the presence of additive noise, the rank can be estimates by only considering singular values above a predefined threshold. Adding a measurement from a defective state to the training matrix, the presence of a defect would result in a novel characteristic vector in the matrix, increasing the estimated rank when a defect is present. A novelty indicator which is robust to multiplicative noise can also be calculated, as described in Appendix A.1.5.\nCalculation of Thresholds. In the approaches mentioned above, some threshold or critical value is required to distinguish between nominal and novel states. This must be done using only data from nominal states, and often requires making some assumption about the underlying data. A simple approach involves assuming novelty indicators follow a Gaussian distribution. The NIs can be computed for each training point, and thresholds can be set such that a large, predefined percentage (i.e., confidence level) of the training data is within the threshold [171\u2013173]."}, {"heading": "3.1.2 Classification and Regression", "text": "Classification is potentially the most common task performed in the domains investigated here, being used to classify types or broad locations of damage in structural health monitoring, classifying affective touch in robotic skin, and activity and gait recognition in wearable computing. Regression is useful for localizing damage or impacts in structural health monitoring, or localizing stimulus in robotic skin. Regression can also be used in control applications, such as morphable airfoils or exosuit control, for example, to approximate Q values in Q-Learning approaches, such as those used in [81,82,156,159,160]. While technically two separate tasks, the same type of models can be used for both regression and classification by simply modifying a small aspect of the model or the training approach.\nNeural Networks. Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162]. Artificial neural networks are computational models inspired by the behavior of biological neurons. Neural networks consist of layers of neurons and directed connections between them, as shown in Figure 10. By selecting appropriate activation functions for the output layers, neural networks can be used for regression (e.g., using rectified linear units) or classification (e.g., using a softmax layer). Training involves minimizing some cost function with respect to the connection weights and a set of training examples, typically using backpropagation [132, 166]. Beyond use as a machine learning approach, three particular network architectures are of interest for the applications described in this paper: recurrent networks, convolutional networks, and autoencoders.\nRecurrent Neural Networks (RNNs) consist of networks which contain cycles, which provide models which are more suitable for sequential or time-series models. Recurrent connections allow the network to maintain and update an internal state at each step in the sequence, providing a suitable architecture to handle temporal aspects of a signal. Long Short Term Memory (LSTM) [51] components are specifically useful for situations where there is a long time delay between input to the network and the corresponding effect on the output, where simple recurrent connections could not learn a relationship with such a large time delay [50].\nConvolutional layers in neural networks utilize a weight sharing scheme to allow a network to learn local features which are invariant to translation and scaling, and have been shown to be especially useful for image recognition [85]. Convolutional layers take advantage of local structure of input data, which allows convolutional networks to automatically learn features of interest from training data, rather than requiring hand-developed features. Despite the potential to automatically learn features of interest, there has only been a few investigations in gait recognition to utilize this approach [116,175,178].\nAutoencoders are networks which have found several applications in the domains of interest. Autoencoders are built and trained to perform the identity function\u2013the output of the network is trained to reproduce the provided input. A \u201ccode\u201d layer of neurons, whose size is smaller than the input, provides an means of reducing the dimensionality of the data. In this way, autoencoders behave in the same way as principle components analysis (PCA). Because of the nonlinearity of the architecture, autoencoders with a single hidden layer have been shown to provide superior reconstruction of the input signal, when compared with principle components analysis (PCA) [61]. Finding a minimal representation directly from the data\nis useful to reduce the dimensionality of observations for dynamic Bayesian networks and HMMs, making learning more feasible [56]. Finally, autoencoders can be used to perform novelty detection, as discussed in Section 3.1.1.\nSupport Vector Machines. Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170]. In the original formulation, an SVM is a binary classifier trained on a linearly separable dataset, which is constructed by finding an optimal hyperplane which separates the two classes in the dataset [22]. A subset of the training data, known as support vectors, is used to determine the hyperplane by maximizing the margin between the hyperplane and the support vectors. Nonlinear separation is possible by using nonlinear kernel functions to map the original features to a kernel space, and performing linear separation on the mapped features. Regression can be performed by constructing a support vector regression (SVR) machine; the problem formulation is modified to minimize the distance between training examples and the optimal hyperplane [145]; in essence, the goal is simply to attempt to keep the training data points within the bounds of the margins, as opposed to outside of the margins.\nMost investigations require the ability to perform classification with several classes; several approaches are available to extend SVMs to multi-class classification. Multiple SVM classifiers can be build, each of which classifies between one of the labels and the rest (onevs-all), or by classifying between pairs of classes (one-vs-one), and selecting the final label based on the classifier with the highest output, or by selecting the label based on the highest number of output from the group of classifiers, respectively. One approach specifically well suited to spatially-dependent classification is SVM-based geometric probabilistic decision trees (SVM-GPDT) [102]. The classifier consists of a tree, where each node contains an SVM which is used to determine the probability that the region represented by the node is classified as positive; The children of each node divide the parent\u2019s region into two subregions, as shown in Figure 3. The influence parent nodes have on children classifiers results implies than, even in the event of a misclassification, the region with a positive classification would be a neighboring region.\nGeometric probabilistic decision could be a particularly promising approach for robotic\nmaterials. As individual leafs of the PDT correspond to specific geometric regions to be classified; the classifier for a given leaf can be implemented on the node corresponding to its region. Nodes may then communicate with its appropriate neighbor to match the PDT, until the root classification is performed at some specific node. While this approach distributed computation appropriately among the various nodes, care must be taken to ensure that communication is performed with appropriate nodes. Additionally, classifiers are required at each level of the tree, so additional nodes will need to be incorporated into the material, or multiple classifiers will need to be implemented on each node, requiring careful assignment of classifiers in the network to ensure no node is responsible for an excessive number of classifiers."}, {"heading": "3.1.3 Density Estimation", "text": "Density estimation approaches estimate a probability density function based on observations. The probability density function can be used for the applications described above: the PDF can be used for novelty detection by calculating the probability of observing a particular measurement. Classification can be performed by including the desired class as a random variable, and performing classification by computing the probability of each class conditioned on a set of observations. Finally, regression is performed by calculating the expectation of a random variable conditioned on observations.\nGraphical Models. Graphical models are used to describe, learn and perform inference over a multivariate probability distribution [76]. Graphical models include Bayesian networks, which represent the conditional distribution over several random variables as a directed acyclic graph, and Markov networks, which represent random variables as an undirected graph. The utility of Bayesian networks for robotic materials may be minimal, as the conditional dependences of information of all the nodes are not easily defined. Markov networks, however, map well to robotic materials, as individual nodes in a material can store and process a clique of local random variables, and messages passed between nodes can be used to perform belief propagation. Some investigations into distributed learning and inference for Markov networks have been explored in the sensor network literature; see Section 3.5.3.\nA commonly used graphical model is the Na\u0308\u0131ve Bayes model, which are used for classification purposes. Na\u0308\u0131ve Bayes models are simple models where observations are conditionally independent given a particular class. The simplicity of these models have made them very attractive for classification tasks, and has been used in several investigations as simple classification models [69,88,93,126].\nMixture Models. Mixtures models are probabilistic models for representing the distribution of data [136]. Mixture models consist of K components, where each component is a parametric probability distribution (e.g., Gaussian), and each component has a corresponding mixture weight, i.e. the probability of the particular component, P (c). Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3,93], or used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.\nDynamic Bayesian Network. A dynamic Bayesian network (DBN) is a class of graphi-\ncal models which are useful for modeling sequential or temporal data [136]. DBMs represent a first-order Markov process, where the state variables at a particular time step are only dependent on the state variables in the previous time step, and observation variables are dependent on the current state variables. Hidden Markov models (HMMs), which have been used for gait recognition [152] and recognition of affective touch [56], are a special case of DBNs which consist of a discrete, hidden state variable and observations conditioned on the current hidden state [124]. HMMs may be build for symbolic or continuous valued observations; in the latter case, observations are assumed to be drawn from some probability density, such as a Gaussian or mixture of Gaussians. Classification using HMMs involves training a model for each of the target classes, and selecting the class corresponding to the model with the highest likelihood of the sequence of observations. Like RNNs, DBNs provide a means to consider the temporal aspects of a signal when performing classification or regression, and often produce improved results when compared to systems considering only single frames of data."}, {"heading": "3.2 Features", "text": "The major focus of many of the papers referenced in Section 4 is the features extracted from sensors. As most of the data in the applications described are temporal in nature, there is a high amount of overlap in the features extracted and used\u2013features are typically based on a certain time frame of measured values, rather than a fixed set of predefined characteristics. There have also been several features of note developed and used for one of the specific domains, for example, transmissibility features in structural health monitoring. Most of the machine learning tools used require a single vector of features to be provided as input, rather than a sequence of measured values. Thus, it is common to calculate a set of features by summarizing the properties of measurements over a sliding window (i.e., measurement frame) of relatively short duration.\nFeatures can be broadly categories on how the data points in a frame are processed. Time domain features perform calculations directly on the data points. Frequency domain features first perform spectral decomposition, such as a Fourier or wavelet transform, and compute features from the resulting spectrum. Model based features rely on fitting measurements to some simple model (e.g., autoregressive model), from which features can be extracted based on the parameters of the model or the residual of the measurement."}, {"heading": "3.2.1 Time Domain Features", "text": "Time domain features summarize a measurement frame by performing operations directly on the measurement data in the frame. Simple statistical features, such as mean, standard deviation and higher-order moments, are commonly used, especially for activity recognition [17, 87, 126], and to a lesser extent, impact detection [48, 149]. In addition to statistical moments, properties such as the minimum, maximum, difference between ordered pairs of peaks (minmax sum) for a measurement window are often used.\nCorrelation coefficients can be calculated from multiple sensors, assuming the sensor measurements are synchronized. This can include multiple measurements from the same sensor, such as the three axes of an accelerometer. Correlation coefficients simply measure\nthe covariance between the two signals, and provide a means for estimating whether the two signals are related by some underlying cause. Computing correlation coefficients between two signals greatly reduce the dimensionality of the data\u2013the number of samples in both windows are reduced to a single value. In the wearable domain, correlation coefficients can be useful for identifying activities where motion involves various body parts possibly working in conjunction, such as the motion of the left and right leg when walking or running [95].\nCertain signals, such as those generated by impacts, are limited in duration. This allows for various features based on the amount of duration between the onset of the signal and various aspects of the signal, or the delay between the occurrence of specific aspects of signals measured by different sensors. For example, for detecting impacts in aircraft composite panels, the time at the maximum and minimum value of the both the raw signal and the envelope of the signal, as well as the beginning and end of each envelope, is used as features [48, 149]. In this investigation, sensor measurements are synchronized, and the onset time of each signal from 12 accelerometers was also used as a feature. As synchronization is necessary for features based on the time delay between signals from multiple sensors, such features can only be feasibly calculated from signals measured on a single node; variation in clock rates and communication delay introduces unknown deviations from true values of time delays.\nTime domain feature have been shown to be very effective in the wearable domain. In [17], a 319 feature vector is calculated for 1 second accelerometer data, which include of the first four statistical moments (mean, standard deviation, skewness and kurtosis) of each axis, correlation between accelerometer axis, and minmax sums. Additionally, the energy level at different frequencies were calculated using a wavelet transform. Using Random Forest, the 20 features with the highest importance were low-level time domain statistics, namely, the mean, standard deviation, minmax sum, and the RMS velocity (calculated by integrating accelerometer measurements in the data) of each axis, demonstrating the utility of these types of features. Mean, standard deviation and correlation are the primary features used in [126], augmented only by the energy calculated from the frequency components of the signal. To some extent, time domain components are used in conjunction with other types of features in several studies in the wearable domain [87]. Minimum and maximum values of measured signals have also been used for impact detection [48,149]."}, {"heading": "3.3 Frequency Domain Features", "text": "Frequency domain features are extracted from signals which have undergone a time-frequency transform, such as a Short Time Fourier Transform (STFT) or Discrete Wavelet Transforms (DWT) [94]. Frequency components provide information regarding the amount of energy present at different frequencies in the signal, allowing for a more intuitive representation of periodic signals. The spectral components calculated by the transforms may be used as features directly, or features may be calculated from the spectrum. The spectral energy can be calculated as the sum of the squared spectrogram coefficients. Omitting the DC component, the energy of a spectrogram may help assess the intensity of an activity in the wearable domain [95]. Integrating the real and imaginary components separately may also be reasonable in situations where the time delay between multiple sensors can provide useful information, such as in impact detection [48,149]. While all frequencies present in the spec-\ntrum of a signal are useful, the DC component of the signal, which can be obtained directly from the STFT, can be useful in the wearable computing domain; the DC components of accelerometer values is helpful for determining static postures in activity recognition [95]. Finally, spectral entropy, which simply calculates the entropy present in the energy of the spectrogram, has found use for distinguishing between cyclic and acyclic activities [87].\nFrequency domain approaches are very common in structural health monitoring, as they easily measure the various modes of vibration present in the structure. Modal features are useful for detecting defects in structures [30, 70]. Vibrations can be measured using a piezoelectric transducer or accelerometer, and exited from external sources, or directly from a transducer. The vibrational behavior of structural components is not constant across all frequencies; rather, structures tend to vibrate according to a set of vibration modes, which gives rise to resonant frequencies associated with the structure. Under normal operating conditions, a structure will demonstrate peaks in the energy spectrum at a set of fixed frequencies, representing the frequencies of the modes of vibration in the structure. In the presence of a defect, the frequencies at which these peaks will shift. While useful for detecting defects, they are less useful for localizing or determining the extent of a defect.\nA second common feature in structural health monitoring related to vibration of the structure is transmissibility, due to its sensitivity to changes in the stiffness of a component [83, 105]. Transmissibility describes the propagation of a signal between two points on a structure, and are useful for monitoring the natural frequencies or modalities of the structure. Transmissibility can be measured using piezoelectric elements [170]. The required excitation needs to be over a range of frequencies. Excitation can either be generated from an external source, or generated from one transducer and measured from another. As transmissibility measurements are between multiple measurement points, they provide more information than simply detecting resonant frequencies, and can be useful for localization of defects [170]. These features have been used to detect defects in aircraft wings [170] and truss structure [169]."}, {"heading": "3.4 Model Based Features", "text": "Model based features involve calculating the coefficients of a model (e.g., autoregressive model) fit to the data in a measurement frame. Models provide several benefits. For example, dimensionality of the data can be reduced (e.g., principle components), and linear models (e.g., autoregressive models) can be exploited to detect nonlinearities in a signal. For the purposes of this paper, this includes common data reduction methods in machine learning, such as principle components analysis.\nPrinciple components analysis (PCA) and independent components analysis (ICA) are models which are used to map measured signals to a new basis. In PCA, an orthonormal transformation is perform which results in signals being linearly mapped to a set of uncorrelated components [25]. In ICA, signals are also mapped to a set of statistically independent components, though the components observe a non-Gaussian distribution [147]. Both of these approaches are useful for reducing the dimensionality of data, assuming the number of components are fewer than the dimensionality of the original signal, and the mapping does not discard a significant amount of information. In addition to PCA is also useful for detecting damage in structures. In [25], PCA is used to detect defects in a vibrating plate by\nreconstructing a measurement using principal components, and calculating the magnitude of the error between the original and reconstructed signals. This approach is described in more detail in Section 3.1.1 as damage indicators based on Singular Value Decomposition.\nAutoregressive (AR) models are models which predict the value of a signal based on a linear combination of a fixed history of prior values. The coefficients of the resulting model may be used as features, though this requires refitting an AR model at each measurement frame. This type of feature has been used extensively in structural health monitoring [113, 146], due to their sensitivity to damage, especially damage which results in nonlinear behavior in the signal, and robustness to environmental variability. Alternatively, an AR model can be trained, and the residual used for novelty detection; see Section 3.1.1.\nDomain specific features are commonly used in the wearable domain. These typically are kinetic and kinematic features, and are utilized for detecting anomalous gait or controlling exosuit activations. Kinetic features are based on contact with the ground at different phases of the gait cycle. Heel strike force, push-off force and mid-stance force are included in a feature set for novelty detection in [92]. Kinematic features are based on joint angle (e.g., ankle, knee and hip), either measured at different phases of gait, or by measuring the angle at maximum extension and flexion of the joints. Kinetic features, namely the occurrence of heel strike, are the primary features used for exosuit control [7, 8, 163]\u2013actuation occurs at specific phases of a gait cycle, which are estimated from the frequency of the gait and a time delay from last heel strike."}, {"heading": "3.5 Distributed Approaches in Sensor Networks", "text": "The general machine learning approaches described above are used in various investigations discussed in Section 4 to solve a variety of tasks in the domains of interest (structural health monitoring, aerospace, wearable computing and robotic skin). Adapting machine learning applications in the domains discussed requires adapting models to work with a network of computing nodes. In a centralized approach, values from all sensors are collected, from which features are extracted, as shown in Figure 4a. From the calculated features, the desired response (e.g., classification, actuation, etc.) can be calculated using an appropriate model. Sequential data can either be handled in a static or quasi-static manner, or can utilize a temporal model.\nFor robotic materials, this approach becomes infeasible for a variety of reasons. As the material increases in size, the number of sensors and actuators, and consequently the communication requirements, increases with the size of the material. Ultimately, this results in a communication bottleneck which could reduce the responsiveness of the material to an unusable level. This issue is compounded by high-bandwidth signals, such as when measuring vibrations using accelerometers, microphones or piezoelectric transducers.\nAn alternative approach is to perform feature extraction locally, and alter the machine learning model to incorporate a consensus algorithm or to communicate local state between neighboring nodes. Figure 4b demonstrate how the approaches in Figure 4a could be adapted for this. Approaches typically involve utilizing consensus algorithms or message passing between nodes. These approaches have been explored in the sensor network community.\nThe applications described in Section 4 make the assumption that a global understanding of the system is available, i.e., at any point in time, all sensor measurements are available\nand can be queried in a synchronized manner. Furthermore, it is assumed that any computation is performed in a centralized manner: the learning algorithm used to train a model has access to all sensor measurements at any given time. As described in Section 2, this approach does not scale well as the size of the material / structure increases, or as sensor density increases. In addition to the communication and computation bottleneck, from a machine learning perspective, increasing the number of sensor measurements quickly leads to curse of dimensionality issues. To effectively train a centralized model, a prohibitively large amount of training data would be required. Projecting the machine learning tasks into the framework of robotic materials can alleviate these issues, however, this requires that a learning algorithm be capable of being evaluated in a distributed manner, and ideally also trained in a distributed manner.\nThis section provides a survey of machine learning techniques used in the field of sensor networks, where sensing nodes have a known location, and local (typically wireless) communication with other sensing nodes. Robotic materials have similar constraints, though communication is wired and thus more constrained, and location and network topology is less variable. Machine learning approaches, specifically supervised learning, was first proposed as a unified approach to sensor network applications in 2003 [144]. The authors suggest kernel methods as an example approach to fit training data to, and suggest plume tracking, object tracking and node localization as potential sensor network specific applications. Distributed machine learning approaches used in sensor networks include algorithms to train and query support vector machines for classification and regression (Section 3.5.1), density estimation in Gaussian mixture models (Section 3.5.2), and inferences using probabilistic graphical models (Section 3.5.3)."}, {"heading": "3.5.1 Distributed Support Vector Machines", "text": "Support vector machines typically follow the suggestions presented in [144], using kernel functions which reflect the limited sensing range of nodes in the network.\nA localization scheme is presented in [111], which describes an approach to determining the location of all sensor nodes in a network when the location of only a small subset of base nodes is initially known. Both coarse-grained and fine-grained localization of a node\nis performed, based on the assumption that signals between two nodes decay in a manner similar to Gaussian, polynomial or other kernel with bounded support. To perform coursegrained localization, an SVM is trained to indicate if a node is in an arbitrarily defined region, using the base nodes as training examples. Once the SVMs are trained, fine-grained localization can be performed. This consists of performing coarse-grained localization over several regions using the trained classifiers, indicating which regions the node of interest occupies. The final location is set as the center of the intersection of the region. As the shape and size of training regions can be arbitrarily set for each SVM, it is possible to achieve a high level of accuracy for fine grained localization. The main drawback to this algorithm is the need for training at a central station; the number of required values communicated to the central station is quadratic with respect to the number of base nodes. Once trained, evaluating the course localization using the trained model can be performed in linear or quadratic time with respect to the number of sensor nodes.\nThe approach given in [111] assumes that the central station can estimate the range to all base nodes in the network. For networks over a wide area, this assumption may not hold. One approach which does not rely on this assumption is presented in [158]. In this investigation, each beacon node exchanges messages with all other beacon nodes, noting the hop-count distance between the nodes. The location of each node and hop-count distance of each pair is then sent to the central station. An SVM-based decision tree, similar to that in [102], is then trained to predict the location of a node based on the hop count distance to beacon nodes. The SVM model can then be broadcast to all nodes in the network, which non-beacon nodes can then use to estimate their physical location in the network. The SVM approach is shown to produce location estimates with smaller error than a diffusion-based approache to localization (an approach which has similar assumptions and requirements), while requiring much less communication.\nA distributed algorithm for performing regression is presented in [45], where regression model consisting of a linear combination of local measurements over a window of time. Kernel linear regression is used to minimize the error between the regression model and measured data. By ensuring that the kernel functions have limited spatial support, the task can be distributed by solving the regression problem for the local region, and communicating kernel weights (i.e., \u201cregression messages\u201d) with neighboring nodes, which greatly reduces the amount of communication compared with methods that communicate individual measurements or require a centralized training approach.\nAlgorithms for fully-distributed support vector machine learning has been explored recently in the field of wireless sensor networks. This includes both training a parallel version of an SVM, with a centralized means of fusing subsets of the training results, as well as fully distributed approaches. For sensor networks, distributed SVM algorithms are achieved by using kernels with limited support (i.e., sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].\nIn [44], algorithms for training and evaluating a support vector regression model is realized by utilizing kernels with finite support and a gradient-based training algorithm. This approach is based on the assumption that sensor measurements from nodes that are spatially near one another are often highly correlated, while those separated by larger distances are\nnot. By using a translation-invariant kernel with finite support, and assuming communication ranges with are wider than the support, the authors developed gradient-based SVR training and evaluation algorithms. The learning algorithm trains a regression function for N sensors, each located at qi = (xi, yi), of the form\nf(q) = N\u2211 i=1 (\u03b1i \u2212 \u03b1\u2217i )[K(qi, q) + \u03bb2] (1)\nThe kernel used is a bump function with finite support B,\nK(qi, qj) = 1\n2\n[ 1 + cos ( \u03c0\u2016qi \u2212 qj\u2016\nB\n)] (2)\nUsing this kernel, training can be performed in a parallel manner over local neighborhoods of sensing nodes, where the neighborhood radius is at least the size of the support of the kernel. Rather than using the full training set, as in the centralized case, each node trains a local SVR based on data available from its local neighborhood. Each node in the neighborhood shares current training data with neighboring nodes. Using the shared data and the distances between a node and its neighbors, the local SVR is updated in the same manner as a centralized SVR. This process is repeated until terminal conditions are met.\nTo evaluate the function at point q, a node first performs a local evaluation of the function\nfi(q) = (\u03b1i \u2212 \u03b1\u2217i )[K(qi, q) + \u03bb2] (3)\nNodes then iteratively update their estimate by obtaining the approximate function evaluation from its neighbors\nfi(q)\u2190 fi(q) + \u03b7 [\u2211 j\u2208Ni (fj(q)\u2212 fi(q)) ] (4)\nAssuming the sensor network is connected, the consensus algorithm is guaranteed to be globally asymptotically stable.\nIn [73], a fully distributed algorithm for training an SVM is described which leverages a geometric interpretation of SVMs to minimize memory and communication requirements, and trains a distributed SVM using a gossip protocol. The geometric interpretation assumes that training examples from a class form a convex set, and that a set of extreme points (which describe the hull of the convex set) can be extracted from this set. Training examples are spatially dependent, i.e., the position of the measuring sensor node is included as input features. Inputs are mapped to a Gaussian feature space, so that the effect of measurements / examples have less influence on far away sensors. The extreme points act as vertices of the convex set, and effectively describe the hull of the set with the fewest number of points from the training examples. Training is performed using a one-hop gossip protocol. Individual nodes are provided an initial set of training data, from which the extreme points of the positive and negative examples are extracted. Nodes maintain a collection of convex sets of positive and negative examples, described by the extreme points of the sets. Nodes in the network shares extreme points of the current convex hulls for positive and negative training examples with neighboring nodes using single hop communication. Upon receiving\na set of extreme points, a node performs join operations on the convex sets it is aware of, possibly reducing the number of convex sets and extreme points the node must maintain and communicate. The proposed algorithm converges to the results achieved of a centralized geometric SVM in finite time, and reduces communication and memory requirements compared with other algorithms. Using a naive algorithm to approximate a convex hull, extreme points can be minimized to allow scalability with respect to the amount of training data and communication packet length.\nA method for building an ensemble of SVR predictors for target localization using acoustic data is given in [72]. The sensor network is subdivided into subnetworks, where subnetworks represents a local region of the physical area being monitored, and training data for each subnetwork is extracted randomly from a global training set. For each subnetwork, a SVR predictor is trained using a least squares SVR algorithm. An aggregated predictor can be formed by taking the weighted sum of individual predictors, where the weights are based on the estimated distance from the target to to the location of sensors in the subnetwork. A distributed distributed algorithm simply predicts and initial position for the target, and then iteratively shares position estimates with other subnetwork predictors, until convergence on a predicted position. Experiments demonstrate that this ensemble approach is more robust to noise than a conventional SVR predicted using all sensor nodes.\nIn a similar manner to the ensemble SVR approach, a modified support vector domain description (SVDD) is created used in conjunction with a local classification strategy to track a target in an environment [71]. The authors used this approach to localize a target in an environment using acoustic monitoring. SVDD performs classification by creating a sphere around the data to be classified, and attempts to minimize the radius of the sphere. This amounts to solving an optimization problem similar to an SVM classifier, except that the optimization problem attempts to minimize the volume of the sphere containing the positive training examples. Rather than using the measurements from the full set of sensor nodes, the authors instead perform local classification by collecting measurements from a local neighborhood, and performing classification on that reduced dataset. While this does reduce the amount of computation performed in local nodes, the experimental success relies on the fact that an acoustic measurement is highly dependent on the distance from the source, and consequently distant measurements have very little effect on classification results. In addition to this signal dependence, there is no proof of global convergence of the algorithm.\nA key component to many of the distributed SVM algorithms presented here is the consensus algorithm used during training. As one major design goal in sensor networks (and robotic materials) is to minimize the amount of communication in the network, selection of gossip algorithm can have a large impact on the overall performance and lifespan of a sensor network. For instance, nodes share a full set of training data in [44], whereas only a set of points describing convex hulls of training data are shared in [73] In [34], two gossip protocols for SVM training were developed and compared: the minimum selective gossip algorithm (MSG-SVM), which attempts to minimize the amount of data diffused in the network, and the sufficient selective gossip algorithm (SSG-SVM), which attempts to maximize the optimality of the resulting trained SVM (i.e., match the performance of a global centralized SVM). In the MSG-SVM algorithm, each node computes its support vectors based on local training data. Nodes then communicate support vectors with onehop neighbors, and update their SVM models and support vectors with those received by\nneighboring nodes. At subsequent iterations, nodes communicate only the support vectors which have not been previously shared. This process continues until a terminal condition is met. As a minimal number of support vectors are shared, this algorithm is efficient in terms of communication. However, a sub-optimal discriminant hyperplane is produced\u2013at each iteration, the set of support vectors from training on the separate datasets are not necessarily the same as the support vectors obtained from the union of the datasets. The SSG-SVM algorithm, in contrast, is designed to converge to a globally optimal solution. In this algorithm, neighboring nodes exchange the points describing the convex hull of each training set, similar to the approach in [73]. Experiments demonstrated that the SSG-SVM algorithm resulted in a more accurate classifier than the MSG-SVM algorithm (by 2% - 5%), whereas the MSG-SVM algorithm resulted in many fewer data points communicated between neighbors (by a factor of about 3)."}, {"heading": "3.5.2 Distributed Expectation Maximization Algorithms for Mixture Models", "text": "A common approach to density estimation (e.g., population of fish, temperature distribution, density of gas present in atmosphere, etc.) in sensor networks is to model measurements of the environment as a mixture of Gaussian or other distributions. Several algorithms have been developed to determine the parameters of a Gaussian mixture model, usually as a distributed variation of the expectation-maximization (EM) algorithm. A distributed EM algorithm is developed and analyzed in [112]. In this approach, each node in the sensor network maintains mixture parameters (i.e., mixture probabilities, means and covariance matrices) of the global distribution. Learning the parameters is performed iteratively in a distributed manner. During an expectation step, each node calculates the sufficient statistic for the mixture model locally based on the current model parameters and local measurements. The statistic is broadcast through the network, and each node accumulates received statistics to computed the global sufficient statistic. The maximization step can be performed locally at each node, updating the parameters based on the sufficient statistic and local measurements. This approach converges to the same distribution achieved by a standard (i.e., non-distributed) EM algorithm. Multiple maximization steps can also be performed at each iteration, which results in faster convergences with respect to the number of communicated bits. However, this also results in a higher likelihood of converging to a local maximum.\nNewscast EM is a distributed EM algorithm which uses a gossip-based protocol to share mixture parameters and converge to a global solution [79]. During the maximization step, a node selects a neighboring node at random, where a neighbor is any node within communication range. The nodes exchange local versions of their parameters (i.e., mixture probabilities, means and covariance matrices), and perform an update by calculating the average value of each parameter, weighted by the local mixture probability. The expectation step is performed in parallel, using locally available data, and remains unchanged from the standard EM approach. This algorithm is shown to probabilistically converge to the global solution in exponentially fast time. However, this analysis assumes that nodes can communicate arbitrarily with any other node in the network, which is not typically the case in sensor networks, and convergence properties may not hold.\nA consensus-based approach to distributed EM is presented in [35]. This approach relies of a subset of nodes, b \u2208 B termed bridge sensors, which are used to maintain a set\nof consensus parameters, \u03d5\u0304b (i.e., parameters for each pdf in the mixture). Each node is directly connected to at least one bridge sensor (i.e., single-hop communication), and may be connected to multiple bridge sensors. Prior to each expectation step, the bridge sensors transmit their consensus variables to each neighboring node. Each node uses these consensus variables to perform the expectation step locally, assigning a mixture label to each measurement. The prior distribution over the mixtures, \u03c0j are determined locally. Performing an update on the mixture parameters involves solving the following optimization problem\nmaximize \u03d5\n\u2212 J\u2211 j=1 Ec { Lc(y, \u03b8j|x, \u03b8(i)j } subject to \u03d5j = \u03d5\u0304b, j \u2208 Nj, b \u2208 B\n0 \u2264 \u03c0j,k \u2264 1,\u2200j \u2208 J , k \u2208 K K\u2211 k=1 \u03c0j,k = 1\n(5)\nwhich can be solved in a distributed manner using the method of multipliers (MoM), and the dual of which introduces local Lagrange multipliers, \u03bbbj, and penalty coefficients, \u03bej. At each time step, the Lagrange multipliers and local and bridge mixture parameters are updated by\n\u03bb b(i+1) j = \u03bb b(i) j + \u03bej ( \u03d5 (i) j \u2212 \u03d5\u0304b(i) ) \u03d5 (i+1) j = argmin\n\u03d5j \u2212 N\u2211 n=1 \u2211 k = 1K c\u0302j,n(k)log[fk(xj,n;\u03c6j,k)]\n+ \u2211 b\u2208Bj \u03bbbj(\u03d5j \u2212 \u03d5\u0304b) + \u2211 b\u2208Bj \u03bej 2 \u2016\u03d5j \u2212 \u03d5\u0304b\u201622\n\u03d5\u0304 (i+1) b =\n\u2211 j\u2208Nb 1\u2211 \u03b2\u2208Nb \u03be\u03b2 ( \u03bb b(i+1) j + \u03bej\u03d5 (i+1) j\n) (6)\nwhere the local Lagrange multiplier and mixture parameters are calculated at each node, and then transmitted to the bridge nodes to calculate the consensus parameters. The parameters arrived at using this distributed approach also match those formulated from a centralized EM. In addition, this approach has the advantage of not requiring a path traversing across all sensors, requires only one-hop communication between sensors, and applies to general mixtures.\nA distributed EM algorithm similar to the approach in [112] is presented in [43]. In this approach, both the expectation and maximization steps are performed locally at each node. Rather than communicating sufficient statistics throughout the network at each step, as in [112], each node maintains an estimate of global summary quantities, xti,k. The statistics calculated by each node at the end of the expectation step, uti,k, and the global estimates are communicated to neighboring nodes. A consensus filter then updates the estimated global summary quantities using the equation\nxt+1i,k = x t i,k + \u03b7 \u2211 j\u2208Nj (xtj,k \u2212 xti,k) + (uti,k \u2212 xti,k)  (7) where \u03b7 is an update rate. Each node then performs a maximization state to update the parameters using the estimated global summary quantities. Rather than performing communication through the entire network, this approach works using an arbitrary hop count to communicate global summary quantities. This approach is stable and stochastically approximates the global maximum likelihood estimate of the mixture parameters."}, {"heading": "3.5.3 Distributed Algorithms for Graphical Models", "text": "Given the graphical nature of the communication network in sensor networks, algorithms for learning and inference in graphical models map well to sensor networks. For example, sensor networks may be represented as a graph, with sensor nodes representing nodes in the graph, and communication representing edges between nodes. Given this mapping, belief propagation algorithms are easily adapted for use with sensor networks.\nDistributed target tracking using is presented in [143]. By considering only the immediate neighborhood of nodes, the graph forms a Markov random field (MRF), which may be used as a probabilistic model for tracking small targets or determining the boundary of large targets. To do this, cliques are formed in the network, and the probability that the target is located within the clique or not is determined by nodes in the clique. Using a message passing algorithm, the probability of the boundary given measurements of all nodes can be determined. The approach has several advantages, namely allowing a fully distributed approach to tracking, requiring only local communication between cliques, allowing tracking of multiple targets, and allowing prior belief of target boundaries to be used.\nA similar belief propagation algorithm is described in [117,118] for performing distributed inference of latent environmental variables in a sensor network. This approach assumes that local sensor measurements can be modeled as the product of a measurement model and environment model. The measurement model represents the probability of a particular observation, conditioned on local environmental variables of interest, while the environmental model is a factorized prior (e.g., Markov or Bayesian network) over all environmental variables of interest. To perform distributed inference, four separate distributed algorithms are run concurrently through the network. A spanning tree formation algorithm computes a tree from the communication graph of the network. A junction tree formation algorithm determines which environmental variables are shared by different nodes in the tree, and ensures that the running intersection property is enforced in the network. The running intersection property ensures that if a variable is known by two nodes in the tree, the variable is also known by all nodes in the path between the two nodes. The junction tree formation algorithm allows each node to maintain a clique of variables for local inference, as in [143]. A tree optimization algorithm attempts to reduce the size of cliques in the junction tree by performing legal local edge swaps in a greedy manner. Finally, belief propagation can be performed over the tree through message passing, where messages involve communicating estimates of variables between nodes in the network. This approach modifies the belief propagation algorithm by introducing a robust message passing algorithm, allowing belief\npropagation to be performed without guarantees that the supporting algorithms have completed, and making belief propagation robust to node loss and communication loss. This is achieved by simply maintaining partial beliefs at each node\u2013a set of model fragments consisting of approximation of environmental variables and the likelihood of an observation are maintained, and are updated based on received messages from other nodes.\nA simpler loopy belief propagation algorithm had been described earlier than the junction tree based belief propagation algorithm [23]. Each sensor node maintains a Bayesian graphical model, where sensor measurements are conditioned on environmental state. The conditioning on environmental state introduces dependencies between neighboring sensor nodes. The investigation experimentally compares loopy belief propagation performed asynchronously in a sensor network to a synchronous approach, where updates to variables in the graphical model can be performed to a predefined sequence. The investigation demonstrates that loopy belief propagation can be applied in an asynchronous manner in sensor networks, and still converge to the same belief as a synchronized version of loopy belief propagation. The approach worked robustly in the presence of non-uniform communication rates between nodes, robust to node failure, and converges even in the presence of rapidly changing environmental conditions.\nDistributed Dynamic Bayesian Network. While there are no distributed temporal models available in the sensor network literature, distributed approaches to dynamic Bayesian networks are demonstrated for fault diagnosis in electronic circuits, and hidden gait recognition. A multi-stage fault diagnosis system for electronic circuits is presented in [131], which uses a DBN to represent the dynamics of the circuit based on the energy exchange between circuit components. The global DBN is factored into a maximal number of conditionally independent DBN Factors (DBN-Fs): a DBN-F is created such that it is conditionally independent from all other DBN-Fs given its inputs, and one or more state variables are replaced by algebraic functions of measured variables to enable the removal of across-time dependencies. Nominal diagnosers detect defects in the circuit given inputs and measurements by comparing an estimate of the measurements (calculated using particle filtering) and the actual measurements. Faults are propagated to other detectors through shared measurements (i.e., the algebraic representation of state variables which can be directly measured); by sharing measurements in this manner, detection of a fault is isolated to a single detector, while detectors sharing measurements with this detector simply treat it as a faulty measurement. While this approach provides a simple means of detecting defects in robotic materials, the generation of algebraic representation of state variables (which is simply deterministic voltage-current relationships in circuit models) based on observations may not be a trivial task.\nConsensus-based algorithms for hidden Markov models have also been explored [152], which are more closely aligned with the approaches in Section 3.5.3. In [152], individual sensors calculate the most likely sequence of gait phases using a continuous HMM (modeling observations as a multivariate Gaussian). At each time step, the current gait phase estimate from each sensor node is communicated to a central classifier. The central classifier then sets the phase estimate to the received values if all agree. In the case of a disagreement, the probability distribution of gait phases for each sensor node is estimated from the prior state estimate using a nominal transition matrix, from which the most likely gait phase is selected. This investigation used a small (four sensor node) model, and also assumed a nominal gait\ntransition matrix, which may not be available for all robotic materials applications."}, {"heading": "4 Machine Learning Approaches used in Engineered", "text": "Materials\nSeveral specific fields have been cited as motivation for robotic materials [99], where robotic materials may extend the potential of the materials of interest in these fields. In structural health monitoring (SHM) and nondestructive evaluation (NDE), material and structures could self-diagnose and self-repair. In the field of aerospace, morphing aerodynamic surfaces can improve lift and stability of aerospace vehicles. In the field of robotics, full-body tactile sensitive skins are of interest, as they provide a rich sensing modality which can augment existing sensors, specifically in safety-critical and highly occluded environments [54]. Finally, wearable computing can provide assistive technology and monitor human motion. Each of these fields have explored using machine learning techniques for domain-specific tasks. This section highlights the common approaches in each field, and describes some of the challenges faced in each."}, {"heading": "4.1 Structural Health Monitoring", "text": "Structural health monitoring is the process of detecting and identifying damage in structural and mechanical systems, such as civil (e.g., bridges, buildings), aerospace (e.g., aircraft wings or fuselages) or mechanical (e.g., oil platforms) infrastructures [30]. During the life cycle of these infrastructures, defects inherent in the underlying material grow until the structure can be considered in a state of damage, in which the performance of the structure is adversely affected. Once the damage affects the structure beyond some acceptable point, the structure is said to have failed. The goal of structural health monitoring is to provide a means of online identification and evaluation of damage to the structural system, using a periodic network of sensing elements. A smart structure may automatically perform monitoring, processing of data, and highlight the need for human intervention or repair. A more detailed definition of structural health monitoring defines a hierarchy of the main issues [168]:\n1. Detection: provide an indication that damage may be present in the structure.\n2. Localization: identify the probably position of the damage in the structure.\n3. Classification: identify the type of damage in the structure.\n4. Assessment: provide an estimate of the extent of the damage in the structure.\n5. Prediction: provide information about the safety of the structure, the remaining life of the structure, or a prediction of the growth of damage.\nThis hierarchy not only describes the main tasks of interest in structural health monitoring, but also the prerequisites for performing each operation. For example, damage must be detected before being localized, classification can only occur after localization, etc.\nPhysics-based analysis of structures involve modeling the response of a particular structure to some external stimulation, such as an impact or vibration. For simple structures, such as plates and beams with simple geometries, closed form solutions to responses can be easily calculated. However, when structures are more complex in geometry (e.g., an aircraft), or when defects such as cracks, voids or delaminations are present, an exact solution to stimulus response is not easily obtained. Finite element method (FEM) [179] is a powerful and common approach which involves generating a mesh which approximates the structure of interest, approximating the physical response of each element in the mesh, and enforcing continuity of the physical behavior between meshes at their boundary. For structural health monitoring, the undamaged state of a structure may be simulated using FEM, and the behavior of the actual structure can be compared to this simulation to determine the presence of defects or damage. Additionally, failure responses under cyclic loading, such as stiffness degradation and crack propagation in composites, can be simulated to provide failure analysis of the structure of interest [180]. The primary drawback of FEM is the computational requirements are very large: the physical dimensions of meshes must be small enough to effectively model small defects, while the number of meshes must be sufficient to cover the entire structure under investigation. Machine learning approaches, in contrast, exchange the complexity of physically modeling the system with gathering a large number of training examples. For complex objects, this may be more easily achieved. For damage detection, training examples are only required for situations where the system is operating in an undamaged state, and defects can be simulated in many cases by introducing masses or bumpers where a defect would occur.\nA common approach to investigating structures is to measure the response of the structure to some external vibration. In addition to a wide number of developed features available, large structures are typically stimulated from external sources during operation. For instance, vibrations can be generated in a multi-story building during an earthquake [29,147]. Vibrations are naturally induced in aircraft surfaces during flight, and on bridges due to wind or dynamic loading. Vibrations can also be explicitly generated by external actuators. Piezoelectric transducers have also been used to generate vibrations in composite panels [102]. Structures are also excited by placing them on large shakers [96, 171]. These two approaches are generally reserved for lab investigations, as they require an additional component or are impractical for real-world applications.\nAs discussed in [170], each of the structural health monitoring tasks maps well to a specific machine learning objective. Damage detection is best framed as a density estimation problem: measurements from undamaged components can be described as some probability distribution, and damage is detected by measuring outliers of this distribution. Classification could also be considered for damage detection (i.e., classify components as damaged or undamaged), however, this requires a prohibitively large number of damaged samples for training. Damage localization is easily framed as a regression problem. Identifying damage is best suited as a classification problem. In many cases, regression is suitable for damage assessment. Machine learning techniques, however, are typically not suitable for damage prediction, as tasks such as estimating remaining life or predicting the propagation of a crack require detailed knowledge of the underlying physical system, properties of the material, and physical modeling of the propagation of damage."}, {"heading": "4.1.1 Damage Detection", "text": "Damage detection usually involves constructing a density estimation of features from the undamaged system, and by treating the presence of outliers as an indication of damage, or by projecting feature vectors onto a model trained to represent features from an undamaged system and using the residual error as an indication of damage. The output of an detection model is referred to as a damage indicator [32], whose output is a positive scalar which indicates the likelihood that damage is present. Detection models require a set of training vectors measured from the undamaged system, and outputs a damage indicator, DI, from a given input feature vector.\nFraming damage detection as an anomaly detection task is a pragmatic decision. Alternatively, a classifier could be trained to identify a structure as defective or not defective. However, this requires generating training examples for cases where defects are present. This could be prohibitively costly, as several iterations of the same structure would need to be damaged at several locations to collect an appropriate cases. Despite this, classification approaches have been explored in the past. Simulated benchmark data has been generated using finite element models [62], and have used to train classifiers for damage detection [147].\nVariability due to operational or environmental changes can adversely affect underlying measurements used to detect damage [32]. For example, the natural frequency of bridge girders can change by 5-10% due to variations in traffic or temperature. Damage-sensitive features have been developed which are robust to these types of variations. For example, the coefficients of an autoregressive model fit to accelerometer measurements were used to detect cracks in a simulated building during an earthquake, where the load or stiffness of the building is varied [32]. Using these features, total detection error ranged from 4.0% to 4.6%. In a similar investigation, bumpers were introduced into a vibrating mass-spring system [113]. Using autoregressive features, defects were detected 67 out of 70 times, despite variations in the level of applied vibration.\nMSD-based DIs have been used extensively for damage detection. In [172], the presence of delamination in composite plates was detected using MSD when a ultrasonic sensor was inline within 20mm of the delamination. In [32], non-linear defects were introduced into a three-story frame structure; defects could be detected using MSD with an error rate of 4.0%. MSD, KDE, and autoencoder DIs were compared in [171]. Saw cuts were introduced into a panel, whose lengths varied from 10% to 90% of the length of the panel, and were measured using accelerometers and vibrating the panel using an external source. MSD-based DIs could reliably detect cuts 30% of the panel length or longer, KDE-based DI performed significantly worse, detecting cuts 40% of the length or longer, while the autoencoder approach produced the best results, detecting defects 20% of the length or longer.\nA similar comparison was performed in [32], where defects in a four-story structure were simulated and measured using accelerometers at each floor. Reduction in stiffness of the columns and added mass on the floors were used to simulate environmental variability, though these were not considered defects. In this study, DIs based on MSD, factor analysis, autoencoders and SVD were used, resulting in an overall detection error of 4.0%, 4.2%, 4.3% and 4.6%, respectively. The MSD- and autoencoder based algorithms resulted in lower false negative results, while the factor analysis and SVD-based results resulted in lower false positive results.\nWhile classification approaches are typically infeasible due to the high cost of obtained examples of damaged structures, simulated data has shown that classifiers can produce very accurate predictions of whether damage is present in a structure. Using simulated data, classification approaches to damage detection have demonstrated a high level of accuracy. For example, support vector machines and neural networks have classified a simulated building as damaged or not damaged, with accuracies of 99.2% - 99.8% and 95.3% - 98.4%, respectively [147].\nFinally, damage detection and localization have also been combined into a single classifier, by considering damage location as discrete sections of the structure and incorporating an \u201cundamaged\u201d class [102], as part of a SVM-based geometric probabilistic decision tree (SVMGPDT)."}, {"heading": "4.1.2 Damage Localization", "text": "Damage localization is often cast in a regression framework, with output being coordinates of the damage, though classification models have been used when damage is located at discrete position in the structure. For example, [170] use a classifier to identify which of nine panels are damaged in an aircraft wing.\nLocalization of defects are often better suited as classification problems, depending on the underlying structure under investigation or the desired granularity of localization. For instance, in a truss structure (e.g., certain bridges and buildings), it may be more important to identify which beam is faulty, rather than an exact location of the actual damage. Similarly, determining if a specific composite panel is defective on an aircraft may be sufficient, as the entire panel would be replaced rather than repaired. Such a classification approach was given in [97]. Transmissibility features were calculated using piezoelectric elements located on a aircraft wing, such that panels were located between transmitting and receiving elements. A neural network was trained to detect which of nine panels were removed with an accuracy of 86.5%.\nThe SVM-GPDT used in [102] uses a probabilistic binary tree to determine the location of a defect in a carbon FRP panel, using three piezoelectric transducers (one to emit and two to detect vibrations). Damage was simulated by placing weights in different regions of the panel. Features consisted of 200 Fourier components calculated at each detecting transducers. Using this approach results in classifier which is more robust to misclassification. Each leaf produces a probability that the defect occurs in a particular subregion of the panel; the geometric decision tree results in misclassifications occurring more often in neighboring nodes when compared to a \u201cflat\u201d one-against-all SVM classifier. The authors report that damage can be localized well in 88% of example cases, can able to distinguish between two severities with an accuracy of 99.42%.\nOne specific task in structural health monitoring best suited as damage localization is impact monitoring. Impact monitoring can be very useful in SHM, as impacts are often the cause of serious damage located in the interior of the material, making resulting damage difficult to detect. This is of specific concern in the aerospace industry, where critical components are constructed of lightweight composite panels, and are subject to high-speed impacts during flight. Impact detection is naturally framed as a localization problem, either through triangulation or machine learning techniques [48]. Impact monitoring has the advantage of\nallowing the use of training data collected from real samples\u2013impacts which have low enough energy can be used to collect data without damaging the training samples.\nSeveral investigations involve detecting and localizing impacts in composite aircraft wings. In [48], a neural network was trained to determine the location of an impact on aircraft composite panels using time-domain features (minimum and maximum values, time of minimum and maximum values, beginning and end of signal detected, etc.). The average error of the estimated location of impact was 0.85% of the area of the panel using 12 sensors, and 1.61% using 4 sensors. An similar investigation found that introducing noise of 20% RMS of the measured signal in training data results in localization error of 2.9% of the area using time after impact of maximum response features, and 6.5% of the area using magnitude of maximum response [149]. In addition, the force amplitude of the impact was estimated with a mean error of 28%. A neural network implemented on an actual wing section section achieved a localization error of 1.76% using a regression approach [84]. A secondary neural network was trained to classify which portion of the wing (leading edge, center, training edge) was impacted with an accuracy of 3.2%, with errors near the border between regions. Combining the two approaches, by training a regression network for each region, resulted in a reduction in localization error to 0.48%. In [142], two sensors were used to localize impacts on a simulated composite panel using a neural network. In addition to the features used in [48], the authors investigated using time of arrival of the signal to each sensor, and information from the discrete wavelet transform (DWT) of the signal, with a localization error was 0.4%. Note that these results were from simulated panels, and required time of arrival data, which may be difficult to obtain without synchronization of sensor measurements."}, {"heading": "4.1.3 Damage Assessment", "text": "The final stage of structural analysis involves assessing the severity of damage on the structure.\nIn [170], neural networks were used to determine the percentage of a panel missing. Training sets consisted of data collected from panels with holes whose area is 25%, 50%, 75% or 100% (i.e. missing panel), representing various damage severities. Using neural networks with five to nine hidden units, the damage area was calculated with a mean square error ranging from 0.92% to 5.6%, depending on the panel. As damage severity was set to four discrete values, and as a separate neural network is required for each panel, this approach is not the most satisfactory approach.\nDamage localization approaches which use classifiers to identify a discrete location of damage have been extended to assess the level of damage at those locations. For instance, in [29], three neural networks were trained to analyze a simulated building structure using four accelerometers. The first two detected and identify which floor of the building is defective, while the third was trained to identify the level of damage (e.g., percent reduction of bracing stiffness) of each floor.\nThe SVM-GPDT approach used in [102] incorporates a simple binary SVM classifier to identify which of two damage severities is present in the FRP panel, with an accuracy of 99.42%. Unlike other approaches, this overall approach performs damage assessment prior to localization (as opposed to localization before assessment). Using this approach, the damage severity can be used as a prior to the probabilistic decision tree to improve localization\naccuracy."}, {"heading": "4.1.4 Damage Prediction", "text": "As mentioned earlier, machine learning approaches are poorly suited to predict the growth of damage, safety or lifetime of a structure. Despite this, some machine learning approaches have been used to perform these types of predictions. Using resistance measurements, monitoring the fatigue of CFRP panels is possible, and neural networks have been used to predict fatigue life (i.e., number of remaining load cycles) and stiffness reduction in the panel [140]."}, {"heading": "4.2 Aerospace Applications", "text": "From the perspective of robotic materials, tasks of interest in aerospace applications consist primarily of monitoring aerodynamic surfaces for defects, and controlling the shape of aerodynamic surfaces to increase lift, provide stability or improve efficiency. Machine learning approaches to the formal task are explored as structural health monitoring in the prior section. This section investigates machine learning techniques used for control of morphable aerodynamic surfaces."}, {"heading": "4.2.1 Morphable Aerodynamic Surfaces", "text": "Morphing aircraft describe a wide range of approaches to adaptable aircraft components [165]. Several advancements in wing capabilities have been realized over the last century. Leading-edge and trailing-edge flaps and slats enable control over the camber of the wing and allow safer operation at low speeds. Passive variable camber wings were realized using a compliant structure. Changing wing area is possible through foldable wings, and variable wing sweep and out-of-plane wing shapes are similarly possible.\nMore recently, using smart materials, such as shape memory alloys and piezoelectric materials, to construct morphable aircraft has been proposed. Using such active elements can allow for aircraft that attenuate dynamic loads, suppress flutter and vibration, perform noise cancellation inside the aircraft, and provide adaptive stiffness control [165]. Large scale research efforts into morphing aircraft include the NASA Langley Morphing Aircraft Project [167] and the DARPA Morphing Aircraft Structures Program [164]. This latter research effort has resulted in a push for wings capable of altering its shape in a drastic and continuous manner, similar to the configuration capabilities of bat and bird wings [20,119]. This would allow aircraft which could achieve high level of performance in contradictory situations (e.g., quick maneuvering versus long-duration cruising) through various wing configurations.\nShape memory alloys (SMA) are used extensively as a means of actuation in morphable wings [12, 134]. Characterization and modeling of SMA materials is still an active area of research. SMA materials exhibit two types of effects based on temperature and load, namely a super-elastic effect and a shape memory effect [12]. Additionally, the temperature-strain relationship of the material demonstrates hysteresis as temperature is varied, making control difficult [46]. To handle this complexity, some recent studies have involved determining an optimal way of controlling the material, including using the SARSA algorithm to approximate a state-action value function based on a K nearest neighbor (KNN) approach [75], and\na neuro-fuzzy controller to control the shape of a flexible wing skin [42]. Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.\nReinforcement learning has been used in conjunction with a structured adaptive model inversion (SAMI) controller to create an adaptive controller for morphable aircraft, as shown in Figure 5. A reinforcement learning module learns to reconfigure a vehicle to a shape which is optimal with respect to flight condition and some cost\u2013for instance, to minimize drag force, increase lift, or minimize fuel consumption. The SAMI controller is an adaptive controller which allows the aircraft to track a reference trajectory in the presence of changes in dynamic behavior due to vehicle shape. This architecture decouples the tasks of optimizing shape and maintaining trajectory, and allow shape control to be learned independently.\nUsing the Q-Learning algorithm, the control of various shapes and use of various approximation functions have been explored. Initial explorations involved simple geometric shapes [156, 159, 160], with more recent results determining policies for airfoil crosssections [81, 82]. Preliminary explorations controlled the shape of a constant-volume ellipsoid [26,156] or block [160], using an arbitrary functions to describe the behavior of the shape with respect to input voltage, and an arbitrary function for the ideal shape for a particular flight condition. Shape change is described by second-order differential equations, so that the learned policy must be time-dependent.\nThe trained policy generates control voltages to adjust the shape based on current flight conditions. The action-value function (i.e, Q function) is described using a variety of function\napproximations. Initially, a k-nearest neighbor (KNN) approach interpolates the value of the Q function from the interpolation of the K nearest state-action pairs [156], though this suffered when interpolating in regions which have not seen training examples. A function approximator consisting of a linear combination of tile functions (i.e., tile coding) was used with the shape changing block [160]. A Galerkin-based Sequential Function Approximation (SFA) is used in [26,159], which uses the Petrov-Galerkin approach to select the coefficients for a linear combination of radial basis functions. The SFA approach resulted in a reduction of RMS error of 10% to 20% compared to the KNN approach.\nThe above approach has been extended to control the cross-sectional shape of an airfoil [81, 82]. The model used allowed for a policy to control of the thickness and camber at 100 locations along the length of the airfoil, and optimal configuration is based on the lift, drag and moment coefficient about the leading edge of the airfoil. As in [156], the valueaction function is approximated using a KNN approach. To reduce the number of possible state-action pairs, the state-action space is discretized into a lattice, in which admissible actions consist of only increasing or decreasing the thickness or camber by a fixed percentage, resulting in 180 to 13,516 state-action pairs, depending on the discretization.\nIn addition to controlling the shape of an airfoil, Q-Learning has been used to learn the trajectory of flapping wings for micro aerial vehicles (MAVs) [106,107]. While shape control is useful for optimizing a static configuration for various flight parameters, while flapping involves dynamic, though repetitive, actions in a stationary or slowly-varying environment. In these investigations, the time-varying stroke angle and angle of attack of an insect-like wing is learned which maximizes the lift force of the wing. Simulation results [106] demonstrate that lift force and the frequency of jerk (which could damage wing joints) can be jointly optimized using Q-Learning. A follow-up experiment finalized the trajectory of a physical wing using Q-Learning after a trajectory was formed using the simulation [107]."}, {"heading": "4.3 Wearable Computing", "text": "Several applications in wearable computing consist of analyzing motion through one or more sensors located about the body. Activity recognition, also known as context awareness in the wearable community, involves identifying physical activities performed by a wearer, from low-level activities (e.g., standing, walking, and running) to high-level activities (e.g., vacuuming, brusing teeth, and making breakfast). Accelerometers are typically used as sensors [126], as these are typically less expensive than other appropriate sensors and are present in many consumer electronic devices (e.g., smartphone), through gyroscopes or IMUs are also used. Anomalous gaits, such as freezing gait, are present in individuals with diseases such as Parkinson\u2019s disease, or after a stroke [92]. Detection of gait anomaly and be used to predict and possibly prevent falls. Finally, soft, compliant exosuits show potential to assist the wearer with walking, with potential military and rehabilitation applications [9, 21]."}, {"heading": "4.3.1 Activity Recognition", "text": "Several algorithms have been used to classify activities. Investigations into classification of activity include single-sensor classification systems, and classification using multiple sensors. While multiple sensors provide localized information from various positions on the body (e.g.,\nchest, ankle, knee, etc.), such as in [137], a single sensor approach is much more pragmatic for the wearer, especially if there are no requirements on sensor positioning [87].\nPattern recognition approaches have been shown to be superior to heuristic based approaches in several investigations. In these investigations, features are extracted from a single time window, and traditional approaches are used are used to perform classification. In [3], features were extracted from a single accelerometer, namely, separating gravity components, and calculating shifted delta coefficients (SDC, 15 features which estimate time derivative of the signal) and signal magnitude area (SMA, which differentiate between active and restful activities) from the activity, for a total of 25 features. Using a rule-based heuristic system and thresholding, an accuracy of 71.7% for three postures and five activities, while a GMM achieved an accuracy of 92.2%. Random forests were used to classify five activities from one second windows of accelerometer data [17], with an accuracy ranging from 88.8% \u2013 97.7%. This approach relied on only a single accelerometer, and used the best 20 of 319 features to build the classifier. Five activities were classified using a Naive Bayes classifier and decision tree classifiers in [87] using time, frequency and orientation features, with accuracies ranging from 49.4% \u2013 95.5%. While lower than other approaches described here, the sensor was placed without specific orientation on subjects\u2019 wrist, sample rate was lower than other approaches (at 20Hz), and longer time windows (16 seconds) were used. Additionally, the approach reduces the 19 features to 5 features using PCA.\nThe previous investigations are based on measurements from a single accelerometer. These investigations typically leverage data from devices such as smartphones or wrist mounted accelerometers. Multiple accelerometers, gyroscopes and/or IMUs have been distributed in various locations on the body (e.g., lower and upper arms and legs, torso, etc.). For instance, the Opportunity dataset [137] provides IMU and/or accelerometer measurements at the upper and lower arms and legs, feet, knees, wrists, hands, hip and back, with the goal of providing a dataset to investigate classifying modes of locomotion (standing, sitting, walking and lying), gestures (e.g., opening a door) and high-level activities (e.g., making breakfast). Such a dataset is of particular interest for investigation as a robotic material, as each sensor represents a potential location of a computing node. The authors provide baseline classification accuracies using the mean and variance of sensor measurements over 0.5 second windows as features. K nearest neighbor (1-NN and 3-NN), nearest centroid classifier, linear and quadratic discriminant analysis were used, with classification accuracies reported for four subjects ranging from 54%\u201383% for mode of locomotion, and 39%\u201384% for gesture.\nThe above studied do not consider the long-term temporal aspect of activities. In addition to classification based on short time windows, sequential models, such as hidden Markov models (HMMs), may be used for activity recognition. In [95], five biaxial accelerometers were used to classify seven low-level activities (e.g., walking, running, standing, etc.) using GMM-HMMs. Features calculated for each accelerometer axis included the DC component, spectral energy, spectral entropy, and correlation coefficients between two measurement channels. Individual frames are classified using a Gaussian mixture model (GMM), whose parameters are dependent on the hidden state of the HMM. The classification from the GMM of the feature vector is then used as an observation for a continuous emission HMM, where the hidden states corresponds to activity. In addition, individual frames were rejected if likelihood scores were below a threshold. The GMM-HMM model achieved an accuracy\nof 95.1% for seven activities, and an accuracy of 99.0% for a three activity (sit-stand-walk) dataset. A comparison with state-of-the-art frame-level classification approaches (GMM, kNN, SVM, Naive Bayes, ANN, etc.); incorporating a cHMM over several frames as a second phase is shown to improve classification results of these approaches [94].\nDeep learning approaches have been applied for classifying activities and gaits using individual and multiple on body accelerometers, gyroscopes and/or IMUs. In [121], a deep belief network (DBN) was trained by stacking four layers of RBMs to learn features from a 64-sample window of sensor data for activity recognition. The RBM was built with 192 Gaussian input neurons (64 samples, three axes), two binary hidden layers with 1024 units each, and a final 30 unit binary layer, representing the learned features. The features extracted using this approach, when used with a nearest neighbor classifier resulted in improved accuracy compared with using statistical, spectral and PCA features. The authors node that, in addition to this improvement, DBN-based features were less reliant on the quantity of training data when compared with PCA features. In [178], the authors note that the RBM approach does not capture local dependencies in the time series signal. The authors use a convolutional neural network to classify activities. The network consisted of a 1D convolutional layer with 12 filters with size of 20 units, a max pooling layer with pool size of 3 units, two fully connected hiddel layers with 1024 and 30 units, and a softmax classifier layer. This architecture showed an improvement in accuracy of 1.2% \u2013 9.02% over the results obtained in [121], which, the authors argue, is due to the invariance to location of scale of learned features. These two approaches attempt to simply classify activities at each frame. Similarly, in [175], the authors construct a CNN consisting of two convolutional / max pooling layers (50 filters of 5 units, max pool size of 2 units, 40 filters of 9 units, max pool size of 2 units), followed by a convolutional layer with 20 filters of 3 units, a unification layer and softmax output layer. The authors report an accuracy of 85.8%\u201386.7% and 95.0%\u201396.0% for two datasets, both of which are an improvement over the results presented in [121].\nIn [4], the authors build a DBN as observations for a HMM, in order to capture the temporal aspect of activities. Using only the DBN, a recognition accuracy of 89.39% was achieved for a 10 activity dataset, using a single accelerometer. Adding the HMM layer, and considering a 4 second history of measurements results in a significant improvement in accuracy to 99.13%. Finally, in [116], the authors build a activity classifier by combining a CNN with an LSTM. The CNN used consists of four convolutional layers, each with 64 filters and 5 units per filter. This was followed by two LSTM layers with 128 units each, and a softmax classification layer. A baseline CNN was also built by replacing the LSTM layers with a fully connected, non-recurrent layer, for comparison. The CNN-LSTM model showed improvement over both the baseline CNN model, as well as for the results reported in the deep network approaches in the previously mentioned investigations (91.5% and 95.8% for the datasets considered). The authors note that the networks were trained and executed on a GPU; as such, the hardware requirements make such a network unsuitable for wearable applications.\nOne primary issue with activity recognition is that classifiers are highly dependent on the subjects used to generate the training data, and do not generalize to new users, as the dataset is no longer independently and identically distributed. In [126], classification accuracy is in the range of 92% \u2013 99% when training and test data were gathered from the same subject, however, this drops to 46% \u2013 73% when the test data is gathered from a different subject;\neven when the data is gathered from the same subject on differing days, the test accuracy drops to 55% \u2013 90%."}, {"heading": "4.3.2 Gait Anomaly", "text": "Wearable devices have also been recently proposed to detect gait anomalies due to hemiplegia, Parkinson\u2019s disease, pain in the legs or back, or other related issues, as well as detecting falls in patients [122]. Detecting gait anomaly in Parkinsonian patients has been explored as a classification problem in several studies. In [92], neural networks were trained to discriminate the walking gait of Parkinson\u2019s patients and a healthy control group. This investigation utilized external cameras and floor mounted force plates to collect data, however, it is feasible to collect the features (joint angles and contact pressures at the foot) using wearable sensors. Classification accuracy of 81.25% was achieved using basic or kinematic features; this accuracy was increased to 87.5% by combining basic, kinetic and kinematic features. Classification accuracy of 98.18% was achieved using SVMs [90]. Principle components analysis was used to enhance the three sets of features in [89], resulting in improved classification rate for neural network, SVM and Na\u0308\u0131ve Bayes classifiers. Additionally, by calculating Pearson\u2019s correlation coefficient for each feature (comparing normal and Parkinson\u2019s cases), the authors extracted four significant features and improved neural network performance to a classification accuracy of 95.63% [91]. Neural networks were also used in [36] to assess the risk of a fall, using data collected from pressure sensors embedded in the sole of a shoe. The investigation used features extracted during the stance phase (i.e., foot in contact with the floor), allowing risk to be assessed at each step, and could accurately assess four levels of risk with an accuracy of 76.6%.\nFall detection and prevention is an interesting application similar to detecting anomalous gait. Fall-related injuries are common in the elderly population [19]. Threshold-based detection algorithms, using accelerometer measurements, have been shown useful [19, 148] for detecting falls. Threshold-based approaches typically consider accelerations above a certain threshold as a fall; such accelerations could be generated from normal activities, such as jumping or jogging. As an alternative to threshold-based approaches, neural networks were trained on the absolute value and integration of acceleration along three axis to detect falls, and achieved an accuracy of 98.4%, while being able to avoiding mis-identifying normal, high-acceleration activities as falls [161].\nAs with activity recognition, most investigations are designed around analyzing gait over a short time frame. As with activity recognition, incorporating sequential models improve gait anomaly detection results. In [28], the cross-correlation of a gait signal, measured from pressure sensors located at the sole of the foot, with a reference signal was used to extract a set of 15 features. A recurrent neural network trained on these features to identify healthy and pathological subjects demonstrated an overall classification accuracy of 90.6%, while a feed-forward neural network only achieved 81.2%, and could identify pathology (ALS, Parkinson\u2019s disease, Huntington\u2019s disease) with an overall accuracy of 89.8%, while the feedforward network could only identify specific pathology with an accuracy of 52.1%."}, {"heading": "4.3.3 Exoskeleton and Exosuit Control", "text": "Control of exosuits presents a final application of machine learning in wearable devices. Exosuits have been developed to assist gait by applying force during specific phases of walking gait [7, 8, 163], as medical assistance devices [52], or rehabilitation assistance [9].\nRigid exoskeletons, which consist of rigid linkage and motor-driven joints, have been developed and tested. While such suits can assist the wearer a carrying large loads, they have not been shown to improve performance, and actually result in the wearer expending more energy to walk [21]. In contrast, soft exosuits, which consist of cables or pneumatic actuators supported by form-fitting fabric webbing, provide a lightweight alternative which can boost the walking performance of the wearer. For instance, a cable system attached to a thigh brace and driven by motors located in a backpack can provide a rotational moment about the hip after the heel strike during walking gait, and can contribute up to 30% of the biological moment for walking [8]. An extension of this system also provided additional actuation to provide a rotation moment about the ankle, resulting in torques of 21% and 19% of the biological moments about the ankle and hip, respectively [7]. Using pneumatically driven McKibben actuators, a lower-body exosuit which can provide plantarflexion and dorsiflexion of the ankle and flexion and extension of the knee and hip is described in [163]. Evaluation of this suit was limited to actuations which provided assistance with plantarflexion of the ankle, which provided a 10.2% reduction in the metabolic power while walking, though this reduction in power did not compensate for the increased power requirements due to the weight of the suit.\nAs most of the research available in soft exosuits investigates mechanical aspects, investigation into sensing and control tends to be limited. For example, in [8], actuation is performed during predefined phases of an assumed constant walking gait, which is estimated by timing of heel strike measured by a foot switch. Similarly, foot switches were used exclusively in [163]. Detecting the peak angular velocity of a gyroscope was added in [7]. In [77], control signals for a soft robotic ankle were generated from the wearer\u2019s soleus electromyography (EMG) signals; a smoothed envelope of this signal is used as the actuation signal for the pneumatic actuator.\nWhile control is generally a weakness in existing exoskeleton and exosuits, one approach suggested as promising is the adaptive neural oscillators [177]. Adaptive neural oscillators are recurrent neural networks, with recurrent feedback from the output to the input [27]. These models can fall into a forced, synchronized oscillation with the input signal, or be trained to regenerate the input oscillation without the presence of the diving oscillator. In [130], an artificial oscillator is used to control a compliant assistive elbow orthosis. The adaptive oscillator provides assistive torque by attempting to synchronize the frequency, amplitude and phase of the actuation signal with that of the human movement. This approach has been extended to learn the angular trajectories of a wearer\u2019s hips, and provide assisting torques during walking at various speeds [128, 129], with the exosuit providing up to an average of 26.38 W/kg of assistance to the wearer. Adaptive oscillators have also been used for high-level control of an active hip orthosis, in conjunction with a low-level PID controller for torque regulation [39]."}, {"heading": "4.4 Robotic Skin", "text": "The final application of interest for robotic materials is full-bodied robotic skin. Though highdensity tactile sensors have been in use with robotic fingertips and hands for several decades, full body tactile sensitive arrays for artificial skins have only recently been explored [24]. The desire for full-body tactile sensing largely stems from the shift of applications from a controlled environment (e.g., a factory), where a robot can easily plan and execute tasks due to high certainty about the environment, to more human environments: the presence of humans or other actors, dynamic variations in the world, limited sensing, large variation of objects types and positions, and compliance and safety constraints require a much higher level of sensing and autonomous behavior [6, 68]."}, {"heading": "4.4.1 Full Body Manipulation", "text": "Object manipulation in robotics has been explored extensively when limited to manipulation with end effectors. Several full-body, modular tactile sensitive skins have been developed in the last several years [103,115,139,154], which are designed to conform to arbitrary robotic surfaces and perform sensing, preprocessing and routing of data to a sink computer. These systems allow for using tactile feedback for manipulation of large objects with humanoid robots [104,114]. While there exists several tactile sensors for robotic applications, most are limited to use with fingertips or hands, and do not exhibit a modular design.\nMost research into modular robotic skin involves sensor design, transduction, low-level processing and architectural considerations, and have not investigated tasks such as object or texture recognition. However, some initial investigations into full-body manipulation of large objects have included attempting to determine surface texture and weight from Each arms of a NAO robot was covered with seven Hex-o-Skin cells [103] to identify five different surface textures (cardboard, glass, sponge, bubble plastic and sand paper) on objects with two separate weights (500g and 1,500g) [67]. Data was collected using two separate interactions: grasping an object with a minimum amount of force to prevent sliding, and reducing the force until the object is allowed to slide. Features were extracted from one second time windows. For each sensor, Hjorth parameters (activity, mobility and complexity features, based on the variance of the signal and its derivative) were extracted for each accelerometer axis. The correlation coefficient for each pair of axes was also computed for use as a feature. SVMs were used to identify surface texture and weight, with surface classification accuracy in the range of 86% \u2013 100% and weight classification accuracy of 84%\u2013100%, depending on features used. Given the parallels between grasping with a robotic hand and full-body grasping, using machine learning approaches for object recognition, texture recognition and determining grasp stability are interesting areas of research for modular tactile-sensitive skins."}, {"heading": "4.4.2 Affective Touch", "text": "Performing touch-based affective sensing, such as identifying the toucher\u2019s emotional state, degree of expressiveness of touch, and/or social context of interaction, has found application in social and therapeutic robots [5]. Specific touch-sensitive robots include Robovie-IIS, a humanoid robot utilizing full-body tactile sensor elements [153], Huggable, a robot capable of\ndetecting temperature, force, light touch and kinesthetics [150], and the Haptic Creature [33], which uses pressure sensitive fabric and conductive and stroke sensitive fur. Affective touch has also been investigated on humanoid robots, using full-body sensor arrays [66].\nOne of the first investigations in recognizing affective touch involved identifying touch using a 44 x 44 element pressure sensitive interface [109]. The total load and contact area are calculated at each frame; the peak value of the total load and corresponding total area are used as features. Using k-nearest neighbor approach, five gestures could be represented with accuracies ranging from 27.3% (tickle) to 100.0% (slap). Tickle and stroke gestures were difficult to distinguish, consequently, the slope at of the total load and area at the time of the peak load was calculated, which provide temporal information enabling these two gestures to be distinguished.\nIn [153], clusters were generated from a set of haptic interactions, using the output of tactile sensors at each time step during an interaction as a point in an individual cluster. Hierarchical clustering of the interactions was then performed, which allows for the generation of an arbitrary number of clusters; the resulting clusters can be used to describe future interactions with the robot. Gestures were labeled from video recordings, and the clustering method demonstrated that common gestures (e.g. \u201cpoke the chest\u201d, \u201cstroke the head\u201d, etc.) tended to fall into a common cluster. Additionally, gestures with similar locations and intent (e.g., \u201cpoke the chest\u201d and \u201dpush the shoulder\u201d) were often assigned the same cluster. This approach is interesting in that it does not assume any predefined set of gestures; rather, gestures could be automatically detected based on previous experiences.\nA semantic description tree was developed for 31 possible contact verbs was developed in [74,78], classifying the actions based on contact time, incidence of a repeat, force, purpose and object used to perform the touch. Based on this, the authors describe four features (force level, contact time, repeat and change in contact area) for use with classifying four touch patterns. Measurements from nine contact sensors and an accelerometer, using measurement windows of three different durations (10ms, 40ms and 200ms), were used to extract these features. A temporal decision tree is used to classify the features in an online manner, producing a classification once sufficient information has been collected, resulting in recognition accuracies of 79.62% \u2013 87.83%. The same features were used in [174], and were able to identify three touch patterns in a robotic pet using three pressure sensors. Classification accuracy of 98.67% was achieved using a Na\u0308\u0131ve Bayes classifier.\nIn [157], a pressure sensitive fabric skin was constructed and placed upon an artificial arm. Features used included the minimum, maximum and mean pressure intensity, minimum and maximum rate of pressure change, and the area, duration, center and displacement of the touch. Using LogitBoost with decision stumps, eight touch modalities could be identified with an average accuracy of 70.7% for individual participants; human classification averaged at 90.1%.\nMore recently, Hex-o-Skin [103] was applied to the chest and back of a NAO robot for identifying nine touch modalities [66]. Hjorth parameters and correlation coefficients were calculated from accelerometer data, collected over the duration of a gesture, and averaged over cells which were contacted, similar to [67]. Experiments involved identifying touches at a single location (chest or back) or multiple locations, and while the robot was stationary or in motion. Classification accuracies were generally high, with some variation based on experimental design: single touch classification accuracy was 96.79% with the robot stationary,\n94.4% with the robot in motion, and 92.52% when trained on stationary data and evaluated on data while in motion. Multiple touch classification, which relied on training from single touch data, achieved an accuracy of 93.03%. These results demonstrate the robustness of the features calculated to touch location and robot motion: when compared with results using features adapted from [78, 109, 157], results were significantly higher, with reported accuracies of 58.1% \u2013 67.3% for the adapted features.\nUsing the statistics of a two second time window (minimum, maximum, mean, variance, etc.), 28 features were calculated to identify nine gestures using data gathered from 16 participants [33]. Gestures were classified using a random forest, neural network, logistic regression and Bayes classifiers, with accuracies of 86%, 75%, 72% and 68%, respectively. A preliminary investigation into classifying the CoST dataset used a variety of features, including temporal statistic, size of contact area, histogram-based features, and motionbased features [162]. Using these features, neural network was able to achieve an accuracy of 60.2%.\nThe increased interest has resulted in two major social gesture corpora being made available: the Corpus of Social Touch (CoST) dataset [63,65], consisting of 14 gestures gathered from a pressure-sensitive fabric, and the Human-Animal Affective Robot Touch (HAART) dataset [16], consisting of 7 gestures gathered from the Haptic Creature. While most of the work has been in the development of inexpensive sensor suites for use in social robotics, there has been some work in automatically identifying the affect social touch.\nSeveral approaches to recognizing gestures in the CoST and HAART datasets from several groups were recently reported [64], with the goal of identifying approaches which may be appropriated from well established fields, such as speech recognition and video analysis. Features were generally extracted from individual frames (i.e., sensor array data at a single time point), individual channels (i.e., the values of a single sensor measurement over the duration of the gesture), and global features (i.e., a summary of the sensor array data over time). Several histogram features were developed. In [38], a coarse histogram with three bins (no touch, low pressure, high pressure) at the frame level and global level, global statistical features of the frames (minimum, maximum, mean, area, variation, etc.), and a multiscale motion histogram were calculated. In [11], individual frames were summarized with the mean, coordinate of the centroid and maximum pressure, and values summarizing an elliptical approximation of the touched area. From these values, self-similarity and complexity was calculated using Hurst exponent and Hjorth parameters, and coefficients of autoregressive models (2nd to 10th order) were computed to form a feature set. Global and channel-based statistics, as well as spectral components of the average pressure of each frame, were used as features in [151]. In [56], autoencoders were used to automatically generate features at the frame level. Frame level features were also calculated from the first four orders of geometric moments, and global features were computed from the mean, variance and spectrum of the global pressure.\nFrom the computed features, several classification approaches were employed. Random forests were commonly used to determine the quality of each feature in addition to classifying gestures [11,38,151]. Additionally, SVMs were used in [151], and HMM models were built for each gesture in [56] using the autoencoder and geometric moment features as observations. Final classification accuracies ranged from 26.0%\u201361.3% for the CoST dataset, and 61.0%\u2013 70.9% for the HAART dataset. It has been noted that these accuracies may be artificially\nlow, as there is a large amount of confusion between very similar gesture pairs (e.g., scratch and tickle) [64]."}, {"heading": "5 Discussion", "text": "The investigations cited in the previous sections shows that machine learning approaches have found various levels of use in the domains of interest. In structural health monitoring, fault detection, classification and localization is commonly performed in truss structures, composite panels and multi-story buildings by monitoring the structure\u2019s response to vibrations, typically from an external source (e.g., buildings during an earthquake, aircraft panels during flight, etc.). In addition to monitoring for defects, in the aerospace domain, there is rising interest in applying reinforcement learning to controlling morphable airfoils. Detecting falls and classifying gait and activities have been explored with on-body, wearable computers; control of soft exosuits presents an application similar to shape control of airfoils. Finally, full-body sensitive robotic skins can be utilized to assist in navigation and manipulation, and can be used to identify affective gestures in human-robot interactions. This section describes several potential areas of investigation for intelligent robotic materials, and highlights areas of specific recent research which could be effectively applied to all domains investigated."}, {"heading": "5.1 Data Processing Approaches", "text": "The literature cited in the previous sections focused primarily on features extracted and pattern recognition algorithms used in the various domains. While features and pattern recognition algorithms are of primary interest for the investigations in the previous sections, the investigations typically assume knowledge of sensor measurements, and are concerned with performing recognition tasks for a fixed window of time. With regards to robotic materials, such an approach is not as well suited, for several reasons: individual nodes need to continually monitor and detect when a signal of interest occurs, nodes perform calculations locally and communicate only with neighboring nodes, nodes which detect this signal need to aggregate measured data (likely from an unknown number of neighboring nodes), and a universal decision needs to be made and communicated to a sink node. This requires algorithms to determine a means of reasonably executing a task of interest using information from a subset of the nodes. For instance, individual nodes in a tactile sensitive skin utilize the state machine shown in Figure 6 [55]. The nodes in this skin monitor a microphone for signals of interest in an idle state. When a signal is sensed, it is broadcast through the network after a short delay, and nodes which have also detected a signal of interest rebroadcast this information. This ensures that the location of the stimulus is only computed by a small, regional group of nodes. This also has the advantage of allowing a single node to perform the localization task, based on which node detected the signal with the most energy.\nAs mentioned in [170], machine learning steps are simply one part of analysis in structural health monitoring. The full pipeline involves several steps, from low-level features to decision making. The waterfall model, shown in Figure 7a, describes a simple structure which is well suited to several of the tasks described in the literature cited. This viewpoint\nassumes operation on a single time window. Signal Processing performs low-level filtering and transforms, such as an FFT, in preparation for calculating features. Feature Extraction computes a vector of features, such as those described in Section 3.2. Pattern Processing involves the application of a machine learning algorithm to perform anomaly detection, classification and/or regression. The final decision performed should be reached with higher confidence than using any of the individual sensors.\nAs an alternative to the waterfall model, the omnibus model, shown in Figure 7b, is proposed in [168]. This model provides additional advantages over the waterfall model. The model explicitly includes an action stage. In the context of robotic materials, this may involve various domain-specific actuations: in structural health monitoring, the underlying material may change stiffness or perform repairs; in morphable aircrafts, SMA skins may be morphed to change the overall shape of an airfoil; artificial muscles may be activated in a wearable exosuit. A more subtle activity of this stage may involve assessing the quality of individual sensors, and detecting failures, recalibrating or adjusting the relative importance of individual measurements. The cyclic nature of the model implies that sensor monitoring is performed continuously, is not interrupted by decision or activity, and actions may enhance\nfuture measurements. As robotic materials are designed to be reactive only to interesting stimuli, the omnibus model provides a much more suitable framework for designing algorithms to run on robotic materials. The state machine in Figure 6 provides a motivating example for using the omnibus model as an operational framework for the node. For monitoring and classification / localization applications (such as in [55]), the model allows nodes to dynamically switch between particular tasks. During the Observe phase, nodes monitor connected sensors and perform low-level processing. The Orientation phase may perform different tasks, depending on which mode of operation the node is in: anomaly detection may be performed at each time frame until a signal of interest is detected, or localization performed to determine the source of a signal. The Decide phase can be used to switch between different tasks (observation or localization), while the Act phase can be used to communicate with neighboring nodes or generate an event packet to be broadcast to a sink node. For applications which involve changing the underlying structures (e.g., morphable aircraft and exosuit control), the Act phase enables control of actuation, and direct feedback to the node and neighboring nodes via the next observation."}, {"heading": "5.2 Use of Temporal Models", "text": "Temporal models, such as dynamic Bayesian networks (including HMMs) and recurrent neural networks (including LSTMs), have been shown to improve classification results for gait recognition [4,94,95,116] and affective touch [56]. In the domains of structural health monitoring and morphable aircraft, as well as in many of the investigations into recognition of gait and affective touch, many of the investigations rely solely on features extracted from an individual time window, ignoring previous measurements. In the structural health monitoring domain, structures such as buildings and aircraft panels are excited from continuous, external sources, such as vibrations generated from earthquakes, flights, or dynamic loads (such as traffic on a bridge). As multiple measurements can be made over time in these domains, improvements in the tasks of interest may be realized in these applications by incorporating temporal models.\nIn addition to providing improved classification results, temporal models provide state information (either explicitly, as in HMMs, or encoded in hidden units, as in RNNS), which evolves after each measurement based on the current state and observations. From the perspective of the omnibus model, state information can also be used in the Decide and Act phases, while the Orientate phase may rely solely on observations. This could have several benefits. For instance, features can be automatically extracted from training data for each individual frame independent of pattern processing, decision making or actions. Additionally, determining correct decisions and actions can be learned based on the current state. Separating these two phases in this manner then enables the spatial and temporal aspects of learning to be encapsulated solely in local state. For example, local state could be encoded using a mixture model or a dynamic Bayesian network, and at each time step, nodes communicate local state with neighboring nodes, and update its own state using current observations. State can be trained using a distributed approach, as described in Section 3.5.2 or Section 3.5.3, for example, while the remaining training could be performed using non-distributed approaches described in Appendix A."}, {"heading": "5.3 Automatic Feature Extraction", "text": "The features used in most of the investigations are based on either common mathematical operations (e.g., statistical or spectral features), or domain-specific heuristics (e.g., time of heel strike). Recent investigations in gait recognition and affective touch recognition have used deep learning approaches to automatically extract features from provided training data, including restricted Boltzmann machines, [121], convolutional neural networks [175,178], and autoencoders [56]. These approaches, explored extensively in image classification [80] and speech recognition [41], have provided approaches to extract features from training data which are robust to variations in the scale and spatial or temporal position of features. Image classification and speech recognition applications demonstrate the applicability of automatic feature learning for spatial and temporal aspects of signals, respectively. Such approaches to feature learning could find application in the various domains investigated in this paper.\nThe CNN-LSTM model described in [116] provides a particularly interesting architecture for robotic materials. In addition to providing a means of learning features directly from a training set, the LSTM portion of the model allows for continual monitoring of temporal signals, as described in Section 5.2. This architecture is not readily adapted to sensor networks, as the number of neighboring nodes in a sensor network varies based on the local network density and communication range. In contrast, nodes in robotic materials have a fixed number of neighbors, determined at time of construction. The current state (LSTM nodes) of the LSTM model in a node may be communicated to neighboring nodes. A node may then use the received states as input to its own LSTM model, in addition to the measurements. The proposed implementation is shown in Figure 8."}, {"heading": "5.4 Training", "text": "Traditionally, training algorithms involved building or adjusting a model given a training dataset. In robotic materials, each individual node maintains a model locally. Consequently, training may not be performed in as direct a manner: the data from all sensors are not available for each node, communication introduces delays between measurements from one node and processing in another, and packet loss and node failure may result in missing or erroneous inputs. Training sets can be collected from physical simulations, if easily performed, or from a physical implementation of the material. Additionally, training can be performed on-line or off-line.\nIf a material or structure, and corresponding stimulus, are easily simulated, then training can be performed based on these simulations. This has been performed in several of the investigations previously mentioned, for instance [62]. Simulations allow for rapid generation of large amount of data for many situations, including those which are prohibitively costly. This approach suffers from several drawbacks. Primarily, simulated data may suffer from a \u201creality gap\u201d, where important aspects of the system are not properly simulated. Additionally, measurements among several nodes in robotic materials are typically not synchronized, which may not be easily represented in simulated data. However, for iterative training algorithms (e.g., gradient-based optimization), simulated datasets may provide an approach to\nAlternatively, training data can be collected from each node under a variety of situations, from which training can be performed off-line on a centralized computer. This becomes plausible as the computing power (memory, clock speed, etc.) of individual nodes in a robotic material are several orders of magnitude below a computer on which training would be performed. For materials with a large number of nodes, collecting data can be hindered by communication bandwidth to sink nodes or the amount of memory available on the node. If sensor values cannot be collected by a sink node before the next set of measurements are collected, then nodes need to buffer measurements, limiting the length of time frames in sequential datasets. However, this does provide more accurate training data than simulated results. Additionally, several frameworks have been developed for learning using graphical processing units (GPUs), including GPU implementations of neural networks [10], SVMs [18] and Bayesian networks [86]. This approach allows for a global model to be built as a collection of modules, where each module would be implemented on an individual node, and trained using an appropriate framework.\nOn-line approaches, where training is performed directly on the network of nodes, have been discussed in Section 3, providing algorithms for distributed learning for SVMs, mixture models and graphical models. On-line learning in robotic materials has two major drawbacks, the severity of which is based on the microcontroller used. First, microcontrollers are much slower than typical microprocessors (several dozen MHz versus several GHz), resulting in training time taking much longer (in absolute time) in the robotic material. Second, the amount of RAM available on microcontrollers are typically much less than the available EEPROM (e.g., 8kB RAM versus 120kB EEPROM on XMega128 chips).\nIn order to apply off-line training to a network of nodes, the training model needs to consider various aspects unique to a network of nodes. For instance, each node\u2019s clock cannot be easily synchronized with other nodes in the network. The sensing and update\nrate of the models described in the literature are much slower than the clock rates of the microcontrollers used in the node. However, it still may be worthwhile to investigate the effect of performing measurement and model updates with differing clock rates in the nodes, as the difference between the clock rates will ultimately cause a potentially significant shift in measurements or state updates. A second consideration is modeling communication. As mentioned previously, communication could be unreliable, or have a limited communication rate. An off-line model would need means to simulate such communication aspects. Building upon the CNN-LSTM model described earlier, Figure 9 demonstrates a potential approach using gates similar to those used for learning, recall and forgetting in LSTM layers. Using a KL-divergence objective, such as that used with sparse autoencoders [110], the gate can be trained to be active a certain percentage of the time, and consequently control the rate of communication."}, {"heading": "5.5 Hardware Constraints", "text": "Hardware constraints provide a final limitation to algorithms running on robotic materials. With regards to machine learning approaches, memory limitations are the primary limitation to the capabilities of a trained model. For instance, the maximum number of parameters in neural networks or the number of random variables and dependencies in a graphical model will be limited by the available memory in the microcontroller. This limitation has been discussed in [116], where a CNN-LSTM model can be trained to classify gaits with a high level of accuracy, but the size of the resulting model is too large to be reasonably used in a wearable system. In contrast, by distributing a similar model among a network of nodes as a robotic material, the size of input for an individual node is greatly reduced. In this way, robotic materials may be viewed as a potential approach to addressing the \u201ccurse of dimensionality\u201d. This viewpoint provides an interesting concept for investigation: to what extent can a model be modularized and parameters reduced while maintaining a reasonable level of quality compared with a model built on the full input feature?"}, {"heading": "5.6 Robotic Applications", "text": "A final consideration is to incorporate the suggested applications in Section 4 into robotic applications. Essentially, this involves offloading several robotic tasks of interest into the material itself, allowing an external controller to query the material or have the material push pertinent information to the controller in an event driven manner, such as with the robotic skin in [55]. For instance, a robotic skin can perform structural health monitoring tasks (anomaly detection, localization and assessment) to assess wear and identify failure of joint actuators in the robot. The benefit to this approach is that the skin can perform this task passively during normal robot application by monitoring vibrations induced from the actuators, for example, as opposed to requiring the robot to actively performing some sequence of actions and observations to determine the state of the actuators. Gait recognition, fall detection and exosuit control have direct correlation with generating stable gaits for bipedal robots. In addition, The reinforcement learning approaches used for optimal shape control of airfoils has potential for use in the field of soft robotics [135]. While there has been much research into the fabrication and system level applications of soft robots, modeling and controlling the kinematics and dynamics of a soft robot remains challenging. Enabling the robot to learn a correct sequence of actuations to achieve a pose or trajectory may solve these difficulties. As robotic nodes have been successfully embedded in soft robotic skins, the same hardware can be leveraged to learning and executing control tasks."}, {"heading": "6 Conclusion", "text": "This paper investigates the potential of incorporating machine learning approaches with inexpensive computing nodes as a design approach for intelligent robotic materials. As the investigation is interested in applying machine learning techniques to currently existing and proposed robotic material applications, much of the paper is based on machine learning literature in various domains, namely structural health monitoring, aerospace, wearable computing, human activity monitoring, and robotic skin. The paper provides the background to and an overview of the current state of research in robotic materials in Section 2. Section 3 describes features and machine learning algorithms used in the reviewed literature, and which show promise for use with robotic materials. Specifically, approaches to learning and using a machine learning model in a distributed manner are explored in Section 3.5. While much of this research is based on investigations in the wireless sensor network domain, they still are applicable for intelligent robotic materials, either directly, or as insight into similar algorithms. Section 4 reviews machine learning applications in structural health monitoring (detection, localization and identification of defects), morphable aircraft (reinforcement learning of optimal shape), wearable computing (gait and activity recognition, fall detection, exosuit control) and robotic skin (full body manipulation and affective touch recognition). Finally, potential areas of research are discussed in Section 5.\nThe reviewed literature focused specifically on applications which would be well suited for a robotic material paradigm, namely, in situations where a large number of small, networked computing elements are more suited to the application than a centralized system. Primarily, this is due to the large number of sensors and actuators required to monitor and adjust\nthe underlying structure. This may be due to the scale of the structure, such as with buildings, bridges or aircraft surfaces, due to the desired sensor / actuator density, such as with robotic skins, or due to the bandwidth of individual sensors, such as measuring vibration using piezoelectric elements or microphones. A secondary reasoning involves the need to minimize weight or power consumption, such as with wearable computing. The underlying commonality with all these domains is that the actual computing elements are easily embedded into the underlying material.\nThe main focus of this paper is to demonstrate the need for a common underlying approach to incorporating machine learning with robotic materials. This has been guided by the machine learning approaches and tasks present in the reviewed literature, as well as machine learning algorithms adapted for wireless sensor networks. The distributed network approach and reactive nature of robotic materials implies that machine learning approaches will have both spatial and temporal aspects to processing. This reflects the underlying physical process: many of the tasks described in the literature involves responding to vibrations which propagate through the structure; monitoring the movement and contact area of an individual\u2019s hand on robotic skin is also a common tasks where the spatiotemporal aspect of the signal is highly evident. Consequently, this paper argues for using a temporal model, such as dynamic Bayesian models or recurrent neural networks, as a critical component for use in individual nodes, as discussed in Section 5.2, with communication between nodes being used to share preprocessed information to incorporate in state updates.\nData processing approaches are an ancillary consideration and are presented in Section 5.1. Much of the reviewed literature consider only performing a machine learning task in isolation, e.g., classifying a gait or gesture from a fixed duration of measurements. Unfortunately, from a system-level perspective, data is not presented in such a direct manner to robotic materials. Rather, nodes must constantly monitor and decide when and how to act and communicate with neighboring nodes. This section argues for a system-level architecture which monitors data for novel or anomalous local measurements, upon which the node utilizes the more complex temporal model which shares information with neighboring nodes described in Section 5.2, allowing for an approach which involves local monitoring of sensors, and performing responses in an event-based manner.\nFinally, the literature reviewed shows that a common approach to machine learning\u2013 extracting a feature set from measurements, and perform classification or regression on static or quasi-static data using existing data mining software (such as Weka [47])\u2013is employed in many of the papers in all the domains. However, some papers demonstrate an advantage to employing approaches that have not been explored in other domains. For instance, geometric probabilistic decision trees used in [102] demonstrates improved performance over a \u201cflat\u201d multi-class classifier. Several activity recognition papers demonstrate improved performance when temporal models (specifically, HMMs and LSTMs); the same approaches may find use with robotic skin applications. The anomaly detection approaches used in Section 4.1.1 could also be useful for detecting anomalous gaits. Finally, convolutional neural networks were used to automatically extract features for activity recognition; such approaches can be used in the other domains to extract shift and scale invariant features from time-series data. Incorporating these approaches could provide significant advances in using machine learning approaches in the other domains."}, {"heading": "A Overview of Machine Learning Concepts", "text": "Several machine learning approaches have been applied to the various fields described in Section 4. While specific tasks, models and feature selection vary among the applications, the desired tasks fall broadly into one of the following categories: classification (identifying which class a set of measurements belongs to), regression (fitting a function to example input-output pairs), and anomaly detection (identifying when a particular measurement is abnormal). The following subsections describe potential models for use in robotic materials. These include models and algorithms used in the fields in Section 4, as well as models and algorithms which have been adapted for sensor networks, as discussed in Section 3.5. An exhaustive survey of the following approaches is beyond the scope of this paper. However, the basic approaches are summarized here, and described where used in the literature. All approaches described assume that the data is described by an N dimensional feature vector, x = [x1, x2, ...xN ] T , and produce an output y = [y1, y2, ...yM ] T .\nA.1 Novelty Detection\nNovelty detection involves a system learning to identify data or features which have not been previously experienced. Novelty detection approaches are based on collecting data under normal operating condition or state, and determining if novel measurements lie outside some threshold of normal operation or state. The variation from normal operation is referred to as novelty indicator (NI), which is a scalar measurement indicating the deviation from nominal state.\nA.1.1 Mahalanobis Squared Distance\nMahalanobis squared distance (MSD) assumes the training features can be accurately represented by a multivariate Gaussian distribution. The mean and covariance matrix of the training data, x\u0302 and \u03a3, are calculated. From this, the NI for a new feature vector, z is defined as\nNI(z) = (z\u2212 x\u0302)T\u03a3\u22121(z\u2212 x\u0302) (8)\nA.1.2 Kernel Density Estimate\nKernel density estimate (KDE) estimates the probability density function of the nominal state, and determines the probability that new feature vectors are outside some threshold of this distribution. The probability of a feature vector being generated from a nominal state is\np(z) = 1\nNh N\u2211 i=1 K ( z\u2212 xi h ) (9)\nwhere the kernel function, K, is a localized function, with multivariate Gaussian kernels being a common choice. h represents a smoothing factor, the value of which can be computed by cross-validation.\nK(x) = 1\n(2\u03c0)d/2 e\u2212\u2016x\u2016 2/2 (10)\nA.1.3 Autoencoder\nTraining data can be used to build an autoencoder, such that the output of the autoencoder, X\u0302, accurately reconstructs the training data. Once trained, the reconstruction of a new feature vector, z\u0302, can be computed from new features. The NI is then simply the norm of the error (i.e., difference between the original and reconstructed feature vector)\nNI(z) = \u2016z\u2212 z\u0302\u2016 (11)\nA.1.4 Factor Analysis\nFactor analysis describes correlations between observed features and a small number of unobserved independent variables (factors) [32]. A set of training data, X, can be represented as the product of a matrix of factor scores \u039e, and a matrix of factor loadings, \u039b\nX = \u039b\u039e + E (12)\nand E represent error terms. The factor loadings can be calculated from covariance of the training data, \u03a3\n\u03a3 = \u039b\u039bT + \u03a8 (13)\nwhere \u03a8 is a diagonal matrix representing the variance of each element in the training data. \u039b can be calculated using several methods, such a maximum likelihood estimation.\nThe error term for a measurement made from a novel state is assumed to be much larger than one made from a nominal state. The factor loadings of a novel measurement, \u03be\u0302, can be computed using linear regression\n\u03be\u0302 = \u039bT (\u03a8)\u22121 z (14)\nFrom which the residual error can be calculated\ne = z\u2212\u039b\u03be\u0302 (15)\nfrom which the NI can be calculated as the norm of the residual error, as with the autoencoder NI.\nA.1.5 Singular Value Decomposition\nSingular value decomposition (SVD) decomposes a matrix of measurements, M into the product of two orthonormal matrices, U and V, and a diagonal matrix of singular values, \u03a3, as\nM = U\u03a3VT (16)\nNovelty detection can be performed using nominal measurements (i.e., training data) by estimating the rank of the measurements using SVD [133]. Measurements from nominal states maybe be assumed to be a linear combination of a finite number of characteristic vectors, which represent particular properties of the underlying system which generated the measurements. The rank of the training matrix is simply the number of non-zero singular values. In the presence of additive noise, the training data matrix would full rank, the noisefree rank can be estimated by only considering singular values above a predefined threshold.\nTo detect the presence of novel measurements in a new feature vector, the feature vector is appended to the training data, i.e., M = [X, z], after which the rank is estimated using SVD. Without a novel characteristic, the new feature vector can be considered a linear combination of the characteristic vectors in the training data. Novel measurements would contain a novel characteristic vector in the matrix, increasing the estimated rank due to the novelty.\nA general novelty indicator can be formulated as\nNI(z) = \u03b1 ( r+1\u220f i=1 \u03c3k(M) ) (17)\nwhere \u03b1 is a normalizing factor, and \u03c3k are the non-zero (or above threshold) singular values. Unlike using the rank of the matrix as a novelty indicator, this approach also accounts for the presence of multiplicative noise in the measurement data.\nA.2 Neural Networks\nArtificial neural networks are computational models inspired by the behavior of biological neurons. Neural networks consist of layers of neurons and directed connections between them, as shown in Figure 10. An individual neuron is shown in Figure 11. Given an input vector, x, the output of a neuron, y, is calculated by computing the net input to the neuron (the weighted sum of the input and a bias term), and applying the activation function, \u03c6, of the neuron to the net input, i.e.,\ny = \u03c6(b+ N\u2211 i=1 wixi) (18)\nThe output of neurons may then be used as the input of other neurons. Common activation functions, shown in Figure 12, include sigmoidal functions, such as the logistic or hyperbolic tangent functions, radial basis functions, and rectified linear functions.\nDepending on the activation function used in the output layer, the neural network can be used for regression or classification. For regression, using linear activation functions can be used, rectified linear units can be used for strictly positive outputs, or sigmoid or hyperbolic tangent layers can be used for bounded outputs. Classification is typically performed using a sigmoid function to represent the probability of belonging to a particular class. Softmax layers, which represent a multinormal probability distribution and provides a useful output for classification tasks, are constructed by normalizing the output of a layer of logistic units.\nTraining neural networks involves minimizing an objective function, such as the mean squared error (MSE) between the neural network output and target values, or the crossentropy error between the target class and predicted class. Using the backpropagation algorithm [132,166], the gradient of the error with respect to the parameters (weights and biases) of the network can be calculated, and updated using gradient descent or other update rule.\nThree particular architectural components are interesting for the applications described in this paper: convolutional networks provide an efficient means to process spatial data, recurrent networks allow for processing of temporal data, and autoencoders provide allow trainable, nonlinear compression of data.\nRecurrent Neural Networks. Feedforward neural networks are commonly used for tasks which perform classification or regression using only a single input vector. For sequential or time-series data, a finite number of frames in the sequence can be concatenated for use as input. This solution requires a fixed history duration, and increases the size of the input (and consequently, the number of network parameters) Recurrent Neural Networks (RNNs) consist of networks which contain cycles, which provide models which are more suitable for sequential or time-series models. Recurrent connections allow the network to maintain and update an internal state at each step in the sequence, providing a suitable architecture to\nhandle temporal aspects of a signal. A major limitation to recurrent neural networks is the ability to learn tasks where there exists a long time delay between the effect from some input signal and the corresponding output. The network is unable to learn with large time delays due to the nature of backpropagaing the error signal through time during training [50]. Essentially, as the error is propagated backward through time, it either vanishes or blows up, depending on the recurrent weights. A promising solution to this problem is to incorporate Long Short Term Memory (LSTM) [51]. A LSTM component, shown in Figure 13, can store values using a recurrent neuron and perform operations on the value of this neuron using input, forget and output gate neurons. These values may then be read, written to, or forgotten, based on the activation of input, output or forget gates. Using these, a network can learn both what to write into memory, and when to read and write it.\nConvolutional Neural Networks. Convolutional layers in neural networks utilize a weight sharing scheme to allow a network to learn local features which are invariant to translation and scaling. This is achieved through the use of convolutional layers, which convolve\na feature map with an input space, and pooling layers, which reduces the size of a layer by selecting the activation from a small region. An example of convolutional layers applied to a temporal signal is shown in Figure 14. In this example, the second layer is generated by convolving the original signal with two kernels, while the third layer is generated using both channels from the second layer. Convolutional networks have been shown to be especially useful for image recognition [85]. The main advantage of convolutional networks is the use of weight sharing: sets of weights are replicated among multiple connections. Replicating weights in this way enables the network to detect features regardless of the position of the feature in signal. Additionally, shared weights reduce the number of parameters in a model, which reduces the training time and required number of training examples, and allows the model to generalize better when compared to fully connected networks. Finally, convolutional networks utilize the structure of input data\u2013images have strong 2D local structure and time series have strong 1D local structure, where nearby variables are highly correlated. In contrast, the input of feed-forward models can be permuted in an arbitrary (though constant) manner without affecting the behavior of the network.\nAutoencoders. One application of feed-forward neural networks which has demonstrated a variety of uses is the autoencoder. The purpose of this type of network is to generate an efficient encoding of samples in a dataset, typically by generating a representation with smaller dimensionality than the original dataset. Autoencoders are built and trained to perform the identity function\u2013the output of the network is trained to reproduce the provided input. A \u201ccode\u201d layer of neurons, whose size is smaller than the input, pro-\nvides an means of reducing the dimensionality of the data. In this way, autoencoders behave in the same way as principle components analysis (PCA). Because of the nonlinearity of the architecture, autoencoders with a single hidden layer have been shown to provide superior reconstruction of the input signal, when compared with principle components analysis (PCA) [61].\nDeep autoencoders, which contain several nonlinear hidden layers between the input and encoding layer, have been used for several applications [49]. Deep autoencoders have shown the ability to compress data to very small sizes. For images, 625 pixel (25 x 25) gray scale images of faces were compressed to a 30-unit code, the reconstructed images showed great improvement over encoding using PCA; similarly, 784 pixel (28 x 28) pixel digits from the MNIST dataset can be compressed to a 10-unit code, with a reconstruction error of 1.2%.\nA.2.1 Support Vector Machines\nSupport Vector Machines have been extensively used for classification and regression tasks. In the original formulation, an SVM is a binary classifier trained on a linearly separable dataset, which is constructed by finding an optimal hyperplane which separates the two classes in the dataset [22]. The optimal hyperplane is constructed to maximize the margin between positive and negative training examples, as shown in Figure 15. The max-margin hyperplane is determined by a set of support vectors, the subset of the training data which is nearest to the separating hyperplane. Nonlinear separation is possible by using nonlinear kernel functions to map the original features to a kernel space, and performing linear separation on the mapped features. Several approaches are available to extend SVMs to multi-class classification. Multiple SVM classifiers can be build, each of which classifies between one of the labels and the rest (one-vs-all), or by classifying between pairs of classes (one-vs-one), and selecting the final label based on the classifier with the highest output, or by selecting the label based on the highest number of output from the group of classifiers, respectively.\nIn the sensor network literature, a geometric interpretation of SVMs is often employed. In the geometric interpretation, a convex hull is constructed for each class such that all the data is contained within the set, as shown in Figure 16. The separating hyperplane can then be reduced to finding the closest points between the two convex hulls, and selecting a hyperplane which bisects and is orthogonal to the line connecting these two points [14].\nClassification. Determining the equation for the optimal hyperplane involves solving a convex optimization problem, where the dual of the optimization problem is often used to allow for easy use of kernels. Given a training set consisting of N examples, (xi, yi), Lagrange variables \u03b1i are determined by solving the optimization problem\nmaximize \u03b1\n\u2212 1 2 N\u2211 i,j=1 \u03b1i\u03b1jyiyjk(xi,xj) + N\u2211 i=1 yi\u03b1i\nsubject to N\u2211 i \u03b1iyi = 0\n\u03b1i \u2208 [0, C]\n(19)\nwhere C is a parameter representing the tradeoff between maximizing the margin and\nminimizing the training error. k(\u2022, \u2022) is a kernel function which maps the input into a (possibly) nonlinear feature space. Finally, a classification function can be constructed\nf(x) = N\u2211 i=1 \u03b1ik(xi,x) + b (20)\nwhere b is calculated by selecting a suitable training example from each class\nb = \u22121 2 N\u2211 i=1 \u03b1ik(xi,xr + xs)\nwhere \u03b1r, \u03b1s > 0, yr = \u22121, ys = 1 (21)\nNovel examples can be classified from the sign of the classification function\ny = { 1 if f(x) \u2265 0 \u22121 if f(x) \u2264 0\n(22)\nRegression. To create a support vector regression (SVR) machine, the problem formulation is modified to minimize the distance between training examples and the optimal hyperplane [145]. A soft margin of distance is set, such that training examples which fall within this margin have a cost of zero. The reformulation of the problem results in the following dual optimization problem with dual variables \u03b1i, \u03b1 \u2217 i\nmaximize \u03b1i,\u03b1\u2217i\n\u2212 1 2 N\u2211 i,j=1 (\u03b1i \u2212 \u03b1\u2217i )(\u03b1i \u2212 \u03b1\u2217i )k(xi,xj)\n\u2212 N\u2211 i=1 (\u03b1i + \u03b1 \u2217 i ) + N\u2211 i=1 yi(\u03b1i \u2212 \u03b1\u2217i )\nsubject to N\u2211 i (\u03b1i \u2212 \u03b1\u2217i ) = 0\n\u03b1i, \u03b1 \u2217 i \u2208 [0, C]\n(23)\nThe regression function is given by\nf(x) = N\u2211 i=1 (\u03b1i \u2212 \u03b1\u2217i )k(xi,x) + b (24)\nwhere b is calculated from suitable training examples by\nb = yi \u2212 N\u2211 j=1 (\u03b1j \u2212 \u03b1\u2217j )k(xj,xi)\u2212 for \u03b1i \u2208 (0, C)\nb = yi \u2212 N\u2211 j=1 (\u03b1j \u2212 \u03b1\u2217j )k(xj,xi) + for \u03b1\u2217i \u2208 (0, C)\n(25)\nKernels. Kernels allow for nonlinear regression and decision boundaries by projecting the input space into a nonlinear feature space. Several admissible kernels are given in [145], which include\nk(x,x\u2032) = xTx\u2032 linear kernel k(x,x\u2032) = (xTx\u2032)p homogenous polynomial kernel k(x,x\u2032) = (xTx\u2032 + c)p inhomogenous polynomial kernel k(x,x\u2032) = tanh(\u03c1xTx\u2032 + \u03bd) hyperbolic tangent kernel\nk(x,x\u2032) = e\n( \u2212 \u2016x\u2212x \u2032\u20162\n2\u03c32 ) Gaussian radial basis function\nk(x,x\u2032) = e\n( \u2212 \u2016x\u2212x\n\u2032\u2016 2\u03c32 ) exponential radial basis function\n(26)\nIn addition to allowing for nonlinear functions and decision boundaries, kernels can also be selected which provide bounded support over the domain, which has been exploited in several of the approaches used in the sensor network literature.\nA.3 Bayesian Models\nBayesian networks are probabilistic graphical models which represents a probability distribution as a directed acyclic graph: each random variable in the distribution is represented as a node in a graph, and conditional dependencies are represented as directed edges in the graph. Figure 17 shows an example Bayesian network over five random variables.\nThe structure of the graphical model represents a factorization of the joint distribution, i.e.\nP (X1, X2, ...XN) = N\u220f i=1 P (Xi|Pa(Xi)) (27)\nwhere Pa(Xi) are the parents of variable Xi.\nA.3.1 Belief Propagation\nInference in graphical models involve determining the probability distribution or most likely assignment of variables given a set of observations. Belief propagation is one approach based on message passing between nodes in the graph [108]. The goal of belief propagation is for each node to compute the belief that a variable is assigned a specific value, given evidence, i.e., BEL(x) = P (X = x|E). The belief can be expressed as\nBEL(x) = \u03b1\u03bb(x)\u03c0(x) (28)\nwhich consists of the combination of messages received from the node\u2019s children,\n\u03bb(t)(x) = \u03bbX(x) \u220f j \u03bb (t) Yj (x) (29)\nand messages received from its parents\n\u03c0(t)(x) = \u2211 u P (X = x|U = u) \u220f k \u03c0 (t) X (uk) (30)\nAt each iteration, a node passes the message to its parent Ui\n\u03bb (t+1) X (ui) = \u03b1 \u2211 x \u03bb(t)(x) \u2211 uk;k 6=i P (x|u) \u220f k 6=i \u03c0(t)X(uk) (31)\nand the message to its child, Yj\n\u03c0 (t+1) Yj (x) = \u03b1\u03c0(t)(x)\u03bbX(x) \u220f k 6=j \u03bb(t)Yk(x) (32)\nMessage passing continues until belief updates are below a certain threshold for all variables. This algorithm is used extensively in the sensor network literature, as the messages passed between neighboring nodes require only communication with immediate neighbors.\nA.3.2 Na\u0308\u0131ve Bayes Classifier\nNa\u0308\u0131ve Bayes models are simple Bayesian models where observations are conditionally independent given a particular class, shown in Figure 18. The simplicity of these models have made them very attractive for classification tasks. The probability of a particular class, C, given an observation of n features, x, is proportional to the product of each feature conditioned on the class\np(C|x) \u221d p(C) n\u220f i=1 p(xi|C) (33)\nA.4 Markov Network\nMarkov networks, also referred to as Markov random fields, are graphical models similar to Bayesian networks, except that the probability distribution is represented using a undirected graph. The probability distribution can be expressed as a product of factors, \u03c6i(X),\nP (X) = 1\nZ N\u220f i=1 \u03c8i(X) (34)\nwhere each factor represents the affinities between pairwise variables (nodes connected by an edge) or clique in the graph. The partition function, Z is a normalizing factor to ensure the product results in a valid probability distribution. As with Bayesian networks, belief propagation can be utilized to efficiently determine the joint probability distribution given observations. The algorithm simply needs to be modified such that messages are passed between clusters, after summarizing messages from neighboring clusters (which share one or more common variables).\nA.5 Mixture Models\nMixtures models are probabilistic models for representing the distribution of data [136]. Mixture models consist of K components, where each component is a parametric probability distribution (e.g., Gaussian), and each component has a corresponding mixture weight, i.e. the probability of the particular component, P (c). The probability of a data point, x, being generated by the mixture model is simply the the sum of the probability of the data point being generated by the individual components, weighted by the mixture weights\nP (x) = K\u2211 i=1 P (Ci)P (x|Ci) (35)\nGaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3, 93], or\nused to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.\nA.6 Dynamic Bayesian Network\nA dynamic Bayesian network (DBN) is a class of graphical models which are useful for modeling sequential or temporal data [136]. DBMs represent a first-order Markov process, where the state variables at a particular time step are only dependent on the state variables in the previous time step, and observation variables are dependent on the current state variables. Figure 19 shows a dynamic Bayes model at two time steps, consisting of state variables, x1, x2, ...xn and an observation variable, o. The model is represented as a transition model which follows a Markov assumption, P (Xt|Xt\u22121), and an observation model, P (Ot|Xt) [76].\nA.6.1 Hidden Markov Models.\nHidden Markov models (HMMs) are a special case of DBNs which consist of a single discrete, hidden state variable and observations conditioned on the current hidden state [124]. HMMs may be build for symbolic (discrete) or continuous valued observations; in the latter case, observations are assumed to be drawn from some probability density, such as a Gaussian or mixture of Gaussians. Classification using HMMs involves training a model for each of the target classes, and selecting the class corresponding to the model with the highest likelihood of the sequence of observations."}, {"heading": "B Overview of Common Features", "text": "The major focus of many of the papers referenced in Section 4 is the features extracted from sensors. As most of the data in the applications described are temporal in nature, there is\na high amount of overlap in the features extracted and used. However, there have also been several features of note developed and used for one of the specific domains, for example, transmissibility features in structural health monitoring. Most of the machine learning tools used require a single vector of features to be provided as input, rather than a sequence of measured values. Thus, it is common to calculate a set of features by summarizing the properties of measurements over a sliding window (i.e., measurement frame) of relatively short duration.\nFeatures can be broadly categories on how the data points in a frame are processed. Time domain features, perform calculations directly on the data points. Frequency domain features first perform spectral decomposition, such as a Fourier or wavelet transform, and compute features from the resulting spectrum. Model based features rely on fitting measurements to some simple model (e.g., autoregressive model), from which features can be extracted based on the parameters of the model or the residual of the measurement.\nB.1 Time Domain Features\nTime domain features summarize a measurement frame by performing operations directly on the measurement data in the frame.\nStatistical Moments. Statistical features have been extracted from windows of measurements in many of the applications described. Statistical moments (e.g., mean, standard deviation, skewness, kurtosis, etc.) are calculated from measurement windows. The m-th moment is calculated by\n\u00b51 = 1\nN N\u2211 i x\n\u00b5m = 1\nN N\u2211 i (x\u2212 \u00b51)m (36)\nCorrelation Coefficients. The correlation between two elements or axes of measurements is also used\ncorr(x, y) = 1 N\n\u2211N i (xi \u2212 \u00b5x)(yi \u2212 \u00b5y)\n\u03c3x\u03c3y (37)\nThe correlation coefficients are easily extracted by calculating the data covariance matrix. In addition, minimum and maximum values of windows, as well as the sum of the difference between ordered pairs of peaks (i.e., minmax sum), are common features. Time Delay. Certain signals, such as those generated by impacts, are limited in duration. This allows for various features based on the amount of duration between the onset of the signal and various aspects of the signal. For example, for detecting impacts in aircraft composite panels, the time at the maximum and minimum value of the both the raw signal and the envelope of the signal, as well as the beginning and end of each envelope [48,149]. In this investigation, sensor measurements are synchronized, and the onset time of each signal from 12 accelerometers was also used as a feature.\nB.2 Frequency Domain Features\nFrequency domain features are extracted from signals which have undergone a time-frequency transform, such as a Short Time Fourier Transform (STFT) or Discrete Wavelet Transforms (DWT) [94]. Frequency components provide information regarding the amount of energy present at different frequencies in the signal, allowing for a more intuitive representation of periodic signals. The spectral components calculated by the transforms may be used as features directly, or features may be calculated from the spectrum.\nModal Features. Modal features are useful for detecting defects in structures [30, 70]. Vibrations can be measured using a piezoelectric transducer or accelerometer, and exited from external sources, or directly from a transducer. The vibrational behavior of structural components is not constant across all frequencies; rather, structures tend to vibrate according to a set of vibration modes, which gives rise to resonant frequencies associated with the structure. Under normal operating conditions, a structure will demonstrate peaks in the energy spectrum at a set of fixed frequencies, representing the frequencies of the modes of vibration in the structure. In the presence of a defect, the frequencies at which these peaks will shift. While useful for detecting defects, they are less useful for localizing or determining the extent of a defect.\nTransmissibility. Transmissibility describes the propagation of a signal between two points on a structure, and are useful for monitoring the natural frequencies or modalities of the structure. Transmissibility is a feature commonly used in structural health monitoring, due to its sensitivity to changes in the stiffness of a component [83,105]. The transmissibility between two points is defined as the ratio of the spectra measured at two points, i and j\nT (\u03c9) = Aj(\u03c9)\nAi(\u03c9) (38)\nTransmissibility can be measured using piezoelectric elements [170]. The required exitation needs to be over a range of frequencies. Exitation can either be generated from an external source, or generated from one transducer and measured from another. As transmissibility measurements are between multiple measurement points, they provide more information than simply detecting resonant frequencies, and can be useful for localization of defects [83, 105].\nDC Component. The DC component of the signal, which can be obtained directly from the STFT, can be useful for discrimination purposes.\nEnergy. The spectral energy can be calculated as the sum of the squared spectrogram coefficients. Omitting the DC component, the energy of a spectrogram may help assess the intensity of a signal [95]. Integrating the real and imaginary components separately may also be reasonable in situations where the time delay between multiple sensors can provide useful information, such as in impact detection [48,149].\nEntropy. The spectral entropy can be calculated from the normalized energy of the spectrogram. The spectral energy is normalized for each bin, pi, after which the spectral entropy can be calculated\nH = \u2212 N\u2211 i pilnpi (39)\nB.3 Model Based Features\nModel based features involve calculating the coefficients of a model (e.g., autoregressive model) fit to the data in a measurement frame. Models provide several benefits. For example, dimensionality of the data can be reduced (e.g., principle components), and linear models (e.g., autoregressive models) can be exploited to detect nonlinearities in a signal.\nPrincipal Components Analysis. Given a set of measurement vectors which demonstrate correlation among the elements in the vectors, principle components analysis (PCA) determines an orthogonal transformation which results in linearly uncorrelated values [25]. The transformation can be represented as a matrix P, which transforms a measurement vector x, to a vector of principal components, mathbfy = Px. One approach to computing the transformation matrix is to perform a singular value decomposition (SVD) of a set of training data. SVD has the advantage of sorting the principle components by the amount of variance of each component in the data. The principle components with the highest variance can be retained, while those with low variance discarded as statistical noise, thus providing a means of dimensionality reduction. The individual principal components may then be used as a feature set.\nIndependent Components Analysis. Independent components analysis (ICA) can be used to describe a time series as a linear combination of components, where each component is statistically independent, and observe a non-Gaussian distribution [147]. The set of measurements is represented by X = AS, where A is a mixing matrix, and S is the set of components. Given a set of measurements, the components can be calculated by S = A\u22121X = WX (where W = A\u22121). W is selected such that the non-Gaussianity of the resulting components are maximized. Non-Gaussianity is measured by different methods, such as kurtosis, negentropy, or a nonlinear function, such as hyperbolic tangent. Future signals can then be represented as a vector of the mixing coefficients of each component.\nAutoregressive Model. Autoregressive (AR) models construct an input signal from r autoregressive terms as\nx(t) = r\u2211 i=1 \u03b1ix(t\u2212 i) + ex(t) (40)\nwhere ex(t) is the error between the measured values and prediction from the AR model [105, 146]. Assuming ex(t) is generated by some unknown input, a second prediction stage can be generated to model this error, referred to as an autoregressive with exogenous inputs (AR-ARX) model\nx(t) = p\u2211 i=1 \u03b1ix(t\u2212 i) + \u2211 j = 1q\u03b2jex(t\u2212 j) + x(t) (41)\nwhere x(t) is the residual error. The autoregressive terms, \u03b1i and \u03b2j, are then used as features for a measurement frame."}], "references": [{"title": "A survey on sensor networks", "author": ["Ian F Akyildiz", "Weilian Su", "Yogesh Sankarasubramaniam", "Erdal Cayirci"], "venue": "IEEE Communications Magazione,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2002}, {"title": "Classification of a known sequence of motions and postures from accelerometry data using adapted gaussian mixture models", "author": ["Felicity R Allen", "Eliathamby Ambikairajah", "Nigel H Lovell", "Branko G Celler"], "venue": "Physiological Measurement,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2006}, {"title": "Deep activity recognition models with triaxial accelerometers", "author": ["Mohammad Abu Alsheikh", "Ahmed Selim", "Dusit Niyato", "Linda Doyle", "Shaowei Lin", "Hwee-Pink Tan"], "venue": "arXiv preprint arXiv:1511.04664,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Recognizing affect in human touch of a robot", "author": ["Kerem Altun", "Karon E MacLean"], "venue": "Pattern Recognition Letters,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "A survey of tactile human\u2013robot interactions", "author": ["Brenna D Argall", "Aude G Billard"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Multi-joint soft exosuit for gait assistance", "author": ["Alan T Asbeck", "Kai Schmidt", "Ignacio Galiana", "Diana Wagner", "Conor J Walsh"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Soft exosuit for hip assistance", "author": ["Alan T Asbeck", "Kai Schmidt", "Conor J Walsh"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "A soft exosuit for patients with stroke: Feasibility study with a mobile off-board actuation unit", "author": ["Jaehyun Bae", "Maria De Rossi", "Stefano Marco", "Kathleen O\u2019Donnell", "Kathryn L Hendron", "Louis N Awad", "Thiago R Teles Dos Santos", "Vanessa L De Araujo", "Ye Ding", "Kenneth G Holt"], "venue": "In IEEE International Conference on Rehabilitation Robotics (ICORR),", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Comparative study of caffe, neon, theano, and torch for deep learning", "author": ["Soheil Bahrampour", "Naveen Ramakrishnan", "Lukas Schott", "Mohak Shah"], "venue": "arXiv preprint arXiv:1511.06435,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Recognizing touch gestures for social humanrobot interaction", "author": ["Tugce Balli Altuglu", "Kerem Altun"], "venue": "In Proceedings of the 2015 ACM on International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "A review on shape memory alloys with applications to morphing aircraft", "author": ["Silvestro Barbarino", "Erick I Saavedra Flores", "Rafic M Ajaj", "Iman Dayyani", "Michael I Friswell"], "venue": "Smart Materials and Structures,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Discrimination of social tactile gestures using biomimetic skin", "author": ["Hector Barron-Gonzalez", "Tony Prescott"], "venue": "In Towards Autonomous Robotic Systems,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}, {"title": "Duality and geometry in svm classifiers", "author": ["Kristin P Bennett", "Erin J Bredensteiner"], "venue": "In Proceedings of the 17th International Conference on Machine Learning (ICML),", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2000}, {"title": "Distributed mems: New challenges for computation", "author": ["Andrew A Berlin", "Kaigham J Gabriel"], "venue": "IEEE Computational Science and Engineering,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1997}, {"title": "Different strokes and different folks: Economical dynamic surface sensing and affectrelated touch recognition", "author": ["Xi Laura Cang", "Paul Bucci", "Andrew Strang", "Jeff Allen", "Karon MacLean", "HY Liu"], "venue": "In Proceedings of the 2015 ACM on International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2015}, {"title": "Human activity recognition from accelerometer data using a wearable device", "author": ["Pierluigi Casale", "Oriol Pujol", "Petia Radeva"], "venue": "In Pattern Recognition and Image Analysis,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Fast support vector machine training and classification on graphics processors", "author": ["Bryan Catanzaro", "Narayanan Sundaram", "Kurt Keutzer"], "venue": "In Proceedings of the 25th International Conference on Machine Learning,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2008}, {"title": "A reliable fall detection system based on wearable sensor and signal magnitude area for elderly residents", "author": ["Guan-Chun Chen", "Chih-Ning Huang", "Chih-Yen Chiang", "Chia-Juei Hsieh", "Chia-Tai Chan"], "venue": "In Aging Friendly Technology for Health and Independence,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2010}, {"title": "Biomechanics of smart wings in a bat robot: Morphing wings using sma actuators", "author": ["Julian Colorado", "Antonio Barrientos", "Claudio Rossi", "Kenny S Breuer"], "venue": "Bioinspiration and Biomimetics,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "In pursuit of the perfect power", "author": ["Warren Cornwall"], "venue": "suit. Science,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Loopy belief propagation as a basis for communication in sensor networks", "author": ["Christopher Crick", "Avi Pfeffer"], "venue": "In Proceedings of the 19th International Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2003}, {"title": "Tactile sensing\u2013 from humans to humanoids", "author": ["Ravinder S Dahiya", "Giorgio Metta", "Maurizio Valle", "Giulio Sandini"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2010}, {"title": "Principal component analysis of a piezosensor array for damage localization", "author": ["Pascal De Boe", "Jean-Claude Golinval"], "venue": "Structural Health Monitoring,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2003}, {"title": "Improved adaptive-reinforcement learning control for morphing unmanned air vehicles", "author": ["James Doebbler", "Monish D Tandale", "John Valasek", "Andrew J Meade Jr."], "venue": "In AIAA Guidance, Navigation, and Control Conference and Exhibit,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2005}, {"title": "Adaptive neural oscillator using continuous-time back-propagation learning", "author": ["Kenji Doya", "Shuji Yoshizawa"], "venue": "Neural Networks,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1989}, {"title": "An automated hierarchical gait pattern identification tool employing cross-correlation-based feature extraction and recurrent neural network based classification", "author": ["Saibal Dutta", "Amitava Chatterjee", "Sugata Munshi"], "venue": "Expert Systems,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2009}, {"title": "Neural networks trained by analytically simulated damage states", "author": ["Mohamed Fahim Elkordy", "Kuo-Chun Chang", "George C Lee"], "venue": "Journal of Computing in Civil Engineering,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1993}, {"title": "An introduction to structural health monitoring", "author": ["Charles R Farrar", "Keith Worden"], "venue": "Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2007}, {"title": "Gesture based distributed user interaction system for a reconfigurable self-organizing smart wall", "author": ["Nicholas Farrow", "Naren Sivagnanadasan", "Nikolaus Correll"], "venue": "In Proceedings of the 8th International Conference on Tangible, Embedded and Embodied Interaction (TEI),", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2014}, {"title": "Machine learning algorithms for damage detection under operational and environmental variablility", "author": ["Eloi Figueiredo", "Gyuhae Park", "Charles R Farrar", "Keith Worden", "Joaquim Figueiras"], "venue": "Structural Health Monitoring,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2011}, {"title": "Affective touch gesture recognition for a furry zoomorphic machine", "author": ["Anna Flagg", "Karon MacLean"], "venue": "In Proceedings of the 7th International Conference on Tangible, Embedded and Embodied Interaction (TEI),", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2013}, {"title": "Distributed consensus algorithms for svm training in wireless sensor networks", "author": ["Kallirroi Flouri", "Baltasar Beferull-Lozano", "Panagiotis Tsakalides"], "venue": "In 2008 16th European Signal Processing Conference,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2008}, {"title": "Consensus-based distributed expectation-maximization algorithm for density estimation and classification using wireless sensor networks", "author": ["Pedro Forero", "Alfonso Cano", "Georgios B Giannakis"], "venue": "In IEEE International Conference on Acoustics, Speech and Signal Processing,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2008}, {"title": "Qualitative risk of falling assessment based on gait abnormalities", "author": ["David Gagnon", "Bob-Antoine J Menelas", "Martin J-D Otis"], "venue": "IEEE International Conference on Systems, Man, and Cybernetics (SMC),", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2013}, {"title": "Pattern classification with missing data: A review", "author": ["Pedro J Gar\u0107\u0131a-Laencina", "Jos\u00e9-Luis Sancho-G\u00f3mez", "A\u0144\u0131bal R Figueiras-Vidal"], "venue": "Neural Computing and Applications,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2010}, {"title": "Social touch gesture recognition using random forest and boosting on distinct feature sets", "author": ["Yona Falinie A Gaus", "Temitayo Olugbade", "Asim Jan", "Rui Qin", "Jingxin Liu", "Fan Zhang", "Hongying Meng", "Nadia Bianchi-Berthouze"], "venue": "In Proceedings of the 2015 ACM on International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2015}, {"title": "A lightweight active orthosis for hip movement assistance", "author": ["Francesco Giovacchini", "Federica Vannetti", "Matteo Fantozzi", "Marco Cempini", "Mario Cortese", "Andrea Parri", "Tingfang Yan", "Dirk Lefeber", "Nicola Vitiello"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2015}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alan Graves", "Abdel-Rahman Mohamed", "Geoffrey Hinton"], "venue": "IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2013}, {"title": "New adaptive controller method for sma hysteresis modelling of a morphing wing", "author": ["Teodor Lucian Grigorie", "Ruxandra Mihaela Botez"], "venue": "Aeronautical Journal,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2010}, {"title": "Distributed em algorithm for gaussian mixtures in sensor networks", "author": ["Dongbing Gu"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2008}, {"title": "Distributed regression over sensor networks: An support vector machine approach", "author": ["Dongbing Gu", "Zongyao Wang"], "venue": "In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2008}, {"title": "Distributed regression: An efficient framework for modeling sensor network data", "author": ["Carlos Guestrin", "Peter Bodik", "Romain Thibaus", "Mark Paskin", "Samuet Madden"], "venue": "In Proceedings of the Third International Symposium on Information Processing in Sensor Networks,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2004}, {"title": "Characterization of shape memory alloy behavior and position control using reinforcement learning", "author": ["Chris Haag", "Monish Tandale", "John Valasek"], "venue": "In Proceedings of the AIAA Infotech@ Aerospace Conference,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2005}, {"title": "The weka data mining software: An update", "author": ["Mark Hall", "Eibe Frank", "Geoffrey Holmes", "Bernhard Pfahringer", "Peter Reutemann", "Ian H Witten"], "venue": "ACM SIGKDD explorations newsletter,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2009}, {"title": "An automatic impact monitor for a composite panel employing smart sensor technology", "author": ["Jonathan Haywood", "P T Coverley", "Wieslaw J Staszewski", "Keith Worden"], "venue": "Smart Materials and Structures,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 2005}, {"title": "Reducing the dimensionality of data with neural networks", "author": ["Geoffrey E Hinton", "Ruslan R Salakhutdinov"], "venue": "Science,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2006}, {"title": "Gradient flow in recurrent nets: The difficulty of learning long-term dependencies", "author": ["Sepp Hochreiter", "Yoshua Bengio", "Paolo Frasconi", "J\u00fcrgen Schmidhuber"], "venue": null, "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2001}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural Computation,", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 1997}, {"title": "The softgait: A simple and powerful weight-support device for walking and squatting", "author": ["Yun-Pyo Hong", "Donghan Koo", "Ji-il Park", "Soohyun Kim", "Kyung-Soo Kim"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2015}, {"title": "Distributed spatio-temporal gesture recognition in sensor arrays", "author": ["Homa Hosseinmardi", "Akshay Mysore", "Nicholas Farrow", "Nikolaus Correll", "Richard Han"], "venue": "ACM Transactions on Autonomous and Adaptive Systems,", "citeRegEx": "53", "shortCiteRegEx": "53", "year": 2015}, {"title": "A soft, amorphous skin that can sense and localize textures", "author": ["Dana Hughes", "Nikolaus Correll"], "venue": "In Proceedings of the 2014 IEEE International Conference on Robotics & Automation (ICRA),", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 2014}, {"title": "Texture recognition and localization in amorphous robotic skin", "author": ["Dana Hughes", "Nikolaus Correll"], "venue": "Bioinspiration and Biomimetics,", "citeRegEx": "55", "shortCiteRegEx": "55", "year": 2015}, {"title": "Detecting and identifying tactile gestures using deep autoencoders, geometric moments and gesture level features", "author": ["Dana Hughes", "Nicholas Farrow", "Halley Profita", "Nikolaus Correll"], "venue": "In Proceedings of the 2015 ACM on International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 2015}, {"title": "A method for evaluating the dielectric properties of composites using a combined embedded modulated scattering and near-field microwave nondestructive testing technique", "author": ["Dana Hughes", "Reza Zoughi"], "venue": "In Proceedings of the 18th IEEE Instrumentation and Measurement Technology Conference (IMTC),", "citeRegEx": "57", "shortCiteRegEx": "57", "year": 2001}, {"title": "Near-field microwave and embedded modulated scattering technique (mst) for dielectric characterization of materials", "author": ["Dana Hughes", "Reza Zoughi"], "venue": "In Review of Progress in Quantitative Nondestructive Evaluation (QNDE),", "citeRegEx": "58", "shortCiteRegEx": "58", "year": 2002}, {"title": "A novel method for determination of dielectric properties of materials using a combined embedded modulated scattering and near-field microwave techniques\u2013part i: Forward model", "author": ["Dana Hughes", "Reza Zoughi"], "venue": "IEEE Transactions on Instrumentation and Measurement,", "citeRegEx": "59", "shortCiteRegEx": "59", "year": 2005}, {"title": "A novel method for determination of dielectric properties of materials using a combined embedded modulated scattering and near-field microwave techniques\u2013part ii: Dielectric property recalculation", "author": ["Dana Hughes", "Reza Zoughi"], "venue": "IEEE Transactions on Instrumentation and Measurement,", "citeRegEx": "60", "shortCiteRegEx": "60", "year": 2005}, {"title": "Nonlinear autoassociation is not equivalent to pca", "author": ["Nathalie Japkowicz", "Stephen Jos\u00e8 Hanson", "Mark A Gluck"], "venue": "Neural Computation,", "citeRegEx": "61", "shortCiteRegEx": "61", "year": 2000}, {"title": "Phase i iasc-asce structural health monitoring benchmark problem using simulated data", "author": ["Erik A Johnson", "Heung-Fai Lam", "Lambros S Katafygiotis", "James L Beck"], "venue": "Journal of Engineering Mechanics,", "citeRegEx": "62", "shortCiteRegEx": "62", "year": 2004}, {"title": "Towards social touch intelligence: Developing a robust system for automatic touch recognition", "author": ["Merel M Jung"], "venue": "In Proceedings of the 16th International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "63", "shortCiteRegEx": "63", "year": 2014}, {"title": "Touch challenge\u201915: Recognizing social touch gestures", "author": ["Merel M Jung", "Xi Laura Cang", "Mannes Poel", "Karon E MacLean"], "venue": "In Proceedings of the 2015 ACM on International Conference on Multimodal Interaction,", "citeRegEx": "64", "shortCiteRegEx": "64", "year": 2015}, {"title": "Touching the void\u2013 introducing cost: Corpus of social touch", "author": ["Merel M Jung", "Ronald Poppe", "Mannes Poel", "Dirk KJ Heylen"], "venue": "In Proceedings of the 16th International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "65", "shortCiteRegEx": "65", "year": 2014}, {"title": "Humanoids learn touch modalities identification via multi-modal robotic skin and robust tactile descriptors", "author": ["Mohsen Kaboli", "Alex Long", "Gordon Cheng"], "venue": "Advanced Robotics,", "citeRegEx": "66", "shortCiteRegEx": "66", "year": 2015}, {"title": "Humanoids learn object properties from robust tactile feature descriptors via multi-modal artificial skin", "author": ["Mohsen Kaboli", "Philipp Mittendorfer", "Vincent Hugel", "Gordon Cheng"], "venue": "In 14th IEEE-RAS International Conference on Humanoid Robots (Humanoids),", "citeRegEx": "67", "shortCiteRegEx": "67", "year": 2014}, {"title": "Challenges for robot manipulation in human environments", "author": ["Charles C Kemp", "Aaron Edsinger", "Eduardo Torres-Jara"], "venue": "IEEE Robotics and Automation Magazine,", "citeRegEx": "68", "shortCiteRegEx": "68", "year": 2007}, {"title": "Evaluation of fall detection classification approaches", "author": ["Hamideh Kerdegari", "Khairulmizam Samsudin", "Abdul Rahman Ramli", "Saeid Mokram"], "venue": "In Proceedings of the 4th International Conference on Intelligent and Advanced Systems (ICIAS),", "citeRegEx": "69", "shortCiteRegEx": "69", "year": 2012}, {"title": "Application of pattern recognition for damage classification in composite laminates", "author": ["Seth S Kessler", "Pramilia Agrawal"], "venue": "In Proceedings of the 6th International Workshop on Structural Health Monitoring,", "citeRegEx": "70", "shortCiteRegEx": "70", "year": 2007}, {"title": "A multi-class classification approach for target localization in wireless sensor networks", "author": ["Woojin Kim", "Jaemann Park", "H Jin Kim", "Chan Gook Park"], "venue": "Journal of Mechanical Science and Technology,", "citeRegEx": "71", "shortCiteRegEx": "71", "year": 2014}, {"title": "Target localization using ensemble support vector regression in wireless sensor networks", "author": ["Woojin Kim", "Jaemann Park", "Jaehyun Yoo", "H Jin Kim", "Chan Gook Park"], "venue": "IEEE Transactions on Cybernetics,", "citeRegEx": "72", "shortCiteRegEx": "72", "year": 2013}, {"title": "A distributed support vector machine learning over wireless sensor networks", "author": ["Woojin Kim", "Milos S Stankovic", "Karl H Johansson", "H Jin Kim"], "venue": "IEEE Transactions on Cybernetics,", "citeRegEx": "73", "shortCiteRegEx": "73", "year": 2015}, {"title": "A robust online touch pattern recognition for dynamic human-robot interaction", "author": ["Young Min Kim", "Seong Yong Koo", "Jong Gwan Lim", "Dong Soo Kwon"], "venue": "Consumer Electronics, IEEE Transactions on,", "citeRegEx": "74", "shortCiteRegEx": "74", "year": 2010}, {"title": "Reinforcement learning for characterizing hysteresis behavior of shape memory alloys", "author": ["Kenton Kirkpatrick", "John Valasek"], "venue": "Journal of Aerospace Computing, Information, and Communication,", "citeRegEx": "75", "shortCiteRegEx": "75", "year": 2009}, {"title": "Probabilistic Graphical Models: Principles and Techniques", "author": ["Daphne Koller", "Nir Friedman"], "venue": null, "citeRegEx": "76", "shortCiteRegEx": "76", "year": 2009}, {"title": "Learning to walk with an adaptive gain proportional myoelectric controller for a robotic ankle exoskeleton", "author": ["Jeffrey R Koller", "Daniel A Jacobs", "Daniel P Ferris", "C David Remy"], "venue": "Journal of NeuroEngineering and Rehabilitation,", "citeRegEx": "77", "shortCiteRegEx": "77", "year": 2015}, {"title": "Online touch behavior recognition of hard-cover robot using temporal decision tree classifier", "author": ["Seong-Yong Koo", "Jong Gwan Lim", "Dong-Soo Kwon"], "venue": "In IEEE International Symposium on Robot and Human Interactive Communication (ROMAN),", "citeRegEx": "78", "shortCiteRegEx": "78", "year": 2008}, {"title": "Newscast em", "author": ["Wojtek Kowalczyk", "Nikos Vlassis"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "79", "shortCiteRegEx": "79", "year": 2005}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E Hinton"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "80", "shortCiteRegEx": "80", "year": 2012}, {"title": "Reinforcement learning of morphing airfoils with aerodynamic and structural effects", "author": ["Amanda Lampton", "Adam Niksch", "John Valasek"], "venue": "Journal of Aerospace Computing, Information, and Communication,", "citeRegEx": "81", "shortCiteRegEx": "81", "year": 2009}, {"title": "Reinforcement learning of a morphing airfoil\u2013policy and discrete learning analysis", "author": ["Amanda Lampton", "Adam Niksch", "John Valasek"], "venue": "Journal of Aerospace Computing, Information, and Communication,", "citeRegEx": "82", "shortCiteRegEx": "82", "year": 2010}, {"title": "Transmissibility of non-linear output frequency response functions with application in detection and location of damage in mdof structural systems", "author": ["Zi-Qiang Lang", "Gyuhae Park", "Charles R Farrar", "Michael D Todd", "Zhu Mao", "L Zhao", "Keith Worden"], "venue": "International Journal of Non-Linear Mechanics,", "citeRegEx": "83", "shortCiteRegEx": "83", "year": 2011}, {"title": "Impact detection in an aircraft composite panel\u2013a neural-network approach", "author": ["J R LeClerc", "Keith Worden", "Wieslaw J Staszewski", "Jonathan Haywood"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "84", "shortCiteRegEx": "84", "year": 2007}, {"title": "Convolutional networks for images, speech, and time series", "author": ["Yann LeCun", "Yoshua Bengio"], "venue": "The Handbook of Brain Theory and Neural Networks,", "citeRegEx": "85", "shortCiteRegEx": "85", "year": 1995}, {"title": "High-throughput bayesian network learning using heterogeneous multicore computers", "author": ["Michael D Linderman", "Robert Bruggner", "Vivek Athalye", "Teresa H Meng", "Narges Bani Asadi", "Garry P Nolan"], "venue": "In Proceedings of the 24th ACM International Conference on Supercomputing,", "citeRegEx": "86", "shortCiteRegEx": "86", "year": 2010}, {"title": "Single-accelerometer-based daily physical activity classification", "author": ["Xi Long", "Bin Yin", "Ronald M Aarts"], "venue": "In Annual International Conference of the IEEE Engineering in Medicine and Biology Society,", "citeRegEx": "87", "shortCiteRegEx": "87", "year": 2009}, {"title": "Kalu\u017ea. Fall detection and activity recognition with machine", "author": ["Mitja Lu\u0161trek", "Bo\u0161tjan"], "venue": "learning. Informatica,", "citeRegEx": "88", "shortCiteRegEx": "88", "year": 2009}, {"title": "Performance comparison of parkinsonian gait based on principal component analysis", "author": ["Hany Hazfiza Manap", "Nooritawati Md Tahir", "Rusli Abdullah"], "venue": "IEEE Symposium on Industrial Electronics and Applications (ISIEA),", "citeRegEx": "89", "shortCiteRegEx": "89", "year": 2013}, {"title": "Anomalous gait detection based on support vector machine", "author": ["Hany Hazfiza Manap", "Nooritawati Md Tahir", "Ahmad Ihsan M Yassin"], "venue": "In 2011 IEEE International Conference on Computer Applications and Industrial Electronics (ICCAIE),", "citeRegEx": "90", "shortCiteRegEx": "90", "year": 2011}, {"title": "Statistical analysis of parkinson disease gait classification using artificial neural network", "author": ["Hany Hazfiza Manap", "Nooritawati Md Tahir", "Ahmad Ihsan M Yassin"], "venue": "IEEE International Symposium on Signal Processing and Information Technology (ISSPIT),", "citeRegEx": "91", "shortCiteRegEx": "91", "year": 2011}, {"title": "Anomaly gait classification of parkinson disease based on ann", "author": ["Hany Hazfiza Manap", "Nooritawati Md Tahir", "Ahmad Ihsan Mohamed Yassin", "Ramli Abdullah"], "venue": "IEEE International Conference on System Engineering and Technology (ICSET),", "citeRegEx": "92", "shortCiteRegEx": "92", "year": 2011}, {"title": "Machine learning methods for classifying human physical activity from on-body accelerometers", "author": ["Andrea Mannini", "Angelo Maria Sabatini"], "venue": null, "citeRegEx": "93", "shortCiteRegEx": "93", "year": 2010}, {"title": "Machine learning methods for classifying human physical activity from on-body accelerometers", "author": ["Andrea Mannini", "Angelo Maria Sabatini"], "venue": null, "citeRegEx": "94", "shortCiteRegEx": "94", "year": 2010}, {"title": "Accelerometry-based classification of human activities using markov modeling", "author": ["Andrea Mannini", "Angelo Maria Sabatini"], "venue": "Computational Intelligence and Neuroscience,", "citeRegEx": "95", "shortCiteRegEx": "95", "year": 2011}, {"title": "Experimental validation of a structural health monitoring methodology: Part ii. novelty detection on a gnat aircraft", "author": ["Graeme Manson", "Keith Worden", "David Allman"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "96", "shortCiteRegEx": "96", "year": 2003}, {"title": "Experimental validation of a structural health monitoring methodology: Part iii. damage location on an aircraft wing", "author": ["Graeme Manson", "Keith Worden", "David Allman"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "97", "shortCiteRegEx": "97", "year": 2003}, {"title": "Shape change through programmable stiffness", "author": ["Michael Andrew McEvoy", "Nikolaus Correll"], "venue": "In Proceedings of the International Symposium on Experimental Robotics (ISER),", "citeRegEx": "98", "shortCiteRegEx": "98", "year": 2014}, {"title": "Materials that couple sensing, actuation, computation, and communication", "author": ["Michael Andrew McEvoy", "Nikolaus Correll"], "venue": null, "citeRegEx": "99", "shortCiteRegEx": "99", "year": 2015}, {"title": "Thermoplasic variable stiffness composites with embedded, networked sensing, actuation, and control", "author": ["Michael Andrew McEvoy", "Nikolaus Correll"], "venue": "Journal of Composite Materials,", "citeRegEx": "100", "shortCiteRegEx": "100", "year": 2015}, {"title": "Robotic materials with controllable stiffness", "author": ["Michael Andrew McEvoy", "Nicholas Farrow", "Nikolaus Correll"], "venue": "In Proceedings of the 19th International Conference on Composite Materials,", "citeRegEx": "101", "shortCiteRegEx": "101", "year": 2013}, {"title": "R\u00e9billat. A probabilistic multi-class classifier for structural health monitoring", "author": ["Nazih Mechbal", "Juan Sebastian Uribe", "Marc"], "venue": "Mechanical Systems and Signal Processing,", "citeRegEx": "102", "shortCiteRegEx": "102", "year": 2015}, {"title": "Humanoid multimodal tactile-sensing modules", "author": ["Philipp Mittendorfer", "Gordon Cheng"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "103", "shortCiteRegEx": "103", "year": 2011}, {"title": "Realizing whole-body tactile interactions with a self-organizing, multi-modal artificial skin on a humanoid robot", "author": ["Philipp Mittendorfer", "Eiichi Yoshida", "Gordon Cheng"], "venue": "Advanced Robotics,", "citeRegEx": "104", "shortCiteRegEx": "104", "year": 2015}, {"title": "A review of vibration-based structural health monitoring with special emphasis on composite materials", "author": ["Diogo Montalv\u00e3o", "Nuno M M Maia", "Ant\u00f3nio M Rel\u00f3gio Ribeiro"], "venue": "The Shock and Vibration Digest,", "citeRegEx": "105", "shortCiteRegEx": "105", "year": 2006}, {"title": "A reinforcement learning approach to lift generation in flapping mavs: Simulation results", "author": ["Mehran Motamed", "Joseph Yan"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "106", "shortCiteRegEx": "106", "year": 2006}, {"title": "A reinforcement learning approach to lift generation in flapping mavs: Experimental results", "author": ["Mehran Motamed", "Joseph Yan"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "107", "shortCiteRegEx": "107", "year": 2007}, {"title": "Loopy belief propagation for approximate inference: An empirical study", "author": ["Kevin P Murphy", "Yair Weiss", "Michael I Jordan"], "venue": "In Proceedings of the Fifteenth conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "108", "shortCiteRegEx": "108", "year": 1999}, {"title": "Recognizing human touching behaviors using a haptic interface for a pet-robot", "author": ["Futoshi Naya", "Junji Yamato", "Kazuhiko Shinozawa"], "venue": "In IEEE International Conference on Systems, Man, and Cybernetics,", "citeRegEx": "109", "shortCiteRegEx": "109", "year": 1999}, {"title": "On optimization methods for deep learning", "author": ["Jiquan Ngiam", "Adam Coates", "Ahbik Lahiri", "Bobby Prochnow", "Quoc V Le", "Andrew Y Ng"], "venue": "In Proceedings of the 28th International Conference on Machine Learning (ICML),", "citeRegEx": "110", "shortCiteRegEx": "110", "year": 2011}, {"title": "A kernel-based learning approach to ad hoc sensor network localization", "author": ["XuanLong Nguyen", "Michael I Jordan", "Bruno Sinopoli"], "venue": "Transactions on Sensor Networks,", "citeRegEx": "111", "shortCiteRegEx": "111", "year": 2005}, {"title": "Distributed em algorithms for density estimation and clustering in sensor networks", "author": ["Robert D Nowak"], "venue": "IEEE Transactions on Signal Processing,", "citeRegEx": "112", "shortCiteRegEx": "112", "year": 2003}, {"title": "Damage diagnosis under environmental and operational variations using unsupervised support vector machine", "author": ["Chang Kook Oh", "Hoon Sohn"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "113", "shortCiteRegEx": "113", "year": 2009}, {"title": "Humanoid robot which can lift a 30kg box by whole body contact and tactile feedback", "author": ["Yoshiyuki Ohmura", "Yasuo Kuniyoshi"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),", "citeRegEx": "114", "shortCiteRegEx": "114", "year": 2007}, {"title": "Conformable and scalable tactile sensor skin for curved surfaces", "author": ["Yoshiyuki Ohmura", "Yasuo Kuniyoshi", "Akihiko Nagakubo"], "venue": "In Proceedings 2006 IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "115", "shortCiteRegEx": "115", "year": 2006}, {"title": "Deep convolutional and lstm recurrent neural networks for multimodal wearable activity", "author": ["Francisco Javier Ord\u00f3\u00f1ez", "Daniel Roggen"], "venue": "recognition. Sensors,", "citeRegEx": "116", "shortCiteRegEx": "116", "year": 2016}, {"title": "Robust probabilistic inference in distributed systems", "author": ["Mark A Paskin", "Carlos E Guestrin"], "venue": "In ACM International Conference Proceeding Series, Proceedings of the 20th Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "117", "shortCiteRegEx": "117", "year": 2004}, {"title": "A robust architecture for inference in distributed sensor networks", "author": ["Mark A Paskin", "Carlos E Guestrin", "Jim McFadden"], "venue": "In Proceedings of the International Converence on Information Processing and Sensor Networks (IPSN),", "citeRegEx": "118", "shortCiteRegEx": "118", "year": 2005}, {"title": "Morphing wing: A demonstration of aero servo elastic distributed sensing and control", "author": ["Sunil C Patel", "Manoranjan Majji", "Bong Su Koh", "John L Junkins", "O Rediniotisx"], "venue": "Technical report,", "citeRegEx": "119", "shortCiteRegEx": "119", "year": 2005}, {"title": "Morphological computation: Connecting body, brain and environment", "author": ["Rolf Pfeifer", "Fumiya Iida"], "venue": "Japanese Scientific Monthly,", "citeRegEx": "120", "shortCiteRegEx": "120", "year": 2005}, {"title": "Feature learning for activity recognition in ubiquitous computing", "author": ["Thomas Pl\u00f6tz", "Nils Y Hammerla", "Patrick Olivier"], "venue": "In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "121", "shortCiteRegEx": "121", "year": 2011}, {"title": "Discovery of gait anomalies from motion sensor data", "author": ["Bogdan Pogorelc", "Matja Gams"], "venue": "In IEEE International Conference on Tools with Artificial Intelligence (ICTAI),", "citeRegEx": "122", "shortCiteRegEx": "122", "year": 2010}, {"title": "Flutter: An exploration of an assistive garment using distributed sensing, computation and actuation", "author": ["Halley Profita", "Nicholas Farrow", "Nikolaus Correll"], "venue": "In Proceedings of the Ninth International Conference on Tangible, Embedded, and Embodied Interaction (TEI),", "citeRegEx": "123", "shortCiteRegEx": "123", "year": 2015}, {"title": "An introduction to hidden markov models", "author": ["Lawrence R Rabiner", "Biing-Hwang Juang"], "venue": "IEEE ASSP Magazine,", "citeRegEx": "124", "shortCiteRegEx": "124", "year": 1986}, {"title": "A survey on sensor network", "author": ["Kazi Chandrima Rahman"], "venue": "Journal of Computer and Information Technology,", "citeRegEx": "125", "shortCiteRegEx": "125", "year": 2010}, {"title": "Activity recognition from accelerometer data", "author": ["Nishkam Ravi", "Nikhil Dandekar", "Preetham Mysore", "Michael L Littman"], "venue": "In Proceedings of the 17th conference on Innovative applications of artificial intelligence-Volume 3,", "citeRegEx": "126", "shortCiteRegEx": "126", "year": 2005}, {"title": "Intelligent material systems\u2013the dawn of a new materials age", "author": ["Craig A. Rogers"], "venue": "Journal of Intelligent Material Systems and Structures,", "citeRegEx": "127", "shortCiteRegEx": "127", "year": 1993}, {"title": "Oscillator-based walking assistance: A model-free approach", "author": ["Renaud Ronsse", "Bram Koopman", "Nicola Vitiello", "Tommaso Lenzi", "Stefano Marco Maria De Rossi", "Jesse van den Kieboom", "Edwin Van Asseldonk", "Maria Chiara Carrozza", "Herman van der Kooij", "Auke Jan Ijspeert"], "venue": "In IEEE International Conference on Rehabilitation Robotics (ICORR),", "citeRegEx": "128", "shortCiteRegEx": "128", "year": 2011}, {"title": "Oscillator-based assistance of cyclical 75  movements: Model-based and model-free approaches", "author": ["Renaud Ronsse", "Tommaso Lenzi", "Nicola Vitiello", "Bram Koopman", "Edwin van Asseldonk", "Stefano Marco Maria De Rossi", "Jesse van den Kieboom", "Herman van der Kooij", "Maria Chiara Carrozza", "Auke Jan Ijspeert"], "venue": "Medical & Biological Engineering & Computing,", "citeRegEx": "129", "shortCiteRegEx": "129", "year": 2011}, {"title": "Human\u2013robot synchrony: Flexible assistance using adaptive oscillators", "author": ["Renaud Ronsse", "Nicola Vitiello", "Tommaso Lenzi", "Jesse van den Kieboom", "Maria Chiara Carrozza", "Auke Jan Ijspeert"], "venue": "IEEE Transactions on Biomedical Engineering,", "citeRegEx": "130", "shortCiteRegEx": "130", "year": 2011}, {"title": "Distributed diagnosis of dynamic systems using dynamic bayesian networks", "author": ["Indranil Roychoudhury", "Gautam Biswas", "Xenofon Koutsoukos"], "venue": "In Proceedings of the 20th International Workshop on Principles of Diagnosis,", "citeRegEx": "131", "shortCiteRegEx": "131", "year": 2009}, {"title": "Learning representations by back-propagating errors", "author": ["David E Rumelhart", "Geoffrey E Hinton", "Ronald J Williams"], "venue": "Nature,", "citeRegEx": "132", "shortCiteRegEx": "132", "year": 1986}, {"title": "Using svd to detect damage in structures with different operational conditions", "author": ["Romualdo Ruotolo", "Cecilia Surace"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "133", "shortCiteRegEx": "133", "year": 1999}, {"title": "Shape control of a frp airfoil structure using sma-actuators and optical fiber sensors", "author": ["Pasi Ruotsalainen", "Petter Kroneld", "Kalervo Nevala", "Timo Brander", "Tomi Lindroos", "Merja Sippola"], "venue": "Solid State Phenomena,", "citeRegEx": "134", "shortCiteRegEx": "134", "year": 2009}, {"title": "Design, fabrication and control of soft robots", "author": ["Daniela Rus", "Michael T Tolley"], "venue": "Nature,", "citeRegEx": "135", "shortCiteRegEx": "135", "year": 2015}, {"title": "Artificial Intelligence: A Modern Approach", "author": ["Stuart Russell", "Peter Norvig"], "venue": null, "citeRegEx": "136", "shortCiteRegEx": "136", "year": 2009}, {"title": "Benchmarking classification techniques using the opportunity human activity dataset", "author": ["Hesam Sagha", "Sundara Tejaswi Digumarti", "Jos\u00e9 del R Mill\u00e1n", "Ricardo Chavarriaga", "Alberto Calatroni", "Daniel Roggen", "Gerhard Tr\u00f6ster"], "venue": "In IEEE International Conference on Systems, Man, and Cybernetics (SMC),", "citeRegEx": "137", "shortCiteRegEx": "137", "year": 2011}, {"title": "Methods and technologies for the implementation of large-scale robot tactile sensors", "author": ["Alexander Schmitz", "Perla Maiolino", "Marco Maggiali", "Lorenzo Natale", "Giorgio Cannata", "Giorgio Meteta"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "138", "shortCiteRegEx": "138", "year": 2011}, {"title": "Methods and technologies for the implementation of large-scale robot tactile sensors", "author": ["Alexander Schmitz", "Perla Maiolino", "Marco Maggiali", "Lorenzo Natale", "Giorgio Cannata", "Giorgio Metta"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "139", "shortCiteRegEx": "139", "year": 2011}, {"title": "Damage detection of cfrp laminates using electrical resistance measurement and neural network", "author": ["Dae-Cheol Seo", "Jung-Ju Lee"], "venue": "Composite Structures,", "citeRegEx": "140", "shortCiteRegEx": "140", "year": 1999}, {"title": "Combining amorphous computing and reactive agent-based systems: A paradigm for pervasive intelligence", "author": ["David Servat", "Alexis Drogoul"], "venue": "In Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems: Part", "citeRegEx": "141", "shortCiteRegEx": "141", "year": 2002}, {"title": "Determination of impact location on composite stiffened panels", "author": ["Zahra Sharif-Khodaei", "Mazdak Ghajari", "M H Aliabadi"], "venue": "Smart Materials and Structures,", "citeRegEx": "142", "shortCiteRegEx": "142", "year": 2012}, {"title": "Distributive target tracking in sensor networks with a markov random field model", "author": ["Lufeng Shi", "Jindong Tan"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS),", "citeRegEx": "143", "shortCiteRegEx": "143", "year": 2009}, {"title": "A learning-theory approach to sensor networks", "author": ["Slobodan N Simi\u0107"], "venue": "IEEE Pervasive Computing,", "citeRegEx": "144", "shortCiteRegEx": "144", "year": 2003}, {"title": "A tutorial on support vector regression", "author": ["Alex J Smola", "Bernhard Sch\u00f6lkopf"], "venue": "Statistics and Computing,", "citeRegEx": "145", "shortCiteRegEx": "145", "year": 2004}, {"title": "Statistical damage classification under changing environmental and operational conditions", "author": ["Hoon Sohn", "Keith Worden", "Charles R Farrar"], "venue": "Journal of Intelligent Material Systems and Structures,", "citeRegEx": "146", "shortCiteRegEx": "146", "year": 2002}, {"title": "Structural damage detection by integrating independent component analysis and support vector machine", "author": ["Huazhu Song", "Luo Zhong", "Bo Han"], "venue": "International Journal of Systems Science,", "citeRegEx": "147", "shortCiteRegEx": "147", "year": 2006}, {"title": "A two-threshold fall detection algorithm for reducing false alarms", "author": ["Aino Sorvala", "Esko Alasaarela", "Hannu Sorvoja", "Risto Myllyl\u00e4"], "venue": "In 2012 6th International Symposium on Medical Information and Communication Technology (ISMICT),", "citeRegEx": "148", "shortCiteRegEx": "148", "year": 2012}, {"title": "Fail-safe sensor distributions for impact detection in composite materials", "author": ["Wieslaw J Staszewski", "Keith Worden", "R Wardle", "Geof R Tomlinson"], "venue": "Smart Meterials and Structures,", "citeRegEx": "149", "shortCiteRegEx": "149", "year": 2000}, {"title": "Design of a therapeutic robotic companion for relational, affective touch", "author": ["Walter Dan Stiehl", "Jeff Lieberman", "Cynthia Breazeal", "Louis Basel", "Levi Lalla", "Michael Wolf"], "venue": "In IEEE International Workshop on Robot and Human Interactive Communication (ROMAN),", "citeRegEx": "150", "shortCiteRegEx": "150", "year": 2005}, {"title": "The grenoble system for the social touch challenge at icmi", "author": ["Viet-Cuong Ta", "Wafa Johal", "Maxime Portaz", "Eric Castelli", "Dominique Vaufreydaz"], "venue": "In Proceedings of the 2015 ACM on International Conference on Multimodal Interaction (ICMI),", "citeRegEx": "151", "shortCiteRegEx": "151", "year": 2015}, {"title": "A novel hmm distributed classifier for the detection of gait phases by means of a wearable inertial sensor", "author": ["Juri Taborri", "Stefano Rossi", "Eduardo Palermo", "Fabrizio Patan\u00e9", "Paolo Cappa"], "venue": "network. Sensors,", "citeRegEx": "152", "shortCiteRegEx": "152", "year": 2014}, {"title": "Automatic categorization of haptic interactions\u2013what are the typical haptic interactions between a human and a robot", "author": ["Tajika Taichi", "Miyashita Takahiro", "Ishiguro Hiroshi", "Hagita Norihiro"], "venue": "In IEEE-RAS International Conference on Humanoid Robots,", "citeRegEx": "153", "shortCiteRegEx": "153", "year": 2006}, {"title": "Development of soft and distributed tactile sensors and the application to a humanoid robot", "author": ["Ryosuke Tajima", "Satoshi Kagami", "Masayuki Inaba", "Hirochika Inoue"], "venue": "Advanced Robotics,", "citeRegEx": "154", "shortCiteRegEx": "154", "year": 2002}, {"title": "A concept of intelligent materials", "author": ["Toshinori Takagi"], "venue": "Journal of Intelligent Material Systems and StructureS,", "citeRegEx": "155", "shortCiteRegEx": "155", "year": 1990}, {"title": "Preliminary results of adaptivereinforcement learning control for morphing aircraft", "author": ["Monish Tandale", "Jie Rong", "John Valasek"], "venue": "In AIAA Guidance, Navigation, and Control Conference and Exhibit,", "citeRegEx": "156", "shortCiteRegEx": "156", "year": 2004}, {"title": "Interpretation of the modality of touch on an artificial arm covered with an eit-based sensitive skin", "author": ["David Silvera Tawil", "David Rye", "Mari Velonaki"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "157", "shortCiteRegEx": "157", "year": 2012}, {"title": "Localization in wireless sensor networks based on support vector machines", "author": ["Duc A Tran", "Thinh Nguyen"], "venue": "IEEE Transactions on Parallel and Distributed Systems,", "citeRegEx": "158", "shortCiteRegEx": "158", "year": 2008}, {"title": "Improved adaptive-reinforcement learning control for morphing unmanned air vehicles", "author": ["John Valasek", "James Doebbler", "Monish D Tandale", "Andrew J Meade"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics,", "citeRegEx": "159", "shortCiteRegEx": "159", "year": 2008}, {"title": "A reinforcement learning-adaptive control architecture for morphing", "author": ["John Valasek", "Monish D Tandale", "Jie Rong"], "venue": "Journal of Aerospace Computing, Information, and Communication,", "citeRegEx": "160", "shortCiteRegEx": "160", "year": 2005}, {"title": "Artificial neural networks as an alternative to traditional fall detection methods", "author": ["Monica Vallejo", "Claudia V Isaza", "Jos\u00e9 D Lop\u00e9z"], "venue": "In 2013 35th Annual International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC),", "citeRegEx": "161", "shortCiteRegEx": "161", "year": 2013}, {"title": "A neural network based approach to social touch classification", "author": ["Siewart van Wingerden", "Tobias J Uebbing", "Merel M Jung", "Mannes Poel"], "venue": "In Proceedings of the 2014 Workshop on Emotion Representation and Modelling in Human-Computer-Interaction- Systems,", "citeRegEx": "162", "shortCiteRegEx": "162", "year": 2014}, {"title": "A lightweight soft exosuit for gait assistance", "author": ["Michael Wehner", "Brendan Quinlivan", "Patrick M Aubin", "Ernesto Martinez-Villalpando", "Martin Baumann", "Leia Stirling", "Kenneth Holt", "Roger Wood", "Conor Walsh"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "163", "shortCiteRegEx": "163", "year": 2013}, {"title": "Morphing aircraft technology\u2013new shapes for aircraft design", "author": ["Terrence A Weisshaar"], "venue": "Technical report, DTIC Document,", "citeRegEx": "164", "shortCiteRegEx": "164", "year": 2006}, {"title": "Morphing aircraft systems: Historical perspectives and future challenges", "author": ["Terrence A Weisshaar"], "venue": "Journal of Aircraft,", "citeRegEx": "165", "shortCiteRegEx": "165", "year": 2013}, {"title": "Beyond Regression: New Tools for Prediction and Analysis in the Behavioral Sciences", "author": ["Paul J Werbos"], "venue": "Phd, Harvard University,", "citeRegEx": "166", "shortCiteRegEx": "166", "year": 1974}, {"title": "Aircraft morphing program", "author": ["Richard W Wlezien", "Garnett C Horner", "Anna-Maria R McGowan", "Sharon L Padula", "Michael A Scott", "Richard J Silcox", "Joycelyn S Harrison"], "venue": "In 5th Annual International Symposium on Smart Structures and Materials,", "citeRegEx": "167", "shortCiteRegEx": "167", "year": 1998}, {"title": "Dulieu-Barton. An overview of intelligent fault detection in systems and structures", "author": ["Keith Worden", "Janice M"], "venue": "Structural Health Monitoring,", "citeRegEx": "168", "shortCiteRegEx": "168", "year": 2004}, {"title": "Damage identification using support vector machines", "author": ["Keith Worden", "A J Lane"], "venue": "Smart Materials and Structures,", "citeRegEx": "169", "shortCiteRegEx": "169", "year": 2001}, {"title": "The application of machine learning to structural health monitoring", "author": ["Keith Worden", "Graeme Manson"], "venue": "Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences,", "citeRegEx": "170", "shortCiteRegEx": "170", "year": 2007}, {"title": "Experimental validation of a structural health monitoring methodology: Part i. novelty detection on a laboratory structure", "author": ["Keith Worden", "Graeme Manson", "David Allman"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "171", "shortCiteRegEx": "171", "year": 2003}, {"title": "Damage detection using outlier analysis", "author": ["Keith Worden", "Graeme Manson", "Nick R J Fieller"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "172", "shortCiteRegEx": "172", "year": 2000}, {"title": "Novelty detection in a changing environment: Regression and interpolation approaches", "author": ["Keith Worden", "Hoon Sohn", "Charles R Farrar"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "173", "shortCiteRegEx": "173", "year": 2002}, {"title": "Tactile recognition in peth robot for wellbeing of the elderly", "author": ["Rui Yan", "Qinpei Li", "Yeow Kee Tan", "Anthony Wong"], "venue": null, "citeRegEx": "174", "shortCiteRegEx": "174", "year": 2013}, {"title": "Deep convolutional neural networks on multichannel time series for human activity recognition", "author": ["Jian Bo Yang", "Minh Nhut Nguyen", "Phyo Phyo San", "Xiao Li Li", "Shonali Krishnaswamy"], "venue": "In Proceedings of the 24th International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "175", "shortCiteRegEx": "175", "year": 2015}, {"title": "Information processing using intelligent materials\u2013informationprocessing architectures for material processors", "author": ["Amemiya Yoshihito"], "venue": "Journal of Intelligent Material Systems and Structures,", "citeRegEx": "176", "shortCiteRegEx": "176", "year": 1994}, {"title": "State-of-the-art and future directions for robotic lower limb exoskeletons", "author": ["Aaron Young", "Daniel Ferris"], "venue": "IEEE Transactions on Neural Systems and Rehabilitation Engineering,", "citeRegEx": "177", "shortCiteRegEx": "177", "year": 2016}, {"title": "Convolutional neural networks for human activity recognition using mobile sensors", "author": ["Ming Zeng", "Le T Nguyen", "Bo Yu", "Ole J Mengshoel", "Jiang Zhu", "Pang Wu", "Juyong Zhang"], "venue": "In 6th International Conference on Mobile Computing, Applications and Services (MobiCASE),", "citeRegEx": "178", "shortCiteRegEx": "178", "year": 2014}, {"title": "The Finite Element Method for Solid and Structural Mechanics", "author": ["Olek C Zienkiewicz", "Robert L Taylor"], "venue": "Butterworth-Heinemann, 6th edition,", "citeRegEx": "179", "shortCiteRegEx": "179", "year": 2005}, {"title": "Vibration-based model-dependent damage (delamination) identification and health monitoring for composite structuresa review", "author": ["Yi Zou", "Liyong Tong", "Grant P Steven"], "venue": "Journal of Sound and Vibration,", "citeRegEx": "180", "shortCiteRegEx": "180", "year": 2000}], "referenceMentions": [{"referenceID": 53, "context": "Small, inexpensive components such as these has allowed for active sensing to be embedded into engineering materials, to assist with monitoring the local properties of a structure [57\u201360].", "startOffset": 180, "endOffset": 187}, {"referenceID": 54, "context": "Small, inexpensive components such as these has allowed for active sensing to be embedded into engineering materials, to assist with monitoring the local properties of a structure [57\u201360].", "startOffset": 180, "endOffset": 187}, {"referenceID": 55, "context": "Small, inexpensive components such as these has allowed for active sensing to be embedded into engineering materials, to assist with monitoring the local properties of a structure [57\u201360].", "startOffset": 180, "endOffset": 187}, {"referenceID": 56, "context": "Small, inexpensive components such as these has allowed for active sensing to be embedded into engineering materials, to assist with monitoring the local properties of a structure [57\u201360].", "startOffset": 180, "endOffset": 187}, {"referenceID": 151, "context": "\u201cIntelligent Materials\u201d was introduced in 1990 as \u201cmaterials that respond to environmental changes at the most optimum condition and manifest their own functions according to these changes\u201d [155].", "startOffset": 190, "endOffset": 195}, {"referenceID": 95, "context": "Recently, \u201crobotic materials\u201d has been proposed as the combination of a network of sensing-computing-actuating elements with manufactured materials, such as polymers, composites, cement-based materials, and fabrics [99].", "startOffset": 215, "endOffset": 219}, {"referenceID": 28, "context": "Several applications of robotic materials have already been explored, such as gesture recognition in architectural facades [31] and robotic skins [56], detection, localization and identification of tactile interaction with textured surfaces [55], and garments capable of auditory scene monitoring [123].", "startOffset": 123, "endOffset": 127}, {"referenceID": 52, "context": "Several applications of robotic materials have already been explored, such as gesture recognition in architectural facades [31] and robotic skins [56], detection, localization and identification of tactile interaction with textured surfaces [55], and garments capable of auditory scene monitoring [123].", "startOffset": 146, "endOffset": 150}, {"referenceID": 51, "context": "Several applications of robotic materials have already been explored, such as gesture recognition in architectural facades [31] and robotic skins [56], detection, localization and identification of tactile interaction with textured surfaces [55], and garments capable of auditory scene monitoring [123].", "startOffset": 241, "endOffset": 245}, {"referenceID": 119, "context": "Several applications of robotic materials have already been explored, such as gesture recognition in architectural facades [31] and robotic skins [56], detection, localization and identification of tactile interaction with textured surfaces [55], and garments capable of auditory scene monitoring [123].", "startOffset": 297, "endOffset": 302}, {"referenceID": 95, "context": "From [99]).", "startOffset": 5, "endOffset": 9}, {"referenceID": 51, "context": "In [55], the skin is assumed to be a infinite thin plate of constant thickness, the analysis of which may not apply in the presence of connectors, joints or locations where the skin is excessively stretched.", "startOffset": 3, "endOffset": 7}, {"referenceID": 119, "context": "Similarly, in [123], determining which sound to respond to simply involves identifying when measured signal exceeds the ambient sound by some threshold, rather than attempting to identify specific sounds of interest (e.", "startOffset": 14, "endOffset": 19}, {"referenceID": 175, "context": "world structures, require computationally intensive numerical modeling approaches, such as finite element methods (FEM) [179].", "startOffset": 120, "endOffset": 125}, {"referenceID": 95, "context": "Robotic materials are a recently introduced class of multi-functional materials which tightly integrate sensing, actuation, communication, and computation [99].", "startOffset": 155, "endOffset": 159}, {"referenceID": 13, "context": "Robotic materials have been influenced by ideas presented in distributed MEMS [15], programmable matter [40], amorphous computation [1], morphological computation [120], intelligent materials [155], sensor networks [2] and pervasive intelligence [141].", "startOffset": 78, "endOffset": 82}, {"referenceID": 116, "context": "Robotic materials have been influenced by ideas presented in distributed MEMS [15], programmable matter [40], amorphous computation [1], morphological computation [120], intelligent materials [155], sensor networks [2] and pervasive intelligence [141].", "startOffset": 163, "endOffset": 168}, {"referenceID": 151, "context": "Robotic materials have been influenced by ideas presented in distributed MEMS [15], programmable matter [40], amorphous computation [1], morphological computation [120], intelligent materials [155], sensor networks [2] and pervasive intelligence [141].", "startOffset": 192, "endOffset": 197}, {"referenceID": 0, "context": "Robotic materials have been influenced by ideas presented in distributed MEMS [15], programmable matter [40], amorphous computation [1], morphological computation [120], intelligent materials [155], sensor networks [2] and pervasive intelligence [141].", "startOffset": 215, "endOffset": 218}, {"referenceID": 137, "context": "Robotic materials have been influenced by ideas presented in distributed MEMS [15], programmable matter [40], amorphous computation [1], morphological computation [120], intelligent materials [155], sensor networks [2] and pervasive intelligence [141].", "startOffset": 246, "endOffset": 251}, {"referenceID": 151, "context": "Intelligent Materials was introduced in 1990 as \u201cmaterials that respond to environmental changes at the most optimum condition and manifest their own functions according to these changes\u201d [155].", "startOffset": 188, "endOffset": 193}, {"referenceID": 123, "context": ", drug delivery systems should have nano-scale computing and actuation elements, while structural materials can have meter-scale components) [127], or computing, sensing and actuation components be directly incorporated into the material construction itself, using manufacturing processes used for electronic components.", "startOffset": 141, "endOffset": 146}, {"referenceID": 172, "context": "processing, holonic systems, neural networks and cellular automata have been suggested as computational models for intelligent materials [176].", "startOffset": 137, "endOffset": 142}, {"referenceID": 0, "context": "Sensor networks emerged in the late 1990s from the combination of advancements in wireless communication and a reduction in cost of electronics [2, 125].", "startOffset": 144, "endOffset": 152}, {"referenceID": 121, "context": "Sensor networks emerged in the late 1990s from the combination of advancements in wireless communication and a reduction in cost of electronics [2, 125].", "startOffset": 144, "endOffset": 152}, {"referenceID": 137, "context": "The concept of pervasive intelligence provides a promising paradigm for incorporating intelligence into robotic materials [141].", "startOffset": 122, "endOffset": 127}, {"referenceID": 95, "context": "There are several necessary considerations associated with algorithms implemented in a robotic material [99].", "startOffset": 104, "endOffset": 108}, {"referenceID": 51, "context": "For example, detecting the location of the source of a vibration requires only a small number of sensing nodes [55].", "startOffset": 111, "endOffset": 115}, {"referenceID": 34, "context": "Several techniques already exist for handling missing data [37].", "startOffset": 59, "endOffset": 63}, {"referenceID": 28, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 137, "endOffset": 145}, {"referenceID": 49, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 137, "endOffset": 145}, {"referenceID": 94, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 176, "endOffset": 190}, {"referenceID": 96, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 176, "endOffset": 190}, {"referenceID": 97, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 176, "endOffset": 190}, {"referenceID": 119, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 211, "endOffset": 216}, {"referenceID": 50, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 234, "endOffset": 242}, {"referenceID": 51, "context": "Several recent applications across several disciplines have demonstrated the applicability of robotic materials, including smart facades [31, 53], variable stiffness materials [98, 100, 101], assistive garments [123] and robotic skin [54, 55].", "startOffset": 234, "endOffset": 242}, {"referenceID": 28, "context": "Research on this material centers around developing touch interfaces, from menus and widgets [31] to recognizing letters from a set of predefined gestures [53].", "startOffset": 93, "endOffset": 97}, {"referenceID": 49, "context": "Research on this material centers around developing touch interfaces, from menus and widgets [31] to recognizing letters from a set of predefined gestures [53].", "startOffset": 155, "endOffset": 159}, {"referenceID": 96, "context": "Reprinted, with permission, from [100]; d.", "startOffset": 33, "endOffset": 38}, {"referenceID": 50, "context": "Reprinted, with permission, from [54].", "startOffset": 33, "endOffset": 37}, {"referenceID": 97, "context": "Individual portions of the material can be heated using nichrome heating wire wrapped around the base material, and local temperature can be monitored using thermistors [101].", "startOffset": 169, "endOffset": 174}, {"referenceID": 97, "context": "of the beam or sheet enables changing the shape of the composite, either using gravity [101] or cables [98] to generate a distributed load on the structure.", "startOffset": 87, "endOffset": 92}, {"referenceID": 94, "context": "of the beam or sheet enables changing the shape of the composite, either using gravity [101] or cables [98] to generate a distributed load on the structure.", "startOffset": 103, "endOffset": 107}, {"referenceID": 96, "context": "Shape-changing and variable stiffness materials have been proposed to be used as aerodynamic surfaces in cars, boats and airplanes, or for medical applications such as orthopedic casts [100].", "startOffset": 185, "endOffset": 190}, {"referenceID": 119, "context": "Flutter [123] is a prototype wearable assistive technology for the hearing impaired community.", "startOffset": 8, "endOffset": 13}, {"referenceID": 50, "context": "Amorphous robotic skin is a final example of the potential of robotic materials [54,55].", "startOffset": 80, "endOffset": 87}, {"referenceID": 51, "context": "Amorphous robotic skin is a final example of the potential of robotic materials [54,55].", "startOffset": 80, "endOffset": 87}, {"referenceID": 134, "context": "Vibration-based tactile sensing is very high bandwidth\u2013sample rates for a single sensor are at least several kHz, whereas pressurebased sensing is sampled at most of up to several hundreds of Hz [138].", "startOffset": 195, "endOffset": 200}, {"referenceID": 119, "context": "For example, in [123], triggering the garment\u2019s feedback is based simply on sound levels which exceed some threshold of the ambient sound level, and in [55], the underlying skin is modeled as a thin, homogeneous plate.", "startOffset": 16, "endOffset": 21}, {"referenceID": 51, "context": "For example, in [123], triggering the garment\u2019s feedback is based simply on sound levels which exceed some threshold of the ambient sound level, and in [55], the underlying skin is modeled as a thin, homogeneous plate.", "startOffset": 152, "endOffset": 156}, {"referenceID": 29, "context": "Novelty detection has been utilized extensively in structural health monitoring to detect the presence of damage [32,32,171,172].", "startOffset": 113, "endOffset": 128}, {"referenceID": 29, "context": "Novelty detection has been utilized extensively in structural health monitoring to detect the presence of damage [32,32,171,172].", "startOffset": 113, "endOffset": 128}, {"referenceID": 167, "context": "Novelty detection has been utilized extensively in structural health monitoring to detect the presence of damage [32,32,171,172].", "startOffset": 113, "endOffset": 128}, {"referenceID": 168, "context": "Novelty detection has been utilized extensively in structural health monitoring to detect the presence of damage [32,32,171,172].", "startOffset": 113, "endOffset": 128}, {"referenceID": 44, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 195, "endOffset": 213}, {"referenceID": 80, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 195, "endOffset": 213}, {"referenceID": 138, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 195, "endOffset": 213}, {"referenceID": 145, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 195, "endOffset": 213}, {"referenceID": 85, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 314, "endOffset": 324}, {"referenceID": 86, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 314, "endOffset": 324}, {"referenceID": 88, "context": "Impact detection and gait anomaly due to diseases such as Parkinson\u2019s are notable exceptions to this situation, as impacts can be performed on a structure without actually damaging the structure [48, 84, 142, 149], and gait data can be collected and diagnosed for individuals with and without a particular disease [89,90,92].", "startOffset": 314, "endOffset": 324}, {"referenceID": 29, "context": "Variation from a nominal state or operation can be measured as a novelty indicator (NI), also called a damage indicator (DI) in the structural health monitoring literature, a scalar measurement representing the deviation from normal operation [32], based on extracted features.", "startOffset": 243, "endOffset": 247}, {"referenceID": 167, "context": "Kernel density estimate (KDE) is a more direct approach which estimates the probability density function directly from sampled data from a nominal state [171].", "startOffset": 153, "endOffset": 158}, {"referenceID": 29, "context": "Factor analysis, which describes correlations between observed features and a small number of unobserved independent variables (factors), can be used to build models as linear combinations of the factors [32].", "startOffset": 204, "endOffset": 208}, {"referenceID": 129, "context": "Assuming data from a nominal state is composed of a linear combination of a finite number of characteristic vectors, which represent particular properties of the structure, SVD can be used to detected novelty [133].", "startOffset": 209, "endOffset": 214}, {"referenceID": 167, "context": ", confidence level) of the training data is within the threshold [171\u2013173].", "startOffset": 65, "endOffset": 74}, {"referenceID": 168, "context": ", confidence level) of the training data is within the threshold [171\u2013173].", "startOffset": 65, "endOffset": 74}, {"referenceID": 169, "context": ", confidence level) of the training data is within the threshold [171\u2013173].", "startOffset": 65, "endOffset": 74}, {"referenceID": 77, "context": "Regression can also be used in control applications, such as morphable airfoils or exosuit control, for example, to approximate Q values in Q-Learning approaches, such as those used in [81,82,156,159,160].", "startOffset": 185, "endOffset": 204}, {"referenceID": 78, "context": "Regression can also be used in control applications, such as morphable airfoils or exosuit control, for example, to approximate Q values in Q-Learning approaches, such as those used in [81,82,156,159,160].", "startOffset": 185, "endOffset": 204}, {"referenceID": 152, "context": "Regression can also be used in control applications, such as morphable airfoils or exosuit control, for example, to approximate Q values in Q-Learning approaches, such as those used in [81,82,156,159,160].", "startOffset": 185, "endOffset": 204}, {"referenceID": 155, "context": "Regression can also be used in control applications, such as morphable airfoils or exosuit control, for example, to approximate Q values in Q-Learning approaches, such as those used in [81,82,156,159,160].", "startOffset": 185, "endOffset": 204}, {"referenceID": 156, "context": "Regression can also be used in control applications, such as morphable airfoils or exosuit control, for example, to approximate Q values in Q-Learning approaches, such as those used in [81,82,156,159,160].", "startOffset": 185, "endOffset": 204}, {"referenceID": 25, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 26, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 30, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 33, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 44, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 80, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 87, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 88, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 93, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 109, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 136, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 138, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 143, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 145, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 157, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 158, "context": "Artifical neural networks are common approaches to perform classification and regression in the literature cited [28,29,33,36,48,84,91,92,97,113,140,142,147, 149,161,162].", "startOffset": 113, "endOffset": 170}, {"referenceID": 128, "context": "Training involves minimizing some cost function with respect to the connection weights and a set of training examples, typically using backpropagation [132, 166].", "startOffset": 151, "endOffset": 161}, {"referenceID": 162, "context": "Training involves minimizing some cost function with respect to the connection weights and a set of training examples, typically using backpropagation [132, 166].", "startOffset": 151, "endOffset": 161}, {"referenceID": 47, "context": "Long Short Term Memory (LSTM) [51] components are specifically useful for situations where there is a long time delay between input to the network and the corresponding effect on the output, where simple recurrent connections could not learn a relationship with such a large time delay [50].", "startOffset": 30, "endOffset": 34}, {"referenceID": 46, "context": "Long Short Term Memory (LSTM) [51] components are specifically useful for situations where there is a long time delay between input to the network and the corresponding effect on the output, where simple recurrent connections could not learn a relationship with such a large time delay [50].", "startOffset": 286, "endOffset": 290}, {"referenceID": 81, "context": "Convolutional layers in neural networks utilize a weight sharing scheme to allow a network to learn local features which are invariant to translation and scaling, and have been shown to be especially useful for image recognition [85].", "startOffset": 229, "endOffset": 233}, {"referenceID": 112, "context": "Despite the potential to automatically learn features of interest, there has only been a few investigations in gait recognition to utilize this approach [116,175,178].", "startOffset": 153, "endOffset": 166}, {"referenceID": 171, "context": "Despite the potential to automatically learn features of interest, there has only been a few investigations in gait recognition to utilize this approach [116,175,178].", "startOffset": 153, "endOffset": 166}, {"referenceID": 174, "context": "Despite the potential to automatically learn features of interest, there has only been a few investigations in gait recognition to utilize this approach [116,175,178].", "startOffset": 153, "endOffset": 166}, {"referenceID": 57, "context": "Because of the nonlinearity of the architecture, autoencoders with a single hidden layer have been shown to provide superior reconstruction of the input signal, when compared with principle components analysis (PCA) [61].", "startOffset": 216, "endOffset": 220}, {"referenceID": 52, "context": "is useful to reduce the dimensionality of observations for dynamic Bayesian networks and HMMs, making learning more feasible [56].", "startOffset": 125, "endOffset": 129}, {"referenceID": 11, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 61, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 62, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 63, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 86, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 98, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 143, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 147, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 165, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 166, "context": "Like neural networks, Support Vector Machines (SVMs) have been extensively used for classification and regression tasks in the literature cited [13,65\u201367,90,102,147,151,169,170].", "startOffset": 144, "endOffset": 177}, {"referenceID": 141, "context": "Regression can be performed by constructing a support vector regression (SVR) machine; the problem formulation is modified to minimize the distance between training examples and the optimal hyperplane [145]; in essence, the goal is simply to attempt to keep the training data points within the bounds of the margins, as opposed to outside of the margins.", "startOffset": 201, "endOffset": 206}, {"referenceID": 98, "context": "One approach specifically well suited to spatially-dependent classification is SVM-based geometric probabilistic decision trees (SVM-GPDT) [102].", "startOffset": 139, "endOffset": 144}, {"referenceID": 98, "context": "Figure 3: Division of a structure and associated SVM-GPDT classifier, as used in [102].", "startOffset": 81, "endOffset": 86}, {"referenceID": 72, "context": "Graphical models are used to describe, learn and perform inference over a multivariate probability distribution [76].", "startOffset": 112, "endOffset": 116}, {"referenceID": 65, "context": "The simplicity of these models have made them very attractive for classification tasks, and has been used in several investigations as simple classification models [69,88,93,126].", "startOffset": 164, "endOffset": 178}, {"referenceID": 84, "context": "The simplicity of these models have made them very attractive for classification tasks, and has been used in several investigations as simple classification models [69,88,93,126].", "startOffset": 164, "endOffset": 178}, {"referenceID": 89, "context": "The simplicity of these models have made them very attractive for classification tasks, and has been used in several investigations as simple classification models [69,88,93,126].", "startOffset": 164, "endOffset": 178}, {"referenceID": 122, "context": "The simplicity of these models have made them very attractive for classification tasks, and has been used in several investigations as simple classification models [69,88,93,126].", "startOffset": 164, "endOffset": 178}, {"referenceID": 132, "context": "Mixtures models are probabilistic models for representing the distribution of data [136].", "startOffset": 83, "endOffset": 88}, {"referenceID": 1, "context": "Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3,93], or used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.", "startOffset": 164, "endOffset": 170}, {"referenceID": 89, "context": "Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3,93], or used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.", "startOffset": 164, "endOffset": 170}, {"referenceID": 142, "context": "Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3,93], or used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.", "startOffset": 212, "endOffset": 221}, {"referenceID": 167, "context": "Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3,93], or used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.", "startOffset": 212, "endOffset": 221}, {"referenceID": 132, "context": "cal models which are useful for modeling sequential or temporal data [136].", "startOffset": 69, "endOffset": 74}, {"referenceID": 148, "context": "Hidden Markov models (HMMs), which have been used for gait recognition [152] and recognition of affective touch [56], are a special case of DBNs which consist of a discrete, hidden state variable and observations conditioned on the current hidden state [124].", "startOffset": 71, "endOffset": 76}, {"referenceID": 52, "context": "Hidden Markov models (HMMs), which have been used for gait recognition [152] and recognition of affective touch [56], are a special case of DBNs which consist of a discrete, hidden state variable and observations conditioned on the current hidden state [124].", "startOffset": 112, "endOffset": 116}, {"referenceID": 120, "context": "Hidden Markov models (HMMs), which have been used for gait recognition [152] and recognition of affective touch [56], are a special case of DBNs which consist of a discrete, hidden state variable and observations conditioned on the current hidden state [124].", "startOffset": 253, "endOffset": 258}, {"referenceID": 15, "context": "Simple statistical features, such as mean, standard deviation and higher-order moments, are commonly used, especially for activity recognition [17, 87, 126], and to a lesser extent, impact detection [48, 149].", "startOffset": 143, "endOffset": 156}, {"referenceID": 83, "context": "Simple statistical features, such as mean, standard deviation and higher-order moments, are commonly used, especially for activity recognition [17, 87, 126], and to a lesser extent, impact detection [48, 149].", "startOffset": 143, "endOffset": 156}, {"referenceID": 122, "context": "Simple statistical features, such as mean, standard deviation and higher-order moments, are commonly used, especially for activity recognition [17, 87, 126], and to a lesser extent, impact detection [48, 149].", "startOffset": 143, "endOffset": 156}, {"referenceID": 44, "context": "Simple statistical features, such as mean, standard deviation and higher-order moments, are commonly used, especially for activity recognition [17, 87, 126], and to a lesser extent, impact detection [48, 149].", "startOffset": 199, "endOffset": 208}, {"referenceID": 145, "context": "Simple statistical features, such as mean, standard deviation and higher-order moments, are commonly used, especially for activity recognition [17, 87, 126], and to a lesser extent, impact detection [48, 149].", "startOffset": 199, "endOffset": 208}, {"referenceID": 91, "context": "In the wearable domain, correlation coefficients can be useful for identifying activities where motion involves various body parts possibly working in conjunction, such as the motion of the left and right leg when walking or running [95].", "startOffset": 233, "endOffset": 237}, {"referenceID": 44, "context": "For example, for detecting impacts in aircraft composite panels, the time at the maximum and minimum value of the both the raw signal and the envelope of the signal, as well as the beginning and end of each envelope, is used as features [48, 149].", "startOffset": 237, "endOffset": 246}, {"referenceID": 145, "context": "For example, for detecting impacts in aircraft composite panels, the time at the maximum and minimum value of the both the raw signal and the envelope of the signal, as well as the beginning and end of each envelope, is used as features [48, 149].", "startOffset": 237, "endOffset": 246}, {"referenceID": 15, "context": "In [17], a 319 feature vector is calculated for 1 second accelerometer data, which include of the first four statistical moments (mean, standard deviation, skewness and kurtosis) of each axis, correlation between accelerometer axis, and minmax sums.", "startOffset": 3, "endOffset": 7}, {"referenceID": 122, "context": "Mean, standard deviation and correlation are the primary features used in [126], augmented only by the energy calculated from the frequency components of the signal.", "startOffset": 74, "endOffset": 79}, {"referenceID": 83, "context": "To some extent, time domain components are used in conjunction with other types of features in several studies in the wearable domain [87].", "startOffset": 134, "endOffset": 138}, {"referenceID": 44, "context": "Minimum and maximum values of measured signals have also been used for impact detection [48,149].", "startOffset": 88, "endOffset": 96}, {"referenceID": 145, "context": "Minimum and maximum values of measured signals have also been used for impact detection [48,149].", "startOffset": 88, "endOffset": 96}, {"referenceID": 90, "context": "Frequency domain features are extracted from signals which have undergone a time-frequency transform, such as a Short Time Fourier Transform (STFT) or Discrete Wavelet Transforms (DWT) [94].", "startOffset": 185, "endOffset": 189}, {"referenceID": 91, "context": "Omitting the DC component, the energy of a spectrogram may help assess the intensity of an activity in the wearable domain [95].", "startOffset": 123, "endOffset": 127}, {"referenceID": 44, "context": "Integrating the real and imaginary components separately may also be reasonable in situations where the time delay between multiple sensors can provide useful information, such as in impact detection [48,149].", "startOffset": 200, "endOffset": 208}, {"referenceID": 145, "context": "Integrating the real and imaginary components separately may also be reasonable in situations where the time delay between multiple sensors can provide useful information, such as in impact detection [48,149].", "startOffset": 200, "endOffset": 208}, {"referenceID": 91, "context": "trum of a signal are useful, the DC component of the signal, which can be obtained directly from the STFT, can be useful in the wearable computing domain; the DC components of accelerometer values is helpful for determining static postures in activity recognition [95].", "startOffset": 264, "endOffset": 268}, {"referenceID": 83, "context": "Finally, spectral entropy, which simply calculates the entropy present in the energy of the spectrogram, has found use for distinguishing between cyclic and acyclic activities [87].", "startOffset": 176, "endOffset": 180}, {"referenceID": 27, "context": "Modal features are useful for detecting defects in structures [30, 70].", "startOffset": 62, "endOffset": 70}, {"referenceID": 66, "context": "Modal features are useful for detecting defects in structures [30, 70].", "startOffset": 62, "endOffset": 70}, {"referenceID": 79, "context": "A second common feature in structural health monitoring related to vibration of the structure is transmissibility, due to its sensitivity to changes in the stiffness of a component [83, 105].", "startOffset": 181, "endOffset": 190}, {"referenceID": 101, "context": "A second common feature in structural health monitoring related to vibration of the structure is transmissibility, due to its sensitivity to changes in the stiffness of a component [83, 105].", "startOffset": 181, "endOffset": 190}, {"referenceID": 166, "context": "Transmissibility can be measured using piezoelectric elements [170].", "startOffset": 62, "endOffset": 67}, {"referenceID": 166, "context": "As transmissibility measurements are between multiple measurement points, they provide more information than simply detecting resonant frequencies, and can be useful for localization of defects [170].", "startOffset": 194, "endOffset": 199}, {"referenceID": 166, "context": "These features have been used to detect defects in aircraft wings [170] and truss structure [169].", "startOffset": 66, "endOffset": 71}, {"referenceID": 165, "context": "These features have been used to detect defects in aircraft wings [170] and truss structure [169].", "startOffset": 92, "endOffset": 97}, {"referenceID": 22, "context": "In PCA, an orthonormal transformation is perform which results in signals being linearly mapped to a set of uncorrelated components [25].", "startOffset": 132, "endOffset": 136}, {"referenceID": 143, "context": "In ICA, signals are also mapped to a set of statistically independent components, though the components observe a non-Gaussian distribution [147].", "startOffset": 140, "endOffset": 145}, {"referenceID": 22, "context": "In [25], PCA is used to detect defects in a vibrating plate by", "startOffset": 3, "endOffset": 7}, {"referenceID": 109, "context": "This type of feature has been used extensively in structural health monitoring [113, 146], due to their sensitivity to damage, especially damage which results in nonlinear behavior in the signal, and robustness to environmental variability.", "startOffset": 79, "endOffset": 89}, {"referenceID": 142, "context": "This type of feature has been used extensively in structural health monitoring [113, 146], due to their sensitivity to damage, especially damage which results in nonlinear behavior in the signal, and robustness to environmental variability.", "startOffset": 79, "endOffset": 89}, {"referenceID": 88, "context": "Heel strike force, push-off force and mid-stance force are included in a feature set for novelty detection in [92].", "startOffset": 110, "endOffset": 114}, {"referenceID": 5, "context": "Kinetic features, namely the occurrence of heel strike, are the primary features used for exosuit control [7, 8, 163]\u2013actuation occurs at specific phases of a gait cycle, which are estimated from the frequency of the gait and a time delay from last heel strike.", "startOffset": 106, "endOffset": 117}, {"referenceID": 6, "context": "Kinetic features, namely the occurrence of heel strike, are the primary features used for exosuit control [7, 8, 163]\u2013actuation occurs at specific phases of a gait cycle, which are estimated from the frequency of the gait and a time delay from last heel strike.", "startOffset": 106, "endOffset": 117}, {"referenceID": 159, "context": "Kinetic features, namely the occurrence of heel strike, are the primary features used for exosuit control [7, 8, 163]\u2013actuation occurs at specific phases of a gait cycle, which are estimated from the frequency of the gait and a time delay from last heel strike.", "startOffset": 106, "endOffset": 117}, {"referenceID": 140, "context": "Machine learning approaches, specifically supervised learning, was first proposed as a unified approach to sensor network applications in 2003 [144].", "startOffset": 143, "endOffset": 148}, {"referenceID": 140, "context": "Support vector machines typically follow the suggestions presented in [144], using kernel functions which reflect the limited sensing range of nodes in the network.", "startOffset": 70, "endOffset": 75}, {"referenceID": 107, "context": "A localization scheme is presented in [111], which describes an approach to determining the location of all sensor nodes in a network when the location of only a small subset of base nodes is initially known.", "startOffset": 38, "endOffset": 43}, {"referenceID": 107, "context": "The approach given in [111] assumes that the central station can estimate the range to all base nodes in the network.", "startOffset": 22, "endOffset": 27}, {"referenceID": 154, "context": "One approach which does not rely on this assumption is presented in [158].", "startOffset": 68, "endOffset": 73}, {"referenceID": 98, "context": "An SVM-based decision tree, similar to that in [102], is then trained to predict the location of a node based on the hop count distance to beacon nodes.", "startOffset": 47, "endOffset": 52}, {"referenceID": 41, "context": "A distributed algorithm for performing regression is presented in [45], where regression model consisting of a linear combination of local measurements over a window of time.", "startOffset": 66, "endOffset": 70}, {"referenceID": 40, "context": ", sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].", "startOffset": 68, "endOffset": 72}, {"referenceID": 69, "context": ", sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].", "startOffset": 139, "endOffset": 143}, {"referenceID": 67, "context": ", sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].", "startOffset": 239, "endOffset": 246}, {"referenceID": 68, "context": ", sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].", "startOffset": 239, "endOffset": 246}, {"referenceID": 40, "context": ", sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].", "startOffset": 291, "endOffset": 298}, {"referenceID": 68, "context": ", sensor measurements only consider events within a certain radius) [44], by locally summarizing training data to a minimal representation [73], by performing classification / regression on a subset of measurements in a local neighborhood [71,72], and by implementing convergence algorithms [44,72].", "startOffset": 291, "endOffset": 298}, {"referenceID": 40, "context": "In [44], algorithms for training and evaluating a support vector regression model is realized by utilizing kernels with finite support and a gradient-based training algorithm.", "startOffset": 3, "endOffset": 7}, {"referenceID": 69, "context": "In [73], a fully distributed algorithm for training an SVM is described which leverages a geometric interpretation of SVMs to minimize memory and communication requirements, and trains a distributed SVM using a gossip protocol.", "startOffset": 3, "endOffset": 7}, {"referenceID": 68, "context": "A method for building an ensemble of SVR predictors for target localization using acoustic data is given in [72].", "startOffset": 108, "endOffset": 112}, {"referenceID": 67, "context": "In a similar manner to the ensemble SVR approach, a modified support vector domain description (SVDD) is created used in conjunction with a local classification strategy to track a target in an environment [71].", "startOffset": 206, "endOffset": 210}, {"referenceID": 40, "context": "For instance, nodes share a full set of training data in [44], whereas only a set of points describing convex hulls of training data are shared in [73] In [34], two gossip protocols for SVM training were developed and compared: the minimum selective gossip algorithm (MSG-SVM), which attempts to minimize the amount of data diffused in the network, and the sufficient selective gossip algorithm (SSG-SVM), which attempts to maximize the optimality of the resulting trained SVM (i.", "startOffset": 57, "endOffset": 61}, {"referenceID": 69, "context": "For instance, nodes share a full set of training data in [44], whereas only a set of points describing convex hulls of training data are shared in [73] In [34], two gossip protocols for SVM training were developed and compared: the minimum selective gossip algorithm (MSG-SVM), which attempts to minimize the amount of data diffused in the network, and the sufficient selective gossip algorithm (SSG-SVM), which attempts to maximize the optimality of the resulting trained SVM (i.", "startOffset": 147, "endOffset": 151}, {"referenceID": 31, "context": "For instance, nodes share a full set of training data in [44], whereas only a set of points describing convex hulls of training data are shared in [73] In [34], two gossip protocols for SVM training were developed and compared: the minimum selective gossip algorithm (MSG-SVM), which attempts to minimize the amount of data diffused in the network, and the sufficient selective gossip algorithm (SSG-SVM), which attempts to maximize the optimality of the resulting trained SVM (i.", "startOffset": 155, "endOffset": 159}, {"referenceID": 69, "context": "In this algorithm, neighboring nodes exchange the points describing the convex hull of each training set, similar to the approach in [73].", "startOffset": 133, "endOffset": 137}, {"referenceID": 108, "context": "A distributed EM algorithm is developed and analyzed in [112].", "startOffset": 56, "endOffset": 61}, {"referenceID": 75, "context": "Newscast EM is a distributed EM algorithm which uses a gossip-based protocol to share mixture parameters and converge to a global solution [79].", "startOffset": 139, "endOffset": 143}, {"referenceID": 32, "context": "A consensus-based approach to distributed EM is presented in [35].", "startOffset": 61, "endOffset": 65}, {"referenceID": 108, "context": "A distributed EM algorithm similar to the approach in [112] is presented in [43].", "startOffset": 54, "endOffset": 59}, {"referenceID": 39, "context": "A distributed EM algorithm similar to the approach in [112] is presented in [43].", "startOffset": 76, "endOffset": 80}, {"referenceID": 108, "context": "Rather than communicating sufficient statistics throughout the network at each step, as in [112], each node maintains an estimate of global summary quantities, xi,k.", "startOffset": 91, "endOffset": 96}, {"referenceID": 139, "context": "Distributed target tracking using is presented in [143].", "startOffset": 50, "endOffset": 55}, {"referenceID": 113, "context": "A similar belief propagation algorithm is described in [117,118] for performing distributed inference of latent environmental variables in a sensor network.", "startOffset": 55, "endOffset": 64}, {"referenceID": 114, "context": "A similar belief propagation algorithm is described in [117,118] for performing distributed inference of latent environmental variables in a sensor network.", "startOffset": 55, "endOffset": 64}, {"referenceID": 139, "context": "The junction tree formation algorithm allows each node to maintain a clique of variables for local inference, as in [143].", "startOffset": 116, "endOffset": 121}, {"referenceID": 20, "context": "A simpler loopy belief propagation algorithm had been described earlier than the junction tree based belief propagation algorithm [23].", "startOffset": 130, "endOffset": 134}, {"referenceID": 127, "context": "A multi-stage fault diagnosis system for electronic circuits is presented in [131], which uses a DBN to represent the dynamics of the circuit based on the energy exchange between circuit components.", "startOffset": 77, "endOffset": 82}, {"referenceID": 148, "context": "Consensus-based algorithms for hidden Markov models have also been explored [152], which are more closely aligned with the approaches in Section 3.", "startOffset": 76, "endOffset": 81}, {"referenceID": 148, "context": "In [152], individual sensors calculate the most likely sequence of gait phases using a continuous HMM (modeling observations as a multivariate Gaussian).", "startOffset": 3, "endOffset": 8}, {"referenceID": 95, "context": "Several specific fields have been cited as motivation for robotic materials [99], where robotic materials may extend the potential of the materials of interest in these fields.", "startOffset": 76, "endOffset": 80}, {"referenceID": 50, "context": "In the field of robotics, full-body tactile sensitive skins are of interest, as they provide a rich sensing modality which can augment existing sensors, specifically in safety-critical and highly occluded environments [54].", "startOffset": 218, "endOffset": 222}, {"referenceID": 27, "context": ", oil platforms) infrastructures [30].", "startOffset": 33, "endOffset": 37}, {"referenceID": 164, "context": "A more detailed definition of structural health monitoring defines a hierarchy of the main issues [168]:", "startOffset": 98, "endOffset": 103}, {"referenceID": 175, "context": "Finite element method (FEM) [179] is a powerful and common approach which involves generating a mesh which approximates the structure of interest, approximating the physical response of each element in the mesh, and enforcing continuity of the physical behavior between meshes at their boundary.", "startOffset": 28, "endOffset": 33}, {"referenceID": 176, "context": "Additionally, failure responses under cyclic loading, such as stiffness degradation and crack propagation in composites, can be simulated to provide failure analysis of the structure of interest [180].", "startOffset": 195, "endOffset": 200}, {"referenceID": 26, "context": "For instance, vibrations can be generated in a multi-story building during an earthquake [29,147].", "startOffset": 89, "endOffset": 97}, {"referenceID": 143, "context": "For instance, vibrations can be generated in a multi-story building during an earthquake [29,147].", "startOffset": 89, "endOffset": 97}, {"referenceID": 98, "context": "Piezoelectric transducers have also been used to generate vibrations in composite panels [102].", "startOffset": 89, "endOffset": 94}, {"referenceID": 92, "context": "Structures are also excited by placing them on large shakers [96, 171].", "startOffset": 61, "endOffset": 70}, {"referenceID": 167, "context": "Structures are also excited by placing them on large shakers [96, 171].", "startOffset": 61, "endOffset": 70}, {"referenceID": 166, "context": "As discussed in [170], each of the structural health monitoring tasks maps well to a specific machine learning objective.", "startOffset": 16, "endOffset": 21}, {"referenceID": 29, "context": "The output of an detection model is referred to as a damage indicator [32], whose output is a positive scalar which indicates the likelihood that damage is present.", "startOffset": 70, "endOffset": 74}, {"referenceID": 58, "context": "Simulated benchmark data has been generated using finite element models [62], and have used to train classifiers for damage detection [147].", "startOffset": 72, "endOffset": 76}, {"referenceID": 143, "context": "Simulated benchmark data has been generated using finite element models [62], and have used to train classifiers for damage detection [147].", "startOffset": 134, "endOffset": 139}, {"referenceID": 29, "context": "Variability due to operational or environmental changes can adversely affect underlying measurements used to detect damage [32].", "startOffset": 123, "endOffset": 127}, {"referenceID": 29, "context": "For example, the coefficients of an autoregressive model fit to accelerometer measurements were used to detect cracks in a simulated building during an earthquake, where the load or stiffness of the building is varied [32].", "startOffset": 218, "endOffset": 222}, {"referenceID": 109, "context": "In a similar investigation, bumpers were introduced into a vibrating mass-spring system [113].", "startOffset": 88, "endOffset": 93}, {"referenceID": 168, "context": "In [172], the presence of delamination in composite plates was detected using MSD when a ultrasonic sensor was inline within 20mm of the delamination.", "startOffset": 3, "endOffset": 8}, {"referenceID": 29, "context": "In [32], non-linear defects were introduced into a three-story frame structure; defects could be detected using MSD with an error rate of 4.", "startOffset": 3, "endOffset": 7}, {"referenceID": 167, "context": "MSD, KDE, and autoencoder DIs were compared in [171].", "startOffset": 47, "endOffset": 52}, {"referenceID": 29, "context": "A similar comparison was performed in [32], where defects in a four-story structure were simulated and measured using accelerometers at each floor.", "startOffset": 38, "endOffset": 42}, {"referenceID": 143, "context": "4%, respectively [147].", "startOffset": 17, "endOffset": 22}, {"referenceID": 98, "context": "Finally, damage detection and localization have also been combined into a single classifier, by considering damage location as discrete sections of the structure and incorporating an \u201cundamaged\u201d class [102], as part of a SVM-based geometric probabilistic decision tree (SVMGPDT).", "startOffset": 201, "endOffset": 206}, {"referenceID": 166, "context": "For example, [170] use a classifier to identify which of nine panels are damaged in an aircraft wing.", "startOffset": 13, "endOffset": 18}, {"referenceID": 93, "context": "Such a classification approach was given in [97].", "startOffset": 44, "endOffset": 48}, {"referenceID": 98, "context": "The SVM-GPDT used in [102] uses a probabilistic binary tree to determine the location of a defect in a carbon FRP panel, using three piezoelectric transducers (one to emit and two to detect vibrations).", "startOffset": 21, "endOffset": 26}, {"referenceID": 44, "context": "Impact detection is naturally framed as a localization problem, either through triangulation or machine learning techniques [48].", "startOffset": 124, "endOffset": 128}, {"referenceID": 44, "context": "In [48], a neural network was trained to determine the location of an impact on aircraft composite panels using time-domain features (minimum and maximum values, time of minimum and maximum values, beginning and end of signal detected, etc.", "startOffset": 3, "endOffset": 7}, {"referenceID": 145, "context": "5% of the area using magnitude of maximum response [149].", "startOffset": 51, "endOffset": 56}, {"referenceID": 80, "context": "76% using a regression approach [84].", "startOffset": 32, "endOffset": 36}, {"referenceID": 138, "context": "In [142], two sensors were used to localize impacts on a simulated composite panel using a neural network.", "startOffset": 3, "endOffset": 8}, {"referenceID": 44, "context": "In addition to the features used in [48], the authors investigated using time of arrival of the signal to each sensor, and information from the discrete wavelet transform (DWT) of the signal, with a localization error was 0.", "startOffset": 36, "endOffset": 40}, {"referenceID": 166, "context": "In [170], neural networks were used to determine the percentage of a panel missing.", "startOffset": 3, "endOffset": 8}, {"referenceID": 26, "context": "For instance, in [29], three neural networks were trained to analyze a simulated building structure using four accelerometers.", "startOffset": 17, "endOffset": 21}, {"referenceID": 98, "context": "The SVM-GPDT approach used in [102] incorporates a simple binary SVM classifier to identify which of two damage severities is present in the FRP panel, with an accuracy of 99.", "startOffset": 30, "endOffset": 35}, {"referenceID": 136, "context": ", number of remaining load cycles) and stiffness reduction in the panel [140].", "startOffset": 72, "endOffset": 77}, {"referenceID": 161, "context": "Morphing aircraft describe a wide range of approaches to adaptable aircraft components [165].", "startOffset": 87, "endOffset": 92}, {"referenceID": 161, "context": "Using such active elements can allow for aircraft that attenuate dynamic loads, suppress flutter and vibration, perform noise cancellation inside the aircraft, and provide adaptive stiffness control [165].", "startOffset": 199, "endOffset": 204}, {"referenceID": 163, "context": "Large scale research efforts into morphing aircraft include the NASA Langley Morphing Aircraft Project [167] and the DARPA Morphing Aircraft Structures Program [164].", "startOffset": 103, "endOffset": 108}, {"referenceID": 160, "context": "Large scale research efforts into morphing aircraft include the NASA Langley Morphing Aircraft Project [167] and the DARPA Morphing Aircraft Structures Program [164].", "startOffset": 160, "endOffset": 165}, {"referenceID": 18, "context": "This latter research effort has resulted in a push for wings capable of altering its shape in a drastic and continuous manner, similar to the configuration capabilities of bat and bird wings [20,119].", "startOffset": 191, "endOffset": 199}, {"referenceID": 115, "context": "This latter research effort has resulted in a push for wings capable of altering its shape in a drastic and continuous manner, similar to the configuration capabilities of bat and bird wings [20,119].", "startOffset": 191, "endOffset": 199}, {"referenceID": 10, "context": "Shape memory alloys (SMA) are used extensively as a means of actuation in morphable wings [12, 134].", "startOffset": 90, "endOffset": 99}, {"referenceID": 130, "context": "Shape memory alloys (SMA) are used extensively as a means of actuation in morphable wings [12, 134].", "startOffset": 90, "endOffset": 99}, {"referenceID": 10, "context": "SMA materials exhibit two types of effects based on temperature and load, namely a super-elastic effect and a shape memory effect [12].", "startOffset": 130, "endOffset": 134}, {"referenceID": 42, "context": "Additionally, the temperature-strain relationship of the material demonstrates hysteresis as temperature is varied, making control difficult [46].", "startOffset": 141, "endOffset": 145}, {"referenceID": 71, "context": "To handle this complexity, some recent studies have involved determining an optimal way of controlling the material, including using the SARSA algorithm to approximate a state-action value function based on a K nearest neighbor (KNN) approach [75], and", "startOffset": 243, "endOffset": 247}, {"referenceID": 156, "context": "Figure 5: Architecture merging an adaptive model with reinforcement learning for controlling morphable aircraft surfaces, as used in [160]", "startOffset": 133, "endOffset": 138}, {"referenceID": 38, "context": "a neuro-fuzzy controller to control the shape of a flexible wing skin [42].", "startOffset": 70, "endOffset": 74}, {"referenceID": 23, "context": "Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.", "startOffset": 126, "endOffset": 145}, {"referenceID": 152, "context": "Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.", "startOffset": 126, "endOffset": 145}, {"referenceID": 155, "context": "Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.", "startOffset": 126, "endOffset": 145}, {"referenceID": 156, "context": "Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.", "startOffset": 126, "endOffset": 145}, {"referenceID": 102, "context": "Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.", "startOffset": 176, "endOffset": 186}, {"referenceID": 103, "context": "Extending this, reinforcement learning has been used to control the shape of an aerodynamic surface built using SMA materials [26, 156, 159, 160], or motion of a flapping wing [106, 107] with SMA actuators.", "startOffset": 176, "endOffset": 186}, {"referenceID": 152, "context": "Initial explorations involved simple geometric shapes [156, 159, 160], with more recent results determining policies for airfoil crosssections [81, 82].", "startOffset": 54, "endOffset": 69}, {"referenceID": 155, "context": "Initial explorations involved simple geometric shapes [156, 159, 160], with more recent results determining policies for airfoil crosssections [81, 82].", "startOffset": 54, "endOffset": 69}, {"referenceID": 156, "context": "Initial explorations involved simple geometric shapes [156, 159, 160], with more recent results determining policies for airfoil crosssections [81, 82].", "startOffset": 54, "endOffset": 69}, {"referenceID": 77, "context": "Initial explorations involved simple geometric shapes [156, 159, 160], with more recent results determining policies for airfoil crosssections [81, 82].", "startOffset": 143, "endOffset": 151}, {"referenceID": 78, "context": "Initial explorations involved simple geometric shapes [156, 159, 160], with more recent results determining policies for airfoil crosssections [81, 82].", "startOffset": 143, "endOffset": 151}, {"referenceID": 23, "context": "Preliminary explorations controlled the shape of a constant-volume ellipsoid [26,156] or block [160], using an arbitrary functions to describe the behavior of the shape with respect to input voltage, and an arbitrary function for the ideal shape for a particular flight condition.", "startOffset": 77, "endOffset": 85}, {"referenceID": 152, "context": "Preliminary explorations controlled the shape of a constant-volume ellipsoid [26,156] or block [160], using an arbitrary functions to describe the behavior of the shape with respect to input voltage, and an arbitrary function for the ideal shape for a particular flight condition.", "startOffset": 77, "endOffset": 85}, {"referenceID": 156, "context": "Preliminary explorations controlled the shape of a constant-volume ellipsoid [26,156] or block [160], using an arbitrary functions to describe the behavior of the shape with respect to input voltage, and an arbitrary function for the ideal shape for a particular flight condition.", "startOffset": 95, "endOffset": 100}, {"referenceID": 152, "context": "Initially, a k-nearest neighbor (KNN) approach interpolates the value of the Q function from the interpolation of the K nearest state-action pairs [156], though this suffered when interpolating in regions which have not seen training examples.", "startOffset": 147, "endOffset": 152}, {"referenceID": 156, "context": ", tile coding) was used with the shape changing block [160].", "startOffset": 54, "endOffset": 59}, {"referenceID": 23, "context": "A Galerkin-based Sequential Function Approximation (SFA) is used in [26,159], which uses the Petrov-Galerkin approach to select the coefficients for a linear combination of radial basis functions.", "startOffset": 68, "endOffset": 76}, {"referenceID": 155, "context": "A Galerkin-based Sequential Function Approximation (SFA) is used in [26,159], which uses the Petrov-Galerkin approach to select the coefficients for a linear combination of radial basis functions.", "startOffset": 68, "endOffset": 76}, {"referenceID": 77, "context": "The above approach has been extended to control the cross-sectional shape of an airfoil [81, 82].", "startOffset": 88, "endOffset": 96}, {"referenceID": 78, "context": "The above approach has been extended to control the cross-sectional shape of an airfoil [81, 82].", "startOffset": 88, "endOffset": 96}, {"referenceID": 152, "context": "As in [156], the valueaction function is approximated using a KNN approach.", "startOffset": 6, "endOffset": 11}, {"referenceID": 102, "context": "In addition to controlling the shape of an airfoil, Q-Learning has been used to learn the trajectory of flapping wings for micro aerial vehicles (MAVs) [106,107].", "startOffset": 152, "endOffset": 161}, {"referenceID": 103, "context": "In addition to controlling the shape of an airfoil, Q-Learning has been used to learn the trajectory of flapping wings for micro aerial vehicles (MAVs) [106,107].", "startOffset": 152, "endOffset": 161}, {"referenceID": 102, "context": "Simulation results [106] demonstrate that lift force and the frequency of jerk (which could damage wing joints) can be jointly optimized using Q-Learning.", "startOffset": 19, "endOffset": 24}, {"referenceID": 103, "context": "A follow-up experiment finalized the trajectory of a physical wing using Q-Learning after a trajectory was formed using the simulation [107].", "startOffset": 135, "endOffset": 140}, {"referenceID": 122, "context": "Accelerometers are typically used as sensors [126], as these are typically less expensive than other appropriate sensors and are present in many consumer electronic devices (e.", "startOffset": 45, "endOffset": 50}, {"referenceID": 88, "context": "Anomalous gaits, such as freezing gait, are present in individuals with diseases such as Parkinson\u2019s disease, or after a stroke [92].", "startOffset": 128, "endOffset": 132}, {"referenceID": 7, "context": "Finally, soft, compliant exosuits show potential to assist the wearer with walking, with potential military and rehabilitation applications [9, 21].", "startOffset": 140, "endOffset": 147}, {"referenceID": 19, "context": "Finally, soft, compliant exosuits show potential to assist the wearer with walking, with potential military and rehabilitation applications [9, 21].", "startOffset": 140, "endOffset": 147}, {"referenceID": 133, "context": "), such as in [137], a single sensor approach is much more pragmatic for the wearer, especially if there are no requirements on sensor positioning [87].", "startOffset": 14, "endOffset": 19}, {"referenceID": 83, "context": "), such as in [137], a single sensor approach is much more pragmatic for the wearer, especially if there are no requirements on sensor positioning [87].", "startOffset": 147, "endOffset": 151}, {"referenceID": 1, "context": "In [3], features were extracted from a single accelerometer, namely, separating gravity components, and calculating shifted delta coefficients (SDC, 15 features which estimate time derivative of the signal) and signal magnitude area (SMA, which differentiate between active and restful activities) from the activity, for a total of 25 features.", "startOffset": 3, "endOffset": 6}, {"referenceID": 15, "context": "Random forests were used to classify five activities from one second windows of accelerometer data [17], with an accuracy ranging from 88.", "startOffset": 99, "endOffset": 103}, {"referenceID": 83, "context": "Five activities were classified using a Naive Bayes classifier and decision tree classifiers in [87] using time, frequency and orientation features, with accuracies ranging from 49.", "startOffset": 96, "endOffset": 100}, {"referenceID": 133, "context": "For instance, the Opportunity dataset [137] provides IMU and/or accelerometer measurements at the upper and lower arms and legs, feet, knees, wrists, hands, hip and back, with the goal of providing a dataset to investigate classifying modes of locomotion (standing, sitting, walking and lying), gestures (e.", "startOffset": 38, "endOffset": 43}, {"referenceID": 91, "context": "In [95], five biaxial accelerometers were used to classify seven low-level activities (e.", "startOffset": 3, "endOffset": 7}, {"referenceID": 90, "context": "); incorporating a cHMM over several frames as a second phase is shown to improve classification results of these approaches [94].", "startOffset": 125, "endOffset": 129}, {"referenceID": 117, "context": "In [121], a deep belief network (DBN) was trained by stacking four layers of RBMs to learn features from a 64-sample window of sensor data for activity recognition.", "startOffset": 3, "endOffset": 8}, {"referenceID": 174, "context": "In [178], the authors note that the RBM approach does not capture local dependencies in the time series signal.", "startOffset": 3, "endOffset": 8}, {"referenceID": 117, "context": "02% over the results obtained in [121], which, the authors argue, is due to the invariance to location of scale of learned features.", "startOffset": 33, "endOffset": 38}, {"referenceID": 171, "context": "Similarly, in [175], the authors construct a CNN consisting of two convolutional / max pooling layers (50 filters of 5 units, max pool size of 2 units, 40 filters of 9 units, max pool size of 2 units), followed by a convolutional layer with 20 filters of 3 units, a unification layer and softmax output layer.", "startOffset": 14, "endOffset": 19}, {"referenceID": 117, "context": "0% for two datasets, both of which are an improvement over the results presented in [121].", "startOffset": 84, "endOffset": 89}, {"referenceID": 2, "context": "In [4], the authors build a DBN as observations for a HMM, in order to capture the temporal aspect of activities.", "startOffset": 3, "endOffset": 6}, {"referenceID": 112, "context": "Finally, in [116], the authors build a activity classifier by combining a CNN with an LSTM.", "startOffset": 12, "endOffset": 17}, {"referenceID": 122, "context": "In [126], classification accuracy is in the range of 92% \u2013 99% when training and test data were gathered from the same subject, however, this drops to 46% \u2013 73% when the test data is gathered from a different subject;", "startOffset": 3, "endOffset": 8}, {"referenceID": 118, "context": "Wearable devices have also been recently proposed to detect gait anomalies due to hemiplegia, Parkinson\u2019s disease, pain in the legs or back, or other related issues, as well as detecting falls in patients [122].", "startOffset": 205, "endOffset": 210}, {"referenceID": 88, "context": "In [92], neural networks were trained to discriminate the walking gait of Parkinson\u2019s patients and a healthy control group.", "startOffset": 3, "endOffset": 7}, {"referenceID": 86, "context": "18% was achieved using SVMs [90].", "startOffset": 28, "endOffset": 32}, {"referenceID": 85, "context": "Principle components analysis was used to enhance the three sets of features in [89], resulting in improved classification rate for neural network, SVM and N\u00e4\u0131ve Bayes classifiers.", "startOffset": 80, "endOffset": 84}, {"referenceID": 87, "context": "63% [91].", "startOffset": 4, "endOffset": 8}, {"referenceID": 33, "context": "Neural networks were also used in [36] to assess the risk of a fall, using data collected from pressure sensors embedded in the sole of a shoe.", "startOffset": 34, "endOffset": 38}, {"referenceID": 17, "context": "Fall-related injuries are common in the elderly population [19].", "startOffset": 59, "endOffset": 63}, {"referenceID": 17, "context": "Threshold-based detection algorithms, using accelerometer measurements, have been shown useful [19, 148] for detecting falls.", "startOffset": 95, "endOffset": 104}, {"referenceID": 144, "context": "Threshold-based detection algorithms, using accelerometer measurements, have been shown useful [19, 148] for detecting falls.", "startOffset": 95, "endOffset": 104}, {"referenceID": 157, "context": "4%, while being able to avoiding mis-identifying normal, high-acceleration activities as falls [161].", "startOffset": 95, "endOffset": 100}, {"referenceID": 25, "context": "In [28], the cross-correlation of a gait signal, measured from pressure sensors located at the sole of the foot, with a reference signal was used to extract a set of 15 features.", "startOffset": 3, "endOffset": 7}, {"referenceID": 5, "context": "Exosuits have been developed to assist gait by applying force during specific phases of walking gait [7, 8, 163], as medical assistance devices [52], or rehabilitation assistance [9].", "startOffset": 101, "endOffset": 112}, {"referenceID": 6, "context": "Exosuits have been developed to assist gait by applying force during specific phases of walking gait [7, 8, 163], as medical assistance devices [52], or rehabilitation assistance [9].", "startOffset": 101, "endOffset": 112}, {"referenceID": 159, "context": "Exosuits have been developed to assist gait by applying force during specific phases of walking gait [7, 8, 163], as medical assistance devices [52], or rehabilitation assistance [9].", "startOffset": 101, "endOffset": 112}, {"referenceID": 48, "context": "Exosuits have been developed to assist gait by applying force during specific phases of walking gait [7, 8, 163], as medical assistance devices [52], or rehabilitation assistance [9].", "startOffset": 144, "endOffset": 148}, {"referenceID": 7, "context": "Exosuits have been developed to assist gait by applying force during specific phases of walking gait [7, 8, 163], as medical assistance devices [52], or rehabilitation assistance [9].", "startOffset": 179, "endOffset": 182}, {"referenceID": 19, "context": "While such suits can assist the wearer a carrying large loads, they have not been shown to improve performance, and actually result in the wearer expending more energy to walk [21].", "startOffset": 176, "endOffset": 180}, {"referenceID": 6, "context": "For instance, a cable system attached to a thigh brace and driven by motors located in a backpack can provide a rotational moment about the hip after the heel strike during walking gait, and can contribute up to 30% of the biological moment for walking [8].", "startOffset": 253, "endOffset": 256}, {"referenceID": 5, "context": "An extension of this system also provided additional actuation to provide a rotation moment about the ankle, resulting in torques of 21% and 19% of the biological moments about the ankle and hip, respectively [7].", "startOffset": 209, "endOffset": 212}, {"referenceID": 159, "context": "Using pneumatically driven McKibben actuators, a lower-body exosuit which can provide plantarflexion and dorsiflexion of the ankle and flexion and extension of the knee and hip is described in [163].", "startOffset": 193, "endOffset": 198}, {"referenceID": 6, "context": "For example, in [8], actuation is performed during predefined phases of an assumed constant walking gait, which is estimated by timing of heel strike measured by a foot switch.", "startOffset": 16, "endOffset": 19}, {"referenceID": 159, "context": "Similarly, foot switches were used exclusively in [163].", "startOffset": 50, "endOffset": 55}, {"referenceID": 5, "context": "Detecting the peak angular velocity of a gyroscope was added in [7].", "startOffset": 64, "endOffset": 67}, {"referenceID": 73, "context": "In [77], control signals for a soft robotic ankle were generated from the wearer\u2019s soleus electromyography (EMG) signals; a smoothed envelope of this signal is used as the actuation signal for the pneumatic actuator.", "startOffset": 3, "endOffset": 7}, {"referenceID": 173, "context": "While control is generally a weakness in existing exoskeleton and exosuits, one approach suggested as promising is the adaptive neural oscillators [177].", "startOffset": 147, "endOffset": 152}, {"referenceID": 24, "context": "Adaptive neural oscillators are recurrent neural networks, with recurrent feedback from the output to the input [27].", "startOffset": 112, "endOffset": 116}, {"referenceID": 126, "context": "In [130], an artificial oscillator is used to control a compliant assistive elbow orthosis.", "startOffset": 3, "endOffset": 8}, {"referenceID": 124, "context": "This approach has been extended to learn the angular trajectories of a wearer\u2019s hips, and provide assisting torques during walking at various speeds [128, 129], with the exosuit providing up to an average of 26.", "startOffset": 149, "endOffset": 159}, {"referenceID": 125, "context": "This approach has been extended to learn the angular trajectories of a wearer\u2019s hips, and provide assisting torques during walking at various speeds [128, 129], with the exosuit providing up to an average of 26.", "startOffset": 149, "endOffset": 159}, {"referenceID": 36, "context": "Adaptive oscillators have also been used for high-level control of an active hip orthosis, in conjunction with a low-level PID controller for torque regulation [39].", "startOffset": 160, "endOffset": 164}, {"referenceID": 21, "context": "Though highdensity tactile sensors have been in use with robotic fingertips and hands for several decades, full body tactile sensitive arrays for artificial skins have only recently been explored [24].", "startOffset": 196, "endOffset": 200}, {"referenceID": 4, "context": ", a factory), where a robot can easily plan and execute tasks due to high certainty about the environment, to more human environments: the presence of humans or other actors, dynamic variations in the world, limited sensing, large variation of objects types and positions, and compliance and safety constraints require a much higher level of sensing and autonomous behavior [6, 68].", "startOffset": 374, "endOffset": 381}, {"referenceID": 64, "context": ", a factory), where a robot can easily plan and execute tasks due to high certainty about the environment, to more human environments: the presence of humans or other actors, dynamic variations in the world, limited sensing, large variation of objects types and positions, and compliance and safety constraints require a much higher level of sensing and autonomous behavior [6, 68].", "startOffset": 374, "endOffset": 381}, {"referenceID": 99, "context": "Several full-body, modular tactile sensitive skins have been developed in the last several years [103,115,139,154], which are designed to conform to arbitrary robotic surfaces and perform sensing, preprocessing and routing of data to a sink computer.", "startOffset": 97, "endOffset": 114}, {"referenceID": 111, "context": "Several full-body, modular tactile sensitive skins have been developed in the last several years [103,115,139,154], which are designed to conform to arbitrary robotic surfaces and perform sensing, preprocessing and routing of data to a sink computer.", "startOffset": 97, "endOffset": 114}, {"referenceID": 135, "context": "Several full-body, modular tactile sensitive skins have been developed in the last several years [103,115,139,154], which are designed to conform to arbitrary robotic surfaces and perform sensing, preprocessing and routing of data to a sink computer.", "startOffset": 97, "endOffset": 114}, {"referenceID": 150, "context": "Several full-body, modular tactile sensitive skins have been developed in the last several years [103,115,139,154], which are designed to conform to arbitrary robotic surfaces and perform sensing, preprocessing and routing of data to a sink computer.", "startOffset": 97, "endOffset": 114}, {"referenceID": 100, "context": "These systems allow for using tactile feedback for manipulation of large objects with humanoid robots [104,114].", "startOffset": 102, "endOffset": 111}, {"referenceID": 110, "context": "These systems allow for using tactile feedback for manipulation of large objects with humanoid robots [104,114].", "startOffset": 102, "endOffset": 111}, {"referenceID": 99, "context": "However, some initial investigations into full-body manipulation of large objects have included attempting to determine surface texture and weight from Each arms of a NAO robot was covered with seven Hex-o-Skin cells [103] to identify five different surface textures (cardboard, glass, sponge, bubble plastic and sand paper) on objects with two separate weights (500g and 1,500g) [67].", "startOffset": 217, "endOffset": 222}, {"referenceID": 63, "context": "However, some initial investigations into full-body manipulation of large objects have included attempting to determine surface texture and weight from Each arms of a NAO robot was covered with seven Hex-o-Skin cells [103] to identify five different surface textures (cardboard, glass, sponge, bubble plastic and sand paper) on objects with two separate weights (500g and 1,500g) [67].", "startOffset": 380, "endOffset": 384}, {"referenceID": 3, "context": "Performing touch-based affective sensing, such as identifying the toucher\u2019s emotional state, degree of expressiveness of touch, and/or social context of interaction, has found application in social and therapeutic robots [5].", "startOffset": 221, "endOffset": 224}, {"referenceID": 149, "context": "Specific touch-sensitive robots include Robovie-IIS, a humanoid robot utilizing full-body tactile sensor elements [153], Huggable, a robot capable of", "startOffset": 114, "endOffset": 119}, {"referenceID": 146, "context": "detecting temperature, force, light touch and kinesthetics [150], and the Haptic Creature [33], which uses pressure sensitive fabric and conductive and stroke sensitive fur.", "startOffset": 59, "endOffset": 64}, {"referenceID": 30, "context": "detecting temperature, force, light touch and kinesthetics [150], and the Haptic Creature [33], which uses pressure sensitive fabric and conductive and stroke sensitive fur.", "startOffset": 90, "endOffset": 94}, {"referenceID": 62, "context": "Affective touch has also been investigated on humanoid robots, using full-body sensor arrays [66].", "startOffset": 93, "endOffset": 97}, {"referenceID": 105, "context": "One of the first investigations in recognizing affective touch involved identifying touch using a 44 x 44 element pressure sensitive interface [109].", "startOffset": 143, "endOffset": 148}, {"referenceID": 149, "context": "In [153], clusters were generated from a set of haptic interactions, using the output of tactile sensors at each time step during an interaction as a point in an individual cluster.", "startOffset": 3, "endOffset": 8}, {"referenceID": 70, "context": "A semantic description tree was developed for 31 possible contact verbs was developed in [74,78], classifying the actions based on contact time, incidence of a repeat, force, purpose and object used to perform the touch.", "startOffset": 89, "endOffset": 96}, {"referenceID": 74, "context": "A semantic description tree was developed for 31 possible contact verbs was developed in [74,78], classifying the actions based on contact time, incidence of a repeat, force, purpose and object used to perform the touch.", "startOffset": 89, "endOffset": 96}, {"referenceID": 170, "context": "The same features were used in [174], and were able to identify three touch patterns in a robotic pet using three pressure sensors.", "startOffset": 31, "endOffset": 36}, {"referenceID": 153, "context": "In [157], a pressure sensitive fabric skin was constructed and placed upon an artificial arm.", "startOffset": 3, "endOffset": 8}, {"referenceID": 99, "context": "More recently, Hex-o-Skin [103] was applied to the chest and back of a NAO robot for identifying nine touch modalities [66].", "startOffset": 26, "endOffset": 31}, {"referenceID": 62, "context": "More recently, Hex-o-Skin [103] was applied to the chest and back of a NAO robot for identifying nine touch modalities [66].", "startOffset": 119, "endOffset": 123}, {"referenceID": 63, "context": "Hjorth parameters and correlation coefficients were calculated from accelerometer data, collected over the duration of a gesture, and averaged over cells which were contacted, similar to [67].", "startOffset": 187, "endOffset": 191}, {"referenceID": 74, "context": "These results demonstrate the robustness of the features calculated to touch location and robot motion: when compared with results using features adapted from [78, 109, 157], results were significantly higher, with reported accuracies of 58.", "startOffset": 159, "endOffset": 173}, {"referenceID": 105, "context": "These results demonstrate the robustness of the features calculated to touch location and robot motion: when compared with results using features adapted from [78, 109, 157], results were significantly higher, with reported accuracies of 58.", "startOffset": 159, "endOffset": 173}, {"referenceID": 153, "context": "These results demonstrate the robustness of the features calculated to touch location and robot motion: when compared with results using features adapted from [78, 109, 157], results were significantly higher, with reported accuracies of 58.", "startOffset": 159, "endOffset": 173}, {"referenceID": 30, "context": "), 28 features were calculated to identify nine gestures using data gathered from 16 participants [33].", "startOffset": 98, "endOffset": 102}, {"referenceID": 158, "context": "A preliminary investigation into classifying the CoST dataset used a variety of features, including temporal statistic, size of contact area, histogram-based features, and motionbased features [162].", "startOffset": 193, "endOffset": 198}, {"referenceID": 59, "context": "The increased interest has resulted in two major social gesture corpora being made available: the Corpus of Social Touch (CoST) dataset [63,65], consisting of 14 gestures gathered from a pressure-sensitive fabric, and the Human-Animal Affective Robot Touch (HAART) dataset [16], consisting of 7 gestures gathered from the Haptic Creature.", "startOffset": 136, "endOffset": 143}, {"referenceID": 61, "context": "The increased interest has resulted in two major social gesture corpora being made available: the Corpus of Social Touch (CoST) dataset [63,65], consisting of 14 gestures gathered from a pressure-sensitive fabric, and the Human-Animal Affective Robot Touch (HAART) dataset [16], consisting of 7 gestures gathered from the Haptic Creature.", "startOffset": 136, "endOffset": 143}, {"referenceID": 14, "context": "The increased interest has resulted in two major social gesture corpora being made available: the Corpus of Social Touch (CoST) dataset [63,65], consisting of 14 gestures gathered from a pressure-sensitive fabric, and the Human-Animal Affective Robot Touch (HAART) dataset [16], consisting of 7 gestures gathered from the Haptic Creature.", "startOffset": 273, "endOffset": 277}, {"referenceID": 60, "context": "Several approaches to recognizing gestures in the CoST and HAART datasets from several groups were recently reported [64], with the goal of identifying approaches which may be appropriated from well established fields, such as speech recognition and video analysis.", "startOffset": 117, "endOffset": 121}, {"referenceID": 35, "context": "In [38], a coarse histogram with three bins (no touch, low pressure, high pressure) at the frame level and global level, global statistical features of the frames (minimum, maximum, mean, area, variation, etc.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "In [11], individual frames were summarized with the mean, coordinate of the centroid and maximum pressure, and values summarizing an elliptical approximation of the touched area.", "startOffset": 3, "endOffset": 7}, {"referenceID": 147, "context": "Global and channel-based statistics, as well as spectral components of the average pressure of each frame, were used as features in [151].", "startOffset": 132, "endOffset": 137}, {"referenceID": 52, "context": "In [56], autoencoders were used to automatically generate features at the frame level.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "Random forests were commonly used to determine the quality of each feature in addition to classifying gestures [11,38,151].", "startOffset": 111, "endOffset": 122}, {"referenceID": 35, "context": "Random forests were commonly used to determine the quality of each feature in addition to classifying gestures [11,38,151].", "startOffset": 111, "endOffset": 122}, {"referenceID": 147, "context": "Random forests were commonly used to determine the quality of each feature in addition to classifying gestures [11,38,151].", "startOffset": 111, "endOffset": 122}, {"referenceID": 147, "context": "Additionally, SVMs were used in [151], and HMM models were built for each gesture in [56] using the autoencoder and geometric moment features as observations.", "startOffset": 32, "endOffset": 37}, {"referenceID": 52, "context": "Additionally, SVMs were used in [151], and HMM models were built for each gesture in [56] using the autoencoder and geometric moment features as observations.", "startOffset": 85, "endOffset": 89}, {"referenceID": 60, "context": ", scratch and tickle) [64].", "startOffset": 22, "endOffset": 26}, {"referenceID": 51, "context": "For instance, individual nodes in a tactile sensitive skin utilize the state machine shown in Figure 6 [55].", "startOffset": 103, "endOffset": 107}, {"referenceID": 166, "context": "As mentioned in [170], machine learning steps are simply one part of analysis in structural health monitoring.", "startOffset": 16, "endOffset": 21}, {"referenceID": 51, "context": "Figure 6: State machine utilized in [55] to continually detect and localize texture events in a robotic skin.", "startOffset": 36, "endOffset": 40}, {"referenceID": 164, "context": "Figure 7: Data processing models proposed in [168]", "startOffset": 45, "endOffset": 50}, {"referenceID": 164, "context": "As an alternative to the waterfall model, the omnibus model, shown in Figure 7b, is proposed in [168].", "startOffset": 96, "endOffset": 101}, {"referenceID": 51, "context": "For monitoring and classification / localization applications (such as in [55]), the model allows nodes to dynamically switch between particular tasks.", "startOffset": 74, "endOffset": 78}, {"referenceID": 2, "context": "Temporal models, such as dynamic Bayesian networks (including HMMs) and recurrent neural networks (including LSTMs), have been shown to improve classification results for gait recognition [4,94,95,116] and affective touch [56].", "startOffset": 188, "endOffset": 201}, {"referenceID": 90, "context": "Temporal models, such as dynamic Bayesian networks (including HMMs) and recurrent neural networks (including LSTMs), have been shown to improve classification results for gait recognition [4,94,95,116] and affective touch [56].", "startOffset": 188, "endOffset": 201}, {"referenceID": 91, "context": "Temporal models, such as dynamic Bayesian networks (including HMMs) and recurrent neural networks (including LSTMs), have been shown to improve classification results for gait recognition [4,94,95,116] and affective touch [56].", "startOffset": 188, "endOffset": 201}, {"referenceID": 112, "context": "Temporal models, such as dynamic Bayesian networks (including HMMs) and recurrent neural networks (including LSTMs), have been shown to improve classification results for gait recognition [4,94,95,116] and affective touch [56].", "startOffset": 188, "endOffset": 201}, {"referenceID": 52, "context": "Temporal models, such as dynamic Bayesian networks (including HMMs) and recurrent neural networks (including LSTMs), have been shown to improve classification results for gait recognition [4,94,95,116] and affective touch [56].", "startOffset": 222, "endOffset": 226}, {"referenceID": 117, "context": "Recent investigations in gait recognition and affective touch recognition have used deep learning approaches to automatically extract features from provided training data, including restricted Boltzmann machines, [121], convolutional neural networks [175,178], and autoencoders [56].", "startOffset": 213, "endOffset": 218}, {"referenceID": 171, "context": "Recent investigations in gait recognition and affective touch recognition have used deep learning approaches to automatically extract features from provided training data, including restricted Boltzmann machines, [121], convolutional neural networks [175,178], and autoencoders [56].", "startOffset": 250, "endOffset": 259}, {"referenceID": 174, "context": "Recent investigations in gait recognition and affective touch recognition have used deep learning approaches to automatically extract features from provided training data, including restricted Boltzmann machines, [121], convolutional neural networks [175,178], and autoencoders [56].", "startOffset": 250, "endOffset": 259}, {"referenceID": 52, "context": "Recent investigations in gait recognition and affective touch recognition have used deep learning approaches to automatically extract features from provided training data, including restricted Boltzmann machines, [121], convolutional neural networks [175,178], and autoencoders [56].", "startOffset": 278, "endOffset": 282}, {"referenceID": 76, "context": "These approaches, explored extensively in image classification [80] and speech recognition [41], have provided approaches to extract features from training data which are robust to variations in the scale and spatial or temporal position of features.", "startOffset": 63, "endOffset": 67}, {"referenceID": 37, "context": "These approaches, explored extensively in image classification [80] and speech recognition [41], have provided approaches to extract features from training data which are robust to variations in the scale and spatial or temporal position of features.", "startOffset": 91, "endOffset": 95}, {"referenceID": 112, "context": "The CNN-LSTM model described in [116] provides a particularly interesting architecture for robotic materials.", "startOffset": 32, "endOffset": 37}, {"referenceID": 58, "context": "This has been performed in several of the investigations previously mentioned, for instance [62].", "startOffset": 92, "endOffset": 96}, {"referenceID": 8, "context": "Additionally, several frameworks have been developed for learning using graphical processing units (GPUs), including GPU implementations of neural networks [10], SVMs [18] and Bayesian networks [86].", "startOffset": 156, "endOffset": 160}, {"referenceID": 16, "context": "Additionally, several frameworks have been developed for learning using graphical processing units (GPUs), including GPU implementations of neural networks [10], SVMs [18] and Bayesian networks [86].", "startOffset": 167, "endOffset": 171}, {"referenceID": 82, "context": "Additionally, several frameworks have been developed for learning using graphical processing units (GPUs), including GPU implementations of neural networks [10], SVMs [18] and Bayesian networks [86].", "startOffset": 194, "endOffset": 198}, {"referenceID": 106, "context": "Using a KL-divergence objective, such as that used with sparse autoencoders [110], the gate can be trained to be active a certain percentage of the time, and consequently control the rate of communication.", "startOffset": 76, "endOffset": 81}, {"referenceID": 112, "context": "This limitation has been discussed in [116], where a CNN-LSTM model can be trained to classify gaits with a high level of accuracy, but the size of the resulting model is too large to be reasonably used in a wearable system.", "startOffset": 38, "endOffset": 43}, {"referenceID": 51, "context": "Essentially, this involves offloading several robotic tasks of interest into the material itself, allowing an external controller to query the material or have the material push pertinent information to the controller in an event driven manner, such as with the robotic skin in [55].", "startOffset": 278, "endOffset": 282}, {"referenceID": 131, "context": "In addition, The reinforcement learning approaches used for optimal shape control of airfoils has potential for use in the field of soft robotics [135].", "startOffset": 146, "endOffset": 151}, {"referenceID": 43, "context": "Finally, the literature reviewed shows that a common approach to machine learning\u2013 extracting a feature set from measurements, and perform classification or regression on static or quasi-static data using existing data mining software (such as Weka [47])\u2013is employed in many of the papers in all the domains.", "startOffset": 249, "endOffset": 253}, {"referenceID": 98, "context": "For instance, geometric probabilistic decision trees used in [102] demonstrates improved performance over a \u201cflat\u201d multi-class classifier.", "startOffset": 61, "endOffset": 66}, {"referenceID": 29, "context": "Factor analysis describes correlations between observed features and a small number of unobserved independent variables (factors) [32].", "startOffset": 130, "endOffset": 134}, {"referenceID": 129, "context": ", training data) by estimating the rank of the measurements using SVD [133].", "startOffset": 70, "endOffset": 75}, {"referenceID": 128, "context": "Using the backpropagation algorithm [132,166], the gradient of the error with respect to the parameters (weights and biases) of the network can be calculated, and updated using gradient descent or other update rule.", "startOffset": 36, "endOffset": 45}, {"referenceID": 162, "context": "Using the backpropagation algorithm [132,166], the gradient of the error with respect to the parameters (weights and biases) of the network can be calculated, and updated using gradient descent or other update rule.", "startOffset": 36, "endOffset": 45}, {"referenceID": 46, "context": "The network is unable to learn with large time delays due to the nature of backpropagaing the error signal through time during training [50].", "startOffset": 136, "endOffset": 140}, {"referenceID": 47, "context": "A promising solution to this problem is to incorporate Long Short Term Memory (LSTM) [51].", "startOffset": 85, "endOffset": 89}, {"referenceID": 81, "context": "Convolutional networks have been shown to be especially useful for image recognition [85].", "startOffset": 85, "endOffset": 89}, {"referenceID": 57, "context": "Because of the nonlinearity of the architecture, autoencoders with a single hidden layer have been shown to provide superior reconstruction of the input signal, when compared with principle components analysis (PCA) [61].", "startOffset": 216, "endOffset": 220}, {"referenceID": 45, "context": "Deep autoencoders, which contain several nonlinear hidden layers between the input and encoding layer, have been used for several applications [49].", "startOffset": 143, "endOffset": 147}, {"referenceID": 12, "context": "The separating hyperplane can then be reduced to finding the closest points between the two convex hulls, and selecting a hyperplane which bisects and is orthogonal to the line connecting these two points [14].", "startOffset": 205, "endOffset": 209}, {"referenceID": 141, "context": "To create a support vector regression (SVR) machine, the problem formulation is modified to minimize the distance between training examples and the optimal hyperplane [145].", "startOffset": 167, "endOffset": 172}, {"referenceID": 141, "context": "Several admissible kernels are given in [145], which include", "startOffset": 40, "endOffset": 45}, {"referenceID": 104, "context": "Belief propagation is one approach based on message passing between nodes in the graph [108].", "startOffset": 87, "endOffset": 92}, {"referenceID": 132, "context": "Mixtures models are probabilistic models for representing the distribution of data [136].", "startOffset": 83, "endOffset": 88}, {"referenceID": 1, "context": "Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3, 93], or", "startOffset": 164, "endOffset": 171}, {"referenceID": 89, "context": "Gaussian mixture models (GMMs), where multivariate Gaussians are used for each component, have been used for classification though soft assignment to each category [3, 93], or", "startOffset": 164, "endOffset": 171}, {"referenceID": 142, "context": "used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.", "startOffset": 37, "endOffset": 46}, {"referenceID": 167, "context": "used to detect anomolies or outliers [146,171] based on the likelihood of an observation being generated by the mixture.", "startOffset": 37, "endOffset": 46}, {"referenceID": 132, "context": "A dynamic Bayesian network (DBN) is a class of graphical models which are useful for modeling sequential or temporal data [136].", "startOffset": 122, "endOffset": 127}, {"referenceID": 72, "context": "The model is represented as a transition model which follows a Markov assumption, P (Xt|Xt\u22121), and an observation model, P (O|X) [76].", "startOffset": 129, "endOffset": 133}, {"referenceID": 120, "context": "Hidden Markov models (HMMs) are a special case of DBNs which consist of a single discrete, hidden state variable and observations conditioned on the current hidden state [124].", "startOffset": 170, "endOffset": 175}, {"referenceID": 44, "context": "For example, for detecting impacts in aircraft composite panels, the time at the maximum and minimum value of the both the raw signal and the envelope of the signal, as well as the beginning and end of each envelope [48,149].", "startOffset": 216, "endOffset": 224}, {"referenceID": 145, "context": "For example, for detecting impacts in aircraft composite panels, the time at the maximum and minimum value of the both the raw signal and the envelope of the signal, as well as the beginning and end of each envelope [48,149].", "startOffset": 216, "endOffset": 224}, {"referenceID": 90, "context": "Frequency domain features are extracted from signals which have undergone a time-frequency transform, such as a Short Time Fourier Transform (STFT) or Discrete Wavelet Transforms (DWT) [94].", "startOffset": 185, "endOffset": 189}, {"referenceID": 27, "context": "Modal features are useful for detecting defects in structures [30, 70].", "startOffset": 62, "endOffset": 70}, {"referenceID": 66, "context": "Modal features are useful for detecting defects in structures [30, 70].", "startOffset": 62, "endOffset": 70}, {"referenceID": 79, "context": "Transmissibility is a feature commonly used in structural health monitoring, due to its sensitivity to changes in the stiffness of a component [83,105].", "startOffset": 143, "endOffset": 151}, {"referenceID": 101, "context": "Transmissibility is a feature commonly used in structural health monitoring, due to its sensitivity to changes in the stiffness of a component [83,105].", "startOffset": 143, "endOffset": 151}, {"referenceID": 166, "context": "Transmissibility can be measured using piezoelectric elements [170].", "startOffset": 62, "endOffset": 67}, {"referenceID": 79, "context": "As transmissibility measurements are between multiple measurement points, they provide more information than simply detecting resonant frequencies, and can be useful for localization of defects [83, 105].", "startOffset": 194, "endOffset": 203}, {"referenceID": 101, "context": "As transmissibility measurements are between multiple measurement points, they provide more information than simply detecting resonant frequencies, and can be useful for localization of defects [83, 105].", "startOffset": 194, "endOffset": 203}, {"referenceID": 91, "context": "Omitting the DC component, the energy of a spectrogram may help assess the intensity of a signal [95].", "startOffset": 97, "endOffset": 101}, {"referenceID": 44, "context": "Integrating the real and imaginary components separately may also be reasonable in situations where the time delay between multiple sensors can provide useful information, such as in impact detection [48,149].", "startOffset": 200, "endOffset": 208}, {"referenceID": 145, "context": "Integrating the real and imaginary components separately may also be reasonable in situations where the time delay between multiple sensors can provide useful information, such as in impact detection [48,149].", "startOffset": 200, "endOffset": 208}, {"referenceID": 22, "context": "Given a set of measurement vectors which demonstrate correlation among the elements in the vectors, principle components analysis (PCA) determines an orthogonal transformation which results in linearly uncorrelated values [25].", "startOffset": 222, "endOffset": 226}, {"referenceID": 143, "context": "Independent components analysis (ICA) can be used to describe a time series as a linear combination of components, where each component is statistically independent, and observe a non-Gaussian distribution [147].", "startOffset": 206, "endOffset": 211}, {"referenceID": 101, "context": "where ex(t) is the error between the measured values and prediction from the AR model [105, 146].", "startOffset": 86, "endOffset": 96}, {"referenceID": 142, "context": "where ex(t) is the error between the measured values and prediction from the AR model [105, 146].", "startOffset": 86, "endOffset": 96}], "year": 2016, "abstractText": "This paper reviews machine learning applications and approaches to detection, classification and control of intelligent materials and structures with embedded distributed computation elements. The purpose of this survey is to identify desired tasks to be performed in each type of material or structure (e.g., damage detection in composites), identify and compare common approaches to learning such tasks, and investigate models and training paradigms used. Machine learning approaches and common temporal features used in the domains of structural health monitoring, morphable aircraft, wearable computing and robotic skins are explored. As the ultimate goal of this research is to incorporate the approaches described in this survey into a robotic material paradigm, the potential for adapting the computational models used in these applications, and corresponding training algorithms, to an amorphous network of computing nodes is considered. Distributed versions of support vector machines, graphical models and mixture models developed in the field of wireless sensor networks are reviewed. Potential areas of investigation, including possible architectures for incorporating machine learning into robotic nodes, training approaches, and the possibility of using deep learning approaches for automatic feature extraction, are discussed.", "creator": "LaTeX with hyperref package"}}}