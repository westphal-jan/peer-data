{"id": "1606.03632", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jun-2016", "title": "Natural Language Generation in Dialogue using Lexicalized and Delexicalized Data", "abstract": "Natural language generation plays a critical role in any spoken dialogue system. We present a new approach to natural language generation using recurrent neural networks in an encoder-decoder framework. In contrast with previous work, our model uses both lexicalized and delexicalized versions of slot-value pairs for each dialogue act. This allows our model to learn from all available data, rather than being restricted to learning only from delexicalized slot-value pairs. We show that this helps our model generate more natural sentences with better grammar. We further improve our model's performance by initializing its weights from a pretrained language model. Human evaluation of our best-performing model indicates that it generates sentences which users find more natural and appealing. In this paper we use the data extracted from multiple data sets, from the same machine, to model how a model could learn the same sentence and make use of the same vocabulary. In addition to the natural language models we demonstrate that our approach to language learning requires high processing power, as well as high-order processing power for learning the same sentence and the same sentence and the same sentence. Our paper examines the data extracted from the same machine by extracting more than 1,000 random word combinations, and compares the resulting values to the resulting values. Finally, we show that our model is able to generate a single, consistent set of sentences with a fixed weight, by using the right-hand approach, which uses the natural language-based syntax system. The results suggest that this approach is useful for studying natural language learning.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Sat, 11 Jun 2016 21:24:43 GMT  (334kb,D)", "http://arxiv.org/abs/1606.03632v1", "Submitted to EMNLP 2016"], ["v2", "Mon, 12 Sep 2016 19:13:02 GMT  (334kb,D)", "http://arxiv.org/abs/1606.03632v2", null], ["v3", "Fri, 21 Apr 2017 19:11:36 GMT  (171kb,D)", "http://arxiv.org/abs/1606.03632v3", null]], "COMMENTS": "Submitted to EMNLP 2016", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["shikhar sharma", "jing he", "kaheer suleman", "hannes schulz", "philip bachman"], "accepted": false, "id": "1606.03632"}, "pdf": {"name": "1606.03632.pdf", "metadata": {"source": "CRF", "title": "Natural Language Generation in Dialogue using Lexicalized and Delexicalized Data", "authors": ["Shikhar Sharma", "Philip Bachman"], "emails": ["first.last@maluuba.com"], "sections": [{"heading": null, "text": "Natural language generation plays a critical role in any spoken dialogue system. We present a new approach to natural language generation using recurrent neural networks in an encoderdecoder framework. In contrast with previous work, our model uses both lexicalized and delexicalized versions of slot-value pairs for each dialogue act. This allows our model to learn from all available data, rather than being restricted to learning only from delexicalized slot-value pairs. We show that this helps our model generate more natural sentences with better grammar. We further improve our model\u2019s performance by initializing its weights from a pretrained language model. Human evaluation of our best-performing model indicates that it generates sentences which users find more natural and appealing."}, {"heading": "1 Introduction", "text": "Typical spoken dialogue systems (SDS) comprise a natural language understanding unit, a dialogue manager, and a natural language generator coupled together into a processing pipeline. Most traditional systems with this architecture rely on template-based, hand-crafted rules for natural language generation (NLG). Unfortunately, the required templates are cumbersome to maintain and the overall approach does not scale well to complex domains and datasets. Previous papers have explored alternative approaches such as corpus-based n-gram models Oh and Rudnicky, 2002, tree-based models Stent, Prasad, and Walker, 2004, and Reinforcement Learning models Rieser and Lemon, 2010.\nRecently, models based on recurrent neural networks (RNNs) have shown promising performance in NLG. Apart from spoken dialogue systems (SDS), RNN-based models have been applied in related domains including image captioning Xu et al., 2015; Karpathy and Li, 2015 and video description Yao et al., 2015, and machine translation Bahdanau, Cho, and Bengio, 2014. In the domain of SDS, RNNbased models have been used for NLG in both traditional multi-component processing pipelines Wen et al., 2015b; Wen et al., 2015a and more recent systems designed for end-to-end training Wen et al., 2016a.\nWhile RNN-based end-to-end frameworks have performed well, most systems in use today still depend on multi-component processing pipelines. Text/speech datasets annotated with specific dialogue acts are required for learning-based approaches, but such datasets are unavailable for most domains. This compels the development of effective methods for transfer learning in spoken dialogue systems. Transfer learning can extend the value of dialogue systems to domains which lack sufficient annotated data to support a strong, domain-specific model.\nExisting RNN-based models rely primarily on delexicalized slot-value pairs, while ignoring the lexicalized values. These methods thus ignore linguistic relationships among the lexicalized instances of a slot-value pair, and between lexicalized slot-value pairs and their surrounding context. As illustrated in Figure 1, this approach often leads to grammatically incorrect sentences. Yet, deep neural networks can readily capture the relevant linguistic relationships if they are allowed to learn from the lexicalized slotvalue pairs. We make two key contributions in this paper:\nar X\niv :1\n60 6.\n03 63\n2v 1\n[ cs\n.C L\n] 1\n1 Ju\nn 20\n\u2022 We develop a recurrent encoder-decoder model which uses both lexicalized and delexicalized dialogue act slot-value pairs, and which outperforms existing approaches according to several popular evaluation metrics.\n\u2022 We show that the performance of our model can be improved further by transferring weights from a pretrained language model.\nOur model uses beam search decoding, which produces several varied sentences for the same dialogue act slot-value pairs, which is desirable in a practical spoken dialogue system. Human assessment shows that users tend to prefer the sentences generated by our models over those generated by other models.\nIn Section 2, we review related work. In Section 4, we provide a full description of our model. Section 5 describes the datasets we used while developing and testing our model, and our human assessment methodology. Section 6 presents the results of our experiments, compares the performance of our model with that of related models, and shows how pretraining our model using a language modelling task can improve its performance in domains with limited task-specific training data. We conclude in Section 7 with discussion of exciting directions for future work."}, {"heading": "2 Related Work", "text": "Traditional methods for natural language generation have typically relied on handcrafted rule-based generators or rerankers. Oh and Rudnicky (2002) explored corpus-based generation methods. They trained ngram language models for each dialogue act to generate sentences and then selected the best ones using a rule-based reranker. SPaRKy Stent, Prasad, and Walker, 2004 used a tree-based sentence plan generator and then applied a trainable sentence plan ranker. Rieser and Lemon (2010) viewed NLG as planning under uncertainty and used Reinforcement Learning to train a policy for NLG. Kondadadi, Howald, and\nSchilder (2013) used a SVM reranker to further improve the performance of systems which extract a bank of templates from a text corpus.\nLSTM-based RNNs Hochreiter and Schmidhuber, 1997 have achieved wide-spread success in language modelling and machine translation. Bengio, Ducharme, and Vincent (2000) were some of the first to propose using RNNs for language modelling. Later, Mikolov et al. (2010) used a mixture of RNN language models and observed significant reduction in perplexity compared to state-of-the-art n-gram models. Consequently, RNNs have drawn increasing interest in the domain of NLG. Recently, Karpathy and Li (2015), and Vinyals et al. (2015) used RNNs in a multi-modal setting to generate captions for images. Donahue et al. (2015) processed per-frame features from convolutional neural networks using LSTM-RNNs to generate descriptions of videos.\nRNNs have also been successful in the domains of task-oriented and non task-oriented dialogue. Among examples of non task-oriented dialogue, Vinyals and Le (2015) used previous sentences in a conversation as context and trained a model to generate the next sentence using the sequence-to-sequence framework Sutskever, Vinyals, and Le, 2014. Lowe et al. (2015) additionally encoded an unstructured textual knowledge source along with previous responses and context to generate a response for technical support queries.\nFor task-oriented dialogue systems, Wen et al. (2015b) used RNNs to learn to generate delexicalized responses from dialogue-acts. The authors augmented a forward RNN generator with a convolutional neural network sentence reranker to ensure that all the slots in the dialogue-act were generated, and a backward RNN reranker to select the best output sentence. In other work, Wen et al. (2015a) proposed a semantically-controlled LSTM (sc-LSTM) unit for RNNs with a separate \u201creading\u201d gate that modulates a dialogue act vector to ensure all slots are generated. They used forward and backward RNNs for\nreranking. A recurring problem in such systems is that sufficient domain-specific annotated data is often unavailable. Wen et al. (2016b) trained an out-ofdomain model on counterfeited data (using semantically similar slots from the target domain in place of the slots belonging to the out-of-domain dataset). They found that by fine-tuning the target domain on the out-of-domain trained model, they were able to get satisfactory performance with a small amount of in-domain data.\nEnd-to-end approaches contrasting with the traditional modular approach have grown in popularity. Serban et al. (2016) proposed an end-to-end trainable, hierarchical, recurrent encoder-decoder model for non-goal driven dialogue. Wen et al. (2016a) proposed an approach based on training an end-to-end neural model for a goal-driven SDS which still has modular components. Their model produced delexicalized slots. Their belief tracker was trained separately from the rest of the model using a dedicated supervision signal and their dataset was annotated as part of a novel dataset collection pipeline.\nMost NLG papers in the recent SDS literature compare performance in terms of BLEU scores Papineni et al., 2002 due to lack of a better metric. However, Liu et al. (2016) showed that the BLEU metric does not correlate well with human judgement for domainspecific NLG in dialogue systems. The BLEU score has been widely used in Machine Translation tasks since the corresponding datasets usually provide multiple ground truth sentences and BLEU has high correlation with human judgement in this case. BLEU also tends to correlate better with human judgement when domains are more constrained. We evaluate and compare the performance of our models on BLEU4 Papineni et al., 2002, METEOR Lavie and Agarwal, 2007, ROUGE L Lin, 2004, and CIDEr Vedantam, Zitnick, and Parikh, 2015 metrics. In addition to these automated metrics, we perform human evaluation of our models as described in Section 5.2."}, {"heading": "3 Problem Description", "text": "We decompose each sentence in a dialogue into one or more dialogue acts such as request and inform. Each of these dialogue acts can contain slots such as area, food, and pricerange. Each slot may be assigned a specific value. E.g., the dialogue act in-\nform with slot-value pair pricerange=cheap might correspond to the sentence \u201cit is cheap\u201d. Roughly speaking, a dialogue act corresponds to some way in which a dialogue can be moved forward, e.g. by conveying specific information. A slot corresponds to, e.g. what type of information will be conveyed. The value of a slot is then, e.g. the specific information conveyed. In this paper, we represent a dialogue act slot-value pair as (dialogue act + slot, value) where the first term is delexicalized and the second term is the lexicalized value of the slot. The first term can be derived from simple one-hot representations of the dialogue act and slot type. The second term is more difficult to represent due to its less-restricted, natural form. We will use a parametric model for this term."}, {"heading": "4 Model", "text": "This section describes our model which we call the ld-sc-LSTM1. Section 4.1 and Section 4.2 respectively describe the encoder and decoder components of our model. We outline the objective function for training the model in Section 4.3. The reranker which we use at test time to rank decoded sentences is presented in Section 4.4. The model hyper-parameters are described in Section 4.5 and our second model, the transfer ld-sc-LSTM, is discussed in Section 4.6. We give a summary of the baseline models we use for performance comparisons in Section 4.7."}, {"heading": "4.1 Encoder", "text": "We use a 1-layer, bi-directional LSTM encoder in our model. At each time-step t, the encoder receives an input vector zt which is formed by concatenating\n1lexicalized delexicalized - semantically controlled - LSTM\nvectors mt and et. The vector mt is a one-hot encoding of the dialogue act slots present in the examples. The vector et is formed by taking the mean of the word embeddings of all the words corresponding to the slot represented by mt. Figure 2 illustrates how the encoder input is created for a given dialogue act. Each turn of the dialogue is composed of one or more such dialogue act slot-value pairs which are input at each time-step to the encoder.\nWe use the LSTM implementation described by Zaremba, Sutskever, and Vinyals (2014):\nit = \u03c3(Wzizt +Whiht\u22121) (1)\nft = \u03c3(Wzfzt +Whfht\u22121) (2)\not = \u03c3(Wzozt +Whoht\u22121) (3)\ngt = tanh(Wzgzt +Whght\u22121) (4)\nct = ft ct\u22121 + it gt (5) ht = ot tanh(ct), (6)\nwhere it is the input gate, ft is the forget gate, ot is the output gate, ct is the cell state, ht is the hidden state, zt is the input to the LSTM at time-step t, and indicates element-wise product.\nThe hidden states ht of the forward and backward LSTMs are concatenated and their mean across all the time-steps is fed to the decoder as its input."}, {"heading": "4.2 Decoder", "text": "The decoder in our model is a recurrent neural network which uses the sc-LSTM implementation described by Wen et al. (2015a). It differs from the standard LSTM as described below:\nrt = \u03c3(Wwrzt + \u03b1Whrht\u22121) (7)\ndt = rt dt\u22121 (8) ct = ft ct\u22121 + it gt + tanh(Wdcdt), (9)\nwhere dt is the Dialogue Act vector (described below), rt is the reading gate at time-step t, and \u03b1 is a scalar. As shown by Wen et al. (2015a), the Dialogue Act vector in the sc-LSTM can function similarly to a memory that remembers which slots are yet to be generated. We set the initial value of the Dialogue Act vector d0 as follows:\nd0 =\nM\u2211\nt=1\nmt, (10)\nwhere M is the number of encoder time-steps. This sum is expressed over all of the one-hot dialogue act slot vectors and is thus a binary vector over all of the dialogue act slots which should be present in our natural language output.\nThe mean hidden state from the encoder called the \u201ccontext\u201d x is used to initialize h0 and c0 in the decoder,\nh0 = tanh(Whxx+ bhx) (11)\nc0 = tanh(Wcxx+ bcx) (12)\nThe word embedding of the word output in the previous time-step is also an input to the decoder sc-LSTM. For the first time-step, we use a special symbol \u3008bos\u3009 which signifies the beginning of a sentence. The hidden states of the sc-LSTM are passed to softmax layers which produce a word or a delexicalized slot at each time-step. Later, the slots are replaced with their values. The model produces words up to a predefined maximum length or until it produces the special symbol \u3008eos\u3009. At the time of training, we use the ground truth word for the previous time-step instead of the predicted output. At test time, we use beam search to over-generate several candidate responses. The decoder is trained to output delexicalized slots and we later fill in the values of the corresponding slots.\nOur encoder-decoder ld-sc-LSTM model is summarized in Figure 3."}, {"heading": "4.3 Loss function and Regularization", "text": "We use the negative log-likelihood along with regularization as the loss function as proposed by Wen et al. (2015a),\nL = \u2212 T\u2211\nt=1\ny>t log(pt) + \u2016dT \u2016+ T\u2211\nt=1\n\u03b7\u03be\u2016dt\u2212dt\u22121\u2016,\n(13) where yt is the ground truth word distribution, pt is the predicted word distribution, T is the number of time-steps in the decoder, and \u03b7 and \u03be are scalars set to 0.0001 and 100, respectively. The term \u2016dT \u2016 pushes the model to generate all the slots it is supposed to generate so that at the last time-step there are no slots remaining. The last term encourages the model not to drop multiple Dialogue Act vector elements at once since we cannot generate more than one slot at a time."}, {"heading": "4.4 Sentence Reranker", "text": "We use beam search for decoding at test time with a beam width of 10. This is the over-generation phase after which the reranker selects the highest ranked sentence by minimizing the following score function at each time-step of the generation process:\nS = \u2212 T\u2211\nt=1\nlog p(wt | wt\u22121 . . .w1) + \u03bbERR (14)\nHere, We also include the slot error rate ERR used in the recent literature Wen et al., 2015a; Wen et al., 2016b. It is defined as\nERR = p+ q\nN , (15)\nwhere p is the number of missing slots in the generated sentence, q is the number of redundant slots in the generated sentence and N is the total number of slots in the Dialogue Act vector. We set \u03bb to 1000 to severely discourage the reranker from selecting sentences which either contain missing or redundant slots."}, {"heading": "4.5 Hyper-parameters", "text": "The number of layers in the decoder, the decoder hidden state dimension, the encoder hidden state dimension and the word embedding dimensionality are the model hyper-parameters set using the validation set. The reading coefficient \u03b1 is set to 1 and the maximum length of T is set to 30. We employ the Adam optimizer Kingma and Ba, 2014 for training and we\napply a dropout Srivastava et al., 2014 of 0.5 at all non-recurrent connections."}, {"heading": "4.6 Transfer learning", "text": "We would expect transfer learning to improve the grammar in generated sentences in domains where training data is limited. Therefore, we pre-train a language model on sentences about the same topic, e.g., restaurant reviews for our case. The model is trained to learn a representation of an input sentence and then decode it to generate the original sentence. This model uses an encoder similar to our ld-sc-LSTM model. The only difference is that the encoder here receives just the word embeddings for the input sentence (as there are no dialogue acts here). The decoder for this language model uses LSTM units instead of sc-LSTM. We use the internal LSTM-toLSTM decoder weights from this language model as initial values of the corresponding weights of the internal sc-LSTM to sc-LSTM connections (Whi, Whf , Who and Whg) in the ld-sc-LSTM model, and fine-tune them during training. We emphasize that we transfer weights from a different task and not from the same task on a different domain. We present results with this model setup under the name transfer-ld-sc-LSTM in Section 6."}, {"heading": "4.7 Baselines", "text": "Our simple LSTM baseline has a one-step encoder which is the vector d0 itself. The decoder for this baseline receives the encoder input at each time-step. This model is trained using the cross-entropy term in\nthe loss function L shown in Equation 13. The sc-LSTM baseline uses sc-LSTM instead of LSTM and receives vector d0 only at the first timestep. This baseline uses the same loss function L as our model (see Equation 13).\nNone of these baselines contain a recurrent multistep encoder. The LSTM baseline\u2019s softmax layer is additionally provided the d0 vector."}, {"heading": "5 Data and Evaluation methodology", "text": ""}, {"heading": "5.1 Data", "text": ""}, {"heading": "5.1.1 CF: CrowdFlower restaurant search", "text": "We collected this dataset by releasing separate tasks for each dialogue act on CrowdFlower2. The dialogue acts were inform, offer, request, implicit confirmation, explicit confirmation, canthelp. These dialogue acts were associated with the slots name, address, phone, area, postcode, food, pricerange. A brief description of all of the dialogue acts is provided in Appendix A. The request act was restricted to having empty-valued slots, while the slots in other cases were allowed to take a special dontcare value in addition to taking words from the general vocabulary. The goal of the user in this setting was to search for and/or select a restaurant to eat at. We report results on a test set obtained using a stratified 85%/15% train/test split. The training set has 1 200 sentences containing 690 unique words from a total of 15 143 words while the test set has 211 sentences containing 286 unique words from a total of 2 033 words. The dialogue act slot-value pairs were tagged by human experts after collecting the raw data. We use 10% of the training set for validation.\n2https://www.crowdflower.com"}, {"heading": "5.1.2 LMD: restaurant reviews", "text": "This dataset comprises sentences collected from online restaurant reviews. We found reviews written in English and sorted them on the basis of highest occurrence of the words phone, postcode, price, food, area, restaurant, nice, address, reservation, and book. We then trained two language models \u2013 one with the top 5 000 sentences and the other with the top 1 500 sentences, and used the best performing model among them as a source of pretrained weights for our model (in tests where we used pretrained weights)."}, {"heading": "5.1.3 DSTC2: Dialogue State Tracking", "text": "Challenge 2\nThis dataset was created by parsing the DSTC2 Henderson, Thomson, and Williams, 2014 dataset, which already contains machine responses annotated with dialogue acts and slot-value pairs. The dialogue acts used were inform, offer, request, implicit confirmation, explicit confirmation, canthelp, select, welcome message, repeat, reqmore, with the same slot types as the CF dataset. The request act was again allowed to have only empty-valued slots and for other cases dontcare values were allowed. There were 15 611 sentences containing 660 unique words from a total of 240 337 words in the training dataset. The test set had 9 890 sentences containing 166 unique words from a total of 127 858 words. We use 10% of the training set for validation."}, {"heading": "5.2 Human evaluation of responses", "text": "We selected a random set of 100 dialogue acts from each dataset\u2019s test set and the corresponding responses generated by all of the models, then asked 5 human judges to score them on a scale of 1 to 5, with 1 indicating least appropriate for the given dialogue act and 5 indicating most appropriate. In each trial, we presented 4 sentences to the judges, each from a different model, along with the corresponding dialogue act. The judges were informed that all sentences had been generated from different models and were not presented in any particular order. Judges were then asked to rate each of the four sentences. We present these evaluation scores in Section 6."}, {"heading": "6 Results", "text": "We evaluate BLEU-4, METEOR, ROUGE L and CIDEr scores using the generated sentence as the candidate caption and the ground truth as the reference caption. We use the publicly available cococaption3 code to calculate these metrics. The results for the CF dataset are shown in Table 1 and for the DSTC2 dataset in Table 2. The ld-sc-LSTM and the transfer-ld-sc-LSTM consistently perform better\n3https://github.com/tylin/coco-caption\nthan the current state-of-the-art sc-LSTM in terms of these automated metrics. The DSTC2 dataset is the easier one of the two since it was created by templated NLG and is fairly repetitive. The CF dataset is more challenging as it contains varied sentences crowdsourced from multiple users. Its training set has a larger vocabulary than the DSTC2 training set even though it\u2019s significantly smaller in terms of the total number of sentences.\nWe present the average scores assigned to each model\u2019s sentences by five human judges in Table 3. The ld-sc-LSTM model and the transfer-ld-sc-LSTM model consistently beat the baseline models according to human evaluation. The ld-sc-LSTM outperforms the transfer-ld-sc-LSTM on the CF dataset.\nTable 4 compares responses generated by several models for the same dialogue acts. In the first example, the LSTM and the sc-LSTM models generate:\noffer(name) serves inform(food) food. since this works with many cuisine values such as Chinese, Indian and Japanese. In the same example, the ld-sc-LSTM and transfer-ld-sc-LSTM generate:\noffer(name) serves inform(food). By learning from the lexicalized values of the slots, these models understand that the word \u201cfood\u201d should\noffer(name=Super Ramen) Super Ramen is a nice place to eat. Super Ramen is a nice place to try. Super Ramen is a good place to eat .\nrequest(food) What kind of food do you want to eat? What type of food do you want to eat? What kind of food would you like to eat?\noffer(name=Super Ramen) inform(addr=108 Queen Street) Super Ramen is located at 108 Queen Street. Super Ramen is at 108 Queen Street. Super Ramen is located at 108 Queen Street\ncanthelp(food=Japanese) canthelp(area=entertainment district) I don\u2019t see any pizza place in the entertainment district. I don\u2019t see any pizza restaurant in the entertainment district. I don\u2019t see any pizza places in the entertainment district.\nTable 5: Top-3 responses generated for some dialogue acts on the CF dataset by the ld-sc-LSTM model.\nnot follow the value \u201cpizza\u201d. The other three examples also demonstrate that our approach improves grammatical continuity around generated slots. Our models do not require any modification to work with special or negative values like dontcare. As we motivated in Figure 1 initially, we observe that the ld-scLSTM and the transfer-ld-sc-LSTM models are less prone to making grammatical errors. This is reflected in their human assessment scores. We present more such examples in Appendix B.\nTable 5 shows the top-3 responses generated by the ld-sc-LSTM model trained on the CF dataset for some dialogue acts. These were generated using beam search with width 10 and selecting the top-3."}, {"heading": "7 Conclusion and Future Work", "text": "We proposed a recurrent encoder-decoder model for NLG that learns from both lexicalized and delexicalized tokens. We evaluated our model with several popular metrics used in the NLP and MT literature, and also asked humans to evaluate the generated responses. Our model consistently outperformed existing RNN-based approaches on the CF restaurant domain dataset and the publicly available DSTC2 dataset. Our transfer learning experiments showed that bootstrapping with weights from a pretrained language model can result in the generation of better\nresponses. As could be expected, exposing the deep neural network to the complete data (lexicalized and delexicalized) led to a more powerful model.\nIn the future, we plan to use an attention model over the recurrent encoder. Attention models are more intuitive for variable-length sequential input, do not lose information due to pooling, and can be visualized to see where the model focuses during the generation process. This could remove the need for the sc-LSTM unit and the Dialogue Act vector. To reduce the encoder slot value vocabulary size in our models when scaling to larger datasets, it would make sense to tokenize some word categories like proper nouns, singular integers, plural integers, etc. in the slot values. It would be insightful to more rigorously explore the effect of using out-of-domain corpora for transfer learning, and incorporating a backward reranker may also improve performance, as has been observed for other models in the literature."}, {"heading": "A Dialogue Act specification", "text": ""}, {"heading": "B Additional examples", "text": "We present some more examples in Table 7."}], "references": [{"title": "Long-term recurrent convo", "author": ["Donahue", "Jeff"], "venue": null, "citeRegEx": "Donahue and Jeff,? \\Q2015\\E", "shortCiteRegEx": "Donahue and Jeff", "year": 2015}, {"title": "Meteor: An Automatic Metric for MT Evaluation with High Levels of Correlation with Human Judgments", "author": ["Lavie", "Alon", "Abhaya Agarwal"], "venue": "In: SMT Workshop. StatMT \u201907. Prague, Czech Republic: ACL, pp. 228\u2013231.", "citeRegEx": "Lavie et al\\.,? 2007", "shortCiteRegEx": "Lavie et al\\.", "year": 2007}, {"title": "Rouge: A package for automatic evaluation of summaries", "author": ["Lin", "Chin-Yew"], "venue": "In: Text summarization branches out: ACL-04 workshop. Vol. 8.", "citeRegEx": "Lin and Chin.Yew,? 2004", "shortCiteRegEx": "Lin and Chin.Yew", "year": 2004}, {"title": "How NOT To Evaluate Your Dialogue System: An Empirical Study of Unsupervised Evaluation Metrics for Dialogue Response Generation", "author": ["Liu", "Chia-Wei"], "venue": "In: CoRR abs/1603.08023.", "citeRegEx": "Liu and Chia.Wei,? 2016", "shortCiteRegEx": "Liu and Chia.Wei", "year": 2016}, {"title": "Incorporating Unstructured Textual Knowledge Sources into Neural Dialogue Systems", "author": ["Lowe", "Ryan"], "venue": "In: NIPS Workshop on Machine Learning for Spoken Language Understanding.", "citeRegEx": "Lowe and Ryan,? 2015", "shortCiteRegEx": "Lowe and Ryan", "year": 2015}, {"title": "Recurrent neural network based language model", "author": ["Mikolov", "Tomas"], "venue": "In: INTERSPEECH, pp. 1045\u20131048.", "citeRegEx": "Mikolov and Tomas,? 2010", "shortCiteRegEx": "Mikolov and Tomas", "year": 2010}, {"title": "Stochastic natural language generation for spoken dialog systems", "author": ["Oh", "Alice", "Alexander I. Rudnicky"], "venue": "In: Computer Speech & Language 16.34, pp. 387\u2013407.", "citeRegEx": "Oh et al\\.,? 2002", "shortCiteRegEx": "Oh et al\\.", "year": 2002}, {"title": "Bleu: a Method for Automatic Evaluation of Machine Translation", "author": ["Papineni", "Kishore"], "venue": "In: ACL, pp. 311\u2013318.", "citeRegEx": "Papineni and Kishore,? 2002", "shortCiteRegEx": "Papineni and Kishore", "year": 2002}, {"title": "Natural Language Generation as Planning under Uncertainty for Spoken Dialogue Systems", "author": ["Rieser", "Verena", "Oliver Lemon"], "venue": "In: Empirical Methods in Natural Language Generation: Data-oriented Methods and Empirical Evaluation, pp. 105\u2013120.", "citeRegEx": "Rieser et al\\.,? 2010", "shortCiteRegEx": "Rieser et al\\.", "year": 2010}, {"title": "Building End-ToEnd Dialogue Systems Using Generative Hierarchical Neural Network Models", "author": ["Serban", "Iulian Vlad"], "venue": "In: AAAI, pp. 3776\u20133784.", "citeRegEx": "Serban and Vlad,? 2016", "shortCiteRegEx": "Serban and Vlad", "year": 2016}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "author": ["Srivastava", "Nitish"], "venue": "In: JMLR 15.1, pp. 1929\u20131958.", "citeRegEx": "Srivastava and Nitish,? 2014", "shortCiteRegEx": "Srivastava and Nitish", "year": 2014}, {"title": "Trainable Sentence Planning for Complex Information Presentations in Spoken Dialog Systems", "author": ["Stent", "Amanda", "Rashmi Prasad", "Marilyn A. Walker"], "venue": "In: ACL, pp. 79\u201386.", "citeRegEx": "Stent et al\\.,? 2004", "shortCiteRegEx": "Stent et al\\.", "year": 2004}, {"title": "Sequence to Sequence Learning with Neural Networks", "author": ["Sutskever", "Ilya", "Oriol Vinyals", "Quoc V. Le"], "venue": "In: NIPS, pp. 3104\u20133112.", "citeRegEx": "Sutskever et al\\.,? 2014", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "CIDEr: Consensus-based image description evaluation", "author": ["Vedantam", "Ramakrishna", "C. Lawrence Zitnick", "Devi Parikh"], "venue": "In: CVPR, pp. 4566\u20134575.", "citeRegEx": "Vedantam et al\\.,? 2015", "shortCiteRegEx": "Vedantam et al\\.", "year": 2015}, {"title": "A Neural Conversational Model", "author": ["Vinyals", "Oriol", "Quoc V. Le"], "venue": "In: CoRR abs/1506.05869.", "citeRegEx": "Vinyals et al\\.,? 2015", "shortCiteRegEx": "Vinyals et al\\.", "year": 2015}, {"title": "Show and tell: A neural image caption generator", "author": ["Vinyals", "Oriol"], "venue": "In: CVPR, pp. 3156\u20133164.", "citeRegEx": "Vinyals and Oriol,? 2015", "shortCiteRegEx": "Vinyals and Oriol", "year": 2015}, {"title": "Semantically Conditioned LSTM-based Natural Language Generation for Spoken Dialogue Systems", "author": ["Wen", "Tsung-Hsien"], "venue": "In: EMNLP, pp. 1711\u2013 1721.", "citeRegEx": "Wen and Tsung.Hsien,? 2015a", "shortCiteRegEx": "Wen and Tsung.Hsien", "year": 2015}, {"title": "Stochastic Language Generation in Dialogue using Recurrent Neural Networks with Convolutional Sentence Reranking", "author": ["Wen", "Tsung-Hsien"], "venue": "In: CoRR abs/1508.01755.", "citeRegEx": "Wen and Tsung.Hsien,? 2015b", "shortCiteRegEx": "Wen and Tsung.Hsien", "year": 2015}, {"title": "A Network-based End-to-End Trainable Task-oriented Dialogue System", "author": ["Wen", "Tsung-Hsien"], "venue": "In: CoRR abs/1604.04562.", "citeRegEx": "Wen and Tsung.Hsien,? 2016a", "shortCiteRegEx": "Wen and Tsung.Hsien", "year": 2016}, {"title": "Multi-domain Neural Network Language Generation for Spoken Dialogue Systems", "author": ["Wen", "Tsung-Hsien"], "venue": "In: CoRR abs/1603.01232.", "citeRegEx": "Wen and Tsung.Hsien,? 2016b", "shortCiteRegEx": "Wen and Tsung.Hsien", "year": 2016}, {"title": "Show, Attend and Tell: Neural Image Caption Generation with Visual Attention", "author": ["Xu", "Kelvin"], "venue": "In: ICML, pp. 2048\u20132057.", "citeRegEx": "Xu and Kelvin,? 2015", "shortCiteRegEx": "Xu and Kelvin", "year": 2015}, {"title": "Describing Videos by Exploiting Temporal Structure", "author": ["Yao", "Li"], "venue": "In: ICCV, pp. 4507\u20134515.", "citeRegEx": "Yao and Li,? 2015", "shortCiteRegEx": "Yao and Li", "year": 2015}, {"title": "Recurrent Neural Network Regularization", "author": ["Zaremba", "Wojciech", "Ilya Sutskever", "Oriol Vinyals"], "venue": "In: CoRR abs/1409.2329.", "citeRegEx": "Zaremba et al\\.,? 2014", "shortCiteRegEx": "Zaremba et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 14, "context": "Recently, Karpathy and Li (2015), and Vinyals et al. (2015) used RNNs in a multi-modal setting to generate captions for images.", "startOffset": 38, "endOffset": 60}, {"referenceID": 14, "context": "Recently, Karpathy and Li (2015), and Vinyals et al. (2015) used RNNs in a multi-modal setting to generate captions for images. Donahue et al. (2015) processed per-frame features from convolutional neural networks using LSTM-RNNs to generate descriptions of videos.", "startOffset": 38, "endOffset": 150}], "year": 2017, "abstractText": "Natural language generation plays a critical role in any spoken dialogue system. We present a new approach to natural language generation using recurrent neural networks in an encoderdecoder framework. In contrast with previous work, our model uses both lexicalized and delexicalized versions of slot-value pairs for each dialogue act. This allows our model to learn from all available data, rather than being restricted to learning only from delexicalized slot-value pairs. We show that this helps our model generate more natural sentences with better grammar. We further improve our model\u2019s performance by initializing its weights from a pretrained language model. Human evaluation of our best-performing model indicates that it generates sentences which users find more natural and appealing.", "creator": "LaTeX with hyperref package"}}}