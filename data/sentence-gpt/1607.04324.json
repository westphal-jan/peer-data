{"id": "1607.04324", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Apr-2016", "title": "Random-Key Cuckoo Search for the Travelling Salesman Problem", "abstract": "Combinatorial optimization problems are typically NP-hard, and thus very challenging to solve. In this paper, we present the random key cuckoo search (RKCS) algorithm for solving the famous Travelling Salesman Problem (TSP). We used a simplified random-key encoding scheme to pass from a continuous space (real numbers) to a combinatorial space. We also consider the displacement of a solution in both spaces using Levy flights. The performance of the proposed RKCS is tested against a set of benchmarks of symmetric TSP from the well-known TSPLIB library. The results of the tests show that RKCS is superior to some other metaheuristic algorithms.\n\n\n\n\n\nThis paper is a special reference to the Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete Turing-complete\nThe two main advantages of such a C.D. algorithm are that it makes it possible to solve a number of specific problems. We propose a C.D. algorithm for solving a number of general problems in the above graph.\nLet's create a graph that combines two sets of problems in a sequence using a fixed vector:\nIn the case of the TSP problem, the vector will be a binary number with a length. (This works in both parallel and parallel). This means that our number one solution is a binary number. A binary number will be the first choice for our solution, since it will have an length of 0. So, we want to solve this by combining two vectors of two vectors with a length of 0.\nLet's say we have a number of problems in a row. In a linear C.D. algorithm, the number one solution is a binary number. (This is not necessary as a scalar argument, since we can use the first vector to store the number one solution, but it is important to add an alternative argument to the first vector).\nThe first solution is a nonlinear C.D. algorithm.\nWe can also test the problem using a vector of four dimensions and a fixed vector of four dimensions. This results in a more efficient and easy way to solve the problem. Let's say we have a finite number of problems. (The first and last are all solutions in a linear C.D. algorithm that uses all four dimensions). For each of these three solutions, we have to find a finite number of", "histories": [["v1", "Thu, 14 Apr 2016 12:40:50 GMT  (776kb)", "http://arxiv.org/abs/1607.04324v1", "13 pages, 6 figures"]], "COMMENTS": "13 pages, 6 figures", "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["aziz ouaarab", "b ahiod", "xin-she yang"], "accepted": false, "id": "1607.04324"}, "pdf": {"name": "1607.04324.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 7.\n04 32\n4v 1"}, {"heading": "1 Introduction", "text": "Many combinatorial optimization problems are NP-hard, and thus very challenging to solve. In fact, they cannot be solved efficiently by any known algorithm in a practically short time scale when the size of the problem is moderately large [9]. The main difficulty arises with the number of combinations which increases exponentially with the size of the problem. Searching for every possible combination is extremely computationally expansive and unrealistic. An example of these problems is the travelling salesman problem [10] in which a salesperson has to visit a list of cities exactly once, and returning to the departure city, with the aim of minimizing the total travelled distance or the overall cost of the trip.\nDespite the challenges, TSP remains one of the most widely studied problems in combinatorial optimization. It is often used for testing optimization algorithms. Problems such as TSP do not have an efficient algorithm to solve them. It is practically very difficult to get a solution of optimal quality and in a reduced runtime simultaneously. This requires some heuristic algorithms that can find good (not necessarily optimal) solutions in a good runtime by trial and error. Approximate algorithms such as metaheuristics [2] are actually the best choice to solve many combinatorial optimization problems. They are characterized by their\nsimplicity and flexibility while demonstrating remarkable effectiveness. Metaheuristics are usually simple to implement; however, they are often capable to solve complex problems and can thus be adapted to solve problems with diverse objective function properties, either continuous, discrete or mixed, including many real-world optimization problems, from engineering to artificial intelligence [22].\nIn essence, metaheuristics are optimization algorithms that adopt some strategies to explore and exploit a given solution space with the aim to find the best solution. They balance their search concentration between some promising regions and the all space regions. They generally begin with a set of initial solutions, and then, examine step by step a sequence of solutions to reach (hopefully) the optimal solution of the problem.\nSome issues may arise when solving a combinatorial optimization problem with a metaheuristic, and a key issue is how to define neighbourhood solutions for such problems. Several metaheuristics are designed in principle for continuous optimization problems. So, the question is how to treat combinatorial problems properly without losing the good performance of these metaheuristics. In this paper, we propose the random-key cuckoo search (RKCS) algorithm using the random-key encoding scheme to represent a position, found by the cuckoo search algorithm, in a combinatorial space.\nTSP is solved with random keys by various metaheuristics [19, 4]. This work presents a novel approach using Cuckoo Search algorithm (CS)[25], based on random keys [1], with a simple local search procedure to solve TSP. CS is a nature-inspired metaheuristic algorithm which was developed by Yang and Deb in 2009 to solve continuous optimization problems. With this approach, we aim to formulate the transition between a continuous search space and a combinatorial search space without passing through traditional adaptation operators that may affect the performance of the algorithm, and to ensure a direct interpretation of various operators used by metaheuristics in continuous search space.\nThe rest of this paper is organized as follows: Sect. 2, first, introduces the standard cuckoo search. Section 3 introduces briefly the TSP. Section 4 presents the random-key encoding scheme, while Sect. 5 describes the discrete CS to solve symmetric TSP using Random key. Then, Sect. 6 presents results of numerical experiments on a set of benchmarks of symmetric TSP from the TSPLIB library [18]. Finally, Sect. 7 concludes with some discussions and future directions."}, {"heading": "2 Cuckoo Search Algorithm", "text": "Some cuckoo species can have the so-called brood parasitism as an aggressive reproduction strategy. This most studied and discussed feature is that cuckoos lay eggs in a previously observed nest of another species to let host birds hatch and brood their young cuckoo chicks. From the evolutionary point of view, cuckoos aim to increase the probability of survival and reduce the probability of abandoning eggs by the host birds[16]. The behaviour of cuckoos is mimicked successfully in the cuckoo search algorithm, in combination with Le\u0301vy flights to effectively search better and optimal survival strategy. Le\u0301vy flights [3], named by the French mathematician Paul Le\u0301vy, represent a model of random walks characterized by their step lengths which obey a power-law distribution. Several scientific studies have shown that the search for preys by hunters follows typically the same characteristics of Le\u0301vy flights. This model is commonly presented by small random steps followed occasionally by large jumps [3, 20].\nInspired by these behaviours and strategies, the Cuckoo Search (CS) algorithm was\ndeveloped by Xin-She Yang and Suash Deb in 2009, which was initially designed for solving multimodal functions. It has been shown that CS can be very efficient in dealing with highly nonlinear optimization problems [24, 27, 26, 13, 12].\nCS is summarized as the following ideal rules: (1) each cuckoo lays one egg at a time and selects a nest randomly; (2) the best nest with the highest quality of egg can pass onto the new generations; (3) the number of host nests is fixed, and the egg laid by a cuckoo can be discovered by the host bird with a probability pa \u2208 [0, 1].\nCS uses a balanced combination of a local random walk and the global explorative random walk, controlled by a switching parameter pa. The local random walk can be written as\nxt+1i = x t i + \u03b1s\u2297H(pa \u2212 \u01eb)\u2297 (x t j \u2212 x t k), (1)\nwhere xtj and x t k are two different solutions selected randomly by random permutation, H(u) is a Heaviside function, \u01eb is a random number drawn from a uniform distribution, and s is the step size. On the other hand, the global random walk is carried out using Le\u0301vy flights\nxt+1i = x t i + \u03b1L(s, \u03bb), (2)\nwhere\nL(s, \u03bb) = \u03bb\u0393(\u03bb) sin(\u03c0\u03bb/2)\n\u03c0\n1\ns1+\u03bb , (s \u226b s0 > 0). (3)\nHere \u03b1 > 0 is the step size scaling factor, which should be related to the scales of the problem of interest. Le\u0301vy flights have an infinite variance with an infinite mean [25].\nIn this approach we have taken as a basis an improved version of CS [14]. This improvement considers a new category of cuckoos that can engage a kind of surveillance on nests likely to be a host. These cuckoos use mechanisms before and after brooding such as the observation of the host nest to decide if the chosen nest is the best choice or not. So, from the current solution, this portion pc of cuckoos searches in the same area a new better solution via Le\u0301vy flights.\nThe goal of the improvement is to strengthen intensive search around the current solutions, using the new fraction pc. The process of this fraction can be introduced in the standard algorithm of CS as shown in Algorithm 1."}, {"heading": "3 Travelling Salesman Problem", "text": "To simplify the statement of the travelling salesman problem, we can assume that we have a list of m cities that must be visited by a salesperson and returning to the departure city. To calculate the best tour in term of distance, some rules or assumptions can be used before starting the trip. Each city on the list must be visited exactly once, and for each pair of cities, given that the distance between any two cities is known. This problem is commonly called as the \u201cThe travelling salesman problem\u201d.\nThe TSP can be stated formally [7] as: Let C = {c1, . . . , cm} be a set of m distinct cities, E = (ci, cj) : i, j \u2208 {1, . . . ,m} be the edge set, and dcicj be a cost measure associated with the edge (ci, cj) \u2208 E. The objective of the TSP is to find the minimal length of a closed tour that visits each city once. Cities ci \u2208 C are represented by their coordinates (cix , ciy) and dcicj = \u221a (cix \u2212 cjx) 2 + (ciy \u2212 cjy)\n2 is the Euclidean distance between ci and cj .\nAlgorithm 1 Improved CS Algorithm\n1: Objective function f(x), x = (x1, . . . , xm) T 2: Generate initial population of n host nests xi(i = 1, . . . , n) 3: while (t <MaxGen) or (stop criterion) do 4: Start searching with a fraction (pc) of smart cuckoos 5: Get a cuckoo randomly by Le\u0301vy flights 6: Evaluate its quality/fitness Fi 7: Choose a nest among n (say, j) randomly 8: if (Fi > Fj) then 9: replace j by the new solution;\n10: end if 11: A fraction (pa) of worse nests are abandoned and new ones are built; 12: Keep the best solutions (or nests with quality solutions); 13: Rank the solutions and find the current best 14: end while 15: Postprocess results and visualization\nA tour can be represented as a cyclic permutation [8] \u03c0 = (\u03c0(1), \u03c0(2), . . . , \u03c0(m)) of cities from 1 to m if \u03c0(i) is interpreted to be the city visited in step i, i = 1, . . . ,m. The cost of a permutation (tour) is defined as:\nf(\u03c0) = m\u22121 \u2211\ni=1\nd\u03c0(i)\u03c0(i+1) + d\u03c0(m)\u03c0(1) (4)\nIf dcicj 6= dcjci for at least one (ci, cj), we say that it is an Asymmetric Euclidean TSP, while if dcicj = dcjci then the TSP becomes a Symmetric Euclidean TSP, which is adopted in this paper. Given m as the number of cities to visit in the list, the total number of possible tours covering all cities can be seen as a set of feasible solutions of the TSP and is given as m!.\nThe challenges of solving a TSP have motivated many researchers to design various algorithms. An effective search should be able to detect the best solution for the majority of its instances in a reasonable runtime. The good thing about TSP is that the statement is simple and requires no mathematical background to understand, though it is difficult to produce a good solution. However, TSP is crucially important in both academia and applications. Lenstra et. al. and Reinelt [11, 17] gave some reviews of direct and indirect applications of TSP in several industrial and technological fields, such as drilling problem of printed circuit boards (PCBs), overhauling gas turbine engines, X-ray crystallography, computer wiring, order-picking problem in warehouses, vehicle routing, and mask plotting in PCB production."}, {"heading": "4 Random-Key Encoding Scheme", "text": "Random-key encoding scheme [1] is a technique that can be used to transform a position in a continuous space and convert it into a combinatorial one. It uses a vector of real numbers by associating each number with a weight. These weights are used to generate one combination as a solution.\nThe random real numbers drawn uniformly from [0, 1) compose a vector showed in Fig. 4. On the other hand, the combinatorial vector is composed of integers ordered according to the weights of real numbers in the first vector, illustrated as follows (Fig. 4):"}, {"heading": "5 Random Key CS for TSP", "text": "Random keys are an encoding scheme which was used early with genetic algorithms for sequencing and optimization problems by Bean [1]. It is based on random real numbers in a continuous space to encode solutions in a combinatorial space. These random numbers, presented as tags, are generated from [0.1)m space, where m is the size of the TSP instance to be solved (or the dimension of this space). Our approach here extends this idea by performing Le\u0301vy flights distribution to generate the random numbers. This allows an improved way to balance the search for solutions in local areas as well as global areas. In this work, we will thus use both random walks and Le\u0301vy flights [23] whose step lengths are chosen from a probability distribution with a power-law tail."}, {"heading": "5.1 Solution Representation", "text": "Figure 2 and Algorithm 2 present the steps of generating a TSP solution using random keys. First, agents are randomly positioned according to their real values in [0, 1). Each agent has an integer index regardless of his ascending order among other agents in the linked list (see Fig. 2). All agents are ordered according to their weights (real numbers) and their indices form together an initial solution of the TSP instance. So, this essentially means that the integers/agent indices, here, correspond to the city index and the order of agents is the visiting order of the cities.\nAlgorithm 2 Initial Solution Algorithm\n1: Set of m agents ai (i = 1, . . . ,m); 2: for i = 1 to m do 3: Assign a random real number in [0.1) for agent ai; 4: end for 5: for i = 1 to m do 6: Get the order of agent ai according to his weight; 7: end for 8: for i = 1 to m do 9: The agent index is the city index;\n10: The agent order is the city visiting order; 11: end for 12: Return a solution of cities\u2019 visiting order and weights;"}, {"heading": "5.2 Displacement", "text": "The procedure of generating new solutions by a perturbation in the real space can lead to some issues when these agents start to move in [0, 1). Such moves can affect the order of agents in the linked list and therefore a new TSP solution can be generated as shown in Fig. 3. The displacement of each agent is guided directly by Le\u0301vy flights. The order of each city is changed by small perturbations or big jumps according to the values generated in their weights via Le\u0301vy flights.\nOur approach here is mainly based on two types of search moves: 1) global search carried out on solution areas guided by the movements (following Le\u0301vy flights) of agents; 2) local search which detects the best solutions in the areas found by the agents. The combination of both local and global search moves can improve the performance. Briefly, RKCS begins with a search for new promising areas. It combines intensification and diversification via small steps and large jumps to distant areas. When pointing on an area found by Le\u0301vy flights, the best solution in this area is detected and another search is triggered to generate a new one via Le\u0301vy flights. So, we can summarize these steps by the following Algorithm 3:\nAlgorithm 3 Generating New Solution\n1: Solution S of m cities/agents ai (i = 1, . . . ,m); 2: Select randomly l agents (1 \u2264 l \u2264 m). 3: for i = 1 to l do 4: Assign new position via Le\u0301vy flights (Equation 2) for agent ai; 5: Reposition ai in the linked list (see Figure 3); 6: Update S; 7: end for 8: Return the new generated solution S;"}, {"heading": "5.3 Local Search", "text": "After finding a new area by Le\u0301vy flights, a local search is performed to detect the best solution in this area. For this local search, 2-opt move [6] is used where it removes two edges in the TSP solution and reconnects the new two created paths, in a different possible way as showed in Fig. 4. In the minimization case, it is done only if the new tour is shorter than the current one. Obviously, this process is repeated until no further improvement is possible or when a given number of steps is reached.\nSteepest Descent (Algorithm 4) is a simple local search method that can be easily trapped in a local minimum, and generally, it can not find a good quality solutions. We choose this simplified local search \u201cSteepest Descent\u201d method to show the performance of CS combined with RK. It allowed us to generate solutions of good quality, without introducing an advanced local search method.\nAlgorithm 4 Steepest Descent Algorithm\n1: Objective function f(x), x = (x1, . . . , xm) T ; 2: Initial TSP solution S0 of m ordered cities; 3: Current solution S, S \u2190\u2212 S0; 4: Choose stop boolean value, stop \u2190\u2212 FALSE; 5: while stop = FALSE do 6: Choose the best neighbour Sv of S via 2-Opt moves; 7: if f(Sv) < f(S) then 8: Replace S by Sv; 9: else\n10: stop \u2190\u2212 TRUE 11: end if 12: end while 13: Return S;"}, {"heading": "5.4 RKCS Algorithm", "text": "Using the same steps of Improved CS [14] and as summarized in Algorithm 1, before starting the search process, RKCS generates the random initial solution or population as explained in Fig. 2 and Algorithm 2. Generating a random initial population is to show how RKCS can find good solutions in the search space without using an enhancement pre-processes.\nThe second phase is triggering the pc portion of smart cuckoos. These cuckoos begin by exploring new areas from the current solutions. As shown in Fig. 3, they use Le\u0301vy flights to move in the real space and interpreting this move to have a new TSP solution in the new area. The second step is to find a good solution in this area following Algorithm 4.\nAfter pc portion phase, RKCS employs one cuckoo to search for a new good solution, starting from the best solution of the population. It proceeds, like the second phase (pc portion phase), in two steps. Firstly, it locates a new area, from the best solution, via Le\u0301vy flights and then finds a good solution in this area. The found solution is compared with a random selected solution in the population. The best one of the both solutions earns its place in the population.\nThe last phase is for the worst and abandoned solutions that will be replaced by new ones. They start searching, for a new good solution, far from the best solution in the population by a big jump. In this case a big jump is perturbing more agents via Le\u0301vy flights. All these phases are illustrated in the flowchart of RKCS (Fig. 5)."}, {"heading": "6 Experimental results", "text": "We have implemented the proposed random key cuckoo search and tested it using the wellknown TSPLIB library [18]. For each instance, 30 independent runs have been carried out. The properly selected parameter values used for the experiments of RKCS algorithm are shown in Table 1.\nTable 2 shows the test results of running RKCS algorithm to solve some benchmark instances of the symmetric TSP from the TSPLIB library [18]. The first column corresponds to the name of instances with their optimum in parentheses. The column \u2018Best\u2019 shows the length of the best solution found by RKCS, the column \u2018Average\u2019 gives the average solution found by RKCS, the column \u2018Worst\u2019 shows the length of the worst solution length among\nthe 30 independent runs of the RKCS algorithm. These results confirm that the proposed approach is able to find good or the optimum solution for the tested instances (\u2018bold\u2019 in the Table 2 shows that RKCS reaches the optimal solution of the tested instance). Therefor, we can say that the random-key encoding scheme can be a very useful tool for switching from continuous to combinatorial spaces. It allows operators of the continuous space to behave freely, then projecting the changes made by these operators in the combinatorial space. It also facilitates a better control in balancing intensification and diversification through Le\u0301vy flights, which make intensified small steps in a limited region followed by a big explorative jump to a distant region. Using the real numbers, Le\u0301vy flights can easily act with the notion of distance and can define clearly small or big steps. Then RK projects these changes in the space of TSP solutions.\nThe RKCS experimental results are then compared with all other algorithms tested in \u2018Hybrid Gravitational Search Algorithm with Random-key Encoding Scheme Combined with Simulated Annealing\u2019 [4]. Table 3 and Fig. 6 show that RKCS outperforms all these algorithms in the tested instances. A good balance between exploration and exploitation of space areas and a simple local search technique are significant components to reach good results. This confirms that the proposed random-key encoding scheme can provide a good performance by combining global and local search strength in one entity within RKCS via Le\u0301vy flights.\nIn Table 3, the \u2018Best\u2019 denotes the best known-so-far optimal solution quality, and the other results recorded were the ratio of the solutions found by each algorithm to the optimal solution over 30 independent runs."}, {"heading": "7 Conclusion", "text": "In this proposed approach, we used the random-key encoding scheme combined with the cuckoo search to develop the random-key cuckoo search (RKCS) algorithm for solving TSP. By testing the standard TSP instances\u2019 library, we can confirm that the proposed approach is very efficient and can obtain good results.\nRandom keys have been used to switch between the continuous and the combinatorial search space, which enable cuckoo search to provide a good search mechanism with a fine balance between intensification and diversification.\nHowever, RKCS can be altered or improved by many ways. For example, it can be useful to adapt the agent moves with some existing or new move operators in the combinatorial space. In addition, the tuning of algorithm-dependent parameters can be also fruitful [28], which may provide further research topics to see if the proposed approach can be further\nimproved. It can be expected that our approach can be used to solve other combinatorial optimization problems such as routing, scheduling and even mixed-integer programming problems. We can also generalize this work to solve some kinds of TSP problems such as Asymmetric [5] , Spherical [15] and generalized [21] TSP."}], "references": [{"title": "Genetic algorithms and random keys for sequencing and optimization", "author": ["J. Bean"], "venue": "ORSA journal on computing", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1994}, {"title": "Metaheuristics in combinatorial optimization: Overview and conceptual comparison", "author": ["C. Blum", "A. Roli"], "venue": "ACM Computing Surveys (CSUR) 35(3),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2003}, {"title": "L\u00e9vy flights in dobe ju/?hoansi foraging patterns", "author": ["C.T. Brown", "L.S. Liebovitch", "R. Glendon"], "venue": "Human Ecology 35(1),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2007}, {"title": "Hybrid gravitational search algorithm with random-key encoding scheme combined with simulated annealing", "author": ["H. Chen", "S. Li", "Z. Tang"], "venue": "Int J Comput Sci Netw Security 11,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "The asymmetric traveling salesman problem: Algorithms, instance generators, and tests", "author": ["J. Cirasella", "D.S. Johnson", "L.A. McGeoch", "W. Zhang"], "venue": "In: Algorithm Engineering and Experimentation,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2001}, {"title": "A method for solving traveling-salesman problems", "author": ["G. Croes"], "venue": "Operations Research 6(6),", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1958}, {"title": "Traveling Salesman Problem, Theory and Applications", "author": ["D. Davendra"], "venue": "InTech", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}, {"title": "The traveling salesman problem and its variations, vol", "author": ["G. Gutin", "A.P. Punnen"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Approximation algorithms for NP-hard problems", "author": ["D.S. Hochbaum"], "venue": "PWS Publishing Co", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1996}, {"title": "The traveling salesman problem: a guided tour of combinatorial optimization, vol", "author": ["E.L. Lawler", "J.K. Lenstra", "A.R. Kan", "D.B. Shmoys"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1985}, {"title": "Some simple applications of the travelling salesman problem", "author": ["J.K. Lenstra", "A.R. Kan"], "venue": "Operational Research Quarterly pp", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1975}, {"title": "Cuckoo search algorithm for optimization problems-a literature review", "author": ["A. Mohamad", "A.M. Zain", "N.E.N. Bazin", "A. Udin"], "venue": "Applied Mechanics and Materials 421,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2013}, {"title": "A process prediction model based on cuckoo algorithm for abrasive waterjet machining", "author": ["A. Mohamad", "A.M. Zain", "N.E.N. Bazin", "A. Udin"], "venue": "Journal of Intelligent Manufacturing pp", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}, {"title": "Improved and discrete cuckoo search for solving the travelling salesman problem", "author": ["A. Ouaarab", "B. Ahiod", "X.S. Yang"], "venue": "Cuckoo Search and Firefly Algorithm,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}, {"title": "A novel discrete cuckoo search algorithm for spherical traveling salesman problem. Applied mathematics & information sciences", "author": ["X. Ouyang", "Y. Zhou", "Q. Luo", "H. Chen"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "The Traveling Salesman: Computational Solutions for TSP Applications", "author": ["G. Reinelt"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1994}, {"title": "A hybrid random-key genetic algorithm for a symmetric travelling salesman problem", "author": ["F. Samanlioglu", "M.B. Kurz", "W.G. Ferrell", "S. Tangudu"], "venue": "International Journal of Operational Research 2(1),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}, {"title": "L\u00e9vy flights and related topics in physics", "author": ["M.F. Shlesinger", "G.M. Zaslavsky", "U. Frisch"], "venue": "Levy flights and related topics in Physics, vol", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1995}, {"title": "A random-key genetic algorithm for the generalized traveling salesman problem", "author": ["L.V. Snyder", "M.S. Daskin"], "venue": "European Journal of Operational Research 174(1),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2006}, {"title": "Engineering Optimization: An Introduction with Metaheuristic Applications", "author": ["X.S. Yang"], "venue": "Wiley, USA", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2010}, {"title": "Nature-Inspired Metaheuristic Algorithms", "author": ["X.S. Yang"], "venue": "Luniver Press", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Cuckoo Searcha and Firefly Algorithm: Theory and Applications", "author": ["X.S. Yang"], "venue": null, "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2013}, {"title": "Cuckoo search via l\u00e9vy flights", "author": ["X.S. Yang", "S. Deb"], "venue": "Nature & Biologically Inspired Computing,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2009}, {"title": "Engineering optimisation by cuckoo search", "author": ["X.S. Yang", "S. Deb"], "venue": "International Journal of Mathematical Modelling and Numerical Optimisation", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "Multiobjective cuckoo search for design optimization", "author": ["X.S. Yang", "S. Deb"], "venue": "Computers & Operations Research", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2013}, {"title": "A framework for self-tuning optimization algorithms", "author": ["X.S. Yang", "S. Deb", "M. Loomes", "M. Karamanoglu"], "venue": "Neural Computing & Applications", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2013}], "referenceMentions": [{"referenceID": 8, "context": "In fact, they cannot be solved efficiently by any known algorithm in a practically short time scale when the size of the problem is moderately large [9].", "startOffset": 149, "endOffset": 152}, {"referenceID": 9, "context": "An example of these problems is the travelling salesman problem [10] in which a salesperson has to visit a list of cities exactly once, and returning to the departure city, with the aim of minimizing the total travelled distance or the overall cost of the trip.", "startOffset": 64, "endOffset": 68}, {"referenceID": 1, "context": "Approximate algorithms such as metaheuristics [2] are actually the best choice to solve many combinatorial optimization problems.", "startOffset": 46, "endOffset": 49}, {"referenceID": 19, "context": "Metaheuristics are usually simple to implement; however, they are often capable to solve complex problems and can thus be adapted to solve problems with diverse objective function properties, either continuous, discrete or mixed, including many real-world optimization problems, from engineering to artificial intelligence [22].", "startOffset": 323, "endOffset": 327}, {"referenceID": 16, "context": "TSP is solved with random keys by various metaheuristics [19, 4].", "startOffset": 57, "endOffset": 64}, {"referenceID": 3, "context": "TSP is solved with random keys by various metaheuristics [19, 4].", "startOffset": 57, "endOffset": 64}, {"referenceID": 22, "context": "This work presents a novel approach using Cuckoo Search algorithm (CS)[25], based on random keys [1], with a simple local search procedure to solve TSP.", "startOffset": 70, "endOffset": 74}, {"referenceID": 0, "context": "This work presents a novel approach using Cuckoo Search algorithm (CS)[25], based on random keys [1], with a simple local search procedure to solve TSP.", "startOffset": 97, "endOffset": 100}, {"referenceID": 2, "context": "L\u00e9vy flights [3], named by the French mathematician Paul L\u00e9vy, represent a model of random walks characterized by their step lengths which obey a power-law distribution.", "startOffset": 13, "endOffset": 16}, {"referenceID": 2, "context": "This model is commonly presented by small random steps followed occasionally by large jumps [3, 20].", "startOffset": 92, "endOffset": 99}, {"referenceID": 17, "context": "This model is commonly presented by small random steps followed occasionally by large jumps [3, 20].", "startOffset": 92, "endOffset": 99}, {"referenceID": 21, "context": "It has been shown that CS can be very efficient in dealing with highly nonlinear optimization problems [24, 27, 26, 13, 12].", "startOffset": 103, "endOffset": 123}, {"referenceID": 24, "context": "It has been shown that CS can be very efficient in dealing with highly nonlinear optimization problems [24, 27, 26, 13, 12].", "startOffset": 103, "endOffset": 123}, {"referenceID": 23, "context": "It has been shown that CS can be very efficient in dealing with highly nonlinear optimization problems [24, 27, 26, 13, 12].", "startOffset": 103, "endOffset": 123}, {"referenceID": 12, "context": "It has been shown that CS can be very efficient in dealing with highly nonlinear optimization problems [24, 27, 26, 13, 12].", "startOffset": 103, "endOffset": 123}, {"referenceID": 11, "context": "It has been shown that CS can be very efficient in dealing with highly nonlinear optimization problems [24, 27, 26, 13, 12].", "startOffset": 103, "endOffset": 123}, {"referenceID": 0, "context": "CS is summarized as the following ideal rules: (1) each cuckoo lays one egg at a time and selects a nest randomly; (2) the best nest with the highest quality of egg can pass onto the new generations; (3) the number of host nests is fixed, and the egg laid by a cuckoo can be discovered by the host bird with a probability pa \u2208 [0, 1].", "startOffset": 327, "endOffset": 333}, {"referenceID": 22, "context": "L\u00e9vy flights have an infinite variance with an infinite mean [25].", "startOffset": 61, "endOffset": 65}, {"referenceID": 13, "context": "In this approach we have taken as a basis an improved version of CS [14].", "startOffset": 68, "endOffset": 72}, {"referenceID": 6, "context": "The TSP can be stated formally [7] as: Let C = {c1, .", "startOffset": 31, "endOffset": 34}, {"referenceID": 7, "context": "A tour can be represented as a cyclic permutation [8] \u03c0 = (\u03c0(1), \u03c0(2), .", "startOffset": 50, "endOffset": 53}, {"referenceID": 10, "context": "and Reinelt [11, 17] gave some reviews of direct and indirect applications of TSP in several industrial and technological fields, such as drilling problem of printed circuit boards (PCBs), overhauling gas turbine engines, X-ray crystallography, computer wiring, order-picking problem in warehouses, vehicle routing, and mask plotting in PCB production.", "startOffset": 12, "endOffset": 20}, {"referenceID": 15, "context": "and Reinelt [11, 17] gave some reviews of direct and indirect applications of TSP in several industrial and technological fields, such as drilling problem of printed circuit boards (PCBs), overhauling gas turbine engines, X-ray crystallography, computer wiring, order-picking problem in warehouses, vehicle routing, and mask plotting in PCB production.", "startOffset": 12, "endOffset": 20}, {"referenceID": 0, "context": "Random-key encoding scheme [1] is a technique that can be used to transform a position in a continuous space and convert it into a combinatorial one.", "startOffset": 27, "endOffset": 30}, {"referenceID": 0, "context": "Random keys are an encoding scheme which was used early with genetic algorithms for sequencing and optimization problems by Bean [1].", "startOffset": 129, "endOffset": 132}, {"referenceID": 20, "context": "In this work, we will thus use both random walks and L\u00e9vy flights [23] whose step lengths are chosen from a probability distribution with a power-law tail.", "startOffset": 66, "endOffset": 70}, {"referenceID": 5, "context": "For this local search, 2-opt move [6] is used where it removes two edges in the TSP solution and reconnects the new two created paths, in a different possible way as showed in Fig.", "startOffset": 34, "endOffset": 37}, {"referenceID": 13, "context": "Using the same steps of Improved CS [14] and as summarized in Algorithm 1, before starting the search process, RKCS generates the random initial solution or population as explained in Fig.", "startOffset": 36, "endOffset": 40}, {"referenceID": 3, "context": "The RKCS experimental results are then compared with all other algorithms tested in \u2018Hybrid Gravitational Search Algorithm with Random-key Encoding Scheme Combined with Simulated Annealing\u2019 [4].", "startOffset": 190, "endOffset": 193}, {"referenceID": 3, "context": "Table 3: Comparison of experimental results of RKCS with all algorithms cited in [4] Instances eil51 st70 rd100 pr124 rat195 Best 426 675 7910 59030 2323 Average GA 2.", "startOffset": 81, "endOffset": 84}, {"referenceID": 25, "context": "In addition, the tuning of algorithm-dependent parameters can be also fruitful [28], which may provide further research topics to see if the proposed approach can be further", "startOffset": 79, "endOffset": 83}, {"referenceID": 4, "context": "We can also generalize this work to solve some kinds of TSP problems such as Asymmetric [5] , Spherical [15] and generalized [21] TSP.", "startOffset": 88, "endOffset": 91}, {"referenceID": 14, "context": "We can also generalize this work to solve some kinds of TSP problems such as Asymmetric [5] , Spherical [15] and generalized [21] TSP.", "startOffset": 104, "endOffset": 108}, {"referenceID": 18, "context": "We can also generalize this work to solve some kinds of TSP problems such as Asymmetric [5] , Spherical [15] and generalized [21] TSP.", "startOffset": 125, "endOffset": 129}], "year": 2016, "abstractText": "Combinatorial optimization problems are typically NP-hard, and thus very challenging to solve. In this paper, we present the random key cuckoo search (RKCS) algorithm for solving the famous Travelling Salesman Problem (TSP). We used a simplified random-key encoding scheme to pass from a continuous space (real numbers) to a combinatorial space. We also consider the displacement of a solution in both spaces using L\u00e9vy flights. The performance of the proposed RKCS is tested against a set of benchmarks of symmetric TSP from the well-known TSPLIB library. The results of the tests show that RKCS is superior to some other metaheuristic algorithms.", "creator": "LaTeX with hyperref package"}}}