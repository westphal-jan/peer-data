{"id": "1608.06111", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Aug-2016", "title": "An Incremental Parser for Abstract Meaning Representation", "abstract": "We describe an incremental parser for mapping input text into Abstract Meaning Representation (AMR) graphs. Our parser is based on a transition system for dependency parsing, and allows to incrementally parse the sentence into an AMR graph, if all other components that are needed by the parser (such as the part-of-speech tagger and the dependency parser) are incremental as well. We show that our parser has an advantage over state-of-the-art AMR parsers on several metrics.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 22 Aug 2016 10:30:18 GMT  (37kb)", "https://arxiv.org/abs/1608.06111v1", null], ["v2", "Thu, 25 Aug 2016 08:13:13 GMT  (37kb)", "http://arxiv.org/abs/1608.06111v2", null], ["v3", "Tue, 4 Oct 2016 14:04:16 GMT  (38kb)", "http://arxiv.org/abs/1608.06111v3", null], ["v4", "Thu, 12 Jan 2017 17:20:14 GMT  (41kb)", "http://arxiv.org/abs/1608.06111v4", "EACL 2017"], ["v5", "Mon, 10 Apr 2017 14:18:14 GMT  (41kb)", "http://arxiv.org/abs/1608.06111v5", "EACL 2017"]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["marco damonte", "shay b cohen", "giorgio satta"], "accepted": false, "id": "1608.06111"}, "pdf": {"name": "1608.06111.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Shay B. Cohen", "Giorgio Satta"], "emails": ["m.damonte@sms.ed.ac.uk", "scohen@inf.ed.ac.uk", "satta@dei.unipd.it"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 8.\n06 11\n1v 5\n[ cs\n.C L\n] 1\n0 A\npr 2\n01 7\nAn Incremental Parser for Abstract Meaning Representation\nMarco Damonte\nSchool of Informatics\nUniversity of Edinburgh\nm.damonte@sms.ed.ac.uk\nShay B. Cohen\nSchool of Informatics\nUniversity of Edinburgh\nscohen@inf.ed.ac.uk\nGiorgio Satta\nDept. of Information Engineering\nUniversity of Padua\nsatta@dei.unipd.it\nFrom the Proceedings of EACL 2017 (Valencia, Spain). This version includes slightly more information\nthan the published version (January, 2017).\nAbstract\nAbstract Meaning Representation (AMR) is a semantic representation for natural language that embeds annotations related to traditional tasks such as named entity recognition, semantic role labeling, word sense disambiguation and co-reference resolution. We describe a transition-based parser for AMR that parses sentences leftto-right, in linear time. We further propose a test-suite that assesses specific subtasks that are helpful in comparing AMR parsers, and show that our parser is competitive with the state of the art on the LDC2015E86 dataset and that it outperforms state-of-the-art parsers for recovering named entities and handling polarity."}, {"heading": "1 Introduction", "text": "Semantic parsing aims to solve the problem of canonicalizing language and representing its meaning: given an input sentence, it aims to extract a semantic representation of that sentence. Abstract meaning representation (Banarescu et al., 2013), or AMR for short, allows us to do that with the inclusion of most of the shallow-semantic natural language processing (NLP) tasks that are usually addressed separately, such as named entity recognition, semantic role labeling and coreference resolution. AMR is partially motivated by the need to provide the NLP community with a single dataset that includes basic disambiguation information, instead of having to rely on different datasets for each disambiguation problem. The annotation process is straightforward, enabling the development of large datasets.\nSeveral parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016). This line of research is new and current results suggest a large room for improvement. Greedy transition-based methods (Nivre, 2008) are one of the most popular choices for dependency parsing, because of their good balance between efficiency and accuracy. These methods seem promising also for AMR, due to the similarity between dependency trees and AMR structures, i.e., both representations use graphs with nodes that have lexical content and edges that represent linguistic relations.\nA transition system is an abstract machine characterized by a set of configurations and transitions between them. The basic components of a configuration are a stack of partially processed words and a buffer of unseen input words. Starting from an initial configuration, the system applies transitions until a terminal configuration is reached. The sentence is scanned left to right, with linear time complexity for dependency parsing. This is made possible by the use of a greedy classifier that chooses the transition to be applied at each step.\nIn this paper we introduce a parser for AMR that is inspired by the ARCEAGER dependency transition system of Nivre (2004). The main difference between our system and ARCEAGER is that we need to account for the mapping from word tokens to AMR nodes, non-projectivity of AMR structures and reentrant nodes (multiple incoming edges). Our AMR parser brings closer dependency parsing and AMR parsing by showing that dependency parsing algorithms, with some modifications, can be used for AMR. Key properties\nsuch as working left-to-right, incrementality1 and linear complexity further strengthen its relevance.\nThe AMR parser of Wang et al. (2015a), called CAMR, also defines a transition system. It differs from ours because we process the sentence left-toright while they first acquire the entire dependency tree and then process it bottom-up. More recently Zhou et al. (2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004). Our transition system is also related to an adaptation of ARCEAGER for directed acyclic graphs (DAGs), introduced by Sagae and Tsujii (2008). This is also the basis for Ribeyre et al. (2015), a transition system used to parse dependency graphs. Similarly, Du et al. (2014) also address dependency graph parsing by means of transition systems. Analogously to dependency trees, dependency graphs have the property that their nodes consist of the word tokens, which is not true for AMR. As such, these transition systems are more closely related to traditional transition systems for dependency parsing.\nOur contributions in this paper are as follows:\n\u2022 In \u00a73 we develop a left-to-right, linear-time transition system for AMR parsing, inspired\nby the ARCEAGER transition system for dependency tree parsing;\n\u2022 In \u00a75 we claim that the Smatch score (Cai and Knight, 2013) is not sufficient to evalu-\nate AMR parsers and propose a set of metrics to alleviate this problem and better compare alternative parsers;\n\u2022 In \u00a76 we show that our algorithm is competitive with publicly available state-of-the-art\nparsers on several metrics."}, {"heading": "2 Background and Notation", "text": "AMR Structures AMRs are rooted and directed graphs with node and edge labels. An annotation example for the sentence I beg you to excuse me is shown in Figure 1, with the AMR graph reported in Figure 2.\nConcepts are represented as labeled nodes in the graph and can be either English words (e.g. I and you) or Propbank framesets (e.g. beg-01 and excuse-01). Each node in the graph is assigned to\n1Strictly speaking, transition-based parsing cannot achieve full incrementality, which requires to have a single connected component at all times (Nivre, 2004).\na variable in the AMR annotation so that a variable re-used in the annotation corresponds to reentrancies (multiple incoming edges) in the graph. Relations are represented as labeled and directed edges in the graph.\nNotation For most sentences in our dataset, the AMR graph is a directed acyclic graph (DAG), with a few specific cases where cycles are permitted. These cases are rare, and for the purpose of this paper, we consider AMR as DAGs.\nWe denote by [n] the set {1, . . . , n}. We define an AMR structure as a tuple (G,x, \u03c0), where x = x1 \u00b7 \u00b7 \u00b7 xn is a sentence, with each xi, i \u2208 [n], a word token, and G is a directed graph G = (V,E) with V and E the set of nodes and edges, respectively.2 We assume G comes along with a node labeling function and an edge labeling function. Finally, \u03c0 : V \u2192 [n] is a total alignment function that maps every node of the graph to an index i for the sentence x, with the meaning that node v represents (part of) the concept expressed by the word x\u03c0(v). 3\n2We collapse all multi-word named entities in a single token (e.g., United Kingdom becomes United Kingdom) both in training and parsing.\n3 \u03c0 is a function because we do not consider co-references, which would otherwise cause a node to map to multiple indices. This is in line with current work on AMR parsing.\nWe note that the function \u03c0 is not invertible, since it is neither injective nor surjective. For each i \u2208 [n], we let\n\u03c0\u22121(i) = {v | v \u2208 V, \u03c0(v) = i}\nbe the pre-image of i under \u03c0 (this set can be empty for some i), which means that we map a token in the sentence to a set of nodes in the AMR. In this way we can align each index i for x to the induced subgraph of G. More formally, we define\n\u2190\u2212\u03c0 (i) = (\u03c0\u22121(i), E \u2229 (\u03c0\u22121(i)\u00d7 \u03c0\u22121(i))), (1)\nwith the node and edge labeling functions of\u2190\u2212\u03c0 (i) inherited from G. Hence, \u2190\u2212\u03c0 (i) returns the AMR subgraph aligned with a particular token in the sentence."}, {"heading": "2.1 Transition-Based AMR Parsing", "text": "Similarly to dependency parsing, AMR parsing is partially based on the identification of predicateargument structures. Much of the dependency parsing literature focuses on transition-based dependency parsing\u2014an approach to parsing that scans the sentence from left to right in linear time and updates an intermediate structure that eventually ends up being a dependency tree.\nThe two most common transition systems for greedy dependency parsing are ARCSTANDARD and ARCEAGER. With ARCSTANDARD, a stack is maintained along with a buffer on which the left-to-right scan is performed. At each step, the parser chooses to scan a word in the buffer and shift it onto the stack, or else to create an arc between the two top-most elements in the stack and pop the dependent. ARCSTANDARD parses a sentence in a pure bottom-up, left-to-right fashion (similarly to shift-reduce context-free grammar parsers), and must delay the construction of right arcs until all the dependent node has been completed. This imposes strong limitations on the degree of incrementality of the parser. The ARCEAGER system was designed to improve on ARCSTANDARD by mixing bottom up and topdown strategies. More precisely, in the ARCEAGER parser left arcs are constructed bottom-up and right arcs are constructed top-down, so that right dependents can be attached to their heads even if some of their own dependents are not identified yet. In this way arcs are constructed as soon as the head and the dependent are available in the stack.\nBecause of the similarity of AMR structures to dependency structures, transition systems are also helpful for AMR parsing. Starting from the ARCEAGER system, we develop here a novel transition system, called AMREAGER that parses sentences into AMR structures. There are three key differences between AMRs and dependency trees that require further adjustments for dependency parsers to be used with AMRs.\nNon-Projectivity A key difference between English dependency trees and AMR structures is projectivity. Dependency trees in English are usually projective, roughly meaning that there are no crossing arcs if the edges are drawn in the semiplane above the words. While this restriction is empirically motivated in syntactic theories for English, it is no longer motivated for AMR structures.\nThe notion of projectivity can be generalized to AMR graphs as follows. The intuition is that we can use the alignment \u03c0 to map AMR edges back to the sentence x, and test whether there exist pairs of crossing edges. Figure 3 shows this mapping for the AMR of Figure 2, where the edge connecting excuse to I crosses another edge. More formally, consider an AMR edge e = (u, \u2113, v). Let \u03c0(u) = i and \u03c0(v) = j, so that u is aligned with xi and v is aligned with xj . The spanning set for e, written S(e), is the set of all nodes w such that \u03c0(w) = k and i < k < j if i < j or j < k < i if j < i. We say that e is projective if, for every node w \u2208 S(e), all of its parent and child nodes are in S(e) \u222a {u, v}; otherwise, we say that e is non-projective. An AMR is projective if all of its edges are projective, and is non-projective otherwise. This corresponds to the intuitive definition of projectivity for DAGs introduced in Sagae and Tsujii (2008) and is closely related to the definition of non-crossing graphs of Kuhlmann and Jonsson (2015).\nTable 1 demonstrates that a relatively small percentage of all AMR edges are non-projective. Yet, 35% of the sentences contain at least one nonprojective edge.\nReentrancy AMRs are graphs rather than trees because they can have nodes with multiple parents, called reentrant nodes, as in the node you for the AMR of Figure 2. There are two phenomena that cause reentrancies in AMR: control, where a reentrant edge appears between siblings of a control verb, and co-reference, where multiple mentions correspond to the same concept.6\nIn contrast, dependency trees do not have nodes with multiple parents. Therefore, when creating a new arc, transition systems for dependency parsing check that the dependent does not already have a head node, preventing the node from having additional parents. To handle reentrancy, which is not uncommon in AMR structures as shown in Table 1, we drop this constraint.\nAlignment Another main difference with dependency parsing is that in AMR there is no straightforward mapping between a word in the sentence and a node in the graph: words may generate no nodes, one node or multiple nodes. In addition, the labels at the nodes are often not easily determined by the word in the sentence. For instance expectation translates to expect-01 and teacher translates to the two nodes teach-01 and person, connected through an :ARG0 edge, expressing that a teacher is a person who teaches. A mechanism of concept identification is therefore required to map each token xi to a subgraph with the correct labels at its nodes and edges: if \u03c0 is the gold alignment, this should be the subgraph \u2190\u2212\u03c0 (i)\n5https://github.com/jflanigan/jamr/\nblob/master/docs/Hand_Alignments.md 6A valid criticism of AMR is that these two reentrancies are of a completely different type, and should not be collapsed together. Co-reference is a discourse feature, working by extra-semantic mechanisms and able to cross sentence boundaries, which are not crossed in AMR annotation.\ndefined in Equation (1). To obtain alignments between the tokens in the sentence and the nodes in the AMR graph of our training data, we run the JAMR aligner.7"}, {"heading": "3 Transition system for AMR Parsing", "text": "A stack \u03c3 = \u03c3n| \u00b7 \u00b7 \u00b7 |\u03c31|\u03c30 is a list of nodes of the partially constructed AMR graph, with the top element \u03c30 at the right. We use the symbol \u2018|\u2019 as the concatenation operator. A buffer \u03b2 = \u03b20|\u03b21| \u00b7 \u00b7 \u00b7 |\u03b2n is a list of indices from x, with the first element \u03b20 at the left, representing the word tokens from the input still to be processed. A configuration of our parser is a triple (\u03c3, \u03b2,A), where A is the set of AMR edges that have been constructed up to this point.\nIn order to introduce the transition actions of our parser we need some additional notation. We use a function a that maps indices from x to AMR graph fragments. For each i \u2208 [n], a(i) is a graph Ga = (Va, Ea), with single root root(Ga), representing the semantic contribution of word xi to the AMR for x. As already mentioned, Ga can have a single node representing the concept associated with xi, or it can have several nodes in case xi denotes a complex concept, or it can be empty.\nThe transition Shift is used to decide if and what to push on the stack after consuming a token from the buffer. Intuitively, the graph fragment a(\u03b20) obtained from the token \u03b20, if not empty, is \u201cmerged\u201d with the graph we have constructed so far. We then push onto the stack the node root(a(\u03b20)) for further processing. LArc(\u2113) creates an edge with label \u2113 between the top-most node and the second top-most node in the stack, and pops the latter. RArc(\u2113) is the symmetric operation, but does not pop any node from the stack.\nFinally, Reduce pops the top-most node from the stack, and it also recovers reentrant edges between its sibling nodes, capturing for instance several control verb patterns. To accomplish this, Reduce decides whether to create an additional edge between the node being removed and the previously created sibling in the partial graph. This way of handling control verbs is similar to the REENTRANCE transition of Wang et al. (2015a).\nThe choice of popping the dependent in the LArc transition is inspired by ARCEAGER, where left-arcs are constructed bottom-up to increase the incrementality of the transition system (Nivre,\n7 https://github.com/jflanigan/jamr\n2004). This affects our ability to recover some reentrant edges: consider a node u with two parents v and v\u2032, where the arc v \u2192 u is a left-arc and v\u2032 \u2192 u is any arc. If the first arc to be processed is v \u2192 u, we use LArc that pops u, hence making it impossible to create the second arc v\u2032 \u2192 u. Nevertheless, we discovered that this approach works better than a completely unrestricted allowance of reentrancy. The reason is that if we do not remove dependents at all when first attached to a node, the stack becomes larger, and nodes which should be connected end up being distant from each other, and as such, are never connected.\nThe initial configuration of the system has a \u25e6 node (representing the root) in the stack and the entire sentence in the buffer. The terminal configuration consists of an empty buffer and a stack with only the \u25e6 node. The transitions required to parse the sentence The boy and the girl are shown in Table 2, where the first line shows the initial configuration and the last line shows the terminal configuration.\nSimilarly to the transitions of the ARCEAGER, the above transitions construct edges as soon as the head and the dependent are available in the stack, with the aim of maximizing the parser incrementality. We now show that our greedy transitionbased AMR parser is linear-time in n, the length of the input sentence x. We first claim that the output graph has sizeO(n). Each token in x is mapped to a constant number of nodes in the graph by Shift. Thus the number of nodes is O(n). Furthermore, each node can have at most three parent nodes, created by transitions RArc, LArc and Reduce, respectively. Thus the number of edges is also O(n). It is possible to bound the maximum number of transitions required to parse x: the number of Shift is bounded by n, and the number of Reduce, LArc and RArc is bounded by the size of the graph, which is O(n). Since each transition can be carried out in constant time, we conclude that our parser runs in linear time."}, {"heading": "4 Training the System", "text": "Several components have to be learned: (1) a transition classifier that predicts the next transition given the current configuration, (2) a binary classifier that decides whether or not to create a reentrancy after a Reduce, (3) a concept identification step for each Shift to compute a(\u03b20), and 3) another classifier to label edges after each LArc or\nRArc."}, {"heading": "4.1 Oracle", "text": "Training our system from data requires an oracle\u2014an algorithm that given a gold-standard AMR graph and a sentence returns transition sequences that maximize the overlap between the gold-standard graph and the graph dictated by the sequence of transitions.\nWe adopt a shortest stack, static oracle similar to Chen and Manning (2014). Informally, static means that if the actual configuration of the parser has no mistakes, the oracle provides a transition that does not introduce any mistake. Shortest stack means that the oracle prefers transitions where the number of items in the stack is minimized. Given the current configuration (\u03c3, \u03b2,A) and the goldstandard graphG = (Vg, Ag), the oracle is defined as follows, where we test the conditions in the given order and apply the action associated with the first match:\n1. if \u2203\u2113[(\u03c30, \u2113, \u03c31) \u2208 Ag] then LArc(\u2113);\n2. if \u2203\u2113[(\u03c31, \u2113, \u03c30) \u2208 Ag] then RArc(\u2113);\n3. if \u00ac\u2203i, \u2113[(\u03c30, \u2113, \u03b2i) \u2208 Ag \u2228 (\u03b2i, \u2113, \u03c30) \u2208 Ag] then Reduce;\n4. Shift otherwise.\nThe oracle first checks whether some goldstandard edge can be constructed from the two elements at the top of the stack (conditions 1 and 2). If LArc or RArc are not possible, the oracle checks whether all possible edges in the gold graph involving \u03c30 have already been processed, in which case it chooses Reduce (conditions 3). To this end, it suffices to check the buffer, since LArc and RArc have already been excluded and elements in the stack deeper than position two can no longer be accessed by the parser. If Reduce is not possible, Shift is chosen.\nBesides deciding on the next transition, the oracle also needs the alignments, which we generate with JAMR, in order to know how to map the next token in the sentence to its AMR subgraph \u2190\u2212\u03c0 (i) defined in (1)."}, {"heading": "4.2 Transition Classifier", "text": "Like all other transition systems of this kind, our transition system has a \u201ccontroller\u201d that predicts a transition given the current configuration (among\nShift, LArc, RArc and Reduce). The examples from which we learn this controller are based on features extracted from the oracle transition sequences, where the oracle is applied on the training data.\nAs a classifier, we use a feed-forward neural network with two hidden layers of 200 tanh units and learning rate set to 0.1, with linear decaying. The input to the network consists of the concatenation of embeddings for words, POS tags and Stanford parser dependencies, one-hot vectors for named entities and additional sparse features, extracted from the current configuration of the transition system; this is reported in more details in Table 3. The embeddings for words and POS tags were pre-trained on a large unannotated corpus consisting of the first 1 billion characters from Wikipedia.8 For lexical information, we also extract the leftmost (in the order of the aligned words) child (c), leftmost parent (p) and leftmost grandchild (cc). Leftmost and rightmost items are common features for transition-based parsers (Zhang and Nivre, 2011; Chen and Manning, 2014) but we found only leftmost to be helpful in our case. All POS tags, dependencies and named entities are generated using Stanford CoreNLP (Manning et al., 2014). The accuracy of this classifier on the development set is 84%.\nSimilarly, we train a binary classifier for deciding whether or not to create a reentrant edge after a Reduce: in this case we use word and POS embeddings for the two nodes being connected and their parent as well as dependency label embeddings for the arcs between them.\n8 http://mattmahoney.net/dc/enwik9.zip"}, {"heading": "4.3 Concept Identification", "text": "This routine is called every time the transition classifier decides to do a Shift; it is denoted by a(\u00b7) in \u00a73. This component could be learned in a supervised manner, but we were not able to improve on a simple heuristic, which works as follows: during training, for each Shift decided by the oracle, we store the pair (\u03b20, \u2190\u2212\u03c0 (i)) in a phrase-table. During parsing, the most frequent graph H for the given token is then chosen. In other words, a(i) approximates \u2190\u2212\u03c0 (i) by means of the graph most frequently seen among all occurrences of token xi in the training set.\nAn obvious problem with the phrase-table approach is that it does not generalize to unseen words. In addition, our heuristic relies on the fact that the mappings observed in the data are correct, which is not the case when the JAMR-generated alignments contain a mistake. In order to alleviate this problem we observe that there are classes of words such as named entities and numeric quantities that can be disambiguated in a deterministic manner. We therefore implement a set of \u201chooks\u201d that are triggered by the named entity tag of the next token in the sentence. These hooks override the normal Shift mechanism and apply a fixed rule instead. For instance, when we see the token New York (the two tokens are collapsed in a single one at preprocessing) we generate the subgraph of Figure 4 and push its root onto the stack. Similar subgraphs are generated for all states, cities, countries and people. We also use hooks for ordinal numbers, percentages, money and dates."}, {"heading": "4.4 Edge Labeling", "text": "Edge labeling determines the labels for the edges being created. Every time the transition classifier decides to take an LArc or RArc operation, the edge labeler needs to decide on a label for it. There are more than 100 possible labels such as :ARG0, :ARG0-of, :ARG1, :location, :time and :polarity. We use a feed-forward neural network similar to the one we trained for the transition classier, with features shown in Table 4. The accuracy of this classifier on the development set is 77%.\nLabeling Rules Sometimes the label predicted by the neural network is not a label that satisfies the requirements of AMR. For instance, the label :top can only be applied when the node from which the edge starts is the special \u25e6 node. In order to avoid generating such erroneous labels, we use a set of rules, shown in Table 5. These rules determine which labels are allowed for the newly\ncreated edge so that we only consider those during prediction. Also ARG roles cannot always be applied: each Propbank frame allows a limited number of arguments. For example, while add-01 and add-02 allow for :ARG1 and :ARG2 (and their inverse :ARG1-of and :ARG2-of ), add-03 and add04 only allow :ARG2 (and :ARG2-of )."}, {"heading": "5 Fine-grained Evaluation", "text": "Until now, AMR parsers were evaluated using the Smatch score.9 Given the candidate graphs and the gold graphs in the form of AMR annotations, Smatch first tries to find the best alignments between the variable names for each pair of graphs and it then computes precision, recall and F1 of the concepts and relations. We note that the Smatch score has two flaws: (1) while AMR parsing involves a large number of subtasks, the Smatch score consists of a single number that does not assess the quality of each subtasks separately; (2) the Smatch score weighs different types of errors in\n9Since Smatch is an approximate randomized algorithm, decimal points in the results vary between different runs and are not reported. This approach was also taken by Wang et al. (2015b) and others.\na way which is not necessarily useful for solving a specific NLP problem. For example, for a specific problem concept detection might be deemed more important than edge detection, or guessing the wrong sense for a concept might be considered less severe than guessing the wrong verb altogether.\nConsider the two parses for the sentence Silvio Berlusconi gave Lucio Stanca his current role of modernizing Italy\u2019s bureaucracy in Figure 5. At the top, we show the output of a parser (Parse 1) that is not able to deal with named entities. At the bottom, we show the output of a parser (Parse 2) which, except for :name, :op and :wiki, always uses the edge label :ARG0. The Smatch scores for the two parses are 56 and 78 respectively. Both parses make obvious mistakes but the three named entity errors in Parse 1 are considered more important than the six wrong labels in Parse 2. However, without further analysis, it is not advisable to conclude that Parse 2 is better than Parse 1. In order to better understand the limitations of the different parsers, find their strengths and gain insight in which downstream tasks they may be helpful, we compute a set of metrics on the test set.\nUnlabeled is the Smatch score computed on the predicted graphs after removing all edge labels. In this way, we only assess the node labels\nand the graph topology, which may be enough to benefit several NLP tasks because it identifies basic predicate-argument structure. For instance, we may be interested in knowing whether two events or entities are related to each other, while not being concerned with the precise type of relation holding between them.\nNo WSD gives a score that does not take into account word sense disambiguation errors. By ignoring the sense specified by the Propbank frame used (e.g., duck-01 vs duck-02) we have a score that does not take into account this additional complexity in the parsing procedure. To compute this score, we simply strip off the suffixes from all Propbank frames and calculate the Smatch score.\nFollowing Sawai et al. (2015), we also evaluate the parsers using the Smatch score on noun phrases only (NP-only), by extracting from the AMR dataset all noun phrases that do not include further NPs.\nAs we previously discussed, reentrancy is a very important characteristic of AMR graphs and it is not trivial to handle. We therefore implement a test for it (Reentrancy), where we compute the Smatch score only on reentrant edges.\nConcept identification is another critical component of the parsing process and we therefore compute the F-score on the list of predicted concepts (Concepts) too. Identifying the correct concepts is fundamental: if a concept is not identified, it will not be possible to retrieve any edge involving that concept, with likely significant consequences on accuracy. This metric is therefore\nquite important to score highly on.\nSimilarly to our score for concepts, we further compute an F-score on the named entities (Named Ent.) and wiki roles for named entities (Wikification) that consider edges labeled with :name and :wiki respectively. These two metrics are strictly related to the concept score. However, since named entity recognition is the focus of dedicated research, we believe it is important to define a metric that specifically assesses this problem. Negation detection is another task which has received some attention. An F-score for this (Negations) is also defined, where we find all negated concepts by looking for the :polarity role. The reason we can compute a simple F-score instead of using Smatch for these metrics is that there are no variable names involved.\nFinally we compute the Smatch score on :ARG edges only, in order to have a score for semantic role labeling (SRL), which is another extremely important subtask of AMR, as it is based on the identification of predicate-argument structures.\nUsing this evaluation suite we can evaluate AMRs on a wide range of metrics that can help us find strengths and weakness of each parser, hence speeding up the research in this area. Table 6 reports the scores for the two parses of Figure 5, where we see that Parse 1 gets a high score for semantic role labeling while Parse 2 is optimal for named entity recognition. Moreover, we can make additional observations such as that Parse 2 is optimal with respect to unlabeled score and that Parse 1 recovers more reentrancies."}, {"heading": "6 Experiments", "text": "We compare our parser10 against two available parsers: JAMR (Flanigan et al., 2014) and CAMR (Wang et al., 2015b; Wang et al., 2015a), using the LDC2015E86 dataset for evaluation. Both parsers are available online11 and were recently updated for SemEval-2016 Task 8 (Flanigan et al., 2016; Wang et al., 2016). However, CAMR\u2019s SemEval system, which reports a Smatch score of 67, is not publicly available. CAMR has a quadratic worst-case complexity (although linear in practice). In JAMR, the concept identification step is quadratic and the relation identification step is O(|V |2 log |V |), with |V | being the set of nodes in the AMR graph.\nTable 7 shows the results obtained by the parsers on all metrics previously introduced. On Smatch, our system does not give state-of-the-art results. However, we do obtain the best results for Unlabeled and Concept and outperform the other parses for Named Ent. and Negations. Our score of Reentrancy is also close the best scoring system, which is particularly relevant given the importance of reentrancies in AMR. The use of the Reduce transition, which targets reentrancies caused by control verbs, is critical in order to achieve this result.\nThe relatively high results we obtain for the un-\n10Our parser is available at https://github.com/ mdtux89/amr-eager, the evaluation suite at https: //github.com/mdtux89/amr-evaluation and a demo at http://cohort.inf.ed.ac.uk/ amreager.html\n11JAMR: https://github.com/jflanigan/ jamr, CAMR: https://github.com/c-amr/camr.\nlabeled case suggests that our parser has difficulty in labeling the arcs. Our score for concept identification, which is on par with the best result from the other parsers, demonstrates that there is a relatively low level of token ambiguity. State-of-theart results for this problem can be obtained by choosing the most frequent subgraph for a given token based on a phrase-table constructed from JAMR alignments on the training data. The scores for named entities and wikification are heavily dependent on the hooks mentioned in \u00a74.3, which in turn relies on the named entity recognizer to make the correct predictions. In order to alleviate the problem of wrong automatic alignments with respect to polarity and better detect negation, we performed a post-processing step on the aligner output where we align the AMR constant - (minus) with words bearing negative polarity such as not, illegitimate and asymmetry.\nOur experiments demonstrate that there is no parser for AMR yet that conclusively does better than all other parsers on all metrics. Advantages of our parser are the worst-case linear complexity and the fact that is possible to perform incremental AMR parsing, which is both helpful for realtime applications and to investigate how meaning of English sentences can be built incrementally left-to-right."}, {"heading": "7 Related Work", "text": "The first data-driven AMR parser is due to Flanigan et al. (2014). The problem is addressed in two separate stages: concept identification and relation identification. They use a sequence labeling algorithm to identify concepts and frame the relation prediction task as a constrained combinatorial optimization problem. Werling et al. (2015) notice that the difficult bit is the concept identification and propose a better way to handle that task: an action classifier to generate concepts by applying predetermined actions. Other proposals involve a synchronous hyperedge replacement grammar solution (Peng et al., 2015), a syntaxbased machine translation approach (Pust et al., 2015) where a grammar of string-to-tree rules is created after reducing AMR graphs to trees by removing all reentrancies, a CCG system that first parses sentences into lambda-calculus representations (Artzi et al., 2015). A systematic translation from AMR to first order logic formulas, with a special treatment for quantification, reentrancy\nand negation, is discussed in Bos (2016). In Vanderwende et al. (2015), a pre-existing logical form parser is used and the output is then converted into AMR graphs. Yet another solution is proposed by Rao et al. (2015) who discuss a parser that uses SEARN (Daume\u0301 III et al., 2009), a \u201clearning to search\u201d algorithm.\nTransition-based algorithms for AMR parsing are compelling because traditional graph-based techniques are computationally expensive. Wang et al. (2015b) and Wang et al. (2015a) propose a framework that parses a sentence into its AMR structure through a two-stage process: a dependency tree is generated from the input sentence through a transition-based parser and then another transition-based parser is used to generate the AMR. The main benefit of this approach is that the dependency parser can be trained on a training set much larger than the training set for the treeto-graph algorithm. Others further built on this parser: Goodman et al. (2016) use imitation learning to alleviate the probem of error propagation in the greedy parser, while Barzdins and Gosko (2016) create a wrapper around it to fix frequent mistakes and investigate ensembles with a character level neural parser. More recently Zhou et al. (2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004).\nAMR parsing as a whole is a complex task because it involves many subtasks including named entity recognition, co-reference resolution and semantic role labeling. Sawai et al. (2015) do not attempt at parsing AMR graphs for entire sentences but they instead handle simple noun phrases (NPs). They extract NPs from the AMR dataset only when they do not include further NPs, do not include pronouns nor named entities. Due to these restrictions, the AMRs are mostly trees and easier to handle than the original AMR graphs. They approach this task using a transition based system inspired by ARCSTANDARD.\nAMR is not the only way to represent meaning in natural language sentences. Alternative semantic representations have been developed and studied, such as Boxer (Bos et al., 2004), CCG (Steedman, 1996; Steedman, 2000) and UCCA (Abend and Rappoport, 2013)."}, {"heading": "8 Conclusion", "text": "We presented a transition system that builds AMR graphs in linear time by processing the sentences left-to-right, trained with feed-forward neural networks. The parser demonstrates that it is possible to perform AMR parsing using techniques inspired by dependency parsing.\nWe also noted that it is less informative to evaluate the entire parsing process with Smatch than to use a collection of metrics aimed at evaluating the various subproblems in the parsing process. We further showed that our left-to-right transition system is competitive with publicly available state-of-the-art parsers. Although we do not outperform the best baseline in terms of Smatch score, we show on par or better results for several of the metrics proposed. We hope that moving away from a single-metric evaluation will further speed up progress in AMR parsing."}, {"heading": "Acknowledgments", "text": "The authors would like to thank the three anonymous reviewers and Sameer Bansal, Jeff Flanigan, Sorcha Gilroy, Adam Lopez, Nikos Papasarantopoulos, Nathan Schneider, Mark Steedman, Sam Thomson, Clara Vania and Chuan Wang for their help and comments. This research was supported by a grant from Bloomberg and by the H2020 project SUMMA, under grant agreement 688139."}], "references": [{"title": "Universal conceptual cognitive annotation (UCCA)", "author": ["Omri Abend", "Ari Rappoport."], "venue": "Proceedings of ACL.", "citeRegEx": "Abend and Rappoport.,? 2013", "shortCiteRegEx": "Abend and Rappoport.", "year": 2013}, {"title": "Broad-coverage CCG semantic parsing with AMR", "author": ["Yoav Artzi", "Kenton Lee", "Luke Zettlemoyer."], "venue": "Proceedings of EMNLP.", "citeRegEx": "Artzi et al\\.,? 2015", "shortCiteRegEx": "Artzi et al\\.", "year": 2015}, {"title": "Abstract meaning representation for sembanking", "author": ["Laura Banarescu", "Claire Bonial", "Shu Cai", "Madalina Georgescu", "Kira Griffitt", "Ulf Hermjakob", "Kevin Knight", "Philipp Koehn", "Martha Palmer", "Nathan Schneider."], "venue": "Proceedings of Linguistic Annota-", "citeRegEx": "Banarescu et al\\.,? 2013", "shortCiteRegEx": "Banarescu et al\\.", "year": 2013}, {"title": "RIGA at SemEval-2016 task 8: Impact of smatch extensions and character-level neural translation on AMR parsing accuracy", "author": ["Guntis Barzdins", "Didzis Gosko."], "venue": "arXiv preprint arXiv:1604.01278.", "citeRegEx": "Barzdins and Gosko.,? 2016", "shortCiteRegEx": "Barzdins and Gosko.", "year": 2016}, {"title": "Widecoverage semantic representations from a ccg parser", "author": ["Johan Bos", "Stephen Clark", "Mark Steedman", "James R Curran", "Julia Hockenmaier"], "venue": null, "citeRegEx": "Bos et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Bos et al\\.", "year": 2004}, {"title": "Expressive power of abstract meaning representations", "author": ["Johan Bos."], "venue": "Computational Linguistics, 42.", "citeRegEx": "Bos.,? 2016", "shortCiteRegEx": "Bos.", "year": 2016}, {"title": "Smatch: an evaluation metric for semantic feature structures", "author": ["Shu Cai", "Kevin Knight."], "venue": "Proceedings of ACL.", "citeRegEx": "Cai and Knight.,? 2013", "shortCiteRegEx": "Cai and Knight.", "year": 2013}, {"title": "A fast and accurate dependency parser using neural networks", "author": ["Danqi Chen", "Christopher D Manning."], "venue": "Proceesings of EMNLP.", "citeRegEx": "Chen and Manning.,? 2014", "shortCiteRegEx": "Chen and Manning.", "year": 2014}, {"title": "Search-based structured prediction", "author": ["Hal Daum\u00e9 III", "John Langford", "Daniel Marcu."], "venue": "Machine learning, 75(3):297\u2013325.", "citeRegEx": "III et al\\.,? 2009", "shortCiteRegEx": "III et al\\.", "year": 2009}, {"title": "Peking: Profiling syntactic tree parsing techniques for semantic graph parsing", "author": ["Yantao Du", "Fan Zhang", "Weiwei Sun", "XiaojunWan"], "venue": "In Proceedings of the 8th International Workshop on Semantic Evaluation", "citeRegEx": "Du et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Du et al\\.", "year": 2014}, {"title": "A discriminative graph-based parser for the abstract meaning representation", "author": ["Jeffrey Flanigan", "Sam Thomson", "Jaime G Carbonell", "Chris Dyer", "Noah A Smith."], "venue": "Proceedings of ACL.", "citeRegEx": "Flanigan et al\\.,? 2014", "shortCiteRegEx": "Flanigan et al\\.", "year": 2014}, {"title": "CMU at SemEval-2016 task 8: Graph-based AMR parsing with infinite ramp loss", "author": ["Jeffrey Flanigan", "Chris Dyer", "Noah A Smith", "Jaime Carbonell."], "venue": "Proceedings of SemEval, pages 1202\u20131206.", "citeRegEx": "Flanigan et al\\.,? 2016", "shortCiteRegEx": "Flanigan et al\\.", "year": 2016}, {"title": "Noise reduction and targeted exploration in imitation learning for abstract meaning representation parsing", "author": ["James Goodman", "Andreas Vlachos", "Jason Naradowsky."], "venue": "Proceedings of ACL.", "citeRegEx": "Goodman et al\\.,? 2016", "shortCiteRegEx": "Goodman et al\\.", "year": 2016}, {"title": "Parsing to noncrossing dependency graphs", "author": ["Marco Kuhlmann", "Peter Jonsson."], "venue": "Transactions of the Association for Computational Linguistics, pages 559\u2013570.", "citeRegEx": "Kuhlmann and Jonsson.,? 2015", "shortCiteRegEx": "Kuhlmann and Jonsson.", "year": 2015}, {"title": "The Stanford CoreNLP natural language processing toolkit", "author": ["Christopher D. Manning", "Mihai Surdeanu", "John Bauer", "Jenny Finkel", "Steven J. Bethard", "David McClosky."], "venue": "ACL System Demonstrations.", "citeRegEx": "Manning et al\\.,? 2014", "shortCiteRegEx": "Manning et al\\.", "year": 2014}, {"title": "Incrementality in deterministic dependency parsing", "author": ["Joakim Nivre."], "venue": "Proceedings of the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together. ACL.", "citeRegEx": "Nivre.,? 2004", "shortCiteRegEx": "Nivre.", "year": 2004}, {"title": "Algorithms for deterministic incremental dependency parsing", "author": ["Joakim Nivre."], "venue": "Computational Linguistics, Volume 34, Number 4, December 2008.", "citeRegEx": "Nivre.,? 2008", "shortCiteRegEx": "Nivre.", "year": 2008}, {"title": "A synchronous hyperedge replacement grammar based approach for AMR parsing", "author": ["Xiaochang Peng", "Linfeng Song", "Daniel Gildea."], "venue": "Proceedings of CoNLL.", "citeRegEx": "Peng et al\\.,? 2015", "shortCiteRegEx": "Peng et al\\.", "year": 2015}, {"title": "Using syntaxbased machine translation to parse english into abstract meaning representation", "author": ["Michael Pust", "Ulf Hermjakob", "Kevin Knight", "Daniel Marcu", "Jonathan May."], "venue": "arXiv preprint arXiv:1504.06665.", "citeRegEx": "Pust et al\\.,? 2015", "shortCiteRegEx": "Pust et al\\.", "year": 2015}, {"title": "Parser for abstract meaning representation using learning to search", "author": ["Sudh Rao", "Yogarshi Vyas", "Hal Daume III", "Philip Resnik."], "venue": "arXiv:1510.07586.", "citeRegEx": "Rao et al\\.,? 2015", "shortCiteRegEx": "Rao et al\\.", "year": 2015}, {"title": "Because syntax does matter: Improving predicate-argument structures parsing using syntactic features", "author": ["Corentin Ribeyre", "\u00c9ric Villemonte de La Clergerie", "Djam\u00e9 Seddah."], "venue": "Conference of the North American Chapter of the Association for Computa-", "citeRegEx": "Ribeyre et al\\.,? 2015", "shortCiteRegEx": "Ribeyre et al\\.", "year": 2015}, {"title": "Shift-reduce dependency DAG parsing", "author": ["Kenji Sagae", "Jun\u2019ichi Tsujii"], "venue": "Proceedings of COLING", "citeRegEx": "Sagae and Tsujii.,? \\Q2008\\E", "shortCiteRegEx": "Sagae and Tsujii.", "year": 2008}, {"title": "Semantic structure analysis of noun phrases using abstract meaning representation", "author": ["Yuichiro Sawai", "Hiroyuki Shindo", "Yuji Matsumoto."], "venue": "Proceedings of ACL.", "citeRegEx": "Sawai et al\\.,? 2015", "shortCiteRegEx": "Sawai et al\\.", "year": 2015}, {"title": "Surface Structure and Interpretation", "author": ["Mark Steedman."], "venue": "The MIT Press.", "citeRegEx": "Steedman.,? 1996", "shortCiteRegEx": "Steedman.", "year": 1996}, {"title": "The Syntactic Process", "author": ["Mark Steedman."], "venue": "The MIT Press.", "citeRegEx": "Steedman.,? 2000", "shortCiteRegEx": "Steedman.", "year": 2000}, {"title": "An AMR parser for english, french, german, spanish and japanese and a new AMR-annotated corpus", "author": ["Lucy Vanderwende", "Arul Menezes", "Chris Quirk."], "venue": "Proceedings of NAACL-HLT.", "citeRegEx": "Vanderwende et al\\.,? 2015", "shortCiteRegEx": "Vanderwende et al\\.", "year": 2015}, {"title": "Boosting transition-based AMR parsing with refined actions and auxiliary analyzers", "author": ["Chuan Wang", "Nianwen Xue", "Sameer Pradhan."], "venue": "Proceedings of ACL.", "citeRegEx": "Wang et al\\.,? 2015a", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "A transition-based algorithm for AMR parsing", "author": ["Chuan Wang", "Nianwen Xue", "Sameer Pradhan."], "venue": "Proceedings of NAACL.", "citeRegEx": "Wang et al\\.,? 2015b", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "CAMR at SemEval2016 task 8: An extended transition-based AMR parser", "author": ["Chuan Wang", "Sameer Pradhan", "Nianwen Xue", "Xiaoman Pan", "Heng Ji."], "venue": "Proceedings of SemEval.", "citeRegEx": "Wang et al\\.,? 2016", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "Robust subgraph generation improves abstract meaning representation parsing", "author": ["Keenon Werling", "Gabor Angeli", "Christopher Manning."], "venue": "arXiv preprint arXiv:1506.03139.", "citeRegEx": "Werling et al\\.,? 2015", "shortCiteRegEx": "Werling et al\\.", "year": 2015}, {"title": "Transitionbased dependency parsing with rich non-local features", "author": ["Yue Zhang", "Joakim Nivre."], "venue": "Proceedings of ACL.", "citeRegEx": "Zhang and Nivre.,? 2011", "shortCiteRegEx": "Zhang and Nivre.", "year": 2011}, {"title": "AMR parsing with an incremental joint model", "author": ["Junsheng Zhou", "Feiyu Xu", "Hans Uszkoreit", "Weiguang QU", "Ran Li", "Yanhui Gu."], "venue": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing.", "citeRegEx": "Zhou et al\\.,? 2016", "shortCiteRegEx": "Zhou et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 10, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 26, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 17, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 18, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 12, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 19, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 25, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 1, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 3, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 31, "context": "Several parsers for AMR have been recently developed (Flanigan et al., 2014; Wang et al., 2015a; Peng et al., 2015; Pust et al., 2015; Goodman et al., 2016; Rao et al., 2015; Vanderwende et al., 2015; Artzi et al., 2015; Barzdins and Gosko, 2016; Zhou et al., 2016).", "startOffset": 53, "endOffset": 265}, {"referenceID": 16, "context": "Greedy transition-based methods (Nivre, 2008) are one of the most popular choices for dependency parsing, because of their good balance between efficiency and accuracy.", "startOffset": 32, "endOffset": 45}, {"referenceID": 15, "context": "In this paper we introduce a parser for AMR that is inspired by the ARCEAGER dependency transition system of Nivre (2004). The main difference between our system and ARCEAGER is that we need to account for the mapping from word tokens to AMR nodes, non-projectivity of AMR structures and reentrant nodes (multiple incom-", "startOffset": 109, "endOffset": 122}, {"referenceID": 15, "context": "(2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004).", "startOffset": 86, "endOffset": 99}, {"referenceID": 21, "context": "The AMR parser of Wang et al. (2015a), called CAMR, also defines a transition system.", "startOffset": 18, "endOffset": 38}, {"referenceID": 21, "context": "The AMR parser of Wang et al. (2015a), called CAMR, also defines a transition system. It differs from ours because we process the sentence left-toright while they first acquire the entire dependency tree and then process it bottom-up. More recently Zhou et al. (2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004).", "startOffset": 18, "endOffset": 268}, {"referenceID": 14, "context": "(2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004). Our transition system is also related to an adaptation of ARCEAGER for directed acyclic graphs (DAGs), introduced by Sagae and Tsujii (2008). This is also the basis for Ribeyre et al.", "startOffset": 87, "endOffset": 242}, {"referenceID": 14, "context": "(2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004). Our transition system is also related to an adaptation of ARCEAGER for directed acyclic graphs (DAGs), introduced by Sagae and Tsujii (2008). This is also the basis for Ribeyre et al. (2015), a transition system used to parse dependency graphs.", "startOffset": 87, "endOffset": 292}, {"referenceID": 9, "context": "Similarly, Du et al. (2014) also address dependency graph parsing by means of transition systems.", "startOffset": 11, "endOffset": 28}, {"referenceID": 6, "context": "\u2022 In \u00a75 we claim that the Smatch score (Cai and Knight, 2013) is not sufficient to evaluate AMR parsers and propose a set of metrics to alleviate this problem and better compare alternative parsers;", "startOffset": 39, "endOffset": 61}, {"referenceID": 15, "context": "Strictly speaking, transition-based parsing cannot achieve full incrementality, which requires to have a single connected component at all times (Nivre, 2004).", "startOffset": 145, "endOffset": 158}, {"referenceID": 13, "context": "Tsujii (2008) and is closely related to the definition of non-crossing graphs of Kuhlmann and Jonsson (2015).", "startOffset": 81, "endOffset": 109}, {"referenceID": 26, "context": "This way of handling control verbs is similar to the REENTRANCE transition of Wang et al. (2015a).", "startOffset": 78, "endOffset": 98}, {"referenceID": 7, "context": "We adopt a shortest stack, static oracle similar to Chen and Manning (2014). Informally, static means that if the actual configuration of the parser has no mistakes, the oracle provides a transition that does not introduce any mistake.", "startOffset": 52, "endOffset": 76}, {"referenceID": 14, "context": "CoreNLP (Manning et al., 2014).", "startOffset": 8, "endOffset": 30}, {"referenceID": 26, "context": "This approach was also taken by Wang et al. (2015b) and others.", "startOffset": 32, "endOffset": 52}, {"referenceID": 22, "context": "Following Sawai et al. (2015), we also evaluate the parsers using the Smatch score on noun", "startOffset": 10, "endOffset": 30}, {"referenceID": 10, "context": "We compare our parser against two available parsers: JAMR (Flanigan et al., 2014) and CAMR (Wang et al.", "startOffset": 58, "endOffset": 81}, {"referenceID": 27, "context": ", 2014) and CAMR (Wang et al., 2015b; Wang et al., 2015a), using the LDC2015E86 dataset for evaluation.", "startOffset": 17, "endOffset": 57}, {"referenceID": 26, "context": ", 2014) and CAMR (Wang et al., 2015b; Wang et al., 2015a), using the LDC2015E86 dataset for evaluation.", "startOffset": 17, "endOffset": 57}, {"referenceID": 11, "context": "Both parsers are available online and were recently updated for SemEval-2016 Task 8 (Flanigan et al., 2016; Wang et al., 2016).", "startOffset": 84, "endOffset": 126}, {"referenceID": 28, "context": "Both parsers are available online and were recently updated for SemEval-2016 Task 8 (Flanigan et al., 2016; Wang et al., 2016).", "startOffset": 84, "endOffset": 126}, {"referenceID": 10, "context": "The first data-driven AMR parser is due to Flanigan et al. (2014). The problem is addressed in two separate stages: concept identification and relation identification.", "startOffset": 43, "endOffset": 66}, {"referenceID": 10, "context": "The first data-driven AMR parser is due to Flanigan et al. (2014). The problem is addressed in two separate stages: concept identification and relation identification. They use a sequence labeling algorithm to identify concepts and frame the relation prediction task as a constrained combinatorial optimization problem. Werling et al. (2015)", "startOffset": 43, "endOffset": 342}, {"referenceID": 17, "context": "Other proposals involve a synchronous hyperedge replacement grammar solution (Peng et al., 2015), a syntaxbased machine translation approach (Pust et al.", "startOffset": 77, "endOffset": 96}, {"referenceID": 18, "context": ", 2015), a syntaxbased machine translation approach (Pust et al., 2015) where a grammar of string-to-tree rules is created after reducing AMR graphs to trees by removing all reentrancies, a CCG system that first", "startOffset": 52, "endOffset": 71}, {"referenceID": 1, "context": "parses sentences into lambda-calculus representations (Artzi et al., 2015).", "startOffset": 54, "endOffset": 74}, {"referenceID": 5, "context": "a special treatment for quantification, reentrancy and negation, is discussed in Bos (2016). In Vanderwende et al.", "startOffset": 81, "endOffset": 92}, {"referenceID": 5, "context": "a special treatment for quantification, reentrancy and negation, is discussed in Bos (2016). In Vanderwende et al. (2015), a pre-existing logical form parser is used and the output is then converted into AMR graphs.", "startOffset": 81, "endOffset": 122}, {"referenceID": 5, "context": "a special treatment for quantification, reentrancy and negation, is discussed in Bos (2016). In Vanderwende et al. (2015), a pre-existing logical form parser is used and the output is then converted into AMR graphs. Yet another solution is proposed by Rao et al. (2015) who discuss a parser that uses SEARN (Daum\u00e9 III et al.", "startOffset": 81, "endOffset": 270}, {"referenceID": 15, "context": "(2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004).", "startOffset": 86, "endOffset": 99}, {"referenceID": 22, "context": "Wang et al. (2015b) and Wang et al.", "startOffset": 0, "endOffset": 20}, {"referenceID": 22, "context": "Wang et al. (2015b) and Wang et al. (2015a) propose a framework that parses a sentence into its AMR structure through a two-stage process: a dependency tree is generated from the input sentence through a transition-based parser and then another transition-based parser is used to generate the AMR.", "startOffset": 0, "endOffset": 44}, {"referenceID": 11, "context": "Others further built on this parser: Goodman et al. (2016) use imitation learning to alleviate the probem of error propagation in the greedy parser, while Barzdins and Gosko (2016) create a wrapper around it to fix frequent mistakes and investigate ensembles with a character level neural parser.", "startOffset": 37, "endOffset": 59}, {"referenceID": 3, "context": "(2016) use imitation learning to alleviate the probem of error propagation in the greedy parser, while Barzdins and Gosko (2016) create a wrapper around it to fix frequent mistakes and investigate ensembles with a character level neural parser.", "startOffset": 103, "endOffset": 129}, {"referenceID": 3, "context": "(2016) use imitation learning to alleviate the probem of error propagation in the greedy parser, while Barzdins and Gosko (2016) create a wrapper around it to fix frequent mistakes and investigate ensembles with a character level neural parser. More recently Zhou et al. (2016) presented a non-greedy transition system for AMR parsing, based on ARCSTANDARD (Nivre, 2004).", "startOffset": 103, "endOffset": 278}, {"referenceID": 22, "context": "Sawai et al. (2015) do not", "startOffset": 0, "endOffset": 20}, {"referenceID": 4, "context": "tic representations have been developed and studied, such as Boxer (Bos et al., 2004), CCG (Steedman, 1996; Steedman, 2000) and UCCA (Abend and Rappoport, 2013).", "startOffset": 67, "endOffset": 85}, {"referenceID": 23, "context": ", 2004), CCG (Steedman, 1996; Steedman, 2000) and UCCA (Abend and Rappoport, 2013).", "startOffset": 13, "endOffset": 45}, {"referenceID": 24, "context": ", 2004), CCG (Steedman, 1996; Steedman, 2000) and UCCA (Abend and Rappoport, 2013).", "startOffset": 13, "endOffset": 45}, {"referenceID": 0, "context": ", 2004), CCG (Steedman, 1996; Steedman, 2000) and UCCA (Abend and Rappoport, 2013).", "startOffset": 55, "endOffset": 82}], "year": 2017, "abstractText": "Abstract Meaning Representation (AMR) is a semantic representation for natural language that embeds annotations related to traditional tasks such as named entity recognition, semantic role labeling, word sense disambiguation and co-reference resolution. We describe a transition-based parser for AMR that parses sentences leftto-right, in linear time. We further propose a test-suite that assesses specific subtasks that are helpful in comparing AMR parsers, and show that our parser is competitive with the state of the art on the LDC2015E86 dataset and that it outperforms state-of-the-art parsers for recovering named entities and handling polarity.Meaning Representation (AMR) is a semantic representation for natural language that embeds annotations related to traditional tasks such as named entity recognition, semantic role labeling, word sense disambiguation and co-reference resolution. We describe a transition-based parser for AMR that parses sentences leftto-right, in linear time. We further propose a test-suite that assesses specific subtasks that are helpful in comparing AMR parsers, and show that our parser is competitive with the state of the art on the LDC2015E86 dataset and that it outperforms state-of-the-art parsers for recovering named entities and handling polarity.", "creator": "dvips(k) 5.996 Copyright 2016 Radical Eye Software"}}}