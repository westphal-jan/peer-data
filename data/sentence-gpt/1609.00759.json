{"id": "1609.00759", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Sep-2016", "title": "A MIP Backend for the IDP System", "abstract": "The IDP knowledge base system currently uses MiniSAT(ID) as its backend Constraint Programming (CP) solver. A few similar systems have used a Mixed Integer Programming (MIP) solver as backend. However, so far little is known about when the MIP solver is preferable to using the MIP solver and the MIP solver as their base. It may seem as if the MIP solver is not sufficient for a full MIP solver. Nevertheless, there is some discussion on the feasibility of using MIP solver, and why MIP solver should not be adopted if the MIP solver cannot be used in a context such as HTTP or HTTP. This is not to say that MIP solver can only be used for MIP solvers. The MIP solver is a lightweight MIP solver that has no interface and can support multiple MIP solvers. MIP solver implementations in some cases use a Multi-MIP solver. A MIP solver is a single MIP solver, that is, an HTTP or HTTP-based MIP solver. The MIP solver is a multi-MIP solver. A MIP solver is a multi-MIP solver. MIP solver implementation can also use multiple MIP solvers. Multiple MIP solvers can be supported as they are both in the MIP solver and MIP solver implementation. In addition, multi-MIP solver implementations are supported by the MIP solver implementation. In addition, single MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. In addition, multi-MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. Multiple MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. Multiple MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. Multiple MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. In addition, multi-MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. In addition, multi-MIP solvers can be used as they are both in the MIP solver and MIP solver implementation. In addition", "histories": [["v1", "Fri, 2 Sep 2016 22:20:05 GMT  (319kb)", "http://arxiv.org/abs/1609.00759v1", "internal report, 10 pages, 2 figures"]], "COMMENTS": "internal report, 10 pages, 2 figures", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["san pham", "jo devriendt", "maurice bruynooghe", "patrick de causmaecker"], "accepted": false, "id": "1609.00759"}, "pdf": {"name": "1609.00759.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Patrick De Causmaecker"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 9.\n00 75\n9v 1\n[ cs\n.A I]\n2 S\nep 2\n01 6"}, {"heading": "1 Introduction", "text": "Mixed Integer Programming (MIP) provides powerful solvers for tackling combinatorial optimization problems. Hence it looks attractive to explore the use of such a backend for CP and ASP systems. In [2], the use of a MIP backend for MiniZinc [16] was explored; however, not much guidance is provided for chosing between the MIP and the CP backend. In [15], a MIP solver is used as a backend for an ASP [3,12] system. They conclude that MIP offers most gain in optimization problems, and gives unsatisfying results on search problems with only boolean variables and constraints.\nIn this paper we describe the use of a MIP backend for the IDP system [9,7,4]. As the above systems, the IDP system is a declarative system aiming to tackle problems using an accessible high-level modeling language.\nOur main contribution is to analyze in more detail for which problems the MIP backend is to be preferred over the native backend. We also pay attention to the optimality of the translation and compare the performance of the translation with that of hand coded MIP specifications. Our experiments confirm that for many optimization problems, a MIP backend outperforms the CP backend. However, on problems with certain reified sum constraints and deep planning problems a CP approach performs significantly better, regardless of whether the problem is in fact an optimization problem or not.\nIn Section 2, we introduce the IDP system, in Section 3 we sketch the translation to MIP input, in Section 4 we report on experiments and we conclude in Section 5.\n2 IDP and FO(\u00b7)\nThe IDP system [9,7] is a knowledge base system that aims at separating knowledge from problem solving allowing for the reuse of the same knowledge for solving different problems. Its input language is based on FO(\u00b7), a logic that\nextends first order logic with types, aggregates, partial functions and inductive definitions. For the latter, the meaning is based on the intuitive mathematical reading of definitions, and is formalized by the parametrized well-founded semantics [8,10]. Here, we introduce the IDP language by the example of the traveling salesman problem domain (TSP).\nExample 1 (Traveling Salesman). An IDP specification (or model) consists of several components.\nA first component is the vocabulary V that introduces the types, constants, functions and predicates used in the specification. For TSP, a single type City is sufficient. A constant Depot : City specifies the city that is the start and ending point of the trip. The network is described by a function Distance(City, City) : N with N a set of natural numbers. The solution tour is described by a predicate Next(City, City). Finally a predicate Reachable(City) will be used to express that all cities need to be visited starting from the depot.\nA second component is the structure S that describes the type and the input values for the instance of interest. E.g., City = {a, b, c}, Depot = a, Distance = {(a, a, 0), (a, b, 1), (a, c, 2), . . .}.\nA third component is the theory T that describes a solution: \u2200x : \u2203!y : Next(x, y). // for each city x there is exactly one city y next \u2200y : \u2203!x : Next(x, y). // for each city y there is exactly one city x previous \u2200x : Reachable(x). // each city is reachable {\u2200x : Reachable(x) \u2190 x = Depot. // base case: the depot is reachable \u2200x : Reachable(x) \u2190 \u2203y : Reachable(y)\u2227Next(y, x).} // induction step The first two formulas express that each city is the start and end point of exactly one trip in the tour. Note the exists exactly quantor \u2203! \u2013 a shorthand for an aggregate. The third formula states that all cities must be reachable. The last two lines, between { and }, inductively define the Reachable predicate. The last line states that x is reachable if some y is and Next(y, x) holds.\nThe fourth component specifies the term O: sum{i j : Next(i, j) : Distance(i, j)}. O represents the sum of all Distance(i, j) values for which Next(i, j) holds, and will be used as objective function.\nThe fifth and final component is a piece of imperative code of which the most important line is result = minimize(T, S,O)[1]) instructing to execute the minimisation inference method with theory T , input structure S, optimization term O, and to search for the first optimal solution.\nA complete TSP specification in IDP is available at dtai.cs.kuleuven.be/krr/idp-ide/?present=TSP It contains a small instance that can be executed by the click of a button.\nTo solve combinatorial optimization problems, IDP currently follows a twophase ground-and-solve approach. In the first phase, an IDP input specification is reduced to a set of constraints in Extended Conjunctive Normal Form (ECNF) [6]. This process is comparable to the conversion of MiniZinc specifications to Flatzinc. The second phase consists of the actual search for an optimal solution by calling the CP solverMiniSAT(ID).MiniSAT(ID) iteratively searches a feasible solution for the ECNF theory, tightening the upper bound on the objective\nfunction after each iteration. This loop ends when MiniSAT(ID) proves that no better solution exists, making the last feasible solution the optimal solution. A more elaborate description and some examples can be found in [4]."}, {"heading": "3 Transformation of FO(\u00b7) to MIP", "text": "The goal of the transformation is to convert an IDP optimization specification into a set of linear (in)equalities and the optimization term in a linear sum. Our current transformation does not support the full IDP language but enough to transform all specifications for which the MIP backend looks worthwhile (so far).\nWe base our transformation method on the transformation of FO to MIP given by Williams [26]. First, they unnest nested formulas and instantiate FO quantors with domain elements. Second, the resulting propositional theory is transformed using the Big M method. In essence, this method transforms a constraint of the form:\nl \u21d2 \u2211\ni\naixi \u2265 b into M \u2212Ml+ \u2211\ni\naixi \u2265 b (1)\nThe numeralM is chosen big enough to make the formula trivially satisfied when literal l is false (0) while it reduces to the linear constraint when l is true (1). The exact value of M is derived from bounds on ai, xi and b, keeping M as small as possible to improve linear relaxation properties of the transformed formula.\nECNF formulas contain two types of variables: boolean atoms v and integer constants c. For each of the former, a boolean MIP variable v\u2217 is introduced and, for each of the latter, an integer MIP variable c\u2217. Atoms v usually occur as part of a literal l. We use l\u2217 to denote either the translation v\u2217 if v occurs positively in l, or (1\u2212 v\u2217) if v occurs negatively in l.\nAs our transformation starts from the ECNF form, it only needs to handle a limited set of constraints, four of them are currently supported by our transformation. The first type of constraints are clauses \u2013 disjunctions of literals. A clause l1 \u2228 . . . \u2228 ln is tranformed into \u2211 i l\u2217 i \u2265 1.\nThe second type are equivalences, either of the form v \u21d4 l1 \u2227 . . . \u2227 ln or of the form v \u21d4 l1 \u2228 . . . \u2228 ln. They are translated as v \u21d4 \u2211 i l\u2217 i \u2265 n and\nv \u21d4 \u2211\ni l\u2217 i \u2265 1 respectively. These forms are further transformed with the Big\nM method as described above. The third type are reified linear sums: v \u21d4 \u2211 i aixi \u223c b, with \u223c one of {<,\u2264,=,\u2265, >, 6=}. These sums originate from linear arithmetic expressions over integer domains in FO(\u00b7) as well as aggregate expressions over boolean variables.\nThe strict inequalities < and > can be converted to \u2264 or \u2265 by adding 1 to the appropriate side of the comparison operator, after which the formula can be transformed to a set of formula\u2019s of form (1). The = case requires the introduction of two auxiliary boolean variables w1, w2 splitting the equality into the conjunction of two inequalities : v \u21d4 w1 \u2227 w2, w1 \u21d4 \u2211 i aixi \u2265 b, and\nw2 \u21d4 \u2211 i aixi \u2264 b. These allow conversion to MIP via previously explained methods. Finally, the 6= inequality is transformed to = by negating both sides of the equivalence.\nNote however that the introduction of auxiliary booleans introduces a lot of continuous solutions, reducing the so-called tightness of the transformed constraints. For instance, in the = case, there are non-integral solutions to the translated MIP constraints such that w1 < 1, w2 < 1, v = 0 and \u2211 i aixi = b.\nHowever, this violates the original constraint that v is true iff \u2211\ni aixi = b. We\nwill see in the experiments that the performance of the MIP solver suffers when many such equality constraints are present.\nThe fourth type consists of logical definitions. A definition in ECNF is formed by a set of logical rules of the form:\nv \u2190 l1 \u2227 . . . \u2227 ln or v \u2190 l1 \u2228 . . . \u2228 ln\nwhere v is a boolean variable called the head, while li are referred to as body literals. ECNF definitions are in so-called Definitional Normal Form, meaning each variable occurs at most once in the head of a rule.\nOur transformation follows Liu et al. [15], which uses Clark completion constraints [5] and level mapping constraints [14] to translate logical rules to a simpler form. The Clark completion constraints simply state that head and body are equivalent (and these equivalences are then further translated with the techniques described above) and are sufficient for non inductive definitions. However, inductive ones (such as the Reachable definition in TSP) require also level mapping constraints. These require for each head variable an integer variable representing its level. The level mapping constraints then express that a head variable can only be made true by body literals of a lower level. As a result, the derivation of truth is well-founded, i.e., positive loops are eliminated. In the TSP example in Section 2, this ensures that every city that is Reachable is indeed connected to the Depot and not part of a subtour disconnected from the Depot. While Liu et al. require level mapping variables to be integral [15], they can in fact be continuous; the correctness only relies on a strict ordering. We observed that dropping the integrality constraints on these variables improves performance on, e.g., TSP problems.\nEven though the four mentioned types of constraints suffice to experimentally analyze many interesting problems, two ECNF constraints currently are not translated to MIP. The first is the reified conditional linear sum, for which the terms contributing to the linear sum depend on the truth value of some literal li:\nv \u21d4 \u2211\ni|li=1\naixi \u223c b (2)\nThis kind of constraint originates from aggregate expressions over sets that are not derivable from the input data. We give an unimplemented conversion of (2) to MIP-transformable constraints by introducing auxiliary integer variables x\u2032\ni :\nv \u21d4 \u2211\ni\naix \u2032 i \u223c b | \u2200i : li \u21d2 x \u2032 i = xi | \u2200i : \u00acli \u21d2 x \u2032 i = 0\nThe second unimplemented type of constraints are reified conditional products of the form a(\u03a0i|li=1xi) \u223c b. Except for the trivial case with only one factor in the product, these constraints are inherently non-linear, and can not be efficiently converted to a set of linear (in)equalities."}, {"heading": "4 Experiments", "text": "In this section we compare MiniSAT(ID)\u2019s performance with CPLEX\u2019s performance on problems specified in FO(\u00b7). MiniSAT(ID) takes as input the grounded ECNF constraints, while CPLEX takes as input the MIP translations (in the form of MPS files) returned by the transformation of ECNF explained in the previous section. For six problems, we also verify the performance difference between our automatic translations and a direct MIP model."}, {"heading": "4.1 The benchmark set", "text": "Our benchmark set consists of a mix of Artificial Intelligence and Operations Research problems. Table 1 contains an overview. Problems classified as search problems are considered optimization problems with a constant objective function \u2013 each feasible solution is an optimal solution. Search problems are included for two reasons. Firstly, since we are investigating the feasibility of a MIP backend to the IDP system, we are also interested in a MIP solver\u2019s performance on non-optimization problems. Secondly, the practical difference between solving a search or optimization problem is often only a relatively simple optimization constraint, compared to other, more crucial problem characteristics.\nNote the two different specifications of the NQueens problem: one is logicbased with a boolean variable for each square on the chessboard, and the other is CP-based with a finite-domain variable for each row on the chessboard."}, {"heading": "4.2 Evaluating the MIP backend", "text": "We implemented the transformation of ECNF to MIP in version 3.4 of the IDP system, used the corresponding version of MiniSAT(ID) as CP solver, and used\nIBM ILOG CPLEX Optimization Studio V12.6.0 as MIP solver, setting MPS as input format. Hardware used is an Intel Core i5-3570 cpu, 8 GiB of ram, running Ubuntu 14.04 64-bit.\nECNF and MPS instances were generated with a 600s 4GB resource limit. Any resource limits reached during the ECNF generation step are classified as unsolved instances, but given between brackets at Table 1. Every ECNF instance generated resulted in a succesfully generated MPS instance.\nThe solving of these ECNF and MPS instances again had a 600s 4GB resource limit. Instances are considered succesfully solved if the solver reports the detection of an optimal solution, which for the search category corresponds to any feasible solution. The benchmark instances and detailed results are publicly available [13], while executable specifications can be found at adams.cs.kuleuven.be/idp/idp2mip.html. Source code for IDP and MiniSAT(ID) is available upon request.\nFigure 1(a) shows the average ratio of the size of MIP models compared to the original ECNF theory in terms of the number of variables and constraints. The lower the bars, the less auxiliary variables and constraints are added in the transformed models. Clearly the ratio depends heavily on the problem at hand, or equivalently, on the types of constraints present. For TSP, TTP, Solitaire and Hanoi, the level mapping constraints originating from definitions introduce a lot of new variables. For PPM, Graceful Graphs and NQueens CP, the reified linear sums with an = or 6= comparator explain the increased variable count.\nConcerning constraint ratios, we counted a definitional rule as a single constraint, since this gives the fairest comparison with the number of constraints (rows) in the transformed MIP model. On average, 2.9 constraints are present\nin the transformed model for each constraint in the ECNF theory. This fits the expected variance.\nFigure 1(b) shows the comparison between the number of optimally solved instances for MiniSAT(ID) and for CPLEX. For optimization problems, CPLEX almost always outperforms MiniSAT(ID). In particular, the large performance difference for the polynomial Assignment and Shortest Path, and for the weakly NP-hard problem Knapsack is impressive. This is explained by the fact that Assignment and Shortest Path are integer solvable by solving only their linear relaxation, and MIP solvers are known to perform well on Knapsack. Our results reflect this, indicating that the transformation from FO(\u00b7) to MIP did not make these problems harder to solve. For harder problems like Maximum Clique, TTP or TSP, MiniSAT(ID) can also solve no more than a fraction of CPLEX\u2019s solved instances. It is clear that just by switching the backend, the number of solved problems can increase significantly.\nAs far as Traveling Umpire and Chromatic Number are concerned,MiniSAT(ID) performs slightly better than CPLEX, even though these two problems are transformed quite efficiently with few auxiliary variables and constraints. Nonetheless, Hanoi is the only clear win for MiniSAT(ID), showing that some optimization problems can still be solved better by a strong explanation engine than by a strong relaxation engine.\nConsidering the search problems,MiniSAT(ID) performs better than CPLEX. Firstly, we zoom in onNQueens logic and NQueens CP. One could have predicted that NQueens CP is easier to solve, since the number of variables is apparently smaller than that of NQueens logic, and the constraint that there is exactly one queen on a row is satisfied purely by the choice of variables. While we knew that this was not the case for MiniSAT(ID), it was surprising to see the same performance discrepancy even more pronounced for CPLEX. The explanation is that NQueens CP contains many linear sum with 6= operator constraints, stating that two queens must take a different column and diagonal. As mentioned before, our transformation has bad linear relaxation properties for this type of constraint. The same holds for the Graceful Graphs problem, where all edges must be labeled differently. For this problem, it was known that CP outperforms MIP [19].\nA third problem where MiniSAT(ID) performs better is Solitaire, a problem similar to Hanoi where a goal configuration must be reached starting from an initial configuration using a limited sequence of actions. Since Solitaire and Hanoi are the only two such problems in our benchmark set, and both are handled unsatisfactory by CPLEX, we hypothesize that explanation based CP solvers, by design, will have an edge over relaxation-focused MIP solvers when solving deep planning problems with large sequences of actions."}, {"heading": "4.3 Comparison with direct MIP models", "text": "Of course, the results of the previous section can be influenced by the effectiveness of our implemented transformation. To account for this, and to measure the room for improvement in our MIP translation, we compared the transformed MIP model results to reasonably optimized direct MIP models. These direct MIP\nmodels were either taken from literature, or constructed by hand, with the exact origin presented in the last column of Table 1. To keep the comparison to a ground-and-solve approach fair, we only took MIP models that were \u201csimple\u201d in the sense that no column generation, decomposition approaches or special cut generation algorithms were used. In essence, the model must be solvable with a classic branch-and-bound algorithm.\nThe results are available in Table 2. Firstly, it is clear that both Hanoi and Graceful Graphs show no improvement, showing that these problems remain hard, even with a more optimized MIP model. Secondly, our transformation still leaves room for improvement. For example, the direct Chromatic Number model utilizes the direction of the optimization constraint to drop superfluous constraints enforced by the direction of optimization."}, {"heading": "5 Conclusion and future work", "text": "This paper confirms that the IDP system is no exception to other systems \u2013 a MIP backend allows IDP to solve a great range of extra problems. However, MIP cannot completely replace the CP backend. Certain deep planning problems are not satisfactory solved, and the lack of tightness for translations of reified linear sums with 6= or = operators poses problems.\nWe also point out that integrality constraints on level mapping variables should be dropped. Lastly, we do not agree with the sentiment that for problems involving only binary variables and constraints, the performance of CPLEX is not as competitive [15]. Our experiments show CPLEX\u2019 performance on boolean problems such as Maximum Clique, NQueens logic and Chromatic Numbering to be more than competitive.\nAs far as future work is concerned, it would be interesting to improve the tightness of the transformation for reified linear sums with 6= or = operators. Inspiration can be drawn from [20]. Also, we plan to implement a linear relaxation propagator in MiniSAT(ID), possibly borrowing ideas from the SAT Modulo Theories community [11]."}, {"heading": "Acknowledgement", "text": "Work supported by the Belgian Science Policy Office (BELSPO) in the Interuniversity Attraction Pole COMEX. (http://comex.ulb.ac.be), Research Foundation Flanders (FWO), BOF (GOA De Raedt), and the Marie Curie ITN STEEP (Grant Agreement no. 316560, http://www.steep-itn.eu/steep/index.aspx)."}], "references": [{"title": "Flexible, rule-based constraint model linearisation", "author": ["S. Brand", "G. Duck", "J. Puchinger", "P. Stuckey"], "venue": "Practical Aspects of Declarative Languages, Lecture Notes in Computer Science,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Answer set programming at a glance", "author": ["G. Brewka", "T. Eiter", "M. Truszczy\u0144ski"], "venue": "CACM 54(12), 92\u2013103", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Predicate logic as a modeling language: Modeling and solving some machine learning and data mining problems with IDP3", "author": ["M. Bruynooghe", "H. Blockeel", "B. Bogaerts", "B. De Cat", "S. De Pooter", "J. Jansen", "A. Labarre", "J. Ramon", "M. Denecker", "S. Verwer"], "venue": "TPLP ((in press)", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Negation as failure", "author": ["K.L. Clark"], "venue": "Logic and Data Bases. pp. 293\u2013322. Plenum Press", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1978}, {"title": "Separating Knowledge from Computation: An FO(.) Knowledge Base System and its Model Expansion Inference", "author": ["B. De Cat"], "venue": "Ph.D. thesis,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "A prototype of a knowledge-based programming environment", "author": ["S. De Pooter", "J. Wittocx", "M. Denecker"], "venue": "Tompits, H., Abreu, S., Oetsch, J., P\u00fchrer, J., Seipel, D., Umeda, M., Wolf, A. (eds.) INAP/WLP. Lecture Notes in Computer Science, vol. 7773, pp. 279\u2013286. Springer", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "A logic of nonmonotone inductive definitions", "author": ["M. Denecker", "E. Ternovska"], "venue": "ACM Trans. Comput. Log. 9(2), 14:1\u201314:52", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2008}, {"title": "Building a knowledge base system for an integration of logic programming and classical logic", "author": ["M. Denecker", "J. Vennekens"], "venue": "Gar\u0107\u0131a de la Banda, M., Pontelli, E. (eds.) ICLP. LNCS, vol. 5366, pp. 71\u201376. Springer", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2008}, {"title": "The well-founded semantics is the principle of inductive definition, revisited", "author": ["M. Denecker", "J. Vennekens"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "A fast linear-arithmetic solver for dpll(t)", "author": ["B. Dutertre", "L. de Moura"], "venue": "Computer Aided Verification, Lecture Notes in Computer Science,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2006}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning, Morgan & Claypool Publishers", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}, {"title": "Computing stable models via reductions to difference logic", "author": ["T. Janhunen", "I. Niemel\u00e4", "M. Sevalnev"], "venue": "Erdem, E., Lin, F., Schaub, T. (eds.) LPNMR. LNCS, vol. 5753, pp. 142\u2013154. Springer", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2009}, {"title": "Answer Set Programming via Mixed Integer Programming", "author": ["G. Liu", "T. Janhunen", "I. Niemel\u00e4"], "venue": "Brewka, G., Eiter, T., McIlraith, S.A. (eds.) KR. pp. 32\u201342. AAAI Press", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2012}, {"title": "The design of the Zinc modelling language", "author": ["K. Marriott", "N. Nethercote", "R. Rafeh", "P.J. Stuckey", "M. Garcia de la Banda", "M. Wallace"], "venue": "Constraints 13(3), 229\u2013 267", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "A cutting plane algorithm for graph coloring", "author": ["I. M\u00e9ndez-D\u0131\u0301az", "P. Zabala"], "venue": "Discrete Applied Mathematics 156(2), 159\u2013179", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2008}, {"title": "Integer programming formulation of traveling salesman problems", "author": ["C.E. Miller", "A.W. Tucker", "R.A. Zemlin"], "venue": "J. ACM 7(4),", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1960}, {"title": "Graceful graphs and graceful labelings: two mathematical programming formulations and some other new results", "author": ["T.A. Redl"], "venue": "Congressus Numerantium pp. 17\u201332", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2003}, {"title": "Linear formulation of constraint programming models and hybrid solvers", "author": ["P. Refalo"], "venue": "Principles and Practice of Constraint Programming CP", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2000}, {"title": "Branch-andPrice and Improved Bounds to the Traveling Umpire Problem", "author": ["T. Toffolo", "S. Van Malderen", "T. Wauters", "G. Vanden Berghe"], "venue": "Proceedings of the 10th International Conference of the Practice and Theory of Automated Timetabling,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Logic and Integer Programming", "author": ["H.P. Williams"], "venue": "Springer", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "In [2], the use of a MIP backend for MiniZinc [16] was explored; however, not much guidance is provided for chosing between the MIP and the CP backend.", "startOffset": 3, "endOffset": 6}, {"referenceID": 13, "context": "In [2], the use of a MIP backend for MiniZinc [16] was explored; however, not much guidance is provided for chosing between the MIP and the CP backend.", "startOffset": 46, "endOffset": 50}, {"referenceID": 12, "context": "In [15], a MIP solver is used as a backend for an ASP [3,12] system.", "startOffset": 3, "endOffset": 7}, {"referenceID": 1, "context": "In [15], a MIP solver is used as a backend for an ASP [3,12] system.", "startOffset": 54, "endOffset": 60}, {"referenceID": 10, "context": "In [15], a MIP solver is used as a backend for an ASP [3,12] system.", "startOffset": 54, "endOffset": 60}, {"referenceID": 7, "context": "In this paper we describe the use of a MIP backend for the IDP system [9,7,4].", "startOffset": 70, "endOffset": 77}, {"referenceID": 5, "context": "In this paper we describe the use of a MIP backend for the IDP system [9,7,4].", "startOffset": 70, "endOffset": 77}, {"referenceID": 2, "context": "In this paper we describe the use of a MIP backend for the IDP system [9,7,4].", "startOffset": 70, "endOffset": 77}, {"referenceID": 7, "context": "The IDP system [9,7] is a knowledge base system that aims at separating knowledge from problem solving allowing for the reuse of the same knowledge for solving different problems.", "startOffset": 15, "endOffset": 20}, {"referenceID": 5, "context": "The IDP system [9,7] is a knowledge base system that aims at separating knowledge from problem solving allowing for the reuse of the same knowledge for solving different problems.", "startOffset": 15, "endOffset": 20}, {"referenceID": 6, "context": "For the latter, the meaning is based on the intuitive mathematical reading of definitions, and is formalized by the parametrized well-founded semantics [8,10].", "startOffset": 152, "endOffset": 158}, {"referenceID": 8, "context": "For the latter, the meaning is based on the intuitive mathematical reading of definitions, and is formalized by the parametrized well-founded semantics [8,10].", "startOffset": 152, "endOffset": 158}, {"referenceID": 4, "context": "In the first phase, an IDP input specification is reduced to a set of constraints in Extended Conjunctive Normal Form (ECNF) [6].", "startOffset": 125, "endOffset": 128}, {"referenceID": 2, "context": "A more elaborate description and some examples can be found in [4].", "startOffset": 63, "endOffset": 66}, {"referenceID": 19, "context": "We base our transformation method on the transformation of FO to MIP given by Williams [26].", "startOffset": 87, "endOffset": 91}, {"referenceID": 12, "context": "[15], which uses Clark completion constraints [5] and level mapping constraints [14] to translate logical rules to a simpler form.", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "[15], which uses Clark completion constraints [5] and level mapping constraints [14] to translate logical rules to a simpler form.", "startOffset": 46, "endOffset": 49}, {"referenceID": 11, "context": "[15], which uses Clark completion constraints [5] and level mapping constraints [14] to translate logical rules to a simpler form.", "startOffset": 80, "endOffset": 84}, {"referenceID": 12, "context": "require level mapping variables to be integral [15], they can in fact be continuous; the correctness only relies on a strict ordering.", "startOffset": 47, "endOffset": 51}, {"referenceID": 12, "context": "Shortest Path Opt P 30 (1) [25] Knapsack Opt NP-hard 30 [15] Traveling Salesman (TSP) Opt NP-hard 30 [25] [18]", "startOffset": 56, "endOffset": 60}, {"referenceID": 15, "context": "Shortest Path Opt P 30 (1) [25] Knapsack Opt NP-hard 30 [15] Traveling Salesman (TSP) Opt NP-hard 30 [25] [18]", "startOffset": 106, "endOffset": 110}, {"referenceID": 18, "context": "Traveling Umpire (TUP) Opt NP-hard 23 (9) [23] [21] Traveling Tournament (TTP) Opt NP-hard 20 [22] Maximum Clique Opt NP-hard 30 [1] -", "startOffset": 47, "endOffset": 51}, {"referenceID": 14, "context": "Hanoi Four Towers (Hanoi) Opt NP-hard 30 [1] handmade Chromatic Number Opt NP-hard 30 [24] [17]", "startOffset": 91, "endOffset": 95}, {"referenceID": 16, "context": "Graceful Graphs Search NP-complete 30 [1] [19] NQueens Logic Search NP-complete 15 (3) handmade handmade NQueens CP Search NP-complete 15 handmade -", "startOffset": 42, "endOffset": 46}, {"referenceID": 16, "context": "For this problem, it was known that CP outperforms MIP [19].", "startOffset": 55, "endOffset": 59}, {"referenceID": 12, "context": "Lastly, we do not agree with the sentiment that for problems involving only binary variables and constraints, the performance of CPLEX is not as competitive [15].", "startOffset": 157, "endOffset": 161}, {"referenceID": 17, "context": "Inspiration can be drawn from [20].", "startOffset": 30, "endOffset": 34}, {"referenceID": 9, "context": "Also, we plan to implement a linear relaxation propagator in MiniSAT(ID), possibly borrowing ideas from the SAT Modulo Theories community [11].", "startOffset": 138, "endOffset": 142}], "year": 2016, "abstractText": "The IDP knowledge base system currently usesMiniSAT(ID) as its backend Constraint Programming (CP) solver. A few similar systems have used a Mixed Integer Programming (MIP) solver as backend. However, so far little is known about when the MIP solver is preferable. This paper explores this question. It describes the use of CPLEX as a backend for IDP and reports on experiments comparing both backends.", "creator": "LaTeX with hyperref package"}}}