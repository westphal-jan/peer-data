{"id": "1609.05473", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Sep-2016", "title": "SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient", "abstract": "As a new way of training generative models, Generative Adversarial Nets (GAN) that uses a discriminative model to guide the training of the generative model has enjoyed considerable success in generating real-valued data. However, it has limitations when the goal is for generating sequences of discrete tokens. A major reason lies in that the discrete outputs from the generative model make it difficult to pass the gradient update from the discriminative model to the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN) is a way of training generative models that use a discriminative model to guide the training of the generative model. Generative Adversarial Nets (GAN", "histories": [["v1", "Sun, 18 Sep 2016 11:42:23 GMT  (1073kb,D)", "http://arxiv.org/abs/1609.05473v1", null], ["v2", "Tue, 20 Sep 2016 09:44:18 GMT  (1074kb,D)", "http://arxiv.org/abs/1609.05473v2", null], ["v3", "Sun, 25 Sep 2016 13:06:24 GMT  (1075kb,D)", "http://arxiv.org/abs/1609.05473v3", null], ["v4", "Mon, 24 Oct 2016 13:19:26 GMT  (1075kb,D)", "http://arxiv.org/abs/1609.05473v4", null], ["v5", "Fri, 9 Dec 2016 14:37:13 GMT  (888kb,D)", "http://arxiv.org/abs/1609.05473v5", "The Thirty-First AAAI Conference on Artificial Intelligence (AAAI 2017)"], ["v6", "Fri, 25 Aug 2017 16:22:57 GMT  (1079kb,D)", "http://arxiv.org/abs/1609.05473v6", "The Thirty-First AAAI Conference on Artificial Intelligence (AAAI 2017)"]], "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["lantao yu", "weinan zhang", "jun wang", "yong yu"], "accepted": true, "id": "1609.05473"}, "pdf": {"name": "1609.05473.pdf", "metadata": {"source": "CRF", "title": "SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient", "authors": ["Lantao Yu", "Weinan Zhang", "Jun Wang", "Yong Yu"], "emails": ["yulantao@apex.sjtu.edu.cn,", "wnzhang@apex.sjtu.edu.cn,", "yyu@apex.sjtu.edu.cn,", "j.wang@cs.ucl.ac.uk"], "sections": [{"heading": "Introduction", "text": "Generating sequential synthetic data that mimics the real one is an important problem in unsupervised learning. Recently, recurrent neural networks (RNNs) with long shortterm memory (LSTM) cells (Hochreiter and Schmidhuber 1997) have shown excellent performance ranging from natural language generation to handwriting generation (Wen et al. 2015; Graves 2013). The most common approach to training an RNN is to maximize the log predictive likelihood of each true token in the training sequence given the previous observed tokens (Salakhutdinov 2009). However, as argued in (Bengio et al. 2015; Ranzato et al. 2015), the maximum likelihood approaches suffer from so-called exposure bias in the inference stage: the model generates a sequence iteratively and predicts next token conditioned on its previously predicted ones that may be never observed in the training data. Such a discrepancy between training and inference can incur accumulatively along with the sequence and will become prominent as the length of sequence increases. To address this problem, (Bengio et al. 2015) proposed a training strategy called scheduled sampling (SS), where the generative model is partially fed with its own synthetic data as prefix (observed tokens) rather than the true\ndata when deciding the next token in the training stage. Nevertheless, (Husza\u0301r 2015) showed that SS is an inconsistent training strategy and fails to address the problem fundamentally. Another possible solution of the training/inference discrepancy problem is to build the loss function on the entire generated sequence instead of each transition. For instance, in the application of machine translation, a task specific sequence score/loss, bilingual evaluation understudy (BLEU) (Papineni et al. 2002), can be adopted to guide the sequence generation. However, in many other practical applications, such as poem generation (Zhang and Lapata 2014) and chatbot (Hingston 2009), a task specific loss may not be directly available to score a generated sequence accurately.\nGeneral adversarial nets (GAN) proposed by (Goodfellow and others 2014) is a promising framework for alleviating the above problem. Specifically, in GAN a discriminative net D learns to distinguish whether a given data instance is real or not, and a generative net G learns to confuse D by generating high quality data. This approach has been successful and been mostly applied in computer vision tasks of generating samples of natural images (Denton et al. 2015).\nUnfortunately, applying GAN to generating sequences has two problems. Firstly, GAN is designed for generating real-valued, continuous data but fails to directly generate sequences of discrete tokens, such as texts (Husza\u0301r 2015). The reason is that in GANs, the gradient of the loss fromD w.r.t. the outputs by G is used to guide the generative model G to slightly change the generated value to make it more realistic. If the generated data is based on discrete tokens, the \u201cslight change\u201d guidance from the discriminative net makes little sense because there is probably no corresponding token for such slight change in the limited dictionary space (Goodfellow 2016). Secondly, GAN can only give the score/loss for an entire sequence when it has been generated; for a partially generated sequence, it is non-trivial to balance how good as it is now and the future score as the entire sequence.\nIn this paper, to address the above two issues, we follow (Bachman and Precup 2015; Bahdanau et al. 2016) and consider the sequence generation procedure as a sequential decision making process. The generative model is treated as an agent of reinforcement learning (RL); the state is the generated tokens so far and the action is the next token to be generated. Unlike the work in (Ranzato et al. 2015; Bahdanau et al. 2016) that requires a task-specific sequence score, such as BLEU in machine translation, to give the reward, we employ a discriminator to evaluate the sequence\nar X\niv :1\n60 9.\n05 47\n3v 1\n[ cs\n.L G\n] 1\n8 Se\np 20\n16\nand feedback the evaluation to guide the learning of the generative model. To solve the problem that the gradient cannot pass back to the generative model when the output is discrete, we regard the generative model as a stochastic parametrized policy. In our policy gradient, we employ Monte Carlo (MC) search to approximate the state-action value. We directly train the policy (generative model) via policy gradient (Sutton et al. 1999), which naturally avoids the differentiation difficulty for discrete data in a conventional GAN.\nExtensive experiments based on synthetic and real data are conducted to investigate the efficacy and properties of the proposed SeqGAN. In our synthetic data environment, SeqGAN significantly outperforms the maximum likelihood methods, scheduled sampling and PG-BLEU. In three realworld tasks, i.e. poem generation, speech language generation and music generation, SeqGAN significantly outperforms the compared baselines in various metrics including human expert judgement."}, {"heading": "Related Work", "text": "Deep generative models have recently drawn significant attention, and the ability of learning over large (unlabeled) data endows them with more potential and vitality (Salakhutdinov 2009; Bengio et al. 2013). (Hinton, Osindero, and Teh 2006) first proposed to use the contrastive divergence algorithm to efficiently training deep belief nets (DBN). (Bengio et al. 2013) proposed denoising autoencoder (DAE) that learns the data distribution in a supervised learning fashion. Both DBN and DAE learn a low dimensional representation (encoding) for each data instance and generate it from a decoding network. Recently, variational autoencoder (VAE) that combines deep learning with statistical inference intended to represent a data instance in a latent hidden space (Kingma and Welling 2014; Rezende, Mohamed, and Wierstra 2014), while still utilizing (deep) neural networks for non-linear mapping. The inference is done via variational methods. All these generative models are trained by maximizing (the lower bound of) training data likelihood, which, as mentioned by (Goodfellow and others 2014), suffers from the difficulty of approximating intractable probabilistic computations.\n(Goodfellow and others 2014) proposed an alternative training methodology to generative models, i.e. GANs, where the training procedure is a minimax game between a generative model and a discriminative model. This framework bypasses the difficulty of maximum likelihood learning and has gained striking successes in natural image generation (Denton et al. 2015). However, little progress has been made in applying GANs to sequence discrete data generation problems, e.g. natural language generation (Husza\u0301r 2015). This is due to the generator network in GAN is designed to be able to adjust the output continuously, which does not work on discrete data generation (Goodfellow 2016).\nOn the other hand, a lot of efforts have been made to generate structured sequences. Recurrent neural networks can be trained to produce sequences of tokens in many applications such as machine translation (Sutskever, Vinyals, and Le 2014; Bahdanau, Cho, and Bengio 2014). The most popular way of training RNNs is to maximize the likelihood of each token in the training data whereas (Bengio et al. 2015)\npointed out that the discrepancy between training and generating makes the maximum likelihood estimation suboptimal and proposed scheduled sampling strategy (SS). Later (Husza\u0301r 2015) theorized that the objective function underneath SS is improper and explained the reason why GANs tend to generate natural-looking samples in theory. Consequently, the GANs have great potential but are not practically feasible to discrete probabilistic models currently.\nAs pointed out by (Bachman and Precup 2015), the sequence data generation can be formulated as a sequential decision making process, which can be potentially be solved by reinforcement learning techniques. Modeling the sequence generator as a policy of picking the next token, policy gradient methods (Sutton et al. 1999) can be adopted to optimize the generator once there is an (implicit) reward function to guide the policy. For most practical sequence generation tasks, e.g. machine translation (Sutskever, Vinyals, and Le 2014), the reward signal is meaningful only for the entire sequence, for instance in the game of Go (Silver et al. 2016), the reward signal is only set at the end of the game. In those cases, state-action evaluation methods such as Monte Carlo (tree) search have been adopted (Browne et al. 2012). By contract, our proposed SeqGAN extends GANs with the RL-based generator to solve the sequence generation problem, where a reward signal is provided by the discriminator at the end of each episode via Monte Carlo approach, and the generator picks the action and learns the policy using estimated overall rewards."}, {"heading": "Sequence Generative Adversarial Nets", "text": "The sequence generation problem is denoted as follows. Given a dataset of real-world structured sequences, train a \u03b8-parameterized generative model G\u03b8 to produce a sequence Y1:T = (y1, . . . , yt, . . . , yT ), yt \u2208 Y , where Y is the vocabulary of candidate tokens. We interpret this problem based on reinforcement learning. In timestep t, the state s is the current produced tokens (y1, . . . , yt\u22121) and the action a is the next token yt to select. Thus the policy model G\u03b8(yt|Y1:t\u22121) is stochastic, whereas the state transition is deterministic after an action has been chosen, i.e. \u03b4as,s\u2032 = 1 for the next state s\u2032 = Y1:t if the current state s = Y1:t\u22121 and the action a = yt; for other next states s\u2032\u2032, \u03b4as,s\u2032\u2032 = 0.\nAdditionally, we also train a \u03c6-parameterized discriminative model D\u03c6 (Goodfellow and others 2014) to provide a guidance for improving generator G\u03b8. D\u03c6(Y1:T ) is a probability indicating how likely a sequence Y1:T is from real sequence data or not. As illustrated in Figure 1, the discriminative model D\u03c6 is trained by providing positive examples from the real sequence data and negative examples from the synthetic sequences generated from the generative model G\u03b8. At the same time, the generative model G\u03b8 is updated by employing a policy gradient and MC search on the basis of the expected end reward received from the discriminative model D\u03c6. The reward is estimated by the likelihood that it would fool the discriminative model D\u03c6. The specific formulation is given in the next subsection."}, {"heading": "SeqGAN via Policy Gradient", "text": "Following (Sutton et al. 1999), when there is no intermediate reward, the objective of the generator model (policy) G\u03b8(yt|Y1:t\u22121) is to generate a sequence from the start state\ns0 to maximize its expected end reward: J(\u03b8) = E[RT |s0, \u03b8] = \u2211 y1\u2208Y G\u03b8(y1|s0) \u00b7QG\u03b8D\u03c6(s0, y1), (1)\nwhere RT is the reward for a complete sequence. Note that the reward is from the discriminator D\u03c6, which we will discuss later. QG\u03b8D\u03c6(s, a) is the action-value function of a sequence, i.e. the expected accumulative reward starting from state s, taking action a, and then following policy G\u03b8. The rational of the objective function for a sequence is that starting from a given initial state, the goal of the generator is to generate a sequence which would make the discriminator consider it is real.\nThe next question is how to estimate the action-value function. In this paper, we consider the estimated probability of being real by the discriminator D\u03c6(Y n1:T ) as the reward. Formally, we have:\nQ G\u03b8 D\u03c6 (a = yT , s = Y1:T\u22121) = D\u03c6(Y1:T ). (2)\nHowever, the discriminator only provides a reward value for a finished sequence. Since we actually care about the longterm reward, at every timestep, we should not only consider the fitness of previous tokens (prefix) but also the resulted future outcome. This is similar to playing the games such as Go or Chess where players sometimes would give up the immediate interests for the long-term victory (Silver et al. 2016). Thus, to evaluate the action-value for an intermediate state, we apply Monte Carlo search with a roll-out policyG\u03b2 to sample the unknown last T \u2212 t tokens. We represent an N -time Monte Carlo search as{\nY 11:T , . . . , Y N 1:T } = MCG\u03b2 (Y1:t;N), (3)\nwhere Y n1:t = (y1, . . . , yt) and Y n t+1:T is sampled based on\nthe roll-out policy G\u03b2 and the current state. In our experiment, G\u03b2 is set the same as the generator, but one can use a simplified version if the speed is the priority (Silver et al. 2016). To reduce the variance and get more accurate assessment of the action value, we run the roll-out policy starting from current state till the end of the sequence for N times to get a batch of output samples. Thus, we have:\nQ G\u03b8 D\u03c6 (s = Y1:t\u22121, a = yt) = (4){ 1 N \u2211N n=1D\u03c6(Y n 1:T ), Y n 1:T \u2208 MCG\u03b2 (Y1:t;N) for t < T\nD\u03c6(Y1:t) for t = T ,\nwhere, we see that when no intermediate reward, the function is iteratively defined as the next-state value starting from state s\u2032 = Y1:t and rolling out to the end.\nA benefit of using the discriminator D\u03c6 as a reward function is that it can be dynamically updated to further improve the generative model iteratively. Once we have a set of more realistic generated sequences, we shall re-train the discriminator model as follows:\nmin \u03c6 \u2212EY\u223cpdata [logD\u03c6(Y )]\u2212 EY\u223cG\u03b8 [log(1\u2212D\u03c6(Y ))]. (5)\nEach time when a new discriminator model has been obtained, we are ready to update the generator. The proposed policy based method relies upon optimizing a parametrized policy to directly maximize the long-term reward. Following (Sutton et al. 1999), the gradient of the objective function J(\u03b8) w.r.t. the generator\u2019s parameters \u03b8 can be derived as \u2207\u03b8J(\u03b8) = EY1:t\u22121\u223cG\u03b8 [ \u2211 yt\u2208Y \u2207\u03b8G\u03b8(yt|Y1:t\u22121) \u00b7QG\u03b8D\u03c6(Y1:t\u22121, yt) ] .\n(6)\nThe above form is due to the deterministic state transition and zero intermediate rewards. The detailed derivation is provided in the appendix. Using likelihood ratios (Glynn 1990; Sutton et al. 1999), we build an unbiased estimation for Eq. (6) (on one episode):\n\u2207\u03b8J(\u03b8) ' 1\nT T\u2211 t=1 \u2211 yt\u2208Y \u2207\u03b8G\u03b8(yt|Y1:t\u22121) \u00b7QG\u03b8D\u03c6(Y1:t\u22121, yt) (7)\n= 1\nT T\u2211 t=1 \u2211 yt\u2208Y G\u03b8(yt|Y1:t\u22121)\u2207\u03b8 logG\u03b8(yt|Y1:t\u22121) \u00b7QG\u03b8D\u03c6(Y1:t\u22121, yt)\n= 1\nT T\u2211 t=1 Eyt\u223cG\u03b8(yt|Y1:t\u22121)[\u2207\u03b8 logG\u03b8(yt|Y1:t\u22121) \u00b7Q G\u03b8 D\u03c6 (Y1:t\u22121, yt)],\nwhere Y1:t\u22121 is the observed intermediate state sampled from G\u03b8. Since the expectation E[\u00b7] can be approximated by sampling methods, we then update the generator\u2019s parameters as:\n\u03b8 \u2190 \u03b8 + \u03b1h\u2207\u03b8J(\u03b8), (8)\nwhere \u03b1h \u2208 R+ denotes the corresponding learning rate at h-th step. Also the advanced gradient algorithms such as Adam and RMSprop can be adopted (Kingma and Ba 2014).\nIn summary, Algorithm 1 shows full details of the proposed SeqGAN. At the beginning of the training, we use the maximum likelihood estimation (MLE) to pre-train G\u03b8 on training set S. We found the supervised signal from the pretrained discriminator is informative to help adjust the generator efficiently.\nAfter the pre-training, the generator and discriminator are trained alternatively. As the generator gets progressed via training on g-steps episodes, the discriminator needs to be re-trained periodically to keeps a good pace with the generator. When training the discriminator, positive examples are from the given dataset S, whereas negative examples are generated from our generator. In order to keep the balance, the number of negative examples we generate for each dstep is the same as the positive examples. And to reduce the variability of the estimation, we use different sets of negative samples combined with positive ones, which is similar to bootstrapping (Quinlan 1996).\nAlgorithm 1 Sequence Generative Adversarial Nets Require: generator policy G\u03b8; roll-out policy G\u03b2 ; discriminator\nD\u03c6; a sequence dataset S = {X1:T } 1: Initialize G\u03b8 , D\u03c6 with random weights \u03b8, \u03c6. 2: Pre-train G\u03b8 using MLE on S 3: \u03b2 \u2190 \u03b8 4: Generate negative samples using G\u03b8 for training D\u03c6 5: Pre-train D\u03c6 via minimizing the cross entropy 6: repeat 7: for g-steps do 8: Generate a sequence Y1:T = (y1, . . . , yT ) \u223c G\u03b8 9: for t in 1 : T do\n10: Compute Q(a = yt; s = Y1:t\u22121) by Eq. (4) 11: end for 12: Update generator parameters via policy gradient Eq. (8) 13: end for 14: for d-steps do 15: Use current G\u03b8 to generate negative examples and combine with given positive examples S 16: Train discriminator D\u03c6 for k epochs by Eq. (5) 17: end for 18: \u03b2 \u2190 \u03b8 19: until SeqGAN converges"}, {"heading": "The Generative Model for Sequences", "text": "We use recurrent neural networks (RNNs) (Hochreiter and Schmidhuber 1997) as the generative model. An RNN maps the input embedding representations x1, . . . ,xT of the sequence x1, . . . , xT into a sequence of hidden states h1, . . . ,hT by using the update function g recursively.\nht = g(ht\u22121,xt) (9)\nMoreover, a softmax output layer z maps the hidden states into the output token distribution\np(yt|x1, . . . , xt) = z(ht) = softmax(c+ V ht), (10) where the parameters are a bias vector c and a weight ma-\ntrix V . To deal with the common vanishing and exploding gradient problem (Goodfellow, Bengio, and Courville 2016) of the backpropagation through time, we leverage the Long Short-Term Memory (LSTM) cells (Hochreiter and Schmidhuber 1997) to implement the update function g in Eq. (9). It is worth noticing that most of the RNN variants, such as the gated recurrent unit (GRU) (Cho et al. 2014) and soft attention mechanism (Bahdanau, Cho, and Bengio 2014), can be used as a generator in SeqGAN."}, {"heading": "The Discriminative Model for Sequences", "text": "Deep discriminative models such as deep neural network (DNN) (Vesely\u0300 et al. 2013), convolutional neural network (CNN) (Kim 2014) and recurrent convolutional neural network (RCNN) (Lai et al. 2015) have shown a high performance in complicated sequence classification tasks. In this paper, we choose the CNN as our discriminator as CNN has recently been shown of great effectiveness in text (token sequence) classification (Zhang and LeCun 2015). Most discriminative models can only perform classification well for an entire sequence rather than the unfinished one. In this paper, we also focus on the situation where the discriminator predicts the probability that a finished sequence is real.1\n1The generated sequence has a fixed length T . We can use the CNN padding or the RNN discriminator (Bahdanau et al. 2016) for the variable-length sequence generation problem.\nWe first represent an input sequence x1, . . . , xT as: E1:T = x1 \u2295 x2 \u2295 . . .\u2295 xT , (11)\nwhere xt \u2208 Rk is the k-dimensional token embedding and \u2295 is the concatenation operator to build the matrix E1:T \u2208 RT\u00d7k. Then a kernel w \u2208 Rl\u00d7k applies a convolutional operation to a window size of l words to produce a new feature map:\nci = \u03c1(w \u2297 Ei:i+l\u22121 + b), (12) where \u2297 operator is the summation of elementwise production, b is a bias term and \u03c1 is a non-linear function. We can use various numbers of kernels with different window sizes to extract different features. Finally we apply a max-over-time pooling operation over the feature maps c\u0303 = max {c1, . . . , cT\u2212l+1}.\nTo enhance the performance, we also add the highway architecture (Srivastava, Greff, and Schmidhuber 2015) based on the pooled feature maps. Finally, a fully connected layer with sigmoid activation is used to output the probability that the input sequence is real. The optimization target is to minimize the cross entropy between the ground truth label and the predicted probability as formulated in Eq. (5).\nDetailed implementations of the generative and discriminative models are provided in the appendix."}, {"heading": "Synthetic Data Experiments", "text": "To test the efficacy and add our understanding of SeqGAN, we conduct a simulated test with synthetic data. To simulate the real-world structured sequences, we consider a language model to capture the dependency of the tokens. We use a randomly initialized LSTM as the true model, aka, the oracle, to generate the real data distribution p(xt|x1, . . . , xt\u22121) for the following experiments."}, {"heading": "Evaluation Metric", "text": "The benefit of having such oracle is that firstly, it provides the training dataset and secondly evaluates the exact performance of the generative models, which will not be possible with real data. We know that MLE is trying to minimize the cross-entropy between the true data distribution p and our approximation q, i.e. \u2212Ex\u223cp log q(x). However, the most accurate way of evaluating generative models is that we draw some samples from it and let human observers review them based on their prior knowledge. We assume that the human observer has learned an accurate model of the natural distribution phuman(x). Then in order to increase the chance of passing Turing Test, we actually need to minimize the exact opposite average negative log-likelihood \u2212Ex\u223cq log phuman(x) (Husza\u0301r 2015), with the role of p and q exchanged. In our synthetic data experiments, we can consider the oracle to be the human observer for real-world problems, thus a perfect evaluation metric should be\nNLLoracle = \u2212EY1:T\u223cG\u03b8 [ T\u2211 t=1 logGoracle(yt|Y1:t\u22121) ] , (13)\nwhere G\u03b8 and Goracle denote our generative model and the oracle respectively.\nAt the test stage, we use G\u03b8 to generate 100,000 sequence samples and calculate NLLoracle for each sample by Goracle and their average score. Also significance tests are performed to compare the statistical properties of the generation performance between the baselines and SeqGAN.\nTable 1: Sequence generation performance comparison. The p-value is between SeqGAN and the baseline from T-test."}, {"heading": "Training Setting", "text": "To set up the synthetic data experiments, we first initialize the parameters of an LSTM network following the normal distribution N (0, 1) as the oracle describing the real data distribution Goracle(xt|x1, . . . , xt\u22121). Then we use it to generate 10,000 sequences of length 20 as the training set S for the generative models.\nIn SeqGAN algorithm, the training set for the discriminator is comprised by the generated examples with the label 0 and the instances from S with the label 1. For different tasks, one should design specific structure for the convolutional layer and in our synthetic data experiments, the kernel size is from 1 to T and the number of each kernel size is between 100 to 2002. Dropout (Srivastava et al. 2014) and L2 regularization are used to avoid over-fitting.\nFour generative models are compared with SeqGAN. The first model is a random token generation. The second one is the MLE trained LSTMG\u03b8. The third one is scheduled sampling (Bengio et al. 2015). The fourth one is the Policy Gradient with BLEU (PG-BLEU). In the scheduled sampling, the training process gradually changes from a fully guided scheme feeding the true previous tokens into LSTM, towards a less guided scheme which mostly feeds the LSTM with its generated tokens. A curriculum rate \u03c9 is used to control the probability of replacing the true tokens with the generated ones. To get a good and stable performance, we decrease \u03c9 by 0.002 for every training epoch. In the PG-BLEU algorithm, we use BLEU, a metric measuring the similarity between a generated sequence and references (training data), to score the finished samples from Monte Carlo search instead of a discriminative model."}, {"heading": "Results", "text": "The NLLoracle performance of generating sequences from the compared policies is provided in Table 1. Since the evaluation metric is fundamentally instructive, we can see the impact of SeqGAN, which outperforms other baselines signif-\n2Implementation details are in the appendix.\n0 50 100 150 200 Epochs\n8.70\n8.94 9.00\n9.50\n10.00\nN LL\n\u00a0b y\u00a0\nor ac\nle\nSeqGAN\n(a) g-steps=100, d-steps=1, k=10\n0 50 100 150 200 Epochs\n8.70\n8.89 9.00\n9.50\n10.00\nN LL\n\u00a0b y\u00a0\nor ac\nle\nSeqGAN\n(b) g-steps=30, d-steps=1, k=30\n0 50 100 150 200 Epochs\n8.70 8.81\n9.00\n9.50\n10.00\nN LL\n\u00a0b y\u00a0\nor ac\nle\nSeqGAN\n(c) g-steps=1, d-steps=1, k=10\n0 50 100 150 200 250 Epochs\n8.73\n9.00\n9.50\n10.00\nN LL\n\u00a0b y\u00a0\nor ac\nle\nSeqGAN\n(d) g-steps=1, d-steps=5, k=3\nFigure 3: Negative log-likelihood convergence performance of SeqGAN with different training strategies. The vertical dashed line represents the beginning of adversarial training.\nicantly. A significance T-test on the NLLoracle score distribution of the generated sequences from the compared models is also performed, which demonstrates the significant improvement of SeqGAN over all compared models.\nThe learning curves shown in Figure 4 illustrate the superiority of SeqGAN explicitly. After about 150 training epochs, both the maximum likelihood estimation and the schedule sampling methods converge to a relatively high NLLoracle score, whereas SeqGAN can improve the limit of the generator with the same structure as the baselines significantly. This indicates the prospect of applying adversarial training strategies to discrete sequence generative models to breakthrough the limitations of MLE. Additionally, SeqGAN outperforms PG-BLEU, which means the discriminative signal in GAN is more general and effective than a predefined score (e.g. BLEU) to guide the generative policy to capture the underlying distribution of the sequence data."}, {"heading": "Discussion", "text": "In our synthetic data experiments, we find that the stability of SeqGAN depends on the training strategy. More specifically, the g-steps, d-steps and k parameters in Algorithm 1 have a large effect on the convergence and performance of SeqGAN. Figure 3 shows the effect of these parameters. In Figure 3(a), the g-steps is much larger than the d-steps and epoch number k, which means we train the generator for many times until we update the discriminator. This strategy leads to a fast convergence but as the generator improves quickly, the discriminator cannot get fully trained and thus will provide a misleading signal gradually. In Figure 3(b), with more discriminator training epochs, the unstable training process is alleviated. In Figure 3(c), we train the generator for only one epoch and then before the discriminator gets fooled, we update it immediately based on the more realistic negative examples. In such a case, SeqGAN learns stably.\nThe d-steps in all three training strategies described above is set to 1, which means we only generate one set of nega-\ntive examples with the same number as the given dataset, and then train the discriminator on it for various k epochs. But actually we can utilize the potentially unlimited number of negative examples to improve the discriminator. This trick can be considered as a type of bootstrapping, where we combine the fixed positive examples with different negative examples to obtain multiple training sets. Figure 3(d) shows this technique can improve the overall performance with good stability, since the discriminator is shown more negative examples and each time the positive examples are emphasized, which will lead to a more comprehensive guidance for training generator. This is in line with the theorem in (Goodfellow and others 2014). When analyzing the convergence of generative adversarial nets, an important assumption is that the discriminator is allowed to reach its optimum given G. Only if the discriminator is capable of differentiating real data from unnatural data consistently, the supervised signal from it can be meaningful and the whole adversarial training process can be stable and effective."}, {"heading": "Real-world Scenarios", "text": "To complement the previous experiments, we also test SeqGAN on several real-world tasks, i.e. poem composition, speech language generation and music generation."}, {"heading": "Text Generation", "text": "For text generation scenarios, we apply the proposed SeqGAN to generate Chinese poems and Barack Obama political speeches. In the poem composition task, we use a corpus3 of 16,394 Chinese quatrains, each containing four lines of twenty characters in total. To focus on a fully automatic solution and stay general, we did not use any prior knowledge of special structure rules in Chinese poems such as specific phonological rules. In the Obama political speech generation task, we use a corpus4, which is a collection of 11,092 paragraphs from Obama\u2019s political speeches.\nWe use BLEU score as an evaluation metric to measure the similarity degree between the generated texts and the human-created texts. BLEU is originally designed to automatically judge the machine translation quality (Papineni et al. 2002). The key point is to compare the similarity between the results created by machine and the references provided by human. Specifically, for poem evaluation, we set n-gram to be 2 (BLEU-2) since most words (dependency) in classical Chinese poems consist of one or two characters (Yi, Li, and Sun 2016) and for the similar reason, we use BLEU-3 and BLEU-4 to evaluate Obama speech generation performance. In our work, we use the whole test set as the references instead of trying to find some references for the following line given the previous line (He, Zhou, and Jiang 2012). The reason is in generation tasks we only provide some positive examples and then let the model catch the patterns of them and generate new ones. In addition to BLEU, we also choose poem generation as a case for human judgement since a poem is a creative text construction and human evaluation is ideal. Specifically, we mix the 20 real poems and 20 each generated from SeqGAN and MLE. Then 70 experts on Chinese poems are invited to judge whether each\n3 http://homepages.inf.ed.ac.uk/mlap/Data/EMNLP14/ 4 https://github.com/samim23/obama-rnn\nof the 60 poem is created by human or machines. Once regarded to be real, it gets +1 score, otherwise 0. Finally, the average score for each algorithm is calculated.\nThe experiment results are shown in Tables 2 and 3, from which we can see the significant advantage of SeqGAN over the MLE in text generation. Particularly, for poem composition, SeqGAN performs comparably to real human data."}, {"heading": "Music Generation", "text": "For music composition, we use Nottingham5 dataset as our training data, which is a collection of 695 music of folk tunes in midi file format. We study the solo track of each music. In our work, we use 88 numbers to represent 88 pitches, which correspond to the 88 keys on the piano. With the pitch sampling for every 0.4s6, we transform the midi files into sequences of numbers from 1 to 88 with the length 32.\nTo model the fitness of the discrete piano key patterns, BLEU is used as the evaluation metric. To model the fitness of the continuous pitch data patterns, the mean squared error (MSE) (Manaris et al. 2007) is used for evaluation.\nFrom Table 4, we see that SeqGAN outperforms the MLE significantly in both metrics in the music generation task."}, {"heading": "Conclusion", "text": "In this paper, we proposed a sequence generation method, SeqGAN, to effectively train generative adversarial nets for structured sequences generation via policy gradient. To our best knowledge, this is the first work extending GANs to generate sequences of discrete tokens. In our synthetic data experiments, we used an oracle evaluation mechanism to explicitly illustrate the superiority of SeqGAN over strong baselines. For three real-world scenarios, i.e., poems, speech language and music generation, SeqGAN showed excellent performance on generating the creative sequences. We also performed a set of experiments to investigate the robustness and stability of training SeqGAN. For future work, we plan to build Monte Carlo tree search and value network (Silver et al. 2016) to improve action decision making for large scale data and in the case of longer-term planning.\n5 http://www.iro.umontreal.ca/\u02dclisa/deep/data 6 http://deeplearning.net/tutorial/rnnrbm.html"}, {"heading": "Proof for Eq. (6)", "text": "In this section, we provide the detailed derivation of Eq. (6) in the paper.\nAs mentioned in SEQUENCE GENERATIVE ADVERSARIAL NETS section, the state transition is deterministic after an action has been chosen, i.e. \u03b4as,s\u2032 = 1 for the next state s\n\u2032 = Y1:t if the current state s = Y1:t\u22121 and the action a = yt; for other next states s\u2032\u2032, \u03b4as,s\u2032\u2032 = 0. In addition, the intermediate rewardRas is 0. We re-write the action value and state value as follows:\nQG\u03b8 (s = Y1:t\u22121, a = yt) = Ras + \u2211 s\u2032\u2208S \u03b4ass\u2032V G\u03b8 (s\u2032) = V G\u03b8 (Y1:t) (14)\nV G\u03b8 (s = Y1:t\u22121) = \u2211 yt\u2208Y G\u03b8(yt|Y1:t\u22121) \u00b7QG\u03b8 (Y1:t\u22121, yt) (15)\nFor the start state s0, the value is calculated as\nV G\u03b8 (s0) = E[RT |s0, \u03b8] (16) = \u2211 y1\u2208Y G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1), (17)\nwhich is the objective function J(\u03b8) to maximize in Eq. (1) of the paper. Then we can obtain the gradient of the objective function, defined in Eq. (1), w.r.t. the generator\u2019s parameters \u03b8:\n\u2207\u03b8J(\u03b8) (18) = \u2207\u03b8V G\u03b8 (s0) = \u2207\u03b8[ \u2211 y1\u2208Y G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1)] (19)\n= \u2211 y1\u2208Y [\u2207\u03b8G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1) +G\u03b8(y1|s0) \u00b7 \u2207\u03b8QG\u03b8 (s0, y1)] (20)\n= \u2211 y1\u2208Y [\u2207\u03b8G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1) +G\u03b8(y1|s0) \u00b7 \u2207\u03b8V G\u03b8 (Y1:1)] (21)\n= \u2211 y1\u2208Y \u2207\u03b8G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1) + \u2211 y1\u2208Y G\u03b8(y1|s0)\u2207\u03b8[ \u2211 y2\u2208Y G\u03b8(y2|Y1:1)QG\u03b8 (Y1:1, y2)] (22)\n= \u2211 y1\u2208Y \u2207\u03b8G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1) + \u2211 y1\u2208Y G\u03b8(y1|s0) \u2211 y2\u2208Y [\u2207\u03b8G\u03b8(y2|Y1:1) \u00b7QG\u03b8 (Y1:1, y2)\n+G\u03b8(y2|Y1:1)\u2207\u03b8QG\u03b8 (Y1:1, y2)] (23) = \u2211 y1\u2208Y \u2207\u03b8G\u03b8(y1|s0) \u00b7QG\u03b8 (s0, y1) + \u2211 Y1:1 P (Y1:1|s0;G\u03b8) \u2211 y2\u2208Y \u2207\u03b8G\u03b8(y2|Y1:1) \u00b7QG\u03b8 (Y1:1, y2)\n+ \u2211 Y1:2 P (Y1:2|s0;G\u03b8)\u2207\u03b8V G\u03b8 (Y1:2) (24)\n= T\u2211 t=1 \u2211 Y1:t\u22121 P (Y1:t\u22121|s0;G\u03b8) \u2211 yt\u2208Y \u2207\u03b8G\u03b8(yt|Y1:t\u22121) \u00b7QG\u03b8 (Y1:t\u22121, yt) (25)\n= EY1:t\u22121\u223cG\u03b8 [ \u2211 yt\u2208Y \u2207\u03b8G\u03b8(yt|Y1:t\u22121) \u00b7QG\u03b8 (Y1:t\u22121, yt)], (26)\nwhich is the result in Eq. (6) of the paper.\nModel Implementations In this section, we present a full version of the discussed generative model and discriminative model in our paper submission.\nThe Generative Model for Sequences We use recurrent neural networks (RNNs) (Hochreiter and Schmidhuber 1997) as the generative model. An RNN maps the input embedding representations x1, . . . ,xT of the sequence x1, . . . , xT into a sequence of hidden states h1, . . . ,hT by using the update function g recursively.\nht = g(ht\u22121,xt) (27)\nMoreover, a softmax output layer z maps the hidden states into the output token distribution\np(yt|x1, . . . , xt) = z(ht) = softmax(c+ V ht), (28)\nwhere the parameters are a bias vector c and a weight matrix V . The vanishing and exploding gradient problem in backpropagation through time (BPTT) issues a challenge of learning long-term dependencies to recurrent neural network (Goodfellow, Bengio, and Courville 2016). To address such problems, gated RNNs have been designed based on the basic idea of creating paths through time that have derivatives that neither vanish nor explode. Among various gated RNNs, we choose the Long Short-Term Memory (LSTM) (Hochreiter and Schmidhuber 1997) to be our generative networks with the update equations:\nft = \u03c3(Wf \u00b7 [ht\u22121,xt] + bf ), it = \u03c3(Wi \u00b7 [ht\u22121,xt] + bi), ot = \u03c3(Wo \u00b7 [ht\u22121,xt] + bo), st = ft st\u22121 + it tanh(Ws \u00b7 [ht\u22121,xt] + bs), ht = ot tanh(st),\n(29)\nwhere [h,x] is the vector concatenation and is the elementwise product. For simplicity, we use the standard LSTM as the generator, while it is worth noticing that most of the RNN variants, such as the gated recurrent unit (GRU) (Cho et al. 2014) and soft attention mechanism (Bahdanau, Cho, and Bengio 2014), can be used as a generator in SeqGAN.\nThe standard way of training an RNN G\u03b8 is the maximum likelihood estimation (MLE), which involves minimizing the negative loglikelihood \u2212 \u2211T t=1 logG\u03b8(yt = xt| {x1, . . . , xt\u22121}) for a generated sequence (y1, . . . , yT ) given input (x1, . . . , xT ). However, when applying MLE to generative models, there is a discrepancy between training and generating (Bengio et al. 2015; Husza\u0301r 2015), which motivates our work.\nThe Discriminative Model for Sequences Deep discriminative models such as deep neural network (DNN) (Vesely\u0300 et al. 2013), convolutional neural network (CNN) (Kim 2014) and recurrent convolutional neural network (RCNN) (Lai et al. 2015) have shown a high performance in complicated sequence classification tasks. In this paper, we choose the CNN as our discriminator as CNN has recently been shown of great effectiveness in text (token sequence) classification (Zhang and LeCun 2015).\nSequence length (window size, kernel numbers)\n20 (1, 100),(2, 200),(3, 200),(4, 200),(5, 200)\n(6, 100),(7, 100),(8, 100),(9, 100),(10, 100) (15, 160),(20, 160)\n32 (1, 100),(2, 200),(3, 200),(4, 200),(5, 200)\n(6, 100),(7, 100),(8, 100),(9, 100),(10, 100) (16, 160),(24, 160),(32, 160)\nTo enhance the performance, we also add the highway architecture (Srivastava, Greff, and Schmidhuber 2015) before the final fully connected layer:\n\u03c4 = \u03c3(WT \u00b7 c\u0303+ bT ), C\u0303 = \u03c4 \u00b7H(c\u0303,WH) + (1\u2212 \u03c4 ) \u00b7 c\u0303,\n(33)\nwhere WT , bT and WH are highway layer weights, H denotes an affine transform followed by a non-linear activation function such as a rectified linear unit (ReLU) and \u03c4 is the \u201ctransform gate\u201d with the same dimensionality as H(c\u0303,WH) and c\u0303. Finally, we apply a sigmoid transformation to get the probability that a given sequence is real:\ny\u0302 = \u03c3(Wo \u00b7 C\u0303 + bo) (34)\nwhereWo and bo is the output layer weight and bias. When optimizing discriminative models, supervised training is applied to minimize the cross entropy, which is widely used as the objective function for classification and prediction tasks:\nL(y, y\u0302) = \u2212y log y\u0302 \u2212 (1\u2212 y) log(1\u2212 y\u0302), (35)\nwhere y is the ground truth label of the input sequence and y\u0302 is the predicted probability from the discriminative models."}, {"heading": "More Ablation Study", "text": "In the DISCUSSION subsection of SYNTHETIC DATA EXPERIMENTS section of our paper, we discussed the ablation study of three hyperparameters of SeqGAN, i.e., g-steps, d-steps and k epoch number. Here we provide another ablation study which is instructive for the better training of SeqGAN.\nAs described in our paper, we start the adversarial training process after the convergence of MLE supervised pre-training. Here we further conduct experiments to investigate the performance of SeqGAN when the supervised pre-training is insufficient.\nAs shown in Figure 4, if we pre-train the generative model with conventional MLE methods for only 20 epochs, which is far from convergence, then the adversarial training process improves the generator quite slowly and unstably. The reason is that in SeqGAN, the discriminative model provides reward guidance when training the generator and if the generator acts almost randomly, the discriminator will identify the generated sequence to be unreal with high confidence and almost every action the generator takes receives a low (unified) reward, which does not guide the generator towards a good improvement direction, resulting in an ineffective training procedure. This indicates that in order to apply adversarial training strategies to sequence generative models, a sufficient pre-training is necessary.\nCode Instructions for Repeatable Experiments The code and instructions are provided in https://github.com/LantaoYu/SeqGAN."}], "references": [{"title": "and Precup", "author": ["P. Bachman"], "venue": "D.", "citeRegEx": "Bachman and Precup 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "An actor-critic algorithm for sequence prediction", "author": ["Bahdanau"], "venue": null, "citeRegEx": "Bahdanau,? \\Q2016\\E", "shortCiteRegEx": "Bahdanau", "year": 2016}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Cho Bahdanau", "D. Bengio 2014] Bahdanau", "K. Cho", "Y. Bengio"], "venue": null, "citeRegEx": "Bahdanau et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Generalized denoising auto-encoders as generative models", "author": ["Bengio"], "venue": null, "citeRegEx": "Bengio,? \\Q2013\\E", "shortCiteRegEx": "Bengio", "year": 2013}, {"title": "Scheduled sampling for sequence prediction with recurrent neural networks", "author": ["Bengio"], "venue": null, "citeRegEx": "Bengio,? \\Q2015\\E", "shortCiteRegEx": "Bengio", "year": 2015}, {"title": "S", "author": ["C.B. Browne", "E. Powley", "D. Whitehouse", "Lucas"], "venue": "M.; et al.", "citeRegEx": "Browne et al. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Learning phrase representations using RNN encoder-decoder for statistical machine", "author": ["Cho"], "venue": null, "citeRegEx": "Cho,? \\Q2014\\E", "shortCiteRegEx": "Cho", "year": 2014}, {"title": "E", "author": ["Denton"], "venue": "L.; Chintala, S.; Fergus, R.; et al.", "citeRegEx": "Denton et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "P", "author": ["Glynn"], "venue": "W.", "citeRegEx": "Glynn 1990", "shortCiteRegEx": null, "year": 1990}, {"title": "Generative adversarial nets", "author": ["Goodfellow", "I others 2014] Goodfellow"], "venue": "In NIPS,", "citeRegEx": "Goodfellow and Goodfellow,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow and Goodfellow", "year": 2014}, {"title": "A", "author": ["I. Goodfellow", "Y. Bengio", "Courville"], "venue": "2016. Deep learning.", "citeRegEx": "Goodfellow. Bengio. and Courville 2016", "shortCiteRegEx": null, "year": 2015}, {"title": "Generating chinese classical poems with statistical machine translation models", "author": ["Zhou He", "J. Jiang 2012] He", "M. Zhou", "L. Jiang"], "venue": null, "citeRegEx": "He et al\\.,? \\Q2012\\E", "shortCiteRegEx": "He et al\\.", "year": 2012}, {"title": "G", "author": ["Hinton"], "venue": "E.; Osindero, S.; and Teh, Y.-W.", "citeRegEx": "Hinton. Osindero. and Teh 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Schmidhuber", "author": ["S. Hochreiter"], "venue": "J.", "citeRegEx": "Hochreiter and Schmidhuber 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "and Ba", "author": ["D. Kingma"], "venue": "J.", "citeRegEx": "Kingma and Ba 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "and Welling", "author": ["D.P. Kingma"], "venue": "M.", "citeRegEx": "Kingma and Welling 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Recurrent convolutional neural networks for text classification", "author": ["Lai"], "venue": null, "citeRegEx": "Lai,? \\Q2015\\E", "shortCiteRegEx": "Lai", "year": 2015}, {"title": "A corpus-based hybrid approach to music analysis and composition", "author": ["Manaris"], "venue": "In NCAI,", "citeRegEx": "Manaris,? \\Q2007\\E", "shortCiteRegEx": "Manaris", "year": 2007}, {"title": "Bleu: a method for automatic evaluation of machine translation", "author": ["Papineni"], "venue": null, "citeRegEx": "Papineni,? \\Q2002\\E", "shortCiteRegEx": "Papineni", "year": 2002}, {"title": "J", "author": ["Quinlan"], "venue": "R.", "citeRegEx": "Quinlan 1996", "shortCiteRegEx": null, "year": 1996}, {"title": "Sequence level training with recurrent neural networks. arXiv:1511.06732", "author": ["Ranzato"], "venue": null, "citeRegEx": "Ranzato,? \\Q2015\\E", "shortCiteRegEx": "Ranzato", "year": 2015}, {"title": "D", "author": ["Rezende"], "venue": "J.; Mohamed, S.; and Wierstra, D.", "citeRegEx": "Rezende. Mohamed. and Wierstra 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "C", "author": ["D. Silver", "A. Huang", "Maddison"], "venue": "J.; Guez, A.; Sifre, L.; et al.", "citeRegEx": "Silver et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "G", "author": ["Srivastava, N.", "Hinton"], "venue": "E.; Krizhevsky, A.; Sutskever, I.; and Salakhutdinov, R.", "citeRegEx": "Srivastava et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "R", "author": ["Srivastava"], "venue": "K.; Greff, K.; and Schmidhuber, J.", "citeRegEx": "Srivastava. Greff. and Schmidhuber 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Q", "author": ["I. Sutskever", "O. Vinyals", "Le"], "venue": "V.", "citeRegEx": "Sutskever. Vinyals. and Le 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "S", "author": ["R.S. Sutton", "D.A. McAllester", "Singh"], "venue": "P.; Mansour, Y.; et al.", "citeRegEx": "Sutton et al. 1999", "shortCiteRegEx": null, "year": 1999}, {"title": "Sequence-discriminative training of deep neural networks", "author": ["Vesel\u1ef3"], "venue": null, "citeRegEx": "Vesel\u1ef3,? \\Q2013\\E", "shortCiteRegEx": "Vesel\u1ef3", "year": 2013}, {"title": "Semantically conditioned LSTM-based natural language generation for spoken dialogue systems", "author": ["Wen"], "venue": null, "citeRegEx": "Wen,? \\Q2015\\E", "shortCiteRegEx": "Wen", "year": 2015}, {"title": "Generating chinese classical poems with RNN encoderdecoder", "author": ["Li Yi", "X. Sun 2016] Yi", "R. Li", "M. Sun"], "venue": null, "citeRegEx": "Yi et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yi et al\\.", "year": 2016}, {"title": "and Lapata", "author": ["X. Zhang"], "venue": "M.", "citeRegEx": "Zhang and Lapata 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "and LeCun", "author": ["X. Zhang"], "venue": "Y.", "citeRegEx": "Zhang and LeCun 2015", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [], "year": 2016, "abstractText": "As a new way of training generative models, Generative Adversarial Nets (GAN) that uses a discriminative model to guide the training of the generative model has enjoyed considerable success in generating real-valued data. However, it has limitations when the goal is for generating sequences of discrete tokens. A major reason lies in that the discrete outputs from the generative model make it difficult to pass the gradient update from the discriminative model to the generative model. Also, the discriminative model can only assess a complete sequence, while for a partially generated sequence, it is non-trivial to balance its current score and the future one once the entire sequence has been generated. In this paper, we propose a sequence generation framework, called SeqGAN, to solve the problems. Modeling the data generator as a stochastic policy in reinforcement learning (RL), SeqGAN bypasses the generator differentiation problem by directly performing gradient policy update. The RL reward signal comes from the GAN discriminator judged on a complete sequence, and is passed back to the intermediate state-action steps using Monte Carlo search. Extensive experiments on synthetic data and real-world tasks demonstrate significant improvements over strong baselines.", "creator": "LaTeX with hyperref package"}}}