{"id": "1610.04286", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Oct-2016", "title": "Sim-to-Real Robot Learning from Pixels with Progressive Nets", "abstract": "Applying end-to-end learning to solve complex, interactive, pixel-driven control tasks on a robot is an unsolved problem. Deep Reinforcement Learning algorithms are too slow to achieve performance on a real robot, but their potential has been demonstrated in simulated environments. We propose using progressive networks to bridge the reality gap and transfer learned policies from simulation to the real world. The progressive net approach is a general framework that enables reuse of everything from low-level visual features to high-level policies for transfer to new tasks, enabling a compositional, yet simple, approach to building complex skills. We present an early demonstration of this approach with a number of experiments in the domain of robot manipulation that focus on bridging the reality gap. Unlike other proposed approaches, our real-world experiments demonstrate successful task learning from raw visual input on a fully actuated robot manipulator. Moreover, rather than relying on model-based trajectory optimisation, the task learning is accomplished using only deep reinforcement learning and sparse rewards. The main advantage of this approach is that it eliminates the need for data validation on the robot. We also explain the computational benefits in parallel, and propose a number of additional advantages in parallel, in which it could reduce the complexity of training and learning tasks on a real robot.\n\n\n\nWe propose a novel way to address this problem in the next issue of the issue of deep reinforcement learning. The idea that reinforcement learning has an adaptive potential is controversial, and has not yet been proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven. The idea that reinforcement learning can be learned is controversial, and is not yet proven.", "histories": [["v1", "Thu, 13 Oct 2016 22:42:10 GMT  (1603kb,D)", "http://arxiv.org/abs/1610.04286v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.LG", "authors": ["andrei a rusu", "matej vecerik", "thomas roth\\\"orl", "nicolas heess", "razvan pascanu", "raia hadsell"], "accepted": false, "id": "1610.04286"}, "pdf": {"name": "1610.04286.pdf", "metadata": {"source": "CRF", "title": "Sim-to-Real Robot Learning from Pixels with Progressive Nets", "authors": ["Andrei A. Rusu", "Matej Vecerik", "Thomas Roth\u00f6rl", "Nicolas Heess", "Razvan Pascanu", "Raia Hadsell"], "emails": ["raia}@google.com"], "sections": [{"heading": "1 Introduction", "text": "Deep Reinforcement Learning offers new promise for achieving human-level control in robotics domains, especially for pixel-to-action scenarios where state estimation is from high dimensional sensors and environment interaction and feedback are critical. With deep RL, a new set of algorithms has emerged that can attain sophisticated, precise control on challenging tasks, but these accomplishments have been demonstrated primarily in simulation, rather than on actual robot platforms.\nWhile recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods. However, this poses a significant challenge, given the long, datahungry training paradigm of pixel-based deep RL methods and the relative frailty of research robots and their human handlers. One solution is to use transfer learning methods to bridge the reality gap that separates simulation from real world domains. In this paper, we use progressive networks, a deep learning architecture that has recently been proposed for transfer learning, to demonstrate such an approach, thus providing a proof-of-concept pathway by which deep RL can be used to effect fast policy learning on a real robot.\nProgressive nets have been shown to produce positive transfer between disparate tasks such as Atari games by utilizing lateral connections to previously learnt models [18]. The addition of new capacity for each new task allows specialized input features to be learned, an important advantage for deep RL algorithms which are improved by sharply-tuned perceptual features. An advantage of progressive\nar X\niv :1\n61 0.\n04 28\n6v 1\n[ cs\n.R O\n] 1\n3 O\nnets compared with other methods for transfer learning or domain adaptation is that multiple tasks may be learned sequentially, without needing to specify source and target tasks.\nThis paper presents an approach for transfer from simulation to the real robot that is proven using real-world, sparse-reward tasks. The tasks are learned using end-to-end deep RL, with RGB inputs and joint velocity output actions. First, an actor-critic network is trained in simulation using multiple asynchronous workers [15]. The network has a convolutional encoder followed by an LSTM. From the LSTM state, using a linear layer, we compute a set of discrete action outputs that control the different degrees of freedom of the simulated robot as well as the value function. After training, a new network is initialized with lateral, nonlinear connections to each convolutional and recurrent layer of the simulation-trained network. The new network is trained on a similar task on the real robot. Our initial findings show that the inductive bias imparted by the features and encoded policy of the simulation net is enough to give a dramatic learning speed-up on the real robot."}, {"heading": "2 Transfer Learning from Simulation to Real", "text": "Our approach relies on the progressive nets architecture, which enables transfer learning through lateral connections which connect each layer of previously learnt network columns to each new column, thus supporting rich compositionality of features. We first summarize progressive nets and then discuss its application for transfer in robot domains."}, {"heading": "2.1 Progressive Networks", "text": "Progressive networks are ideal for simulation-to-real transfer of policies in robot control domains, for multiple reasons. First, features learnt for one task may be transferred to many new tasks without destruction from fine-tuning. Second, the columns may be heterogeneous, which may be important for solving different tasks, including different input modalities, or simply to improve learning speed when transferring to the real robot. Third, progressive nets add new capacity, including new input connections, when transferring to new tasks. This is advantageous for bridging the reality gap, to accommodate dissimilar inputs between simulation and real sensors.\nA progressive network starts with a single column: a deep neural network having L layers with hidden activations h(1)i \u2208 Rni , with ni the number of units at layer i \u2264 L, and parameters \u0398(1) trained to convergence. When switching to a second task, the parameters \u0398(1) are \u201cfrozen\u201d and a new column with parameters \u0398(2) is instantiated (with random initialization), where layer h(2)i receives input from both h(2)i\u22121 and h (1) i\u22121 via lateral connections. Progressive networks can be generalized in a straightforward manner to have arbitrary network width per column/layer, to accommodate varying degrees of task difficulty, or to compile lateral connections from multiple, independent networks in an ensemble setting.\nh (k) i = f W (k)i h(k)i\u22121 + \u2211 j<k U (k:j) i h (j) i\u22121  , (1) where W (k)i \u2208 Rni\u00d7ni\u22121 is the weight matrix of layer i of column k, U (k:j) i \u2208 Rni\u00d7nj are the lateral connections from layer i\u2212 1 of column j, to layer i of column k and h0 is the network input. f is an element-wise non-linearity: we use f(x) = max(0, x) for all intermediate layers.\nIn the standard pretrain-and-finetune paradigm, there is often an implicit assumption of \u201coverlap\u201d between the tasks. Finetuning is efficient in this setting, as parameters need only be adjusted slightly to the target domain, and often only the top layer is retrained. In contrast, we make no assumptions about the relationship between tasks, which may in practice be orthogonal or even adversarial. Progressive networks side-step this issue by allocating a new column, potentially with different structure or inputs, for each new task. Columns in progressive networks are free to reuse, modify or ignore previously learned features via the lateral connections.\nApplication to Reinforcement Learning. Although progressive networks are widely applicable, this paper focuses on their application to deep reinforcement learning. In this case, each column is trained to solve a particular Markov Decision Process (MDP): the k-th column thus defines a policy\n\u03c0(k)(a | s) taking as input a state s given by the environment, and generating probabilities over actions \u03c0(k)(a | s) := h(k)L (s). At each time-step, an action is sampled from this distribution and taken in the environment, yielding the subsequent state. This policy implicitly defines a stationary distribution \u03c1\u03c0(k)(s, a) over states and actions."}, {"heading": "2.2 Approach", "text": "The proposed approach for transfer from simulated to real robot domains is based on a progressive network with some specific changes. First, the columns of a progressive net do not need to have identical capacity or structure, and this can be an advantage in sim-to-real situations. Thus, the simulation-trained column is designed to have sufficient capacity and depth to learn the task from scratch, but the robot-trained columns have minimal capacity, to encourage fast learning and limit total parameter growth. Secondly, the layer-wise adapters proposed for progressive nets are unnecessary for the output layers of complementary sequences of tasks, so they are not used. Third, the output layer of the robot-trained column is initialised from the simulation-trained column in order to improve exploration. These architectural features are shown in Fig. 1.\nThe greatest risk in this approach to transfer learning is that the rewards will be so sparse or nonexistent in the real domain that the reinforcement learning will never take off. Thus, in order to maximise the likelihood of reward during exploration in the real domain, the new column is initialised such that the initial policy of the agent will be identical to the previous column. This is accomplished by initialising the weights coming from the last layer of the previous column to the output layer of the new column with the output weights of the previous column, and the connections incoming from the last hidden layer of the current column are initialised with zero-valued weights. Thus, using the example network in Fig. 1 (right), when parameters \u0398(2) are instantiated, layer output(2)2 will have input connections from h(1)2 and h (2) 2 . However, unlike the other parameters in \u0398\n(2), which will be randomly initialised, the weights W (2)o will be zeros and the weights U (1:2) o will be copied from W (1) o . Note that this only affects the initial policy of the agent and does not prevent the new column from training."}, {"heading": "3 Related Literature", "text": "There exist many different paradigms for domain transfer and many approaches designed specifically for deep neural models, but substantially fewer approaches for transfer from simulation to reality for robot domains. Even more rare are methods that can be used for transfer in interactive, rich sensor domains using end-to-end (pixel-to-action) learning.\nA growing body of work has been investigating the ability of deep networks to transfer between domains. Some research [16, 21] considers simply augmenting the target domain data with data from the source domain where an alignment exists. Building on this work, [13] starts from the observation that as one looks at higher layers in the model, the transferability of the features decreases quickly. To correct this effect, a soft constraint is added that enforces the distribution of the features to be\nmore similar. In [13], a \u2018confusion\u2019 loss is proposed which forces the model to ignore variations in the data that separate the two domains [24, 25].\nBased on [24], [23] attempts to address the simulation to reality gap by using aligned data. The work is focused on pose estimation of the robotic arm, where training happens on a triple loss that looks at aligned simulation to real data, including the domain confusion loss. The paper does not show the efficiency of the method on learning novel complex policies.\nSeveral recent works from the supervised learning literature, e.g. [4, 1, 3], demonstrate how ideas from the adversarial training of neural networks can be used to reduce the sensitivity of a trained network to inter-domain variations, without requiring aligned training data. Intuitively these approaches train a representation that makes it hard to distinguish between data points drawn from the different domains. These ideas have, however, not yet been tested in the context of control. Demonstrating the difficulty of the problem, [21] provides evidence that a simple application of a model trained on synthetic data on the real robot fails. The paper also shows that the main failure point is the discrepancy in visual cues between simulation and reality.\nPartial success on transferring from simulation to a real robot has been reported [2, 7, 26]. They focus primarily on the problem of transfer from a more restricted simpler version of a task to the full, more difficult version. While transfer from simulation to reality remains difficult, progress has been made with directly learning neural network control policies on a real robot, both from low-dimensional representations of the state and from visual input (e.g. [9],[11]). While the results are impressive, to achieve sufficient data efficiency these works currently rely on relatively restrictive task setups, specialized visual architectures, and carefully designed training regimes. Alternative approaches embrace big data ideas for robotics ([17, 10])."}, {"heading": "4 Experiments", "text": "For training in simulation, we use the Async Advantage Actor-Critic (A3C) framework introduced in [15]. Compared to DQN [14], the model simultaneously learns a policy and a value function for predicting expected future rewards, and can be trained with CPUs, using multiple threads. A3C has been shown to converge faster than DQN, which makes it advantageous for research experimentation.\nFor the manipulation domain of the Jaco arm, the agent policy controls nine degrees of freedom using velocity commands. This includes six joints on the arm plus three actuated fingers. The full policy \u03a0(A|s, \u03b8) comprises nine joint policies learnt by the agent, each one a softmax connected to the inputs from the previous layer and any lateral connections. Each joint policy i has three actions (a fixed positive velocity, a fixed negative velocity, and a zero velocity): \u03c0i(ai|s; \u03b8i). This discrete action set, while potentially lacking the precision of a continuous control policy, has worked well in practice. There is also a single value function that is linearly connected to the previous layer and lateral layers: V (s, \u03b8v).\nWe evaluate both feedforward and recurrent neural networks. Both have convolutional input layers followed by either a fully connected layer or an LSTM. A standard-sized network is used for the simulation-trained column and a reduced-capacity network is used for the robot-trained columns, chosen because we found empirically that more capacity does not accelerate learning (see Section4.2), presumably because of the features reused from the previous column. Details of the architecture are given in Figure 2 and Table 1. In all variants, the input is 3x64x64 pixels and the output is 28 (9 discrete joint policies plus one value function).\nThe MuJoCo physics simulator [22] is used to train the first column for our experiments, with a rendered camera view to provide observations. In the real domain, a similarly positioned RGB camera provides the input. While the modeled Jaco and its dynamics are quite accurate, the visual discrepancies are obvious, as shown in Figure 3.\nThe experiments are all focused around the task of reaching to a visual target, with only pure reward (no shaping) provided as feedback. Though simple, this task requires that the state of the arm, and the position of the target, be correctly inferred from the visual observation, and that the agent learn robust control over a high-dimensional state space. The arm is set to a random start position at the beginning of every episode, and the target is placed at a random position in a 40cm by 30cm area. The agent receives a reward of +1 if its palm is within 10cm of the target, and episodes last for at most 50 steps. Though there is some variance due to the randomized start state, a well-performing agent can reach a\nan average score of at least 30 points. The episode is terminated if the agent causes a safety violation through self-intersection or by touching the table top or by exceeding set joint limits."}, {"heading": "4.1 Training in simulation", "text": "The first column is trained in simulation using A3C, as previously mentioned, using a wide feedforward or recurrent network. Intuitively, it makes sense to use a larger capacity network for training in simulation, to reach maximum performance. We verified this intuition by comparing wide and narrow network architectures, and found that the narrow network had slower learning and worse performance (see Figure 4). We also see that the LSTM model out-performs the feedforward model by an average\nof 3 points per episode. Even on this relatively simple task, full performance is only achieved after substantial interaction with the environment, on the order of 50 million steps - a number which is infeasible with a real robot.\nThe simulation training, compared with the real robot, is accelerated because of fast rendering, multithreaded learning algorithms, and the ability to continuously train without human involvement. We calculate that learning this task, which trains to convergence in 24 hours using a CPU compute cluster, would take 53 days on the real robot even with continuous training for 24 hours a day. Moreover, multiple experiments in parallel were used to explore hyperparameters in simulation; this sort of search would multiply the hypothetical real robot training time.\nIn simulation, we explore learning rates and entropy costs, which are sampled uniformly at random on a log scale. Learning rates are sampled between 5e-5 and 5e-3 and entropy costs between 1e-5 and 1e-2. The configuration with the best final performance from a grid of 30 is chosen as first column. For real Jaco experiments, both learning rates and entropy costs were optimized separately using a simulated transfer experiment with a single-threaded agent (A2C)."}, {"heading": "4.2 Transfer to the robot", "text": "To train on the real Jaco, a flat target is manually repositioned within a 40cm by 30cm area on every third episode. Rewards are given automatically by tracking the colored target and giving reward based on the position of the Jaco gripper with respect to it. We train a baseline from scratch, a finetuned first column, and a progressive second column. Each experiment is run for approximately 60000 steps (about four hours). The baseline is trained by randomly initializing a narrow network and then training. We also try a randomly initialized wide network. As seen in Figure 5 (green curve), the randomly initialized column fails to learn and the agent gets zero reward throughout training. The progressive second column gets to 34 points, while the experiment with finetuning, which starts with the simulation-trained column and continues training on the robot, does not reach the same score as the progressive network.\nFinetuning vs. progressive approaches. The progressive approach is clearly well-suited for continual learning scenarios, where it is important to mitigate forgetting of previous tasks while supporting transfer to new tasks, but the advantage is less intuitive for curricula of tasks where the focus is on maximising transfer learning. To assess this empirically, we start with a simulator-trained first column, as described above, and then either finetune that column or add a narrow progressive column and\nretrain for the reacher task under a variety of conditions, including small or large color changes and small or large perspective changes. For each of these environment perturbations, we train 300 times with different seeds, learning rates, and entropy costs, which are the most sensitive hyperparameters. As shown in Figure 6, we find that progressive networks are more stable and reach higher final performance than finetuning."}, {"heading": "4.3 Transfer to a dynamic robot task with proprioception", "text": "Unlike the finetuning paradigm, which is unable to accommodate changing network morphology or new input modalities, progressive nets offer a flexibility that is advantageous for transferring to new data sources while still leveraging previous knowledge. To demonstrate this, we train a second column on the reacher task but add proprioceptive features as an additional input, alongside the RGB images. The proprioceptive features are joint angles and velocities for each of the 9 joints of the arm and fingers, 18 in total, input to a MLP (a single linear layer plus ReLu) and joined with the outputs of the convolutional stack. Then, a third progressive column is added that only learns from the proprioceptive features, while the visual input is forwarded through the previous columns and the features are used via the lateral connections. A diagram of this architecture is shown in Figure 7 (left).\nTo evaluate this architecture, we train on a dynamic target task. By employing a small motorized pulley, the red target is smoothly translated across the table with random reversals in the motion, creating a tracking task that requires a different control policy while maintaining a similar visual presentation. Other aspects of the task, including rewards and episode lengths, were kept the same. If the second column is trained on this conveyor task, the learning is relatively slow, and full performance is reached after 50000 steps (about 4 hours). If the second column is instead trained on the static reacher task, and the third column is then trained on the conveyor task, we observe immediate transfer, and full performance is reached almost immediately (Figure 7, right). This demonstrates both the utility of progressive nets for curriculum tasks, as well as the capability of the architecture to immediately reuse previously learnt features."}, {"heading": "5 Discussion", "text": "Transfer learning, the ability to accumulate and transfer knowledge to new domains, is a core characteristic of intelligent beings. Progressive neural networks offer a framework that can be used for continual learning of many tasks and which facilitates transfer learning, even across the divide which separates simulation and robot. We took full advantage of the flexibility and computational scaling afforded by simulation and compared many hyperparameters and architectures for a random start, random target control task with visual input, then successfully transferred the skill to an agent training on the real robot.\nIn order to fulfill the potential of deep reinforcement learning applied in real-world robotic domains, learning needs to become many times more efficient. One route to achieving this is via transfer learning from simulation-trained agents. We have described an initial set of experiments that prove that progressive nets can be used to achieve reliable, fast transfer for pixel-to-action RL policies."}], "references": [{"title": "Transfer learning for reinforcement learning on a physical robot", "author": ["Samuel Barrett", "Matthew E. Taylor", "Peter Stone"], "venue": "In Ninth International Conference on Autonomous Agents and Multiagent Systems - Adaptive Learning Agents Workshop (AAMAS - ALA),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Continuous deep q-learning with model-based acceleration", "author": ["Shixiang Gu", "Timothy P. Lillicrap", "Ilya Sutskever", "Sergey Levine"], "venue": "In ICML 2016,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Learning continuous control policies by stochastic value gradients", "author": ["Nicolas Heess", "Gregory Wayne", "David Silver", "Timothy P. Lillicrap", "Tom Erez", "Yuval Tassa"], "venue": "In Advances in Neural Information Processing Systems 28: Annual Conference on Neural Information Processing Systems", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "3D Simulation for Robot Arm Control with Deep Q-Learning", "author": ["S. James", "E. Johns"], "venue": "ArXiv e-prints,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2016}, {"title": "Learning neural network policies with guided policy search under unknown dynamics", "author": ["Sergey Levine", "Pieter Abbeel"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "End-to-end training of deep visuomotor policies", "author": ["Sergey Levine", "Chelsea Finn", "Trevor Darrell", "Pieter Abbeel"], "venue": "CoRR, abs/1504.00702,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Learning hand-eye coordination for robotic grasping with deep learning and large-scale data collection", "author": ["Sergey Levine", "Peter Pastor", "Alex Krizhevsky", "Deirdre Quillen"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "Learning contact-rich manipulation skills with guided policy search", "author": ["Sergey Levine", "Nolan Wagener", "Pieter Abbeel"], "venue": "In IEEE International Conference on Robotics and Automation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Continuous control with deep reinforcement learning", "author": ["Timothy P. Lillicrap", "Jonathan J. Hunt", "Alexander Pritzel", "Nicolas Heess", "Tom Erez", "Yuval Tassa", "David Silver", "Daan Wierstra"], "venue": "CoRR, abs/1509.02971,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Learning transferable features with deep adaptation networks", "author": ["Mingsheng Long", "Yue Cao", "Jianmin Wang", "Michael I. Jordan"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning, ICML 2015,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "Kk Kavukcuoglu", "D. Silver", "A. Rusu", "J. Veness", "M. Bellemare", "A. Graves", "M. Riedmiller", "A. Fidjeland", "G. Ostrovski", "S. Petersen", "C. Beattie", "A. Sadik", "I. Antonoglou", "H. King", "D. Kumaran", "D. Wierstra", "S. Legg", "D. Hassabis"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["Volodymyr Mnih", "Adri\u00e0 Puigdom\u00e8nech Badia", "Mehdi Mirza", "Alex Graves", "Timothy P. Lillicrap", "Tim Harley", "David Silver", "Koray Kavukcuoglu"], "venue": "In Int\u2019l Conf. on Machine Learning (ICML),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2016}, {"title": "Learning deep object detectors from 3d models", "author": ["Xingchao Peng", "Baochen Sun", "Karim Ali", "Kate Saenko"], "venue": "In 2015 IEEE International Conference on Computer Vision,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2015}, {"title": "Supersizing self-supervision: Learning to grasp from 50k tries and 700 robot hours", "author": ["Lerrel Pinto", "Abhinav Gupta"], "venue": "In ICRA 2016,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Progressive neural networks", "author": ["Andrei Rusu", "Neil Rabinowitz", "Guillaume Desjardins", "Hubert Soyer", "James Kirkpatrick", "Koray Kavukcuoglu", "Razvan Pascanu", "Raia Hadsell"], "venue": "arXiv preprint arXiv:1606.04671,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2016}, {"title": "Trust region policy optimization", "author": ["John Schulman", "Sergey Levine", "Philipp Moritz", "Michael I. Jordan", "Pieter Abbeel"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning (ICML),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "High-dimensional continuous control using generalized advantage estimation", "author": ["John Schulman", "Philipp Moritz", "Sergey Levine", "Michael Jordan", "Pieter Abbeel"], "venue": "In Proceedings of the International Conference on Learning Representations (ICLR),", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2016}, {"title": "Render for CNN: viewpoint estimation in images using cnns trained with rendered 3d model views", "author": ["Hao Su", "Charles Ruizhongtai Qi", "Yangyan Li", "Leonidas J. Guibas"], "venue": "In 2015 IEEE International Conference on Computer Vision,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Mujoco: A physics engine for model-based control", "author": ["E. Todorov", "T. Erez", "Y. Tassa"], "venue": "In International Conference on Intelligent Robots and Systems IROS,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2012}, {"title": "Towards adapting deep visuomotor representations from simulated to real environments", "author": ["Eric Tzeng", "Coline Devin", "Judy Hoffman", "Chelsea Finn", "Xingchao Peng", "Sergey Levine", "Kate Saenko", "Trevor Darrell"], "venue": "CoRR, abs/1511.07111,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}, {"title": "Simultaneous deep transfer across domains and tasks", "author": ["Eric Tzeng", "Judy Hoffman", "Trevor Darrell", "Kate Saenko"], "venue": "In 2015 IEEE International Conference on Computer Vision,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Deep domain confusion: Maximizing for domain invariance", "author": ["Eric Tzeng", "Judy Hoffman", "Ning Zhang", "Kate Saenko", "Trevor Darrell"], "venue": "CoRR, abs/1412.3474,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "Target-driven visual navigation in indoor scenes using deep reinforcement learning", "author": ["Yuke Zhu", "Roozbeh Mottaghi", "Eric Kolve", "Joseph J. Lim", "Abhinav Gupta", "Li Fei-Fei", "Ali Farhadi"], "venue": "CoRR, abs/1609.05143,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2016}], "referenceMentions": [{"referenceID": 4, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 15, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 2, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 8, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 16, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 11, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 1, "context": "While recent advances in simulation-driven deep RL are impressive [8, 19, 6, 12, 20, 15, 5], demonstrating learning capabilities on real robots remains the bar by which we must measure the practical applicability of these methods.", "startOffset": 66, "endOffset": 91}, {"referenceID": 14, "context": "Progressive nets have been shown to produce positive transfer between disparate tasks such as Atari games by utilizing lateral connections to previously learnt models [18].", "startOffset": 167, "endOffset": 171}, {"referenceID": 11, "context": "First, an actor-critic network is trained in simulation using multiple asynchronous workers [15].", "startOffset": 92, "endOffset": 96}, {"referenceID": 12, "context": "Some research [16, 21] considers simply augmenting the target domain data with data from the source domain where an alignment exists.", "startOffset": 14, "endOffset": 22}, {"referenceID": 17, "context": "Some research [16, 21] considers simply augmenting the target domain data with data from the source domain where an alignment exists.", "startOffset": 14, "endOffset": 22}, {"referenceID": 9, "context": "Building on this work, [13] starts from the observation that as one looks at higher layers in the model, the transferability of the features decreases quickly.", "startOffset": 23, "endOffset": 27}, {"referenceID": 9, "context": "In [13], a \u2018confusion\u2019 loss is proposed which forces the model to ignore variations in the data that separate the two domains [24, 25].", "startOffset": 3, "endOffset": 7}, {"referenceID": 20, "context": "In [13], a \u2018confusion\u2019 loss is proposed which forces the model to ignore variations in the data that separate the two domains [24, 25].", "startOffset": 126, "endOffset": 134}, {"referenceID": 21, "context": "In [13], a \u2018confusion\u2019 loss is proposed which forces the model to ignore variations in the data that separate the two domains [24, 25].", "startOffset": 126, "endOffset": 134}, {"referenceID": 20, "context": "Based on [24], [23] attempts to address the simulation to reality gap by using aligned data.", "startOffset": 9, "endOffset": 13}, {"referenceID": 19, "context": "Based on [24], [23] attempts to address the simulation to reality gap by using aligned data.", "startOffset": 15, "endOffset": 19}, {"referenceID": 17, "context": "Demonstrating the difficulty of the problem, [21] provides evidence that a simple application of a model trained on synthetic data on the real robot fails.", "startOffset": 45, "endOffset": 49}, {"referenceID": 0, "context": "Partial success on transferring from simulation to a real robot has been reported [2, 7, 26].", "startOffset": 82, "endOffset": 92}, {"referenceID": 3, "context": "Partial success on transferring from simulation to a real robot has been reported [2, 7, 26].", "startOffset": 82, "endOffset": 92}, {"referenceID": 22, "context": "Partial success on transferring from simulation to a real robot has been reported [2, 7, 26].", "startOffset": 82, "endOffset": 92}, {"referenceID": 5, "context": "[9],[11]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[9],[11]).", "startOffset": 4, "endOffset": 8}, {"referenceID": 13, "context": "Alternative approaches embrace big data ideas for robotics ([17, 10]).", "startOffset": 60, "endOffset": 68}, {"referenceID": 6, "context": "Alternative approaches embrace big data ideas for robotics ([17, 10]).", "startOffset": 60, "endOffset": 68}, {"referenceID": 11, "context": "For training in simulation, we use the Async Advantage Actor-Critic (A3C) framework introduced in [15].", "startOffset": 98, "endOffset": 102}, {"referenceID": 10, "context": "Compared to DQN [14], the model simultaneously learns a policy and a value function for predicting expected future rewards, and can be trained with CPUs, using multiple threads.", "startOffset": 16, "endOffset": 20}, {"referenceID": 18, "context": "The MuJoCo physics simulator [22] is used to train the first column for our experiments, with a rendered camera view to provide observations.", "startOffset": 29, "endOffset": 33}], "year": 2016, "abstractText": "Applying end-to-end learning to solve complex, interactive, pixel-driven control tasks on a robot is an unsolved problem. Deep Reinforcement Learning algorithms are too slow to achieve performance on a real robot, but their potential has been demonstrated in simulated environments. We propose using progressive networks to bridge the reality gap and transfer learned policies from simulation to the real world. The progressive net approach is a general framework that enables reuse of everything from low-level visual features to high-level policies for transfer to new tasks, enabling a compositional, yet simple, approach to building complex skills. We present an early demonstration of this approach with a number of experiments in the domain of robot manipulation that focus on bridging the reality gap. Unlike other proposed approaches, our real-world experiments demonstrate successful task learning from raw visual input on a fully actuated robot manipulator. Moreover, rather than relying on model-based trajectory optimisation, the task learning is accomplished using only deep reinforcement learning and sparse rewards.", "creator": "LaTeX with hyperref package"}}}