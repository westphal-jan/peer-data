{"id": "1611.01673", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Nov-2016", "title": "Generative Multi-Adversarial Networks", "abstract": "Generative adversarial networks (GANs) are a framework for producing a generative model by way of a two-player minimax game. In this paper, we propose the \\emph{Generative Multi-Adversarial Network} (GMAN), a framework that extends GANs to multiple discriminators. In previous work, the successful training of GANs requires modifying the minimax objective to accelerate training early on. In contrast, GMAN can be reliably trained with the original, untampered objective. We explore a number of design perspectives with the discriminator role ranging from formidable adversary to forgiving teacher. Image generation tasks comparing the proposed framework to standard GANs demonstrate GMAN produces higher quality samples in a fraction of the iterations when measured by a pairwise GAM-type metric. We examine the general idea of generative adversarial networks and use it to develop alternative models that optimize learning.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Sat, 5 Nov 2016 16:56:44 GMT  (4132kb,D)", "http://arxiv.org/abs/1611.01673v1", "Submitted as a conference paper at ICLR 2017"], ["v2", "Wed, 23 Nov 2016 15:33:09 GMT  (4133kb,D)", "http://arxiv.org/abs/1611.01673v2", "Submitted as a conference paper at ICLR 2017"], ["v3", "Thu, 2 Mar 2017 21:20:59 GMT  (4465kb,D)", "http://arxiv.org/abs/1611.01673v3", "Accepted as a conference paper (poster) at ICLR 2017"]], "COMMENTS": "Submitted as a conference paper at ICLR 2017", "reviews": [], "SUBJECTS": "cs.LG cs.MA cs.NE", "authors": ["ishan durugkar", "ian gemp", "sridhar mahadevan"], "accepted": true, "id": "1611.01673"}, "pdf": {"name": "1611.01673.pdf", "metadata": {"source": "CRF", "title": "GENERATIVE MULTI-ADVERSARIAL NETWORKS", "authors": ["Ishan Durugkar", "Ian Gemp", "Sridhar Mahadevan"], "emails": ["idurugkar@cs.umass.edu", "imgemp@cs.umass.edu", "mahadeva@cs.umass.edu"], "sections": [{"heading": "1 INTRODUCTION", "text": "Generative adversarial networks (Goodfellow et al. (2014)) (GANs) are a framework for producing a generative model by way of a two-player minimax game. One player, the generator, attempts to generate realistic data samples by transforming noisy samples, z, drawn from a simple distribution (e.g., z \u223c N (0, 1)) using a transformation function G\u03b8(z) with learned weights, \u03b8. The generator receives feedback as to how realistic its synthetic sample is from another player, the discriminator, which attempts to discern between synthetic data samples produced by the generator and samples drawn from an actual dataset using a function D\u03c9(x) with learned weights, \u03c9.\nThe GAN framework is one of the more recent successes in a line of research on adversarial training in machine learning (Schmidhuber (1992); Bagnell (2005); Ajakan et al. (2014)) where games between learners are carefully crafted so that Nash equilibria coincide with some set of desired optimality criteria. Preliminary work on GANs focused on generating images (e.g., MNIST (LeCun et al. (1998)), CIFAR (Krizhevsky (2009))), however, GANs have proven useful in a variety of application domains including learning censored representations (Edwards & Storkey (2015)), imitating expert policies (Ho & Ermon (2016)), and domain transfer (Yoo et al. (2016)). Work extending GANs to semi-supervised learning (Chen et al. (2016); Mirza & Osindero (2014); Gauthier (2014); Springenberg (2015)), inference (Makhzani et al. (2015); Dumoulin et al. (2016)), and improved image generation (Im et al. (2016); Denton et al. (2015); Radford et al. (2015)) have shown promise as well.\nDespite these successes, GANs are reputably difficult to train. While research is still underway to improve training techniques and heuristics (Salimans et al. (2016)), most approaches have focused on understanding and generalizing GANs theoretically with the aim of exploring more tractable formulations (Zhao et al. (2016); Li et al. (2015); Uehara et al. (2016); Nowozin et al. (2016)).\nIn this paper, we theoretically and empirically justify generalizing the GAN framework to multiple discriminators. We review GANs and related work in Section 2. In Section 3, we present our N -discriminator extension to the GAN framework (Generative Multi-Adversarial Networks) with several variants which range the role of the discriminator from formidable adversary to forgiving teacher. Section 3.3 explains how this extension makes training with the untampered minimax objective tractable. In Section 4, we define an intuitive metric (GMAM) to quantify GMAN perfor\u2217Equal contribution\nar X\niv :1\n61 1.\n01 67\n3v 1\n[ cs\n.L G\n] 5\nN ov\n2 01\n6\nmance and evaluate our framework on a variety of image generation tasks. Section 5 concludes with a summary of our contributions and directions for future research.\nContributions\u2014To summarize, our main contributions are: i) a multi-discriminator GAN framework, GMAN, that allows training with the original, untampered minimax objective; ii) a generative multi-adversarial metric (GMAM) to perform pairwise evaluation of separately trained frameworks; iii) a particular instance of GMAN, GMAN\u2217, that allows the generator to automatically regulate training and reach higher performance (as measured by GMAM) in a fraction of the training time required for the standard GAN model."}, {"heading": "2 GENERATIVE ADVERSARIAL NETWORKS", "text": "The original formulation of a GAN is a minimax game between a generator, G\u03b8(z) : z \u2192 x, and a discriminator, D\u03c9(x) : x\u2192 [0, 1],\nmin G max D\u2208D\nV (D,G) = Ex\u223cpdata(x) [ log(D(x)) ] + Ez\u223cpz(z) [ log(1\u2212D(G(z))) ] , (1)\nwhere pdata(x) is the true data distribution and pz(z) is a simple (usually fixed) distribution that is easy to draw samples from (e.g., N (0, 1)). We differentiate between the function space of discriminators, D, and elements of this space, D. Let pG(x) be the distribution induced by the generator, G\u03b8(z). We assume D,G to be deep neural networks as is typically the case.\nIn their original work, Goodfellow et al. (2014) proved that given sufficient network capacities and an oracle providing the optimal discriminator, D\u2217 = argmaxD V (D,G), gradient descent will recover the desired globally optimal solution, pG(x) = pdata(x), so that the generator distribution exactly matches the data distribution. In practice, they replaced the second term, log(1\u2212D(G(z))), with \u2212 log(D(G(z))) to enhance gradient signals at the start of the game; note this is no longer a zero-sum game. Part of their convergence and optimality proof involves using the oracle, D\u2217, to reduce the minimax game to a minimization over G only:\nmin G V (D\u2217, G) = min G\n{ C(G) = \u2212 log(4) + 2 \u00b7 JSD(pdata||pG) } (2)\nwhere JSD denotes the Jensen-Shannon divergence. Note that minimizing C(G) necessarily minimizes JSD, however, we are rarely able to obtain D\u2217 and so we instead minimize V (D,G), which is only a lower bound.\nThis perspective of minimizing the distance between the distributions, pdata and pG, motivated Li et al. (2015) to develop a generative model that matches all moments of pG(x) with pdata(x) (at optimality) by minimizing maximum mean discrepancy (MMD). Another approach, EBGAN, (Zhao et al. (2016)) explores a larger class of games (non-zero-sum games) which generalize the generator and discriminator objectives to take real-valued \u201cenergies\u201d as input instead of probabilities. Nowozin et al. (2016) and then Uehara et al. (2016) extended the JSD perspective on GANs to more general divergences, specifically f -divergences and then Bregman-divergences respectively.\nIn general, these approaches focus on exploring fundamental reformulations of V (D,G). Similarly, our work focuses on a fundamental reformulation, however, our aim is to provide a framework that accelerates training of the generator to a more robust state irrespective of the choice of V ."}, {"heading": "3 MULTIPLE DISCRIMINATORS", "text": "The introduction of multiple discriminators brings with it a number of design possibilities. Here, we explore approaches ranging between two extremes: 1) a more discriminating D (better approximating maxD V (D,G)) and 2) a D better matched to the generator\u2019s capabilities. Mathematically, we reformulate G\u2019s objective as minG maxDTeam F (V (D1, G), . . . , V (DN , G)) for different choices of F (see Figure 1) whereDTeam denotes the combinatorial space of discriminator teams. Each Di, on the other hand, is still expected to independently maximize its own V (Di, G). We sometimes abbreviate V (Di, G) with Vi and F (V1, . . . , VN ) with FG(Vi)."}, {"heading": "3.1 MAXIMIZING V(D,G)", "text": "For a fixed G, maximizing FG(Vi) with F := max and N randomly instantiated copies of our discriminator is functionally equivalent to optimizing V (e.g., stochastic gradient ascent) with random restarts in parallel and then presenting maxi\u2208{1,...,N} V (Di, G) as the loss to the generator \u2014a very pragmatic approach to the difficulties presented by the non-convexity of V caused by the deep net. Requiring the generator to minimize the max forces G to generate high fidelity samples that must hold up under the scrutiny of all N discriminators, each potentially representing a distinct local maximum.\nIn practice, maxDi\u2208D V (Di, G) is not performed to convergence (or global optimality), so the above problem is oversimplified. Furthermore, introducing N discriminators affects the dynamics of the game which affects the trajectories of the discriminators. This prevents us from claiming max{V1(t), . . . , VN (t)} > max{V \u20321(t)} \u2200t even if we initalize D1(0) = D\u20321(0) as it is unlikely that D1(t) = D \u2032 1(t) at some time t after the start of the game."}, {"heading": "3.2 BOOSTING", "text": "We can also consider taking the max over N discriminators as a form of boosting for the discriminator\u2019s online classification problem (online because G can produce an infinite data stream). The boosted discriminator is given a sample xt and must predict whether it came from the generator or the dataset. The booster then makes its prediction using the predictions of the N weaker Di.\nThere are a few differences between taking the max (case 1) and online boosting (case 2). In case 1, our booster is limited to selecting a single weak discriminator (i.e. a pure strategy), while in case 2, many boosting algorithms more generally use linear combinations of the discriminators. Moreover, in case 2, a booster must make a prediction before receiving a loss function. In case 1, we assume access to the loss function at prediction time, which allows us to compute the max.\nIt is possible to train the weak discriminators using boosting and then ignore the booster\u2019s prediction by instead presenting max{Vi}. We explore both variants in our experiments, using the adaptive algorithm proposed in Beygelzimer et al. (2015). Unfortunately, boosting failed to produce promising results on the image generation tasks. It is possible that boosting produces too strong an adversary for learning which motivates the next section. Boosting results appear in Appendix A.5."}, {"heading": "3.3 REGULATING THE DISCRIMINATOR", "text": "The previous perspectives focus on improving the discriminator with the goal of presenting a better approximation of maxD V (D,G) to the generator. Our third perspective asks the question, \u201cIs maxD V (D,G) too harsh a critic?\u201d\n3.3.1 Soft-DISCRIMINATOR\nIn practice, training against a far superior discriminator can impede the generator\u2019s learning. This is because the generator is unlikely to generate any samples considered \u201crealistic\u201d by the discriminator\u2019s standards, and so the generator will receive uniformly negative feedback. This is problematic because the information contained in the gradient derived from negative feedback only dictates\nwhere to drive down pG(x), not specifically where to increase pG(x). Furthermore, driving down pG(x) necessarily increases pG(x) in other regions of X (to maintain \u222b X pG(x) = 1) which may or may not contain samples from the true dataset (whack-a-mole dilemma). In contrast, a generator is more likely to see positive feedback against a more lenient discriminator, which may better guide a generator towards amassing pG(x) in approximately correct regions of X . For this reason, we explore a variety of functions that allow us to soften the max operator. We choose to focus on soft versions of the three classical Pythagorean means parameterized by \u03bb where \u03bb = 0 corresponds to the mean and the max is recovered as \u03bb\u2192\u221e:\nAMsoft(V, \u03bb) = N\u2211\ni\nwiVi (3)\nGMsoft(V, \u03bb) = \u2212 exp ( N\u2211\ni\nwi log(\u2212Vi) )\n(4)\nHMsoft(V, \u03bb) = ( N\u2211\ni\nwiV \u22121 i\n)\u22121 (5)\nwherewi = e\u03bbVi/\u03a3je\u03bbVj with \u03bb \u2265 0, Vi < 0. Using a softmax also has the well known advantage of being differentiable (as opposed to subdifferentiable for max). Note that we only require continuity to guarantee that computing the softmax is actually equivalent to computing V (D\u0303,G) where D\u0303 is some convex combination of Di (see Appendix A.3)."}, {"heading": "3.3.2 USING THE ORIGINAL MINIMAX OBJECTIVE", "text": "To illustrate the effect the softmax has on training, observe that the component of AMsoft(V, 0) relevant to generator training can be rewritten as\n1\nN\nN\u2211\ni\nEx\u223cpG(x) [ log(1\u2212Di(x)) ] = 1\nN Ex\u223cpG(x)\n[ log(z) ] . (6)\nwhere z = \u220fN i (1\u2212Di(x)). Note that the generator gradient, | \u2202 log(z) \u2202z |, is minimized at z = 1 over z \u2208 (0, 1]1. From this form, it is clear that z = 1 if and only if Di = 0\u2200i, so G only receives a vanishing gradient if all Di agree that the sample is fake; this is especially unlikely for large N . In other words,G only needs to fool a singleDi to receive constructive feedback. This result allows the generator to successfully minimize the original generator objective, log(1\u2212D). This is in contrast to the more popular objective, \u2212 log(D), introduced to artificially enhance gradients at the start of training.\nAt the beginning of training, when maxDi V (Di, G) is likely too harsh a critic for the generator, we can set \u03bb closer to zero to use the mean, increasing the odds of providing constructive feedback to the generator. In addition, the discriminators have the added benefit of functioning as an ensemble, reducing the variance of the feedback presented to the generator, which is especially important when the discriminators are far from optimal and are still learning a reasonable decision boundary. As training progresses and the discriminators improve, we can increase \u03bb to become more critical of the generator for more refined training."}, {"heading": "3.3.3 MAINTAINING MULTIPLE HYPOTHESES", "text": "We argue for this ensemble approach on a more fundamental level as well. Here, we draw on the density ratio estimation perspective of GANs (Uehara et al. (2016)). The original GAN proof assumes we have access to pdata(x), if only implicitly. In most cases of interest, the discriminator only has access to a finite dataset sampled from pdata(x); therefore, when computing expectations of V (D,G), we only draw samples from our finite dataset. This is equivalent to training a GAN with pdata(x) = p\u0303data which is a distribution consisting of point masses on all the data points in the dataset. For the sake of argument, let\u2019s assume we are training a discriminator and generator, each\n1\u2207GV = \u2212 \u2211\ni Di z \u2202Di \u2202G \u220f j 6=i(1\u2212Dj) = \u2212 1z \u2202Dk \u2202G for Dk = 1, D 6=k = 0. Our argument ignores \u2202Dk\u2202G .\nwith infinite capacity. In this case, the global optimum (pG(x) = p\u0303data(x)) fails to capture any of the interesting structure from pdata(x), the true distribution we are trying to learn. Therefore, it is actually critical that we avoid this global optimum.\nIn practice, this degenerate result is avoided by employing learners with limited capacity, but we might better accomplish this by simultaneously training a variety of limited capacity discriminators. With this approach, we might obtain a diverse set of seemingly tenable hypotheses for the true pdata(x). Averaging over these multiple locally optimal discriminators increases the entropy of p\u0303data(x) by diffusing the probability mass over the data space (see Figure 2 for an example)."}, {"heading": "3.4 AUTOMATING REGULATION", "text": "The problem of keeping the discriminator and generator in balance has been widely recognized in previous work with GANs. Issues with unstable dynamics, oscillatory behavior, and generator collapse are not uncommon. In addition, the discriminator is often times able to achieve a high degree of classification accuracy (producing a single scalar) before the generator has made sufficient progress on the arguably more difficult generative task (producing a high dimensional sample). Salimans et al. (2016) suggested label smoothing to reduce the vulnerability of the generator to a relatively superior discriminator. Here, we explore an approach that enables the generator to automatically temper the performance of the discriminator when necessary, but still encourages the generator to challenge itself against more accurate adversaries. Specifically, we augment the generator objective:\nmin G,\u03bb>0\nFG(Vi)\u2212 f(\u03bb) (7)\nwhere f(\u03bb) is monotonically increasing in \u03bb which appears in the softmax equations, (3)\u2014(5). In experiments, we simply set f(\u03bb) = c\u03bb with c a constant (e.g., 0.001). The generator is incentivized to increase \u03bb to reduce its objective at the expense of competing against the best available adversary D\u2217 (see Appendix A.4)."}, {"heading": "4 EVALUATION", "text": "Evaluating GANs is still an open problem. In their original work, Goodfellow et al. (2014) report log likelihood estimates from Gaussian Parzen windows, which they admit, has high variance and does not perform well in high dimensional settings. Salimans et al. (2016) recommend an Inception score, however, it assumes labels exist for the dataset. Recently, Im et al. (2016) introduced the Generative Adversarial Metric (GAM) for making pairwise comparisons between independently trained GAN models. The core idea behind their approach is given two generator, discriminator pairs (G1, D1) and (G2, D2), we should be able to learn their relative performance by judging each generator under the opponent\u2019s discriminator."}, {"heading": "4.1 METRIC", "text": "In GMAN, the opponent may have multiple discriminators, which makes it unclear how to perform thes swaps needed for GAM. We introduce a variant of GAM, the generative multi-adversarial metric (GMAM), that is amenable to training with multiple discriminators,\nGMAM = log (F aGb(V ai ) F aGa(V a i ) /F aGa(V bi ) F bGb(V b i ) ) . (8)\nwhere a and b refer to the two GMAN variants (see 3 for notation FG(Vi)). The idea here is similar. If G2 performs better than G1 with respect to both D1 and D2, then GMAM>0 (remember V\u22640 always). If G1 performs better in both cases, GMAM<0, otherwise, the result is indeterminate."}, {"heading": "4.2 EXPERIMENTS", "text": "We evaluate the aforementioned variations of GMAN on a variety of image generation tasks: MNIST (LeCun et al. (1998)), CIFAR-10 (Krizhevsky (2009)) and CelebA (Liu et al. (2015)). We focus on rates of convergence to steady state along with quality of the steady state generator according to the GMAM metric. To summarize, loosely in order of increasing discriminator leniency, we compare\n\u2022 F-boost: A single AdaBoost.OL-boosted discriminator (see Appendix A.5). \u2022 P-boost: Di is trained according to AdaBoost.OL. A max over the weak learner losses is\npresented to the generator instead of the boosted prediction (see Appendix A.5).\n\u2022 GMAN-max: max{Vi} is presented to the generator. \u2022 GAN: Standard GAN with a single discriminator (see Appendix A.1.3). \u2022 mod-GAN: GAN with modified objective (generator minimizes \u2212 log(D(G(z))). \u2022 GMAN-\u03bb: GMAN with F :=arithmetic softmax with parameter \u03bb. \u2022 GMAN\u2217: The arithmetic softmax is controlled by the generator through \u03bb.\nAll generator and discriminator models are deep (de)convolutional networks (Radford et al. (2015)), and aside from the boosted variants, all are trained with Adam (Kingma & Ba (2014)) and batch normalization (Ioffe & Szegedy (2015)). Discriminators convert the real-valued outputs of their networks to probabilities with squashed-sigmoids to prevent saturating logarithms in the minimax objective ( + 1\u22122 1+e\u2212z ). See Appendix A.6 for further details. We test GMAN systems with N = {2, 5} discriminators. We maintain discriminator diversity by varying dropout and network depth."}, {"heading": "4.2.1 MNIST", "text": "Figures 3 and 4 reveal that increasing the number of discriminators reduces the number of iterations to steady-state by 2x on MNIST; increasing N (the size of the discriminator ensemble) also has the added benefit of reducing the variance of the game dynamics.\nFigure 5 corroborates this conclusion with recognizable digits appearing approximately an epoch before the single discriminator run; digits at steady-state appear slightly sharper as well.\nOur GMAM metric (see Table 1) agrees with the relative quality of images in Figure 5 with GMAN\u2217 achieving the best overall performance.\nFigure 6 reveals GMAN\u2217\u2019s attempt to regulate the difficulty of the game to accelerate learning. Figure 7 displays the GMAM scores comparing fixed \u03bb\u2019s to the variable \u03bb controlled by GMAN\u2217."}, {"heading": "4.2.2 CELEBA & CIFAR-10", "text": "We see similar accelerated convergence behavior for the CelebA dataset in Figure 8.\nFigure 9 displays images generated by GMAN-0 on CIFAR-10. See Appendix A.1 for more results.\nWe also found that GMAN is robust to the unimodal behavior seen in GANs where the generator always emits the same point. We believe this is due to the fact that, in GMAN, the generator must appease a diverse set of discriminators in each minibatch. Emitting a single point will score well for a single discriminator at the large expense of the rest of the discriminators. Currently, the most popular approach for patching this failure mode is minibatch discrimination which is quadratic in batchsize. GMAN, on the other hand, is linear in batch size. We leave validation for future work."}, {"heading": "5 CONCLUSION", "text": "We introduced multiple discriminators into the GAN framework and explored discriminator roles ranging from a formidable adversary to a forgiving teacher. We found that allowing the generator to automatically tune its learning schedule (GMAN\u2217) outperformed GANs with a single discriminator on a variety of image generation tasks. In general, GMAN variants achieved faster convergence to a higher quality steady state as measured by a GAM-type metric (GMAM). In addition, GMAN makes using the original GAN objective possible by increasing the odds of the generator receiving constructive feedback.\nIn future work, we will look at more sophisticated mechanisms for letting the generator control the game as well as other ways to ensure diversity among the discriminators. Introducing multiple generators is conceptually an obvious next step, however, we expect difficulties to arise from more complex game dynamics. For this reason, game theory and game design will likely be important."}, {"heading": "ACKNOWLEDGMENTS", "text": "We acknowledge helpful conversations with Stefan Dernbach, Archan Ray, Luke Vilnis, Ben Turtel, Stephen Giguere, Rajarshi Das, and Subhransu Maji."}, {"heading": "A APPENDIX", "text": "A.1 ADDITIONAL RESULTS\nA.1.1 ACCELERATED CONVERGENCE\nSee Figures 10 and 11.\nA.1.2 GENERATED IMAGES\nSee Figures 12 and 13.\nA.1.3 ADDITIONAL GMAM TABLES\nSee Table 2.\nA.2 SOMEWHAT RELATED WORK\nA GAN framework with two discriminators appeared in Yoo et al. (2016), however, it is applicable only in a semi-supervised case where a label can be assigned to subsets of the dataset (e.g., X = {X1 = Domain 1,X2 = Domain 2, . . .}). In contrast, our framework applies to an unsupervised scenario where an obvious partition of the dataset is unknown. Furthermore, extending GMAN to the semi-supervised domain-adaptation scenario would suggest multiple discriminators per domain, therefore our line of research is strictly orthogonal to that of their multi-domain discriminator approach. Also, note that assigning a discriminator to each domain is akin to prescribing a new discriminator to each value of a conditional variable in conditional GANs (Mirza & Osindero (2014)). In this case, we interpret GMAN as introducing multiple conditional discriminators and not a discriminator for each of the possibly exponentially many conditional labels.\nIn Section 3.4, we describe an approach to customize adversarial training to better suit the development of the generator. An approach with similar conceptual underpinnings was described in Ravanbakhsh et al. (2016), however, similar to the above, it is only admissible in a semi-supervised scenario whereas our applies to the unsupervised case.\nA.3 Softmax REPRESENTABILITY\nLet softmax(Vi) = V\u0302 \u2208 [minVi ,maxVi ]. Also let a = argmini Vi, b = argmaxi Vi, and V(t) = V ((1 \u2212 t)Da + tDb) so that V(0) = Va and V(1) = Vb. The softmax and minimax objective V (Di, G) are both continuous in their inputs, so by the intermediate value theorem, we have that \u2203 t\u0302 \u2208 [0, 1] s.t. V(t\u0302) = V\u0302 , which implies \u2203 D\u0302 \u2208 D s.t. V (D\u0302,G) = V\u0302 . This result implies that the softmax (and any other continuous substitute) can be interpreted as returning V (D\u0302,G) for some\nD\u0302 selected by computing an another, unknown function over the space of the discriminators. Note that this result holds even if D\u0302 is not representable by the architecture chosen for the dicriminator\u2019s neural network.\nA.4 UNCONSTRAINED OPTIMIZATION\nTo convert GMAN\u2217 minimax formulation to an unconstrained minimax formulation, we introduce an auxiliary variable, \u039b, define \u03bb(\u039b) = log(1 + e\u039b), and let the generator minimize over \u039b \u2208 R instead.\nA.5 BOOSTING WITH AdaBoost.OL\nNote that this algorithm (Beygelzimer et al. (2015)) does not require knowledge of the weak learner\u2019s slight edge over random guessing (P (correct prediction) = 0.5 + \u03b3 \u2208 (0, 0.5]), and in fact, allows \u03b3 < 0. This is theoretically crucial because our weak learners are deep nets with unknown, possibly negative, \u03b3\u2019s.\nA.6 EXPERIMENTAL SETUP\nAll the experiments were conducted using architecture similar to DCGAN (Radford et al. (2015)). We use convolutional transpose layers (Zeiler et al. (2010)) for the generator G and strided convolutions for the discriminator D except for the input of the generator and the last layer of the discriminator.\nWe use the single step gradient method as in (Nowozin et al. (2016)).\nBatch normalization (Ioffe & Szegedy (2015)) was used in each of the generator layers. The different discriminators were trained with varying dropout rates from [0.3, 0.7].\nVariations in the discriminators were effected in two ways. We varied the architecture by varying the number of filters in the discriminator layers (reduced by factors of 2, 4 and so on), as well as varying dropout rates. Secondly we also decorrelated the samples that the disriminators were training on by splitting the minibatch across the discriminators.\nSpecifics for the MNIST architecture and training are:\n\u2022 Generator latent variables z \u223c U (\u22121, 1)100\n\u2022 Generator convolution transpose layers as follows: (4, 4, 128) , (8, 8, 64) , (16, 16, 32) , (32, 32, 1)\n\u2022 Base Discriminator architecture: (32, 32, 1) , (16, 16, 32) , (8, 8, 64) , (4, 4, 128). \u2022 Variants have either convolution 3 (4, 4, 128) removed or all the filter sizes\nare divided by 2 or 4. That is, (32, 32, 1) , (16, 16, 16) , (8, 8, 32) , (4, 4, 64) or (32, 32, 1) , (16, 16, 8) , (8, 8, 16) , (4, 4, 32).\n\u2022 ReLu activations for all the hidden units. Tanh activation at the output units of the generator. Sigmoid at the output of the Discriminator. \u2022 Optimization was done using Adam (Kingma & Ba (2014)) with a learning rate of 2\u00d710\u22124\nand \u03b21 = 0.5. \u2022 MNIST was trained for 20 epochs with a minibatch of size 100. \u2022 CelebA and CIFAR were trained over 24000 iterations with a minibatch of size 100 each\niteration.\nThe code was written in Tensorflow (Abadi et al. (2016)) and run on Nvidia GTX 980 GPUs."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "Generative adversarial networks (GANs) are a framework for producing a gen-<lb>erative model by way of a two-player minimax game. In this paper, we propose<lb>the Generative Multi-Adversarial Network (GMAN), a framework that extends<lb>GANs to multiple discriminators. In previous work, the successful training of<lb>GANs requires modifying the minimax objective to accelerate training early on.<lb>In contrast, GMAN can be reliably trained with the original, untampered objec-<lb>tive. We explore a number of design perspectives with the discriminator role rang-<lb>ing from formidable adversary to forgiving teacher. Image generation tasks com-<lb>paring the proposed framework to standard GANs demonstrate GMAN produces<lb>higher quality samples in a fraction of the iterations when measured by a pairwise<lb>GAM-type metric.", "creator": "LaTeX with hyperref package"}}}