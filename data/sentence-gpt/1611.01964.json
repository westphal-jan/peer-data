{"id": "1611.01964", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Nov-2016", "title": "Log-time and Log-space Extreme Classification", "abstract": "We present LTLS, a technique for multiclass and multilabel prediction that can perform training and inference in logarithmic time and space. LTLS embeds large classification problems into simple structured prediction problems and relies on efficient dynamic programming algorithms for inference. We train LTLS with stochastic gradient descent on a number of multiclass and multilabel datasets and show that despite its small memory footprint it is often competitive with existing approaches. This is a significant contribution to the overall training performance of a large multilabel dataset. The advantage is that it contains several more models. We used a different model for both training and inference. In contrast, we used the generalized linear model that enables you to perform model training in order to learn more about the data structure. We tested it with a model with an ensemble model for linear training. We learned about a large number of model learning problems. We also learned about a large number of models.", "histories": [["v1", "Mon, 7 Nov 2016 10:10:43 GMT  (13kb)", "http://arxiv.org/abs/1611.01964v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["kalina jasinska", "nikos karampatziakis"], "accepted": false, "id": "1611.01964"}, "pdf": {"name": "1611.01964.pdf", "metadata": {"source": "CRF", "title": "Log-time and Log-space Extreme Classification", "authors": ["Kalina Jasinska", "Nikos Karampatziakis"], "emails": ["kjasinska@cs.put.poznan.pl", "nikosk@microsoft.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n01 96\n4v 1\n[ cs\n.L G\n] 7\nN ov\n2 01"}, {"heading": "1 Introduction", "text": "Extreme multi-class and multi-label classification refers to problems where the size C of the output space is extremely large. This problem appears in many application areas of machine learning, such as recommendation, ranking, and language modeling. The extreme setting brings a lot of challenges, such as, inter alia, time and space complexity of training and prediction, long tail of labels, missing labels and very few training examples per label. In this paper we undertake the first mentioned problem \u2013 the complexity, and propose the first, to our best knowledge, truly log-time and log-space training and prediction algorithm that can produce its top k predictions in time O(k log(k) log(C)) for an output space of size C. To do so, we adapt ideas from structured prediction to impose an efficient search structure on top of any multiclass and multilabel problem. This allows us to (a) characterize when we expect our technique to work as well as an One-Vs-All (OVA) classifier and (b) work with any model that can be trained with (online) gradient descent including deep neural networks.\nThere exist several techniques for reducing training time, prediction time, and/or model size, in comparison to a OVA classifier. One technique is sparsity which can reduce model size and sometimes training and prediction times due to fewer operations. An example of such an approach is PD-Sparse [4], where the authors show that it is possible to get accurate sparse models in high dimensional datasets. However sparsity is not guaranteed to reduce the model size without severely hurting model accuracy. Another group of methods are embedding based models. Examples of such methods are SLEEC [1], LEML [9], WSABIE [8] or Rembrandt [6]. These techniques can be thought of as (supervised) dimensionality reduction followed by an OVA classifier. All these approaches still remain linear in the size of the output space during training and prediction unless additional approximations are employed, such as subsampling the negative classes.\nAnother group consists of tree based models. Those can be further divided into decision tree based and label tree based methods. Those methods reduce prediction time, but not necessary lead to models with space complexity that is logarithmic in number of labels. For example, a multi-label decision tree based method, FastXML [7] builds a tree of depth logarithmic in the number of training examples. Label tree based method, PLT [5], has a O(log(C)) training time, since an update with one training instance is applied to O(log(C)) models. Even though this algorithm reduces prediction\n\u2217Work done while the author was visiting Microsoft\nSubmitted to Extreme Classification Workshop at NIPS 2016\ntime significantly, by not querying all the models, its complexity is not O(log(C)). Multi-class logarithmic time prediction is addressed by LOMtree [2], but space used by this algorithm is O(C)."}, {"heading": "2 Problem Setting", "text": "We denote with (x, y) an instance from a multi-class or multi-label training set. Let x be a feature vector, x \u2208 RD, and y a label vector of dimension C, y\u2113 = 1 when \u2113 is relevant for x. In the multi-class case y is an indicator vector, in multi-label case y \u2208 {0, 1}C."}, {"heading": "3 Proposed Approach", "text": "Our idea is to embed our multiclass/multilabel problem in a structured prediction problem where the structured label s is a combinatorial object. The model is usually specified via a compatibility function F (x, s;w) which measures how well feature vector x and s go together for a particular setting of the parameters w. The inference problem s\u0302 = argmaxs\u2208S F (x, s;w) requires maximization over a combinatorial set which can sometimes be solved exactly in time O(poly log(|S|)) such as when S is the set of spanning trees or the set of matchings of a graph. Our criteria for selecting a structured prediction problem are the simplicity of algorithms for finding the top 1 and top k elements of S according to F (x, s;w).\nIn this paper our construction is a directed acyclic graph (DAG) G that contains exactlyC paths from a source vertex to a sink vertex. Every edge e in the graph is associated with a learnable function he(\u00b7;w) : X \u2192 R. Every class corresponds to a path and the model predicts the class with the highest scoring path. As usual, the score of a path is the sum of the scores of the edges in the path. There are many topologies we could have selected but in this paper we are exploring a minimal one because in this way we can force every learnable parameter to train roughly on 25% of the data (for problems whose class prior is close to uniform); thus avoiding data decimation issues.\nThe graph, see an example on Figure 1, is a trellis of \u230alog(C)\u230b steps with 2 \u201cstates\u201d on each step. The source is connected to each vertex in the first step. An auxiliary vertex collects all vertices of the last step to one point. If we connect the sink vertex to the auxiliary vertex then we can only express multiclass/multilabel problems where C is a power of 2. In order to handle an arbitrary number of classes C we connect the sink to one of the states at step i for all i such that the i-th (least significant) bit in binary representation of C is 1. The upper bound of number of edges E in the graph is 5\u2308log2 C\u2309 + 1. The maximum scoring path can be found with dynamic programming, which in this context is known as the Viterbi algorithm. It requires O(E) steps. For each edge in order e1, e2, . . ., the algorithm updates the highest scoring path from the source to its destination by checking whether this edge would increase it. After all edges are processed the algorithm backtracks to retrieve the longest path. The top-k scoring paths can be found by a modification of the Viterbi algorithm called list Viterbi. We will refer to the proposed approach using name LTLS, which stands for Log-Time Log-Space."}, {"heading": "4 LTLS model", "text": "A path s is a vector of length E, with se = 1 if edge e is a part of this path, and se = 0 otherwise, such that one can reach from the source vertex to the auxiliary vertex in the graph G using all, and only, edges in s. We say that edge e \u2208 s if and only if se = 1. There are exactly C paths in graph G. All paths in a graph G stacked horizontally form a matrix MG of dimensionality C \u00d7E. Each label \u2113 in L = (1, 2, . . . , C) is exclusively assigned to a path s(\u2113c).\nGiven a feature vector x of dimension D and model weights w every edge e gets a value he(w, x). Values for all the edges form a E-dimensional vector h(w, x). The score of the model for a label \u2113 is the score for the corresponding path s(\u2113)\nF (x, s;w) = \u2211\ne\u2208s\nhe(w, x) = s \u00b7 h(w, x), (1)\nall the label scores are based on the same h(w, x).\nTherefore the model is a low-rank model f = MGh(w, x) embedding the label vector of dimension C to a E-dimensional vector, such that E is O(log(C)). The decoding matrix MG is designed in such a way that finding the highest or k highest values in f is fast, i.e. is of order of E."}, {"heading": "4.1 Underlying models", "text": "LTLS can use various learnable functions to estimate edge values h(w, x). The most basic one may use a linear model to predict each edge weight. Then the weights become W \u2208 RE\u00d7D, and the low rank models gets a form f = MGWx.\nWhile we can show that if a well performing OVA linear model V \u2208 RC\u00d7D can be approximated by MGW our approach will perform well (details omitted) this assumption is not always practical. Fortunately, our approach can also be used as an output layer of a deep network, where the scores of the edges h(w, x) are given by a deep network while still being able to perform inference and backpropagate through this layer in O(log(C))."}, {"heading": "5 Optimization", "text": "One of our goals is to have logarithmic training time. For multiclass classification this is easy even for multinomial logistic regression because the trellis graph can compute the log partition function log \u2211C\ni=1 exp(F (x, s(\u2113i);w)) efficiently. Backpropagation (also known as the forward-backward algorithm in this context) can be used to compute derivatives for all parameters. This is what we use when the underlying model is a deep network.\nFor multilabel classification we restrict ourselves to linear predictors and use a loss that induces (dual) sparsity. We use the separation ranking loss [3, 4], being zero if all the positive labels P(y) for given instance (x, y) have higher scores than all the negative labels N (y) plus a margin, and being the difference between highest scoring negative label \u2113n score F (\u00b7, s(\u2113n), w) plus a margin and lowest scoring positive label \u2113p score F (\u00b7, s(\u2113p), w). Formally,\nL(w, y) = max \u2113n\u2208N (y) max \u2113p\u2208P(y) (1 + F (\u00b7, s(\u2113n), w)\u2212 F (\u00b7, s(\u2113p), w))+.\nThis loss also works for multiclass problems so we will use it for all our experiments when the underlying model is linear. Finding the loss requires finding scores of two labels only, \u2113p and \u2113n. Those can be found efficiently. Getting a score F (\u00b7, s(\u2113), w) for a given label \u2113 is O(E). In the multiclass case F (\u00b7, s(\u2113p), w) is the score of the one positive class. In multilabel case F (\u00b7, s(\u2113p), w) = max({F (\u00b7, s(\u2113), w) : \u2113 \u2208 P(y)}). Since in extreme classification |P(y)| \u226a C, this step is fast. To find \u2113n in multiclass case it is sufficient to find the 2 longest paths, in multilabel the |P(y)|+ 1 longest paths, and determine which of them is negative.\nSince the label score F (\u00b7, s(\u2113), w) is defined 1 as a sum of edge scores, we need to update only the learnable functions he(\u00b7;w) for edges e in the symmetric difference of s(lp) and s(ln).\nWe use stochastic gradient descent with averaging to minimize the loss. For the linear model the gradient is 0 if the loss is 0 and otherwise it is x for the models on the edges used only by the positive path and \u2212x for the models on the edges used only by the negative path."}, {"heading": "5.1 Label-path assignment policy", "text": "Since the decompression matrix MG structure is fixed to enable fast inference, bipartite matching between labels \u2113 \u2208 L and paths s \u2208 S becomes an important issue. To keep the training online and fast we could not propose a very complex method for finding a good path for each class. A simple approach is once an instance (x, y) with an unseen label \u2113 is encountered, we find the top m paths for x and assign \u2113 to the highest ranked free path. If there is no free path we assign a random path. We restrict size of the ranking, so that m is O(log(C)), to keep the training fast. While this increases our memory requirements to O(C) (for knowing which paths are free) this memory is not for model parameters and therefore stays constant as the input size (or the model size in case of deep networks) increases. Training time also increases to O(log2(C) log log(C)) but in our experiments this makes no difference."}, {"heading": "6 Experiments", "text": "This section presents an experimental evaluation of LTLS 2. First we report the results of LTLS with a simple linear model on each edge and separation ranking loss. We have run LTLS on the datasets used in [4], where one can find a comparison of a set of multi-class and multi-label algorithms in terms of precision@1, training and prediction time, and model size. In the reported training times bear in mind that LTLS implementation is at the moment in Python, while other algorithms are implemented in compiled languages.\nIn Tables 1 and 2 we compare LTLS with LOMtree, FastXML, and LEML, for which we report the results from [4]. In case of multi-class problems on all except one dataset LTLS gets results comparable to the LOMtree, while creating a smaller model and providing the predictions faster (even though LTLS is currently in Python). The results using described assignment policy are significantly better than using random assignment.\nA low result on the ImageNet is a good starting point for analysis when does LTLS work, and when does not. The ImageNet dataset is quite dense in comparison to other multi-class datasets used in the experiments, average number of features active for an example is 308 out of 1000. A model build\n2Code is available at https://github.com/kjasinska/ltls\nby LTLS, weight matrix w, is dense \u2013 there are nearly no zero elements. This is because learnable function on each edge must learn many classes. Class distribution is fairly balanced in case of this dataset, so a classifier on each edge is being updated with many examples. Therefore we see that the underlying linear model on each edge it too simple to learn to distinguish between classes when the feature space is small and dense.\nTo verify the hypothesis that the poor result stems from the fact that the underlying model is too simple, we have used LTLS with a deep network. We have used a network with E outputs to predict edge weights, and LTLS as an output layer, decoding E outputs to C classes. With a network with 2 layers, 500 hidden units in each, and ReLU nonlinearities, after 10 iterations of training we have reached 0.0507 test precision.\nOn two of the multi-class datasets, LSHTC1 and Dmoz, we have observed that LTLS overfitted. We have trained by adding an L1 regularization term in the objective with strength \u03bb. This simply means predicting with soft-thresholded weights w:\nst(wij , \u03bb) =\n\n\n\nwij \u2212 \u03bb wij > \u03bb\nwij + \u03bb wij < \u2212\u03bb\n0 |wij | \u2264 \u03bb.\nFor multi-label datasets the results are mixed. LTLS has performed well on rcv1-regions and LSHTCwiki, especially taking into account also prediction time and model size in case of the biggest dataset. On Eur-Lex we have encontered underfitting.\nSo far we have compared LTLS, a very limited model in terms of model size, with methods without such constraint. In table 3 we present comparison of LTLS results with a naive baseline algorithm having the same model size and O(log(C)) prediction time. We have trained a 1-vs-All classifier for E most frequent labels in each dataset. As a binary classifier we have used L2-regularized Logistic Regression with tuned regularization constant. We report an upper bound for the result, result of the naive baseline and LTLS result."}, {"heading": "7 Conclusions", "text": "We have presented LTLS the first log-time and log-space technique for extreme classification. By embedding extreme problems into structured prediction we are able to address both time and space complexities while providing clear connections with low rank models and ways to incorporate deep learning into extreme classification. Many of our design choices have been motivated purely from convenience and leave many interesting questions on the impact of these choices as open questions for future work."}, {"heading": "Acknowledgments", "text": "Kalina Jasinska is also supported by the Polish National Science Centre under grant no. 2013/09/D/ST6/03917. Some experiments were run in Poznan Supercomputing and Networking Center under computational grant no 243."}], "references": [{"title": "Sparse local embeddings for extreme multilabel classification", "author": ["K. Bhatia", "H. Jain", "P. Kar", "M. Varma", "Jain P"], "venue": "In NIPS,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Logarithmic time online multiclass prediction", "author": ["A. Choromanska", "J. Langford"], "venue": "In NIPS,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "A family of additive online algorithms for category ranking", "author": ["Koby Crammer", "Yoram Singer"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2003}, {"title": "Pd-sparse : A primal and dual sparse approach to extreme multiclass and multilabel classification", "author": ["I. En-Hsu Yen", "X. Huang", "P. Ravikumar", "K. Zhong", "I. Dhillon"], "venue": "Proceedings of The 33rd International Conference on Machine Learning,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2016}, {"title": "Extreme f-measure maximization using sparse probability estimates", "author": ["K. Jasinska", "K. Dembczynski", "R. Busa-Fekete", "K. Pfannschmidt", "T. Klerx", "E. Hullermeier"], "venue": "In Proceedings of The 33rd International Conference on Machine Learning,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Fast label embeddings via randomized linear algebra", "author": ["P. Mineiro", "N. Karampatziakis"], "venue": "In ECML,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "FastXML: A fast, accurate and stable tree-classifier for extreme multilabel learning", "author": ["Y. Prabhu", "M. Varma"], "venue": "In KDD,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Wsabie: Scaling up to large vocabulary image annotation", "author": ["J. Weston", "S. Bengio", "N. Usunier"], "venue": "In IJCAI,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Large-scale multi-label learning with missing labels", "author": ["H. Yu", "P. Jain", "P. Kar", "I. Dhillon"], "venue": "In Proceedings of The 31st International Conference on Machine Learning,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}], "referenceMentions": [{"referenceID": 3, "context": "An example of such an approach is PD-Sparse [4], where the authors show that it is possible to get accurate sparse models in high dimensional datasets.", "startOffset": 44, "endOffset": 47}, {"referenceID": 0, "context": "Examples of such methods are SLEEC [1], LEML [9], WSABIE [8] or Rembrandt [6].", "startOffset": 35, "endOffset": 38}, {"referenceID": 8, "context": "Examples of such methods are SLEEC [1], LEML [9], WSABIE [8] or Rembrandt [6].", "startOffset": 45, "endOffset": 48}, {"referenceID": 7, "context": "Examples of such methods are SLEEC [1], LEML [9], WSABIE [8] or Rembrandt [6].", "startOffset": 57, "endOffset": 60}, {"referenceID": 5, "context": "Examples of such methods are SLEEC [1], LEML [9], WSABIE [8] or Rembrandt [6].", "startOffset": 74, "endOffset": 77}, {"referenceID": 6, "context": "For example, a multi-label decision tree based method, FastXML [7] builds a tree of depth logarithmic in the number of training examples.", "startOffset": 63, "endOffset": 66}, {"referenceID": 4, "context": "Label tree based method, PLT [5], has a O(log(C)) training time, since an update with one training instance is applied to O(log(C)) models.", "startOffset": 29, "endOffset": 32}, {"referenceID": 1, "context": "Multi-class logarithmic time prediction is addressed by LOMtree [2], but space used by this algorithm is O(C).", "startOffset": 64, "endOffset": 67}, {"referenceID": 2, "context": "We use the separation ranking loss [3, 4], being zero if all the positive labels P(y) for given instance (x, y) have higher scores than all the negative labels N (y) plus a margin, and being the difference between highest scoring negative label ln score F (\u00b7, s(ln), w) plus a margin and lowest scoring positive label lp score F (\u00b7, s(lp), w).", "startOffset": 35, "endOffset": 41}, {"referenceID": 3, "context": "We use the separation ranking loss [3, 4], being zero if all the positive labels P(y) for given instance (x, y) have higher scores than all the negative labels N (y) plus a margin, and being the difference between highest scoring negative label ln score F (\u00b7, s(ln), w) plus a margin and lowest scoring positive label lp score F (\u00b7, s(lp), w).", "startOffset": 35, "endOffset": 41}, {"referenceID": 3, "context": "We have run LTLS on the datasets used in [4], where one can find a comparison of a set of multi-class and multi-label algorithms in terms of precision@1, training and prediction time, and model size.", "startOffset": 41, "endOffset": 44}, {"referenceID": 3, "context": "In Tables 1 and 2 we compare LTLS with LOMtree, FastXML, and LEML, for which we report the results from [4].", "startOffset": 104, "endOffset": 107}], "year": 2016, "abstractText": "We present LTLS, a technique for multiclass and multilabel prediction that can perform training and inference in logarithmic time and space. LTLS embeds large classification problems into simple structured prediction problems and relies on efficient dynamic programming algorithms for inference. We train LTLS with stochastic gradient descent on a number of multiclass and multilabel datasets and show that despite its small memory footprint it is often competitive with existing approaches.", "creator": "LaTeX with hyperref package"}}}