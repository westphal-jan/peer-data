{"id": "1611.02205", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Nov-2016", "title": "Playing SNES in the Retro Learning Environment", "abstract": "Mastering a video game requires skill, tactics and strategy. While these attributes may be acquired naturally by human players, teaching them to a computer program is a far more challenging task. In recent years, extensive research was carried out in the field of reinforcement learning and numerous algorithms were introduced, aiming to learn how to perform human tasks such as playing video games. As a results, the Arcade Learning Environment (ALE) has become a commonly used benchmark environment allowing algorithms to train on various Atari 2600 games. Most Atari games no longer pose a challenge to state-of-the-art algorithms. In this paper we introduce a new learning environment, the Retro Learning Environment --- RLE, based on the Super Nintendo Entertainment System (SNES). The environment is expandable, allowing for more video games and consoles to be easily added to the environment, while maintaining the same interface as ALE. Moreover, RLE is compatible with Python and Torch. SNES games pose a significant challenge to current algorithms due to their higher level of complexity and versatility. To overcome these challenges, we introduce a novel training method based on training two agents against each other. Using multiple training agents, we present a training method that simulates a computer program, with the training task using multiple training agents, or performing at least one training task with each agent. In the training task, the agents compete using a combination of different training agents and a different strategy for solving problems, but each agent is only able to accomplish two different tasks: the goal of solving a problem, and the outcome of the task. In the training task, a player has to complete the task by going back to the previous step and playing a game in the virtual world. The player can choose from two choices: the player has to complete the task in another virtual world with the goal of solving a problem, and the player can select the strategy from the previous step. The player can choose from two options: the player has to complete the task in another virtual world with the goal of solving a problem, and the player can select the strategy from the previous step. The player can choose from two choices: the player has to complete the task in another virtual world with the goal of solving a problem, and the player can select the strategy from the previous step. The player can choose from two choices: the player has to complete the task in another virtual world with the goal of solving a problem, and the player can select the strategy from the previous step. The player can choose from two choices: the player has to complete the task in", "histories": [["v1", "Mon, 7 Nov 2016 18:33:38 GMT  (1316kb,D)", "http://arxiv.org/abs/1611.02205v1", null], ["v2", "Tue, 7 Feb 2017 18:50:50 GMT  (1308kb,D)", "http://arxiv.org/abs/1611.02205v2", null]], "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["nadav bhonker", "shai rozenberg", "itay hubara"], "accepted": false, "id": "1611.02205"}, "pdf": {"name": "1611.02205.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["PLAYING SNES", "IN THE", "RETRO LEARNING ENVIRONMENT", "Nadav Bhonker", "Shai Rozenberg"], "emails": ["nadavbh@tx.technion.ac.il", "shairoz@tx.technion.ac.il", "itayhubara@gmail.com"], "sections": [{"heading": "1 INTRODUCTION", "text": "Controlling artificial agents using only raw high-dimensional input data such as image or sound is a difficult and important task in the field of Reinforcement Learning (RL). Recent breakthroughs in the field allow its utilization in real-world applications such as autonomous driving (Shalev-Shwartz et al., 2016), navigation (Bischoff et al., 2013), financial predictions (Du et al.) and more. Agent interaction with the real world is usually either expensive or not feasible, as the real world is far too complex for the agent to perceive. Therefore in practice the interaction is simulated by a virtual environment which receives feedback on a decision made by the algorithm. Traditionally games were used as a RL environment, dating back to Chess (Campbell et al., 2002), Checkers (Schaeffer et al., 1992), backgammon (Tesauro, 1995) and the more recent Go (Silver et al., 2016). Modern games often present problems and tasks which are highly correlated with real-world problems: an agent which masters a racing game, by observing a simulated driver\u2019s view screen as input, may be used in the development of an autonomous driver. For high-dimensional input, the leading benchmark is the Arcade Learning Environment (ALE) (Bellemare et al., 2013) which provides a common interface to dozens of Atari 2600 games, each presenting a different challenge. ALE provides an extensive benchmarking platform, allowing a controlled experiment setup for algorithm evaluation and comparison. The main challenge posed by ALE to a single algorithm is to successfully play as many Atari 2600 games as possible, achieving a score higher than that of an expert human player without providing the algorithm any game-specific information (i.e., using the same input available to a human - the game screen and score). A key work to tackle this problem is the Deep Q-Networks algorithm (Mnih et al., 2015), which made a breakthrough in the field of Deep Reinforcement Learning by achieving human level performance on 29 out of 49 games. Subsequent algorithms such as (Nair et al., 2015) and (Mnih et al., 2016) achieved above expert human-level scores on 38 and 42 out of 57 games respectively. While the ALE is still a solid benchmark for current state-\nar X\niv :1\n61 1.\n02 20\n5v 1\n[ cs\n.L G\n] 7\nN ov\n2 01\nof-the-art algorithms, most of its games no longer present a challenge to modern algorithms. In this work we present a new environment - the Retro Learning Environment (RLE), a successor to the ALE. RLE sets new challenges by providing a unified interface for Atari 2600 games as well as more advanced gaming consoles. As a start we focused on the Super Nintendo Entertainment System (SNES). Out of the five SNES games we tested using state-of-the-art algorithms, one was able to outperform expert human players. RLE introduces a simple way to compare algorithms by letting them compete against each other. Furthermore, we leveraged this approach by training the agents against each other, rather than against a pre-configured in-game AI. We conducted several experiments with this new feature and discovered that agents tend to learn how to overcome their current opponent rather than generalize the game being played. Therefore an agent that was trained against another algorithm and tested against an AI achieves poor results and vice-verse. The main contributions of the paper are as follows:\n\u2022 Introducing a novel RL environment with significant challenges, which could lead to new , more advanced , RL algorithms.\n\u2022 A new benchmarking technique, allowing algorithms to compete against each other, rather than playing against the in-game AI.\n\u2022 Encapsulating several different challenges to a single RL environment."}, {"heading": "2 RELATED WORK", "text": ""}, {"heading": "2.1 ARCADE LEARNING ENVIRONMENT", "text": "The Arcade Learning Environment is a software framework designed for the development of RL algorithms, by playing Atari 2600 games. The interface provided by ALE allows the algorithms to select an action and receive the Atari screen and a reward in every step. The action is the equivalent to a human\u2019s joystick button combination and the reward is the difference between the scores at time stamp t and t\u2212 1. The diversity of games for Atari provides a solid benchmark since different games have significantly different goals. Atari 2600 has over 500 games, currently over 70 of them are implemented in ALE and are commonly used for algorithm comparison. Current state-of-the-art algorithms ( (Mnih et al., 2015), (Mnih et al., 2016)) are able to surpass expert human performance on most games, thus detracting from ALE attractiveness for future research."}, {"heading": "2.2 INFINITE MARIO", "text": "Infinite Mario (Togelius et al., 2009) is a remake of the classic Super Mario game in which levels are randomly generated, on which the Mario AI Competition was held. During the competition, several algorithms were trained on Infinite Mario and their performances were measured in terms of the number of stages completed. As opposed to ALE, training is not based on the raw screen data but rather on an indication of Mario\u2019s (the player\u2019s) location and objects in its surrounding. This environment no longer poses a challenge for state of the art algorithms, but still serves as a benchmark platform. Its main shortcoming lie in the fact that it provides only a single game to be learn. Additionally, the learning process is done on hand-crafted features extracted directly from the simulator."}, {"heading": "2.3 OPENAI GYM", "text": "The OpenAI gym (Brockman et al., 2016) is an open source platform with the purpose of creating an interface between RL environments and algorithms for evaluation and comparison purposes. OpenAI Gym is currently very popular due to the large number of environments supported by it. For example, ALE , Go , MouintainCar and VizDoom (Zhu et al., 2016), an environment for the learning of the 3D first-person-shooter game \u201dDoom\u201d. OpenAI Gym\u2019s recent appearance and wide usage indicates the growing interest and research done in the field of RL."}, {"heading": "2.4 DEEP Q-LEARNING", "text": "In our work, we used the Deep Q-Network algorithm (DQN) (Mnih et al., 2013), an RL algorithm whose goal is to find an optimal policy (i.e., given a the current state, which action should be chosen\nto achieve the highest score). The state of the game is simply the game\u2019s screen, and the action is a combination of joystick buttons which the game responds to (i.e., moving ,jumping). DQN learns through trial and error while trying to estimate a function called the \u201dQ-function\u201d, which is used to predict the score at the end of the game given the current state and selected action. The Q-function is represented using a convolution neural network which receives the screen as input and predicts the best possible action at it\u2019s output. The Q-function weights \u03b8 are updated according to:\n\u03b8t+1(st, at) = \u03b8t + \u03b1(Rt+1 + \u03b3max a\n(Qt(st+1, a; \u03b8t))\u2212Qt(st, at; \u03b8t))\u2207\u03b8Qt(st, at; \u03b8t), (1)\nwhere st , st+1 are the current and next states, at is the action chosen, \u03b1 is the step size, \u03b3 is the discounting factor and Rt+1 is the reward received by applying at at st. Other than DQN, we examined three leading algorithms on the RLE: Double Deep Q-Learning (D-DQN) (Van Hasselt et al., 2015), a DQN based algorithm with a modified network update rule. Dueling Double DQN (Wang et al., 2015), a modification of D-DQN\u2019s architecture in which the Q-function is modeled using a state (screen) dependent estimator and an action dependent estimator."}, {"heading": "3 THE RETRO LEARNING ENVIRONMENT", "text": ""}, {"heading": "3.1 SUPER NINTENDO ENTERTAINMENT SYSTEM", "text": "The Super Nintendo Entertainment System (SNES) is a home video game console developed by Nintendo and released in 1990. A total of 783 games were released, among them, the iconic Super Mario World, Donkey Kong Country and The Legend of Zelda. Table 1 presents a comparison between Atari 2600 and SNES game consoles, from which it is clear that SNES games are far more complicated."}, {"heading": "3.2 IMPLEMENTATION", "text": "The environment is based on the ALE, with the aim of maintaining as much of its interface as possible, in order to allow easier integration with current platforms and algorithms. While the ALE is highly coupled with the Atari emulator, Stella 1, RLE takes a different approach and separates the learning environment from the emulator. This was achieved by incorporating an interface named LibRetro (lib), which allows communication between front-end programs to game-console emulators. Currently, LibRetro supports over 15 game consoles, each containing hundreds of games, at an estimated total of over 7,000 games that can potentially be supported using this interface. Examples of supported game consoles include Nintendo Entertainment System, Game Boy, N64, Sega Genesis, Saturn, Dreamcast and Sony PlayStation. We chose to focus on the SNES game console implemented using the snes9x2 as it\u2019s games present interesting, yet plausible to overcome. RLE also allows game-specific settings such as selecting different characters, difficulty levels, stages etc. Thus enriching the challenges RLE provides and presents a framework for transfer learning."}, {"heading": "3.3 SOURCE CODE", "text": "RLE is fully available as open source software for use under GNU\u2019s General Public License in the environment\u2019s website. The environment is implemented in C++ with an interface to algorithms in C++, Python and Lua. Adding a new game to the environment is a relatively simple process."}, {"heading": "3.4 INTERFACE COMPARISON", "text": "RLE\u2019s interface is identical to that of ALE with four exceptions:\n\u2022 RLE requires an emulator and a computer version of the console game (ROM file) upon initialization rather than a ROM file only. The emulators are provided with RLE and are updated in it\u2019s repository3 as more emulators are supported.\n1http://stella.sourceforge.net/ 2http://www.snes9x.com/ 3https://github.com/nadavbh12/Retro-Learning-Environment\n\u2022 Unlike ALE, where each pixel is represented using an 8-bit RGB color model, RLE uses 32-bits model.\n\u2022 In ALE each action is represented by a unique integer ranging from 0 to 35. In RLE actions have a bit-wise representation where each controller button is represented by a onehot vector. Therefore a combination of several buttons is possible using the bit-wise OR operator |. \u2022 The interface used for reading the game\u2019s internal memory (RAM) is no longer supported.\nWhile inferring from raw RAM is possible for the Atari with size of only 128 bytes, for 128 kilo-bytes this is less feasible.\nThe above holds for the ALE\u2019s three main interfaces: the C++ shared library interface, the Python interface and the Torch interface. ALE has two additional interfaces which aren\u2019t supported in RLE: a FIFO interface and the RL-Glue interface."}, {"heading": "3.5 ENVIRONMENT CHALLENGES", "text": "Integrating SNES with RLE presents new challenges to the field of RL where visual information in the form of an image is the only state available to the agent. First, SNES games are significantly more complex and unpredictable than Atari games. For example in the NBA game, while the player (agent) controls a single player, all the other nine players\u2019 behavior is determined by preprogrammed agents, each exhibiting random behavior. Second, many SNES games exhibit delayed rewards in the course of their play (i.e., a reward for the players actions is received many time steps after it was performed). An analysis of such a game is presented in section 4.2. Furthermore, unlike Atari which consists of eight directions and one action button, SNES has eight-directions pad and six actions buttons. Since combinations of buttons are allowed, and required at times, the actual actions space may be larger than 700, compared to the maximum of 18 actions in Atari. We dealt with this issue by providing the minimal action combination set per game, allowing the agent to perform the manually defined actions relevant for the learnt game. Unlike Atari games, the background in the SNES is very rich, filled with details which may move locally or across the screen, effectively acting as non-stationary noise since it provided little to no information regarding the state itself. All the above makes RLE more challenging and its games more realistic. Therefore inferring from playing SNES games to more advanced similar real world behavior is easier. A visual comparison two games from Atari and SNES can be seen in figure 1."}, {"heading": "4 EXPERIMENTS", "text": ""}, {"heading": "4.1 EVALUATION METHODOLOGY", "text": "The evaluation methodology which we used for benchmarking the different algorithms is the popular method proposed by (Mnih et al., 2013). Each examined algorithm is trained until either it reached convergence or 100 epochs (each epoch corresponds to 50,000 actions), thereafter it is evaluated by performing 30 episodes of every game. Each episode ends either by reaching a terminal state or after 5 minutes. The results are averaged per game and compared to the average result of a human player. For each game the human player was given two hours to train and his performances were evaluated over 20 episodes. As the various algorithms don\u2019t use the game\u2019s audio in the learning\nprocess, the audio was muted for both the agent and the human. From both humans score and agents score, the score of a random agent (an agent performing actions randomly) is subtracted to assure that learning indeed occurred. It is important to note that DQN\u2019s -greedy approach (select a random action with a small probability ) is present during testing thus assuring that the same sequence of actions isn\u2019t performed, thus reducing a possibility of over-fitting. While the screen dimensions in SNES are larger than those of Atari, in our experiments we maintained the same pre-processing of DQN (i.e., downscaling the image to 84x84 pixels and converting to gray-scale). We found that downscaling the image size doesn\u2019t affect a human\u2019s ability to play the game, therefore suitable for RL algorithms as well. To handle the large action space, we limited the algorithm\u2019s actions to the minimal button combinations which provide unique behavior. For example, on many games the R and L action buttons don\u2019t have any use therefore their use and combinations were omitted."}, {"heading": "4.1.1 RESULTS", "text": "A thorough comparison of the four different agents\u2019 performances on SNES games can be seen in figure 2. The full results can be found in table 2. Only in the Mortal Kombat game a trained agent was able to surpass a expert human player performance as opposed to Atari games where the same algorithms have surpassed a human player on the vast majority of the games.\nIn Wolfenstein, a 3D first-person shooter game. For the agent, this involves a task of 3D vision, maze navigation and object detection. As evident from figure 2, all agents produce poor results indicating a lack of the required properties. An interesting case is Gradius III, which is a side-scrolling, flightshooter game. While the trained agent was able to master the technical aspects of the game, which includes shooting incoming enemies and dodging their projectiles, it\u2019s final score is still far from a human\u2019s. The game produces power-ups which may be accumulated to significantly increase the players abilities. The more power-ups collected without use - the larger the impact. While this game-mechanic is evident to a human, the agent acts myopically and uses the power-up straight away."}, {"heading": "4.2 REWARD SHAPING", "text": "As part of the environment and algorithm evaluation process, we investigated two case studies. First is a game on which DQN had failed to achieve a better-than-random score, and second is a game on which the training duration was significantly longer than that of other games.\nIn the first case study, we used a 2D back-view racing game \u201dF-Zero\u201d. In this game, one is required to complete four laps of the track while avoiding other race cars. The reward, as defined by the score of the game, is only received upon completing a lap. This is an extreme case of a reward delay. A lap may last as long as 30 seconds, which span over 450 states (actions) before reward is received. Since\nDQN\u2019s exploration is a simple -greedy approach, it was not able to produce a useful strategy. We approached this issue using reward shaping, essentially a modification of the reward to be a function of the reward and the observation, rather than the reward alone. Here, we define the reward to be the sum of the score and the agent\u2019s speed (a metric displayed on the screen of the game). Indeed when the reward was defined as such, the agents learned to finish the race in first place within a short training period.\nThe second case study is the famous game of Super Mario. In this game the agent, Mario, is required to reach the right-hand side of the screen, while avoiding enemies and collecting coins. We found this case interesting as it involves several challenges at once: dynamic background which can change drastically within a level, sparse and delayed rewards and multiple tasks (such as avoiding enemies and pits, advancing rightwards and collecting coins). To our surprise, DQN was able to reach the end of the level without any reward shaping, this was possible since the agent receives rewards for events (collecting coins, stomping on enemies etc.) which tend to appear to the right of the player, causing the agent to prefer moving right. However, the training time required for convergence was significantly longer than other games. We defined the reward as the sum of the in-game reward and a bonus granted according the the player\u2019s position, making moving right preferable. This reward proved useful, as training time required for convergence decreased significantly. The two games above can be seen in figure 3.\nFigure 4 illustrates the agent\u2019s average value function . Though both were able complete the stage trained on, the convergence rate with reward shaping is significantly quicker due to the immediate realization of the agent to move rightwards."}, {"heading": "4.3 RIVALRY TRAINING", "text": "The RLE presents a novel setup in which two distinct agents may compete against one another. We explored two uses of this setup: the first use was to train two different agents against the in-game AI, as done in the previous sections, and evaluate the two agents against each other. The second use was to initially train two agents against the in-game AI, and resuming the training while rivaling one another, and evaluating against in-game AI separately."}, {"heading": "4.3.1 RESULTS", "text": "We chose the game Mortal Kombat, a two character side viewed fighting game (a screenshot of the game can be seen in figure 1, as a testbed for the above, as it exhibits favorable properties: both players share the same screen, the agent\u2019s optimal policy is heavily dependent on the rival\u2019s behavior, unlike racing games for example. In order to evaluate two agents fairly, both were trained using the same characters maintaining the identity of rival and agent. Furthermore, to remove the impact of the starting positions of both agents on their performances, the starting positions were initialized randomly.\nIn the first experiment we evaluated all combinations of DQN against D-DQN and Dueling D-DQN. Each agent was trained against the in-game AI until convergence. Then 50 matches were performed between two agents. DQN lost 28 out of 50 games against Dueling D-DQN and 33 against D-DQN.\nD-DQN lost 26 time to Dueling D-DQN. This win balance isn\u2019t far from the random case, since the algorithms converged into a policy in which movement towards the opponent is not required rather than generalize the game. Therefore, in many episodes, little interaction between the two agents occur, leading to a semi-random outcome.\nIn our second experiment we continued the training process of a the D-DQN network by letting it compete against the Dueling D-DQN network. We evaluated the re-trained network by playing 30 episodes against the in-game AI. After training, D-DQN was able to win 28 out of 30 games, yet when faced again against the in-game AI its performance deteriorated drastically(from an average of 17000 to an average of -22000). This demonstrated a form of catastrophic forgetting ?? present even when playing the same game."}, {"heading": "4.4 FEATURED CHALLENGES", "text": "As demonstrated, RLE presents numerous challenges that have yet to be answered. In addition to being able to learn all available games, the task of learning games in which reward delay is extreme , such as F-Zero without reward shaping, remains an unsolved challenge Additionally, some games, such as Super Mario, feature several stages that differ in background, the task of transfer learning between stages, learning on one stage and being tested on the other, is another unexplored challenge. The most important challenge remains that of surpassing human performance on available games a task that current state of the art algorithms are having trouble completing"}, {"heading": "5 CONCLUSION", "text": "We introduced a rich environment for evaluating and developing reinforcement learning algorithms which presents significant challenges to current state-of-the-art algorithms. The modular implementation we chose allows extensions of the environment with new consoles and games to be done easily. Thus ensuring the relevance of the environment to RL algorithms for years to come. Unlike the games in its predecessor, ALE, the challenges presented in the RLE consist of: 3D interpretation, delayed reward, noisy background, stochastic AI behavior and more. Although some algorithms were able to play successfully on part of the games, to fully overcome these challenges, an agent must incorporate both technique and strategy."}, {"heading": "6 ACKNOWLEDGMENTS", "text": "The authors are grateful to the Signal and Image Processing Lab (SIPL) staff for their support, Alfred Agrell and the LibRetro community for their support and Marc G. Bellemare for his valuable inputs."}], "references": [{"title": "The arcade learning environment: An evaluation platform for general agents", "author": ["M.G. Bellemare", "Y. Naddaf", "J. Veness", "M. Bowling"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Bellemare et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bellemare et al\\.", "year": 2013}, {"title": "Hierarchical reinforcement learning for robot navigation", "author": ["B. Bischoff", "D. Nguyen-Tuong", "I.-H. Lee", "F. Streichert", "A. Knoll"], "venue": "In ESANN,", "citeRegEx": "Bischoff et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bischoff et al\\.", "year": 2013}, {"title": "Playing atari with deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M. Riedmiller"], "venue": "arXiv preprint arXiv:1312.5602,", "citeRegEx": "Mnih et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2013}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "Mnih et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["V. Mnih", "A.P. Badia", "M. Mirza", "A. Graves", "T.P. Lillicrap", "T. Harley", "D. Silver", "K. Kavukcuoglu"], "venue": "arXiv preprint arXiv:1602.01783,", "citeRegEx": "Mnih et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2016}, {"title": "Massively parallel methods for deep reinforcement learning", "author": ["A. Nair", "P. Srinivasan", "S. Blackwell", "C. Alcicek", "R. Fearon", "A. De Maria", "V. Panneershelvam", "M. Suleyman", "C. Beattie", "S. Petersen"], "venue": "arXiv preprint arXiv:1507.04296,", "citeRegEx": "Nair et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Nair et al\\.", "year": 2015}, {"title": "A world championship caliber checkers program", "author": ["J. Schaeffer", "J. Culberson", "N. Treloar", "B. Knight", "P. Lu", "D. Szafron"], "venue": "Artificial Intelligence,", "citeRegEx": "Schaeffer et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Schaeffer et al\\.", "year": 1992}, {"title": "Long-term planning by short-term prediction", "author": ["S. Shalev-Shwartz", "N. Ben-Zrihem", "A. Cohen", "A. Shashua"], "venue": "arXiv preprint arXiv:1602.01580,", "citeRegEx": "Shalev.Shwartz et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Shalev.Shwartz et al\\.", "year": 2016}, {"title": "Mastering the game of go with deep neural networks and tree", "author": ["D. Silver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre", "G. Van Den Driessche", "J. Schrittwieser", "I. Antonoglou", "V. Panneershelvam", "M. Lanctot"], "venue": "search. Nature,", "citeRegEx": "Silver et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Silver et al\\.", "year": 2016}, {"title": "Temporal difference learning and td-gammon", "author": ["G. Tesauro"], "venue": "Communications of the ACM,", "citeRegEx": "Tesauro.,? \\Q1995\\E", "shortCiteRegEx": "Tesauro.", "year": 1995}, {"title": "Super mario evolution", "author": ["J. Togelius", "S. Karakovskiy", "J. Koutn\u0131\u0301k", "J. Schmidhuber"], "venue": "IEEE Symposium on Computational Intelligence and Games,", "citeRegEx": "Togelius et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Togelius et al\\.", "year": 2009}, {"title": "Deep reinforcement learning with double q-learning", "author": ["H. Van Hasselt", "A. Guez", "D. Silver"], "venue": "CoRR, abs/1509.06461,", "citeRegEx": "Hasselt et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hasselt et al\\.", "year": 2015}, {"title": "Dueling network architectures for deep reinforcement learning", "author": ["Z. Wang", "N. de Freitas", "M. Lanctot"], "venue": "arXiv preprint arXiv:1511.06581,", "citeRegEx": "Wang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "Target-driven visual navigation in indoor scenes using deep reinforcement learning", "author": ["Y. Zhu", "R. Mottaghi", "E. Kolve", "J.J. Lim", "A. Gupta", "L. Fei-Fei", "A. Farhadi"], "venue": "arXiv preprint arXiv:1609.05143,", "citeRegEx": "Zhu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhu et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "As a results, the Arcade Learning Environment (ALE) (Bellemare et al., 2013) has become a commonly used benchmark environment allowing algorithms to train on various Atari 2600 games.", "startOffset": 52, "endOffset": 76}, {"referenceID": 7, "context": "Recent breakthroughs in the field allow its utilization in real-world applications such as autonomous driving (Shalev-Shwartz et al., 2016), navigation (Bischoff et al.", "startOffset": 110, "endOffset": 139}, {"referenceID": 1, "context": ", 2016), navigation (Bischoff et al., 2013), financial predictions (Du et al.", "startOffset": 20, "endOffset": 43}, {"referenceID": 6, "context": ", 2002), Checkers (Schaeffer et al., 1992), backgammon (Tesauro, 1995) and the more recent Go (Silver et al.", "startOffset": 18, "endOffset": 42}, {"referenceID": 9, "context": ", 1992), backgammon (Tesauro, 1995) and the more recent Go (Silver et al.", "startOffset": 20, "endOffset": 35}, {"referenceID": 8, "context": ", 1992), backgammon (Tesauro, 1995) and the more recent Go (Silver et al., 2016).", "startOffset": 59, "endOffset": 80}, {"referenceID": 0, "context": "For high-dimensional input, the leading benchmark is the Arcade Learning Environment (ALE) (Bellemare et al., 2013) which provides a common interface to dozens of Atari 2600 games, each presenting a different challenge.", "startOffset": 91, "endOffset": 115}, {"referenceID": 3, "context": "A key work to tackle this problem is the Deep Q-Networks algorithm (Mnih et al., 2015), which made a breakthrough in the field of Deep Reinforcement Learning by achieving human level performance on 29 out of 49 games.", "startOffset": 67, "endOffset": 86}, {"referenceID": 5, "context": "Subsequent algorithms such as (Nair et al., 2015) and (Mnih et al.", "startOffset": 30, "endOffset": 49}, {"referenceID": 4, "context": ", 2015) and (Mnih et al., 2016) achieved above expert human-level scores on 38 and 42 out of 57 games respectively.", "startOffset": 12, "endOffset": 31}, {"referenceID": 3, "context": "Current state-of-the-art algorithms ( (Mnih et al., 2015), (Mnih et al.", "startOffset": 38, "endOffset": 57}, {"referenceID": 4, "context": ", 2015), (Mnih et al., 2016)) are able to surpass expert human performance on most games, thus detracting from ALE attractiveness for future research.", "startOffset": 9, "endOffset": 28}, {"referenceID": 10, "context": "Infinite Mario (Togelius et al., 2009) is a remake of the classic Super Mario game in which levels are randomly generated, on which the Mario AI Competition was held.", "startOffset": 15, "endOffset": 38}, {"referenceID": 13, "context": "For example, ALE , Go , MouintainCar and VizDoom (Zhu et al., 2016), an environment for the learning of the 3D first-person-shooter game \u201dDoom\u201d.", "startOffset": 49, "endOffset": 67}, {"referenceID": 2, "context": "In our work, we used the Deep Q-Network algorithm (DQN) (Mnih et al., 2013), an RL algorithm whose goal is to find an optimal policy (i.", "startOffset": 56, "endOffset": 75}, {"referenceID": 12, "context": "Dueling Double DQN (Wang et al., 2015), a modification of D-DQN\u2019s architecture in which the Q-function is modeled using a state (screen) dependent estimator and an action dependent estimator.", "startOffset": 19, "endOffset": 38}, {"referenceID": 2, "context": "The evaluation methodology which we used for benchmarking the different algorithms is the popular method proposed by (Mnih et al., 2013).", "startOffset": 117, "endOffset": 136}], "year": 2016, "abstractText": "Mastering a video game requires skill, tactics and strategy. While these attributes may be acquired naturally by human players, teaching them to a computer program is a far more challenging task. In recent years, extensive research was carried out in the field of reinforcement learning and numerous algorithms were introduced, aiming to learn how to perform human tasks such as playing video games. As a results, the Arcade Learning Environment (ALE) (Bellemare et al., 2013) has become a commonly used benchmark environment allowing algorithms to train on various Atari 2600 games. Most Atari games no longer pose a challenge to stateof-the-art algorithms. In this paper we introduce a new learning environment, the Retro Learning Environment \u2014 RLE, based on the Super Nintendo Entertainment System (SNES). The environment is expandable, allowing for more video games and consoles to be easily added to the environment, while maintaining the same interface as ALE. Moreover, RLE is compatible with Python and Torch. SNES games pose a significant challenge to current algorithms due to their higher level of complexity and versatility. To overcome these challenges, we introduce a novel training method based on training two agents against each other.", "creator": "LaTeX with hyperref package"}}}