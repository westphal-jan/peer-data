{"id": "1611.06639", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Nov-2016", "title": "Text Classification Improved by Integrating Bidirectional LSTM with Two-dimensional Max Pooling", "abstract": "Recurrent Neural Network (RNN) is one of the most popular architectures used in Natural Language Processsing (NLP) tasks because its recurrent structure is very suitable to process variable-length text. RNN can utilize distributed representations of words by first converting the tokens comprising each text into vectors, which form a matrix. And this matrix includes two dimensions: the time-step dimension and the feature vector dimension. RNN is used to store a variety of other neural network-independent representations of a specific text. It's a popular technique for computing data, and it has become popular in recent years.\n\n\nThe problem with RNN is that it is not efficient and difficult to understand the semantic properties of RNN, as the NLP system is quite simple. For example, a word could be a word with a sequence of words, and a word could contain one word. However, the problem arises from the fact that it does not yet have a semantic structure, so we need to look further to see how the system can apply it to the RNN. The problem is that it is a very complex set of semantic properties. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN.\nThe problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it to the RNN. The problem is that it is not suitable to generate semantic structures, so we need to look further to see how the system can apply it", "histories": [["v1", "Mon, 21 Nov 2016 03:26:29 GMT  (125kb)", "http://arxiv.org/abs/1611.06639v1", "11 pages"]], "COMMENTS": "11 pages", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["peng zhou", "zhenyu qi", "suncong zheng", "jiaming xu", "hongyun bao", "bo xu"], "accepted": false, "id": "1611.06639"}, "pdf": {"name": "1611.06639.pdf", "metadata": {"source": "CRF", "title": "Text Classification Improved by Integrating Bidirectional LSTM with Two-dimensional Max Pooling", "authors": ["Peng Zhou", "Zhenyu Qi", "Suncong Zheng", "Jiaming Xu", "Hongyun Bao", "Bo Xu"], "emails": ["xubo}@ia.ac.cn"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n06 63\n9v 1\n[ cs\n.C L\n] 2\n1 N\nov 2\n01 6"}, {"heading": "1 Introduction", "text": "Text classification is an essential component in many NLP applications, such as sentiment analysis (Socher et al., 2013), relation extraction (Zeng et al., 2014) and spam detection (Wang, 2010). Therefore, it has attracted considerable attention from many researchers, and various types of models have been proposed. As a traditional method, the bag-of-words (BoW) model treats texts as unordered sets of words (Wang and Manning, 2012). In this way, however, it fails to encode word order and syntactic feature.\nRecently, order-sensitive models based on neural networks have achieved tremendous success for text classification, and shown more significant progress compared with BoW models. The challenge for textual modeling is how to capture features for different text units, such as phrases, sentences and documents. Benefiting from its recurrent structure, RNN, as an alternative type of neural networks, is very suitable to process the variable-length text.\nRNN can capitalize on distributed representations of words by first converting the tokens comprising each text into vectors, which form a matrix. This matrix includes two dimensions: the time-step dimension and the feature vector dimension, and it will be updated in the process of learning feature representation. Then RNN utilizes 1D max pooling operation (Lai et al., 2015) or attention-based operation (Zhou et al., 2016), which extracts maximum values or generates a weighted representation over\n\u2217Correspondence author: zhenyu.qi@ia.ac.cn This work is licenced under a Creative Commons Attribution 4.0 International Licence. Licence details:\nhttp://creativecommons.org/licenses/by/4.0/\nthe time-step dimension of the matrix, to obtain a fixed-length vector. Both of the two operators ignore features on the feature vector dimension, which maybe important for sentence representation, therefore the use of 1D max pooling and attention-based operators may pose a serious limitation.\nConvolutional Neural Networks (CNN) (Kalchbrenner et al., 2014; Kim, 2014) utilizes 1D convolution to perform the feature mapping, and then applies 1D max pooling operation over the time-step dimension to obtain a fixed-length output. However the elements in the matrix learned by RNN are not independent, as RNN reads a sentence word by word, one can effectively treat the matrix as an \u2019image\u2019. Unlike in NLP, CNN in image processing tasks (LeCun et al., 1998; Krizhevsky et al., 2012) applies 2D convolution and 2D pooling operation to get a representation of the input. It is a good choice to utilize 2D convolution and 2D pooling to sample more meaningful features on both the time-step dimension and the feature vector dimension for text classification.\nAbove all, this paper proposes Bidirectional Long Short-Term Memory Networks with TwoDimensional Max Pooling (BLSTM-2DPooling) to capture features on both the time-step dimension and the feature vector dimension. It first utilizes Bidirectional Long Short-Term Memory Networks (BLSTM) to transform the text into vectors. And then 2D max pooling operation is utilized to obtain a fixed-length vector. This paper also applies 2D convolution (BLSTM-2DCNN) to capture more meaningful features to represent the input text.\nThe contributions of this paper can be summarized as follows:\n\u2022 This paper proposes a combined framework, which utilizes BLSTM to capture long-term sentence dependencies, and extracts features by 2D convolution and 2D max pooling operation for sequence modeling tasks. To the best of our knowledge, this work is the first example of using 2D convolution and 2D max pooling operation in NLP tasks.\n\u2022 This work introduces two combined models BLSTM-2DPooling and BLSTM-2DCNN, and verifies them on six text classification tasks, including sentiment analysis, question classification, subjectivity classification, and newsgroups classification. Compared with the state-of-the-art models, BLSTM-2DCNN achieves excellent performance on 4 out of 6 tasks. Specifically, it achieves highest accuracy on Stanford Sentiment Treebank binary classification and fine-grained classification tasks.\n\u2022 To better understand the effect of 2D convolution and 2D max pooling operation, this paper conducts experiments on Stanford Sentiment Treebank fine-grained task. It first depicts the performance of the proposed models on different length of sentences, and then conducts a sensitivity analysis of 2D filter and max pooling size.\nThe remainder of the paper is organized as follows. In Section 2, the related work about text classification is reviewed. Section 3 presents the BLSTM-2DCNN architectures for text classification in detail. Section 4 describes details about the setup of the experiments. Section 5 presents the experimental results. The conclusion is drawn in the section 6."}, {"heading": "2 Related Work", "text": "Deep learning based neural network models have achieved great improvement on text classification tasks. These models generally consist of a projection layer that maps words of text to vectors. And then combine the vectors with different neural networks to make a fixed-length representation. According to the structure, they may divide into four categories: Recursive Neural Networks (RecNN1), RNN, CNN and other neural networks.\nRecursive Neural Networks: RecNN is defined over recursive tree structures. In the type of recursive models, information from the leaf nodes of a tree and its internal nodes are combined in a bottom-up manner. Socher et al. (2013) introduced recursive neural tensor network to build representations of phrases and sentences by combining neighbour constituents based on the parsing tree. Irsoy and Cardie (2014)\n1To avoid confusion with RNN, we named Recursive Neural Networks as RecNN.\nproposed deep recursive neural network, which is constructed by stacking multiple recursive layers on top of each other, to modeling sentence.\nRecurrent Neural Networks: RNN has obtained much attention because of their superior ability to preserve sequence information over time. Tang et al. (2015) developed target dependent Long ShortTerm Memory Networks (LSTM (Hochreiter and Schmidhuber, 1997)), where target information is automatically taken into account. Tai et al. (2015) generalized LSTM to Tree-LSTM where each LSTM unit gains information from its children units. Zhou et al. (2016) introduced BLSTM with attention mechanism to automatically select features that have a decisive effect on classification. Yang et al. (2016) introduced a hierarchical network with two levels of attention mechanisms, which are word attention and sentence attention, for document classification. This paper also implements an attention-based model BLSTM-Att like the model in Zhou et al. (2016).\nConvolution Neural Networks: CNN (LeCun et al., 1998) is a feedforward neural network with 2D convolution layers and 2D pooling layers, originally developed for image processing. Then CNN is applied to NLP tasks, such as sentence classification (Kalchbrenner et al., 2014; Kim, 2014), and relation classification (Zeng et al., 2014). The difference is that the common CNN in NLP tasks is made up of 1D convolution layers and 1D pooling layers. Kim (2014) defined a CNN architecture with two channels. Kalchbrenner et al. (2014) proposed a dynamic k-max pooling mechanism for sentence modeling. (Zhang and Wallace, 2015) conducted a sensitivity analysis of one-layer CNN to explore the effect of architecture components on model performance. Yin and Schu\u0308tze (2016) introduced multichannel embeddings and unsupervised pretraining to improve classification accuracy. (Zhang and Wallace, 2015) conducted a sensitivity analysis of one-layer CNN to explore the effect of architecture components on model performance.\nUsually there is a misunderstanding that 1D convolutional filter in NLP tasks has one dimension. Actually it has two dimensions (k, d), where k, d \u2208 R. As d is equal to the word embeddings size dw, the window slides only on the time-step dimension, so the convolution is usually called 1D convolution. While d in this paper varies from 2 to dw, to avoid confusion with common CNN, the convolution in this work is named as 2D convolution. The details will be described in Section 3.2.\nOther Neural Networks: In addition to the models described above, lots of other neural networks have been proposed for text classification. Iyyer et al. (2015) introduced a deep averaging network, which fed an unweighted average of word embeddings through multiple hidden layers before classification. Zhou et al. (2015) used CNN to extract a sequence of higher-level phrase representations, then the representations were fed into a LSTM to obtain the sentence representation.\nThe proposed model BLSTM-2DCNN is most relevant to DSCNN (Zhang et al., 2016) and RCNN (Wen et al., 2016). The difference is that the former two utilize LSTM, bidirectional RNN respectively, while this work applies BLSTM, to capture long-term sentence dependencies. After that the former two both apply 1D convolution and 1D max pooling operation, while this paper uses 2D convolution and 2D max pooling operation, to obtain the whole sentence representation."}, {"heading": "3 Model", "text": "As shown in Figure 1, the overall model consists of four parts: BLSTM Layer, Two-dimensional Convolution Layer, Two dimensional max pooling Layer, and Output Layer. The details of different components are described in the following sections."}, {"heading": "3.1 BLSTM Layer", "text": "LSTM was firstly proposed by Hochreiter and Schmidhuber (1997) to overcome the gradient vanishing problem of RNN. The main idea is to introduce an adaptive gating mechanism, which decides the degree to keep the previous state and memorize the extracted features of the current data input. Given a sequence S = {x1, x2, . . . , xl}, where l is the length of input text, LSTM processes it word by word. At time-step t, the memory ct and the hidden state ht are updated with the following equations:\n\n   it ft ot c\u0302t\n\n   =\n\n   \u03c3 \u03c3 \u03c3\ntanh\n\n   W \u00b7 [ht\u22121, xt] (1)\nct = ft \u2299 ct\u22121 + it \u2299 c\u0302t (2)\nht = ot \u2299 tanh(ct) (3)\nwhere xt is the input at the current time-step, i, f and o is the input gate activation, forget gate activation and output gate activation respectively, c\u0302 is the current cell state, \u03c3 denotes the logistic sigmoid function and \u2299 denotes element-wise multiplication.\nFor the sequence modeling tasks, it is beneficial to have access to the past context as well as the future context. Schuster and Paliwal (1997) proposed BLSTM to extend the unidirectional LSTM by introducing a second hidden layer, where the hidden to hidden connections flow in opposite temporal order. Therefore, the model is able to exploit information from both the past and the future.\nIn this paper, BLSTM is utilized to capture the past and the future information. As shown in Figure 1, the network contains two sub-networks for the forward and backward sequence context respectively. The output of the ith word is shown in the following equation:\nhi = [ \u2212\u2192 hi \u2295 \u2190\u2212 hi ] (4)\nHere, element-wise sum is used to combine the forward and backward pass outputs."}, {"heading": "3.2 Convolutional Neural Networks", "text": "Since BLSTM has access to the future context as well as the past context, hi is related to all the other words in the text. One can effectively treat the matrix, which consists of feature vectors, as an \u2019image\u2019, so 2D convolution and 2D max pooling operation can be utilized to capture more meaningful information."}, {"heading": "3.2.1 Two-dimensional Convolution Layer", "text": "A matrix H = {h1, h2, . . . , hl}, H \u2208 Rl\u00d7d w , is obtained from BLSTM Layer, where dw is the size of word embeddings. Then narrow convolution is utilized (Kalchbrenner et al., 2014) to extract local features over H . A convolution operation involves a 2D filter m \u2208 Rk\u00d7d, which is applied to a window of k words and d feature vectors. For example, a feature oi,j is generated from a window of vectors Hi:i+k\u22121, j:j+d\u22121 by\noi,j = f(m \u00b7Hi:i+k\u22121, j:j+d\u22121 + b) (5)\nwhere i ranges from 1 to (l \u2212 k + 1), j ranges from 1 to (dw \u2212 d + 1), \u00b7 represents dot product, b \u2208 R is a bias and an f is a non-linear function such as the hyperbolic tangent. This filter is applied to each possible window of the matrix H to produce a feature map O:\nO = [o1,1, o1,2, \u00b7 \u00b7 \u00b7 , ol\u2212k+1,dw\u2212d+1] (6)\nwith O \u2208 R(l\u2212k+1)\u00d7(d w \u2212d+1). It has described the process of one convolution filter. The convolution layer may have multiple filters for the same size filter to learn complementary features, or multiple kinds of filter with different size."}, {"heading": "3.2.2 Two-dimensional Max Pooling Layer", "text": "Then 2D max pooling operation is utilized to obtain a fixed length vector. For a 2D max pooling p \u2208 R p1\u00d7p2 , it is applied to each possible window of matrix O to extract the maximum value:\npi,j = down(Oi:i+p1, j:j+p2) (7)\nwhere down(\u00b7) represents the 2D max pooling function, i = (1, 1+ p1, \u00b7 \u00b7 \u00b7 , 1+ (l\u2212 k+1/p1\u2212 1) \u00b7 p1), and j = (1, 1+p2, \u00b7 \u00b7 \u00b7 , 1+(dw\u2212d+1/p2\u22121) \u00b7p2). Then the pooling results are combined as follows:\nh\u2217 = [p1,1, p1,1+p2 , \u00b7 \u00b7 \u00b7 , p1+(l\u2212k+1/p1\u22121)\u00b7p1,1+(dw\u2212d+1/p2\u22121)\u00b7p2 ] (8)\nwhere h\u2217 \u2208 R, and the length of h\u2217 is \u230al \u2212 k + 1/p1\u230b \u00d7 \u230adw \u2212 d+ 1/p2\u230b."}, {"heading": "3.3 Output Layer", "text": "For text classification, the output h\u2217 of 2D Max Pooling Layer is the whole representation of the input text S. And then it is passed to a softmax classifier layer to predict the semantic relation label y\u0302 from a discrete set of classes Y . The classifier takes the hidden state h\u2217 as input:\np\u0302 (y|s) = softmax ( W (s)h\u2217 + b(s) )\n(9)\ny\u0302 = argmax y p\u0302 (y|s) (10)\nA reasonable training objective to be minimized is the categorical cross-entropy loss. The loss is calculated as a regularized sum:\nJ (\u03b8) = \u2212 1\nm\nm \u2211\ni=1\nti log(yi) + \u03bb\u2016\u03b8\u2016 2 F (11)\nwhere t \u2208 Rm is the one-hot represented ground truth, y \u2208 Rm is the estimated probability for each class by softmax, m is the number of target classes, and \u03bb is an L2 regularization hyper-parameter. Training is done through stochastic gradient descent over shuffled mini-batches with the AdaDelta (Zeiler, 2012) update rule. Training details are further introduced in Section 4.3."}, {"heading": "4 Experimental Setup", "text": ""}, {"heading": "4.1 Datasets", "text": "The proposed models are tested on six datasets. Summary statistics of the datasets are in Table 1.\n\u2022 MR2: Sentence polarity dataset from Pang and Lee (2005). The task is to detect positive/negative reviews.\n\u2022 SST-13: Stanford Sentiment Treebank is an extension of MR from Socher et al. (2013). The aim is to classify a review as fine-grained labels (very negative, negative, neutral, positive, very positive).\n\u2022 SST-2: Same as SST-1 but with neutral reviews removed and binary labels (negative, positive). For both experiments, phrases and sentences are used to train the model, but only sentences are scored at test time (Socher et al., 2013; Le and Mikolov, 2014). Thus the training set is an order of magnitude larger than listed in table 1.\n\u2022 Subj4: Subjectivity dataset (Pang and Lee, 2004). The task is to classify a sentence as being subjective or objective.\n\u2022 TREC5: Question classification dataset (Li and Roth, 2002). The task involves classifying a question into 6 question types (abbreviation, description, entity, human, location, numeric value).\n\u2022 20Newsgroups6: The 20Ng dataset contains messages from twenty newsgroups. We use the bydate version preprocessed by Cachopo (2007). We select four major categories (comp, politics, rec and religion) followed by Hingmire et al. (2013)."}, {"heading": "4.2 Word Embeddings", "text": "The word embeddings are pre-trained on much larger unannotated corpora to achieve better generalization given limited amount of training data (Turian et al., 2010). In particular, our experiments utilize the GloVe embeddings7 trained by Pennington et al. (2014) on 6 billion tokens of Wikipedia 2014 and Gigaword 5. Words not present in the set of pre-trained words are initialized by randomly sampling from uniform distribution in [\u22120.1, 0.1]. The word embeddings are fine-tuned during training to improve the performance of classification.\n2https://www.cs.cornell.edu/people/pabo/movie-review-data/ 3http://nlp.stanford.edu/sentiment/ 4http://www.cs.cornell.edu/people/pabo/movie-review-data/ 5http://cogcomp.cs.illinois.edu/Data/QA/QC/ 6http://web.ist.utl.pt/acardoso/datasets/ 7http://nlp.stanford.edu/projects/glove/"}, {"heading": "4.3 Hyper-parameter Settings", "text": "For datasets without a standard development set we randomly select 10% of the training data as the development set. The evaluation metric of the 20Ng is the Macro-F1 measure followed by the state-ofthe-art work and the other five datasets use accuracy as the metric. The final hyper-parameters are as follows.\nThe dimension of word embeddings is 300, the hidden units of LSTM is 300. We use 100 convolutional filters each for window sizes of (3,3), 2D pooling size of (2,2). We set the mini-batch size as 10 and the learning rate of AdaDelta as the default value 1.0. For regularization, we employ Dropout operation (Hinton et al., 2012) with dropout rate of 0.5 for the word embeddings, 0.2 for the BLSTM layer and 0.4 for the penultimate layer, we also use l2 penalty with coefficient 10\u22125 over the parameters.\nThese values are chosen via a grid search on the SST-1 development set. We only tune these hyperparameters, and more finer tuning, such as using different numbers of hidden units of LSTM layer, or using wide convolution (Kalchbrenner et al., 2014), may further improve the performance."}, {"heading": "5 Results", "text": ""}, {"heading": "5.1 Overall Performance", "text": "This work implements four models, BLSTM, BLSTM-Att, BLSTM-2DPooling, and BLSTM-2DCNN. Table 2 presents the performance of the four models and other state-of-the-art models on six classification tasks. The BLSTM-2DCNN model achieves excellent performance on 4 out of 6 tasks. Especially, it achieves 52.4% and 89.5% test accuracies on SST-1 and SST-2 respectively.\nBLSTM-2DPooling performs worse than the state-of-the-art models. While we expect performance gains through the use of 2D convolution, we are surprised at the magnitude of the gains. BLSTM-CNN beats all baselines on SST-1, SST-2, and TREC datasets. As for Subj and MR datasets, BLSTM-2DCNN gets a second higher accuracies. Some of the previous techniques only work on sentences, but not paragraphs/documents with several sentences. Our question becomes whether it is possible to use our models for datasets that have a substantial number of words, such as 20Ng and where the content consists of many different topics. For that purpose, this paper tests the four models on document-level dataset 20Ng, by treating the document as a long sentence. Compared with RCNN (Lai et al., 2015), BLSTM2DCNN achieves a comparable result.\nBesides, this paper also compares with ReNN, RNN, CNN and other neural networks:\n\u2022 Compared with ReNN, the proposed two models do not depend on external language-specific features such as dependency parse trees.\n\u2022 CNN extracts features from word embeddings of the input text, while BLSTM-2DPooling and BLSTM-2DCNN captures features from the output of BLSTM layer, which has already extracted features from the original input text.\n\u2022 BLSTM-2DCNN is an extension of BLSTM-2DPooling, and the results show that BLSTM-2DCNN can capture more dependencies in text.\n\u2022 AdaSent utilizes a more complicated model to form a hierarchy of representations, and it outperforms BLSTM-2DCNN on Subj and MR datasets. Compared with DSCNN (Zhang et al., 2016), BLSTM-2DCNN outperforms it on five datasets.\nCompared with these results, 2D convolution and 2D max pooling operation are more effective for modeling sentence, even document. To better understand the effect of 2D operations, this work conducts a sensitivity analysis on SST-1 dataset."}, {"heading": "5.2 Effect of Sentence Length", "text": "Figure 2 depicts the performance of the four models on different length of sentences. In the figure, the x-axis represents sentence lengths and y-axis is accuracy. The sentences collected in test set are no\nlonger than 45 words. The accuracy here is the average value of the sentences with length in the window [l \u2212 2, l + 2]. Each data point is a mean score over 5 runs, and error bars have been omitted for clarity.\nIt is found that both BLSTM-2DPooling and BLSTM-2DCNN outperform the other two models. This suggests that both 2D convolution and 2D max pooling operation are able to encode semantically-useful structural information. At the same time, it shows that the accuracies decline with the length of sentences increasing. In future work, we would like to investigate neural mechanisms to preserve long-term dependencies of text."}, {"heading": "5.3 Effect of 2D Convolutional Filter and 2D Max Pooling Size", "text": "We are interested in what is the best 2D filter and max pooling size to get better performance. We conduct experiments on SST-1 dataset with BLSTM-2DCNN and set the number of feature maps to 100.\nTo make it simple, we set these two dimensions to the same values, thus both the filter and the pooling are square matrices. For the horizontal axis, c means 2D convolutional filter size, and the five different color bar charts on each c represent different 2D max pooling size from 2 to 6. Figure 3 shows that different size of filter and pooling can get different accuracies. The best accuracy is 52.6 with 2D filter size (5,5) and 2D max pooling size (5,5), this shows that finer tuning can further improve the performance reported here. And if a larger filter is used, the convolution can detector more features, and the performance may be improved, too. However, the networks will take up more storage space, and consume more time."}, {"heading": "6 Conclusion", "text": "This paper introduces two combination models, one is BLSTM-2DPooling, the other is BLSTM2DCNN, which can be seen as an extension of BLSTM-2DPooling. Both models can hold not only the time-step dimension but also the feature vector dimension information. The experiments are conducted on six text classificaion tasks. The experiments results demonstrate that BLSTM-2DCNN not only outperforms RecNN, RNN and CNN models, but also works better than the BLSTM-2DPooling and DSCNN (Zhang et al., 2016). Especially, BLSTM-2DCNN achieves highest accuracy on SST-1 and SST-2 datasets. To better understand the effective of the proposed two models, this work also conducts a sensitivity analysis on SST-1 dataset. It is found that large filter can detector more features, and this may lead to performance improvement."}, {"heading": "Acknowledgements", "text": "We thank anonymous reviewers for their constructive comments. This research was funded by the National High Technology Research and Development Program of China (No.2015AA015402), and the National Natural Science Foundation of China (No. 61602479), and the Strategic Priority Research Program of the Chinese Academy of Sciences (Grant No. XDB02070005)."}], "references": [{"title": "Improving methods for single-label text categorization", "author": [], "venue": "Ph.D. thesis, Universidade Te\u0301cnica de Lisboa", "citeRegEx": "Cachopo.,? \\Q2007\\E", "shortCiteRegEx": "Cachopo.", "year": 2007}, {"title": "Long short-term memory-networks for machine reading", "author": ["Cheng et al.2016] Jianpeng Cheng", "Li Dong", "Mirella Lapata"], "venue": "arXiv preprint arXiv:1601.06733", "citeRegEx": "Cheng et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 2016}, {"title": "Document classification by topic labeling", "author": ["Sandeep Chougule", "Girish K Palshikar", "Sutanu Chakraborti"], "venue": "In Proceedings of the 36th international ACM SIGIR conference on Research and development in information retrieval,", "citeRegEx": "Hingmire et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Hingmire et al\\.", "year": 2013}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580", "author": ["Nitish Srivastava", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan R Salakhutdinov"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "Long short-term memory", "author": ["Hochreiter", "Schmidhuber1997] Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "Deep recursive neural networks for compositionality in language", "author": ["Irsoy", "Cardie2014] Ozan Irsoy", "Claire Cardie"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Irsoy et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Irsoy et al\\.", "year": 2014}, {"title": "Deep unordered composition rivals syntactic methods for text classification", "author": ["Iyyer et al.2015] Mohit Iyyer", "Varun Manjunatha", "Jordan Boyd-Graber", "Hal Daum\u00e9 III"], "venue": "In Proceedings of the Association for Computational Linguistics", "citeRegEx": "Iyyer et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Iyyer et al\\.", "year": 2015}, {"title": "A convolutional neural network for modelling sentences", "author": ["Edward Grefenstette", "Phil Blunsom"], "venue": "arXiv preprint arXiv:1404.2188", "citeRegEx": "Kalchbrenner et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2014}, {"title": "Convolutional neural networks for sentence classification. arXiv preprint arXiv:1408.5882", "author": ["Yoon Kim"], "venue": null, "citeRegEx": "Kim.,? \\Q2014\\E", "shortCiteRegEx": "Kim.", "year": 2014}, {"title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing", "author": ["Ilya Sutskever", "Geoffrey E Hinton"], "venue": null, "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Recurrent convolutional neural networks for text classification", "author": ["Lai et al.2015] Siwei Lai", "Liheng Xu", "Kang Liu", "Jun Zhao"], "venue": "In AAAI,", "citeRegEx": "Lai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lai et al\\.", "year": 2015}, {"title": "Distributed representations of sentences and documents. arXiv preprint arXiv:1405.4053", "author": ["Le", "Mikolov2014] Quoc V Le", "Tomas Mikolov"], "venue": null, "citeRegEx": "Le et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Le et al\\.", "year": 2014}, {"title": "Compositional distributional semantics with long short term memory", "author": ["Le", "Zuidema2015] Phong Le", "Willem Zuidema"], "venue": "arXiv preprint arXiv:1503.02510", "citeRegEx": "Le et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Le et al\\.", "year": 2015}, {"title": "Gradient-based learning applied to document recognition", "author": ["LeCun et al.1998] Yann LeCun", "L\u00e9on Bottou", "Yoshua Bengio", "Patrick Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Molding cnns for text: non-linear, nonconsecutive convolutions", "author": ["Lei et al.2015] Tao Lei", "Regina Barzilay", "Tommi Jaakkola"], "venue": "arXiv preprint arXiv:1508.04112", "citeRegEx": "Lei et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lei et al\\.", "year": 2015}, {"title": "Learning question classifiers", "author": ["Li", "Roth2002] Xin Li", "Dan Roth"], "venue": "In Proceedings of the 19th international conference on Computational linguistics-Volume", "citeRegEx": "Li et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Li et al\\.", "year": 2002}, {"title": "Recurrent neural network for text classification with multi-task learning", "author": ["Liu et al.2016] Pengfei Liu", "Xipeng Qiu", "Xuanjing Huang"], "venue": "arXiv preprint arXiv:1605.05101", "citeRegEx": "Liu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Liu et al\\.", "year": 2016}, {"title": "Discriminative neural sentence modeling by tree-based convolution", "author": ["Mou et al.2015] Lili Mou", "Hao Peng", "Ge Li", "Yan Xu", "Lu Zhang", "Zhi Jin"], "venue": "arXiv preprint arXiv:1504.01106", "citeRegEx": "Mou et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mou et al\\.", "year": 2015}, {"title": "A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts", "author": ["Pang", "Lee2004] Bo Pang", "Lillian Lee"], "venue": "In Proceedings of the 42nd annual meeting on Association for Computational Linguistics,", "citeRegEx": "Pang et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Pang et al\\.", "year": 2004}, {"title": "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales", "author": ["Pang", "Lee2005] Bo Pang", "Lillian Lee"], "venue": "In Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "Pang et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Pang et al\\.", "year": 2005}, {"title": "Glove: Global vectors for word representation", "author": ["Richard Socher", "Christopher D Manning"], "venue": "In EMNLP,", "citeRegEx": "Pennington et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Pennington et al\\.", "year": 2014}, {"title": "Bidirectional recurrent neural networks", "author": ["Schuster", "Paliwal1997] Mike Schuster", "Kuldip K Paliwal"], "venue": "Signal Processing, IEEE Transactions", "citeRegEx": "Schuster et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Schuster et al\\.", "year": 1997}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["Alex Perelygin", "Jean Y Wu", "Jason Chuang", "Christopher D Manning", "Andrew Y Ng", "Christopher Potts"], "venue": "In Proceedings of the conference on empirical methods in natural language processing (EMNLP),", "citeRegEx": "Socher et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Socher et al\\.", "year": 2013}, {"title": "Improved semantic representations from tree-structured long short-term memory networks. arXiv preprint arXiv:1503.00075", "author": ["Tai et al.2015] Kai Sheng Tai", "Richard Socher", "Christopher D Manning"], "venue": null, "citeRegEx": "Tai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tai et al\\.", "year": 2015}, {"title": "Target-dependent sentiment classification with long short term memory. arXiv preprint arXiv:1512.01100", "author": ["Tang et al.2015] Duyu Tang", "Bing Qin", "Xiaocheng Feng", "Ting Liu"], "venue": null, "citeRegEx": "Tang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tang et al\\.", "year": 2015}, {"title": "Word representations: a simple and general method for semi-supervised learning. In Proceedings of the 48th annual meeting of the association for computational linguistics, pages 384\u2013394", "author": ["Turian et al.2010] Joseph Turian", "Lev Ratinov", "Yoshua Bengio"], "venue": null, "citeRegEx": "Turian et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Turian et al\\.", "year": 2010}, {"title": "Baselines and bigrams: Simple, good sentiment and topic classification", "author": ["Wang", "Manning2012] Sida Wang", "Christopher D Manning"], "venue": "In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Short Papers-Volume", "citeRegEx": "Wang et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2012}, {"title": "Don\u2019t follow me: Spam detection in twitter. In Security and Cryptography (SECRYPT)", "author": ["Alex Hai Wang"], "venue": "Proceedings of the 2010 International Conference on,", "citeRegEx": "Wang.,? \\Q2010\\E", "shortCiteRegEx": "Wang.", "year": 2010}, {"title": "Learning text representation using recurrent convolutional neural network with highway layers. arXiv preprint arXiv:1606.06905", "author": ["Wen et al.2016] Ying Wen", "Weinan Zhang", "Rui Luo", "Jun Wang"], "venue": null, "citeRegEx": "Wen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wen et al\\.", "year": 2016}, {"title": "Hierarchical attention networks for document classification", "author": ["Yang et al.2016] Zichao Yang", "Diyi Yang", "Chris Dyer", "Xiaodong He", "Alex Smola", "Eduard Hovy"], "venue": "In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies", "citeRegEx": "Yang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2016}, {"title": "Multichannel variable-size convolution for sentence classification", "author": ["Yin", "Sch\u00fctze2016] Wenpeng Yin", "Hinrich Sch\u00fctze"], "venue": "arXiv preprint arXiv:1603.04513", "citeRegEx": "Yin et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yin et al\\.", "year": 2016}, {"title": "Adadelta: An adaptive learning rate method", "author": ["Matthew D Zeiler"], "venue": "arXiv preprint arXiv:1212.5701", "citeRegEx": "Zeiler.,? \\Q2012\\E", "shortCiteRegEx": "Zeiler.", "year": 2012}, {"title": "Relation classification via convolutional deep neural network", "author": ["Zeng et al.2014] Daojian Zeng", "Kang Liu", "Siwei Lai", "Guangyou Zhou", "Jun Zhao"], "venue": "In COLING,", "citeRegEx": "Zeng et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Zeng et al\\.", "year": 2014}, {"title": "A sensitivity analysis of (and practitioners\u2019 guide to) convolutional neural networks for sentence classification", "author": ["Zhang", "Wallace2015] Ye Zhang", "Byron Wallace"], "venue": "arXiv preprint arXiv:1510.03820", "citeRegEx": "Zhang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2015}, {"title": "Dependency sensitive convolutional neural networks for modeling sentences and documents", "author": ["Zhang et al.2016] Rui Zhang", "Honglak Lee", "Dragomir Radev"], "venue": "In Proceedings of NAACL-HLT,", "citeRegEx": "Zhang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2016}, {"title": "Self-adaptive hierarchical sentence model", "author": ["Zhao et al.2015] Han Zhao", "Zhengdong Lu", "Pascal Poupart"], "venue": "arXiv preprint arXiv:1504.05070", "citeRegEx": "Zhao et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhao et al\\.", "year": 2015}, {"title": "A c-lstm neural network for text classification", "author": ["Zhou et al.2015] Chunting Zhou", "Chonglin Sun", "Zhiyuan Liu", "Francis Lau"], "venue": "arXiv preprint arXiv:1511.08630", "citeRegEx": "Zhou et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhou et al\\.", "year": 2015}, {"title": "Attention-based bidirectional long short-term memory networks for relation classification", "author": ["Zhou et al.2016] Peng Zhou", "Wei Shi", "Jun Tian", "Zhenyu Qi", "Bingchen Li", "Hongwei Hao", "Bo Xu"], "venue": "In The 54th Annual Meeting of the Association for Computational Linguistics,", "citeRegEx": "Zhou et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhou et al\\.", "year": 2016}, {"title": "Long short-term memory over recursive structures", "author": ["Zhu et al.2015] Xiaodan Zhu", "Parinaz Sobhani", "Hongyu Guo"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "Zhu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhu et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 22, "context": "Text classification is an essential component in many NLP applications, such as sentiment analysis (Socher et al., 2013), relation extraction (Zeng et al.", "startOffset": 99, "endOffset": 120}, {"referenceID": 32, "context": ", 2013), relation extraction (Zeng et al., 2014) and spam detection (Wang, 2010).", "startOffset": 29, "endOffset": 48}, {"referenceID": 27, "context": ", 2014) and spam detection (Wang, 2010).", "startOffset": 27, "endOffset": 39}, {"referenceID": 10, "context": "Then RNN utilizes 1D max pooling operation (Lai et al., 2015) or attention-based operation (Zhou et al.", "startOffset": 43, "endOffset": 61}, {"referenceID": 37, "context": ", 2015) or attention-based operation (Zhou et al., 2016), which extracts maximum values or generates a weighted representation over", "startOffset": 37, "endOffset": 56}, {"referenceID": 7, "context": "Convolutional Neural Networks (CNN) (Kalchbrenner et al., 2014; Kim, 2014) utilizes 1D convolution to perform the feature mapping, and then applies 1D max pooling operation over the time-step dimension to obtain a fixed-length output.", "startOffset": 36, "endOffset": 74}, {"referenceID": 8, "context": "Convolutional Neural Networks (CNN) (Kalchbrenner et al., 2014; Kim, 2014) utilizes 1D convolution to perform the feature mapping, and then applies 1D max pooling operation over the time-step dimension to obtain a fixed-length output.", "startOffset": 36, "endOffset": 74}, {"referenceID": 13, "context": "Unlike in NLP, CNN in image processing tasks (LeCun et al., 1998; Krizhevsky et al., 2012) applies 2D convolution and 2D pooling operation to get a representation of the input.", "startOffset": 45, "endOffset": 90}, {"referenceID": 9, "context": "Unlike in NLP, CNN in image processing tasks (LeCun et al., 1998; Krizhevsky et al., 2012) applies 2D convolution and 2D pooling operation to get a representation of the input.", "startOffset": 45, "endOffset": 90}, {"referenceID": 22, "context": "Socher et al. (2013) introduced recursive neural tensor network to build representations of phrases and sentences by combining neighbour constituents based on the parsing tree.", "startOffset": 0, "endOffset": 21}, {"referenceID": 22, "context": "Socher et al. (2013) introduced recursive neural tensor network to build representations of phrases and sentences by combining neighbour constituents based on the parsing tree. Irsoy and Cardie (2014) To avoid confusion with RNN, we named Recursive Neural Networks as RecNN.", "startOffset": 0, "endOffset": 201}, {"referenceID": 13, "context": "Convolution Neural Networks: CNN (LeCun et al., 1998) is a feedforward neural network with 2D convolution layers and 2D pooling layers, originally developed for image processing.", "startOffset": 33, "endOffset": 53}, {"referenceID": 7, "context": "Then CNN is applied to NLP tasks, such as sentence classification (Kalchbrenner et al., 2014; Kim, 2014), and relation classification (Zeng et al.", "startOffset": 66, "endOffset": 104}, {"referenceID": 8, "context": "Then CNN is applied to NLP tasks, such as sentence classification (Kalchbrenner et al., 2014; Kim, 2014), and relation classification (Zeng et al.", "startOffset": 66, "endOffset": 104}, {"referenceID": 32, "context": ", 2014; Kim, 2014), and relation classification (Zeng et al., 2014).", "startOffset": 48, "endOffset": 67}, {"referenceID": 34, "context": "The proposed model BLSTM-2DCNN is most relevant to DSCNN (Zhang et al., 2016) and RCNN (Wen et al.", "startOffset": 57, "endOffset": 77}, {"referenceID": 28, "context": ", 2016) and RCNN (Wen et al., 2016).", "startOffset": 17, "endOffset": 35}, {"referenceID": 19, "context": "Tang et al. (2015) developed target dependent Long ShortTerm Memory Networks (LSTM (Hochreiter and Schmidhuber, 1997)), where target information is automatically taken into account.", "startOffset": 0, "endOffset": 19}, {"referenceID": 19, "context": "Tai et al. (2015) generalized LSTM to Tree-LSTM where each LSTM unit gains information from its children units.", "startOffset": 0, "endOffset": 18}, {"referenceID": 19, "context": "Tai et al. (2015) generalized LSTM to Tree-LSTM where each LSTM unit gains information from its children units. Zhou et al. (2016) introduced BLSTM with attention mechanism to automatically select features that have a decisive effect on classification.", "startOffset": 0, "endOffset": 131}, {"referenceID": 19, "context": "Tai et al. (2015) generalized LSTM to Tree-LSTM where each LSTM unit gains information from its children units. Zhou et al. (2016) introduced BLSTM with attention mechanism to automatically select features that have a decisive effect on classification. Yang et al. (2016) introduced a hierarchical network with two levels of attention mechanisms, which are word attention and sentence attention, for document classification.", "startOffset": 0, "endOffset": 272}, {"referenceID": 19, "context": "Tai et al. (2015) generalized LSTM to Tree-LSTM where each LSTM unit gains information from its children units. Zhou et al. (2016) introduced BLSTM with attention mechanism to automatically select features that have a decisive effect on classification. Yang et al. (2016) introduced a hierarchical network with two levels of attention mechanisms, which are word attention and sentence attention, for document classification. This paper also implements an attention-based model BLSTM-Att like the model in Zhou et al. (2016). Convolution Neural Networks: CNN (LeCun et al.", "startOffset": 0, "endOffset": 524}, {"referenceID": 6, "context": "Then CNN is applied to NLP tasks, such as sentence classification (Kalchbrenner et al., 2014; Kim, 2014), and relation classification (Zeng et al., 2014). The difference is that the common CNN in NLP tasks is made up of 1D convolution layers and 1D pooling layers. Kim (2014) defined a CNN architecture with two channels.", "startOffset": 67, "endOffset": 276}, {"referenceID": 6, "context": "Then CNN is applied to NLP tasks, such as sentence classification (Kalchbrenner et al., 2014; Kim, 2014), and relation classification (Zeng et al., 2014). The difference is that the common CNN in NLP tasks is made up of 1D convolution layers and 1D pooling layers. Kim (2014) defined a CNN architecture with two channels. Kalchbrenner et al. (2014) proposed a dynamic k-max pooling mechanism for sentence modeling.", "startOffset": 67, "endOffset": 349}, {"referenceID": 6, "context": "Then CNN is applied to NLP tasks, such as sentence classification (Kalchbrenner et al., 2014; Kim, 2014), and relation classification (Zeng et al., 2014). The difference is that the common CNN in NLP tasks is made up of 1D convolution layers and 1D pooling layers. Kim (2014) defined a CNN architecture with two channels. Kalchbrenner et al. (2014) proposed a dynamic k-max pooling mechanism for sentence modeling. (Zhang and Wallace, 2015) conducted a sensitivity analysis of one-layer CNN to explore the effect of architecture components on model performance. Yin and Sch\u00fctze (2016) introduced multichannel embeddings and unsupervised pretraining to improve classification accuracy.", "startOffset": 67, "endOffset": 585}, {"referenceID": 6, "context": "Iyyer et al. (2015) introduced a deep averaging network, which fed an unweighted average of word embeddings through multiple hidden layers before classification.", "startOffset": 0, "endOffset": 20}, {"referenceID": 6, "context": "Iyyer et al. (2015) introduced a deep averaging network, which fed an unweighted average of word embeddings through multiple hidden layers before classification. Zhou et al. (2015) used CNN to extract a sequence of higher-level phrase representations, then the representations were fed into a LSTM to obtain the sentence representation.", "startOffset": 0, "endOffset": 181}, {"referenceID": 7, "context": "Then narrow convolution is utilized (Kalchbrenner et al., 2014) to extract local features over H .", "startOffset": 36, "endOffset": 63}, {"referenceID": 31, "context": "Training is done through stochastic gradient descent over shuffled mini-batches with the AdaDelta (Zeiler, 2012) update rule.", "startOffset": 98, "endOffset": 112}, {"referenceID": 22, "context": "\u2022 SST-13: Stanford Sentiment Treebank is an extension of MR from Socher et al. (2013). The aim is to classify a review as fine-grained labels (very negative, negative, neutral, positive, very positive).", "startOffset": 65, "endOffset": 86}, {"referenceID": 22, "context": "For both experiments, phrases and sentences are used to train the model, but only sentences are scored at test time (Socher et al., 2013; Le and Mikolov, 2014).", "startOffset": 116, "endOffset": 159}, {"referenceID": 0, "context": "We use the bydate version preprocessed by Cachopo (2007). We select four major categories (comp, politics, rec and religion) followed by Hingmire et al.", "startOffset": 42, "endOffset": 57}, {"referenceID": 0, "context": "We use the bydate version preprocessed by Cachopo (2007). We select four major categories (comp, politics, rec and religion) followed by Hingmire et al. (2013).", "startOffset": 42, "endOffset": 160}, {"referenceID": 25, "context": "2 Word Embeddings The word embeddings are pre-trained on much larger unannotated corpora to achieve better generalization given limited amount of training data (Turian et al., 2010).", "startOffset": 160, "endOffset": 181}, {"referenceID": 20, "context": "In particular, our experiments utilize the GloVe embeddings7 trained by Pennington et al. (2014) on 6 billion tokens of Wikipedia 2014 and Gigaword 5.", "startOffset": 72, "endOffset": 97}, {"referenceID": 3, "context": "For regularization, we employ Dropout operation (Hinton et al., 2012) with dropout rate of 0.", "startOffset": 48, "endOffset": 69}, {"referenceID": 7, "context": "We only tune these hyperparameters, and more finer tuning, such as using different numbers of hidden units of LSTM layer, or using wide convolution (Kalchbrenner et al., 2014), may further improve the performance.", "startOffset": 148, "endOffset": 175}, {"referenceID": 10, "context": "Compared with RCNN (Lai et al., 2015), BLSTM2DCNN achieves a comparable result.", "startOffset": 19, "endOffset": 37}, {"referenceID": 34, "context": "Compared with DSCNN (Zhang et al., 2016), BLSTM-2DCNN outperforms it on five datasets.", "startOffset": 20, "endOffset": 40}, {"referenceID": 22, "context": "NN Model SST-1 SST-2 Subj TREC MR 20Ng ReNN RNTN (Socher et al., 2013) 45.", "startOffset": 49, "endOffset": 70}, {"referenceID": 7, "context": "CNN DCNN (Kalchbrenner et al., 2014) 48.", "startOffset": 9, "endOffset": 36}, {"referenceID": 8, "context": "0 - CNN-non-static (Kim, 2014) 48.", "startOffset": 19, "endOffset": 30}, {"referenceID": 8, "context": "6 - CNN-MC (Kim, 2014) 47.", "startOffset": 11, "endOffset": 22}, {"referenceID": 17, "context": "2 92 - TBCNN(Mou et al., 2015) 51.", "startOffset": 12, "endOffset": 30}, {"referenceID": 14, "context": "0 - Molding-CNN (Lei et al., 2015) 51.", "startOffset": 16, "endOffset": 34}, {"referenceID": 10, "context": "RNN RCNN (Lai et al., 2015) 47.", "startOffset": 9, "endOffset": 27}, {"referenceID": 38, "context": "49 S-LSTM (Zhu et al., 2015) - 81.", "startOffset": 10, "endOffset": 28}, {"referenceID": 23, "context": "9 - - - LSTM (Tai et al., 2015) 46.", "startOffset": 13, "endOffset": 31}, {"referenceID": 23, "context": "9 - - - BLSTM (Tai et al., 2015) 49.", "startOffset": 14, "endOffset": 32}, {"referenceID": 23, "context": "5 - - - Tree-LSTM (Tai et al., 2015) 51.", "startOffset": 18, "endOffset": 36}, {"referenceID": 1, "context": "0 - - - LSTMN (Cheng et al., 2016) 49.", "startOffset": 14, "endOffset": 34}, {"referenceID": 16, "context": "3 - - - Multi-Task (Liu et al., 2016) 49.", "startOffset": 19, "endOffset": 37}, {"referenceID": 6, "context": "8 - - - DAN (Iyyer et al., 2015) 48.", "startOffset": 12, "endOffset": 32}, {"referenceID": 35, "context": "5 AdaSent (Zhao et al., 2015) - - 95.", "startOffset": 10, "endOffset": 29}, {"referenceID": 36, "context": "0 - - - C-LSTM (Zhou et al., 2015) 49.", "startOffset": 15, "endOffset": 34}, {"referenceID": 34, "context": "6 - DSCNN (Zhang et al., 2016) 49.", "startOffset": 10, "endOffset": 30}, {"referenceID": 22, "context": "RNTN: Recursive deep models for semantic compositionality over a sentiment treebank (Socher et al., 2013).", "startOffset": 84, "endOffset": 105}, {"referenceID": 7, "context": "DCNN: A convolutional neural network for modeling sentences (Kalchbrenner et al., 2014).", "startOffset": 60, "endOffset": 87}, {"referenceID": 8, "context": "CNN-nonstatic/MC: Convolutional neural networks for sentence classification (Kim, 2014).", "startOffset": 76, "endOffset": 87}, {"referenceID": 17, "context": "TBCNN: Discriminative neural sentence modeling by tree-based convolution (Mou et al., 2015).", "startOffset": 73, "endOffset": 91}, {"referenceID": 14, "context": "Molding-CNN: Molding CNNs for text: non-linear, non-consecutive convolutions (Lei et al., 2015).", "startOffset": 77, "endOffset": 95}, {"referenceID": 10, "context": "RCNN: Recurrent Convolutional Neural Networks for Text Classification (Lai et al., 2015).", "startOffset": 70, "endOffset": 88}, {"referenceID": 38, "context": "S-LSTM: Long short-term memory over recursive structures (Zhu et al., 2015).", "startOffset": 57, "endOffset": 75}, {"referenceID": 23, "context": "LSTM/BLSTM/Tree-LSTM: Improved semantic representations from tree-structured long shortterm memory networks (Tai et al., 2015).", "startOffset": 108, "endOffset": 126}, {"referenceID": 1, "context": "LSTMN: Long short-term memory-networks for machine reading (Cheng et al., 2016).", "startOffset": 59, "endOffset": 79}, {"referenceID": 16, "context": "Multi-Task: Recurrent Neural Network for Text Classification with Multi-Task Learning (Liu et al., 2016).", "startOffset": 86, "endOffset": 104}, {"referenceID": 6, "context": "DAN: Deep unordered composition rivals syntactic methods for text classification (Iyyer et al., 2015).", "startOffset": 81, "endOffset": 101}, {"referenceID": 35, "context": "AdaSent: Selfadaptive hierarchical sentence model (Zhao et al., 2015).", "startOffset": 50, "endOffset": 69}, {"referenceID": 36, "context": "C-LSTM: A C-LSTM Neural Network for Text Classification (Zhou et al., 2015).", "startOffset": 56, "endOffset": 75}, {"referenceID": 34, "context": "DSCNN: Dependency Sensitive Convolutional Neural Networks for Modeling Sentences and Documents (Zhang et al., 2016).", "startOffset": 95, "endOffset": 115}, {"referenceID": 34, "context": "The experiments results demonstrate that BLSTM-2DCNN not only outperforms RecNN, RNN and CNN models, but also works better than the BLSTM-2DPooling and DSCNN (Zhang et al., 2016).", "startOffset": 158, "endOffset": 178}], "year": 2016, "abstractText": "Recurrent Neural Network (RNN) is one of the most popular architectures used in Natural Language Processsing (NLP) tasks because its recurrent structure is very suitable to process variablelength text. RNN can utilize distributed representations of words by first converting the tokens comprising each text into vectors, which form a matrix. And this matrix includes two dimensions: the time-step dimension and the feature vector dimension. Then most existing models usually utilize one-dimensional (1D) max pooling operation or attention-based operation only on the time-step dimension to obtain a fixed-length vector. However, the features on the feature vector dimension are not mutually independent, and simply applying 1D pooling operation over the time-step dimension independently may destroy the structure of the feature representation. On the other hand, applying two-dimensional (2D) pooling operation over the two dimensions may sample more meaningful features for sequence modeling tasks. To integrate the features on both dimensions of the matrix, this paper explores applying 2D max pooling operation to obtain a fixed-length representation of the text. This paper also utilizes 2D convolution to sample more meaningful information of the matrix. Experiments are conducted on six text classification tasks, including sentiment analysis, question classification, subjectivity classification and newsgroup classification. Compared with the state-of-the-art models, the proposed models achieve excellent performance on 4 out of 6 tasks. Specifically, one of the proposed models achieves highest accuracy on Stanford Sentiment Treebank binary classification and fine-grained classification tasks.", "creator": "LaTeX with hyperref package"}}}