{"id": "1611.09441", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Nov-2016", "title": "Sentiment Analysis for Twitter : Going Beyond Tweet Text", "abstract": "Analysing sentiment of tweets is important as it helps to determine the users' opinion. Knowing people's opinion is crucial for several purposes starting from gathering knowledge about customer base, e-governance, campaigning and many more. In this report, we aim to develop a system to detect the sentiment from tweets that have been retweeted by over 1.5 million people (6,800 tweets, according to the analysis). We hope to see the use of predictive toolologies and techniques used to detect sentiment data across platforms across platforms in a future project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Tue, 29 Nov 2016 00:22:13 GMT  (22kb)", "http://arxiv.org/abs/1611.09441v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.SI", "authors": ["lahari poddar", "kishaloy halder", "xianyan jia"], "accepted": false, "id": "1611.09441"}, "pdf": {"name": "1611.09441.pdf", "metadata": {"source": "CRF", "title": "Sentiment Analysis for Twitter : Going Beyond Tweet Text", "authors": ["Lahari Poddar", "Kishaloy Halder", "Xianyan Jia"], "emails": ["jiaxiany}@comp.nus.edu.sg"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n09 44\n1v 1\n[ cs\n.C L\n] 2\n9 N\nov 2\n01 6"}, {"heading": "1. INTRODUCTION", "text": "Analysing sentiment from text is a well-known NLP problem. Several state-of-the-art tools exist that can achieve this with reasonable accuracy. However most of the existing tools perform well on well-formatted text. In case of tweets, the user generated content is short, noisy, and in many cases (\u223c 30%) doesn\u2019t follow proper grammatical structure. Additionally, numerous internet slangs, abbreviations, urls, emoticons, and unconventional style of capitalization are found in the tweets. As a result, the accuracy of the state-of-the art NLP tools decreases sharply. In this project, we develop new features to incorporate the styles salient in short, informal user generated contents like tweets. We achieve an F1-accuracy of \u223c 71.3% for predicting the sentiment of tweets in our data-set. We also propose a method to discover new sentiment terms from the tweets.\nIn section 2 we present analysis of the data-set. We describe the data-preprocessing that we have done in section 3. In section 4 we describe how the feature-set was extracted, the classification framework, and also the tuning of the parameters for reasonable accuracy. In section 5 we report the performance of our system. We also report how the different features affect the accuracy of the system. We describe how we harvest new sentiment terms using our framework in section 6. In this section we also present how we predict strength of sentiment from the tweets. We finally conclude with some possible future directions of work in section 7."}, {"heading": "2. DATA-ANALYSIS", "text": "Tweets are short messages, restricted to 140 characters in\nlength. Due to the nature of this microblogging service (quick and short messages), people use acronyms, make spelling mistakes, use emoticons and other characters that express special meanings. Following is a brief terminology associated with tweets:\n\u2022 Emoticons: These are facial expressions pictorially represented using punctuation and letters. They express user\u2019s mood.\n\u2022 Mention: The @ symbol is used to refer to other users on the microblog.\n\u2022 Hashtags: Users commonly use hashtags to mark topics. This is primarily done to increase the visibility of their tweets.\n\u2022 Url: Because of the short nature of tweet, people use external link(s) to provide additional information (in support of their tweet).\nOur dataset contains tweets about \u2018ObamaCare\u2019 in USA collected during march 2010. It is divided into three subsets (train, dev, and test). Some tweets are manually annotated with one of the following classes.\npositive, negative, neutral, unsure, and irrelevant\nWe ignore the tweets which are annotated unsure, or irrelevant. We present some preliminary statistics about the training data and test data in Table 1. We observe that there is an imbalance in the dataset. In training dataset, the ratio of positive tweets to negative ones is almost 1:2. In test set, it is heavily skewed with the ratio being less than 1:3. We handle this data imbalance problem using class prior parameters of the learning algorithm. We discuss this is detail in section 4.3."}, {"heading": "3. DATA PRE-PROCESSING", "text": "Since tweets are informal in nature, some pre-processing is required. Consider the following tweet. \u201c#Healthcare #Ins. Cigna denies #MD prescribed #tx"}, {"heading": "2 customers 20% of the time. - http://bit.ly/5PoQfo #HCR #Passit #ILDems #p2 PLS RT\u201d", "text": "It is difficult to understand what is the content of the tweet unless it is normalized. We process all the tweets through the following stages."}, {"heading": "3.1 Normalization", "text": "Normalization is done as follows:\n(1) Removing patterns like \u2019RT\u2019, \u2019@user name\u2019, url.\n(2) Tokenizing tweet text using NLTK[1] word tokenizer.\n(3) Making use of the stopwords list by NLTK to remove them from the tweet text.\n(4) Rectifying informal/misspelled words using normalization dictionary [2]. For example, \u201cfoundation\u201d for \u201cfoudation\u201d, \u201cforgot\u201d for \u201cforgt\u201d.\n(5) Expanding abbreviations using slang dictionary1. For example, \u201cbtw\u201d is expanded to \u201cby the way\u201d.\n(6) Removing emoticons. However we keep the number of positive and negative emoticons in each tweet as feature. We make use of the emoticon dictionary(Table 2) presented in [3]."}, {"heading": "3.2 Hashtag Segmentation", "text": "We segment a hashtag into meaningful English phrases. The \u2018#\u2019 character is removed from the tweet text. As for example, #killthebill is transformed into kill the bill . In order to achieve this, we use a dictionary of English words. We recursively break the hashtagged phrase into segments and match the segments in the dictionary until we get a complete set of meaningful words. This is important since many users tend to post tweets where the actual message of the tweet is expressed in form of terse hashtagged phrases.\n1Slang Dictionary - Text Slang & Internet Slang Words. http://www.noslang.com/dictionary/"}, {"heading": "3.3 Processing URLs", "text": "The urls embedded in the tweet are a good source of additional context to the actual short tweet content. Sometimes tweets are too terse to comprehend just from the text content of it alone. However if there is a url embedded in the tweet, that can help us understand the context of it \u2013 perhaps the sentiment expressed as well. In order to leverage this additional source of information, we identify all the urls present in the tweets and crawl the web-pages using AlchemyAPI2. The API retrieves only the textual body of the article in a web-page. We analyze the article texts later on to get more context for the tweet."}, {"heading": "4. ALGORITHMIC FRAMEWORK", "text": "We employ a supervised learning model using the manually labeled data as training set and a collection of handcrafted features. In this section we describe the features and the classification model used in this task."}, {"heading": "4.1 Feature Extraction", "text": "Table 3 presents the set of features we use in our experiment. We have used some basic features (that are commonly used for text classification task) as well as some advanced ones suitable for this particular domain."}, {"heading": "4.1.1 Basic Features", "text": "We use two basic features:\n(1) Parts of Speech (POS) tags: We use the POS tagger of NLTK to tag the tweet texts [1]. We use counts of noun, adjective, adverb, verb words in a tweet as POS features.\n(2) Prior polarity of the words: We use a polarity dictionary [4] to get the prior polarity of words. The dictionary contains positive, negative and neutral words along with their polarity strength (weak or strong). The polarity of a word is dependent on its POS tag. For example, the word \u2018excuse\u2019 is negative when used as \u2018noun\u2019 or \u2018adjective\u2019, but it carries a positive sense when used as a \u2018verb\u2019. We use the tags produced by NLTK postagger while selecting the prior polarity of a word from the dictionary. We also employ stemming (Porter Stemmer implementation from NLTK) while performing the dictionary lookup to increase number of matches. We use the counts of weak positive words, weak negative words, strong positive words and strong negative words in a tweet as features."}, {"heading": "4.1.2 Advanced Features", "text": "We have also explored some advanced features that helps improve detecting sentiment of tweets.\n(1) Emoticons: We use the emoticon dictionary from[3], and count the positive and negtive emocicons for each tweet.\n(2) The sentiment of url: Since almost all the articles are written in well-formatted english, we analyze the sentiment of the first paragraph of the article using\n2http://www.alchemyapi.com/api\nTable 3: Features\nBasic POS tag f1 # of noun, adj, adv, verb\nWord Polarity f2 # of Strong Positive Words, Strong Negative Words # of Weak Positive Words, Weak Negative Words\nAdvanced Twitter specific f3 Whether the tweet is a retweet or not, contains user mention or not Emoticon f4 # of positiveEmoticons, negativeEmoticons\nUrl f5 fraction of positive, negative and neutral sentiment sentences in the landing page of the url (if any) Hashtag f6 # of hashtags Capitalization f7 # of capitalization word in each tweet TF-IDF f8 Stacked predictions from Tf-Idf features User f9 User id of the user posting the tweet\nStandford Sentiment Analysis tool[5]. It predicts sentiment for each sentence within the article. We calculate the fraction of sentences that are negative, positive, and neutral and use these three values as features.\n(3) Hashtag: We count the number of hashtags in each tweet.\n(4) Capitalization: We assume that capitalization in the tweets has some relationship with the degree of sentiment. We count the number of words with capitalization in the tweets.\n(5) Retweet: This is a boolean feature indicating whether the tweet is a retweet or not.\n(6) User Mention: A boolean feature indicating whether the tweet contains a user mention.\n(7) Negation: Words like \u2018no\u2019, \u2018not\u2019, \u2018won\u2019t\u2019 are called negation words since they negate the meaning of the word that is following it. As for example \u2018good\u2019 becomes \u2018not good\u2019. We detect all the negation words in the tweets. If a negation word is followed by a polarity word, then we negate the polarity of that word. For example, if \u2018good \u2019 is preceeded by a \u2018not \u2019, we change the polarity from \u2018weak positive\u2019 to \u2018weak negative\u2019.\n(8) Text Feature: We use tf-idf based text features to predict the sentiment of a tweet. We perform tf-idf based scoring of words in a tweet and the hashtags present in the tweets. We use the tf-idf vectors to train a classifier and predict the sentiment. This is then used as a stacked prediction feature in the final classifier.\n(9) Target: We use the target of the tweet as categorical feature for our classifier.\n(10) User: On a particular topic one particular user will generally have a single viewpoint (either positive or negative or neutral). If there are multiple posts within a short period of time from a user, then possibly the posts will contain the same sentiment. We use the user id as a categorical feature. On an average there are 3.5 tweets per user in the dataset, and over 90% users in the train set have expressed a single viewpoint for all their tweets (either positive or negative). Hence we believe this feature should be able to capture a user\u2019s viewpoint on the topic.\n."}, {"heading": "4.2 Classifier", "text": "We experiment with the following set of machine learning classifiers. We train the model with manually labeled data and used the above described features to predict the sentiment. We consider only positive, negative and neutral classes.\n(1) Multinomial Naive Bayes : Naive Bayes have been one of the most commonly used classifiers for text classification problems over the years. Naive Bayes classifier makes the assumption that the value of a particular feature is independent of the value of any other feature, given the class variable. This independence assumption makes the classifier both simple and scalable. Bayes classifier assigns a class label y\u0302 = Ck for some k according to the following equation:\ny\u0302 = argmax k\u2208{1,...,K} p (Ck)\nn\u220f\ni=1\np (xi|Ck) (1)\nThe assumptions on distributions of features define the event model of the Naive Bayes classifier. We use multinomial Naive Bayes classifer, which is suitable for discrete features (like counts and frequencies).\n(2) Linear SVM : Support Vector Machines are linear non-probabilistic learning algorithms that given training examples, depending on features, build a model to classify new data points to one of the probable classes. We have used support vector machine with stochastic gradient descent learning where gradient of loss is estimated and model is updated at each sample with decreasing strength.\n. For this task we found Multinomial Naive Bayes performs slightly better than Linear SVM, hence in the evaluation we report accuracy with this classifier."}, {"heading": "4.3 Parameter Tuning", "text": "Parameter tuning or hyperparameter optimization is an important step in model selection since it prevents the model from overfitting and optimize the performance of a model on an independent dataset. We perform hyperparameter optimization by using grid search, i.e. an exhaustive searching through a manually specified subset of the hyperparameter space for a learning algorithm. We do grid search and set the \u2018best parameters\u2019 by doing cross validation on training set and verified the improvement of accuracy on the validation set. Finally we use the model with best hyperparameters to make predictions on the test set."}, {"heading": "5. EVALUATION AND ANALYSIS", "text": "Table 4 shows the test results when features are added incrementally. We start with our basic model (with only POS tag features and word polarity features) and subsequently add various sets of features. First we add emoticon features, it has not much effect. This is reasonable since only 8 positive emoticons and 3 negative emoticons are detected(Table 1) out of 40049 tokens. So the significance of emoticon can be neglected in this dataset. Then we add hashtag and capitalization features, and obtain an overall gain of 2% over the basic model. By adding the sentiment features from URL articles, we get overall 6% improvement over baseline. Further twitter specific features and user features improve the f1 by 12%. Last, we add TF-IDF feature, and the result improves a lot, and our sentiment classifier reaches the best classification results with an F1-accuracy of 69% as shown in the table. Analyzing the results for different classes, we observe that the classifier works best for negative tweets. This can be explained by the number of training tweets for each classes, since proportion of negative tweets were considerably higher in both train and test sets as mentioned in Section 2."}, {"heading": "5.1 Comparison with Stanford Sentiment Analysis Tool", "text": "In this section we compare the performance of our framework with an openly available state-of-the-art sentiment analysis tool. We choose Stanford coreNLP package as the baseline. It uses recursive deep models to do sentiment analysis and achieves good accuracy (\u223c 85%) for formal corpora [5]. However for noisy and informal texts like tweets, their performance decreases sharply. We present the performance of Stanford coreNLP tool over the test dataset.\nComparing table 5 with table 4 we observe that our framework outperforms stanford coreNLP by a significant margin (\u223c 20%). This owes to the fact that stanford coreNLP is not able to handle text with lot of noise, lack of formality, and slangs/abbreviations. This proves the effectiveness of our framework."}, {"heading": "6. ENHANCEMENTS", "text": "Apart from sentiment prediction, we also present some extensions to our system."}, {"heading": "6.1 Harvest New Sentiment Terms", "text": "We have used a static dictionary to get prior polarity of a word, which helps detect the overall sentiment of a sentence. However the usage of words varies depending on conversation medium (e.g. : informal social media, blogs, news media), context and topic. For instance, the word \u2018simple\u2019 is generally used in positive sense, but consider its use while describing the storyline of a movie. In this context, a \u2018simple storyline\u2019 will probably hint at a negative sentiment. For a dynamic media like Twitter, where the topic mix and word mix change often, having a static dictionary of words with fixed polarity will not suffice. To get temporal and topicspecific sentiment terms, we make use of the tweets classified by our classifier. We consider the words that appear in the positive, neutral and negative tweets. A word that very frequently occurs in tweets with positive (negative) sentiment and hardly occurs with tweets with a negative (positive) sentiment, will probably have a positive (negative) orientation for that particular topic. To implement this hypothesis, we first count the word frequency in each tweet collection. Then for each collection, we select top k% most frequent words and deduct from top n% words from other two collections. For example, in Algorithm 1, if we want to get new negative words, we find the words in top 10% from negative collection. And we compare the words that appear in top 60% of the other two, remove words that co-appear. Part of the new negative terms we find are shown in Table 6. We use same procedure to find new positive and neutral words.\nData: negativeCol, positiveCol, neutralCol Result: new negative words from data collection NEGtop \u2190 NEG[0 :< threshold1 > \u2217LNEG]; POStop \u2190 POS[0 :< threshold2 > \u2217LPOS ]; NEUtop \u2190 NUE[0 :< threshold2 > \u2217LNUE ]; for word \u2208 NEGtop do\nif word /\u2208 {POStop \u222aNEUtop} then NewNagative\u2190 NewNegative \u222a {word}; else drop word end\nend Algorithm 1: Harvest New Negative Words Algorithm"}, {"heading": "6.2 Predicting Strength of Sentiment", "text": "Apart from predicting the sentiment class of tweets we are\nalso interested in predicting the strength or intensity of the sentiment associated. Consider the following tweets.\n\u2022 t1: \u2018GO TO YOUR US REPS OFFICE ON SATURDAY AND SAY VOTE NO! ON #HCR #Obama\n#cnn #killthebill #p2 #msnbc #foxnews #congress #tcot\u2019\n\u2022 t2: \u2018Thankfully the Democrat Party isn\u2019t too big to fail. #tcot #hcr\u2019\nAlthough both the tweets have negative sentiment towards \u2018ObamaCare\u2019, the intensity in both are not the same. The first tweet (t1) is quite aggressive whereas the other one (t2) is not that much. Here we propose a technique to predict the strength of sentiment.\nWe consider few features from the tweet in order to do this. If our classifier predicts the sentiment to be neutral we say that the strength of sentiment is 0. However if it is not i.e., if it is either positive or negative, we increase strength of sentiment for each of the following features of the tweet.\n1. Number of capitalized words.\n2. Number of strong positive words.\n3. Number of strong negative words.\n4. Number of weak positive words.\n5. Number of weak negative words.\nEach of these features contributes to the strength score of a tweet. Once calculated, we normalize the score within [0-5]. Finally we assign sentiment polarity depending on the overall sentiment of the tweet. As for example, if a tweet has score of 3 and the overall predicted sentiment is negative then we give it a score of \u2018-3\u2019. It denotes that the tweet is moderately negative. Having said that, strength of sentiment is highly subjective. A tweet can appear to be very much aggressive to some person whereas the same may appear to not to be that aggressive to some other person."}, {"heading": "7. CONCLUSION", "text": "In this report we have presented a sentiment analysis tool for Twitter posts. We have discussed the characteristics of Twitter that make existing sentiment analyzers perform poorly. The model proposed in this report has addressed\nthe challenges by using normalization methods and features specific to this media. We show that using external knowledge outside the tweet text (from landing pages of URLs) and user features can significantly improve performance. We have presented experimental results and comparison with state-of-the-art tools.\nWe have presented two enhanced functionalities, i.e. discovering new sentiment terms and predicting strength of the sentiment. Due to the absence of labelled data we couldn\u2019t discuss the accuracies of these two enhancements. In the future, we plan to use these as feedback mechanism to classify new tweets."}, {"heading": "8. REFERENCES", "text": "[1] Steven Bird. Nltk: the natural language toolkit. In Proceedings of the COLING/ACL on Interactive presentation sessions, pages 69\u201372. Association for Computational Linguistics, 2006.\n[2] Bo Han, Paul Cook, and Timothy Baldwin. Automatically constructing a normalisation dictionary for microblogs. In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, pages 421\u2013432, Jeju Island, Korea, July 2012. Association for Computational Linguistics.\n[3] Geetika Vashisht and Sangharsh Thakur. Facebook as a corpus for emoticons-based sentiment analysis.\n[4] Theresa Wilson, Janyce Wiebe, and Paul Hoffmann. Recognizing contextual polarity in phrase-level sentiment analysis. In Proceedings of the conference on human language technology and empirical methods in natural language processing, pages 347\u2013354. Association for Computational Linguistics, 2005.\n[5] Richard Socher, Alex Perelygin, Jean Y Wu, Jason Chuang, Christopher D Manning, Andrew Y Ng, and Christopher Potts. Recursive deep models for semantic compositionality over a sentiment treebank. In Proceedings of the conference on empirical methods in natural language processing (EMNLP), volume 1631, page 1642. Citeseer, 2013."}], "references": [{"title": "Nltk: the natural language toolkit", "author": ["Steven Bird"], "venue": "In Proceedings of the COLING/ACL on Interactive presentation sessions,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "Automatically constructing a normalisation dictionary for microblogs", "author": ["Bo Han", "Paul Cook", "Timothy Baldwin"], "venue": "In Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "Recognizing contextual polarity in phrase-level sentiment analysis. In Proceedings of the conference on human language technology and empirical methods in natural language processing, pages 347\u2013354", "author": ["Theresa Wilson", "Janyce Wiebe", "Paul Hoffmann"], "venue": "Association for Computational Linguistics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2005}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["Richard Socher", "Alex Perelygin", "Jean Y Wu", "Jason Chuang", "Christopher D Manning", "Andrew Y Ng", "Christopher Potts"], "venue": "In Proceedings of the conference on empirical methods in natural language processing (EMNLP),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "(2) Tokenizing tweet text using NLTK[1] word tokenizer.", "startOffset": 36, "endOffset": 39}, {"referenceID": 1, "context": "(4) Rectifying informal/misspelled words using normalization dictionary [2].", "startOffset": 72, "endOffset": 75}, {"referenceID": 0, "context": "(1) Parts of Speech (POS) tags: We use the POS tagger of NLTK to tag the tweet texts [1].", "startOffset": 85, "endOffset": 88}, {"referenceID": 2, "context": "(2) Prior polarity of the words: We use a polarity dictionary [4] to get the prior polarity of words.", "startOffset": 62, "endOffset": 65}, {"referenceID": 3, "context": "Standford Sentiment Analysis tool[5].", "startOffset": 33, "endOffset": 36}, {"referenceID": 3, "context": "It uses recursive deep models to do sentiment analysis and achieves good accuracy (\u223c 85%) for formal corpora [5].", "startOffset": 109, "endOffset": 112}, {"referenceID": 0, "context": "Once calculated, we normalize the score within [0-5].", "startOffset": 47, "endOffset": 52}, {"referenceID": 1, "context": "Once calculated, we normalize the score within [0-5].", "startOffset": 47, "endOffset": 52}, {"referenceID": 2, "context": "Once calculated, we normalize the score within [0-5].", "startOffset": 47, "endOffset": 52}, {"referenceID": 3, "context": "Once calculated, we normalize the score within [0-5].", "startOffset": 47, "endOffset": 52}], "year": 2016, "abstractText": "Analysing sentiment of tweets is important as it helps to determine the users\u2019 opinion. Knowing people\u2019s opinion is crucial for several purposes starting from gathering knowledge about customer base, e-governance, campaignings and many more. In this report, we aim to develop a system to detect the sentiment from tweets. We employ several linguistic features along with some other external sources of information to detect the sentiment of a tweet. We show that augmenting the 140 character-long tweet with information harvested from external urls shared in the tweet as well as Social Media features enhances the sentiment prediction accuracy significantly.", "creator": "LaTeX with hyperref package"}}}