{"id": "1701.02543", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Jan-2017", "title": "Predicting Citywide Crowd Flows Using Deep Spatio-Temporal Residual Networks", "abstract": "Forecasting the flow of crowds is of great importance to traffic management and public safety, and very challenging as it is affected by many complex factors, including spatial dependencies (nearby and distant), temporal dependencies (closeness, period, trend), and external conditions (e.g., weather and events)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Tue, 10 Jan 2017 12:12:39 GMT  (6773kb,D)", "http://arxiv.org/abs/1701.02543v1", "21 pages, 16 figures. arXiv admin note: substantial text overlap witharXiv:1610.00081"]], "COMMENTS": "21 pages, 16 figures. arXiv admin note: substantial text overlap witharXiv:1610.00081", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["junbo zhang", "yu zheng", "dekang qi", "ruiyuan li", "xiuwen yi", "tianrui li"], "accepted": false, "id": "1701.02543"}, "pdf": {"name": "1701.02543.pdf", "metadata": {"source": "CRF", "title": "Predicting Citywide Crowd Flows Using Deep Spatio-Temporal Residual Networks", "authors": ["Junbo Zhanga", "Yu Zhenga", "Dekang Qib", "Ruiyuan Lic", "Xiuwen Yib", "Tianrui Lib"], "emails": [], "sections": [{"heading": null, "text": "Forecasting the flow of crowds is of great importance to traffic management and public safety, and very challenging as it is affected by many complex factors, including spatial dependencies (nearby and distant), temporal dependencies (closeness, period, trend), and external conditions (e.g. weather and events). We propose a deep-learning-based approach, called ST-ResNet, to collectively forecast two types of crowd flows (i.e. inflow and outflow) in each and every region of a city. We design an end-to-end structure of ST-ResNet based on unique properties of spatio-temporal data. More specifically, we employ the residual neural network framework to model the temporal closeness, period, and trend properties of crowd traffic. For each property, we design a branch of residual convolutional units, each of which models the spatial properties of crowd traffic. ST-ResNet learns to dynamically aggregate the output of the three residual neural networks based on data, assigning different weights to different branches and regions. The aggregation is further combined with external factors, such as weather and day of the week, to predict the final traffic of crowds in each and every region. We have developed a real-time system based on Microsoft Azure Cloud, called UrbanFlow, providing the crowd flow monitoring and forecasting in Guiyang City of China. In addition, we present an extensive experimental evaluation using two types of crowd flows in Beijing and New York City (NYC), where ST-ResNet outperforms nine well-known baselines.\nKeywords: Convolutional Neural Networks, Spatio-temporal Data, Residual Learning, Crowd Flows, Cloud"}, {"heading": "1. Introduction", "text": "Predicting crowd flows in a city is of great importance to traffic management, risk assessment, and public safety [2]. For instance, massive crowds of people streamed into a strip region at the 2015 New Year\u2019s Eve celebrations in Shanghai, resulting in a catastrophic stampede that killed 36 people. In mid-July of 2016, hundreds of \u201cPokemon Go\u201d players ran through New York City\u2019s Central Park in hopes of catching a particularly rare digital monster, leading to a dangerous stampede there. If one can predict the crowd flow in a region, such tragedies can be mitigated or prevented by utilizing emergency mechanisms, such as conducting traffic control, sending out warnings, or evacuating people, in advance.\nIn this paper, we predict two types of crowd flows [3]: inflow and outflow, as shown in Figure 1(a). Inflow is the total traffic of crowds entering a region from other places during a given time interval. Outflow denotes the total traffic of crowds leaving a region for other places during a given time interval. Both types of flows track the transition of\nIThis paper is an expanded version of [1], which has been accepted for presentation at the 31st AAAI Conference on Artificial Intelligence (AAAI-17). \u2217Corresponding author Email addresses: junbo.zhang@microsoft.com (Junbo Zhang), yuzheng@microsoft.com (Yu Zheng), dekangqi@outlook.com (Dekang Qi), v-ruiyli@microsoft.com (Ruiyuan Li), v-xiuyi@microsoft.com (Xiuwen Yi), trli@swjtu.edu.cn (Tianrui Li) 1The research was done when the third, fourth and fifth authors were interns at Microsoft Research.\nPreprint submitted to Elsevier January 11, 2017\nar X\niv :1\n70 1.\n02 54\n3v 1\n[ cs\n.A I]\n1 0\nJa n\n20 17\ncrowds between regions. Knowing them is very beneficial for risk assessment and traffic management. Inflow/outflow can be measured by the number of pedestrians, the number of cars driven nearby roads, the number of people traveling on public transportation systems (e.g., metro, bus), or all of them together if data is available. Figure 1(b) presents an illustration. We can use mobile phone signals to measure the number of pedestrians, showing that the inflow and outflow of r2 are (3, 1), respectively. Similarly, using the GPS trajectories of vehicles, two types of flows are (0, 3), respectively. Therefore, the total inflow and outflow of r2 are (3, 4), respectively. Apparently, predicting crowd flows can be viewed as a kind of spatio-temporal prediction problem [2].\nDeep learning [4] has been used successfully in many applications, and is considered to be one of the most cuttingedge artificial intelligence (AI) techniques. Exploring these techniques for spatio-temporal data is of great importance to a series of various spatio-temporal applications, including urban planning, transportation, the environment, energy, social, economy, public safety and security [2]. Although two main types of deep neural networks (DNNs) have considered a sort of spatial or temporal property: 1) convolutional neural networks (CNNs) for capturing spatial structures; 2) recurrent neural networks (RNNs) for learning temporal dependencies. It is still very challenging to apply these existing AI techniques for such spatio-temporal prediction problem because of the following three complex factors:\n1. Spatial dependencies. Nearby The inflow of Region r2 (shown in Figure 1(a)) is affected by outflows of nearby regions (like r1).\nLikewise, the outflow of r2 would affect inflows of other regions (e.g., r3). The inflow of region r2 would affect its own outflow as well.\nDistant The flows can be affected by that of distant regions. For instance, people who lives far away from the office area always go to work by metro or highway, implying that the outflows of distant regions directly affect the inflow of the office area.\n2. Temporal dependencies. Closeness The flow of crowds in a region is affected by recent time intervals, both near and far. For instance, a\ntraffic congestion occurring at 8:00am will affect that of 9:00am. And the crowd flows of today\u2019s 16th time interval2 is more similar to that of yesterday\u2019s 16th time interval than that of today\u2019s 20th time interval.\nPeriod Traffic conditions during morning rush hours may be similar on consecutive weekdays, repeating every 24 hours. Trend Morning rush hours may gradually happen later as winter comes. When the temperature gradually drops and the sun rises later in the day, people get up later and later.\n3. External influence. Some external factors, such as weather conditions and events may change the flow of crowds tremendously in different regions of a city. For example, a thunderstorm affects the traffic speed on roads and further changes the flows of regions.\nTo tackle above mentioned challenges, we here explore DNNs for spatio-temporal data, and propose a deep spatiotemporal residual network (ST-ResNet) to collectively predict inflow and outflow of crowds in every region. Our contributions are five-fold:\n2Assume that half-hour is a time interval, 16th time interval means 7:30am - 8:00am.\n\u2022 ST-ResNet employs convolution-based residual networks to model both nearby and distant spatial dependencies between any two regions in a city, while ensuring the model\u2019s prediction accuracy is not comprised by the deep structure of the neural network. \u2022 We summarize the temporal properties of crowd flows into three categories, consisting of temporal closeness, period, and trend. ST-ResNet uses three different residual networks to model these properties, respectively. \u2022 ST-ResNet dynamically aggregates the output of the three aforementioned networks, assigning different weights to different branches and regions. The aggregation is further combined with external factors (e.g., weather). \u2022 We evaluate our approach using Beijing taxicabs\u2019 trajectories and meteorological data, and NYC bike trajectory data. The results demonstrate the advantages of our approach compared with 9 baselines. \u2022 We develop a real-time crowd flow monitoring & forecasting system using ST-ResNet. And our solution is based on the Cloud and GPU servers, providing powerful and flexible computational environments.\nThe rest of this paper is organized as follows. In Section 2, we formally describe the crowd flow prediction problem. Section 3 overviews the architecture of our proposed system. Section 4 describes the DNN-based prediction model used. We present the evaluation in Section 5 and summarized the related work in Section 6.\nThe differences between this paper and our earlier work [1] are four aspects. First, we have deployed a cloudbased system that continuously forecasts the flow of taxicabs in each and every region of Guiyang City in China, showcasing the capability of ST-ResNet in handling real-world problems. The implementation of the cloud-based system is also introduced in Section 3 of this paper. Second, we extend ST-ResNet from a one-step ahead prediction to a multi-step ahead prediction, enabling the prediction of crowd flows over a farther future time (Section 4.4). Third, we conduct more comprehensive experiments on crowd flow prediction, showcasing the effectiveness and robustness of ST-ResNet: i) comparing our method with more advanced baselines (e.g., three different variants of recurrent neural networks) (Section 5.2); ii) testing more network architectures for ST-ResNet (Section 5.3); iii) adding the experiments of multi-step ahead prediction (Section 5.4); iv) discussing the performance of our method changing over different cloud resources (Section 5.5). Fourth, we have explored more related works (in Section 6), clarifying the differences and connections to the-state-of-the-art. This helps better position our research in the community."}, {"heading": "2. Preliminary", "text": "We first briefly revisit the crowd flow prediction problem [3] and then introduce deep residual learning [5]."}, {"heading": "2.1. Formulation of Crowd Flow Prediction Problem", "text": "Definition 1 (Region [3]). There are many definitions of a location in terms of different granularities and semantic meanings. In this study, we partition a city into an I \u00d7 J grid map based on the longitude and latitude where a grid denotes a region, as shown in Figure 2(a).\nDefinition 2 (Inflow/outflow [3]). Let P be a collection of trajectories at the tth time interval. For a grid (i, j) that lies at the ith row and the jth column, the inflow and outflow of the crowds at the time interval t are defined respectively as\nxin,i, jt = \u2211 Tr\u2208P |{k > 1|gk\u22121 < (i, j) \u2227 gk \u2208 (i, j)}|\nxout,i, jt = \u2211 Tr\u2208P |{k \u2265 1|gk \u2208 (i, j) \u2227 gk+1 < (i, j)}|\nwhere Tr : g1 \u2192 g2 \u2192 \u00b7 \u00b7 \u00b7 \u2192 g|Tr| is a trajectory in P, and gk is the geospatial coordinate; gk \u2208 (i, j) means the point gk lies within grid (i, j), and vice versa; | \u00b7 | denotes the cardinality of a set.\nAt the tth time interval, inflow and outflow in all I \u00d7 J regions can be denoted as a tensor Xt \u2208 R2\u00d7I\u00d7J where (Xt)0,i, j = xin,i, jt , (Xt)1,i, j = x out,i, j t . The inflow matrix is shown in Figure 2(b).\nFormally, for a dynamical system over a spatial region represented by a I \u00d7 J grid map, there are 2 types of flows in each grid over time. Thus, the observation at any time can be represented by a tensor X \u2208 R2\u00d7I\u00d7J .\nProblem 1. Given the historical observations {Xt |t = 0, \u00b7 \u00b7 \u00b7 , n \u2212 1}, predict Xn."}, {"heading": "2.2. Deep Residual Learning", "text": "Deep residual learning [6] allows convolution neural networks to have a super deep structure of 100 layers, even over-1000 layers. And this method has shown state-of-the-art results on multiple challenging recognition tasks, including image classification, object detection, segmentation and localization [6].\nFormally, a residual unit with an identity mapping [5] is defined as:\nX(l+1) = X(l) + F (X(l)) (1)\nwhere X(l) and X(l+1) are the input and output of the lth residual unit, respectively; F is a residual function, e.g., a stack of two 3 \u00d7 3 convolution layers in [6]. The central idea of the residual learning is to learn the additive residual function F with respect to X(l) [5]."}, {"heading": "3. System Architecture", "text": "Figure 3 presents the framework of our system, which consists of three major parts: local GPU servers, and the Cloud, and users (e.g., website and QR Code), resulting in offline and online data flows, respectively. The local GPU servers store historical observations, such as taxi trajectories, meteorological data. The Cloud receive real-time data, including real-time traffic data (e.g. trajectories) within a time interval as well as meteorological data. The users access the inflow/outflow data, displaying them on websites or smart phone via scanning QR code."}, {"heading": "3.1. The Cloud", "text": "The cloud continuously receives GPS trajectories of taxicabs and crawls meteorological data, and then caches them into a redis. A virtual machine (VM) (or VMs) on the Cloud pulls these data from the redis, and then computes crowd flows according to GPS trajectories for each and every region of a city. Meanwhile, the VM extracts the features from meteorological data, event data and others. Afterwards, the VM stores the crowd flow data and extracted features into\nthe storage (a part of the VM). To save the resource on the cloud (more storages need more expensive payment), we only store the crowd flow data and features in past two days. Historical data can be moved to local servers periodically.\nWe use Azure platform as a service (PaaS). Table 1 details the Azure3 resources for our system as well as the price4. We employ a VM5, called A2 standard in Azure, that has 2 cores and 3.5 GB memory for forecasting the crowd flows in near future. The website and web service share a App Service, given the potential heavy accesses by many users. As the historical data is stored in local servers, a 6 GB Redis Cache is enough for caching the real-time trajectories in past half-hour, crowd flow data & extracted features in past two days, and inferred results."}, {"heading": "3.2. Local GPU Servers", "text": "Although all the jobs can be done on the cloud, GPU services on the Cloud is not supported in some areas (e.g., China). On the other hand, we need to pay for other cloud services, like storages and I/O bandwidths. Saving unnecessary cost is vital for a research prototype. In addition, migrating massive data from local servers up to the cloud is time-consuming given the limited network bandwidth. For instance, the historical trajectories can be hundreds of Gigabytes, even Terabytes, leading to a very long time for copying the data from local servers to the cloud.\nTherefore, we employ a hybrid framework that combines local GPU servers with the cloud. Local GPU servers mainly handle the offline training (learning), including three tasks:\n\u2022 Converting trajectories into inflow/outflow: we first use the massive historical trajectories and employ a calculation module to get crowd flow data, then store them in local.\n\u2022 Extracting features from external data: we fist collect external data (e.g. weather, holiday events) from different data sources and fit them into a feature extraction module to get continuous or discrete features, and then store them in local.\n\u2022 Training model: we use above generated crowd flows and external features to train a predictive model via our proposed ST-ResNet, and then upload the learned model to the cloud. Note that as the dynamic crowd flows and features are stored in the Storage (Azure), we sync up the online data to local servers before each training processing. In this way, we are agile to try new ideas (e.g. re-train the model) while greatly reducing expense for a research prototype."}, {"heading": "3.3. User Interface", "text": "Figure 4(a) presents the website of UrbanFlow [7], where each grid on the map stands for a region and the number associated with it denotes its inflow or outflow of crowds. The user can view inflow or outflow via the top-right button named \u201cInFlow/OutFlow\u201d. The smaller the number is, the crowd flow is sparser. The color of each grid is determined in accordance with its crowd flows, e.g., \u201cred\u201d means \u201cdense\u201d crowd flow and \u201cgreen\u201d means \u201csparse\u201d crowd flow. The top-right corner of the website shows the buttons which can switch between different types of flows. A user can select any grid (representing a region) on the website and click it to see the region\u2019s detailed flows, as shown in Figure 4(b) where blue, black, and green curves indicate flows of yesterday, past, and future times at today, respectively. The bottom of the website shows a few sequential timestamps. The heatmap at a certain timestamp will be shown in the website when a user clicks the associated timestamp. Intuitively, the user can watch the movie-style heatmaps (Figure 4(c)) by clicking \u201cplay button\u201d at the bottom-left of Figure 4(a). At present, we apply UrbanFlow to the area of Guiyang City, China 6.\n3https://azure.microsoft.com 4https://azure.microsoft.com/en-us/pricing 5To accelerate the computation, one also can choose a more powerful VM, such as D4 standard of Azure that has 8 cores and 28 GB memory\nwith $0.616 per hour. 6http://urbanflow.sigkdd.com.cn/"}, {"heading": "4. Deep Spatio-Temporal Residual Networks", "text": "Recurrent neural networks (RNNs), like long-short term memory (LSTM), is capable of learning long-range temporal dependencies. Using RNNs, however, to model temporal period and trend, it needs very long input sequences (e.g., length = 1344)7, which makes the whole training processing non-trivial (see Section 5.2 for empirical evaluation). According to the ST domain knowledge, we know that only a few previous keyframes influence the next keyframe. Therefore, we leverage temporal closeness, period, trend to select keyframes for modeling. Figure 5 presents the architecture of ST-ResNet, which is comprised of four major components modeling temporal closeness, period, trend, and external influence, respectively.\nAs illustrated in the top-right part of Figure 5, we first turn inflow and outflow throughout a city at each time interval into a 2-channel image-like matrix respectively, using the approach introduced in Definitions 1 and 2. We then divide the time axis into three fragments, denoting recent time, near history and distant history. The 2-channel flow matrices of intervals in each time fragment are then fed into the first three components separately to model the\n7Assume that half-an-hour is a time interval, 4-week sequence\u2019s length is equal to 48 \u00d7 7 \u00d7 4 = 1344.\naforementioned three temporal properties: closeness, period and trend, respectively. The first three components share the same network structure with a convolutional neural network followed by a Residual Unit sequence. Such structure captures the spatial dependency between nearby and distant regions. In the external component, we manually extract some features from external datasets, such as weather conditions and events, feeding them into a two-layer fullyconnected neural network. The outputs of the first three components are fused as XRes based on parameter matrices, which assign different weights to the results of different components in different regions. XRes is further integrated with the output of the external component XExt. Finally, the aggregation is mapped into [\u22121, 1] by a Tanh function, which yields a faster convergence than the standard logistic function in the process of back-propagation learning [8]."}, {"heading": "4.1. Structures of the First Three Components", "text": "The first three components (i.e. closeness, period, trend) share the same network structure, which is composed of two sub-components: convolution and residual unit, as shown in Figure 6.\nConvolution. A city usually has a very large size, containing many regions with different distances. Intuitively, the flow of crowds in nearby regions may affect each other, which can be effectively handled by the convolutional neural network (CNN) that has shown its powerful ability to hierarchically capture the spatial structural information [9]. In addition, subway systems and highways connect two locations with a far distance, leading to the dependency between distant regions. In order to capture the spatial dependency of any region, we need to design a CNN with many layers because one convolution only accounts for spatial near dependencies, limited by the size of their kernels. The same problem also has been found in the video sequence generating task where the input and output have the same resolution [10]. Several methods have been introduced to avoid the loss of resolution brought about by subsampling while preserving distant dependencies [11]. Being different from the classical CNN, we do not use subsampling, but only convolutions [12]. As shown in Figure 6(a), there are three multiple levels of feature maps that are connected with a few convolutions. We find that a node in the high-level feature map depends on nine nodes of the middle-level feature map, those of which depend on all nodes in the lower-level feature map (i.e. input). It means one convolution naturally captures spatial near dependencies, and a stack of convolutions can further capture distant even citywide dependencies.\nThe closeness component of Figure 5 adopts a few 2-channel flows matrices of intervals in the recent time to model temporal closeness dependency. Let the recent fragment be [Xt\u2212lc ,Xt\u2212(lc\u22121), \u00b7 \u00b7 \u00b7 ,Xt\u22121], which is also known as the closeness dependent sequence. We first concatenate them along with the first axis (i.e. time interval) as one tensor X(0)c \u2208 R2lc\u00d7I\u00d7J , which is followed by a convolution (i.e. Conv1 shown in Figure 5) as:\nX(1)c = f ( W (1)c \u2217 X(0)c + b(1)c ) (2)\nwhere \u2217 denotes the convolution in a convolutional operator; f is an activation function, e.g. the rectifier f (z) := max(0, z) [13]; W (1)c , b (1) c are the learnable parameters in the first layer.\nThe classical convolution has smaller output size than input size, namely, narrow convolution, as shown in Figure 7(a). Assume that the input size is 5 \u00d7 5 and the filter size is 3 \u00d7 3 with stride 1, the output size is 3 \u00d7 3 if using narrow convolution. In our task, the final output size should be same as the size of the input (i.e. I \u00d7 J). For this goal, we employ a special type of convolution, i.e. same convolution (see Figure 7(b)), which allows a filter to go outside the border of an input, padding each area outside the border with a zero. Residual Unit. It is a well-known fact that very deep convolutional networks compromise training effectiveness though the well-known activation function (e.g. ReLU) and regularization techniques are applied [14, 13, 15]. On the\nother hand, we still need a very deep network to capture very large citywide dependencies. For a typical crowd flow data, assume that the input size is 32 \u00d7 32, and the kernel size of convolution is fixed to 3 \u00d7 3, if we want to model citywide dependencies (i.e., each node in high-level layer depends on all nodes of the input), it needs more than 15 consecutive convolutional layers. To address this issue, we employ residual learning [6] in our model, which have been demonstrated to be very effective for training super deep neural networks of over-1000 layers.\nIn our ST-ResNet (see Figure 5), we stack L residual units upon Conv1 as follows,\nX(l+1)c = X (l) c + F (X(l)c ; \u03b8(l)c ), l = 1, \u00b7 \u00b7 \u00b7 , L (3)\nwhere F is the residual function (i.e. two combinations of \u201cReLU + Convolution\u201d, see Figure 6(b)), and \u03b8(l) includes all learnable parameters in the lth residual unit. We also attempt Batch Normalization (BN) [14] that is added before ReLU. On top of the Lth residual unit, we append a convolutional layer (i.e. Conv2 shown in Figure 5). With 2 convolutions and L residual units, the output of the closeness component of Figure 5 is X(L+2)c .\nLikewise, using the above operations, we can construct the period and trend components of Figure 5. Assume that there are lp time intervals from the period fragment and the period is p. Therefore, the period dependent sequence is [Xt\u2212lp\u00b7p,Xt\u2212(lp\u22121)\u00b7p, \u00b7 \u00b7 \u00b7 ,Xt\u2212p]. With the convolutional operation and L residual units like in Eqs. 2 and 3, the output of the period component is X(L+2)p . Meanwhile, the output of the trend component is X (L+2) q with the input [Xt\u2212lq\u00b7q,Xt\u2212(lq\u22121)\u00b7q, \u00b7 \u00b7 \u00b7 ,Xt\u2212q] where lq is the length of the trend dependent sequence and q is the trend span. Note that p and q are actually two different types of periods. In the detailed implementation, p is equal to one-day that describes daily periodicity, and q is equal to one-week that reveals the weekly trend."}, {"heading": "4.2. The Structure of the External Component", "text": "Traffic flows can be affected by many complex external factors, such as weather and event. Figure 8(a) shows that crowd flows during holidays (Chinese Spring Festival) can be significantly different from the flows during normal days. Figure 8(b) shows that heavy rain sharply reduces the crowd flows at Office Area compared to the same day of the latter week. Let Et be the feature vector that represents these external factors at predicted time interval t. In our implementation, we mainly consider weather, holiday event, and metadata (i.e. DayOfWeek, Weekday/Weekend). The details are introduced in Table 2. To predict flows at time interval t, the holiday event and metadata can be directly obtained. However, the weather at future time interval t is unknown. Instead, one can use the forecasting weather at time interval t or the approximate weather at time interval t \u2212 1. Formally, we stack two fully-connected layers upon Et, the first layer can be viewed as an embedding layer for each sub-factor followed by an activation. The second layer is used to map low to high dimensions that have the same shape as Xt. The output of the external component of Figure 5 is denoted as XExt with the parameters \u03b8Ext."}, {"heading": "4.3. Fusion", "text": "In this section, we discuss how to fuse four components of Figure 5. We first fuse the first three components with a parametric-matrix-based fusion method, which is then further combined with the external component.\nFigures 9(a) and (d) show the ratio curves using Beijing trajectory data presented in Table 2 where x-axis is time gap between two time intervals and y-axis is the average ratio value between arbitrary two inflows that have the same time gap. The curves from two different regions all show an empirical temporal correlation in time series, namely, inflows of recent time intervals are more relevant than ones of distant time intervals, which implies temporal closeness. The two curves have different shapes, which demonstrates that different regions may have different characteristics of\ncloseness. Figures 9(b) and (e) depict inflows at all time intervals of 7 days. We can see the obvious daily periodicity in both regions. In Office Area, the peak values on weekdays are much higher than ones on weekends. Residential Area has similar peak values for both weekdays and weekends. Figures 9(c) and (f) describe inflows at a certain time interval (9:00pm-9:30pm) of Tuesday from March 2015 and June 2015. As time goes by, the inflow progressively decreases in Office Area, and increases in Residential Area. It shows the different trends in different regions. In summary, inflows of two regions are all affected by closeness, period, and trend, but the degrees of influence may be very different. We also find the same properties in other regions as well as their outflows.\nAbove all, the different regions are all affected by closeness, period and trend, but the degrees of influence may be different. Inspired by these observations, we propose a parametric-matrix-based fusion method. Parametric-matrix-based fusion. We fuse the first three components (i.e. closeness, period, trend) of Figure 5 as follows XRes = Wc \u25e6 X(L+2)c + Wp \u25e6 X(L+2)p + Wq \u25e6 X(L+2)q (4) where \u25e6 is Hadamard product (i.e. element-wise multiplication), Wc, Wp and Wq are the learnable parameters that adjust the degrees affected by closeness, period and trend, respectively. Fusing the external component. We here directly merge the output of the first three components with that of the external component, as shown in Figure 5. Finally, the predicted value at the tth time interval, denoted by X\u0302t, is defined as\nX\u0302t = tanh(XRes + XExt) (5)\nwhere tanh is a hyperbolic tangent that ensures the output values are between -1 and 1.\nOur ST-ResNet can be trained to predict Xt from three sequences of flow matrices and external factor features by minimizing mean squared error between the predicted flow matrix and the true flow matrix:\nL(\u03b8) = \u2016Xt \u2212 X\u0302t\u201622 (6) where \u03b8 are all learnable parameters in the ST-ResNet."}, {"heading": "4.4. Algorithms and Optimization", "text": "Algorithm 1 outlines the ST-ResNet training process. We first construct the training instances from the original sequence data (lines 1-6). Then, ST-ResNet is trained via backpropagation and Adam [16] (lines 7-11).\nAlgorithm 1: Training of ST-ResNet Input: Historical observations: {X0, \u00b7 \u00b7 \u00b7 ,Xn\u22121};\nexternal features: {E0, \u00b7 \u00b7 \u00b7 , En\u22121}; lengths of closeness, period, trend sequences: lc, lp, lq; peroid: p; trend span: q.\nOutput: ST-ResNet modelM. // construct training instances\n1 D \u2190\u2212 \u2205 2 for all available time interval t(1 \u2264 t \u2264 n \u2212 1) do 3 Sc = [Xt\u2212lc ,Xt\u2212(lc\u22121), \u00b7 \u00b7 \u00b7 ,Xt\u22121] 4 Sp = [Xt\u2212lp \u00b7p,Xt\u2212(lp\u22121)\u00b7p, \u00b7 \u00b7 \u00b7 ,Xt\u2212p] 5 Sq = [Xt\u2212lq \u00b7q,Xt\u2212(lq\u22121)\u00b7q, \u00b7 \u00b7 \u00b7 ,Xt\u2212q] // Xt is the target at time t 6 put an training instance ({Sc,Sp,Sq, Et},Xt) intoD\n// train the model 7 initialize the parameters \u03b8 8 repeat 9 randomly select a batch of instancesDb fromD\n10 find \u03b8 by minimizing the objective (6) withDb 11 until stopping criteria is met 12 output the learned ST-ResNet modelM\nAfter training, the learned ST-ResNet modelM is obtained for the single- or multi-step look-ahead prediction. the process of which is summarized in Algorithm 2. Some types of external features (i.e., weather) used here are different from that in Algorithm 1. In the training process, we use the true weather data, which is replaced by the forecasted weather data in Algorithm 2.\nAlgorithm 2: Multi-step Ahead Prediction Using ST-ResNet Input: Learned ST-ResNet model: M;\nnumber of look-ahead steps: k; historical observations: {X0, \u00b7 \u00b7 \u00b7 ,Xn\u22121}; external features: {En, \u00b7 \u00b7 \u00b7 , En+k\u22121}; lengths of closeness, period, trend sequences: lc, lp, lq; peroid: p; trend span: q.\n1 X \u2190\u2212 {X0, \u00b7 \u00b7 \u00b7 ,Xn\u22121} // (i.e., Xt = Xt ,\u2200t) 2 for t = n to n + k \u2212 1 do 3 Sc = [Xt\u2212lc ,Xt\u2212(lc\u22121), \u00b7 \u00b7 \u00b7 ,Xt\u22121] 4 Sp = [Xt\u2212lp \u00b7p,Xt\u2212(lp\u22121)\u00b7p, \u00b7 \u00b7 \u00b7 ,Xt\u2212p] 5 Sq = [Xt\u2212lq \u00b7q,Xt\u2212(lq\u22121)\u00b7q, \u00b7 \u00b7 \u00b7 ,Xt\u2212q] 6 X\u0302t \u2190\u2212M(Sc,Sp,Sq, Et) 7 put X\u0302t into X, i.e., Xt = X\u0302t 8 output {X\u0302n, \u00b7 \u00b7 \u00b7 , X\u0302n+k\u22121}"}, {"heading": "5. Experiments", "text": "In this section, we evaluate our ST-ResNet on two types of crowd flows in Beijing and NYC against 9 baselines."}, {"heading": "5.1. Settings", "text": "Datasets. We use two different sets of data as shown in Table 2. Each dataset contains two sub-datasets: trajectories and weather, as detailed as follows.\n\u2022 TaxiBJ: Trajectoriy data is the taxicab GPS data and meteorology data in Beijing from four time intervals: 1st Jul. 2013 - 30th Otc. 2013, 1st Mar. 2014 - 30th Jun. 2014, 1st Mar. 2015 - 30th Jun. 2015, 1st Nov. 2015 - 10th Apr. 2016. Using Definition 2, we obtain two types of crowd flows. We choose data from the last four weeks as the testing data, and all data before that as training data.\n\u2022 BikeNYC: Trajectory data is taken from the NYC Bike system in 2014, from Apr. 1st to Sept. 30th. Trip data includes: trip duration, starting and ending station IDs, and start and end times. Among the data, the last 10 days are chosen as testing data, and the others as training data.\nBaselines. We compare our ST-ResNet with the following 9 baselines:\n\u2022 HA: We predict inflow and outflow of crowds by the average value of historical inflow and outflow in the corresponding periods, e.g., 9:00am-9:30am on Tuesday, its corresponding periods are all historical time intervals from 9:00am to 9:30am on all historical Tuesdays.\n\u2022 ARIMA: Auto-Regressive Integrated Moving Average (ARIMA) is a well-known model for understanding and predicting future values in a time series.\n\u2022 SARIMA: Seasonal ARIMA. Beyond ARIMA, SARIMA also considers the seasonal terms, capable of both learning closeness and periodic dependencies.\n\u2022 VAR: Vector Auto-Regressive (VAR) is a more advanced spatio-temporal model, which can capture the pairwise relationships among all flows, and has heavy computational costs due to the large number of parameters.\n\u2022 ST-ANN: It first extracts spatial (nearby 8 regions\u2019 values) and temporal (8 previous time intervals) features, then fed into an artificial neural network.\n\u2022 DeepST [3]: a deep neural network (DNN)-based prediction model for spatio-temporal data, which shows state-of-the-art results on the crowd flow prediction.\n\u2022 RNN [17]: recurrent neural network (RNN), a deep learning model, which can capture temporal dependencies. Formally, RNN can train on sequences with the arbitrary length. In our experiment, we fix the length of input sequence as one of {3, 6, 12, 24, 48, 336}. Taking 48 as example, the dependent input sequence is just a one-day data if the interval time is equal to 30 minutes. Therefore, we have 6 RNN variants, including RNN-3, RNN-6, RNN-12, RNN-24, RNN-48, and RNN-336.\n\u2022 LSTM [18]: Long-short-term-memory network (LSTM), a special kind of RNN, capable of learning long-term temporal dependencies. Being same as the setting of RNN, we conduct the experiments on 6 LSTM variants, i.e. LSTM-3, LSTM-6, LSTM-12, LSTM-24, LSTM-48, and LSTM-336.\n\u2022 GRU [19]: Gated-recurrent-unit network, a new kind of RNN, can be used to capture long-term temporal dependencies. Being same as the setting of RNN, the following GRU variants are selected as the baselines: GRU-3, GRU-6, GRU-12, GRU-24, GRU-48, and GRU-336.\nPreprocessing. In the output of the ST-ResNet, we use tanh as our final activation (see Eq. 5), whose range is between -1 and 1. Here, we use the Min-Max normalization method to scale the data into the range [\u22121, 1]. In the evaluation, we re-scale the predicted value back to the normal values, compared with the groundtruth. For external factors, we use one-hot coding to transform metadata (i.e., DayOfWeek, Weekend/Weekday), holidays and weather conditions into binary vectors, and use Min-Max normalization to scale the Temperature and Wind speed into the range [0, 1]. Hyperparameters. The learnable parameters are initialized using a uniform distribution with the default parameter in Keras [20]. The convolutions of Conv1 and all residual units use 64 filters of size 3\u00d7 3, and Conv2 uses a convolution with 2 filters of size 3\u00d73. For example, a 4-residual-unit of ST-ResNet consists of Conv1, 4 residual unit, and Conv2. See Table 3 for the details. The Adam [16] is used for optimization, and the batch size is 32. The number of residual units is set as 12 for the dataset TaxiBJ, and 4 for BikeNYC. There are 5 extra hyperparamers in our ST-ResNet, of which p and q are empirically fixed to one-day and one-week, respectively. For lengths of the three dependent sequences, we set them as: lc \u2208 {1, 2, 3, 4, 5}, lp \u2208 {1, 2, 3, 4}, lq \u2208 {1, 2, 3, 4}. We select 90% of the training data for training each model, and the remaining 10% is chosen as the validation set, which is used to early-stop our training algorithm for each model based on the best validation score. Afterwards, we continue to train the model on the full training data for a fixed number of epochs (e.g., 10, 100 epochs).\nEvaluation Metric: We measure our method by Root Mean Square Error (RMSE)8 as\nRMS E = \u221a 1 z \u2211 i (xi \u2212 x\u0302i)2 (7)\nwhere x and x\u0302 are the available ground truth and the corresponding predicted value, respectively; z is the number of all available ground truths.\nExperiments are mainly run on a GPU server, whose detailed information is shown in Table 4. The python libraries, including Theano [21] and Keras [20], are used to build our models."}, {"heading": "5.2. Evaluation of Single-step Ahead Prediction", "text": "In this section, we evaluate the single-step ahead prediction, namely, predicting the crowd flows at time t using the historical observations. Table 5 shows the RMSE of all methods on both TaxiBJ and BikeNYC. Our ST-ResNet consistently and significantly outperforms all baselines. Specifically, the results on TaxiBJ demonstrates that STResNet (with 12 residual units) is relatively 26% better than ARIMA, 37% better than SARIMA, 26% better than VAR, 14% better than ST-ANN, 7% better than DeepST, 28% to 64% better than RNN, 18.1% to 45.7% better than LSTM, 17.4% to 46.1% better than GRU. ST-ResNet-noExt is a degraded version of ST-ResNet that does not consider the external factors (e.g. meteorology data). We can see that ST-ResNet-noExt is slightly worse than ST-ResNet, pointing out external factors are always beneficial. DeepST exploits spatio-temporal CNNs and is clearly better than other baselines. While both ST-ANN and VAR use spatial/temporal information and relationships among flows, they are worse than DeepST because they only consider the near spatial information and recent temporal information. Among the temporal models, GRU and LSTM have similar RMSE, and outperform RNN in average because GRU and LSTM both can capture long-term temporal dependencies. However, GRU-336 and LSTM-336 have very bad performance as well as RNN-336, which demonstrates RNN-based models cannot capture very long-term dependencies (i.e. period and trend). Intuitively, we rank all of these models, as shown in Figure 10(a).\nBeing different from TaxiBJ, BikeNYC consists of two different types of crowd flows, including new-flow and end-flow [22]. We here adopt a total of 4-residual-unit ST-ResNet, and consider the metadata as external features like DeepST [3]. ST-ResNet has relatively from 9% up to 71% lower RMSE than these baselines, demonstrating that our proposed model has good generalization performance on other flow prediction tasks. Figure 10(b) depicts the ranking of these models."}, {"heading": "5.3. Results of Different ST-ResNet Variants", "text": "We here present the results of different ST-ResNet variants, including changing network configurations, network depth, and different components used."}, {"heading": "5.3.1. Impage of different network configurations", "text": "Figure 11 shows the results of different network configurations. The same hyper-parameters: lc = 3, lp = 1, lq = 1, number of residual unit = 12.\n8The smaller the better.\n\u2022 Effect of batch normalization (BN): We attempt to adopt BN into each residual unit, finding that the RMSE slightly improves in single-step ahead prediction, as shown in Figure 11(a).\n\u2022 Effect of parametric-matrix-based fusion: We use a parametric-matrix-based fusion mechanism (see Eq. 4) to fuse temporal closeness, period and trend components. Simply, one also can employ a straightforward method for fusing, i.e., X(L+2)c + X (L+2) p + X (L+2) q . Figure 11(b) shows that ours is significantly better than the\nstraightforward method, demonstrating the effectiveness of our proposed parametric-matrix-based fusion.\n\u2022 Internal structure of residual unit: The proposed residual unit includes 2 convolutions. We here test the performance different setting in the residual unit. From Figure 11(c), we observe that the model using 2 convolutions are better than using 1 convolution."}, {"heading": "5.3.2. Impact of network depth", "text": "Figure 12 presents the impact of network depth. As the network goes deeper (i.e. the number of residual units increases), the RMSE of the model first decreases and then increases, demonstrating that the deeper network often has a better result because it can capture not only near spatial dependence but also distant one. However, when the network is very deep (e.g. number of residual unit \u2265 14), training becomes much difficult."}, {"heading": "5.3.3. Impact of filter size and number", "text": "The receptive field of a convolution is determined by the size of the filter used. We here change the size of the filter from 2 \u00d7 2 to 5 \u00d7 5. Figure 13(a) shows that the larger filter size has the lower RMSE, demonstrating larger receptive field has better ability to model spatial dependency. From Figure 13(b), we can observe that more filters better result."}, {"heading": "5.3.4. Impact of temporal closeness, period, trend", "text": "We here verify the impact of temporal closeness,period, trend components on TaxiBJ, as shown in Figure 14. Figure 14(a) shows the effect of temporal closeness where we fix lp = 1 and lq = 1 but change lc. For example, lc = 0 means that we does not employ the closeness component, resulting in a very bad RMSE: 35.04. We can observe that RMSE first decreases and then increases as the length of closeness increases, indicating that lc = 4 has the best performance. Figure 14(b) depicts the effect of period where we set lc as 3 and lq as 1 but change lp. We can see that lp = 1 has the best RMSE. The model without the period component (i.e. lp = 0) is worse than the model with lp = 2, 3, but better than the lp = 4 model, meaning that short-range periods are always beneficial, and long-range periods may be hard to model or not helpful. Figure 14(c) presents the effect of trend where lc and lp are fixed to 3 and 2, respectively. We change lq from 0 to 3. The curve points that the lq = 1 model outperforms others. Similar to period, it is better to employ the trend component, but long-range trend may be not easy to capture or useless.\nTo better understand the temporal closeness, period and trend, we here visualize the parameters of the parametricmatrix-based fusion layer, which is capable of learning different temporal influence degrees for each region of a city, as shown in Figure 15. Each element in each sub-figure denotes a learned parameter of a certain region that reflects the influence degree by closeness, period, or trend. We here set a threshold (e.g., 0.3) to see the temporal properties of the whole city. Given a fixed threshold 0.3, we observe that the ratio (the number of regions whose parametric value is less than 0.3) of the closeness is 0, demonstrating all of regions in the city have a more or less closeness. The ratio of the period shows that there are 9% regions only have very weak periodic patterns. Likewise, Figure 15(c) depicts that 7% regions do not have temporal trend. From Figure 15(a), we find that the closeness of some main-road-related regions (red dashed frame) is not obvious. One reason is that the crowd flows in these regions can be predicted using period or/and trend, adding slight closeness."}, {"heading": "5.4. Evaluation of Multi-step Ahead Prediction", "text": "According to Algorithm 2, we can use historical observations and the recent predicted ones to forecast the crowd flows in subsequent time intervals which is referreed to multi-step ahead prediction. Figure 16 shows multi-step prediction results of 13 different models on TaxiBJ. Among these models, ST-ResNet[BN], ST-ResNet[CP], and STResNet[C] are three variants of ST-ResNet (12 residual units), of which ST-ResNet[BN] employs BN in all residual units, ST-ResNet[CP] does not employ the trend component but three others, ST-ResNet[C] only uses the closeness and external components. LSTM-3, LSTM-6 and LSTM-12 are three variants of LSTM (see details in Section 5.1). In real-world applications, forecasting the crowd flows in the near future (e.g. future 2 hours) is much more important. From the results of 4-step ahead prediction9, we find our ST-ResNet performs best though ST-ResNet[BN] is better in the single-step ahead prediction, showing in Figure 11(a). From the curves of ST-ResNet, ST-ResNet[C] and STResNet[CP], we observe that ST-ResNet is significantly best, demonstrating the period and trend are very important in the multi-step ahead prediction. We observe that LSTM-12 is better than ST-ResNet when the number of the lookahead steps is greater than 8. The reason may be that LSTM-12 reads the past 12 observations to predict, however, our ST-ResNet only takes past recent 3 observations as the input of the closeness component.\n94-step ahead prediction on TaxiBJ means predicting the crowd flows in next 2 hours"}, {"heading": "5.5. Efficiency and Resources", "text": "We test the efficiency on two different virtual machines in the cloud (i.e. Microsoft Azure). As introducing in Section 3.1, there are four main steps to predict crowd flows for each region of a city: (1) pulling trajectories from redis; (2) converting trajectories into crowd flow data; (3) predicting the crowd flows in near future; (4) pushing results into redis. We also report the time consumed by above four steps. Totally, A2 standard VM finishes the whole predicting process in 18.56 seconds. It takes 10.93 seconds on D4 standard VM, which is more powerful but expensive. One can choose A2 standard because it only costs 20% money but achieves more than 50% performance."}, {"heading": "6. Related Work", "text": ""}, {"heading": "6.1. Crowd Flow Prediction", "text": "There are some previously published works on predicting an individual\u2019s movement based on their location history [23, 24]. They mainly forecast millions, even billions, of individuals\u2019 mobility traces rather than the aggregated crowd flows in a region. Such a task may require huge computational resources, and it is not always necessary for the application scenario of public safety. Some other researchers aim to predict travel speed and traffic volume on the road [25, 26, 27]. Most of them are predicting single or multiple road segments, rather than citywide ones [27, 28]. Recently, researchers have started to focus on city-scale traffic flow prediction [22, 29]. Both work are different from ours where the proposed methods naturally focus on the individual region not the city, and they do not partition the city using a grid-based method which needs a more complex method to find irregular regions first."}, {"heading": "6.2. Classical Models for Time Series Prediction", "text": "Predicting the flows of crowds can be viewed as a type of time series prediction problem. There are several conventional linear models for such problem. The historical average model is portable, which simply uses the average value of historical time series to predict future value of time series. However, the model unable to respond to dynamic changes, such as incidents [30]. The Auto-Regressive Integrated Moving Average (ARIMA) model assumes that the future value of time series is a linear combination of previous values and residuals, furthermore, in order to obtain stationarity, the nonstationary time series should be differenced before analysis [31]. ARIMA is not suite for time series with missing data, since they relying on uninterrupted time series, and data filling technique might be problematic as the complexity of the situation increase [32]. The additional seasonal difference is often applied to seasonal time series to obtain stationarity before ARIMA being used, which is called SARIMA. The disadvantage of SARIMA is time consuming [32]. The Vector Autoregressive (VAR) models capture the linear inter dependencies among interrelated time series [33]. However, the correlation between predicted values and residuals is neglected.\nBeing different from the above linear models, the artificial neural network (ANN) model is a nonlinear model and commonly used in time series prediction [34, 35, 36]. ANNs have excellent nonlinear modeling ability, but not enough for linear modeling ability [37]."}, {"heading": "6.3. Deep Neural Networks", "text": "Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43]. For example, convolutional neural networks won the ImageNet [44] competition since 2012, and help AlphaGo [45] beat Go human champion10. Recurrent neural networks (RNNs) have been used successfully for sequence learning tasks [46]. The incorporation of long short-term memory (LSTM) [18] or gated recurrent unit (GRU) [19] enables RNNs to learn long-term temporal dependency. However, both kinds of neural networks can only capture spatial or temporal dependencies. Recently, researchers combined above networks and proposed a convolutional LSTM network [47] that learns spatial and temporal dependencies simultaneously. Such a network cannot model very long-range temporal dependencies (e.g., period and trend), and training becomes more difficult as depth increases.\nIn our previous work [3], a general prediction model based on DNNs was proposed for spatio-temporal data. In this paper, to model a specific spatio-temporal prediction (i.e. citywide crowd flows) effectively, we mainly propose employing the residual learning and a parametric-matrix-based fusion mechanism. A survey on data fusion methodologies can be found at [48]."}, {"heading": "6.4. Urban Computing", "text": "Urban computing [2], has emerged as a new research area, which aims to tackle urban challenges (e.g., traffic congestion, energy consumption, and pollution) by using the data that has been generated in cities (e.g., geographical data, traffic flow, and human mobility). A branch of research also partitions a city into grids, and then studies the traffic flow in each region of the city, such as predicting urban air quality [49, 50], detecting anomalous traffic patterns [51], inferring missing air quality [52], forecasting of spatio-temporal data [3]. Besides, some researchers started to research on deep learning methods for urban computing applications. For example, Song et al. proposed a recurrentneural-network-based model to predict the person\u2019s future movement [53]. Chen et al. proposes a deep learning model to understand how human mobility will affect traffic accident risk [54]. Both work are very different from ours in terms of approach and problem setting. To the best of our knowledge, in the field of urban computing, end-to-end deep learning for forecasting citywide crowd flows has never been done."}, {"heading": "7. Conclusion and Future Work", "text": "We propose a novel deep-learning-based model for forecasting the flow of crowds in each and every region of a city, based on historical spatio-temporal data, weather and events. Our ST-ResNet is capable of learning all spatial (nearby and distant) and temporal (closeness, period, and trend) dependencies as well as external factors (e.g. weather, event). We evaluate our model on two types of crowd flows in Beijing and NYC, achieving performances which are significantly beyond 9 baseline methods, confirming that our model is better and more applicable to the crowd flow prediction. The code and datasets have been released at: https://www.microsoft.com/en-us/research/publication/deepspatio-temporal-residual-networks-for-citywide-crowd-flows-prediction. We develop a Cloud-based system, called UrbanFlow, that can monitor the real-time crowd flows and provide the forecasting crowd flows in near future using our ST-ResNet.\nIn the future, we will consider other types of flows (e.g., metro card swiping data, taxi/truck/bus trajectory data, and phone signals data), and use all of them to generate more types of flow predictions, and collectively predict all of these flows with an appropriate fusion mechanism."}, {"heading": "8. Acknowledgments", "text": "This work was supported by the National Natural Science Foundation of China (Grant No. 61672399 and No. U1401258), and the China National Basic Research Program (973 Program, No. 2015CB352400).\n10https://en.wikipedia.org/wiki/AlphaGo_versus_Lee_Sedol"}], "references": [{"title": "Deep spatio-temporal residual networks for citywide crowd flows prediction", "author": ["J. Zhang", "Y. Zheng", "D. Qi"], "venue": "in: Thirty-First AAAI Conference on Artificial Intelligence", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2017}, {"title": "Urban computing: concepts", "author": ["Y. Zheng", "L. Capra", "O. Wolfson", "H. Yang"], "venue": "methodologies, and applications, ACM Transactions on Intelligent Systems and Technology (TIST) 5 (3) ", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "DNN-based prediction model for spatio-temporal data", "author": ["J. Zhang", "Y. Zheng", "D. Qi", "R. Li", "X. Yi"], "venue": "in: Proceedings of the 24th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems, GIS 2016, Burlingame, California, USA, October 31 - November 3, 2016", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Deep learning", "author": ["Y. LeCun", "Y. Bengio", "G. Hinton"], "venue": "Nature 521 (7553) ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "J", "author": ["K. He", "X. Zhang", "S. Ren"], "venue": "Sun, Identity mappings in deep residual networks ", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2016}, {"title": "J", "author": ["K. He", "X. Zhang", "S. Ren"], "venue": "Sun, Deep residual learning for image recognition ", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}, {"title": "Efficient backprop", "author": ["Y.A. LeCun", "L. Bottou", "G.B. Orr", "K.-R. M\u00fcller"], "venue": "in: Neural networks: Tricks of the trade, Springer", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE 86 (11) ", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1998}, {"title": "Fully convolutional networks for semantic segmentation", "author": ["J. Long", "E. Shelhamer", "T. Darrell"], "venue": "in: Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2015}, {"title": "Supervised learning of image restoration with convolutional networks", "author": ["V. Jain", "J.F. Murray", "F. Roth", "S. Turaga", "V. Zhigulin", "K.L. Briggman", "M.N. Helmstaedter", "W. Denk", "H.S. Seung"], "venue": "in: 2007 IEEE 11th International Conference on Computer Vision, IEEE", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2007}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "in: Advances in neural information processing systems", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "in: Proceedings of the 32nd International Conference on Machine Learning, ICML 2015, Lille, France, 6-11 July 2015", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2015}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["V. Nair", "G.E. Hinton"], "venue": "in: Proceedings of the 27th International Conference on Machine Learning (ICML-10)", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Deep learning", "author": ["Y. Bengio", "I.J. Goodfellow", "A. Courville"], "venue": "book in preparation for mit press ", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2015}, {"title": "Long short-term memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural computation 9 (8) ", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1997}, {"title": "B", "author": ["K. Cho"], "venue": "van Merrienboer, \u00c7. G\u00fcl\u00e7ehre, D. Bahdanau, F. Bougares, H. Schwenk, Y. Bengio, Learning phrase representations using RNN encoder-decoder for statistical machine translation ", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2014}, {"title": "Keras", "author": ["F. Chollet"], "venue": "https://github.com/fchollet/keras ", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2015}, {"title": "Forecasting citywide crowd flows based on big data", "author": ["M.X. Hoang", "Y. Zheng", "A.K. Singh"], "venue": "ACM SIGSPATIAL 2016", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2016}, {"title": "Citymomentum: an online approach for crowd behavior prediction at a citywide level", "author": ["Z. Fan", "X. Song", "R. Shibasaki", "R. Adachi"], "venue": "in: Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing, ACM", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Prediction of human emergency behavior and their mobility following large-scale disaster", "author": ["X. Song", "Q. Zhang", "Y. Sekimoto", "R. Shibasaki"], "venue": "in: Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, ACM", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2014}, {"title": "Traffic flow prediction for road transportation networks with limited traffic data", "author": ["A. Abadi", "T. Rajabioun", "P.A. Ioannou"], "venue": "IEEE Transactions on Intelligent Transportation Systems 16 (2) ", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2015}, {"title": "Predicting traffic volumes and estimating the effects of shocks in massive transportation systems", "author": ["R. Silva", "S.M. Kang", "E.M. Airoldi"], "venue": "Proceedings of the National Academy of Sciences 112 (18) ", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2015}, {"title": "Accurate and interpretable bayesian mars for traffic flow prediction", "author": ["Y. Xu", "Q.-J. Kong", "R. Klette", "Y. Liu"], "venue": "IEEE Transactions on Intelligent Transportation Systems 15 (6) ", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2014}, {"title": "Road traffic congestion monitoring in social media with hinge-loss markov random fields", "author": ["P.-T. Chen", "F. Chen", "Z. Qian"], "venue": "in: 2014 IEEE International Conference on Data Mining, IEEE", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2014}, {"title": "Traffic prediction in a bike-sharing system", "author": ["Y. Li", "Y. Zheng", "H. Zhang", "L. Chen"], "venue": "in: Proceedings of the 23rd SIGSPATIAL International Conference on Advances in Geographic Information Systems, ACM", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2015}, {"title": "Traffic flow forecasting: comparison of modeling approaches", "author": ["B.L. Smith", "M.J. Demetsky"], "venue": "Journal of transportation engineering 123 (4) ", "citeRegEx": "30", "shortCiteRegEx": null, "year": 1997}, {"title": "Time series analysis: forecasting and control", "author": ["G.E. Box", "G.M. Jenkins", "G.C. Reinsel", "G.M. Ljung"], "venue": "John Wiley & Sons", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2015}, {"title": "Comparison of parametric and nonparametric models for traffic flow forecasting", "author": ["B.L. Smith", "B.M. Williams", "R.K. Oswald"], "venue": "Transportation Research Part C: Emerging Technologies 10 (4) ", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2002}, {"title": "Predictions of freeway traffic speeds and volumes using vector autoregressive models", "author": ["S.R. Chandra", "H. Al-Deek"], "venue": "Journal of Intelligent Transportation Systems 13 (2) ", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2009}, {"title": "Neural-network models for classification and forecasting of freeway traffic flow stability", "author": ["L. Florio", "L. Mussone"], "venue": "Control Engineering Practice 4 (2) ", "citeRegEx": "34", "shortCiteRegEx": null, "year": 1996}, {"title": "Short-term inter-urban traffic forecasts using neural networks", "author": ["M.S. Dougherty", "M.R. Cobbett"], "venue": "International journal of forecasting 13 (1) ", "citeRegEx": "35", "shortCiteRegEx": null, "year": 1997}, {"title": "Time series forecasting using a hybrid arima and neural network model", "author": ["G.P. Zhang"], "venue": "Neurocomputing 50 ", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2003}, {"title": "Neural network forecasting for seasonal and trend time series", "author": ["G.P. Zhang", "M. Qi"], "venue": "European journal of operational research 160 (2) ", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2005}, {"title": "Deep learning in neural networks: An overview", "author": ["J. Schmidhuber"], "venue": "Neural Networks 61 ", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2015}, {"title": "Faster r-cnn: Towards real-time object detection with region proposal networks", "author": ["S. Ren", "K. He", "R. Girshick", "J. Sun"], "venue": "in: Advances in neural information processing systems", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2015}, {"title": "Speech recognition with deep recurrent neural networks, in: 2013", "author": ["A. Graves", "A.-r. Mohamed", "G. Hinton"], "venue": "IEEE international conference on acoustics, speech and signal processing,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2013}, {"title": "Automatic Speech Recognition", "author": ["D. Yu", "L. Deng"], "venue": "Springer", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2012}, {"title": "T", "author": ["Q.V. Le"], "venue": "Mikolov, Distributed representations of sentences and documents., in: ICML, Vol. 14", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2014}, {"title": "ImageNet Large Scale Visual Recognition Challenge", "author": ["O. Russakovsky", "J. Deng", "H. Su", "J. Krause", "S. Satheesh", "S. Ma", "Z. Huang", "A. Karpathy", "A. Khosla", "M. Bernstein", "A.C. Berg", "L. Fei-Fei"], "venue": "International Journal of Computer Vision (IJCV) 115 (3) ", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2015}, {"title": "G", "author": ["D. Silver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre"], "venue": "Van Den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam, M. Lanctot, et al., Mastering the game of go with deep neural networks and tree search, Nature 529 (7587) ", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2016}, {"title": "Sequence to sequence learning with neural networks", "author": ["I. Sutskever", "O. Vinyals", "Q.V. Le"], "venue": "in: Advances in neural information processing systems", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2014}, {"title": "H", "author": ["S. Xingjian", "Z. Chen"], "venue": "Wang, D.-Y. Yeung, W.-k. Wong, W.-c. WOO, Convolutional lstm network: A machine learning approach for precipitation nowcasting, in: Advances in Neural Information Processing Systems", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2015}, {"title": "Methodologies for cross-domain data fusion: An overview", "author": ["Y. Zheng"], "venue": "IEEE transactions on big data 1 (1) ", "citeRegEx": "48", "shortCiteRegEx": null, "year": 2015}, {"title": "U-air: When urban air quality inference meets big data", "author": ["Y. Zheng", "F. Liu", "H.-P. Hsieh"], "venue": "in: Proceedings of the 19th ACM SIGKDD international conference on Knowledge discovery and data mining, ACM", "citeRegEx": "49", "shortCiteRegEx": null, "year": 2013}, {"title": "Forecasting fine-grained air quality based on big data", "author": ["Y. Zheng", "X. Yi", "M. Li", "R. Li", "Z. Shan", "E. Chang", "T. Li"], "venue": "in: Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, ACM", "citeRegEx": "50", "shortCiteRegEx": null, "year": 2015}, {"title": "On detection of emerging anomalous traffic patterns using gps data", "author": ["L.X. Pang", "S. Chawla", "W. Liu", "Y. Zheng"], "venue": "Data & Knowledge Engineering 87 ", "citeRegEx": "51", "shortCiteRegEx": null, "year": 2013}, {"title": "ST-MVL: filling missing values in geo-sensory time series data", "author": ["X. Yi", "Y. Zheng", "J. Zhang", "T. Li"], "venue": "in: Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence, IJCAI 2016, New York, NY, USA, 9-15 July 2016", "citeRegEx": "52", "shortCiteRegEx": null, "year": 2016}, {"title": "DeepTransport: Prediction and simulation of human mobility and transportation mode at a citywide level", "author": ["X. Song", "H. Kanasugi", "R. Shibasaki"], "venue": "IJCAI", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning deep representation from big and heterogeneous data for traffic accident inference", "author": ["Q. Chen", "X. Song", "H. Yamada", "R. Shibasaki"], "venue": "in: Thirtieth AAAI Conference on Artificial Intelligence", "citeRegEx": "54", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 1, "context": "Predicting crowd flows in a city is of great importance to traffic management, risk assessment, and public safety [2].", "startOffset": 114, "endOffset": 117}, {"referenceID": 2, "context": "In this paper, we predict two types of crowd flows [3]: inflow and outflow, as shown in Figure 1(a).", "startOffset": 51, "endOffset": 54}, {"referenceID": 0, "context": "This paper is an expanded version of [1], which has been accepted for presentation at the 31st AAAI Conference on Artificial Intelligence (AAAI-17).", "startOffset": 37, "endOffset": 40}, {"referenceID": 1, "context": "Apparently, predicting crowd flows can be viewed as a kind of spatio-temporal prediction problem [2].", "startOffset": 97, "endOffset": 100}, {"referenceID": 3, "context": "Deep learning [4] has been used successfully in many applications, and is considered to be one of the most cuttingedge artificial intelligence (AI) techniques.", "startOffset": 14, "endOffset": 17}, {"referenceID": 1, "context": "Exploring these techniques for spatio-temporal data is of great importance to a series of various spatio-temporal applications, including urban planning, transportation, the environment, energy, social, economy, public safety and security [2].", "startOffset": 239, "endOffset": 242}, {"referenceID": 0, "context": "The differences between this paper and our earlier work [1] are four aspects.", "startOffset": 56, "endOffset": 59}, {"referenceID": 2, "context": "We first briefly revisit the crowd flow prediction problem [3] and then introduce deep residual learning [5].", "startOffset": 59, "endOffset": 62}, {"referenceID": 4, "context": "We first briefly revisit the crowd flow prediction problem [3] and then introduce deep residual learning [5].", "startOffset": 105, "endOffset": 108}, {"referenceID": 2, "context": "Formulation of Crowd Flow Prediction Problem Definition 1 (Region [3]).", "startOffset": 66, "endOffset": 69}, {"referenceID": 2, "context": "Definition 2 (Inflow/outflow [3]).", "startOffset": 29, "endOffset": 32}, {"referenceID": 5, "context": "Deep Residual Learning Deep residual learning [6] allows convolution neural networks to have a super deep structure of 100 layers, even over-1000 layers.", "startOffset": 46, "endOffset": 49}, {"referenceID": 5, "context": "And this method has shown state-of-the-art results on multiple challenging recognition tasks, including image classification, object detection, segmentation and localization [6].", "startOffset": 174, "endOffset": 177}, {"referenceID": 4, "context": "Formally, a residual unit with an identity mapping [5] is defined as:", "startOffset": 51, "endOffset": 54}, {"referenceID": 5, "context": ", a stack of two 3 \u00d7 3 convolution layers in [6].", "startOffset": 45, "endOffset": 48}, {"referenceID": 4, "context": "The central idea of the residual learning is to learn the additive residual function F with respect to X(l) [5].", "startOffset": 108, "endOffset": 111}, {"referenceID": 6, "context": "Finally, the aggregation is mapped into [\u22121, 1] by a Tanh function, which yields a faster convergence than the standard logistic function in the process of back-propagation learning [8].", "startOffset": 182, "endOffset": 185}, {"referenceID": 7, "context": "Intuitively, the flow of crowds in nearby regions may affect each other, which can be effectively handled by the convolutional neural network (CNN) that has shown its powerful ability to hierarchically capture the spatial structural information [9].", "startOffset": 245, "endOffset": 248}, {"referenceID": 8, "context": "Several methods have been introduced to avoid the loss of resolution brought about by subsampling while preserving distant dependencies [11].", "startOffset": 136, "endOffset": 140}, {"referenceID": 9, "context": "Being different from the classical CNN, we do not use subsampling, but only convolutions [12].", "startOffset": 89, "endOffset": 93}, {"referenceID": 10, "context": "the rectifier f (z) := max(0, z) [13]; W (1) c , b (1) c are the learnable parameters in the first layer.", "startOffset": 33, "endOffset": 37}, {"referenceID": 11, "context": "ReLU) and regularization techniques are applied [14, 13, 15].", "startOffset": 48, "endOffset": 60}, {"referenceID": 10, "context": "ReLU) and regularization techniques are applied [14, 13, 15].", "startOffset": 48, "endOffset": 60}, {"referenceID": 12, "context": "ReLU) and regularization techniques are applied [14, 13, 15].", "startOffset": 48, "endOffset": 60}, {"referenceID": 5, "context": "To address this issue, we employ residual learning [6] in our model, which have been demonstrated to be very effective for training super deep neural networks of over-1000 layers.", "startOffset": 51, "endOffset": 54}, {"referenceID": 11, "context": "We also attempt Batch Normalization (BN) [14] that is added before ReLU.", "startOffset": 41, "endOffset": 45}, {"referenceID": 2, "context": "\u2022 DeepST [3]: a deep neural network (DNN)-based prediction model for spatio-temporal data, which shows state-of-the-art results on the crowd flow prediction.", "startOffset": 9, "endOffset": 12}, {"referenceID": 13, "context": "\u2022 RNN [17]: recurrent neural network (RNN), a deep learning model, which can capture temporal dependencies.", "startOffset": 6, "endOffset": 10}, {"referenceID": 14, "context": "\u2022 LSTM [18]: Long-short-term-memory network (LSTM), a special kind of RNN, capable of learning long-term temporal dependencies.", "startOffset": 7, "endOffset": 11}, {"referenceID": 15, "context": "\u2022 GRU [19]: Gated-recurrent-unit network, a new kind of RNN, can be used to capture long-term temporal dependencies.", "startOffset": 6, "endOffset": 10}, {"referenceID": 0, "context": ", DayOfWeek, Weekend/Weekday), holidays and weather conditions into binary vectors, and use Min-Max normalization to scale the Temperature and Wind speed into the range [0, 1].", "startOffset": 169, "endOffset": 175}, {"referenceID": 16, "context": "The learnable parameters are initialized using a uniform distribution with the default parameter in Keras [20].", "startOffset": 106, "endOffset": 110}, {"referenceID": 16, "context": "The python libraries, including Theano [21] and Keras [20], are used to build our models.", "startOffset": 54, "endOffset": 58}, {"referenceID": 17, "context": "Being different from TaxiBJ, BikeNYC consists of two different types of crowd flows, including new-flow and end-flow [22].", "startOffset": 117, "endOffset": 121}, {"referenceID": 2, "context": "We here adopt a total of 4-residual-unit ST-ResNet, and consider the metadata as external features like DeepST [3].", "startOffset": 111, "endOffset": 114}, {"referenceID": 2, "context": "The results of ARIMA, SARIMA, VAR and DeepST on BikeNYC are taken from [3].", "startOffset": 71, "endOffset": 74}, {"referenceID": 18, "context": "Crowd Flow Prediction There are some previously published works on predicting an individual\u2019s movement based on their location history [23, 24].", "startOffset": 135, "endOffset": 143}, {"referenceID": 19, "context": "Crowd Flow Prediction There are some previously published works on predicting an individual\u2019s movement based on their location history [23, 24].", "startOffset": 135, "endOffset": 143}, {"referenceID": 20, "context": "Some other researchers aim to predict travel speed and traffic volume on the road [25, 26, 27].", "startOffset": 82, "endOffset": 94}, {"referenceID": 21, "context": "Some other researchers aim to predict travel speed and traffic volume on the road [25, 26, 27].", "startOffset": 82, "endOffset": 94}, {"referenceID": 22, "context": "Some other researchers aim to predict travel speed and traffic volume on the road [25, 26, 27].", "startOffset": 82, "endOffset": 94}, {"referenceID": 22, "context": "Most of them are predicting single or multiple road segments, rather than citywide ones [27, 28].", "startOffset": 88, "endOffset": 96}, {"referenceID": 23, "context": "Most of them are predicting single or multiple road segments, rather than citywide ones [27, 28].", "startOffset": 88, "endOffset": 96}, {"referenceID": 17, "context": "Recently, researchers have started to focus on city-scale traffic flow prediction [22, 29].", "startOffset": 82, "endOffset": 90}, {"referenceID": 24, "context": "Recently, researchers have started to focus on city-scale traffic flow prediction [22, 29].", "startOffset": 82, "endOffset": 90}, {"referenceID": 25, "context": "However, the model unable to respond to dynamic changes, such as incidents [30].", "startOffset": 75, "endOffset": 79}, {"referenceID": 26, "context": "The Auto-Regressive Integrated Moving Average (ARIMA) model assumes that the future value of time series is a linear combination of previous values and residuals, furthermore, in order to obtain stationarity, the nonstationary time series should be differenced before analysis [31].", "startOffset": 277, "endOffset": 281}, {"referenceID": 27, "context": "ARIMA is not suite for time series with missing data, since they relying on uninterrupted time series, and data filling technique might be problematic as the complexity of the situation increase [32].", "startOffset": 195, "endOffset": 199}, {"referenceID": 27, "context": "The disadvantage of SARIMA is time consuming [32].", "startOffset": 45, "endOffset": 49}, {"referenceID": 28, "context": "The Vector Autoregressive (VAR) models capture the linear inter dependencies among interrelated time series [33].", "startOffset": 108, "endOffset": 112}, {"referenceID": 29, "context": "Being different from the above linear models, the artificial neural network (ANN) model is a nonlinear model and commonly used in time series prediction [34, 35, 36].", "startOffset": 153, "endOffset": 165}, {"referenceID": 30, "context": "Being different from the above linear models, the artificial neural network (ANN) model is a nonlinear model and commonly used in time series prediction [34, 35, 36].", "startOffset": 153, "endOffset": 165}, {"referenceID": 31, "context": "Being different from the above linear models, the artificial neural network (ANN) model is a nonlinear model and commonly used in time series prediction [34, 35, 36].", "startOffset": 153, "endOffset": 165}, {"referenceID": 32, "context": "ANNs have excellent nonlinear modeling ability, but not enough for linear modeling ability [37].", "startOffset": 91, "endOffset": 95}, {"referenceID": 3, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 55, "endOffset": 66}, {"referenceID": 33, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 55, "endOffset": 66}, {"referenceID": 10, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 133, "endOffset": 141}, {"referenceID": 34, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 133, "endOffset": 141}, {"referenceID": 35, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 162, "endOffset": 170}, {"referenceID": 36, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 162, "endOffset": 170}, {"referenceID": 37, "context": "Deep Neural Networks Neural networks and deep learning [4, 38, 39] have gained numerous success in the fields such as compute vision [13, 40], speech recognition [41, 42], and natural language processing [43].", "startOffset": 204, "endOffset": 208}, {"referenceID": 38, "context": "For example, convolutional neural networks won the ImageNet [44] competition since 2012, and help AlphaGo [45] beat Go human champion10.", "startOffset": 60, "endOffset": 64}, {"referenceID": 39, "context": "For example, convolutional neural networks won the ImageNet [44] competition since 2012, and help AlphaGo [45] beat Go human champion10.", "startOffset": 106, "endOffset": 110}, {"referenceID": 40, "context": "Recurrent neural networks (RNNs) have been used successfully for sequence learning tasks [46].", "startOffset": 89, "endOffset": 93}, {"referenceID": 14, "context": "The incorporation of long short-term memory (LSTM) [18] or gated recurrent unit (GRU) [19] enables RNNs to learn long-term temporal dependency.", "startOffset": 51, "endOffset": 55}, {"referenceID": 15, "context": "The incorporation of long short-term memory (LSTM) [18] or gated recurrent unit (GRU) [19] enables RNNs to learn long-term temporal dependency.", "startOffset": 86, "endOffset": 90}, {"referenceID": 41, "context": "Recently, researchers combined above networks and proposed a convolutional LSTM network [47] that learns spatial and temporal dependencies simultaneously.", "startOffset": 88, "endOffset": 92}, {"referenceID": 2, "context": "In our previous work [3], a general prediction model based on DNNs was proposed for spatio-temporal data.", "startOffset": 21, "endOffset": 24}, {"referenceID": 42, "context": "A survey on data fusion methodologies can be found at [48].", "startOffset": 54, "endOffset": 58}, {"referenceID": 1, "context": "Urban Computing Urban computing [2], has emerged as a new research area, which aims to tackle urban challenges (e.", "startOffset": 32, "endOffset": 35}, {"referenceID": 43, "context": "A branch of research also partitions a city into grids, and then studies the traffic flow in each region of the city, such as predicting urban air quality [49, 50], detecting anomalous traffic patterns [51], inferring missing air quality [52], forecasting of spatio-temporal data [3].", "startOffset": 155, "endOffset": 163}, {"referenceID": 44, "context": "A branch of research also partitions a city into grids, and then studies the traffic flow in each region of the city, such as predicting urban air quality [49, 50], detecting anomalous traffic patterns [51], inferring missing air quality [52], forecasting of spatio-temporal data [3].", "startOffset": 155, "endOffset": 163}, {"referenceID": 45, "context": "A branch of research also partitions a city into grids, and then studies the traffic flow in each region of the city, such as predicting urban air quality [49, 50], detecting anomalous traffic patterns [51], inferring missing air quality [52], forecasting of spatio-temporal data [3].", "startOffset": 202, "endOffset": 206}, {"referenceID": 46, "context": "A branch of research also partitions a city into grids, and then studies the traffic flow in each region of the city, such as predicting urban air quality [49, 50], detecting anomalous traffic patterns [51], inferring missing air quality [52], forecasting of spatio-temporal data [3].", "startOffset": 238, "endOffset": 242}, {"referenceID": 2, "context": "A branch of research also partitions a city into grids, and then studies the traffic flow in each region of the city, such as predicting urban air quality [49, 50], detecting anomalous traffic patterns [51], inferring missing air quality [52], forecasting of spatio-temporal data [3].", "startOffset": 280, "endOffset": 283}, {"referenceID": 47, "context": "proposed a recurrentneural-network-based model to predict the person\u2019s future movement [53].", "startOffset": 87, "endOffset": 91}, {"referenceID": 48, "context": "proposes a deep learning model to understand how human mobility will affect traffic accident risk [54].", "startOffset": 98, "endOffset": 102}], "year": 2017, "abstractText": "Forecasting the flow of crowds is of great importance to traffic management and public safety, and very challenging as it is affected by many complex factors, including spatial dependencies (nearby and distant), temporal dependencies (closeness, period, trend), and external conditions (e.g. weather and events). We propose a deep-learning-based approach, called ST-ResNet, to collectively forecast two types of crowd flows (i.e. inflow and outflow) in each and every region of a city. We design an end-to-end structure of ST-ResNet based on unique properties of spatio-temporal data. More specifically, we employ the residual neural network framework to model the temporal closeness, period, and trend properties of crowd traffic. For each property, we design a branch of residual convolutional units, each of which models the spatial properties of crowd traffic. ST-ResNet learns to dynamically aggregate the output of the three residual neural networks based on data, assigning different weights to different branches and regions. The aggregation is further combined with external factors, such as weather and day of the week, to predict the final traffic of crowds in each and every region. We have developed a real-time system based on Microsoft Azure Cloud, called UrbanFlow, providing the crowd flow monitoring and forecasting in Guiyang City of China. In addition, we present an extensive experimental evaluation using two types of crowd flows in Beijing and New York City (NYC), where ST-ResNet outperforms nine well-known baselines.", "creator": "LaTeX with hyperref package"}}}