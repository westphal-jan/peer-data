{"id": "1701.04143", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2017", "title": "Vulnerability of Deep Reinforcement Learning to Policy Induction Attacks", "abstract": "Deep learning classifiers are known to be inherently vulnerable to manipulation by intentionally perturbed inputs, named adversarial examples. In this work, we establish that reinforcement learning techniques based on Deep Q-Networks (DQNs) are also vulnerable to adversarial input perturbations, and verify the transferability of adversarial examples across different DQN models. Furthermore, we present a novel class of attacks based on this vulnerability that enable policy manipulation and induction in the learning process of DQNs. We propose an attack mechanism that exploits the transferability of adversarial examples to implement policy induction attacks on DQNs, and demonstrate its efficacy and impact through experimental study of a game-learning scenario. The system uses two distinct approaches: the first is the system that exploits the transferability of adversarial examples by selectively perturbed inputs, or by selectively perturbed input inputs in a DQN environment. It is this technique that implements a simple algorithm for generating a high-level adversarial example. In this particular example, the system implements a highly sophisticated algorithm for generating a low-level adversarial example. However, while the system supports the principle that adversarial examples are difficult to find, it is a general rule of thumb that the system can only implement one or more techniques in a limited number of situations. The system also provides an in-depth analysis of the adversarial data as a whole. This has a potential to allow the system to build a much more robust, more robust, and more resilient defense against adversarial input, when compared with other techniques.\n\n\n\n\nThe first version of this paper was published on 10 July 2011. The paper has been supported by the National Academy of Sciences, the National Academy of Sciences, the National Institutes of Health, the National Institute for Advanced Research, and the National Institute of Child and Adolescent Health.", "histories": [["v1", "Mon, 16 Jan 2017 02:39:01 GMT  (2602kb)", "http://arxiv.org/abs/1701.04143v1", "14 pages, 5 figures, pre-print of submission to MLDM '17"]], "COMMENTS": "14 pages, 5 figures, pre-print of submission to MLDM '17", "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["vahid behzadan", "arslan munir"], "accepted": false, "id": "1701.04143"}, "pdf": {"name": "1701.04143.pdf", "metadata": {"source": "CRF", "title": "Vulnerability of Deep Reinforcement Learning to Policy Induction Attacks", "authors": ["Vahid Behzadan"], "emails": ["vbehzadan@unr.edu", "amunir@unr.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 1.\n04 14\n3v 1\n[ cs\n.L G\n] 1\n6 Ja\nn 20\nKeywords: Reinforcement Learning, Deep Q-Learning, Adversarial Examples, Policy Induction, Manipulation, Vulnerability"}, {"heading": "1 Introduction", "text": "Inspired by the psychological and neuroscientific models of natural learning, Reinforcement Learning (RL) techniques aim to optimize the actions of intelligent agents in complex environments by learning effective controls and reactions that maximize the long-term reward of agents. [1]. The applications of RL range from combinatorial search problems such as learning to play games [2] to autonomous navigation [3], multi-agent systems [4], and optimal control [5]. However, classic RL techniques generally rely on hand-crafted representations of sensory input, thus limiting their performance in the complex and high-dimensional real world environments. To overcome this limitation, recent developments combine RL techniques with the significant feature extraction and processing capabilities of deep learning models in a framework known as Deep Q-Network (DQN) [6]. This approach exploits deep neural networks for both feature selection and Q-function approximation, hence enabling unprecedented performance in complex settings such as learning efficient playing strategies from unlabeled video frames of Atari games [7], robotic manipulation [8], and autonomous navigation of aerial [9] and ground vehicles [10].\nThe growing interest in the application of DQNs in critical systems necessitate the investigation of this framework with regards to its resilience and robustness to adversarial attacks on the integrity of reinforcement learning processes. The reliance of RL on interactions with the environment gives rise to an inherent vulnerability which makes the process of learning susceptible to perturbation as a result of changes in the observable environment. Exploiting this vulnerability provides adversaries with the means to disrupt or change control policies, leading to unintended and potentially harmful actions. For instance, manipulation of the obstacle avoidance and navigation policies learned by autonomous Unmanned Aerial Vehicles (UAV) enables the adversary to use such systems as kinetic weapons by inducing actions that lead to intentional collisions.\nIn this paper, we study the efficacy and impact of policy induction attacks on the Deep Q-Learning RL framework. To this end, we propose a novel attack methodology based on adversarial example attacks against deep learning models [13]. Through experimental results, we verify that similar to classifiers, Q networks are also vulnerable to adversarial examples, and confirm the transferability of such examples between different models. We then evaluate the proposed attack methodology on the original DQN architecture of Mnih, et. al. [7], the results of which verify the feasibility of policy induction attacks by incurring minimal perturbations in the environment or sensory inputs of an RL system. We also discuss the insufficiency of defensive distillation [14] and adversarial training [15] techniques as state of the art countermeasures proposed against adversarial example attacks on deep learning classifiers, and present potential techniques to mitigate the effect of policy induction attacks against DQNs.\nThe remainder of this paper is organized as follows: Section 2 presents an overview of Q-Learning, Deep Q-Networks, and adversarial examples. Section 3 formalizes the problem and defines the target and attacker models. In Section 4, we outline the attack methodology and algorithm, followed by the experimental evaluation of the proposed methodology in Section 5. A high-level discussion on effectiveness of the current countermeasures is presented in Section 6, and the paper is concluded in Section 7 with remarks on future research directions."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Q-Learning", "text": "The generic RL problem can be formally modeled as a Markov Decision Process, described by the tupleMDP = (S,A, P,R), where S is the set of reachable states in the process, A is the set of available actions, R is the mapping of transitions to the immediate reward, and P represents the transition probabilities. At any given time-step t, the MDP is at a state st \u2208 S. The RL agent\u2019s choice of action at time t, at \u2208 A causes a transition from st to a state st+1 according to the transition probability P atst,st+a . The agent receives a reward rt = R(st, at) \u2208 R for choosing the action at at state st.\nInteractions of the agent with MDP are captured in a policy \u03c0. When such interactions are deterministic, the policy \u03c0 : S \u2192 A is a mapping between the\nstates and their corresponding actions. A stochastic policy \u03c0(s, a) represents the probability of optimality for action a at state s.\nThe objective of RL is to find the optimal policy \u03c0\u2217 that maximizes the cumulative reward over time at time t, denoted by the return function R\u0302 = \u2211t\u2032=t\nT \u03b3 t\u2032\u2212trt\u2032 , where \u03b3 < 1 is the discount factor representing the diminishing worth of rewards obtained further in time, hence ensuring that R\u0302 is bounded. One approach to this problem is to estimate the optimal value of each action, defined as the expected sum of future rewards when taking that action and following the optimal policy thereafter. The value of an action a in a state s is given by the action-value function Q defined as:\nQ(s, a) = R(s, a) + \u03b3maxa\u2032(Q(s \u2032, a\u2032)) (1)\nWhere s\u2032 is the state that emerges as a result of action a, and a\u2032 is a possible action in state s\u2032. The optimal Q value given a policy pi is hence defined as: Q\u2217(s, a) = max\u03c0Q\n\u03c0(s, a), and the optimal policy is given by \u03c0\u2217(s) = argmaxa Q(s, a)\nThe Q-learning method estimates the optimal action policies by using the Bellman equation Qi+1(s, a) = E[R + \u03b3maxa Qi] as the iterative update of a value iteration technique. Practical implementation of Q-learning is commonly based on function approximation of the parametrized Q-function Q(s, a; \u03b8) \u2248 Q\u2217(s, a). A common technique for approximating the parametrized non-linear Q-function is to train a neural network whose weights correspond to \u03b8. Such neural networks, commonly referred to as Q-networks, are trained such that at every iteration i, it minimizes the loss function\nLi(\u03b8i) = Es,a\u223c\u03c1(.)[(yi \u2212Q(s, a, ; \u03b8i)) 2] (2)\nwhere yi = E[R + \u03b3maxa\u2032 Q(s \u2032, a\u2032; \u03b8i\u22121)|s, a], and \u03c1(s, a) is a probability distribution over states s and actions a. This optimization problem is typically solved using computationally efficient techniques such as Stochastic Gradient Descent (SGD) [11]."}, {"heading": "2.2 Deep Q Networks", "text": "Classical Q-networks present a number of major disadvantages in the Q-learning process. First, the sequential processing of consecutive observations breaks the iid requirement of training data as successive samples are correlated. Furthermore, slight changes to Q-values leads to rapid changes in the policy estimated by Qnetwork, thus enabling policy oscillations. Also, since the scale of rewards and Q-values are unknown, the gradients of Q-networks can be sufficiently large to render the backpropagation process unstable.\nA deep Q network (DQN) [6] is a multi-layered Q-network designed to mitigate such disadvantages. To overcome the issue of correlation between consecutive observations, DQN employs a technique named experience replay: Instead of training on successive observations, experience replay samples a random batch\nInput Layer 1st hidden 2nd hidden 3rd hidden\nof previous observations stored in the replay memory to train on. As a result, the correlation between successive training samples is broken and the iid setting is re-established. In order to avoid oscillations, DQN fixes the parameters of the optimization target yi. These parameters are then updated at regulat intervals by adopting the current weights of the Q-network. The issue of unstability in backpropagation is also solved in DQN by clipping the reward values to the range [\u22121,+1], thus preventing Q-values from becoming too large.\nMnih et. al. [7] demonstrate the application of this new Q-network technique to end-to-end learning of Q values in playing Atari games based on observations of pixel values in the game environtment. The neural network architecture of this work is depicted in figure 1. To capture the movements in the game environment, Mnih et. al. use stacks of 4 consecutive image frames as the input to the network. To train the network, a random batch is sampled from the previous observation tuples (st, at, rt, st+1). Each observation is then processed by 2 layers of convolutional neural networks to learn the features of input images, which are then employed by feed-forward layers to approximate the Q-function. The target network Q\u0302, with parameters \u03b8\u2212, is synchronized with the parameters of the original Q network at fixed periods intervals. i.e., at every ith iteration, \u03b8\u2212t = \u03b8t, and is kept fixed until the next synchronization. The target value for optimization of DQN learning thus becomes:\ny\u2032t \u2261 rt+1 + \u03b3maxa\u2032Q\u0302(St+1, a \u2032; \u03b8\u2212) (3)\nAccordingly, the training process can be stated as:\nminat(y \u2032 t \u2212Q(st, at, \u03b8)) 2 (4)"}, {"heading": "2.3 Adversarial Examples", "text": "in [16], Szegedy et. al. report an intriguing discovery: several machine learning models, including deep neural networks, are vulnerable to adversarial examples. That is, these machine learning models misclassify inputs that are only slightly different from correctly classified samples drawn from the data distribution. Furthermore, a wide variety of models with different architectures trained on different subsets of the training data misclassify the same adversarial example.\nThis suggests that adversarial examples expose fundamental blind spots in machine learning algorithms. The issue can be stated as follows: Consider a machine learning system M and a benign input sample C which is correctly classified by the machine learning system, i.e. M(C) = ytrue. According to the report of Szegedy [16] and many proceeding studies [13], it is possible to construct an adversarial example A = C + \u03b4, which is perceptually indistinguishable from C, but is classified incorrectly, i.e. M(A) 6= ytrue.\nAdversarial examples are misclassified far more often than examples that have been perturbed by random noise, even if the magnitude of the noise is much larger than the magnitude of the adversarial perturbation [17]. According to the objective of adversaries, adversarial example attacks are generally classified into the following two categories:\n1. Misclassification attacks, which aim for generating examples that are classified incorrectly by the target network 2. Targeted attacks, whose goal is to generate samples that the target misclassifies into an arbitrary class designated by the attacker.\nTo generate such adversarial examples, several algorithms have been proposed, such as the Fast Gradient Sign Method (FGSM) by Goodfellow et. al., [17], and the Jacobian Saliency Map Algorithm (JSMA) approach by Papernot et. al., [13]. A grounding assumption in many of the crafting algorithms is that the attacker has complete knowledge of the target neural networks such as its architecture, weights, and other hyperparameters. Recently, Papernot et. al. [18] proposed the first black-box approach to generating adversarial examples. This method exploits the generalized nature of adversarial examples: an adversarial example generated for a neural network classifier applies to most other neural network classifiers that perform the same classification task, regardless of their architecture, parameters, and even the distribution of training data. Accordingly, the approach of [18] is based on generating a replica of the target network. To train this replica, the attacker creates and trains over a dataset from a mixture of samples obtained by observing target\u2019s performance, and synthetically generated inputs and label pairs. Once trained, any of the adversarial example crafting\nalgorithms that require knowledge of the target network can be applied to the replica. Due to the transferability of adversarial examples, the perturbed samples generated from the replica network will induce misclassifications in many of the other networks that perform the same task. In the following sections, we describe how a similar approach can be adopted in policy induction attacks against DQNs."}, {"heading": "3 Threat Model", "text": "We consider an attacker whose goal is to perturb the optimality of actions taken by a DQN learner via inducing an arbitrary policy \u03c0adv on the target DQN. The attacker is assumed to have minimal a priori information of the target, such as the type and format of inputs to the DQN, as well as its reward function R and an estimate for the frequency of updating the Q\u0302 network. It is noteworthy that even if the target\u2019s reward function is not known, it can be estimated via Inverse Reinforcement Learning techniques [19]. No knowledge of the target\u2019s exact architecture is considered in this work, but the attacker can estimate this architecture based on the conventions applied to the input type (e.g. image and video input may indicate a convolutional neural network, speech and voice data point towards a recurrent neural network, etc.).\nIn this model, the attacker has no direct influence on the target\u2019s architecture and parameters, including its reward function and the optimization mechanism. The only parameter that the attacker can directly manipulate is the configuration of the environment observed by the target. For instance, in the case of video game learning [6], the attacker is capable of changing the pixel values of the game\u2019s frames, but not the score. In cyber-physical scenarios, such perturbations can be implemented by strategic rearrangement of objects or precise illumination of certain areas via tools such as laser pointers. To this end, we assume that the attacker is capable of changing the state before it is observed by the target, either by predicting future states, or after such states are generated by the environment\u2019s dynamics. The latter can be achieved if the attacker has a faster action speed than the target\u2019s sampling rate, or by inducing a delay between generation of the new environment and its observation by the target.\nTo avoid detection and minimize influence on the environment\u2019s dynamics, we impose an extra constraint on the attack such that the magnitude of perturbations applied in each configuration must be smaller than a set value denoted by \u01eb. Also, we do not limit the attacker\u2019s domain of perturbations (e.g. in the case of video games, the attacker may change the value of any pixel at any position on the screen)."}, {"heading": "4 Attack Mechanism", "text": "As discussed in Section 2, the DQN framework of Mnih et. al. [7] can be seen as consisting of two neural networks, one is the native network which performs the image classification and function approximation, and the other is the auxiliary\nQ\u0302 network whose architecture and parameters are copies of the native network sampled once every c iterations. Training of DQN is performed optimizing the loss function of equation 4 by Stochastic Gradient Descent (SGD). Due to the similarity of this process and the training mechanism of neural network classifiers, we hypothesize that the function approximators of DQN are also vulnerable to adversarial example attacks. In other words, the set of all possible inputs to the approximated functions Q and Q\u0302 contains elements which cause the approximated functions to generate outputs that are different from the output of the original Q function. Furthermore, we hypothesize that similar to the case of classifiers, the elements that cause one DQN to generate incorrect Q values will incur the same effect on other DQNs that approximate the same Q-function.\nConsequently, the attacker can manipulate a DQN\u2019s learning process by crafting states st such that Q\u0302(st+1, a; \u03b8 \u2212\nt ) identifies an incorrect choice of optimal action at st+1. If the attacker is capable of crafting adversarial inputs s \u2032\nt and s\u2032t+1 such that the value of Equation 4 is minimized for a specific action a\n\u2032, then the policy learned by DQN at this time-step is optimized towards suggesting a\u2032 as the optimal action given the state st. Considering that the attacker is not aware of the target\u2019s network architecture and its parameters at every time step, crafting adversarial states must rely on black-box techniques such as those introduced in [18]. Attacker can exploit the transferability of adversarial examples by obtaining the state perturbations from a replica of the target\u2019s DQN. At every time step of training this replica, attacker calculates the perturbation vectors \u03b4\u0302t+1 for the next state st+1 such that maxa\u2032Q\u0302(st+1 + \u03b4\u0302t+1, a\n\u2032; \u03b8\u2212t ) causes Q\u0302 to generate its maximum when a\u2032 = \u03c0\u2217adv(st+1), i.e., the maximum reward at the next state is obtained when the optimal action taken at that state is determined by attacker\u2019s policy.\nThis is procedurally similar to targeted misclassification attacks described in Section 2 that aim to find minimal perturbations to an input sample such that the classifier assigns the maximum value of likelihood to an incorrect target class. Therefore, the adversarial example crafting techniques developed for classifiers, such as the Fast Gradient Sign Method (FGSM) and the Jacobian Saliency Map\nAlgorithm (JSMA), can be applied to obtain the perturbation vector \u03b4\u0302t+1. The procedure of this attack can be divided into the two phases of initialization and exploitation. The initialization phase implements processes that must be performed before the target begins interacting with the environment, which are:\n1. Train a DQN based on attacker\u2019s reward function r\u2032 to obtain the adversarial policy \u03c0\u2217adv 2. Create a replica of the target\u2019s DQN and initialize with random parameters\nThe exploitation phase implements the attack processes such as crafting adversarial inputs. This phase constitutes an attack cycle depicted in figure 2. The cycle initiates with the attacker\u2019s first observation of the environment, and runs in tandem with the target\u2019s operation. Algorithm 1 details the procedural flow of this phase."}, {"heading": "5 Experimental Verification", "text": "To study the performance and efficacy of the proposed mechanism, we examine the targeting of Mnih et. al.\u2019s DQN designed to learn Atari 2600 games [7]. In our setup, we train the network on a game of Pong implemented in Python using the PyGame library [12]. The game is played against an opponent with a modest level of heuristic artificial intelligence, and is customized to handle the delays in DQN\u2019s reaction due to the training process. The game\u2019s backened provides the DQN agent with the game screen sampled at 8Hz, as well as the game score (+1 for win, -1 for lose, 0 for ongoing game) throughout each episode of the game. The set of available actions A = {UP,DOWN,Stand} enables the DQN agent to control the movements of its paddle. Figure 3 illustrates the game screen of Pong used in our experiments.\nThe training process of DQN is implemented in TensorFlow [20] and executed on an Amazon EC2 g2.2xlarge instance [21] with 8 Intel Xeon E5-2670 CPU cores and a NVIDIA GPU with 1536 CUDA cores and 4GB of video memory. Each state observed by the DQN is a stack of 4 consecutive 80x80 gray-scale game frames. Similar to the original architecture of Mnih et. al. [7], this input is first passed through two convolutional layers to extract a compressed feature space for the following two feed-forward layers for Q function estimation. The discount factor \u03b3 is set to 0.99, and the initial probability of taking a random action is set to 1, which is annealed after every 500000 actions. The agent is also set to\nAlgorithm 1: Exploitation Procedure\ninput : adversarial policy \u03c0\u2217 adv , initialized replica DQNs Q\u2032, Q\u0302\u2032, synchronization frequency c, number of iterations N\ntrain its DQN after every 50000 observations. Regular training of this DQN takes approximately 1.5 million iterations (\u223c16 hours on the g2.2xlarge instance) to reach a winning average of 51% against the heuristic AI of its opponent1\nFollowing the threat model presented in Section 3, this experiment considers an attacker capable of observing the states interactions between his target DQN and the game, but his domain of influence is limited to implementation of minor changes on the environment. Considering the visual representation of the environment in this setup, the minor changes incurred by attacker take the form of perturbing pixel values in the 4 consecutive frames of a given state.\n1 As expected, longer training of this DQN leads to better results. After a 2-week period of training we verified the convergent trait of our implementation by witnessing winning averages of more than 80%."}, {"heading": "5.1 Evaluation of Vulnerability to Adversarial Examples", "text": "Successful implementations of the proposed policy induction attack mechanisms rely on the vulnerability of DQNs to targeted adversarial perturbations. To verify the existence of this vulnerability, the Q\u0302 networks of target were sampled at regular intervals during training in the game environment. In the next step, 100 observations comprised of a pair of consecutive states (st, st+1) were randomly selected from the experience memory of DQN, to ensure the possibility of their occurrence in the game. Considering st+1 to be the variable that can be manipulated by the attacker, it is passed along with the model Q\u0302 to the adversarial example crafting algorithms. To study the extent of vulnerability, we evaluated the success rate of both FGSM and JSMA algorithms for each of the 100 random observations in inducing a random game action other than the current optimal a\u2217t . The results, presented in Figure 4, verify that DQNs are indeed vulnerable to adversarial example attacks. It is noteworthy that the success rate of FGSM with a fixed perturbation limit decreases by one percent per 100000 observations as the number of observations increases. Yet, JSMA seems to be more robust to this effect as it maintains a success rate of 100 percent throughout the experiment."}, {"heading": "5.2 Verification of Transferability", "text": "To measure the transferability of adversarial examples between models, we trained another Q-network with a similar architecture on the same experience memory of the game at the sampled instances of the previous experiment. It is noteworthy that due to random initializations, the exploration mechanism, and the stochastic nature of SGD, even similar Q-networks trained on the same set of observations will obtain different sets of weights. The second Q-network was tested to measure its vulnerability to the adversarial examples obtained from the last experiment. Figure 5 shows that more than 70% of the perturbations\nobtained from both FGSM and JSMA methods also affect the second network, hence verifying the transferability of adversarial examples between DQNs."}, {"heading": "5.3 Performance of Proposed Policy Induction Attack", "text": "Our final experiment tests the performance of our proposed exploitation mechanism. In this experiment, we consider an adversary whose reward value is the exact opposite of the game score, meaning that it aims to devise a policy that maximizes the number of lost games. To obtain this policy, we trained an adversarial DQN on the game, whose reward value was the negative of the value obtained from target DQN\u2019s reward function. With the adversarial policy at hand, a target DQN was setup to train on the game environment to maximize the original reward function. The game environment was modified to allow perturbation of pixel values in game frames by the adversary. A second DQN was also setup to train on the target\u2019s observations to provide an estimation of the target DQN to enable blackbox crafting of adversarial example. At every observation, the adversarial policy obtained in the initialization phase was consulted to calculate the action that would satisfy the adversary\u2019s goal. Then, the JSMA algorithm was utilized to generate the adversarial example that would cause the output of the replica DQN network to be the action selected by the adversarial policy. This example was then passed to the target DQN as its observation. Figure 6 compares the performance of unperturbed and attacked DQNs in terms of their reward values, measured as the difference of current game score with the average score. It can be seen that the reward value for the targeted agent rapidly falls below the unperturbed case and maintains the trend of losing the game throughout the experiment. This result confirms the efficacy of our proposed attack mechanism, and verifies the vulnerability of Deep Q-Networks to policy induction attacks."}, {"heading": "6 Discussion on Current Counter-Measures", "text": "Since the introduction of adversarial examples by Szgedey, et. al. [16], various counter-measures have been proposed to mitigate the exploitation of this vulnerability in deep neural networks. Goodfellow et. al. [17] proposed to retrain deep networks on a set of minimally perturbed adversarial examples to prevent their misclassification. This approach suffers from two inherent short-comings: Firstly, it aims to increase the amount of perturbations required to craft an adversarial example. Second, this approach does not provide a comprehensive counter-measure as it is computationally inefficient to find all possible adversarial examples. Furthermore, Papernot et. al. [18] argue that by training the network on adversarial examples, the emerging network will have new adversarial examples and hence this technique does not solve the problem of exploiting this vulnerability for critical systems. Consequently, Papernot, et. al [14] proposed a technique named Defensive Distillation, which is also based on retraining the network on a dimensionally-reduced set of training data. This approach, too, was recently shown to be insufficient in mitigating adversarial examples [22]. It is hence concluded that the current state of the art in countering adversarial examples and their exploitation is incapable of providing a concrete defense against such exploitations.\nIn the context of policy induction attacks, we conjecture that the temporal features of the training process may be utilized to provide protection mechanisms. The proposed attack mechanism relies on the assumption that due to the decreasing chance of random actions, the target DQN is most likely to perform the action induced by adversarial inputs as the number of iterations progress. This may be mitigated by implementing adaptive exploration-exploitation mechanisms that both increase and decrease the chance of random actions according to the performance of the trained model. Also, it may be possible to exploit spatio-temporal pattern recognition techniques to detect and omit regular perturbations during the pre-processing phase of the learning process. Investigating such techniques is the priority of our future work."}, {"heading": "7 Conclusions and Future Work", "text": "We established the vulnerability of reinforcement learning based on Deep QNetworks to policy induction attacks. Furthermore, we proposed an attack mechanism which exploits the vulnerability of deep neural networks to adversarial examples, and demonstrated its efficacy and impact through experiments on a game-learning DQN.\nThis preliminary work solicitates a wide-range of studies on the security of Deep Reinforcement Learning. As discussed in Section 6, novel countermeasures need to be investigated to mitigate the effect of such attacks on DQNs deployed in cyber-physical and critical systems. Also, an analytical treatment of the problem to establish the bounds and relationships of model parameters, such as network architecture and exploration mechanisms, with DQN\u2019s vulnerability to policy induction will provide deeper insight and guidelines into designing safe and secure deep reinforcement learning architectures."}], "references": [{"title": "Reinforcement learning in board games,", "author": ["I. Ghory"], "venue": "Department of Computer Science,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "An approach to tune fuzzy controllers based on reinforcement learning for autonomous vehicle control,", "author": ["X. Dai", "C.-K. Li", "A.B. Rad"], "venue": "IEEE Transactions on Intelligent Transportation Systems,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "A comprehensive survey of multiagent reinforcement learning,", "author": ["L. Busoniu", "R. Babuska", "B. De Schutter"], "venue": "IEEE Transactions on Systems, Man, And CyberneticsPart C: Applications and Reviews,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2008}, {"title": "Reinforcement learning is direct adaptive optimal control,", "author": ["R.S. Sutton", "A.G. Barto", "R.J. Williams"], "venue": "IEEE Control Systems,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1992}, {"title": "Playing atari with deep reinforcement learning,", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Graves", "I. Antonoglou", "D. Wierstra", "M. Riedmiller"], "venue": "arXiv preprint arXiv:1312.5602,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Human-level control through deep reinforcement learning,", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski"], "venue": "Nature, vol. 518,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Deep reinforcement learning for robotic manipulation,", "author": ["S. Gu", "E. Holly", "T. Lillicrap", "S. Levine"], "venue": "arXiv preprint arXiv:1610.00633,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "Learning deep control policies for autonomous aerial vehicles with mpc-guided policy search,", "author": ["T. Zhang", "G. Kahn", "S. Levine", "P. Abbeel"], "venue": "arXiv preprint arXiv:1509.06791,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Deep active learning for autonomous navigation,", "author": ["A. Hussein", "M.M. Gaber", "E. Elyan"], "venue": "in International Conference on Engineering Applications of Neural Networks,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "Gradient descent for general reinforcement learning,", "author": ["L. Baird", "A.W. Moore"], "venue": "Advances in neural information processing systems,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1999}, {"title": "Beginning game development with Python and Pygame: from novice to professional", "author": ["W. McGugan"], "venue": "Apress,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2007}, {"title": "The limitations of deep learning in adversarial settings,", "author": ["N. Papernot", "P. McDaniel", "S. Jha", "M. Fredrikson", "Z.B. Celik", "A. Swami"], "venue": "IEEE European Symposium on Security and Privacy (EuroS&P),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2016}, {"title": "Distillation as a defense to adversarial perturbations against deep neural networks,", "author": ["N. Papernot", "P. McDaniel", "X. Wu", "S. Jha", "A. Swami"], "venue": "arXiv preprint arXiv:1511.04508,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Towards evaluating the robustness of neural networks,", "author": ["N. Carlini", "D. Wagner"], "venue": "arXiv preprint arXiv:1608.04644,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2016}, {"title": "Intriguing properties of neural networks,", "author": ["C. Szegedy", "W. Zaremba", "I. Sutskever", "J. Bruna", "D. Erhan", "I. Goodfellow", "R. Fergus"], "venue": "arXiv preprint arXiv:1312.6199,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Explaining and harnessing adversarial examples,", "author": ["I.J. Goodfellow", "J. Shlens", "C. Szegedy"], "venue": "arXiv preprint arXiv:1412.6572,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Practical black-box attacks against deep learning systems using adversarial examples,", "author": ["N. Papernot", "P. McDaniel", "I. Goodfellow", "S. Jha", "Z. Berkay Celik", "A. Swami"], "venue": "arXiv preprint arXiv:1602.02697,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2016}, {"title": "A survey of inverse reinforcement learning techniques,", "author": ["Y. Gao", "J. Peters", "A. Tsourdos", "S. Zhifei", "E. Meng Joo"], "venue": "International Journal of Intelligent Computing and Cybernetics,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2012}, {"title": "Tensorflow: Large-scale machine learning on heterogeneous distributed systems,", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin"], "venue": "arXiv preprint arXiv:1603.04467,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2016}, {"title": "Application and network performance of amazon elastic compute cloud instances,", "author": ["M. Gilani", "C. Inibhunu", "Q.H. Mahmoud"], "venue": "in Cloud Networking (CloudNet),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Defensive distillation is not robust to adversarial examples,", "author": ["N. Carlini", "D. Wagner"], "venue": "arXiv preprint,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "The applications of RL range from combinatorial search problems such as learning to play games [2] to autonomous navigation [3], multi-agent systems [4], and optimal control [5].", "startOffset": 95, "endOffset": 98}, {"referenceID": 1, "context": "The applications of RL range from combinatorial search problems such as learning to play games [2] to autonomous navigation [3], multi-agent systems [4], and optimal control [5].", "startOffset": 124, "endOffset": 127}, {"referenceID": 2, "context": "The applications of RL range from combinatorial search problems such as learning to play games [2] to autonomous navigation [3], multi-agent systems [4], and optimal control [5].", "startOffset": 149, "endOffset": 152}, {"referenceID": 3, "context": "The applications of RL range from combinatorial search problems such as learning to play games [2] to autonomous navigation [3], multi-agent systems [4], and optimal control [5].", "startOffset": 174, "endOffset": 177}, {"referenceID": 4, "context": "To overcome this limitation, recent developments combine RL techniques with the significant feature extraction and processing capabilities of deep learning models in a framework known as Deep Q-Network (DQN) [6].", "startOffset": 208, "endOffset": 211}, {"referenceID": 5, "context": "This approach exploits deep neural networks for both feature selection and Q-function approximation, hence enabling unprecedented performance in complex settings such as learning efficient playing strategies from unlabeled video frames of Atari games [7], robotic manipulation [8], and autonomous navigation of aerial [9] and ground vehicles [10].", "startOffset": 251, "endOffset": 254}, {"referenceID": 6, "context": "This approach exploits deep neural networks for both feature selection and Q-function approximation, hence enabling unprecedented performance in complex settings such as learning efficient playing strategies from unlabeled video frames of Atari games [7], robotic manipulation [8], and autonomous navigation of aerial [9] and ground vehicles [10].", "startOffset": 277, "endOffset": 280}, {"referenceID": 7, "context": "This approach exploits deep neural networks for both feature selection and Q-function approximation, hence enabling unprecedented performance in complex settings such as learning efficient playing strategies from unlabeled video frames of Atari games [7], robotic manipulation [8], and autonomous navigation of aerial [9] and ground vehicles [10].", "startOffset": 318, "endOffset": 321}, {"referenceID": 8, "context": "This approach exploits deep neural networks for both feature selection and Q-function approximation, hence enabling unprecedented performance in complex settings such as learning efficient playing strategies from unlabeled video frames of Atari games [7], robotic manipulation [8], and autonomous navigation of aerial [9] and ground vehicles [10].", "startOffset": 342, "endOffset": 346}, {"referenceID": 11, "context": "To this end, we propose a novel attack methodology based on adversarial example attacks against deep learning models [13].", "startOffset": 117, "endOffset": 121}, {"referenceID": 5, "context": "[7], the results of which verify the feasibility of policy induction attacks by incurring minimal perturbations in the environment or sensory inputs of an RL system.", "startOffset": 0, "endOffset": 3}, {"referenceID": 12, "context": "We also discuss the insufficiency of defensive distillation [14] and adversarial training [15] techniques as state of the art countermeasures proposed against adversarial example attacks on deep learning classifiers, and present potential techniques to mitigate the effect of policy induction attacks against DQNs.", "startOffset": 60, "endOffset": 64}, {"referenceID": 13, "context": "We also discuss the insufficiency of defensive distillation [14] and adversarial training [15] techniques as state of the art countermeasures proposed against adversarial example attacks on deep learning classifiers, and present potential techniques to mitigate the effect of policy induction attacks against DQNs.", "startOffset": 90, "endOffset": 94}, {"referenceID": 9, "context": "This optimization problem is typically solved using computationally efficient techniques such as Stochastic Gradient Descent (SGD) [11].", "startOffset": 131, "endOffset": 135}, {"referenceID": 4, "context": "A deep Q network (DQN) [6] is a multi-layered Q-network designed to mitigate such disadvantages.", "startOffset": 23, "endOffset": 26}, {"referenceID": 5, "context": "[7] demonstrate the application of this new Q-network technique to end-to-end learning of Q values in playing Atari games based on observations of pixel values in the game environtment.", "startOffset": 0, "endOffset": 3}, {"referenceID": 14, "context": "in [16], Szegedy et.", "startOffset": 3, "endOffset": 7}, {"referenceID": 14, "context": "According to the report of Szegedy [16] and many proceeding studies [13], it is possible to construct an adversarial example A = C + \u03b4, which is perceptually indistinguishable from C, but is classified incorrectly, i.", "startOffset": 35, "endOffset": 39}, {"referenceID": 11, "context": "According to the report of Szegedy [16] and many proceeding studies [13], it is possible to construct an adversarial example A = C + \u03b4, which is perceptually indistinguishable from C, but is classified incorrectly, i.", "startOffset": 68, "endOffset": 72}, {"referenceID": 15, "context": "Adversarial examples are misclassified far more often than examples that have been perturbed by random noise, even if the magnitude of the noise is much larger than the magnitude of the adversarial perturbation [17].", "startOffset": 211, "endOffset": 215}, {"referenceID": 15, "context": ", [17], and the Jacobian Saliency Map Algorithm (JSMA) approach by Papernot et.", "startOffset": 2, "endOffset": 6}, {"referenceID": 11, "context": ", [13].", "startOffset": 2, "endOffset": 6}, {"referenceID": 16, "context": "[18] proposed the first black-box approach to generating adversarial examples.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "Accordingly, the approach of [18] is based on generating a replica of the target network.", "startOffset": 29, "endOffset": 33}, {"referenceID": 17, "context": "It is noteworthy that even if the target\u2019s reward function is not known, it can be estimated via Inverse Reinforcement Learning techniques [19].", "startOffset": 139, "endOffset": 143}, {"referenceID": 4, "context": "For instance, in the case of video game learning [6], the attacker is capable of changing the pixel values of the game\u2019s frames, but not the score.", "startOffset": 49, "endOffset": 52}, {"referenceID": 5, "context": "[7] can be seen as consisting of two neural networks, one is the native network which performs the image classification and function approximation, and the other is the auxiliary", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "Considering that the attacker is not aware of the target\u2019s network architecture and its parameters at every time step, crafting adversarial states must rely on black-box techniques such as those introduced in [18].", "startOffset": 209, "endOffset": 213}, {"referenceID": 5, "context": "\u2019s DQN designed to learn Atari 2600 games [7].", "startOffset": 42, "endOffset": 45}, {"referenceID": 10, "context": "In our setup, we train the network on a game of Pong implemented in Python using the PyGame library [12].", "startOffset": 100, "endOffset": 104}, {"referenceID": 18, "context": "The training process of DQN is implemented in TensorFlow [20] and executed on an Amazon EC2 g2.", "startOffset": 57, "endOffset": 61}, {"referenceID": 19, "context": "2xlarge instance [21] with 8 Intel Xeon E5-2670 CPU cores and a NVIDIA GPU with 1536 CUDA cores and 4GB of video memory.", "startOffset": 17, "endOffset": 21}, {"referenceID": 5, "context": "[7], this input is first passed through two convolutional layers to extract a compressed feature space for the following two feed-forward layers for Q function estimation.", "startOffset": 0, "endOffset": 3}, {"referenceID": 14, "context": "[16], various counter-measures have been proposed to mitigate the exploitation of this vulnerability in deep neural networks.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[17] proposed to retrain deep networks on a set of minimally perturbed adversarial examples to prevent their misclassification.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[18] argue that by training the network on adversarial examples, the emerging network will have new adversarial examples and hence this technique does not solve the problem of exploiting this vulnerability for critical systems.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "al [14] proposed a technique named Defensive Distillation, which is also based on retraining the network on a dimensionally-reduced set of training data.", "startOffset": 3, "endOffset": 7}, {"referenceID": 20, "context": "This approach, too, was recently shown to be insufficient in mitigating adversarial examples [22].", "startOffset": 93, "endOffset": 97}], "year": 2017, "abstractText": "Deep learning classifiers are known to be inherently vulnerable to manipulation by intentionally perturbed inputs, named adversarial examples. In this work, we establish that reinforcement learning techniques based on Deep Q-Networks (DQNs) are also vulnerable to adversarial input perturbations, and verify the transferability of adversarial examples across different DQN models. Furthermore, we present a novel class of attacks based on this vulnerability that enable policy manipulation and induction in the learning process of DQNs. We propose an attack mechanism that exploits the transferability of adversarial examples to implement policy induction attacks on DQNs, and demonstrate its efficacy and impact through experimental study of a game-learning scenario.", "creator": "LaTeX with hyperref package"}}}