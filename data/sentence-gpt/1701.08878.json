{"id": "1701.08878", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Jan-2017", "title": "Deep Reinforcement Learning for Robotic Manipulation-The state of the art", "abstract": "The focus of this work is to enumerate the various approaches and algorithms that center around application of reinforcement learning in robotic ma- ]]nipulation tasks. Earlier methods utilized specialized policy representations and human demonstrations to constrict the policy. Such methods worked well with continuous state and policy space of robots but failed to come up with generalized policies. Nevertheless, the method of reinforcement learning is one of the most important of the field for understanding the field of reinforcement learning in robots. Here, we demonstrate that the method of reinforcement learning is one of the most important of the field for understanding the field of reinforcement learning in robots.\n\n\n\n\nA study on the field of reinforcement learning was conducted in March 2012. The results showed that the most widely used techniques to understand the fields of reinforcement learning are general techniques such as social psychology. It was the first time that we have been able to analyze this field in such a large way. We used a combination of research and field research to evaluate the quality of the research, and then evaluated the quality of the data.\n\nThe study examined the quality of the research and conducted the effects of the experiment on the results of a variety of experiments. One such experiment was the first that we have been able to analyze this field in such a large way. This was the first time that we have been able to analyze this field in such a large way.\nThe results showed that the most widely used techniques to understand the fields of reinforcement learning are general techniques such as social psychology. It was the first time that we have been able to analyze this field in such a large way. This was the first time that we have been able to analyze this field in such a large way. The study conducted the second time that we have been able to analyze this field in such a large way.\nThe study of the findings of a variety of experiments in the field of reinforcement learning and reinforcement learning have led to many great discoveries that have led to many great discoveries. We have created many of the best, most complete and most valuable studies that can be made available for study of these fields. This is why we have created many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have led to many great discoveries that have", "histories": [["v1", "Tue, 31 Jan 2017 00:16:15 GMT  (1483kb,D)", "http://arxiv.org/abs/1701.08878v1", "18 pages"]], "COMMENTS": "18 pages", "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["smruti amarjyoti"], "accepted": false, "id": "1701.08878"}, "pdf": {"name": "1701.08878.pdf", "metadata": {"source": "CRF", "title": "Deep reinforcement learning for robotic manipulation-the state of the art", "authors": ["Smruti Amarjyoti"], "emails": ["samarjyo@andrew.cmu.edu"], "sections": [{"heading": null, "text": "The focus of this work is to enumerate the various approaches and algorithms that center around application of reinforcement learning in robotic manipulation tasks. Earlier methods utilized specialized policy representations and human demonstrations to constrict the policy. Such methods worked well with continuous state and policy space of robots but failed to come up with generalized policies. Subsequently, high dimensional non-linear function approximators like neural networks have been used to learn policies from scratch. Several novel and recent approaches have also embedded control policy with efficient perceptual representation using deep learning. This has led to the emergence of a new branch of dynamic robot control system called deep reinforcement learning(DRL). This work embodies a survey of the most recent algorithms, architectures and their implementations in simulations and real world robotic platforms. The gamut of DRL architectures are partitioned into two different branches namely, discrete action space algorithms(DAS) and continuous action space algorithms(CAS). Further, the CAS algorithms are divided into stochastic continuous action space(SCAS) and deterministic continuous action space(DCAS) algorithms. Along with elucidating an organisation of the DRL algorithms this work also manifests some of the state of the art applications of these approaches in robotic manipulation tasks."}, {"heading": "1 Introduction", "text": "Reinforcement learning (RL) provides a neuropsychological and cognitive science perspective to animal behavior and sequential decision making. Recent studies\nar X\niv :1\n70 1.\n08 87\n8v 1\n[ cs\n.R O\n] 3\n1 Ja\nin cognitive science have also demonstrated analogies between the dopaminergic neurons in brains and temporal difference (TD) reinforcement learning algorithms. Other than the nature derived inspiration, several successful implementations of reinforcement learning (RL) in controlling dynamic robotic systems for manipulation, locomotion and autonomous driving [19], [1], [15] have proven the previously theoretical concept to be applicable in real time control of physical systems. Many of these methods use specialized policy structures to represent policies in order to put a cap on the number of iterations that are needed for optimizing the behaviour. Though efficient there is a loss of generality in adopting such an approach as it constricts the policy space to some specific trajectories [2]. Thus, non-linear function approximators like neural networks are used to parametrize the policy. This removes the requirement of using hand engineered policy representations and human supplied demonstrations to initialized them. Moreover, the use of higher number of parameters also theoretically ensures learning of complex behaviours that wouldn\u2019t have been possible with linear man made policies. Another important development in the field of RL has been indirectly borrowed from enormous successes of deep convolutional neural networks(CNN) [3] in image feature extraction. A direct implication of CNNs in reinforcement learning was the use of image pixels as states instead of joint parameters, which was widely in practice in RL landscape. Use of such an expressive parametrization also enabled learning of value function and policies that were previously deemed complicated. The paper by Riedmiller [5] demonstrated that neural networks can effectively be used as q-function approximators using neural fitted q-iteration algorithm. Later introduction of convolutional networks by Mnih et al. [4] turned neural networks based q learning as a base for DRL. Some of the ideas that were introduced like mini batch training and concept of target networks were pivotal to the success of non-linear RL methods. But, the initial algorithms were used to play classic Atari 2600 games with pixels as inputs and discrete actions as policy. The result were extraordinary with the artificial agent getting scores that were higher than human level performance and other model based learning methods. Attempts have been made to use deep q-learning (DQN) for high dimensional robotics tasks but with a very little success [6]. This is essentially because of the fact that most of the physical control tasks have high dimensional action spaces with continuous real valued action values. This posed a problem for introducing DQNs in manipulation tasks as they act as value function approximators and an additional iterative optimization process is necessary to use them for continuous spaces. The algorithms falling under this class are categorized into a group called discrete action space algorithms(DAS) as they are efficient only in discrete action domains. Another approach to parametrization of RL policies is to encode the policy directly\nand search for optimal solutions in the policy space. These methods known as policy search methods are popular as it gives an end-to-end connection between the states and feasible actions in the agent environment. The parameters can then be perturbed in order to optimize the performance output [7]. The advantage of this process over the earlier value approximation methods is that the policies are integrated over both action and state space, thus the search is more comprehensive than Q-learning. And it also solves the discrete action problem as the output policy, \u03c0(a|s) is a stochastic distribution over the action given a particular state. Thus, the policy representation provides probabilities over over action in a continuous space [8]. This class of continuous action algorithms are grouped into continuous action space algorithms(CAS). They include policy gradient and policy iteration algorithms that encode the policy directly and search over entire policy space. Initially developed and experimented on low dimensional state spaces, CAS algorithms have been integrated into CNN architecture in algorithms like deep deterministic policy gradients (DDPG) [21]. The CAS RL algorithms can further be divided into two subcategories, stochastic continuous action space(SCAS) and deterministic continuous action space(DCAS) algorithms. The main difference between both of the methods is basically the sample complexity. Even though stochastic policy gradient methods provide a better coverage of the policy search space, they require a large number of training samples in order to learn the policy effectively [8]. This is quite infeasible in robotic applications as exploration and policy evaluation comes at a price in such domains. Several methods like natural policy gradients and trust region policy gradients were developed in order to make policy search effective by adding additional constraints on the search process to restrict the agent to explore only promising regions. But, the discovery of deterministic policy gradients has led to an easier method whose performance surpasses stochastic policy algorithms as proven empirically by Silver et al [9]. The most important contribution of this paper is the organisation of the assortment of DRL algorithms on the basis of their treatment of action spaces and policy representations. Present DRL methodologies in literature are classified into the groups, DAS, CAS, SCAS and DCAS whose details has been described above. Following sections include a background of the evolution of reinforcement learning and preliminaries laying a foundation to understand the algorithms and description of some of the basic algorithms encompassing DRL. Experiments and real time implementations associated with these methods are also described to give an insight into the practical complexity of implementing these algorithms on physical robots/simulations."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Preliminaries", "text": "All of the reinforcement learning methods studied in this paper are basically control problems in which an agent has to act in a stochastic environment by choosing action in a sequential manner over several time steps, with an intention to maximise the cumulative reward. The problem is modelled as a Markov decision process (MDP) which comprises of a state space S, an action space A, an initial state distribution with density p1(s1), a stationary transition dynamics model with density p(st+1|st, at) that satisfies the Markov property p(st+1|s1, a1, ....st, at) = p(st+1|st, at for any trajectory in the state-action space and a reward function R(st, at) : S\u00d7A\u2192 R. A policy can be defined as the mapping of state to action distributions and the objective of an MDP is to find the optimal policy. Generally a policy is stochastic and is denoted by \u03c0\u03b8 : S \u2192 P (A), where P (A) is the probability distribution of performing that action and \u03b8 \u2208 Rn is a vector of parameters that define the policy, \u03c0\u03b8(at, st). A deterministic policy on the other hand is denoted by \u00b5(st) and is a discrete mapping of S \u2192 A. A agent uses the policy to explore the environment and generate trajectories of states, rewards and actions, \u03b61:t = s1, a1, r1, ...., st, at, rt. The total return or performance is determined by calculating the total discounted reward from time step t onwards.\nR\u03b3t = inf\u2211 k=t \u03b3k\u2212tR(sk, ak) , where 0 < \u03b3 < 1 (1)\nValue function of a particular state is defined as the expected total discounted reward if an agent were to initiate from that particular state and generate trajectories thereafter.\nV \u03c0(s) = E[R\u03b3|S = s; \u03c0] (2)\nThe action-value function on the other hand is defined as the expected discounted reward if the agent takes an action a from a state s and follows the policy distribution thereafter.\nQ\u03c0(s, a) = E[R\u03b3|S = s;A = a; \u03c0] (3)\nThe agent\u2019s overall goal is to obtain a policy that results in maximisation of cumulative discounted reward form the start state. This is denoted by finding appropriate \u03c0 for the performance objective J(\u03c0) = E[R\u03b3|\u03c0]. The density of the state s \u2032 after transitioning for t time steps from initial state s is given by p(s\u2192s\u2032 , t, \u03c0). The discounted state distribution is then given by\n\u03c1\u03c0(s \u2032 ) = \u222b s \u2211inf t=1 \u03b3 t\u22121p1(s)p(s \u2192 s \u2032 , t, \u03c0)ds. The performance objective can be represented as a unified expectation function,\nJ(\u03c0\u03b8) = \u222b S \u03c1\u03c0(s) \u222b A \u03c0\u03b8(s, a)R(s, a)dads\n= Es\u2208\u03c1\u03c0 ,a\u2208\u03c0\u03b8[R(s, a)] (4)"}, {"heading": "2.2 Evolution of RL", "text": "Early reinforcement learning(RL) algorithms for prediction and control were focused on the process of refinement of optimal policy evaluation techniques and reduction of computational complexity of the approaches. This led to the emergence of exploration vs exploitation techniques, on-policy and off-policy approaches, model free and model based and various PAC(Probable approximate correct) methods. Although the algorithms were feasible computationally and showed convergence to optimal policies in polynomial time, they posed a major hindrance when applied to generate policies for high dimensional control scenarios like robotic manipulation. Two techniques stand out from the newly developed RL methodologies, namely function approximation and policy search. The philosophy of these two approaches is to parameterize the action-value function and the policy function. Further, gradient of the policy value is taken to search for the optimal policy that results in a global maxima of expected rewards. Moreover, due to the hyper dimensional state-space and continuous action-space the robot operates in, policy search methods are the most viable and possible the only method considered suitable for robotics control."}, {"heading": "2.3 RL for motor control", "text": "Application of RL in robotics have included locomotion, manipulation and autonomous vehicle control [19]. Most of the real world tasks are considered episodic and it is also hard to specify a concise reward function for a robotic task. This problem is tackled by the use of a technique called learning by demonstration or apprenticeship learning [22]. One of the methods to solve the uncertain reward problem is inverse reinforcement learning where the reward function is updated continuously and an appropriate policy is generated in the end Another effective method to model the policies is the use of motor policies to represent stochastic policy \u03c0(at|st, t), that is inspired from the works of Kober and Peters [15]. They devised an Expectation Maximization (EM) based algorithm called Policy Learning by Weighing Exploration with Returns(PoWER). When learning motor primitives, they turn this deterministic mean policy into a stochastic policy using additive exploration in order to make model-free reinforcement learning possible. Here, the motor primitives\nare derived from the concept of Dynamic Motor Primitives (DMPs) that describe movement as a set of differential equations such that any external perturbation is accommodated without losing the motion pattern. Certain other approaches like guided policy search [10] also introduced more versatile policy representations like differential dynamic programming (DDP). These policy have been used for generating guiding samples to speed up the learning process in non linear policies. This gives more flexibility and generalization than earlier structured policy approaches. But, even though such hybrid model based and specialized policy methods work well in robots, there has always been an interest towards learning policies end-to-end from visual stimulus. Thus, convolutional architectures have been introduced into the domain of RL and motor control, known as visuo-motor control policy networks."}, {"heading": "2.4 RL for visuo-motor control", "text": "Many of the RL methods demonstrated on physical robotic systems have used relatively low-dimensional policy representations, typically with under one hundred parameters, due to the difficulty of efficiently optimizing high-dimensional policy parameter vectors. But the paper by Mnih et al. introduced an effective approach to combine larger policy parameterizations by combining deep learning and reinforcement learning [4]. This concept of generating efficient non-linear representations is transferred into robotic tasks of grasping and continuous servoing in some recent research carried out by Levine et al. [14] and Kober et al [?]. End-to-end learning of visuo-motor policies is made possible with such an approach which in turn learns the features form the observations that are relevant for the specific task. One of the problems that was encountered with neural network learning of policies was the convergence of some weights to infinity when trained with similar instances of input observations [20]. Solving of this difficulty using experience replay methods constituting randomization of the episodes gave the necessary boost to RL in real life control problems. The current state of the art in deep-reinforcement learning includes the algorithms employed by google deepmind research namely DQN (Deep Q network) for discrete actions and Deep deterministic policy gradients (DDPG) for continuous action spaces [16]. DQN is a simple value approximation method while DDPG uses a underlying actor-critic framework for policy evaluation. Efficacy of both of these methods have been demonstrated empirically for performing complex robotic manipulation tasks like door opening and ball catching [21]."}, {"heading": "3 DRL topology", "text": "The Deep reinforcement learning algorithms prevailing currently are structured according to the topology in Fig. 1. The initial problem of planning in continuous and high dimensional state spaces can be considered solved due to the extensive use of neural networks with large number of parameters for function/policy modelling. But, the problem at hand now is the mapping of these continuous states to high-dimensional continuous action spaces. The present concentration in the DRL community based on this issue and hence, it seems quite apt to organise the various learning approaches based on this ground. Moreover it also demonstrates the capabilities and limitations of the prevalent algorithms quite clearly. The methods are divided into two sections namely, Discrete action space(DAS) approaches and Continuous action space(CAS) approaches. Further, CAS methods are divided into Stochastic continuous action space(SCAS) and Deterministic continuous action space(DCAS) methods. The various algorithms that come under the purview of DAS are deep q-networks, duelling networks, normalized advantage function and related function approximation approaches to decision making. CAS mostly include policy search approaches that parametrize the policy directly and optimized it using evaluation and gradient based approaches. CAS is further branched into SCAS methods where CNN are used to estimate a stochastic policy and DCAS methods which predicts deterministic policies. Even though this demarcation provides a near comprehensive description of the DRL methods, it misses out on several other RL approaches like likelihood ratio maximisation, black box methods, modelbased methods which are not directly related to DRL."}, {"heading": "4 Discrete action space algorithms (DAS)", "text": ""}, {"heading": "4.1 Deep Q-network (DQN)", "text": "The DQN architecture was the first successful integration of deep learning with Q-learning framework [4]. Q-learning forms the base of most of the model-free RL algorithms. It includes exploration of the environment using a behaviour policy and learn the Q-function for the possible action-state pairs using the experience that is gathered from the exploration. The following equation described Q-learning, where \u03b1 is the learning rate and the observations that are obtained after exploration be a, r, s \u2032 , where a is the action taken, r is the rewards received and s \u2032 is the next observed state. Q(s, a)sample = r(s, a) + \u03b3.maxaQ(s \u2032 , a)\nQ(s, a) = \u03b1Q(s, a)sample + (1\u2212 \u03b1)Q(s, a) (5)\nThe only difference between naive Q-learning and DQN is the use of CNN as function approximators instead of linear approximators. The use of hierarchical networks enables the use of continuous high dimensional images as states which estimates the optimal action-value function. RL was considered to be unstable when using nonlinear approximators such as a neural network, which is because of the correlations present in the sequence of observations and the correlations between the actionvalues and the target values. In order to solve this, Mnih et al. devised a method of asynchronous training of the Q-network called experience replay. Here, the experience e = {st, at, rt, st+1} is stored in a pool and mini-batches of experiences are accessed during training uniformly. This is then used to optimize the loss function,\nL(\u03b8) = E(s,a,r,s\u2032 )[(r + \u03b3maxaQ(s \u2032 , a|\u03b8\u2212)\u2212Q(s, a|\u03b8)2] (6)\nFig.2 describes the architecture of the Q-network that consists of 3 convolutional layers, with filter sizes 32x8x8;stride 4, 64x4x4;stride 4 and 64x3x3;stride 2. The final two layers are fully connected layers with 512 neurons and outputs are discrete in\nthe number of actions considered. The activations chosen are rectified linear units. The second important contribution of DQN other than replay buffer was the use of target networks Q\u0302(s, a) for generating target values for the network\u2019s loss function. This helps to reduce oscillations during training and leads to easy convergence. The target network is updated with the online Q network after a specific number of time steps. Execution of this methods is limited to agents requiring discrete action space but, some early works have embedded the DQN technique to learn optimal actions from visual inputs. Zhang et al. have utilized the exact same architecture to learn the optimal control policies for a baxter robot arm. Instead of controlling the entire 7DOF of the robot arm, only the 4DOF shown in the Fig.3(a) simulation are controlled. The actions are discretized into nine distinct outputs, that include going up, going down or staying put in denominations of 0.02 rad. After training, the network was used to control a real robotic arm with marginal success as it was prone to discrepancies in the input image. Moreover, training in simulation and transferring the control system to real-time robots proved to be detrimental for safety and performance."}, {"heading": "4.2 Double Deep Q-networks", "text": "Double deep Q-networks are an improved version of DQN that was first introduced by Hasselet et al. [11]. In Q-learning and DQN, the max operator utilizes the same values for both behaviour policy and evaluation of actions. This in turn gave overestimating value estimates. In order to mitigate this, DDQN uses the target as:\nyDDQN = r + \u03b3Q(s \u2032 , a \u2032 |\u03b8)|\u03b8\u2212) (7)"}, {"heading": "4.3 Deep duelling network architecture", "text": "Duelling architecture, is a model-free algorithm developed by Wang et al. [12] draws its inspiration from residual RL and the concept of Advantage learning and updating by Baird [13]. In advantage learning instead of estimation of action-value function, an advantage function is calculated which is defined as the rate of increase of reinforcement when a particular action is taken. The prime importance of advance learning is that the advantage values have higher variance that leads to easy convergence. Moreover, the policy doesn\u2019t change discontinuously with changing values. The duelling architecture maintains both V (s) and A(s, a) with a single deep model and a simple output operation combines both these output to get back the Q(s, a) value. As the output is same as DDQN and DQN, this network can be trained with any value iteration method. Considering the duelling network described in Fig. 4 where one stream outputs V (s|\u03b8, \u03b2) and other A(s, a|\u03b8, \u03b1). \u03b8 and \u03b1 denote the convolutional network parameters. The last module is implemented using a forward mapping function:\nQ(s, a|\u03b8, \u03b1, \u03b2) = V (s|\u03b8, \u03b2) + (A(s, a|\u03b8, \u03b1)\u2212 1 \u2016A\u2016 \u2211 a A(s, a|\u03b8, \u03b1)) (8)\nThe architecture was used to train an artificial agent learn the 57 games in Atari arcade learning environment from raw pixel observations. The final acquired rewards were compared with that of human performance and DQN networks. Duelling networks performed 75% better than the naive Q-networks as reported in the paper [12]. For applications with discrete action robotic tasks duelling architecture can be used for better performance, though a concrete application is missing from literature."}, {"heading": "5 Continuous action space algorithms (CAS)", "text": ""}, {"heading": "5.1 Normalized advantage functions (NAF)", "text": "Gu et al. proposed a model free approach that used Q-learning to plan in continuous action spaces with deep neural networks, which they refer as Normalized advance functions (NAF). The idea behind NAF is to describe Q function in a way such that its maximum, argmaxaQ(st, at) can be obtained easily and analytically during the Q-learning update. The inherent processes are equivalent to that of Duelling networks as a separate value function V (s|\u03b8) and advantage term are estimated. But, the difference is that the advantage in this case is parametrized as a quadratic function of non-linear features of the state:\nQ(s, a|\u03b8) = A(s, a|\u03b8) + V (s|\u03b8) (9)\nA(s, a|\u03b8) = \u22121 2 (a\u2212 \u00b5(s|\u03b8)P (s|\u03b8)(a\u2212 \u00b5(s|\u03b8) (10)\nP (s|\u03b8) is a state-dependent, positive definite square matrix that is parametrized by L(s|\u03b8)L(s|\u03b8)T , where L is a lower triangular matrix whose entries come from the linear activations of the neural network. The rest of the network architecture is similar to that of DQN by Mnih et al. The paper also explored the use of a hybrid model based method by generating imagination rollouts from fitted dynamics model. This incorporated the inclusion of synthetic experience data from the fitted local linear feedback controllers and including them in the replay buffer of on-policy exploration of Q-learning.\nThe algorithms was tested in several robotic environments as shown in Fig.5. The\nenvironments include the MuJoCo simulator tasks from Todorov et al. that include 3DOF robotic manipulation tasks where an arm gets reward based on the distance between the end effector and the object to be grasped. It also includes a sex joint\n2D swimmer and a four legged ant. Policies learnt with this method showed more precise completion of tasks as compared to deep policy gradient methods [17]."}, {"heading": "5.2 Stochastic policy gradient", "text": "Stochastic policy gradient methods parametrize the policy directly rather than trying to optimize the value functions. These are one of the most popular class of continuous action RL algorithms. The central idea behind these algorithms is to adjust the parameters \u03b8 of the policy in the direction of the gradient of the performance, i.e \u2206\u03b8J(\u03c0\u03b8). The fundamental theorem underpinning these algorithms is the policygradienttheorm [18].\n\u2206\u03b8J(\u03c0\u03b8) = \u222b S \u03c1\u03c0(s) \u222b A \u2206\u03b8\u03c0\u03b8(a|s)Q(s, a)dads\n= E[\u2206\u03b8log\u03c0\u03b8(a|s)Q(s, a)] (11)\nThe interesting aspect of this theorem is that even though the state distribution depends on the network parameters, the policy gradient doesn\u2019t depend on the gradient of the distribution. But, one of the issues that these algorithms have to address is the estimation of the Q(s, a) function as evident from the above equation. Even though policy gradient algorithms provide an end-to-end method for policy search, it is rarely used in robot policy optimization tasks. This is because of the high sample complexity of such algorithms. Policy gradients use on-policy exploration policy and that results in it needing a large number of training data to learn, that is infeasible for robots. Above figure depicts a stochastic policy gradient algorithm\nthat is used by Levine et al. [14] for autonomous grasping of objects in cluttered\nenvironments. The input is a monocular image showing objects and robot end effector and the robot actions in the 7th layer of the deep network. The output is the probability distribution of the action given the particular state. The network takes 800,000 labelled images to train which gives a clear indication of the sample complexity of SCAS methods."}, {"heading": "5.3 Stochastic actor-critic methods", "text": "Actor-critic methods are widely used architectures that are again based on the Policy gradient theorem. As depicted from the policy gradient equation, the term Q(s, a) is missing from the gradient and needs to be calculated. Hence, the critic network estimates this Q(s, a) value in order to find the derivatives of the actor network,\u2206\u03c0\u03b8(s)."}, {"heading": "5.4 Trust Region Policy Optimization", "text": "TRPO is a policy optimization algorithm that restricts the search space of the policy by applying constraints on the output policy distributions. This is done by penalizing the network parameters using a KL divergence loss function upon the parameters, DmaxKL (\u03b8old, \u03b8). Intuitively this constraint doesn\u2019t let large scale changes to occur in the policy distribution and hence, helps in early convergence of the network. The above figure depicts the networks that were used to control the swimmer\nand hopper tasks in MuJoCo environments. The input state space consisted of joint angles and robot kinematics and the rewards were linear functions."}, {"heading": "5.5 Deterministic policy gradient algorithm", "text": "The deterministic policy gradient algorithm (DPG) is derived from its counterpart stochastic policy gradient algorithm and is dependent of a similar deterministic policy gradient theorem . In continuous action spaces, greedy policy improvement becomes problematic and needs global optimization during policy improvement step [9]. As a result the it is more computationally tractable to update the policy parameters in the direction of the gradient of the Q function.\n\u03b8k+1 = \u03b8k + \u03b1E[\u2206\u03b8Q(s, \u00b5\u03b8(s)] (12)\nHere, \u00b5\u03b8(s) is the deterministic policy, \u03b1 is the learning rate and \u03b8 are the policy parameters. Chain can be applied to the above equation in order to get the policy gradient equation:\n\u03b8k+1 = \u03b8k + \u03b1E[\u2206\u03b8\u00b5\u03b8(s)\u2206aQ(s, \u00b5\u03b8(s)] (13)\nThe above update rule can be incorporated into a deep neural network architecture where the policy parameters are updated using stochastic gradient ascent. To realise this an actor-critic method is necessary. The critic estimates the action-value function while the actor derives its gradients from the critic to update its parameters. The gradient of policy parameters is the product of the gradient of Q value with respect to action and the action with respect to the policy parameters. Fig. 8 shows the deterministic actor critic network.\nThis is also the basis of DDPG (deep deterministic policy gradient algorithm) which performs better than any other continuous action algorithm. Methods such as NAF and DDPG have been used for learning complex robotic manipulation tasks in real time [16]. The authors trained a 7DOF Jaco arm for reaching and door\nopening tasks without any policy initializations and demonstrations. They used deep network architectures with a 20 dimensional state space consisting of the joint angles, velocities and the end effector pose. The reward function for the reaching task was the distance between the end effector and the object, whereas for door opening the reward was the sum of distance to the door knob and the degrees of rotation of the knob. Another significant contribution of this paper was the use of asynchronous leaning by parallelizing the data collection process. It was proved that using multiple robots reduces the training times by a factor of the number of robots."}, {"heading": "6 Discussion", "text": "Algorithmic ideas, theories and implementation details of several deep reinforcement learning algorithms have been delineated in detail. It can be concluded that for the purpose of robotic manipulation continuous action domain algorithms are the most fruitful and applicable. Further, it can be observed that there is a trend towards exploration of sample efficient and time efficient algorithms, having solved both continuous state and action space problems. Breakthroughs in these domains will have significant impacts in the field of robotics learning. Also, as demonstrated from current state of the art in DRL, the approaches fail to handle complex policies. A reason could be that complicated policies require more samples to learn and even a sophisticated reward function. This observation highlights a void in RL in robotics. There is a need to learn highly complicated reward functions and methods to represent highly skilled behaviours and skills. This are of Inverse reinforcement learning needs to be paid more attention while learning policies using DRL. After all, complexity of the reward function is proportional to the policy complexity. Reinforcement learning is an evolved form of the cognitive architecture SORE. There is a need to reconnect the new DRL approaches to its roots in cognitive science. The\nproblems in DRL might find extremely useful insights from theories and empirical evidence from cognitive psychology. One of the important drawbacks of DRL algorithms and visuo-motor architectures are the lack of capability of transfer learning. It is difficult to transfer skills and use the knowledge of already learnt policies to learn even complicated policies. A mechanism needs to be developed so that policies doesn\u2019t have to be learnt from scratch, but can be inherited. Many problems with temporally spread out rewards lead to credit assignment problem in RL. Thus, the reward structure too needs to be redesigned. There have been several works in incorporating intrinsic motivation in reinforcement learning as a method to induce temporal abstractions in agents [23]. These setups known as semi-Markovian decision process can be used to learn hierarchical planning actions by learning step by step about the task at hand, just as a human does. Another most important aspect of DRL that hasn\u2019t been touched upon in the main body is an approach known as guided policy search (GPS). This is because of it incipient stages in DRL currently, but the approach holds significant potential in learning robotic tasks with minimal trials. The central idea behind the algorithm is to mix model based and model free algorithms and use linear models to generate samples in order to guide the learning process. This seems like a valid assumption as humans/animals don\u2019t always learn actions from scratch, but take advantage of already well developed models of their body and physics."}], "references": [{"title": "A Survey on Policy Search for Robotics", "author": ["M.P. Deisenroth", "G. Neumann", "J. Peters"], "venue": "Foundations and Trends in Robotics,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Guided Policy Search", "author": ["S. Levine", "V. Koltun"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing systems (pp. 1097-1105)", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski", "S. Petersen"], "venue": "Nature, 518(7540),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "October. Neural fitted Q iterationfirst experiences with a data efficient neural reinforcement learning method", "author": ["M. Riedmiller"], "venue": "In European Conference on Machine Learning (pp", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "Towards vision-based deep reinforcement learning for robotic motion control", "author": ["F. Zhang", "J. Leitner", "M. Milford", "B. Upcroft", "P. Corke"], "venue": "arXiv preprint arXiv:1511.03791", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Reinforcement learning: An introduction (Vol", "author": ["R.S. Sutton", "A.G. Barto"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1998}, {"title": "Trust region policy optimization. CoRR, abs/1502.05477", "author": ["J. Schulman", "S. Levine", "P. Moritz", "M.I. Jordan", "P. Abbeel"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "Deterministic policy gradient algorithms", "author": ["G. Lever"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Learning neural network policies with guided policy search under unknown dynamics", "author": ["S. Levine", "P. Abbeel"], "venue": "In Advances in Neural Information Processing Systems (pp. 1071-1079)", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Deep reinforcement learning with double Q-learning", "author": ["H. Van Hasselt", "A. Guez", "D. Silver"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Dueling network architectures for deep reinforcement learning", "author": ["Z. Wang", "N. de Freitas", "M. Lanctot"], "venue": "arXiv preprint arXiv:1511.06581", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Reinforcement learning through gradient descent (Doctoral dissertation, US Air Force Academy, US)", "author": ["III L.C. Baird"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1999}, {"title": "Learning Hand- Eye Coordination for Robotic Grasping with Deep Learning and Large-Scale Data Collection", "author": ["S. Levine", "P. Pastor", "A. Krizhevsky", "D. Quillen"], "venue": "arXiv preprint arXiv:1603.02199", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2016}, {"title": "Policy search for motor primitives in robotics. In Advances in neural information processing systems (pp. 849-856)", "author": ["J. Kober", "J.R. Peters"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Deep Reinforcement Learning for Robotic Manipulation", "author": ["S. Gu", "E. Holly", "T. Lillicrap", "S. Levine"], "venue": "arXiv preprint arXiv:1610.00633", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "Continuous Deep Q- Learning with Model-based Acceleration", "author": ["S. Gu", "T. Lillicrap", "I. Sutskever", "S. Levine"], "venue": "arXiv preprint arXiv:1603.00748", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Policy Gradient Methods for Reinforcement Learning with Function Approximation", "author": ["R.S. Sutton", "D.A. McAllester", "S.P. Singh", "Y. Mansour"], "venue": "In NIPS (Vol", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1999}, {"title": "Reinforcement learning in robotics: A survey", "author": ["J. Kober", "J.A. Bagnell", "J. Peters"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "End-to-end training of deep visuomotor policies", "author": ["S. Levine", "C. Finn", "T. Darrell", "P. Abbeel"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2016}, {"title": "Continuous control with deep reinforcement learning", "author": ["T.P. Lillicrap", "J.J. Hunt", "A. Pritzel", "N. Heess", "T. Erez", "Y. Tassa", "D. Silver", "D. Wierstra"], "venue": "arXiv preprint arXiv:1509.02971", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Apprenticeship learning via inverse reinforcement learning", "author": ["P. Abbeel", "A.Y. Ng", "July"], "venue": "In Proceedings of the twenty-first international conference on Machine learning (p", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2004}, {"title": "Intrinsically motivated reinforcement learning", "author": ["N. Chentanez", "A.G. Barto", "S.P. Singh"], "venue": "In Advances in neural information processing systems (pp. 1281-1288)", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2004}], "referenceMentions": [{"referenceID": 18, "context": "Other than the nature derived inspiration, several successful implementations of reinforcement learning (RL) in controlling dynamic robotic systems for manipulation, locomotion and autonomous driving [19], [1], [15] have proven the previously theoretical concept to be applicable in real time control of physical systems.", "startOffset": 200, "endOffset": 204}, {"referenceID": 0, "context": "Other than the nature derived inspiration, several successful implementations of reinforcement learning (RL) in controlling dynamic robotic systems for manipulation, locomotion and autonomous driving [19], [1], [15] have proven the previously theoretical concept to be applicable in real time control of physical systems.", "startOffset": 206, "endOffset": 209}, {"referenceID": 14, "context": "Other than the nature derived inspiration, several successful implementations of reinforcement learning (RL) in controlling dynamic robotic systems for manipulation, locomotion and autonomous driving [19], [1], [15] have proven the previously theoretical concept to be applicable in real time control of physical systems.", "startOffset": 211, "endOffset": 215}, {"referenceID": 1, "context": "Though efficient there is a loss of generality in adopting such an approach as it constricts the policy space to some specific trajectories [2].", "startOffset": 140, "endOffset": 143}, {"referenceID": 2, "context": "Another important development in the field of RL has been indirectly borrowed from enormous successes of deep convolutional neural networks(CNN) [3] in image feature extraction.", "startOffset": 145, "endOffset": 148}, {"referenceID": 4, "context": "The paper by Riedmiller [5] demonstrated that neural networks can effectively be used as q-function approximators using neural fitted q-iteration algorithm.", "startOffset": 24, "endOffset": 27}, {"referenceID": 3, "context": "[4] turned neural networks based q learning as a base for DRL.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "Attempts have been made to use deep q-learning (DQN) for high dimensional robotics tasks but with a very little success [6].", "startOffset": 120, "endOffset": 123}, {"referenceID": 6, "context": "The parameters can then be perturbed in order to optimize the performance output [7].", "startOffset": 81, "endOffset": 84}, {"referenceID": 7, "context": "Thus, the policy representation provides probabilities over over action in a continuous space [8].", "startOffset": 94, "endOffset": 97}, {"referenceID": 20, "context": "Initially developed and experimented on low dimensional state spaces, CAS algorithms have been integrated into CNN architecture in algorithms like deep deterministic policy gradients (DDPG) [21].", "startOffset": 190, "endOffset": 194}, {"referenceID": 7, "context": "Even though stochastic policy gradient methods provide a better coverage of the policy search space, they require a large number of training samples in order to learn the policy effectively [8].", "startOffset": 190, "endOffset": 193}, {"referenceID": 8, "context": "But, the discovery of deterministic policy gradients has led to an easier method whose performance surpasses stochastic policy algorithms as proven empirically by Silver et al [9].", "startOffset": 176, "endOffset": 179}, {"referenceID": 18, "context": "Application of RL in robotics have included locomotion, manipulation and autonomous vehicle control [19].", "startOffset": 100, "endOffset": 104}, {"referenceID": 21, "context": "This problem is tackled by the use of a technique called learning by demonstration or apprenticeship learning [22].", "startOffset": 110, "endOffset": 114}, {"referenceID": 14, "context": "One of the methods to solve the uncertain reward problem is inverse reinforcement learning where the reward function is updated continuously and an appropriate policy is generated in the end Another effective method to model the policies is the use of motor policies to represent stochastic policy \u03c0(at|st, t), that is inspired from the works of Kober and Peters [15].", "startOffset": 363, "endOffset": 367}, {"referenceID": 9, "context": "Certain other approaches like guided policy search [10] also introduced more versatile policy representations like differential dynamic programming (DDP).", "startOffset": 51, "endOffset": 55}, {"referenceID": 3, "context": "introduced an effective approach to combine larger policy parameterizations by combining deep learning and reinforcement learning [4].", "startOffset": 130, "endOffset": 133}, {"referenceID": 13, "context": "[14] and Kober et al [?].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "One of the problems that was encountered with neural network learning of policies was the convergence of some weights to infinity when trained with similar instances of input observations [20].", "startOffset": 188, "endOffset": 192}, {"referenceID": 15, "context": "The current state of the art in deep-reinforcement learning includes the algorithms employed by google deepmind research namely DQN (Deep Q network) for discrete actions and Deep deterministic policy gradients (DDPG) for continuous action spaces [16].", "startOffset": 246, "endOffset": 250}, {"referenceID": 20, "context": "Efficacy of both of these methods have been demonstrated empirically for performing complex robotic manipulation tasks like door opening and ball catching [21].", "startOffset": 155, "endOffset": 159}, {"referenceID": 3, "context": "The DQN architecture was the first successful integration of deep learning with Q-learning framework [4].", "startOffset": 101, "endOffset": 104}, {"referenceID": 10, "context": "[11].", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[12] draws its inspiration from residual RL and the concept of Advantage learning and updating by Baird [13].", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[12] draws its inspiration from residual RL and the concept of Advantage learning and updating by Baird [13].", "startOffset": 104, "endOffset": 108}, {"referenceID": 11, "context": "Duelling networks performed 75% better than the naive Q-networks as reported in the paper [12].", "startOffset": 90, "endOffset": 94}, {"referenceID": 16, "context": "Policies learnt with this method showed more precise completion of tasks as compared to deep policy gradient methods [17].", "startOffset": 117, "endOffset": 121}, {"referenceID": 17, "context": "The fundamental theorem underpinning these algorithms is the policygradienttheorm [18].", "startOffset": 82, "endOffset": 86}, {"referenceID": 13, "context": "[14] for autonomous grasping of objects in cluttered", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "In continuous action spaces, greedy policy improvement becomes problematic and needs global optimization during policy improvement step [9].", "startOffset": 136, "endOffset": 139}, {"referenceID": 15, "context": "Methods such as NAF and DDPG have been used for learning complex robotic manipulation tasks in real time [16].", "startOffset": 105, "endOffset": 109}, {"referenceID": 22, "context": "There have been several works in incorporating intrinsic motivation in reinforcement learning as a method to induce temporal abstractions in agents [23].", "startOffset": 148, "endOffset": 152}], "year": 2017, "abstractText": "The focus of this work is to enumerate the various approaches and algorithms that center around application of reinforcement learning in robotic manipulation tasks. Earlier methods utilized specialized policy representations and human demonstrations to constrict the policy. Such methods worked well with continuous state and policy space of robots but failed to come up with generalized policies. Subsequently, high dimensional non-linear function approximators like neural networks have been used to learn policies from scratch. Several novel and recent approaches have also embedded control policy with efficient perceptual representation using deep learning. This has led to the emergence of a new branch of dynamic robot control system called deep reinforcement learning(DRL). This work embodies a survey of the most recent algorithms, architectures and their implementations in simulations and real world robotic platforms. The gamut of DRL architectures are partitioned into two different branches namely, discrete action space algorithms(DAS) and continuous action space algorithms(CAS). Further, the CAS algorithms are divided into stochastic continuous action space(SCAS) and deterministic continuous action space(DCAS) algorithms. Along with elucidating an organisation of the DRL algorithms this work also manifests some of the state of the art applications of these approaches in robotic manipulation tasks.", "creator": "LaTeX with hyperref package"}}}