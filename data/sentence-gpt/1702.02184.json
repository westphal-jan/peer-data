{"id": "1702.02184", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Feb-2017", "title": "Transfer from Multiple Linear Predictive State Representations (PSR)", "abstract": "In this paper, we tackle the problem of transferring policy from multiple partially observable source environments to a partially observable target environment modeled as predictive state representation. This is an entirely new approach with no previous work, other than the case of transfer in fully observable domains. We develop algorithms to successfully achieve policy transfer when we have the model of both the source and target tasks and discuss in detail their performance and shortcomings.\n\n\n\n\n\nThe approach to transfer is one of the most common approaches we use to transfer policy from multiple partially observable sources. This approach is also a well known one of the most common and widely used to implement the same model. While we did not present the actual target code, we made the assumption that our primary goal of transferring policy across multiple portions of the source data was to generate robust and robust policy transfer across the entire source system. For this reason, our approach provides a good example of how to transfer policy across all parts of the source system.\nThe main goal of this approach is to transfer policy from two part of the source data into a single part of the target data. A number of major reasons include the following:\nWe also use our model as an initial target for the full source system. In our model, we can store a single part of the target data into the source system. This means that if we have the model that is actually the target, we can expect to generate the policy transfer on the entire target target data.\nWhen using multiple parts of the target data, we can easily have the model that is actually the target, even if the model is in the target data. We have implemented the model as an initial target for the full source system, but that model cannot be used in multiple parts of the source data. We now have a fully observable target code that does the same thing for all the target code, and we are now able to transfer policy from both the source and target tasks. The data is now stored by a new instance of the source. If we have the model that is a part of the target data, we can easily transfer policy from both the source and target tasks, for example when a source changes.\nIn this paper, we focus on our general principles and design to improve our model and its performance. We have created a separate approach to transfer policy from both source and target code, and implemented the model as a part of the target data as a whole, which provides the same information for both the source and target tasks. In the main article we talk about our model for", "histories": [["v1", "Tue, 7 Feb 2017 20:14:30 GMT  (54kb,D)", "http://arxiv.org/abs/1702.02184v1", "8 pages, 3 algorithms, 3 figures"]], "COMMENTS": "8 pages, 3 algorithms, 3 figures", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["sri ramana sekharan", "ramkumar natarajan", "siddharthan rajasekaran"], "accepted": false, "id": "1702.02184"}, "pdf": {"name": "1702.02184.pdf", "metadata": {"source": "CRF", "title": "Transfer from Multiple Linear Predictive State Representations (PSR)", "authors": ["Sri Ramana Sekharan", "Ramkumar Natarajan", "Siddharthan Rajasekaran"], "emails": ["ssekharan@wpi.edu", "rnatarajan@wpi.edu", "sperundurairajas@wpi.edu"], "sections": [{"heading": null, "text": "In this paper we tackle the problem of transferring policy from multiple partially observable source environments to a partially observable target environment modeled as predictive state representation. This is an entirely new approach with no previous work, other than the case of transfer in fully observable domains. We develop algorithms to successfully achieve policy transfer when we have the model of both the source and target tasks and discuss in detail their performance and shortcomings. These algorithms could be a starting point for the field of transfer learning in partial observability."}, {"heading": "1 INTRODUCTION", "text": "The goal of reinforcement learning is to come up with a way to optimally interact with the environment, modeled as a sequential decision making process. In case of fully observable domains, the environment is modelled as a Markov decision Process. Off the shelf, algorithms like Q-learning are designed to find the optimal policy in such domains. In the case of partially observable domains, the environment is modeled as a Partially Observable Markov Decision Process (POMDPs). Solving a POMDP is still a field of research due to the nonscalability of value iteration like approaches. One of the big disadvantages of POMDPs is the inherent need to specify the underlying states beforehand. This is because the state representation in POMDPs consist of beliefs over latent set of states. This causes problems since in some sense \u201dstates\u201d are an imaginary entities unobservable to the agent.\n\u2217Robotics Department. Worcester Polytechnic Institute. Worcester, MA 01609\nTo alleviate the above problem a new way of modeling partially observable domains known as Predictive State Representation was introduced. In this model, there is no concept of states. The agent using this model learns and plans entirely using only observations. This has a huge advantage over POMDPs in that, not only we do not need to mention the number of states beforehand, but also some systems which cannot be modeled as a POMDP can be modeled as a PSR [8] [10]. This is the main reason we choose Predictive State Representation as our basic framework.\nRecent trends in Reinforcement learning indicate the development of algorithms that can achieve transfer of knowledge across domains. Transfer learning is an active area of research in reinforcement learning. The goal behind transfer learning is to learn how to act in some (possibly smaller) source tasks and transfer that knowledge to perform better in a (possibly larger) target domain. Transfer learning in partially observable domains has not been attempted before. Such an algorithm would find applications in many real-world problems since many of them are partially observable.\nConsider a robot trained to grasp a series of regular objects like a sphere, a pyramid and a cube with noisy sensors. Our aim is to model each of these tasks as a PSR. With the model, the robot now has learned a policy for each of the tasks. Given an object with a very complicated shape, the robot has to learn to grasp the new object from scratch which would take more time and be very inefficient. The motivation behind this work is to develop a framework that uses the already learned regular object grasping policies as input and transfer that knowledge to come up with a policy to grasp the complex object. The advantage of using PSR is their ability to handle uncertainty robustly, so even in the presence of noisy perception system our framework would be able to transfer that knowledge to a larger task.\nIn this paper we give a basic formulation for the transferring policy between a set of source tasks and a target\nar X\niv :1\n70 2.\n02 18\n4v 1\n[ cs\n.L G\n] 7\nF eb\n2 01\ntask. We model them as Predictive State Representation so that our algorithm applies to both fully and partially observable domains. From the standpoint of the basic formulation we develop two algorithms for transfer, test them in a simple domain and discuss the results and shortcomings in detail in this work.\nIn the next section we give a high level overview of related approaches, followed by a mathematical overview of PSRs. Then we formulate the problem mathematically. We then explain our procedure in detail, i.e. how we learn the model, how we plan using the learned model and then explain our approach for transfer. We then show the results of our experiments followed by inferences and directions for future work."}, {"heading": "2 RELATED WORK", "text": "There are a variety of different approaches available in the transfer learning literature for different environment settings. But all of them address only fully observable domains. [8] presents a good survey of the available transfer learning literature. On the other hand, many real-world problems are partially observable. To our knowledge, none of the previous works address transfer learning between partially observable domains.\nOne of the approaches that is most relevant to our goal is transfer learning using bisimulation metrics [3]. The bisimulation metric specifies the extent of similarity between two states in a Markov Decision Process. This metric bounds the difference of value functions between the two states. But no such metrics have been developed for partially observable domains so far. The closest approach available in literature is the development of bisimulation equivalence, which states whether two belief states in a Partially Observable Markov Decision Process are similar [3]. It does not give information about the extent of similarity.\nVarious algorithms have been proposed for learning the PSR model. [4] formulated the first discovery algorithm for linear PSRs with reset. Spectral learning provides a framework for both learning and planning simultaneously. This method was exploited by [6] [2] to integrate learning and planning in predictive representations. [4] have also made progress in the problem of planning using a learned model in which they have suggested value iteration and approximate Q-Learning methods. In our approach we use approximate Q-Learning using Cerebellar Model Articulation Controller (CMAC) [1] [5]."}, {"heading": "3 PROBLEM STATEMENT", "text": ""}, {"heading": "3.1 PREDICTIVE STATE REPRESENTATION", "text": "A controlled dynamical partially observable discrete system with a finite set of actions A can emit a finite number of observations O. An agent in the system executes an action at \u2208 A and perceives an observation ot \u2208 O. A history h at any point of time in the system is defined as an action-observation sequence that has occurred till that point of time h = a1o1a2o2....atot. A test is defined as an actionobservation sequence that may occur in the future t = at+1ot+1at+2ot+2...at+kot+k. The prediction for test t given by P (t|h) is defined as the probability that the test t will occur in the future given the agent\u2019s current history is h.\nA Predictive State Representation is a tuple \u3008O,A, Q,Mao,mao, P (Q|\u2205)\u3009 where, O = {oi} is the set of observations, A = {ai} is the set of possible actions, Q = {qi} is the set of core tests, Mao = [maoqi ] is the matrix whose columns are vectors associated with one-step extended core test, mao is the matrix whose columns are vectors associated with one-step tests, P (Q|\u2205) is the initial prediction vector. We use the term \u201dstate vector\u201d, \u201dbelief\u201d and \u201dprediction vector\u201d interchangeably to refer P (Q|h). When a new action-observation pair is observed we update the state vector as follows.\nP (Q|hao) = P (aoQ|h) P (ao|h) = MaoP (Q|h) maoP (Q|h)\n(1)\nAny mt for any k-length test t = at+1ot+1at+2ot+2...at+kot+k, can be calculated from the PSR model using the expression[10],\nmt = Mat+1ot+1Mat+2ot+2 ...mat+kot+k (2)\nTo do planning in PSR, we incorporate a discrete set of rewards R = {ri} along with the observation [11]."}, {"heading": "3.2 INITIAL PROBLEM FORMULATION", "text": "We have a set of source tasks S = {Si} and a target task T . These tasks are modeled as a Predictive State Representation, defined by the tuples \u3008O,A, QSi ,MSiao ,mSiao, RSi\u3009 and \u3008O,A, QT ,MTao,mTao, RT \u3009 respectively. We assume both the source and target tasks has the same discrete observation and action set, and we have access to the full model of either tasks. Action selection is done in the source task S by using Q function as follows\n\u03c0\u2217S(bS) = arg max a Q\u2217(bS , a)\nOur goal in transfer learning is to transfer the policy from source to the target. More formally, for any state in target bT we have to find an appropriate state in source such that following the optimal policy w.r.t the source would give optimal action for the current state in the target. Mathematically, we want to find b\u2217S|T , such that, \u03c0\u2217T (bT ) = \u03c0\u2217S(b\u2217S|T ) We denote the extent of similarity of a source task s to the target task as a function of bT as \u03a5s(bT ). We sometimes overload the similarity operator with two arguments, \u03a5s(bs, bT ) which represents the extent of similarity of target task in the current state bT with the source task when its state is bs. Since we have a set of source tasks, we have to find the most similar source Si where\ni = arg max j \u03a5j(bT )\nOur goal is to devise an algorithm to find b\u2217S|T and \u03a5i(bT ). The \u2032\u2217\u2032 in b\u2217S|T denotes the optimal belief mapping. Throughout the paper we denote the task to which a symbol belongs using superscripts. For example we denote core test Q of task S as QS ."}, {"heading": "4 OUR APPROACH", "text": "We first learn the model of the source tasks and target task. Then we find the optimal Q function for each of the source tasks using approximate Q-learning. We then develop and test two of our approaches for transfer on the target task."}, {"heading": "4.1 LEARNING THE MODEL", "text": "We use Analytical Discovery Learning (ADL) algorithm [4] to build the model of the PSR. Since we have access to the POMDP model of the environment, we can calculate any entry of the D matrix. Initially, we enumerate all entries corresponding to one step tests and histories. We find the one step core tests and histories, by taking the linearly independent columns and rows. This is followed by calculating the entries associated with one step extensions to core tests and histories. This procedure is repeated till the rank of core matrix on two successive iterations remains constant. Then the linearly independent rows and columns are taken as the final core test/histories.\nThe mt associated with any test t can be found using the formula,\nmt = P (Q|H)\u22121P (t|H)\nwhere P (Q|H) is the core matrix obtained at the end of the ADL algorithm and P (t|H) is the probability of\nAlgorithm 1 Analytical Discovery Learning (ADL). CoreHistory, H \u2190 {} CoreTest, Q \u2190 {} while Rank(Dt) > Rank(Dt\u22121) do\nfor ao in A x O do P(Q | Hao) \u2190 belUpdate(b(Hao),Q) P(aoQ | H) \u2190 belUpdate(b(H),(aoQ)) P(aoQ | Hao) \u2190 belUpdate(b( aoH),(aoQ)) Dt \u2190 buildD(P(Q | Hao),P(aoQ | H),P(aoQ | H))\nH \u2190 independentRows(Dt) Q \u2190 independentColums(Dt)\nend for end while Return Dt,Q,H\nseeing test t from each of the H core histories. Using this formula, the model parameters (Maoq,mao) of the PSR can be obtained."}, {"heading": "4.2 ONLINE LEARNING USING APPROXIMATE Q-LEARNING", "text": "As the PSR state containing the prediction vectors is continuous and high-dimensional planning has to be done in a continuous space. James et al. [5] used Cerebellar Model Articulation Controller (CMAC) [1] as a function approximator to implement Q-learning [9]. This is the planning stage in which the Q values of the state and action space are approximated in an online fashion. CMAC is a class of sparse coded memory that has r overlapped and offset tilings with each of them having number of edges equal to the length of query variables. Each edge of the tiling spans the entire space of corresponding state variable and is quantized into various levels based on its sparsity and length of the prediction vector. Any combination of state vector components and the action value activates exactly one portion of each tiling known as a tile. Every such tile of the entire network is initialized with a random Q value that is reinforced over time to learn the optimal value. TheQ value of state S containing the prediction vector and action a is given by,\nQ(S, a) = \u2211\nt\nf(nt(s, a))\nwhere nt(s, a) returns the indices of the tiles that gets activated upon querying and f(u) returns the corresponding value which are summed up to give the state action value. The online Q-learning works by updating the value of appropriate tiles by \u03b1\u03b4, where \u03b1 is the per grid learning rate and \u03b4 is given as,\n\u03b4 = Rs,a + \u03b3max a\u2032 Q(s\u2032, a\u2032)\u2212Q(s, a)\nThe generalization and resolution of CMAC depends on number of tilings and number of tiles within each tiling.\nRemark: The sparsity of CMAC grows exponentially with the length of the prediction vector. A domain with N,L quantization levels for each state and T tilings will have O(TNL) tiles to pick L features for every iteration. Moreover there is a trade-off between weighting the quantization levels of each dimension and computational efficiency in selecting unequally sized tiles within each tiling."}, {"heading": "4.3 TRANSFER LEARNING IN PREDICTIVE STATE REPRESENTATION", "text": "Definition : We define the projection of a test t onto a task K after history h as \u03c7K(t, h), the probability of occurrence of t on task K after history h\n\u03c7K(t, h) = PK(t|h) = mtPK(QK |h)\nIf we have a set of tests T = {ti}, with a slight abuse of notation, we represent the projection vector as\n\u03c7K(T, h) = {\u03c7K(ti, h)}\nWe interchangeably use the terms \u201dprojection of test onto a task\u201d and \u201dprojection of a task onto a test\u201d. They both mean the same."}, {"heading": "4.3.1 Core Test Projection Algorithm", "text": "We define bS|Tp as the projection of source core test on target. It is the probability of occurrence of source core test on the target at any point of time. Mathematically,\nbS|Tp (h) = \u03c7T (QS , h) = \u03c7T (qSi , h)\nWe can calculate this by the following expression\nbS|Tp = PT (QS |h) = MTQSb T\nwhere MTQs is the matrix that relates the probability of occurrence of source core tests QS in target task T , whose columns can be calculated using Eq.2. We use this projection matrix MTQs for every iteration to select an action. We propose that the magnitude of similarity is proportional to the probability of occurrence of coretest. So we calculate similarity as \u03a5i(bT ) = \u2211 b Si|T p . This results in the Core-Test Projection algorithm.\nAlgorithm 2 Core Test Projection Algorithm Input: Source set S = {Si = \u3008MSi , QSi , P (QSi |\u2205)\u3009} Target T = \u3008MT , QT , P (QT |\u2205)\u3009 for Si in S do MT\nQSi \u2190 calculateModelMatrix(QSi , T ) {2}\nend for bT \u2190 P (QT |\u2205) repeat\nfor Si in S do b\nSi|T p \u2190MTQSi b T \u03a5i \u2190 \u2211 b Si|T p\nend for BestS \u2190 arg maxi(\u03a5i) at \u2190 arg maxa Q\u2217BestS(bBestS|Tp , a) takeaction(at) ot \u2190 ReceiveObservation(at) bT \u2190 BelUpdate(at, ot)\nuntil EpisodeEnds\nThe core-test projection algorithm does not work well. The way we choose \u03a5i(bT ) as \u2211 b Si|T p is flawed. Choosing a source task that has the core tests with maximum probability of occurrence in the target does not work well because core tests are not necessarily the most \u2019important tests\u2019 of a task. By \u2019important tests\u2019 we mean that higher probability of occurrence of these tests in the two tasks implies maximum similarity.\nAs a solution we introduce a set of tests called validating tests. These tests signify, that equal probability of occurrence of these tests, in source and target is geared towards optimal transfer."}, {"heading": "4.3.2 Validating Test Projection Algorithm", "text": "Instead of projecting the target onto the core-test of source, we now project both the source and the target onto a common set of validating tests. We then find the distance between their projections and draw a conclusion on their similarity.\nRemember that from the PSR model that the probability of any test occurring given the current belief is P (t|h) = P (Q|h)mt. Let the validating test be Vt = {tv1 , tv2 , tv3 ..., tvm}. Hence the projection of a task T onto these tests is given by PT (Vt|h) = MTVtP\nT (Q|h). Value of mkt for any test t and any task k is calculated using Eq.2. Let \u03c7S(Vt, h) be the projection of task S onto validating tests Vt after observing history h. We define the distance between source(S) and target(T ) as the dot product between their projections on validation tests given by,\n\u03a5s(bs(hs), bT (hT )) := \u03c7S(V t, hs) \u00b7 \u03c7T (Vt, hT )\nEven for two similar tasks, their projections depend on their histories. We assume that there exists a history in every source task which when applied results in a similar configuration as in target task. Applying a history to a source means updating the initial belief of the source using the history as observed trajectory. We call the history that maximizes the similarity between a source s and the target while at the same time has a high probability of occurrence as history offset (Hso) of that source. Mathematically,\nHso = arg max hs\nmhs .b s(\u2205)\n\u03c7S(Vt, hs) \u00b7 \u03c7T (Vt, h) (3)\nAlgorithm 3 Validating Test Projection Algorithm Input: MTVt ,M S Vt ,MS , bS(\u2205), bT (h), Vt\n\u03c7T (Vt, h)\u2190MTVt .b T (h) for bSi(\u2205) in bS(\u2205) do Hio \u2190 HistoryOffset(bSi(\u2205)) {Genetic Algo.} bSi(Hio)\u2190 BelUpdate(bSi(\u2205), Hio) \u03c7Si(Vt, Hio)\u2190M Si Vt .bSi(Hio)\nD(Si)\u2190 similarity(\u03c7Si(Vt, Hio), \u03c7T (Vt, h)) {4} end for S\u2217 \u2190 arg maxSi D action\u2190 arg maxaQ(bS\n\u2217(HS\u2217o ), a) return action\nThe numerator of Eq.3 is the probability of history occurring given the initial state, P s(h|\u2205). The denominator is the distance between the source and target as we discussed in the previous paragraph. A sub-problem of finding similarity would be to find the history offset of every source task with respect to the target. Solving Eq.3 is formulated as a search problem. In this problem the search space is huge. For a history of length n the search space is exponential in action observation space O(| A \u00d7 O |n). We use genetic algorithm to search through this huge space as the solution is confined to a very small part the space and there are potentially many such solutions i.e. more than one history can result in same belief state.\nFor a given task, the algorithm generates random trajectories of random lengths. The length of each trajectory is limited to the rank of system dynamics matrix of that task. It generates P such trajectories and initialize them as initial population. The genetic algorithm uses the function under maximization, as the fitness function Eq.4.\n\u03a5(bs(hs), bT ) = mh s .bs(\u2205)\n\u03c7s(Vt, hs) \u00b7 \u03c7T (Vt, h) (4)\nSince we find the history offset at every time step in target, we use current belief for the target in 4 that\nis obtained after observing the current history h in target.\nThe genetic algorithm crosses-over between two selected individuals from the population based on their fitness. Since the fitness of any individual lies between 0 and 1, 0 \u2264 f(s) \u2264 1, we cannot get high variance in the weights (for prominent selection of individuals with high fitness when weighted sampling is used). Hence the fitness of every individual is reassigned to the rank of every individual (ranked based on their current fitness). We select (weighted selection using our updated fitness) P pairs or 2P individuals for crossover. The cut-point c is chosen between 1 through maximum length of two parents under crossover using weighted-random sampling. Encouraging histories of shorter lengths, the algorithm gives more weights to 1 through minimum length of the parents. Crossing over at the cut point gives 2P children. With a fixed probability our method tweaks the actions and observations in the children. Also with a small probability it adds selected ao (one time step action-observation trajectory) at the end of an individual. This one-step ao is either randomly selected or copied from the last action-observation of an individual. For rejection, the algorithm rejects P of 2P such individuals based on their fitness. Next, it reassigns the current population to the selected children. We repeat this algorithm for a fixed number of generations. The individual with maximum fitness is taken as the history offset for the source under search.\nAt every time-step our algorithm finds the history offset Hio of every source Si. We apply this history offset to the initial belief of the corresponding sources. Mathematically, bSi(\u2205) H i o\u2212\u2212\u2192 bSi(Hio). The source to transfer policy from is selected using Eq.4 as\nS\u2217 = arg max s \u03a5(bs(Hso), bT )\nFinally, the policy from S\u2217 after applying its history offset HS\u2217o is transferred at this time-step.\n\u03c0\u2217(bT (h)) = arg max a Q(bS \u2217 (HS \u2217 o ), a)\nThus, we approximate b\u2217S|T as bS\u2217(HS\u2217o )"}, {"heading": "5 EXPERIMENTS AND RESULTS", "text": "We evaluated our proposed transfer algorithm on two different sets (SET-1 and SET-2) of partially observable mazes depicted in Fig.1 & 2. The target task of SET-1 and SET-2 have 6 and 8 free cells respectively. We use partially observable Pacman (Pocman) with one pellet and no ghosts (we consider only navigation through a maze). The agent cannot sense its\nexact position but can sense the presence of wall in specified directions. We simplified the environment and dimensions in observation space for the ADL to model the world in reasonable time. In SET-1 we sense in west and east directions while in SET-2 we sense in north and west directions. Hence the size of observation space is 4. Every sensor (in each direction) reads the correct value with probability 0.95. At each time step, the agent takes an action in one of the four directions. The action gets executed with probability 0.9 otherwise the agent moves in one of the perpendicular directions. If the agent bumps into a wall it remains in place. The agent receives a -1 reward at every time-step except at goal state where it receives +10.\nFor a given set of tasks, our algorithm learns the PSR model of each task from their POMDP model using ADL. We generated 100 trajectories each of length 50 in every source task. The trajectories are used to train CMAC for approximate Q-learning. The Q-learning\nalgorithm is run using a completely random policy. The action edge of the CMAC is discretized into | A | equal segments, 4 here. Every component of the prediction vector is the probability of core test occurring given history P (Q | h) and ranges between 0 and 1. In our case (SET-2) the source task and target task have 4 and 8 core tests respectively. For example, the edge representing the prediction vector component of CMAC for the target task is quantized in steps of 0.125. Also there are 8 overlapping hypercube tilings offset by 0.015625 units. The tile values initialized randomly and the update is applied online.\nIn genetic algorithm, the maximum size of every individual in the population limited is limited to 10. The best individuals for crossover was selected with a probability 0.8. The probability of mutation was fixed to 0.15. During mutation we either randomly tweak the action, observations in individuals or insert or delete elements from individuals with probability 0.5. Finally, individuals with low fitness are rejected with a probability of 0.9. At every iteration our algorithm deleted randomly selected individuals and initialized them to random histories to keep the diversity up in population.\nIn SET-2, we used {[(S2\u22121)2(E1\u22121)2], [(N2\u22121)(N0\u2212 1)(E1\u22121)(E1\u22121)], [(E1\u22121)2], [(N2\u22121)(N0\u22121)(E2\u2212 1)(E2 + 10)]} as the validating set of tests. There are four tests in the set. The first element in each test is an action followed by observation and reward. For example (S2 \u2212 1) denotes taking the action \u2019South\u2019 and observing 2 (binary equivalent: \u201910\u2019 meaning we observe no wall in North and a wall in West) and a reward -1. Given the initial states as shown in Fig.2, the genetic algorithm returns history offsets of Source1 and Source-2 as (N0\u22121)) and (E2\u22121) respectively.\nAfter this update on initial beliefs of both the sources with their corresponding history offsets and finding their respective projections on the set of validating tests, the projection of Source \u2212 1 was close to the projection of target. In fact, the correlation between the projections of Source \u2212 1 and target was 0.902 while that of Source\u2212 2 and target was 0.001. Given the updated (after applying history offset) belief of Source\u22121, the Q-function returned the action \u2019South\u2019, which is the expected optimal action given the initial state in target Fig.2 (SET-2). When the position of Pocman was at the red dot (Fig.2), the history offsets of Source-1 and Source-2 were (S2 \u2212 1)(S2 \u2212 1) and (N2 \u2212 1)(W2 \u2212 1)(N0 \u2212 1). After applying these offsets to their respective sources (the Pocman will be at the blue dots. Fig.2), we see that the optimal action in both these environment is \u2019East\u2019. Which implies we must observe almost equal similarity between both the sources and target. In fact, the similarity of Source\u22121\nand Source\u22122 were 0.73 and 0.42 respectively. The results of similarity vs different states is plotted in Fig.4.\nTo illustrate the validity of our approach we compare the cumulative reward received by following policy returned from planning in target environment (regular approach) and that returned from our transfer algorithm. The benchmark for our transfer is to converge to the cumulative reward received from planning. The cumulative reward (averaged over 10 trials) against the no. of generations and population is given in Fig 5. Fig. 5 was plotted with constant population, 50 and Fig. 6 was plotted with constant generations, 30. We ran the algorithm till 100 time-steps or till the Pocman emerges victorious, whichever happened first. Hence the maximum possible return is +2 while the minimum possible return is -100. Considering the limited time available for genetic algorithm at every time-step, we used generations = 30, population = 50 throughout our experiments."}, {"heading": "6 FUTURE WORK AND DISCUSSIONS", "text": "The results we obtained were promising. However more empirical results from other domains is needed. Using the ADL algorithm we were able to model only simple Pocman environments with small observation spaces. The same transfer algorithm should be tested using models of complex environment. TPSR [7] provides a good framework for modeling complex environments. Also we have assumed that the cost of learning the model to be zero or that the model is given to us. Our next step would be to improve our algorithm for online learning where the model of the target task is not known beforehand. Interleaved learning and planning [6] provides a method to simultaneously learn and\nplan using PSRs. One important direction of research is to incorporate the transfer algorithm into this framework.\nWe used hand-coded validation tests for SET-1 and SET-2. We are currently investigating ways to automatically find a good set of validating tests given the source tasks. One simple example to show the limitations of our approach would be a source Pocman where the optimal action consist of only \u201dEast\u201d, and a target Pocman where the optimal action consists of only \u201dNorth\u201d. Our current approach does not address the problem of finding the appropriate action mappings. We are working an approach to map a given action-observation in target to an actionobservation in source. At every time-step we can find the change in history offset and relate this change to action-observation in target. This shall provide the required mapping. With this mapping finding the history offset at every time step is unnecessary.\nWe also plan on searching in beliefs space instead of histories, since this would lead to a smaller search spaces or we could even find a closed form solution for the optimal belief. One future work could be to extend the bisimulation metrics to PSRs and use it to transfer the policy."}, {"heading": "7 CONCLUSION", "text": "This is the first work for transfer in partially observable environments. We develop a basic framework for the problem. We show in simple experiments the successful transfer of policy to solve a partially observable maze. Our method was able to find similarity (quantitatively) between tasks and was able to transfer policy from the most similar source task.\nOur method is suitable when there is a reachable configuration in one of the source tasks that is similar to the target task and has the same optimal action (as in target task). In case if all sources have no such configuration or no common optimal action, the algorithm needs an action map between the sources and the target."}, {"heading": "Acknowledgements", "text": "We thank Prof. Dmitry Berenson for his constant motivation and constructive feedback throughout the project. We also extend our gratitude to Prof. Balaraman Ravindran, Mr. Prasanna Parthasarathi and Mr. Janarthanan Rajendran from IIT Madras."}], "references": [{"title": "A theory of cerebellar function", "author": ["J.S. Albus"], "venue": "Mathematical Biosciences,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1971}, {"title": "Closing the learning-planning loop with predictive state representations", "author": ["B. Boots", "S.M. Siddiqi", "G.J. Gordon"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "On planning, prediction and knowledge transfer in fully and partially observable markov decision processes", "author": ["P.S. Castro"], "venue": "McGill University, PhD thesis,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Learning and discovery of predictive state representations in dynamical systems with reset", "author": ["M.R. James", "S. Singh"], "venue": "In Proceedings of the twenty-first international conference on Machine learning,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2004}, {"title": "Planning with predictive state representations", "author": ["M.R. James", "S. Singh"], "venue": "IEEE Proceedings", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Goaldirected online learning of predictive models", "author": ["S. Ong", "Y. Grinberg", "J. Pineau"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Learning low dimensional predictive representations", "author": ["M. Rosencrantz", "G. Gordon", "S. Thrun"], "venue": "In Proceedings of the twenty-first international conference on Machine learning,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2004}, {"title": "An introduction to inter-task transfer for reinforcement learning", "author": ["M.E. Taylor", "P. Stone"], "venue": "AI Magazine,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Learning from delayed rewards", "author": ["C.J.C.H. Watkins"], "venue": "PhD thesis,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1989}, {"title": "Modeling dynamical systems with structured predictive state representations", "author": ["B.D. Wolfe"], "venue": "PhD thesis, University of Michigan,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "Predictive representations of state", "author": ["M.L. Littman", "R.S. Sutton", "S. Singh"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2002}], "referenceMentions": [{"referenceID": 7, "context": "This has a huge advantage over POMDPs in that, not only we do not need to mention the number of states beforehand, but also some systems which cannot be modeled as a POMDP can be modeled as a PSR [8] [10].", "startOffset": 196, "endOffset": 199}, {"referenceID": 9, "context": "This has a huge advantage over POMDPs in that, not only we do not need to mention the number of states beforehand, but also some systems which cannot be modeled as a POMDP can be modeled as a PSR [8] [10].", "startOffset": 200, "endOffset": 204}, {"referenceID": 7, "context": "[8] presents a good survey of the available transfer learning literature.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "One of the approaches that is most relevant to our goal is transfer learning using bisimulation metrics [3].", "startOffset": 104, "endOffset": 107}, {"referenceID": 2, "context": "The closest approach available in literature is the development of bisimulation equivalence, which states whether two belief states in a Partially Observable Markov Decision Process are similar [3].", "startOffset": 194, "endOffset": 197}, {"referenceID": 3, "context": "[4] formulated the first discovery algorithm for linear PSRs with reset.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "This method was exploited by [6] [2] to integrate learning and planning in predictive representations.", "startOffset": 29, "endOffset": 32}, {"referenceID": 1, "context": "This method was exploited by [6] [2] to integrate learning and planning in predictive representations.", "startOffset": 33, "endOffset": 36}, {"referenceID": 3, "context": "[4] have also made progress in the problem of planning using a learned model in which they have suggested value iteration and approximate Q-Learning methods.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "In our approach we use approximate Q-Learning using Cerebellar Model Articulation Controller (CMAC) [1] [5].", "startOffset": 100, "endOffset": 103}, {"referenceID": 4, "context": "In our approach we use approximate Q-Learning using Cerebellar Model Articulation Controller (CMAC) [1] [5].", "startOffset": 104, "endOffset": 107}, {"referenceID": 9, "context": "at+kot+k, can be calculated from the PSR model using the expression[10],", "startOffset": 67, "endOffset": 71}, {"referenceID": 10, "context": "To do planning in PSR, we incorporate a discrete set of rewards R = {ri} along with the observation [11].", "startOffset": 100, "endOffset": 104}, {"referenceID": 3, "context": "We use Analytical Discovery Learning (ADL) algorithm [4] to build the model of the PSR.", "startOffset": 53, "endOffset": 56}, {"referenceID": 4, "context": "[5] used Cerebellar Model Articulation Controller (CMAC) [1] as a function approximator to implement Q-learning [9].", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "[5] used Cerebellar Model Articulation Controller (CMAC) [1] as a function approximator to implement Q-learning [9].", "startOffset": 57, "endOffset": 60}, {"referenceID": 8, "context": "[5] used Cerebellar Model Articulation Controller (CMAC) [1] as a function approximator to implement Q-learning [9].", "startOffset": 112, "endOffset": 115}, {"referenceID": 6, "context": "TPSR [7] provides a good framework for modeling complex environments.", "startOffset": 5, "endOffset": 8}, {"referenceID": 5, "context": "Interleaved learning and planning [6] provides a method to simultaneously learn and", "startOffset": 34, "endOffset": 37}], "year": 2017, "abstractText": "In this paper we tackle the problem of transferring policy from multiple partially observable source environments to a partially observable target environment modeled as predictive state representation. This is an entirely new approach with no previous work, other than the case of transfer in fully observable domains. We develop algorithms to successfully achieve policy transfer when we have the model of both the source and target tasks and discuss in detail their performance and shortcomings. These algorithms could be a starting point for the field of transfer learning in partial observability.", "creator": "LaTeX with hyperref package"}}}