{"id": "1702.02453", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Feb-2017", "title": "Preparing for the Unknown: Learning a Universal Policy with Online System Identification", "abstract": "We present a new method of learning control policies that successfully operate under unknown dynamic models. We create such policies by leveraging a large number of training examples that are generated using a physical simulator. Our system is made of two components: a Universal Policy (UP) and a function for Online System Identification (OSI). We describe our control policy as universal because it is trained over a wide array of dynamic models. These variations in the dynamic model may include differences in mass and inertia of the robots' components, variable friction coefficients, or unknown mass of an object to be manipulated. By training the Universal Policy with this variation, the control policy is prepared for a wider array of possible conditions when executed in an unknown environment. The second part of our system uses the recent state and action history of the system to predict the dynamics model parameters mu. The value of mu from the Online System Identification is then provided as input to the control policy (along with the system state). Together, UP-OSI is a robust control policy that can be used across a wide range of dynamic models, and that is also responsive to sudden changes in the environment. We have evaluated the performance of this system on a variety of tasks, including the problem of cart-pole swing-up, the double inverted pendulum, locomotion of a hopper, and block-throwing of a manipulator. UP-OSI is effective at these tasks across a wide range of dynamic models. Moreover, when tested with dynamic models outside of the training range, UP-OSI outperforms the Universal Policy alone, even when UP is given the actual value of the model dynamics. In addition to the benefits of creating more robust controllers, UP-OSI also holds out promise of narrowing the Reality Gap between simulated and real physical systems. We do not expect that UP-OSI will make all the changes implemented in the system in a way that is useful to all participants.", "histories": [["v1", "Wed, 8 Feb 2017 14:53:45 GMT  (1914kb,D)", "http://arxiv.org/abs/1702.02453v1", null], ["v2", "Wed, 22 Feb 2017 17:08:31 GMT  (3314kb,D)", "http://arxiv.org/abs/1702.02453v2", null], ["v3", "Mon, 15 May 2017 13:37:58 GMT  (3301kb,D)", "http://arxiv.org/abs/1702.02453v3", "Accepted as a conference paper at RSS 2017"]], "reviews": [], "SUBJECTS": "cs.LG cs.RO cs.SY", "authors": ["wenhao yu", "jie tan", "c karen liu", "greg turk"], "accepted": false, "id": "1702.02453"}, "pdf": {"name": "1702.02453.pdf", "metadata": {"source": "CRF", "title": "Preparing for the Unknown: Learning a Universal Policy with Online System Identification", "authors": ["Wenhao Yu", "C. Karen Liu", "Greg Turk"], "emails": ["wyu68@gatech.edu,", "karenliu@cc.gatech.edu,", "turk@cc.gatech.edu"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nNumerical simulation of physical phenomena is a powerful tool that has been embraced by researchers and practitioners in computer animation. The success in simulating highly dynamic motion in computer animation, however, has not been transferred in full to robotics. The discrepancy between what can be achieved in simulation and that in real world is referred as the \u201cReality Gap\u201d in the Evolutionary Robotics community [22, 14]. Researchers have put forth a long list of possible factors that give rise to the Reality Gap, such as simplified dynamic models, inaccurate model parameters, approximated hardware limitations, the absence of uncertainty and latency in sensors and actuators, and other unmodelled factors. Closing the Reality Gap has recently been a major focus in robotics because the ability to transfer knowledge learned in simulation to the real world can potentially unlock the full capability of deep reinforcement learning for robotic applications.\nThere are two general approaches to learning control policies for real-world operations. One can design a robust control policy to handle a reasonable amount of noise based on a hypothesized dynamic model and hope that the control policy will succeed in the real world without any intervention. This approach is effective if the hypothesized dynamic model is not too far off from the real one. Unfortunately, this is typically not the case for complex robotic system that are performing dynamic tasks involving contacts. Alternatively, one can learn a more accurate dynamic model from real-world data by alternating between control policy optimization, data collection, and dynamic model fitting (or system identification). One potential limiting factor of this approach is the need for a large amount of real-world trials which can be expensive, timeconsuming, and sometimes dangerous to the robot, humans and objects in its surroundings.\nThis paper introduces a different approach to combat the Reality Gap. We present a new algorithm that only uses data from a generic physical simulator to learn motor control policies that successfully operate under unknown dynamic models. Our key idea is to aggressively explore the \u201cvirtual world\u201d through physical simulation and precompute many of the possible situations the robot might encounter when operating in real world. Although it is easy to dismiss such an approach based on the curse of dimensionality argument, in light of recent disruptive development in deep learning and the availability of large-scale computing capability, we believe it is time to revisit this pre-computation approach. Suppose that we have a way to precompute the optimal control policy for every dynamic model in a parameterized space. Suppose further that we have a fast method that tells us which dynamic model best fits an observed motion sequence. With these two scenarios, during online execution in the real world, we only need to select the right dynamic model by looking at the recent history of robot motion, and then select the corresponding control policy for that dynamic model to achieve optimal motion. While it might not be possible to pre-learn a control policy or pre-explore the entire space of motions for every possible dynamic model, it might be possible to do so for everything that is important for the task of interest.\nTo this end, we introduce a new approach that exploits a massive amount of simulated data to learn a) a universal control policy (UP) that is capable under a parameterized\nar X\niv :1\n70 2.\n02 45\n3v 1\n[ cs\n.L G\n] 8\nF eb\n2 01\n7\nspace of dynamic models, when provided with the appropriate dynamic model parameters, and b) an on-line system identification model (OSI) that predicts the dynamic model parameters given the current state and the recent history of state-action pairs. Figure 1 shows the relationship between the universal policy and the on-line system identification. Once trained, the combined algorithm, UP-OSI, can be executed in an unknown dynamic environment. At each time instance, the dynamic model parameters \u00b5 is first predicted by the learned system identification model. The universal control policy then takes the predicted model parameters along with the current state to compute the the optimal action (Figure 1).\nUP-OSI is sample-efficient by design because the algorithm does not require real-world samples during offline training. Another important advantage of UP-OSI is that it does not require the model parameters to be identified prior to execution. While some model parameters might not change over time (e.g. mass, length of a body part) and can be identified offline, other parameters related to the unknown environment, such as the friction coefficient of the floor or the mass of objects being manipulated, cannot be easily identified in advance. Part of the power of UP-OSI is that it can dynamically adapt to changing factors in the environment.\nWe evaluate our method by learning dynamic motor skills and executing them under unknown dynamic models in simulation. In each of the examples, the control policy can successfully execute the task without knowing some crucial parameters of the dynamic model, such as the inertial and geometric parameters of the robot, variable friction coefficients in the environment, and other task-related parameters. Furthermore, we demonstrate that UP-OSI can operate successfully outside the space of dynamic models used for training, as well as under sudden changes in the environment."}, {"heading": "II. RELATED WORK", "text": ""}, {"heading": "A. Deep Reinforcement Learning", "text": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10]. For example, Schulman et al. demonstrated learning of fullbody humanoid running and getting up with just feedback from the reward function using Trust Region Policy Optimization (TRPO) [28] and Generalized Advantage Estimation (GAE) [29]. Lillicrap et al. [18] extended their work of Deep Q-Learning [19] and Deterministic Policy Gradient (DPG) [30] to learn robotic motor skills such as hopping, reaching and 2D walking directly from pixel input. These methods usually require a large amount of interaction time between the agent and the environment, which poses a significant challenge to the robot as well as the experimenter when applying them directly to learn a realworld robotic control task.\nIn addition, progress has been made in directly learning neural network control policies of manipulation tasks for real robots [16, 24, 17]. While the results are impressive, these methods usually require extensive amount of experimental data\n[17, 24] or relatively restrictive settings [16]. It is unclear whether these method would work directly on more dynamic motor skills in the real-world, such as locomotion."}, {"heading": "B. Transfer Learning in Reinforcement Learning", "text": "Transferring policy learned in simulation to real-world robot has the potential to address the problem of learning complex motor skills for real robots. Much previous effort focused on classical system identification, which provides a framework to address the general problem of model inconsistency. In practice, system identification is often interleaved with control policy optimization to minimize the number of required realworld experiments [3, 9, 5]. Some widely-used models, such as linear models [3], Gaussian processes [8, 11], and differential equations [33, 4], have proven effective for continuous dynamics and control tasks with relatively low action space. For example, Abbeel and Ng [3] used a time-variant linear function to model the dynamics of a helicopter from the realworld data while learning a control policy to perform inverted autonomous helicopter flight. Deisenroth and Rasmussen [8] trained a Gaussian process model from real-world data to analytically calculate the control policy gradient, significantly reducing the number of samples compared to sampling-based policy gradient estimation. Ross and Bagnell [26] provided a proof that such iterative processes can converge to an optimal policy, given an accurate dynamic model learning method and a good policy search algorithm. More recently, deep neural networks have been applied to learn both forward dynamics [25] and inverse dynamics [6] from the real-world data, which can potentially model more complicated dynamics. A key drawback of these methods is that their success depends on the quantity and the quality of the real-world data. For highly dynamic or contact-rich tasks, learning an accurate dynamic model and control policy would require a large amount of high quality data, which can be difficult to acquire.\nAnother line of research utilizes simulated data to train a policy and then directly applies it or adapts it to the real world. James and Johns [13] demonstrated a simulationtrained manipulation controller learned from photo-realistic rendering data that show similar behaviors in the real-world. Rusu et al. [27] used progressive networks to efficiently learn a manipulation task on a Jaco arm from a policy that was trained in simulation. One important assumption made by this approach is that the dynamics modeled by the simulator is similar to the real world dynamics. It is unclear whether these methods can work in the situations where the policy is sensitive to the discrepancy in the assumed dynamics model.\nIn this work, we avoid the need of explicit modeling of system dynamics by learning a Universal Policy (UP) that simultaneously optimizes a wide range of model parameters and an Online System Identification (OSI) network that estimates the dynamic parameters during execution. The concept of UP is similar to Mordatch et al. [21] who optimized the motion trajectory for an ensemble of dynamic models perturbed from the assumed one. Their method shows high success rate when tracking a real-world reference trajectory. The motor skills we\nare studying require a complex feedback policy, which cannot be achieved by tracking a reference trajectory."}, {"heading": "C. Learning Policy in Unknown Environment", "text": "Our work is also related to learning a control policy in an environment with unknown parameters, i.e. Partial Observable Markov Decision Process (POMDP). One example of such work is the idea of event-learning proposed by Szita et al. [32]. They demonstrated that when combined with Static and Dynamic State (SDS) controller, their method performs better than standard method like SARSA in an dynamically varying environment. In contrast to their work, we explicitly incorporate the model parameters as the input to the control policy. With this additional information as input, the control policy has the potential to achieve better performance for a larger range of model parameters.\nBased on the Deterministic Policy Gradient method [30], Heess et al. [12] proposed a method that represents a control policy as a recurrent neural network. They demonstrated control policies that identify and memorize task-related signals presented in the observable data sequences, such as the mass of the robot or the position of the target to be grasped. Our work shares a similar goal in learning controllers that can be applied to systems with unknown dynamic model parameters. However, their focus is on learning memory-related tasks rather than transfer to unseen dynamic environments. On the other hand, our work currently does not handle memoryrelated tasks as our controller only takes a small window of motion history as input."}, {"heading": "III. METHODS", "text": "Our algorithm consists of two components, a universal policy (UP) and an on-line system identification model (OSI), shown in Figure 1. First, we formulate a reinforcement learning problem to learn a universal policy (UP), \u03c0 : (x,\u00b5) 7\u2192 u, for a space of dynamic models, xt+1 = f\u00b5(xt,ut), parameterized by the dynamic model parameters \u00b5. Unlike a conventional control policy which maps a state vector x to a control vector u, UP takes as input both the state and the dynamic model parameters (i.e. \u00b5) and outputs a control vector. Second, we formulate a supervised learning\nproblem to train an online system identification model (OSI), \u03c6 : (xt\u2212h:t,ut\u2212h:t\u22121) 7\u2192 \u00b5, that predicts the dynamic model parameters \u00b5, given the current state xt and the past h time instances of the state-action pairs. Unlike the conventional system identification approach, our goal is not to identify a particular system, but to create a function that can identify the model parameters for any given trajectory. Both components are represented as a standard neural network and trained offline using simulated data only.\nPutting UP and OSI together, at every time instance, we first use OSI (\u03c6) to predict the dynamic model parameters \u00b5 based on the current state of the robot xt and the recent history of motion (xt\u22121,ut\u22121, \u00b7 \u00b7 \u00b7 ,xt\u2212h,ut\u2212h). Once \u00b5 is identified, we feed both \u00b5 and the current state xt into UP (\u03c0) to evaluate the the optimal action ut under the predicted dynamic model. We execute ut on the robot and push xt and ut into the history queue. The new state of the system becomes the current state xt and the algorithm advances to the next time step (Fig 1).\nWe propose a novel framework to train the control policy and the system identification model. Conventional approaches alternate between system identification and control policy optimization, which requires a reasonable initial policy or/and an initial system identification model to optimize efficiently. Our method breaks this mutual dependence by first training UP preemptively to anticipate all of the possible dynamic models that OSI might explore during optimization."}, {"heading": "A. Learning Universal Policy", "text": "Our goal is to learn a control policy that can be generalized to a parameterized space of dynamic models. Many existing methods [7, 31] employ an ensemble approach by learning a discrete set of control policies and consolidating them into one regression model. Our initial attempt with the ensemble approach showed that, for many dynamic tasks, sometimes a small change in the model parameter requires a drastically different control policy to succeed at the given task. Fitting a regression model to this non-smooth landscape of policies often yields poor generalizability.\nIn this work, we found that it is possible to directly train a large neural net to represent a universal control policy, \u03c0(x,\u00b5), for a space of dynamic models parameterized by \u00b5. With a powerful policy optimization algorithm and sufficient data, the universal policy can achieve high rewards across the space of \u00b5, with comparable performance to policies that have been trained for a specific \u00b5.\nWe use the Trust Region Policy Optimization (TRPO) method [28] and show that by simply augmenting the input state with the model parameters \u00b5, TRPO can successfully train a universal control policy. However, we need to modify the exploration scheme of TRPO because the part of the state space that represents \u00b5 is not affected by forward simulation when generating rollouts. Our algorithm (Algorithm 1) samples K different \u00b5 from a uniform distribution \u03c1\u00b5. For each \u00b5i, we generate a set of rollouts under the policy \u03c0(x,\u00b5i) and the dynamic model f\u00b5i . Once the state-action pairs are collected in this manner, the update of \u03c0 follows TRPO exactly."}, {"heading": "B. Learning Online System Identification Model", "text": "Even with the ability to perform control under different dynamic models, UP can only succeed at a task when given accurate model parameters, and this information is typically not readily available. We propose to learn an online system identification model (OSI), \u03c6 : (xt\u2212h:t,ut\u2212h:t\u22121) 7\u2192 \u00b5, that continuously identifies the correct model parameters \u00b5 for UP, when given a short recent history of the states and actions.\nThe training process can be formulated as a supervised learning problem with the input being a history rollout H and the output being the model parameters \u00b5 under which the input rollout is generated:\n\u03b8\u2217 = argmin \u03b8 \u2211 (Hi,\u00b5i)\u2286B \u2016\u03c6\u03b8(Hi)\u2212 \u00b5i\u20162 (1)\nwhere \u03b8 are the parameters of the neural net \u03c6\u03b8. Although the training data can be entirely obtained from simulation, the amount of data can be intractably large to thoroughly cover the input space. Our key observation is that OSI only needs to be accurate for the trajectories that are likely to be observed when performing the tasks of interest. As such, we randomly sample the space of \u00b5 where UP is trained for. For each sampled \u00b5\u0304i, we simulate N rollouts using the policy \u03c0(x, \u00b5\u0304i) and under the dynamics f\u00b5\u0304i . We then generate short history segments from each rollout and store them in the training buffer B (Line 3-13, Algorithm 2).\nAfter optimizing \u03c6 using Equation 1, we found that the performance of the combined system, UP-OSI, was much worse than simply using UP given true model parameters \u00b5\u0304. This result is not surprising (retrospectively) because our OSI has only \u201cseen\u201d the motion sequences generated by a control policy \u03c0(x, \u00b5\u0304) under a dynamic model f\u00b5\u0304 where their model parameters are consistent. In other words, all the training examples so far only cover the \u201cgood cases\u201d where the control policy is operating optimally under a given dynamic model. When we tested OSI with an unseen initial sequence, OSI was likely to make some error in the prediction. This error is exacerbated because the next sequence that OSI will see is generated by a control using an erroneously predicted \u00b5\u0302 under the true model parameters f\u00b5\u0304, where \u00b5\u0302 6= \u00b5\u0304.\nOur solution is to iteratively improve OSI by introducing \u201cbad cases\u201d with mismatched model parameters used for control (\u03c0(x, \u00b5\u0302)) and for forward simulation (f\u00b5\u0304). For each iteration, we generate more training examples using the current OSI and UP. We randomly sample in the space of \u00b5 and generate rollouts like before. However, we feed the \u00b5 predicted by the current OSI into UP, instead of the true model parameters \u00b5\u0304 used for forward simulation. Note that in Line 25 of Algorithm 2, the dynamic model has the parameter \u00b5\u0304 which is different from the one used for the control (Line 22, 24). Mixing the mismatched training examples with previously generated ones, we train OSI again using Equation 1. After a small number of iterations (3-5, see Section IV), the performance of UP-OSI becomes close to the performance of UP that is provided with the true model parameters.\nAlgorithm 1 Learning UP 1: Randomly initialize UP network \u03c0 2: for i = 1 : K do 3: Initialize rollout buffer R 4: \u00b5 \u223c \u03c1\u00b5 5: x \u223c \u03c10 6: while R.size \u2264MaxStep do 7: u = \u03c0(x,\u00b5) 8: x = f\u00b5(x,u) 9: r, terminated = Reward(x,u) 10: Push (x,u, r) into R 11: if terminated then 12: \u00b5 \u223c \u03c1\u00b5 13: x \u223c \u03c10 14: Update \u03c0 with data in R using TRPO\nreturn \u03c0\nAlgorithm 2 Learning OSI 1: Randomly initialize OSI network \u03c6 2: Initialize training buffer B 3: for i = 1 : K do 4: \u00b5\u0304 \u223c \u03c1\u00b5 5: for j = 1 : N do 6: Initialize history queue H 7: Fill H by simulating under \u03c0(x, \u00b5\u0304) and f\u00b5\u0304 8: for t = 0 : T \u2212 1 do 9: Pop H\n10: ut = \u03c0(xt, \u00b5\u0304) 11: xt+1 = f\u00b5\u0304(xt,ut) 12: Push (xt+1,ut) in H 13: Store (H, \u00b5\u0304) in B 14: Optimize \u03c6 using data in B 15: while not converge do 16: for i = 1 : K do 17: \u00b5\u0304 \u223c \u03c1\u00b5 18: for j = 1 : N do 19: Initialize history queue H 20: Fill H by simulating under \u03c0(x, \u00b5\u0304) and f\u00b5\u0304 21: for t = 0 : T \u2212 1 do 22: \u00b5\u0302 = \u03c6(H) 23: Pop H 24: ut = \u03c0(xt, \u00b5\u0302) 25: xt+1 = f\u00b5\u0304(xt,ut) 26: Push (xt+1,ut) in H 27: Store (H, \u00b5\u0304) in B 28: Optimize \u03c6 using data in B\nreturn \u03c6"}, {"heading": "IV. EVALUATION", "text": "We evaluate UP-OSI on four dynamic motor control problems. In each example, the control policy does not know the true model parameters in advance and relies on OSI to identify the parameters during execution. We vary different model parameters, such as mass, inertia, friction coefficient,\nor task-related parameters to demonstrate that UP-OSI can successfully perform all the motor skills under unknown dynamic models. We compare the performance of UP-OSI against the performance of the condition, UP-true, which uses UP given the true model parameters. The performance of UPtrue can be regarded as an informal upper bound for UP-OSI.\nFurther, we demonstrate that UP-OSI can also perform well when the model parameters of the testing environment are outside of the training range. This result is particularly interesting when comparing against UP-true. We found that UP-OSI unexpectedly outperforms the UP-true under dynamic models that were unseen during training.\nAll results presented in this work are simulated in PyDart2 [2], a python wrapper for DART [1], which is a multibody physics simulator supported by Gazebo. The simulation timestep is set to 0.002s. Please see supplementary video for visualizing simulated motion sequences. For UP, we use a neural network with two hidden layers, comprised of 64 units in both hidden layers with tanh activation functions, followed by a linear fully connected final layer. For OSI, we use three hidden layers, with 256, 128, and 64 hidden units and tanh activation functions. We add a dropout layer for OSI after each hidden layer with a dropout rate of 0.1.\nThe learning process for UP takes 500 iterations of TRPO updates. The amount of data collected during each iteration varies by the difficulty of the tasks. We run five iterations for training OSI. At each iteration we sample 30 different \u00b5 values and collect 5 seconds for each \u00b5. For all the examples shown here, we use a motion history length of three, which is the minimal length to learn a second-order dynamic model."}, {"heading": "A. Double inverted pendulum with unknown center of mass", "text": "We begin with a classic motor control problem: balancing a double inverted pendulum. We define the reward function as,\nr(x) = \u2212k1(\u03c31 + \u03c32)2 \u2212 k2|pcart|+ 10,\nwhere \u03c31 and \u03c32 are angles of the two poles from the upright configuration, pcart is the position of the cart and k1 and k2 are the corresponding weights of the two terms. We normalize the angles to be in [0, \u03c0] and use k1 = 10.0, k2 = 1.0 in our experiment. The length of the two poles are both 0.5m. We terminate the simulation when |pcart \u2265 5| or (\u03c31+\u03c32) \u2265 0.5\u03c0.\nThe unknown model parameter for this problem is the center of mass of the lower pole, which has an unknown offset, (\u00b5, 0.2\u00b5), from the geometric center. To ensure that the control policy would need to apply different strategies to balance the pendulum when different model parameters are given, we allow the offset to vary across a wide range: \u00b5 \u2208 [\u22120.6m, 0.6m]. Note that the purpose of the vertical offset (0.2\u00b5) is to break the symmetry of the problem to further increase the difficulty of control.\nAt each training iteration of UP, we collect 150, 000 samples using the physics simulator. Figure 2(b) shows the normalized performance of the trained UP-OSI across different \u00b5 values, comparing against UP-true (the informal upper bound). The performance of each \u00b5 in Figure 2(b) is the normalized\naverage accumulated reward of 20 rollouts starting from a randomly perturbed initial state. If the performance value is above 1.0, the double inverted pendulum is able to balance. We also compare UP-OSI to a policy with conventional state input and control output but trained by data simulated from a range of model parameters (denoted as \u201cregular\u201d in Figure 2(b)). The purpose of this comparison is to show that providing the model parameters as input to UP results in a more powerful control policy under a range of dynamic models,\nTo demonstrate the learning process of OSI network, we plot the same reward-model parameter graph at each iteration of training. As shown in Figure 2(c), the performance of UPOSI improves over time and approaches the performance of UP-true. In Figure 2(d), we plot the mean and the standard deviation for the model parameter identified by the trained OSI for each ground truth \u00b5 on x-axis. This shows that OSI is indeed able to identify the model parameter in this task."}, {"heading": "B. Manipulator with unknown object mass", "text": "In this example, we train a robot arm to grab a block and throw it to a certain height but not beyond. The arm is initially pointing down and the block is in the air near the gripper of the arm. Similar motor skill can be observed in the serving of a tennis ball. The state x includes the joint position q, joint velocity q\u0307 of the robot arm, and the position of the block pblock. The reward function is defined as:\nr(x,u) = \u2212k1rh \u2212 k2||u||2 \u2212 k3||q\u0307||2 + 35\nrh = { htarget \u2212 hblock, if hblock \u2264 htarget 0, otherwise ,\nwhere k1 = 10, k2 = 1e \u2212 5, k3 = 1e \u2212 3, htarget = 2m and hblock is the height of the block. We terminate the rollout when the box falls below \u22120.2m or when the block is more than 0.8m away horizontally. By giving zero reward beyond htarget, we encourage the robot arm to throw the block in a way that it has low velocity when it reaches htarget, such that it can stay in the high reward region as long as possible. The unknown model parameters is the mass of the block. The robot needs to infer the weight of the block and use the right amount of effort to throw it up to the right height.\nDuring the training of UP, we collect 50, 000 samples for each iteration. The performance of UP-OSI and UP-true is plotted in Figure3(b). We measure the performance by the highest point reached by the block. The closer to htarget = 2m, the better the performance. We also plot the mean and standard deviation of the predicted block mass throughout the test, as shown in Figure3(c). We observe similar trends as in the double inverted pendulum task, which shows that OSI also learns to identify the model parameter for this task."}, {"heading": "C. Hopper with unknown friction coefficient", "text": "Correctly identifying contact information is crucial to many locomotion tasks. In this example, we demonstrate that our method can be applied to identify the friction coefficient at the contact point in an online fashion. The task is to control\na single leg robot in 2D, the Hopper, to hop forward as fast as possible without falling. The reward is defined as\nr(x,u) = k1x\u0307\u2212 k2||u||2 + 3.0,\nwhere k1 = 1, k2 = 0.002 for our experiments. The unknown model parameters is the friction coefficient with the range \u00b5 \u2208 [0.3, 1.0]. We plot the maximum distance traveled by the hopper before the termination criteria is satisfied (the hopper falls or the maximum length of the rollout is reached) instead of the reward value to better visualize the performance of the hopper. The input to UP include the joint position of the hopper q, the joint velocity q\u0307 and the friction coefficient \u00b5 between the foot and the ground. Note that we don\u2019t use position in the forward direction in the input state, because it is not directly related to the task.\nWe use 75, 000 samples each iteration during the training of UP. Figure 4(b) shows the performance of UP-OSI compared to UP-true. Due to the difficulty of the task, UP can only perform well around \u00b5 = [0.6, 1.0]. However, being able to identify friction coefficients in this range, i.e. between the coefficient for wood-concrete contact and that for rubberconcrete contact, is sufficient for most practical applications. Figure 4(c) shows the mean and standard deviation of the predicted model parameter during the test at each \u00b5."}, {"heading": "D. Cart-pole swing-up with unknown pole length and unknown attached mass", "text": "To solve the classic cart-pole swing-up problem, the control policy needs to learn not only how to balance the pole, but also how to swing it up from a straight down position. Our experiment makes two modifications to increase the difficulty of the problem. First, we limit the force used by the cart to be within [\u221240N, 40N ]. As such, the controller must swing the pole back and forth before it rises up. We also attach an additional mass to the tip of the pole to mimic the weight lifting task (Figure 5(a)).\nWe use a variant of the reward function suggested by [15]: r\u03c3 = w\u03c3\n2 + v log(\u03c32 + a), where \u03c3 is the angle of the pole. The first term encourages fast learning of swing-up motion and the second term encourages fast learning of balance. In our experiment, we set w = 1, v = 1, a = 0.1. Similar to the double inverted pendulum task, we also add a term to encourage the cart to stay at the center of the track, rcart = |pcart|. Together, our reward function is defined as:\nr(x) = \u2212k1r\u03c3 \u2212 k2rcart + 10.0,\nwhere k1 = 1.0, k2 = 0.2. In our setup, the pole has 0 position when it is upright. During the simulation, we randomly initialize the position of the pole to be either \u03c0 or \u2212\u03c0 with a small noise drawn from N (0, 0.005). We terminate the rollout when the pole rotates more than 4\u03c0 from the initial position, or when the cart is more than 2m from the center.\nThe unknown model parameters in this example includes the additional mass attached to the top of the pole (\u00b5mass \u2208 [0.1kg, 1.0kg]), and the length of the pole (\u00b5length \u2208 [0.2m, 0.8m]). To closely compare with the cart-pole examples in [12], where they control an inverted pendulum with varying pole length using a RNN with the whole history trajectory as input, we train OSI to estimate the velocity of the system, instead of directly giving the true velocity to the policy as part of the state. As such, the space of model parameters for this example is R4. At each iteration of UP training, we run 70, 000 samples. We normalize the resulting reward such that if a policy achieves averaged accumulated reward more than one, then it usually can swing up and balance the cart-pole system. Figure 5(b) and (c) show that UP-OSI can achieve high reward for a range of unknown pole lengths, similar to the inverted pendulum result shown in [12], but UP-OSI only requires three time steps of history as input. In addition, the mass attached to the tip is also an unknown that needs to be simultaneously identified with the pole length."}, {"heading": "E. Generalization to varying model parameter", "text": "We run the trained UP-OSI for Hopper on a track with varying friction coefficients to test its generalizability. We create a track with friction coefficient \u00b5const = 0.9 everywhere except for the region between 20m to 30m. We then vary the friction coefficient \u00b5vary in this region and plot the performance of the controller with regard to \u00b5vary. Figure 4(d) shows the performance of UP-OSI and the UP-true. Note that UP-true was given the ground truth friction coefficient at each time instance as if it has a perfect contact-friction sensor on the foot,\nwhere UP-OSI needs to identify this information based on the recent history of the motion. The results show that UP-OSI can achieve comparable and sometimes better performance than UP-true. We also test the performance of UP with fixed input \u00b5 = 0.9, i.e. the hopper isn\u2019t aware of the change in friction coefficient, which is shown as the blue curve in Figure 4(d). The worse performance shows that it is crucial to detect the varying friction coefficient in order to success in this task.\nIn addition, we plot the friction coefficient predicted by OSI over time for one specific \u00b5vary = 0.55, as is shown in Figure 4(e). We can see that OSI can identify the changes in model parameter during the task. Note that we did not provide any training examples with temporally-varying \u00b5 when training either UP-true or UP-OSI networks."}, {"heading": "F. Generalization beyond training range", "text": "Another way to evaluate the generalizability of the policy is to test it with model parameters that were not seen during the training phase. We perform such test on the cart-pole swing up problem with a pole length range of [0.8m, 1.4m] and the attached mass range of [1.0kg, 1.9kg]. We linearly couple the two unknown parameters together, such that when pole length is 0.8m the attached mass has 1.0kg and when pole length is 1.4m the attached mass has 1.9kg. This is 100% beyond the original training range ([0.2m, 0.8m] and [0.1kg, 1.0kg]). We test both UP-true and UP-OSI with this extended range, which is shown in Figure 5(d). The result shows that UPOSI, can work for a large range of unknown pole length and attached mass with only position information as input. More interestingly, UP-OSI significantly outperforms UP-true in this\nrange of \u00b5 unseen during training."}, {"heading": "V. DISCUSSION", "text": "While UP-OSI has demonstrated a wide range of success, we recognize a few limitations that require further investigation. First, identifying high-dimensional model parameters remains an unsolved challenge. Although we demonstrated that OSI can perform well for model parameters in R4 (the cart-pole example), more rigorous analysis is required to evaluate the sample-efficiency of UP-OSI for high-dimensional model parameter space. In all our experiments, we train OSI with five iterations and the resulting UP-OSI can achieve similar performance as the baseline. However, a theoretical upper bound and convergence conditions are not established in this work. Further, our current implementation assumes both the policy and the dynamic model are deterministic, but UPOSI can easily be extend to a stochastic formulation.\nThis work primarily focuses on identifying model parameters unrelated to uncertainty in sensors and actuators partly because many of these issues have been addressed in the literature of robust control. One important source of uncertainty in a dynamic model is latency. The nature of latency might complicate the scheme of history queue used in OSI, but it is nevertheless an important and challenging problem to tackle.\nAn alternative approach to UP-OSI is to train an \u201cend-toend\u201d control policy that takes as input a sequence of motion history and directly outputs the optimal control, rather than explicitly decoupling the process into system identification and control. Indeed, previous work [12] has shown that a recurrent network can learn to control a dynamic system with unknown model parameters. We chose to design a control policy that explicitly takes in the model parameters as input, because this additional information in the input allows the policy to specialize for each model parameter, which can potentially improve the performance. In addition, we conjecture that decoupling a large network trained by reinforcement learning into two moderate-sized networks, one of which is trained by supervised learning, might reduce the learning time and improve the sample-efficiency.\nWe demonstrated that UP-OSI can be extended to operate under the model parameters outside of the training range. The more surprising result is that, in these extrapolated situations, UP-OSI actually outperforms the baseline. While further investigation is needed, one possible explanation is that OSI learned how to modulate the model parameters over time, essentially switching between existing policies, to achieve unseen tasks. Since UP-OSI has the ability to handle \u00b5 outside of the training range, a follow-up question for future work is whether UP-OSI can handle variations in other model parameters outside of the space of \u00b5.\nFor near future, we would like to train UP-OSI using one simulator but test it on a different one. If successful, our next step will be to test UP-OSI on real-world robotic platforms. One potential issue of our method is that the realworld dynamics cannot be well represented by the chosen parameterization of the dynamic models. However, UP-OSI allows the dynamic model to be time-varying, resulting in a more expressive parametric model to match the real-world dynamics. Essentially, the algorithm modifies its estimate of the dynamic model at every time instance based on recent realworld observations. This rapid adaptation of dynamic model allows the control policy to make prompt correction as it is also time-varying."}, {"heading": "VI. CONCLUSION", "text": "We have introduced a new approach to creating motion policies that are formed by coupling a Universal Policy together with an On-line System Identification model. A key aspect of such policies is that they are robust under a wide variety of dynamic models, and indeed, they determine the dynamic model parameters on-the-fly. This approach was created with the goal of developing control policies for realworld tasks by performing extensive off-line training using physical simulation and deep reinforcement learning. While we have yet to transfer such policies to real robots, their performance gives several promising indications. First, the UPOSI control policies give almost the same performance as the UP-true baseline, while having to deduce the unknown dynamic models on their own. Second, UP-OSI can perform\nbetter than the Universal Policy alone, in the case where the dynamic model is outside of the training range. Finally, by constantly estimating the dynamic model at every time-step, such control policies can adapt to a changing environment such as locomotion over a surface with varying friction."}], "references": [{"title": "Exploration and Apprenticeship Learning in Reinforcement Learning", "author": ["Pieter Abbeel", "Andrew Y. Ng"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "Using Inaccurate Models in Reinforcement Learning", "author": ["Pieter Abbeel", "Morgan Quigley", "Andrew Y. Ng"], "venue": "In Proceedings of the 23rd International Conference on Machine Learning,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Nonlinear System Identification Using Coevolution of Models and Tests", "author": ["Josh C. Bongard", "Hod Lipson"], "venue": "IEEE Trans. Evolutionary Computation,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "Transfer from Simulation to Real World through Learning Deep Inverse Dynamics Model", "author": ["Paul Christiano", "Zain Shah", "Igor Mordatch", "Jonas Schneider", "Trevor Blackwell", "Joshua Tobin", "Pieter Abbeel", "Wojciech Zaremba"], "venue": "arXiv preprint arXiv:1610.03518,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Learning parameterized skills", "author": ["Bruno Da Silva", "George Konidaris", "Andrew Barto"], "venue": "arXiv preprint arXiv:1206.6398,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "PILCO: A model-based and data-efficient approach to policy search", "author": ["Marc Deisenroth", "Carl E Rasmussen"], "venue": "In Proceedings of the 28th International Conference on machine learning", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "System identification without lennart ljung: what would have been different", "author": ["Michel Gevers"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "Q-Prop: Sample- Efficient Policy Gradient with An Off-Policy Critic", "author": ["Shixiang Gu", "Timothy Lillicrap", "Zoubin Ghahramani", "Richard E Turner", "Sergey Levine"], "venue": "arXiv preprint arXiv:1611.02247,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "Reducing Hardware Experiments for Model Learning and Policy Optimization", "author": ["Sehoon Ha", "Katsu Yamane"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Memory-based control with recurrent neural networks", "author": ["Nicolas Heess", "Jonathan J Hunt", "Timothy P Lillicrap", "David Silver"], "venue": "arXiv preprint arXiv:1512.04455,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "3D Simulation for Robot Arm Control with Deep Q-Learning", "author": ["Stephen James", "Edward Johns"], "venue": "arXiv preprint arXiv:1609.03759,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2016}, {"title": "Crossing the reality gap in evolutionary robotics by promoting transferable controllers", "author": ["Sylvain Koos", "Jean-Baptiste Mouret", "St\u00e9phane Doncieux"], "venue": "In Genetic and Evolutionary Computation Conference. ACM,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2010}, {"title": "Learning contact-rich manipulation skills with guided policy search", "author": ["Sergey Levine", "Nolan Wagener", "Pieter Abbeel"], "venue": "In Robotics and Automation (ICRA),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "End-to-End Training of Deep Visuomotor Policies", "author": ["Sergey Levine", "Chelsea Finn", "Trevor Darrell", "Pieter Abbeel"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "Learning Hand-Eye Coordination for Robotic Grasping with Deep Learning and Large-Scale Data Collection", "author": ["Sergey Levine", "Peter Pastor", "Alex Krizhevsky", "Deirdre Quillen"], "venue": "CoRR, abs/1603.02199,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Continuous control with deep reinforcement learning", "author": ["Timothy P Lillicrap", "Jonathan J Hunt", "Alexander Pritzel", "Nicolas Heess", "Tom Erez", "Yuval Tassa", "David Silver", "Daan Wierstra"], "venue": "arXiv preprint arXiv:1509.02971,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "Human-level control through deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["Volodymyr Mnih", "Adria Puigdomenech Badia", "Mehdi Mirza", "Alex Graves", "Timothy P Lillicrap", "Tim Harley", "David Silver", "Koray Kavukcuoglu"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2016}, {"title": "Ensemble-CIO: Full-body dynamic motion planning that transfers to physical humanoids", "author": ["Igor Mordatch", "Kendall Lowrey", "Emanuel Todorov"], "venue": "In IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Evolutionary Robotics: The Biology, Intelligence, and Technology", "author": ["S. Nolfi", "D. Floreano"], "venue": "MIT Press (Cambridge,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2000}, {"title": "Terrain-Adaptive Locomotion Skills Using Deep Reinforcement Learning", "author": ["Xue Bin Peng", "Glen Berseth", "Michiel van de Panne"], "venue": "ACM Transactions on Graphics,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2016}, {"title": "Supersizing selfsupervision: Learning to grasp from 50k tries and 700 robot hours", "author": ["Lerrel Pinto", "Abhinav Gupta"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2016}, {"title": "Deep learning helicopter dynamics models", "author": ["Ali Punjani", "Pieter Abbeel"], "venue": "In IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2015}, {"title": "Agnostic system identification for model-based reinforcement learning", "author": ["Stephane Ross", "J. Andrew Bagnell"], "venue": "In In ICML,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2012}, {"title": "Sim-to-real robot learning from pixels with progressive nets", "author": ["Andrei A Rusu", "Matej Vecerik", "Thomas Roth\u00f6rl", "Nicolas Heess", "Razvan Pascanu", "Raia Hadsell"], "venue": "arXiv preprint arXiv:1610.04286,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2016}, {"title": "Trust region policy optimization", "author": ["John Schulman", "Sergey Levine", "Philipp Moritz", "Michael I Jordan", "Pieter Abbeel"], "venue": "CoRR, abs/1502.05477,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2015}, {"title": "High-dimensional continuous control using generalized advantage estimation", "author": ["John Schulman", "Philipp Moritz", "Sergey Levine", "Michael Jordan", "Pieter Abbeel"], "venue": "arXiv preprint arXiv:1506.02438,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2015}, {"title": "Deterministic Policy Gradient Algorithms", "author": ["David Silver", "Guy Lever", "Nicolas Heess", "Thomas Degris", "Daan Wierstra", "Martin A. Riedmiller"], "venue": "In ICML,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2014}, {"title": "Learning compact parameterized skills with a single regression", "author": ["Freek Stulp", "Gennaro Raiola", "Antoine Hoarau", "Serena Ivaldi", "Olivier Sigaud"], "venue": "In Humanoid Robots (Humanoids),", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2013}, {"title": "\u03b5- MDPs: Learning in varying environments", "author": ["Istv\u00e1n Szita", "B\u00e1lint Tak\u00e1cs", "Andr\u00e1s L\u00f6rincz"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2002}, {"title": "Back-to-Reality: Crossing the Reality Gap in Evolutionary Robotics", "author": ["Juan Cristobal Zagal", "Javier Ruiz-del-Solar", "Paul Vallejos"], "venue": "IAV", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2004}], "referenceMentions": [{"referenceID": 19, "context": "The discrepancy between what can be achieved in simulation and that in real world is referred as the \u201cReality Gap\u201d in the Evolutionary Robotics community [22, 14].", "startOffset": 154, "endOffset": 162}, {"referenceID": 11, "context": "The discrepancy between what can be achieved in simulation and that in real world is referred as the \u201cReality Gap\u201d in the Evolutionary Robotics community [22, 14].", "startOffset": 154, "endOffset": 162}, {"referenceID": 20, "context": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10].", "startOffset": 181, "endOffset": 205}, {"referenceID": 26, "context": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10].", "startOffset": 181, "endOffset": 205}, {"referenceID": 25, "context": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10].", "startOffset": 181, "endOffset": 205}, {"referenceID": 15, "context": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10].", "startOffset": 181, "endOffset": 205}, {"referenceID": 17, "context": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10].", "startOffset": 181, "endOffset": 205}, {"referenceID": 7, "context": "In recent years, researchers have used deep reinforcement learning to train highly dynamic motor skills in simulated environments that have high-dimensional state and action spaces [23, 29, 28, 18, 20, 10].", "startOffset": 181, "endOffset": 205}, {"referenceID": 25, "context": "using Trust Region Policy Optimization (TRPO) [28] and Generalized Advantage Estimation (GAE) [29].", "startOffset": 46, "endOffset": 50}, {"referenceID": 26, "context": "using Trust Region Policy Optimization (TRPO) [28] and Generalized Advantage Estimation (GAE) [29].", "startOffset": 94, "endOffset": 98}, {"referenceID": 15, "context": "[18] extended their work of Deep Q-Learning [19] and Deterministic Policy Gradient (DPG) [30] to learn robotic motor skills such as hopping, reaching and 2D walking directly from pixel input.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[18] extended their work of Deep Q-Learning [19] and Deterministic Policy Gradient (DPG) [30] to learn robotic motor skills such as hopping, reaching and 2D walking directly from pixel input.", "startOffset": 44, "endOffset": 48}, {"referenceID": 27, "context": "[18] extended their work of Deep Q-Learning [19] and Deterministic Policy Gradient (DPG) [30] to learn robotic motor skills such as hopping, reaching and 2D walking directly from pixel input.", "startOffset": 89, "endOffset": 93}, {"referenceID": 13, "context": "robots [16, 24, 17].", "startOffset": 7, "endOffset": 19}, {"referenceID": 21, "context": "robots [16, 24, 17].", "startOffset": 7, "endOffset": 19}, {"referenceID": 14, "context": "robots [16, 24, 17].", "startOffset": 7, "endOffset": 19}, {"referenceID": 14, "context": "While the results are impressive, these methods usually require extensive amount of experimental data [17, 24] or relatively restrictive settings [16].", "startOffset": 102, "endOffset": 110}, {"referenceID": 21, "context": "While the results are impressive, these methods usually require extensive amount of experimental data [17, 24] or relatively restrictive settings [16].", "startOffset": 102, "endOffset": 110}, {"referenceID": 13, "context": "While the results are impressive, these methods usually require extensive amount of experimental data [17, 24] or relatively restrictive settings [16].", "startOffset": 146, "endOffset": 150}, {"referenceID": 0, "context": "In practice, system identification is often interleaved with control policy optimization to minimize the number of required realworld experiments [3, 9, 5].", "startOffset": 146, "endOffset": 155}, {"referenceID": 6, "context": "In practice, system identification is often interleaved with control policy optimization to minimize the number of required realworld experiments [3, 9, 5].", "startOffset": 146, "endOffset": 155}, {"referenceID": 2, "context": "In practice, system identification is often interleaved with control policy optimization to minimize the number of required realworld experiments [3, 9, 5].", "startOffset": 146, "endOffset": 155}, {"referenceID": 0, "context": "Some widely-used models, such as linear models [3], Gaussian processes [8, 11], and differential equations [33, 4], have proven effective for continuous dynamics and control tasks with relatively low action space.", "startOffset": 47, "endOffset": 50}, {"referenceID": 5, "context": "Some widely-used models, such as linear models [3], Gaussian processes [8, 11], and differential equations [33, 4], have proven effective for continuous dynamics and control tasks with relatively low action space.", "startOffset": 71, "endOffset": 78}, {"referenceID": 8, "context": "Some widely-used models, such as linear models [3], Gaussian processes [8, 11], and differential equations [33, 4], have proven effective for continuous dynamics and control tasks with relatively low action space.", "startOffset": 71, "endOffset": 78}, {"referenceID": 30, "context": "Some widely-used models, such as linear models [3], Gaussian processes [8, 11], and differential equations [33, 4], have proven effective for continuous dynamics and control tasks with relatively low action space.", "startOffset": 107, "endOffset": 114}, {"referenceID": 1, "context": "Some widely-used models, such as linear models [3], Gaussian processes [8, 11], and differential equations [33, 4], have proven effective for continuous dynamics and control tasks with relatively low action space.", "startOffset": 107, "endOffset": 114}, {"referenceID": 0, "context": "For example, Abbeel and Ng [3] used a time-variant linear function to model the dynamics of a helicopter from the realworld data while learning a control policy to perform inverted autonomous helicopter flight.", "startOffset": 27, "endOffset": 30}, {"referenceID": 5, "context": "Deisenroth and Rasmussen [8] trained a Gaussian process model from real-world data to analytically calculate the control policy gradient, significantly reducing the number of samples compared to sampling-based policy gradient estimation.", "startOffset": 25, "endOffset": 28}, {"referenceID": 23, "context": "Ross and Bagnell [26] provided a proof that such iterative processes can converge to an optimal policy, given an accurate dynamic model learning method and a good policy search algorithm.", "startOffset": 17, "endOffset": 21}, {"referenceID": 22, "context": "More recently, deep neural networks have been applied to learn both forward dynamics [25] and inverse dynamics [6] from the real-world data, which can potentially model more complicated dynamics.", "startOffset": 85, "endOffset": 89}, {"referenceID": 3, "context": "More recently, deep neural networks have been applied to learn both forward dynamics [25] and inverse dynamics [6] from the real-world data, which can potentially model more complicated dynamics.", "startOffset": 111, "endOffset": 114}, {"referenceID": 10, "context": "James and Johns [13] demonstrated a simulation-", "startOffset": 16, "endOffset": 20}, {"referenceID": 24, "context": "[27] used progressive networks to efficiently learn a manipulation task on a Jaco arm from a policy that was trained in simulation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[21] who optimized the motion trajectory for an ensemble of dynamic models perturbed from the assumed one.", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "[32].", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "Based on the Deterministic Policy Gradient method [30], Heess et al.", "startOffset": 50, "endOffset": 54}, {"referenceID": 9, "context": "[12] proposed a method that represents a control policy as a recurrent neural network.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "Many existing methods [7, 31] employ an ensemble approach by learning a discrete set of control policies and consolidating them into one regression model.", "startOffset": 22, "endOffset": 29}, {"referenceID": 28, "context": "Many existing methods [7, 31] employ an ensemble approach by learning a discrete set of control policies and consolidating them into one regression model.", "startOffset": 22, "endOffset": 29}, {"referenceID": 25, "context": "We use the Trust Region Policy Optimization (TRPO) method [28] and show that by simply augmenting the input state with the model parameters \u03bc, TRPO can successfully", "startOffset": 58, "endOffset": 62}, {"referenceID": 12, "context": "We use a variant of the reward function suggested by [15]: r\u03c3 = w\u03c3 2 + v log(\u03c3 + a), where \u03c3 is the angle of the pole.", "startOffset": 53, "endOffset": 57}, {"referenceID": 9, "context": "To closely compare with the cart-pole examples in [12], where they control an inverted pendulum with varying pole length using a RNN with the whole history trajectory as input, we train OSI to estimate the velocity of the system, instead of directly giving the true velocity to the policy as part of the state.", "startOffset": 50, "endOffset": 54}, {"referenceID": 9, "context": "Figure 5(b) and (c) show that UP-OSI can achieve high reward for a range of unknown pole lengths, similar to the inverted pendulum result shown in [12], but UP-OSI only requires three time steps of history as input.", "startOffset": 147, "endOffset": 151}, {"referenceID": 9, "context": "Indeed, previous work [12] has shown that a recurrent network can learn to control a dynamic system with unknown model parameters.", "startOffset": 22, "endOffset": 26}], "year": 2010, "abstractText": "We present a new method of learning control policies that successfully operate under unknown dynamic models. We create such policies by leveraging a large number of training examples that are generated using a physical simulator. Our system is made of two components: a Universal Policy (UP) and a function for Online System Identification (OSI). We describe our control policy as universal because it is trained over a wide array of dynamic models. These variations in the dynamic model may include differences in mass and inertia of the robots components, variable friction coefficients, or unknown mass of an object to be manipulated. By training the Universal Policy with this variation, the control policy is prepared for a wider array of possible conditions when executed in an unknown environment. The second part of our system uses the recent state and action history of the system to predict the dynamics model parameters \u03bc. The value of \u03bc from the Online System Identification is then provided as input to the control policy (along with the system state). Together, UP-OSI is a robust control policy that can be used across a wide range of dynamic models, and that is also responsive to sudden changes in the environment. We have evaluated the performance of this system on a variety of tasks, including the problem of cart-pole swing-up, the double inverted pendulum, locomotion of a hopper, and block-throwing of a manipulator. UP-OSI is effective at these tasks across a wide range of dynamic models. Moreover, when tested with dynamic models outside of the training range, UP-OSI outperforms the Universal Policy alone, even when UP is given the actual value of the model dynamics. In addition to the benefits of creating more robust controllers, UP-OSI also holds out promise of narrowing the Reality Gap between simulated and real physical systems.", "creator": "LaTeX with hyperref package"}}}