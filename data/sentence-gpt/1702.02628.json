{"id": "1702.02628", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Feb-2017", "title": "Optimal Detection of Faulty Traffic Sensors Used in Route Planning", "abstract": "In a smart city, real-time traffic sensors may be deployed for various applications, such as route planning. Unfortunately, sensors are prone to failures, which result in erroneous traffic data. Erroneous data can adversely affect applications such as route planning, and can cause increased travel time and environmental impact. To minimize the impact of sensor failures, we must detect them promptly and with high accuracy. However, typical detection algorithms may lead to a large number of false positives (i.e., false alarms) and false negatives (i.e., missed detections), which can result in suboptimal route planning. In this paper, we devise an effective detector for identifying faulty traffic sensors using a prediction model based on Gaussian Processes. Further, we present an approach for computing the optimal parameters of the detector which minimize losses due to false-positive and false-negative errors. We also characterize critical sensors, whose failure can have high impact on the route planning application. Finally, we implement our method and evaluate it numerically using a real-world dataset and the route planning platform OpenTripPlanner.", "histories": [["v1", "Wed, 8 Feb 2017 21:49:46 GMT  (1712kb,D)", "https://arxiv.org/abs/1702.02628v1", "Submitted to the Second International Workshop on Science of Smart City Operations and Platforms Engineering (SCOPE), Pittsburg, PA, 2017"], ["v2", "Thu, 16 Mar 2017 16:37:47 GMT  (1598kb,D)", "http://arxiv.org/abs/1702.02628v2", "Proceedings of The 2nd Workshop on Science of Smart City Operations and Platforms Engineering (SCOPE 2017), Pittsburgh, PA USA, April 2017, 6 pages"]], "COMMENTS": "Submitted to the Second International Workshop on Science of Smart City Operations and Platforms Engineering (SCOPE), Pittsburg, PA, 2017", "reviews": [], "SUBJECTS": "cs.AI cs.SY", "authors": ["amin ghafouri", "aron laszka", "abhishek dubey", "xenofon koutsoukos"], "accepted": false, "id": "1702.02628"}, "pdf": {"name": "1702.02628.pdf", "metadata": {"source": "CRF", "title": "Optimal Detection of Faulty Tra\u0080ic Sensors Used in Route Planning", "authors": ["Amin Ghafouri", "Aron Laszka", "Abhishek Dubey", "Xenofon Koutsoukos"], "emails": ["amin.ghafouri@vanderbilt.edu", "aron.laszka@vanderbilt.edu", "abhishek.dubey@vanderbilt.edu", "xenofon.koutsoukos@vanderbilt.edu", "permissions@acm.org."], "sections": [{"heading": null, "text": "CCS CONCEPTS \u2022Computer systems organization \u2192 Embedded and cyberphysical systems; Dependable and fault-tolerant systems and networks; \u2022 eory of computation\u2192 Gaussian processes;\nKEYWORDS fault detection, cyber-physical systems, smart city, route planning ACM Reference format: Amin Ghafouri, Aron Laszka, Abhishek Dubey, and Xenofon Koutsoukos. 2017. Optimal Detection of Faulty Tra c Sensors Used in Route Planning. In Proceedings of e 2nd Workshop on Science of Smart City Operations and Platforms Engineering, Pi sburgh, PA USA, April 2017 (SCOPE 2017), 6 pages. DOI: h p://dx.doi.org/10.1145/3063386.3063767\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro t or commercial advantage and that copies bear this notice and the full citation on the rst page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permi ed. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speci c permission and/or a fee. Request permissions from permissions@acm.org. SCOPE 2017, Pi sburgh, PA USA \u00a9 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM. 978-1-4503-4989-5/17/04. . .$15.00 DOI: h p://dx.doi.org/10.1145/3063386.3063767"}, {"heading": "1 INTRODUCTION", "text": "In smart cities, real-time tra c sensors may be deployed for various applications. However, sensors are prone to failures, which result in erroneous tra c data. Erroneous data can adversely a ect the performance of applications. To minimize the impact of sensor failures, we must detect them promptly and with high accuracy. However, typical detection algorithms may lead to a large number of false positives and false negatives, which can result in suboptimal performance.\nAnomaly detection of faulty tra c sensors has been studied in the literature. Typical approaches include using data-driven methods that incorporate historical and real-time data to detect anomalies [10], [18], [14], [16]. However, existing approaches may result in high performance-losses in tra c applications, mainly due to false-positive (FP) and false-negative (FN) errors. In order to minimize the losses, it is desirable to reduce the FP and FN rates as much as possible. But, there exists a trade-o between them, which can be changed through a detection threshold. To address this, it is necessary to take into account the tra c application when designing anomaly detectors, and quantify the losses in the tra c application caused by the FP and FN errors. By selecting the right detection threshold, the performance losses caused by FPs and FNs can be minimized.\nIn this paper, we study the problem of nding optimal thresholds for anomaly detection of faulty tra c sensors, considering route planning as the application of interest. e objective is to select the optimal thresholds of anomaly detectors in order to optimize the performance of the route planning application in the presence of faulty sensors. We devise an e ective detector for identifying faulty tra c sensors using a prediction model based on Gaussian Processes. Further, we present an approach for computing the optimal parameters of the detector which minimize losses due to false-positive and false-negative errors. We also characterize critical sensors, whose failure can have high impact on the trafc application. Finally, we implement our method and evaluate it numerically using a real-world dataset and the route planning platform OpenTripPlanner [11]. Our evaluation results show that the proposed strategy successfully minimizes the performance loss and identi es the critical sensors. ar X\niv :1\n70 2.\n02 62\n8v 2\n[ cs\n.A I]\n1 6\nM ar\n2 01\ne remainder of this paper is organized as follows. In Section 2, we present the background for route planning and Gaussian Process regression. In Section 3, we introduce the system model. In Section 4, we de ne a notion of optimal detection, present a method to obtain near-optimal thresholds, and de ne critical sensors. In Section 5, we implement our method and evaluate it numerically. In Section 6, we discuss related work. Concluding remarks are presented in Section 7."}, {"heading": "2 PRELIMINARIES", "text": ""}, {"heading": "2.1 Route Planning", "text": "LetG = (V ,E) be a directed graph with a setV of vertices and a set E of arcs. Each arc (u,v) \u2208 E has an associated nonnegative cost c(u,v). e cost (i.e., length) of a path is the sum of the costs of its arcs. In the point-to-point shortest path problem, one is given as input the graph G, a query q = (o,d), where o \u2208 V is an origin and d \u2208 V is a destination, and the objective is to nd a minimum-cost (i.e., shortest) path from o to d in G. In the many-to-many shortest path problem, a set of queries Q is given, and the goal is to nd the minimum-cost path for each query q = (o,d) \u2208 Q .\nere exist many route planning algorithms that compute optimal solutions in an e cient manner [1]. Among these methods, the bidirectional Dijkstra\u2019s algorithm with binary heaps computes point-to-point shortest path in O(|E | + |V | log |V |). Further, the Floyd-Warshall algorithm solves all pairs shortest paths in O(|V |3). A large number of methods have been designed to improve running time of shortest-path algorithms. For example, contraction hierarchies and arc ags have been successfully used [3]."}, {"heading": "2.2 Gaussian Process Regression", "text": "GPs provide a Bayesian paradigm to learn an implicit functional relationship y = f (x) from a training dataset {(x i ,yi ); i = 1, 2, ...,n}, where x i \u2208 Rd represents the vector of observed input variables (i.e., predictors), and yi is the observed target value. A comprehensive discussion of GPs in machine learning can be found in [13].\nGPs directly elicit a prior distribution on the function f (x), and assume it to be a GP a priori,\nf (x) \u223c GP ( \u00b5(x),k(x ,x \u2032) ) . (1)\nFor a new point x\u2217, the goal is to predict y\u2217 = f (x\u2217). Given that the regression function is a GP, the distribution of the values of f at any nite number of points is a multivariate Gaussian distribution. erefore, (\ny y\u2217\n) \u223c N ( \u00b5(x), ( K K \u2032\u2217 K\u2217 K\u2217\u2217 )) , (2)\nwhere K is the covariance matrix for the labeled points, K\u2217 is the covariance vector between the new point and the labeled points, and K\u2217\u2217 is the measurement noise. en,\nPr(y\u2217 |y) \u223c N ( K\u2217K\u22121y,K\u2217\u2217 \u2212 K\u2217K\u22121K \u2032\u2217 ) . (3)\ne prediction of a GPmodel depends on the choice of covariance function, which identi es the expected correlation between the observed data. Typically, a parametric family of functions is used, and the hyperparameters are inferred from the data. Examples of the commonly used covariance functions include polynomial kernel,\nautomatic relevance determination (ARD), and radial basis function (RBF). Methods for learning the hyperparameters are based on maximization of the marginal likelihood, which can be performed using gradient-based optimization algorithms."}, {"heading": "3 SYSTEM MODEL", "text": "In this section, we present the system model. We rst de ne a model of transportation network. en, we construct a detector for identifying faulty tra c sensors using a prediction model based on Gaussian Processes."}, {"heading": "3.1 Transportation Network", "text": "Consider a transportation network modeled as a graph G = (V ,E), where edges represent road segments and vertices represent connections between road segments (e.g., tra c junctions). We assume that a subset S \u2286 E of the road segments are monitored by sensors that measure tra c state (e.g., speed, occupancy, ow) at discrete timesteps k \u2208 N. e measurements of these sensors are transmitted to a navigation service, which given a set of queries Q(k) at timestep k , computes the corresponding shortest paths. For segments without a tra c sensor, we assume the navigation service uses either previously computed values or predicted values using measurements of adjacent sensors.\nTra c sensors may be faulty due to miscalibration or hardware failure. If a sensor s \u2208 S is faulty, there is a discrepancy between the actual and measured values. In other words, if as (k) is the actual value and ms (k) is the measured value of faulty sensor s , thenms (k) = as (k) + \u03b5s (k), where \u03b5s (k) is the fault value at time k . In this model, we do not consider faults that result in no data being sent, since such cases can easily be ltered out by an operator."}, {"heading": "3.2 Gaussian Process-Based Detector", "text": "Given the sensor measurements, we need to decide whether some sensors are faulty. We assume that the number of sensors that simultaneously become faulty is low, which is true in practice. As a result, for any sensor, the majority of nearby sensors that have not been marked faulty provide reliable tra c data, and so we can use these nearby sensors to predict the value measured by the sensor in question. To detect faults, we then compare the predictions to the measurements, and if there is a signi cant di erence between the predicted values and the received measurements, an alarm indicating presence of a fault in that particular sensor is triggered.\n3.2.1 Tra ic Prediction. As our tra c predictor, we use GPs, which is a kernel-based machine learning method. Kernel-based methods have gained special a ention for tra c prediction because of their generalization capability and superior nonlinear approximation. Among di erent kernel-based methods, previous work shows that GPs outperform other methods such as ARIMA and neural networks [17]. We use GPs because in addition to the above advantages, it allows for explicit probabilistic interpretation of forecasting outputs.\nAs the kernel function, we decide for the commonly used ARD squared exponential,\nK(m(k),m(k)\u2032) = \u03c3 2f exp ( \u221212 d\u2211 i=1 (mi (k) \u2212m\u2032i (k)) 2 \u03c3 2i ) , (4)\nwherem(k) andm(k)\u2032 are vectors of measurements, and \u03c3f and {\u03c3i }di=1 are hyperparameters.\nWe let the target variable be the predicted tra c value ps (e.g., tra c ow or occupancy) of sensor s \u2208 S at timestep k . Further, we let the predictor variables be the measured tra c values of other sensors at the same timestep. In practice, two sensors are highly correlated if they are in close proximity. erefore, it is possible to select predictor variables as the measured values of d closest sensors from the target sensor, where the choice ofd depends on the network structure. is way, the predicted tra c value is de ned as ps (k) = f (mV (s)(k)), where V (s) is the set of d closest sensors from s .\n3.2.2 Detection Algorithm. We can e ciently detect failures for each sensor s \u2208 S , by comparing the measured tra c value ms (k) with the predicted tra c value ps (k). We use Cumulative sum control chart (CUSUM) as the detection algorithm, which is a sequential analysis technique typically used for monitoring change detection [12].\nConsider sensor s \u2208 S , with a sequence of measurements ms (1), ...,ms (k) and corresponding tra c predictions with means ps (1), ...,ps (k) and standard deviations \u03c3s (1), ...,\u03c3s (k). e standardized residual signal is de ned as\nzs (k) = ms (k) \u2212 ps (k)\n\u03c3s (k) . (5)\nMoreover, upper and lower cumulative sums are de ned as,\nUs (k) = max(0,Us (k \u2212 1) + zs (k) \u2212 bs ), (6)\nLs (k) = min(0,Ls (k \u2212 1) + zs (k) + bs ), (7) whereUs (k) = Ls (k) = 0 for k = 1, and bs is a small constant.\nDenoting the detection threshold at timestep k by \u03b7s (k), a measurement sequence violates the CUSUM criterion at the sample zs (k) if it obeysUs (k) > \u03b7s (k) or Ls (k) < \u2212\u03b7s (k). Formally, le ing H0 and H1 be the null and fault hypothesis, the decision rule is described by\nds (Us (k),Ls (k)) = {\nH1 ifUs (k) > \u03b7s (k) or Ls (k) < \u2212\u03b7s (k) H0 otherwise .\n(8)\n3.2.3 False-Negative and False-Positive Trade-o . In anomaly detectors, there might be a false negative, which means failing to raise an alarm when a fault did happen. Further, there might be a false positive, which means raising an alarm when the sensor exhibits normal behavior. It is desirable to reduce the FP and FN probabilities as much as possible. But, there exists a trade-o between them, which can be controlled by changing the threshold. In particular, by decreasing (increasing) the threshold, one can decrease (increase) the FN probability and increase (decrease) the FP probability.\nWe represent the FN probability for each sensor s by the function FNs : R+ \u2192 [0, 1], where FNs (\u03b7s (k)) is the probability of FN when the threshold is \u03b7s (k), given that the sensor is faulty. Similarly, we denote the a ainable FP probability for each sensor s by FPs : R+ \u2192 [0, 1], where FPs (\u03b7s (k)) is the FP probability when the threshold is \u03b7s (k), given that the sensor is in normal operation. It is possible to plot the FP probability as a function of the FN probability for various threshold values [5] (e.g., see Figure 3)."}, {"heading": "4 OPTIMAL DETECTION", "text": "In this section, we formulate the problem of nding optimal thresholds for anomaly detection of tra c sensors, considering route planning as their primary application. e objective is to select the optimal thresholds for anomaly detectors in order to minimize the losses caused by false positives and false negatives. en, we present an algorithm to nd near-optimal detection thresholds. Finally, we characterize critical sensors, whose failure can have high impact on the tra c application."}, {"heading": "4.1 Optimization Problem", "text": "First, consider the set of queries Q , and a route planning algorithm that takes as inputs the set of queries and the measured and predicted tra c values, and outputs the optimal routes. For a single query q \u2208 Q and sensor s \u2208 S , we denote by Pq (ms ) the optimal route computed using the measured tra c values for all sensors, and we denote by Pq (ps ) the optimal route using the predicted value ps for sensor s and the measured valuesm\u2212s for all other sensors. Finally, for a given route r and sensor s , let T (r ,ms ) and T (r ,ps ) be the total travel time based on the measured ms and predicted ps values for sensor s , respectively, and the measured valuesm\u2212s for all other sensors.\nen, T ( Pq (ps ),ms ) is the measured travel time of the shortest route computed using the predicted value ps for sensor s . Similarly, T ( Pq (ms ),ms ) is the measured travel time of the shortest route computed using the measured valuems . We de ne the loss caused by a false positive as follows:\nCFPs,q (ps ,ms ) = T ( Pq (ps ),ms ) \u2212T ( Pq (ms ),ms ) , (9)\nthat is, the di erence in measured travel time between using either the predicted or the measured value for sensor s .\ne rationale behind the above expression is the following. In case of a FP, according to the detector, the measured valuems is incorrect, but it is actually correct. Consequently, we choose a route that is computed using our prediction ps instead of the optimal route, which would be computed using the measurementms . To quantify the loss, we need to compare the travel times of the two routes, and we must use the measured tra c value ms for this comparison since that is the correct value in this case.\nSimilarly, for a FN,T ( Pq (ms ),ps ) is the predicted travel time of\nthe shortest route using measured valuems , and T ( Pq (ps ),ps ) is the predicted travel time of the shortest path using predicted value ps . e loss caused by a FN is\nCFNs,q (ps ,ms ) = T ( Pq (ms ),ps ) \u2212T ( Pq (ps ),ps ) , (10)\nthat is, the di erence in predicted travel time between using either the measured or the predicted value for sensor s . Note that in (9) and (10), the values of P and T can be computed using existing route planning algorithms [1].\nNext, let FPs (\u03b7s (k)) and FNs (\u03b7s (k)) be the probabilities of falsepositive and false-negative errors when detection threshold \u03b7s (k) is selected. Further, letpf be the probability of fault, and letpn = 1\u2212pf be the probability of normal operation. For a given query q, the total loss caused by FPs and FNs is,\nLs,q (\u03b7s (k)) =FPs (\u03b7s (k)) \u00b7CFPs,q (ps ,ms ) \u00b7 pn+\nFNs (\u03b7s (k)) \u00b7CFNs,q (ps ,ms ) \u00b7 pf . (11)\nConsidering the set of all queries Q , the total loss is Ls (\u03b7s (k),Q) = \u2211 q\u2208Q Ls,q (\u03b7s (k)), (12)\nwhich allows us to de ne the notion of optimal detection threshold for a sensor.\nDe nition 4.1 (Optimal Detection). e detection threshold \u03b7\u2217s (k) is optimal for sensor s if it minimizes the loss function (12). Formally, \u03b7\u2217s (k) is optimal for sensor s if\n\u03b7\u2217s (k) \u2208 argmin \u03b7s (k ) Ls (\u03b7s (k),Q). (13)\nFigure 1 shows the ow of information in our approach. At each timestep k , given measurementsm(k), the predictor computes the predicted measurements p(k). en, given a set of queries Q(k), and the predictions and measurements, the thresholds \u03b7(k) are computed for the detectors using the algorithm presented next."}, {"heading": "4.2 Algorithm for Obtaining resholds", "text": "We present Algorithm 1 to nd near-optimal detection thresholds. e algorithm implements a random-restart hill climbing technique. If the FP to FN trade-o curve is convex, which makes (12) convex, we are able to compute optimal thresholds using convex optimization methods. However, this is not generally the case, as trade-o curves tend to be non-convex (see Figure 3 for an instance of a trade-o curve).\ne algorithm considers each sensor separately, and nds its corresponding detection threshold. At each iteration, the algorithm selects a new starting point and nds a local minimum using gradient-based optimization. In order to avoid unnecessary computation, we skip computing detection thresholds for sensors with very similar measured and predicted tra c values. Formally, for sensor s \u2208 E, we select detection threshold \u03b7s = \u221e, if |zs (k)| < b. is is because the detector\u2019s statisticsUs (k) and Ls (k) are decreasing and it is unlikely that an alert would be raised if one was not raised before."}, {"heading": "4.3 Critical Sensors", "text": "Value of the optimal loss gives insight on the criticality of tra c sensors. Fault on a sensor that has high loss value degrades the system\u2019s performance more than fault on a sensor with low loss value. We formally de ne the set of \u03b4 -critical sensors below.\nDe nition 4.2 (Critical Sensors). Set of \u03b4 -critical sensors in a time period [1,T ] is de ned as the set of sensors which have the average\nAlgorithm 1 Algorithm for Obtaining resholds 1: Input Q , FP(\u03b7), FN (\u03b7), \u03b1 , \u03b3 2: Initialize: \u03b7 \u2190 \u03b70, L\u2217 \u2190\u221e 3: for all s \u2208 S do 4: if |z(k)| \u2264 b then 5: \u03b7\u2217s \u2190\u221e 6: else 7: while i < N do 8: \u03b7s,new \u2190\u21a9 FP\u22121s (Uniform([0, 1])) 9: \u03b7s,old \u2190 0 10: while |Ls (\u03b7s,new ,Q) \u2212 Ls (\u03b7s,old ,Q)|>\u03b1 do 11: \u03b7s,old \u2190 \u03b7s,new 12: \u03b7s,new \u2190 \u03b7s,old \u2212 \u03b3\u2207\u03b7s Ls (\u03b7s,old ,Q) 13: if Ls (Q,\u03b7s,new ) < L\u2217s then 14: \u03b7\u2217s \u2190 \u03b7s,new 15: L\u2217s \u2190 Ls (\u03b7s,new ,Q) 16: i \u2190 i + 1 17: return \u03b7\u2217\noptimal loss values of greater than or equal to \u03b4 . at is to say, a sensor s is critical if 1T \u2211T k=1 Ls (\u03b7 \u2217 s (k),Q(k)) \u2265 \u03b4 .\nIdentifying critical sensors is bene cial, since it allows us to locate the most vulnerable elements of a network, which should be strengthened rst to increase the robustness of a network. For example, if we have a limited budget which permits us to replace only a subset of the sensors with more robust ones, then we should start with the critical sensors."}, {"heading": "5 EVALUATION", "text": "In this section, we implement our method and evaluate it numerically using a route planning platform."}, {"heading": "5.1 System Model", "text": "5.1.1 Tra ic Data. We use a tra c dataset obtained from the Caltrans Performance Measurement System (PeMS) database [2]. e database provides real-time and historical tra c data from over 39,000 individual sensors, which span the freeway system across metropolitan areas of the State of California. Figure 2 shows the location of sensors in our case study, in which a total of 40 sensors are considered. We use the 5-minute aggregated data collected on the weekdays of September 3, 2016 to September 17, 2016. e dataset contains 115,200 data points. e rst 7 days are used as training data, and the remaining 7 days are used as test data.\nTo simulate faults, we use models for a speci c set of fault types and ranges of fault magnitudes, which is similar to the approach presented in [16]. e fault models are: 1) Constant Relative Overcount (caused by e.g., unsuitable sensitivity levels); range: 3% to 7% of the actual values (i.e., \u03b5s (k) = usas (k) where 0.03 \u2264 us \u2264 0.07), 2) Conditional Undercount (caused by e.g., sensor saturation); range: 7% to 13% (i.e., \u03b5s (k) = usas (k) where \u22120.13 \u2264 us \u2264 \u22120.07).\nNext, for each sensor, we construct a predictor using the measurements of its d closest sensors as the predictor variables. We select d = 10 since it results in the minimum overall prediction error. We choose bs = 0.05 for all the detectors, to make them\nsensitive to small shi s in the mean. We evaluate each detector\u2019s performance by plo ing the FP probability against the FN probability at various threshold values. Figure 3 shows the trade-o curve of the detector implemented for a sensor, whose identi er in the PeMS dataset is VDS 774685.\n5.1.2 Route Planner. We use OpenTripPlanner (OTP), which is an open source platform for multi-modal route planning [11]. OTP relies on open data standards including OpenStreetMap for street networks. e default routing algorithm in OTP is the A\u2217 algorithm with a cost-heuristic to prune the search. For improved performance on large networks, it also uses contraction hierarchies."}, {"heading": "5.2 Results", "text": "We simulate a route planning scenario in OTP, where the edge costs (i.e., travel times) are updated using our tra c data. For a source and destination as shown in Figure 4a, we consider 1000 queries made on September 15, from 9:00 am to 10:00 am. Figure 4a shows the shortest route when a particular sensor (i.e., VDS 774685) is healthy, and Figure 4b shows the shortest route when the same sensor\nhas a conditional undercount fault. Note that if the fault remains undetected (i.e., false negative), a suboptimal route (Figure 4b) will be selected instead of the optimal route (Figure 4a). In another scenario, assume an alarm is triggered under normal operation (i.e., false positive). is means that the predicted value is used for route planning instead of the accurate measurement value, which depending on the prediction accuracy, may result in a suboptimal route planning solution.\nWe use Algorithm 1 to nd near-optimal thresholds that minimize losses due to FPs and FNs. We assume that for each sensor, the probability of fault is pf = 0.05. For the previously considered sensor, at k = 1 (i.e., from 9:00 am to 9:05 am), the loss value (12) as a function of the threshold is shown in Figure 5. In this case, Algorithm 1 nds the optimal thresholds. For the Conditional Undercount, the optimal threshold and the minimum loss are \u03b7 = 0.17 and L = 16.2, whereas for the Constant Relative Overcount, the optimal threshold and the minimum loss are \u03b7 = 0.39 and L = 30.0.\nFurther, Table 1 shows the average optimal loss for some sensors, i.e., 1T \u2211T k=1 Ls (\u03b7 \u2217 s (k),Q(k)). As a baseline, we also compute the minimum loss when the thresholds have static values at all the timesteps. at is, for all k , we assign \u03b7s (k) = \u03b7\u2217s , where \u03b7\u2217s \u2208 argmin\u03b7s \u2211 k Ls (\u03b7s ,Q). We observe that our method achieves signi cantly smaller losses compared the static case. e loss values can also be used to identify the set of \u03b4 -critical sensors. For example, 50.0-critical sensors are made bold in the table."}, {"heading": "6 RELATEDWORK", "text": "ere are many papers that study tra c prediction. e work in [9] uses multivariate kernel regression models to predict tra c ow in\na network, considering route planning as the application. In [4], the paper provides a travel time prediction algorithm in a small scale simulated network. e work in [15] constructs robust algorithms for short-term tra c ow prediction. Finally, in [7], classical time series approaches are used for short-term speed prediction in a network.\ne problem of anomaly detection of tra c sensors is reviewed in [10]. e paper categorizes di erent methods into the three levels of macroscopic, mesoscopic, and microscopic, and provides practical guidelines for anomaly detection. e work in [18] presents three methods to detect faulty tra c measurements. e methods are based on Pearson\u2019s correlation, cross-correlation, and multivariate ARIMA. Finally, the work in [14] presents a test, which is based on the relationship between ows at adjacent sensors to detect faulty loop detectors. Nevertheless, since previous papers use static thresholds, their methods result in high losses due to FPs and FNs.\nIn our previous work, we have considered the problem of optimal parameter selection for anomaly detection. e problem of nding optimal thresholds for intrusion detectors is studied in [8]. e paper shows that computing optimal a acks and defenses is computationally expensive, and proposes heuristic algorithms for computing near-optimal strategies. Further, the work in [6] studies the problem of nding optimal thresholds for anomaly-based detectors implemented in dynamical systems in the face of strategic a acks. e paper provides algorithms to compute optimal thresholds that minimize losses considering best-response a acks."}, {"heading": "7 CONCLUSIONS", "text": "We studied the problem of nding optimal detection parameters for anomaly detection of tra c sensors, considering route planning as application. We constructed a predictor using Gaussian processes, which was then used for anomaly detection. We studied how to nd the optimal detection parameters, which minimize losses due to FP and FN errors. We also characterized critical sensors, whose failure can have high impact on the tra c application. We implemented our method and evaluated it numerically using a route-planning platform. Our evaluations indicated that the proposed detection method successfully minimizes the performance losses."}, {"heading": "ACKNOWLEDGMENTS", "text": "e work is supported by the National Science Foundation (CNS1238959, CNS-1647015), the Air Force Research Laboratory (FA 8750- 14-2-0180), and the National Institute of Standards and Technology (70NANB15H263)"}], "references": [{"title": "Route planning in transportation networks", "author": ["Hannah Bast", "Daniel Delling", "Andrew Goldberg", "Ma\u008ahias M\u00fcller-Hannemann", "\u008comas Pajor", "Peter Sanders", "Dorothea Wagner", "Renato F Werneck"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2016}, {"title": "User-constrained multimodal route planning", "author": ["Julian Dibbelt", "\u008comas Pajor", "Dorothea Wagner"], "venue": "Journal of Experimental Algorithmics (JEA)", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "An adaptive information fusion model to predict the short-term link travel time distribution in dynamic tra\u0081c networks", "author": ["Lili Du", "Srinivas Peeta", "Yong Hoon Kim"], "venue": "Transportation Research Part B: Methodological 46,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "An introduction to ROC analysis", "author": ["Tom Fawce"], "venue": "Pa\u0088ern recognition le\u0088ers 27,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2006}, {"title": "Optimal \u008cresholds for Anomaly-Based Intrusion Detection in Dynamical Environments", "author": ["Amin Ghafouri", "Waseem Abbas", "Aron Laszka", "Yevgeniy Vorobeychik", "Xenofon Koutsoukos"], "venue": "In Proceedings of the Decision and Game \u008aeory for Security: 7th International Conference,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Modeling tra\u0081c volatility dynamics in an urban network", "author": ["Yiannis Kamarianakis", "Angelos Kanas", "Poulicos Prastacos"], "venue": "Transportation Research Record: Journal of the Transportation Research Board", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "Optimal thresholds for intrusion detection systems", "author": ["Aron Laszka", "Waseem Abbas", "S Shankar Sastry", "Yevgeniy Vorobeychik", "Xenofon Koutsoukos"], "venue": "In Proceedings of the Symposium and Bootcamp on the Science of Security. ACM", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "Dynamic route planning with real-time tra\u0081c predictions", "author": ["\u008comas Liebig", "Nico Piatkowski", "Christian Bockermann", "Katharina Morik"], "venue": "Information Systems", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2017}, {"title": "Faulty loop data analysis/correction and loop fault detection", "author": ["Xiao-Yun Lu", "Pravin Varaiya", "Roberto Horowitz", "Joe Palen"], "venue": "In 15th World Congress on Intelligent Transport Systems", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2008}, {"title": "\u008ce opentripplanner project", "author": ["B McHugh"], "venue": "\u008ae OpenTripPlanner Project", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Continuous inspection schemes", "author": ["ES Page"], "venue": "Biometrika 41,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1954}, {"title": "Gaussian processes for machine learning", "author": ["Carl Edward Rasmussen"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2006}, {"title": "\u008ae development and application of an urban link travel time model using data derived from inductive loop detectors", "author": ["Stephen Peter Robinson"], "venue": "Ph.D. Dissertation", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "Network-scale tra\u0081c modeling and forecasting with graphical lasso and neural networks", "author": ["Shiliang Sun", "Rongqing Huang", "Ya Gao"], "venue": "Journal of Transportation Engineering 138,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2012}, {"title": "Identifying faulty tra\u0081c detectors with Floating Car Data", "author": ["Peter Widhalm", "Hannes Koller", "Wolfgang Ponweiser"], "venue": "In Integrated and Sustainable Transportation System (FISTS),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "Gaussian processes for short-term tra\u0081c volume forecasting", "author": ["Yuanchang Xie", "Kaiguang Zhao", "Ying Sun", "Dawei Chen"], "venue": "Transportation Research Record: Journal of the Transportation Research Board", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2010}, {"title": "Towards detection of faulty tra\u0081c sensors in real-time", "author": ["Nikolas Zygouras", "Nikolaos Panagiotou", "Ioannis Katakis", "Dimitrios Gunopulos", "UOA GR"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}], "referenceMentions": [{"referenceID": 8, "context": "Typical approaches include using data-driven methods that incorporate historical and real-time data to detect anomalies [10], [18], [14], [16].", "startOffset": 120, "endOffset": 124}, {"referenceID": 16, "context": "Typical approaches include using data-driven methods that incorporate historical and real-time data to detect anomalies [10], [18], [14], [16].", "startOffset": 126, "endOffset": 130}, {"referenceID": 12, "context": "Typical approaches include using data-driven methods that incorporate historical and real-time data to detect anomalies [10], [18], [14], [16].", "startOffset": 132, "endOffset": 136}, {"referenceID": 14, "context": "Typical approaches include using data-driven methods that incorporate historical and real-time data to detect anomalies [10], [18], [14], [16].", "startOffset": 138, "endOffset": 142}, {"referenceID": 9, "context": "Finally, we implement our method and evaluate it numerically using a real-world dataset and the route planning platform OpenTripPlanner [11].", "startOffset": 136, "endOffset": 140}, {"referenceID": 0, "context": "\u008cere exist many route planning algorithms that compute optimal solutions in an e\u0081cient manner [1].", "startOffset": 94, "endOffset": 97}, {"referenceID": 1, "context": "For example, contraction hierarchies and arc \u0083ags have been successfully used [3].", "startOffset": 78, "endOffset": 81}, {"referenceID": 11, "context": "A comprehensive discussion of GPs in machine learning can be found in [13].", "startOffset": 70, "endOffset": 74}, {"referenceID": 15, "context": "Among di\u0082erent kernel-based methods, previous work shows that GPs outperform other methods such as ARIMA and neural networks [17].", "startOffset": 125, "endOffset": 129}, {"referenceID": 10, "context": "We use Cumulative sum control chart (CUSUM) as the detection algorithm, which is a sequential analysis technique typically used for monitoring change detection [12].", "startOffset": 160, "endOffset": 164}, {"referenceID": 0, "context": "We represent the FN probability for each sensor s by the function FNs : R+ \u2192 [0, 1], where FNs (\u03b7s (k)) is the probability of FN when the threshold is \u03b7s (k), given that the sensor is faulty.", "startOffset": 77, "endOffset": 83}, {"referenceID": 0, "context": "Similarly, we denote the a\u008aainable FP probability for each sensor s by FPs : R+ \u2192 [0, 1], where FPs (\u03b7s (k)) is the FP probability when the threshold is \u03b7s (k), given that the sensor is in normal operation.", "startOffset": 82, "endOffset": 88}, {"referenceID": 3, "context": "It is possible to plot the FP probability as a function of the FN probability for various threshold values [5] (e.", "startOffset": 107, "endOffset": 110}, {"referenceID": 0, "context": "Note that in (9) and (10), the values of P and T can be computed using existing route planning algorithms [1].", "startOffset": 106, "endOffset": 109}, {"referenceID": 0, "context": "8: \u03b7s,new \u2190\u21a9 FP\u22121 s (Uniform([0, 1])) 9: \u03b7s,old \u2190 0", "startOffset": 29, "endOffset": 35}, {"referenceID": 14, "context": "To simulate faults, we use models for a speci\u0080c set of fault types and ranges of fault magnitudes, which is similar to the approach presented in [16].", "startOffset": 145, "endOffset": 149}, {"referenceID": 9, "context": "We use OpenTripPlanner (OTP), which is an open source platform for multi-modal route planning [11].", "startOffset": 94, "endOffset": 98}, {"referenceID": 7, "context": "\u008ce work in [9] uses multivariate kernel regression models to predict tra\u0081c \u0083ow in", "startOffset": 11, "endOffset": 14}, {"referenceID": 2, "context": "In [4], the paper provides a travel time prediction algorithm in a small scale simulated network.", "startOffset": 3, "endOffset": 6}, {"referenceID": 13, "context": "\u008ce work in [15] constructs robust algorithms for short-term tra\u0081c \u0083ow prediction.", "startOffset": 11, "endOffset": 15}, {"referenceID": 5, "context": "Finally, in [7], classical time series approaches are used for short-term speed prediction in a network.", "startOffset": 12, "endOffset": 15}, {"referenceID": 8, "context": "\u008ce problem of anomaly detection of tra\u0081c sensors is reviewed in [10].", "startOffset": 64, "endOffset": 68}, {"referenceID": 16, "context": "\u008ce work in [18] presents three methods to detect faulty tra\u0081c measurements.", "startOffset": 11, "endOffset": 15}, {"referenceID": 12, "context": "Finally, the work in [14] presents a test, which is based on the relationship between \u0083ows at adjacent sensors to detect faulty loop detectors.", "startOffset": 21, "endOffset": 25}, {"referenceID": 6, "context": "\u008ce problem of \u0080nding optimal thresholds for intrusion detectors is studied in [8].", "startOffset": 78, "endOffset": 81}, {"referenceID": 4, "context": "Further, the work in [6] studies the problem of \u0080nding optimal thresholds for anomaly-based detectors implemented in dynamical systems in the face of strategic a\u008aacks.", "startOffset": 21, "endOffset": 24}], "year": 2017, "abstractText": "In a smart city, real-time tra\u0081c sensors may be deployed for various applications, such as route planning. Unfortunately, sensors are prone to failures, which result in erroneous tra\u0081c data. Erroneous data can adversely a\u0082ect applications such as route planning, and can cause increased travel time. To minimize the impact of sensor failures, we must detect them promptly and accurately. However, typical detection algorithms may lead to a large number of false positives (i.e., false alarms) and false negatives (i.e., missed detections), which can result in suboptimal route planning. In this paper, we devise an e\u0082ective detector for identifying faulty tra\u0081c sensors using a prediction model based on Gaussian Processes. Further, we present an approach for computing the optimal parameters of the detector which minimize losses due to false-positive and falsenegative errors. We also characterize critical sensors, whose failure can have high impact on the route planning application. Finally, we implement our method and evaluate it numerically using a realworld dataset and the route planning platform OpenTripPlanner.", "creator": "LaTeX with hyperref package"}}}