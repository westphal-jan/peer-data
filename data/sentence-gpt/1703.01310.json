{"id": "1703.01310", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Mar-2017", "title": "Count-Based Exploration with Neural Density Models", "abstract": "Bellemare et al. (2016) introduced the notion of a pseudo-count to generalize count-based exploration to non-tabular reinforcement learning. This pseudo-count is derived from a density model which effectively replaces the count table used in the tabular setting.\n\n\n\n\n\nThe idea of an imaginary population in a real-time sense was first explored by J. R. Mathers. In 2007, the authors proposed a \"self-identification\" model. It is based on a density model with a simple structure: a subset of the population that is random.\nMathers used this concept as a way of finding out who is in a particular population and who is not. The idea was first proposed by Kale and Mathers, but was now abandoned by Mathers and Cramlin. For instance, the model uses the number of nodes in the data, but the number of nodes is small.\nThe concept is then used in the regression model to explore the existence of a new population and thus to estimate the number of node-specific outliers to determine the extent of variance and the degree of variance. The model considers the population distribution and the probability of outliers to be greater than 1% for all (nearly 4%).\nIn a regression model the median annual chance of a random population being generated is only 0.5% for all (nearly 4%). This probability distribution (1) is highly unlikely for all non-negative communities. The probability distribution (2) is very highly unlikely for all non-negative communities. In the regression model it is not as likely for all non-positive communities.\nIn contrast to the simple estimate of a random population, we find that in a random population, all random population distribution is highly unlikely for all non-negative communities. The probability distribution (3) is very unlikely for all non-positive populations.\nSo in the regression model the median annual probability of random population being generated is just 0.5% for all non-negative communities. In the regression model, the probability distribution is 0.5% for all non-negative communities. We find that, in a regression model, all random population distribution is highly unlikely for all non-negative communities.\nIn the regression model, we find that in a regression model, all random population distribution is highly unlikely for all non-negative communities. In the regression model, the probability distribution (4) is extremely unlikely for all non-negative communities.\nIn the regression model", "histories": [["v1", "Fri, 3 Mar 2017 19:07:53 GMT  (2260kb,D)", "http://arxiv.org/abs/1703.01310v1", null], ["v2", "Wed, 14 Jun 2017 13:56:28 GMT  (2253kb,D)", "http://arxiv.org/abs/1703.01310v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["georg ostrovski", "marc g bellemare", "a\u00e4ron van den oord", "r\u00e9mi munos"], "accepted": true, "id": "1703.01310"}, "pdf": {"name": "1703.01310.pdf", "metadata": {"source": "META", "title": "Count-Based Exploration with Neural Density Models", "authors": ["Georg Ostrovski", "Marc G. Bellemare", "A\u00e4ron van den Oord", "R\u00e9mi Munos"], "emails": ["<ostrovski@google.com>."], "sections": [{"heading": null, "text": "In this paper we consider two questions left open by their work: First, how important is the quality of the density model for exploration? Second, what role does the Monte Carlo update play in exploration? We answer the first question by demonstrating the use of PixelCNN, an advanced neural density model for images, to supply a pseudo-count. In particular, we examine the intrinsic difficulties in adapting Bellemare et al.\u2019s approach when assumptions about the model are violated. The result is a more practical and general algorithm requiring no special apparatus. We combine PixelCNN pseudo-counts with different agent architectures to dramatically improve the state of the art on several hard Atari games. One surprising finding is that the mixed Monte Carlo update is a powerful facilitator of exploration in the sparsest of settings, including Montezuma\u2019s Revenge.\n1. Introduction Exploration is the process by which an agent learns about its environment. In the reinforcement learning framework, this involves reducing the agent\u2019s uncertainty about the environment\u2019s transition dynamics and attainable rewards. From a theoretical perspective, exploration is now wellunderstood (e.g. Strehl & Littman, 2008; Jaksch et al., 2010; Osband et al., 2016), and Bayesian methods have\n1Google DeepMind, London, UK. Correspondence to: Georg Ostrovski <ostrovski@google.com>.\nbeen successfully demonstrated in a number of settings (Deisenroth & Rasmussen, 2011; Guez et al., 2012). On the other hand, practical algorithms for the general case remain scarce; fully Bayesian approaches are usually intractable in large state spaces, and the count-based method typical of theoretical results is not applicable in the presence of value function approximation.\nRecently, Bellemare et al. (2016) proposed the notion of pseudo-count as a reasonable generalization of the tabular setting considered in the theory literature. The pseudocount is defined in terms of a density model \u03c1 trained on the sequence of states experienced by an agent:\nN\u0302(x) = \u03c1(x)n\u0302(x),\nwhere n\u0302(x) can be thought of as a total pseudo-count computed from the model\u2019s recoding probability \u03c1\u2032(x), the probability of x computed immediately after training on x. As a practical application the authors used the pseudocounts derived from the simple CTS density model (Bellemare et al., 2014) to incentivize exploration in Atari 2600 agents. One of the main outcomes of their work was substantial empirical progress on the infamously hard game MONTEZUMA\u2019S REVENGE.\nTheir method critically hinged on several assumptions regarding the density model: 1) the model should be learning-positive, i.e. the probability assigned to a state x should increase with training; 2) it should be trained online, using each sample exactly once; and 3) the effective model step-size should decay at a rate of n\u22121. Part of their empirical success also relied on a mixed Monte Carlo/QLearning update rule, which permitted fast propagation of the exploration bonuses.\nIn this paper, we set out to answer several research questions related to these modelling choices and assumptions:\n1. To what extent does a better density model give rise to better exploration?\n2. Can the above modelling assumptions be relaxed without sacrificing exploration performance?\n3. What role does the mixed Monte Carlo update play in successfully incentivizing exploration?\nar X\niv :1\n70 3.\n01 31\n0v 1\n[ cs\n.A I]\n3 M\nar 2\n01 7\nIn particular, we explore the use of PixelCNN (van den Oord et al., 2016b;a), a state-of-the-art neural density model. We examine the challenges posed by this approach:\nModel choice. Performing two evaluations and one model update at each agent step (to compute \u03c1(x) and \u03c1\u2032(x)) can be prohibitively expensive. This requires the design of a simplified \u2013 yet sufficiently expressive and accurate \u2013 PixelCNN architecture.\nModel training. A CTS model can naturally be trained from sequentially presented, correlated data samples. Training a neural model in this online fashion requires more careful attention to the optimization procedure to prevent overfitting and catastrophic forgetting (French, 1999).\nModel use. The theory of pseudo-counts requires the density model\u2019s rate of learning to decay over time. Optimization of a neural model, however, imposes constraints on the step-size regime which cannot be violated without deteriorating effectiveness and stability of training.\nThe concept of intrinsic motivation has made a recent resurgence in reinforcement learning research, in great part due to a dissatisfaction with -greedy and Boltzmann policies. Of note, Tang et al. (2016) maintain an approximate count by means of hash tables over features, which in the pseudo-count framework corresponds to a hash-based density model. Houthooft et al. (2016) used a second-order Taylor approximation of the prediction gain to drive exploration in continuous control. As research moves towards ever more complex environments, we expect the trend towards more intrinsically motivated solutions to continue.\n2. Background 2.1. Pseudo-Count and Prediction Gain\nHere we briefly introduce notation and results, referring the reader to (Bellemare et al., 2016) for technical details.\nLet \u03c1 be a density model on a finite space X , and \u03c1n(x) the probability assigned by the model to x after being trained on a sequence of states x1, . . . , xn. Assume \u03c1n(x) > 0 for all x, n. The recoding probability \u03c1\u2032n(x) is then the probability the model would assign to x if it were trained on that same x one more time. We call \u03c1 learning-positive if \u03c1\u2032n(x) \u2265 \u03c1n(x) for all x1, . . . , xn, x \u2208 X . The prediction gain (PG) of \u03c1 is\nPGn(x) = log \u03c1 \u2032 n(x)\u2212 log \u03c1n(x). (1)\nA learning-positive \u03c1 implies PGn(x) \u2265 0 for all x \u2208 X . For learning-positive \u03c1, we define the pseudo-count as\nN\u0302n(x) = \u03c1n(x)(1\u2212 \u03c1\u2032n(x)) \u03c1\u2032n(x)\u2212 \u03c1n(x) ,\nderived from postulating that a single observation of x \u2208 X\nshould lead to a unit increase in pseudo-count:\n\u03c1n(x) = N\u0302n(x)\nn\u0302 , \u03c1\u2032n(x) =\nN\u0302n(x) + 1\nn\u0302+ 1 ,\nwhere n\u0302 is the pseudo-count total. The pseudo-count generalizes the usual state visitation count function Nn(x). Under certain assumptions on \u03c1n, pseudo-counts grow approximately linearly with real counts. Crucially, the pseudo-count can be approximated using the prediction gain of the density model:\nN\u0302n(x) \u2248 ( ePGn(x) \u2212 1 )\u22121 .\nIts main use is to define an exploration bonus. We consider a reinforcement learning (RL) agent interacting with an environment that provides observations and extrinsic rewards (see Sutton & Barto, 1998, for a thorough exposition of the RL framework). To the reward at step n we add the bonus\nr+(x) := (N\u0302n(x)) \u22121/2,\nwhich incentivizes the agent to try to re-experience surprising situations. Quantities related to prediction gain have been used for similar purposes in the intrinsic motivation literature (Lopes et al., 2012), where they measure an agent\u2019s learning progress (Oudeyer et al., 2007). Although the pseudo-count bonus is close to the prediction gain, it is asymptotically more conservative and supported by stronger theoretical guarantees.\n2.2. Density Models for Images\nThe CTS density model (Bellemare et al., 2014) is based on the namesake algorithm, Context Tree Switching (Veness et al., 2012), a Bayesian variable-order Markov model. In its simplest form, the model takes as input a 2D image and assigns to it a probability according to the product of location-dependent L-shaped filters, where the prediction of each filter is given by a CTS algorithm trained on past images. In Bellemare et al. (2016), this model was applied to 3-bit greyscale, 42 \u00d7 42 downsampled Atari 2600 frames (Fig. 1). The CTS model presents advantages in terms of simplicity and performance but is limited in expressiveness, scalability, and data efficiency.\nIn recent years, neural generative models for images have achieved impressive successes in their ability to generate diverse images in various domains (Kingma & Welling, 2013; Rezende et al., 2014; Gregor et al., 2015; Goodfellow et al., 2014). In particular, van den Oord et al. (2016b;a) introduced PixelCNN, a fully convolutional neural network composed of residual blocks with multiplicative gating units, which models pixel probabilities conditional on previous pixels (in the usual top-left to bottomright raster-scan order) by using masked convolution fil-\nters. This model achieved state-of-the-art modelling performance on standard datasets, paired with the computational efficiency of a convolutional feed-forward network.\n2.3. Multi-Step RL Methods\nA distinguishing feature of reinforcement learning is that the agent \u201clearns on the basis of interim estimates\u201d (Sutton, 1996). For example, the Q-Learning update rule is\nQ(x, a)\u2190 Q(x, a) + \u03b1 [r(x, a) + \u03b3maxa\u2032 Q(x\n\u2032, a\u2032)\u2212Q(x, a)]\ufe38 \ufe37\ufe37 \ufe38 \u03b4(x,a) ,\nlinking the reward r and next-state value functionQ(x\u2032, a\u2032) to the current state value function Q(x, a). This particular form is the stochastic update rule with step-size \u03b1 and involves the TD-error \u03b4. In the approximate reinforcement learning setting, such as when Q(x, a) is represented by a neural network, this update is converted into a loss to be minimized, most commonly the squared loss \u03b42(x, a).\nIt is well known that better performance, both in terms of learning efficiency and approximation error, is attained by multi-step methods (Sutton, 1996; Tsitsiklis & van Roy, 1997). These methods interpolate between one-step methods (Q-Learning) and the Monte-Carlo update\nQ(x, a)\u2190 Q(x, a) + \u03b1 [ \u221e\u2211 t=0 \u03b3tr(xt, at)\u2212Q(x, a) ] \ufe38 \ufe37\ufe37 \ufe38\n\u03b4MC(x,a)\n,\nwhere x0, a0, x1, a1, . . . is a sample path through the environment beginning in (x, a). To achieve their success on the hardest Atari 2600 games, Bellemare et al. (2016) used the mixed Monte-Carlo update (MMC)\nQ(x, a)\u2190 Q(x, a) + \u03b1 [(1\u2212 \u03b2)\u03b4(x, a) + \u03b2\u03b4MC(x, a)] ,\nwith \u03b2 \u2208 [0, 1]. This choice was made for \u201ccomputational and implementational simplicity\u201d, and is a particularly coarse multi-step method. A better multi-step method is the recent Retrace(\u03bb) algorithm (Munos et al., 2016). Retrace(\u03bb) uses a product of truncated importance sam-\npling ratios c1, c2, . . . to replace \u03b4 with the error term\n\u03b4RETRACE(x, a) := \u221e\u2211 t=0 \u03b3t\n( t\u220f\ns=1\ncs ) \u03b4(xt, at),\neffectively mixing in TD-errors from all future time steps. Munos et al. showed that Retrace(\u03bb) is safe (does not diverge when trained on data from an arbitrary behaviour policy), and efficient (makes the most of multi-step returns).\n3. Using PixelCNN for Exploration As mentioned in the Introduction, the theory of using density models for exploration makes several assumptions that translate into concrete requirements for an implementation:\n(a) The density model should be trained completely online, i.e. exactly once on each state experienced by the agent, in the given sequential order.\n(b) The prediction gain (PG) should decay at a rate n\u22121\nto ensure that pseudo-counts grow approximately linearly with real counts.\n(c) The density model should be learning-positive.\nSimultaneously, a partly competing set of requirements are posed by the practicalities of training a neural density model and using it as part of an RL agent:\n(d) For stability, efficiency, and to avoid catastrophic forgetting in the setting of a drifting data distribution, it is advantageous to train a neural model in mini-batches, drawn randomly from a large and diverse dataset.\n(e) For effective training, a certain optimization regime (e.g. a fixed learning rate schedule) has to be followed.\n(f) The density model must be computationally lightweight, to allow computing the PG (two model evaluations and one update) as part of every training step of an RL agent.\nWe investigate how to best resolve these tensions in the context of the Arcade Learning Environment (Bellemare et al., 2013), a suite of benchmark Atari 2600 games.\n3.1. Designing a Suitable Density Model\nDriven by (f) and aiming for an agent with computational performance comparable to DQN, we design a slim variant of the PixelCNN network. Its core is a stack of 2 gated residual blocks with 16 feature maps (compared to 15 residual blocks with 128 feature maps in vanilla PixelCNN). As was done with the CTS model, images are downsampled to 42\u00d7 42 and quantized to 3-bit greyscale. See Appendix A for technical details.\n3.2. Training the Density Model\nInstead of using randomized mini-batches, we train the density model completely online on the sequence of experienced states. Empirically we found that with minor tuning of optimization hyper-parameters we could train the model as robustly on a temporally correlated sequence of states as on a sequence with randomized order (Fig. 2(left)).\nBesides satisfying the theoretical requirement (a), completely online training of the density model has the advantage that \u03c1\u2032n = \u03c1n+1, so that the model update performed for computing the PG need not be reverted1.\nAnother more subtle reason for avoiding mini-batch updates of the density model (despite (d)) is a practical optimization issue. The (necessarily online) computation of the PG involves a model update and hence the use of an optimizer. Advanced optimizers used with deep neural networks, like the RMSProp optimizer (Tieleman & Hinton, 2012) used in this work, are stateful, tracking running averages of e.g. mean and variance of the model parameters. If the model is additionally trained from mini-batches, the two streams of updates may show different statistical char-\n1The CTS model allows querying the PG cheaply, without incurring an actual update of model parameters.\nacteristics (e.g. different gradient magnitudes), invalidating the assumptions underlying the optimization algorithm and leading to slower or unstable training.\nTo determine a suitable online learning rate schedule, we train the model on a sequence of 1M frames of experience of a random-policy agent. We compare the loss achieved by training procedures following constant or decaying learning rate schedules, see Fig. 3. The lowest final training loss is achieved by a constant learning rate of 0.001 or a decaying learning rate of 0.1 \u00b7 n\u22121/2. We settled our choice on the constant learning rate schedule as it showed greater robustness with respect to the choice of initial learning rate.\nPixelCNN rapidly learns a sensible distribution over state space. Fig. 2(left) shows the model\u2019s loss decaying as it learns to exploit image regularities. Spikes in its loss function quickly start to correspond to visually meaningful events, such as the starts of episodes (Fig. 2(middle)). A video of early density model training is provided in http://youtu.be/T6iaa8Z4eyE.\n3.3. Computing the Pseudo-Count\nFrom the previous section we obtain a particular learning rate schedule that cannot be arbitrarily modified without deteriorating the model\u2019s training performance or stability. To achieve the required PG decay (b), we instead replace PGn by cn \u00b7 PGn with a suitably decaying sequence cn.\nIn experiments comparing actual agent performance we empirically determined that in fact the constant learning rate 0.001, paired with a PG decay cn = c \u00b7 n\u22121/2, obtains the best exploration results on hard exploration games like MONTEZUMA\u2019S REVENGE, see Fig. 2(right). We find the model to be robust across 1-2 orders of magnitude for the value of c, and informally determine c = 0.1 to be a sensible configuration for achieving good results on a broad range of Atari 2600 games (see also Section 7).\nRegarding (c), it is hard to ensure learning-positiveness for a deep neural model, and a negative PG can occur whenever the optimizer \u2018overshoots\u2019 a local loss minimum. As a workaround, we threshold the PG value at 0. To summarize, the computed pseudo-count is\nN\u0302n(x) = ( exp ( c \u00b7 n\u22121/2 \u00b7 (PGn(x))+ ) \u2212 1 )\u22121 .\n4. Exploration in Atari 2600 Games Having described our pseudo-count friendly adaptation of PixelCNN, we now study its performance on Atari 2600 games. To this end we augment the environment reward with a pseudo-count exploration bonus, yielding the combined reward r(x, a) + (N\u0302n(x))\u22121/2. As usual for neural network-based agents, we ensure the total reward lies in [\u22121, 1] by clipping larger values.\n4.1. DQN with PixelCNN Exploration Bonus\nOur first set of experiments provides the PixelCNN exploration bonus to a DQN agent (Mnih et al., 2015)2. At each agent step, the density model receives a single frame, with which it simultaneously updates its parameters and outputs the PG. For brevity we refer to this agent as DQNPixelCNN, unless otherwise stated always implying the use of the mixed Monte Carlo update (MMC).\nThe DQN-CTS agent we compare against is derived from the one in (Bellemare et al., 2016). For better comparability, it is trained in the same online fashion as DQNPixelCNN, i.e. the PG is computed whenever we train the density model. By contrast, the original DQN-CTS queried the PG at the end of each episode.\nFig. 5 shows training curves of regular DQN compared to DQN enhanced with CTS and PixelCNN exploration bonuses. On the famous MONTEZUMA\u2019S REVENGE, both intrinsically motivated agents vastly outperform the baseline DQN. On other hard exploration games (PRIVATE EYE; or VENTURE, appendix Fig. 15), DQN-PixelCNN achieves state of the art results, substantially outperform-\n2Unlike Bellemare et al. we use regular Q-Learning instead of Double Q-Learning (van Hasselt et al., 2016). In early experiments we observed no significant advantage of DoubleDQN over DQN when using the PixelCNN-based exploration reward.\ning both DQN and DQN-CTS. The other two games shown (ASTEROIDS, BERZERK) pose easier exploration problems. Here, the reward bonus should not provide large improvements and may have a negative effect by skewing the reward landscape. In these games, DQN-PixelCNN behaves more gracefully and usually still outperforms DQNCTS. We hypothesize this is due to a qualitative difference between the two models, see Section 5.\nOverall PixelCNN provides the DQN agent with a larger advantage than CTS, and often accelerates or stabilizes training even when not affecting peak performance. Out of 57 Atari games, DQN-PixelCNN outperforms DQN-CTS in 52 games by maximum achieved score, and 51 by AUC (methodology in Appendix B). See Fig. 6 for a high level comparison (appendix Fig. 15 for full training graphs). The greatest gains from using either exploration bonus are ob-\nserved in games categorized as hard exploration games in the \u2018taxonomy of exploration\u2019 in (Bellemare et al., 2016, reproduced in Appendix D), specifically in the most challenging sparse reward games (e.g. MONTEZUMA\u2019S REVENGE, PRIVATE EYE, VENTURE).\n4.2. A Multi-Step RL Agent with PixelCNN\nEmpirical practitioners know that techniques that are beneficial for one agent architecture often can be detrimental for a different algorithm. To demonstrate the wide applicability of the PixelCNN exploration bonus, we also evaluate it with the more recent Reactor agent3 (Gruslys et al., 2017). This replay-based actor-critic agent represents its policy and value function by a recurrent neural network and, crucially, uses the multi-step Retrace(\u03bb) algorithm for policy evaluation, replacing the MMC we use in DQN-PixelCNN.\nTo minimize impact on computational efficiency of this agent, we sub-sample intrinsic rewards: we perform updates of the PixelCNN model and compute the reward bonus on (randomly chosen) 25% of all steps, leaving the agent\u2019s reward unchanged on all other steps. We use the same PG decay schedule of 0.1 \u00b7 n\u22121/2, with n the number of density model updates.\nTraining curves for the Reactor/Reactor-PixelCNN agent compared to DQN/DQN-PixelCNN are shown in Fig. 7. The baseline Reactor agent is superior to the DQN agent, obtaining higher scores and learning faster in about 50 out of 57 games. It is further improved on a large fraction of games by the PixelCNN exploration reward, see Fig. 8 (full training graphs in appendix Fig. 16).\nThe effect of the exploration bonus on the Reactor is rather uniform, yielding improvements on a broad range of games. In particular, Reactor-PixelCNN enjoys better sample efficiency (in terms of area under the curve, AUC) than vanilla Reactor. We hypothesize that, like other policy gradient algorithms, Reactor generally suffers from weaker\n3The exact agent variant is referred to as \u2018\u03b2-LOO\u2019 with \u03b2 = 1.\nexploration than its value-based counterpart DQN. This aspect is much helped by the exploration bonus, boosting the agent\u2019s sample efficiency in many environments.\nHowever, on hard exploration games with sparse rewards, the Reactor-PixelCNN agent seems unable to fully make use of the exploration bonus. We believe this is because, in very sparse settings, the propagation of reward information across long horizons becomes crucial. The MMC takes one extreme of this view, by directly learning from the observed returns. The Retrace(\u03bb) algorithm, on the other hand, has an effective horizon which depends both on \u03bb and, critically, the truncated importance sampling ratio. This ratio results in the discarding of trajectories which are off-policy, i.e. too unlikely under the current policy. Put another way, we hypothesize that the very goal of the Retrace(\u03bb) algorithm to learn cautiously is what prevents it from taking full advantage of the exploration bonus!\n5. Quality of the Density Model PixelCNN can be expected to be more expressive and accurate than the less advanced CTS model, and indeed, samples generated after training are somewhat higher quality (Fig. 4). However, we are not using the generative function of the models when computing an exploration bonus, and a better generative model does not necessarily give rise to better probability estimates (Theis et al., 2016).\nIn Fig. 9 we compare the PG produced by the two models throughout 5K training steps. PixelCNN consistently produces PGs lower than CTS. More importantly, its PGs\nare smoother, exhibiting less variance between successive states, while showing more pronounced peaks at certain infrequent events. This yields a reward bonus that is less harmful in easy exploration games, while providing a strong signal in the case of novel or rare events.\nAnother distinguishing feature of PixelCNN is its nondecaying step-size. Because of that, the per-step PG never completely vanishes, and depends on the most recent data. Thus the model implements a form of tracking, which provides an unexpected benefit: the agent remains mildly surprised by significant state changes, e.g. entering a new room in MONTEZUMA\u2019S REVENGE. In turn, these mild, persistent rewards act as milestones that the agent learns to return to. This is illustrated in Fig. 10, which depicts the intrinsic reward over the course of an episode. In this particular scenario, the agent routinely revisits the right-hand side of the torch room, not because it leads to reward but just to \u201ctake in the sights\u201d. A full video of the episode is provided at http://youtu.be/232tOUPKPoQ.4\nLastly, PixelCNN\u2019s convolutional nature is expected to be beneficial for its sample efficiency. In Appendix C we compare to a convolutional CTS and confirm that this explains part, but not all of PixelCNN\u2019s advantage over vanilla CTS.\n6. Importance of the Monte Carlo Return Like for DQN-CTS, the success of DQN-PixelCNN hinges on the use of the mixed Monte Carlo update. The transient and vanishing nature of the exploration rewards requires the learning algorithm to latch on to these rapidly. The MMC serves this end as a simple multi-step method, helping to propagate reward information faster. An additional benefit lies in the fact that the Monte Carlo return helps bridging long horizons in environments where rewards are far apart and encountered rarely. On the other hand, it is important to note that the Monte Carlo return\u2019s on-policy\n4Another agent video on the game PRIVATE EYE can be found at http://youtu.be/kNyFygeUa2E.\nnature increases variance in the learning algorithm, and can prevent the algorithm\u2019s convergence to the optimal policy when training off-policy. It can therefore be expected to adversely affect training performance in some games.\nTo distill the effect of the MMC on performance, we compare all four combinations of DQN with/without PixelCNN exploration bonus and with/without MMC. Fig. 11 shows the performance of these four agent variants (graphs for all games are shown in Fig. 17). These games were picked to illustrate several commonly occurring cases:\n\u2022 MMC speeds up training and improves final performance significantly (examples: BANK HEIST, TIME PILOT). In these games, MMC alone explains most or all of the improvement of DQN-PixelCNN over DQN.\n\u2022 MMC hurts performance (examples: MS. PAC-MAN, BREAKOUT). Here too, MMC alone explains most of the difference between DQN-PixelCNN and DQN.\n\u2022 MMC and PixelCNN reward bonus have a compounding effect (example: H.E.R.O.).\nMost importantly, the situation is rather different when we restrict our attention to the hardest exploration games with sparse rewards. Here the baseline DQN agent fails to make any training progress, and neither Monte Carlo return nor the exploration bonus alone provide any significant benefit. Their combination however grants the agent rapid training progress and allows it to achieve high performance.\nOne effect of the exploration bonus in these games is to provide a denser reward landscape, enabling the agent to learn meaningful policies. Due to the transient nature of the exploration bonus, the agent needs to be able to learn from this reward signal faster than regular one-step methods allow, and MMC proves to be an effective solution.\n7. Pushing the Limits of Intrinsic Motivation Here we explore the idea of a \u2018maximally curious\u2019 agent, whose reward function is dominated by the exploration bonus. For that we increase the PG scale, previously chosen conservatively to avoid adverse effects on easy exploration games.\nFig. 12 shows DQN-PixelCNN performance on the hardest exploration games when the PG scale is increased by 1- 2 orders of magnitude. The algorithm seems fairly robust across a wide range of scales: the main effect of increasing this parameter is to trade-off exploration (seeking maximal reward) with exploitation (optimizing the current policy).\nAs expected, more aggressive PG scaling translates to stronger exploration: several runs obtain record peak scores (900 in GRAVITAR, 6,600 in MONTEZUMA\u2019S REVENGE, 39,000 in PRIVATE EYE, 1,500 in VENTURE) surpassing the state of the art by a substantial margin (for previously published results, see Appendix D). Highly aggressive scaling speeds up the agent\u2019s exploration and achieves peak performance rapidly, but can also deteriorate its stability and long-term performance. Note that in practice, because of the non-decaying step-size the PG does not vanish. After reward clipping, an overly inflated exploration bonus can therefore become essentially constant, no longer providing a useful intrinsic motivation signal to the agent.\nAnother way of creating an entirely curiosity-driven agent is to ignore the environment reward altogether and train based on the exploration reward only, see Fig. 13. Remarkably, the curiosity signal alone is sufficient to train a highperforming agent (measured by environment reward!).\nIt is worth noting that agents with exploration bonus seem to \u2018never stop exploring\u2019: for different seeds, the agents make learning progress at very different times during training, a qualitative difference to vanilla DQN.\n8. Conclusion We have demonstrated the use of PixelCNN for exploration and have shown that its greater accuracy and expressiveness translate into a more useful exploration bonus than that obtained from previous models. While the current theory of\npseudo-counts puts stringent requirements on the density model, we have shown PixelCNN can be used in a simpler and more general setup, and in particular can be trained completely online. It also proves to be widely compatible with both value-function and policy-based RL algorithms.\nIn addition to pushing the state of the art on the hardest exploration problems among the Atari 2600 games, PixelCNN improves speed of learning and stability of baseline RL agents across a wide range of games. The quality of its reward bonus is evidenced by the fact that on sparse reward games, this signal alone suffices to learn to achieve significant scores, creating a truly intrinsically motivated agent.\nOur analysis also reveals the importance of the Monte Carlo return for effective exploration. The comparison with more sophisticated but fixed-horizon multi-step methods shows that its significance lies both in faster learning in the context of a useful but transient reward function, as well as bridging reward gaps in environments where extrinsic and intrinsic rewards are, or quickly become, extremely sparse.\nAcknowledgements The authors thank Tom Schaul, Olivier Pietquin, Ian Osband, Sriram Srinivasan, Tejas Kulkarni, Alex Graves, Charles Blundell, and Shimon Whiteson for invaluable feedback on the ideas presented here, and Audrunas Gruslys especially for providing the Reactor agent.\nReferences Bellemare, Marc, Veness, Joel, and Talvitie, Erik. Skip\ncontext tree switching. Proceedings of the International Conference on Machine Learning, 2014.\nBellemare, Marc G., Naddaf, Yavar, Veness, Joel, and Bowling, Michael. The arcade learning environment: An evaluation platform for general agents. Journal of Artificial Intelligence Research, 47:253\u2013279, 2013.\nBellemare, Marc G., Srinivasan, Sriram, Ostrovski, Georg, Schaul, Tom, Saxton, David, and Munos, Re\u0301mi. Unifying count-based exploration and intrinsic motivation. Advances in Neural Information Processing Systems, 2016.\nDeisenroth, Marc P. and Rasmussen, Carl E. PILCO: A model-based and data-efficient approach to policy search. In Proceedings of the International Conference on Machine Learning, 2011.\nFrench, Robert M. Catastrophic forgetting in connectionist networks. Trends in cognitive sciences, 3(4):128\u2013135, 1999.\nGoodfellow, Ian, Pouget-Abadie, Jean, Mirza, Mehdi, Xu, Bing, Warde-Farley, David, Ozair, Sherjil, Courville, Aaron, and Bengio, Yoshua. Generative adversarial nets. In Advances in Neural Information Processing Systems, 2014.\nGregor, Karol, Danihelka, Ivo, Graves, Alex, Rezende, Danilo, and Wierstra, Daan. Draw: A recurrent neural network for image generation. In Proceedings of the International Conference on Machine Learning, 2015.\nGruslys, Audrunas, Bellemare, Marc G., Azar, Mohammad Gheshlaghi, and Munos, Re\u0301mi. The Reactor: A sample-efficient actor-critic architecture. arXiv preprint, 2017.\nGuez, Arthur, Silver, David, and Dayan, Peter. Efficient bayes-adaptive reinforcement learning using samplebased search. In Advances in Neural Information Processing Systems, 2012.\nHouthooft, Rein, Chen, Xi, Duan, Yan, Schulman, John, De Turck, Filip, and Abbeel, Pieter. Variational information maximizing exploration. In Advances in Neural Information Processing Systems (NIPS), 2016.\nJaksch, Thomas, Ortner, Ronald, and Auer, Peter. Nearoptimal regret bounds for reinforcement learning. Journal of Machine Learning Research, 11:1563\u20131600, 2010.\nKingma, Diederik P. and Welling, Max. Auto-encoding variational bayes. In Proceedings of the International Conference on Learning Representations, 2013.\nLopes, Manuel, Lang, Tobias, Toussaint, Marc, and Oudeyer, Pierre-Yves. Exploration in model-based reinforcement learning by empirically estimating learning progress. In Advances in Neural Information Processing Systems, 2012.\nMnih, Volodymyr, Kavukcuoglu, Koray, Silver, David, Rusu, Andrei A, Veness, Joel, Bellemare, Marc G., Graves, Alex, Riedmiller, Martin, Fidjeland, Andreas K., Ostrovski, Georg, et al. Human-level control through deep reinforcement learning. Nature, 518(7540):529\u2013 533, 2015.\nMunos, Re\u0301mi, Stepleton, Tom, Harutyunyan, Anna, and Bellemare, Marc G. Safe and efficient off-policy reinforcement learning. In Advances in Neural Information Processing Systems, 2016.\nOsband, Ian, van Roy, Benjamin, and Wen, Zheng. Generalization and exploration via randomized value functions. In Proceedings of the International Conference on Machine Learning, 2016.\nOudeyer, Pierre-Yves, Kaplan, Fre\u0301de\u0301ric, and Hafner, Verena V. Intrinsic motivation systems for autonomous mental development. IEEE Transactions on Evolutionary Computation, 11(2):265\u2013286, 2007.\nRezende, Danilo Jimenez, Mohamed, Shakir, and Wierstra, Daan. Stochastic backpropagation and approximate inference in deep generative models. In Proceedings of The International Conference on Machine Learning, 2014.\nStrehl, Alexander L. and Littman, Michael L. An analysis of model-based interval estimation for Markov decision processes. Journal of Computer and System Sciences, 74 (8):1309 \u2013 1331, 2008.\nSutton, Richard S. Generalization in reinforcement learning: Successful examples using sparse coarse coding. In Advances in Neural Information Processing Systems, 1996.\nSutton, Richard S. and Barto, Andrew G. Reinforcement learning: An introduction. MIT Press, 1998.\nTang, Haoran, Houthooft, Rein, Foote, Davis, Stooke, Adam, Chen, Xi, Duan, Yan, Schulman, John, De Turck,\nFilip, and Abbeel, Pieter. #Exploration: A study of count-based exploration for deep reinforcement learning. arXiv preprint arXiv:1611.04717, 2016.\nTheis, Lucas, van den Oord, Aa\u0308ron, and Bethge, Matthias. A note on the evaluation of generative models. In Proceedings of the International Conference on Learning Representations, 2016.\nTieleman, Tijmen and Hinton, Geoffrey. RMSProp: divide the gradient by a running average of its recent magnitude. COURSERA. Lecture 6.5 of Neural Networks for Machine Learning, 2012.\nTsitsiklis, John N. and van Roy, Benjamin. An analysis of temporal-difference learning with function approximation. IEEE Transactions on Automatic Control, 42(5): 674\u2013690, 1997.\nvan den Oord, Aaron, Kalchbrenner, Nal, Espeholt, Lasse, Vinyals, Oriol, Graves, Alex, et al. Conditional image generation with PixelCNN decoders. In Advances in Neural Information Processing Systems, 2016a.\nvan den Oord, Aaron, Kalchbrenner, Nal, and Kavukcuoglu, Koray. Pixel recurrent neural networks. In Proceedings of the International Conference on Machine Learning, 2016b.\nvan Hasselt, Hado, Guez, Arthur, and Silver, David. Deep reinforcement learning with Double Q-learning. In Proceedings of the AAAI Conference on Artificial Intelligence, 2016.\nVeness, Joel, Ng, Kee Siong, Hutter, Marcus, and Bowling, Michael H. Context tree switching. In Proceedings of the Data Compression Conference, 2012.\nWang, Ziyu, Schaul, Tom, Hessel, Matteo, van Hasselt, Hado, Lanctot, Marc, and de Freitas, Nando. Dueling network architectures for deep reinforcement learning. In Proceedings of The 33rd International Conference on Machine Learning, pp. 1995\u20132003, 2016.\nA. PixelCNN Hyper-parameters The PixelCNN model used in this paper is a lightweight variant of the Gated PixelCNN introduced in (van den Oord et al., 2016a). It consists of a 7 \u00d7 7 masked convolution, followed by two residual blocks with 1\u00d71 masked convolutions with 16 feature planes, and another 1\u00d71 masked convolution producing 64 features planes, which are mapped by a final masked convolution to the output logits. Inputs are 42 \u00d7 42 greyscale images, with pixel values quantized to 8 bins.\nThe model is trained completely online, from the stream of Atari frames experienced by an agent. Optimization is performed with the (uncentered) RMSProp optimizer (Tieleman & Hinton, 2012) with momentum 0.9, decay 0.95 and epsilon 10\u22124.\nB. Methodology Unless otherwise stated, all agent performance graphs in this paper show the agent\u2019s training performance, measured as the undiscounted per-episode return, averaged over 1M environment frames per data point.\nThe algorithm-comparison graphs Fig. 6 and Fig. 8 show the relative improvement of one algorithm over another in terms of area-under-the-curve (AUC). A comparison by maximum achieved score would yield similar overall results, but underestimate the advantage in terms of learning speed (sample efficiency) and stability that the intrinsically motivated and MMC-based agents show over the baselines.\nC. Convolutional CTS In Section 4 we have seen that DQN-PixelCNN outperforms DQN-CTS in most of the 57 Atari games, by providing a more impactful exploration bonus in hard exploration games, as well as a more graceful (less harmful) one in games where the learning algorithm does not benefit from the additional curiosity signal. One may wonder whether this improvement is due to the generally more expressive and accurate density model PixelCNN, or simply its convolutional nature, which gives it an advantage in generalization and sample efficiency over a model that represents pixel probabilities in a completely location-dependent way.\nTo answer this question, we developed a convolutional variant of the CTS model. This model has a single set of parameters conditioning a pixel\u2019s value on its predecessors shared across all pixel locations, instead of the locationdependent parameters in the regular CTS. In Fig. 14 we contrast the performance of DQN, DQN-MC, DQN-CTS, DQN-ConvCTS and DQN-PixelCNN on several example games.\nWe first consider dense reward games like Q*BERT and ZAXXON, where most improvement comes from the use of the MMC, and the exploration bonus hurts performance. We find that in fact convolutional CTS behaves fairly similarly to PixelCNN, leaving agent performance unaffected, whereas regular CTS causes the agent to train more slowly or reach an earlier performance plateau. On the sparse reward games (GRAVITAR, PRIVATE EYE, VENTURE) however, convolutional CTS shows to be as inferior to PixelCNN as the vanilla CTS variant, failing to achieve the significant improvements over the baseline agents presented in this paper.\nWe conclude that while the convolutional aspect plays a role in the \u2019softer\u2019 nature of the PixelCNN model compared to its CTS counterpart, it alone is insufficient to explain the massive exploration boost that the PixelCNNderived reward provides to the DQN agent. The more advanced model\u2019s accuracy advantage translates into a more targeted and useful curiosity signal for the agent, which distinguishes novel from well-explored states more clearly and allows for more effective exploration.\nD. The Hardest Exploration Games Table 1 reproduces Bellemare et al. (2016)\u2019s taxonomy of games available through the ALE according to their exploration difficulty. \u201cHuman-Optimal\u201d refers to games where DQN-like agents achieve human-level or higher performance; \u201cScore Exploit\u201d refers to games where agents find ways to achieve superhuman scores, without necessarily playing the game as a human would. \u201cSparse\u201d and \u201cDense\u201d rewards are qualitative descriptors of the game\u2019s reward structure. See the original source for additional details.\nTable 2 compares previously published results on the 7 hard exploration, sparse reward Atari 2600 games with results obtained by DQN-CTS and DQN-PixelCNN."}], "references": [{"title": "Skip context tree switching", "author": ["Bellemare", "Marc", "Veness", "Joel", "Talvitie", "Erik"], "venue": "Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Bellemare et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bellemare et al\\.", "year": 2014}, {"title": "The arcade learning environment: An evaluation platform for general agents", "author": ["Bellemare", "Marc G", "Naddaf", "Yavar", "Veness", "Joel", "Bowling", "Michael"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Bellemare et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bellemare et al\\.", "year": 2013}, {"title": "Unifying count-based exploration and intrinsic motivation", "author": ["Bellemare", "Marc G", "Srinivasan", "Sriram", "Ostrovski", "Georg", "Schaul", "Tom", "Saxton", "David", "Munos", "R\u00e9mi"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "Bellemare et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Bellemare et al\\.", "year": 2016}, {"title": "PILCO: A model-based and data-efficient approach to policy search", "author": ["Deisenroth", "Marc P", "Rasmussen", "Carl E"], "venue": "In Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Deisenroth et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Deisenroth et al\\.", "year": 2011}, {"title": "Catastrophic forgetting in connectionist networks", "author": ["French", "Robert M"], "venue": "Trends in cognitive sciences,", "citeRegEx": "French and M.,? \\Q1999\\E", "shortCiteRegEx": "French and M.", "year": 1999}, {"title": "Generative adversarial nets", "author": ["Goodfellow", "Ian", "Pouget-Abadie", "Jean", "Mirza", "Mehdi", "Xu", "Bing", "Warde-Farley", "David", "Ozair", "Sherjil", "Courville", "Aaron", "Bengio", "Yoshua"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Draw: A recurrent neural network for image generation", "author": ["Gregor", "Karol", "Danihelka", "Ivo", "Graves", "Alex", "Rezende", "Danilo", "Wierstra", "Daan"], "venue": "In Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Gregor et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2015}, {"title": "The Reactor: A sample-efficient actor-critic architecture", "author": ["Gruslys", "Audrunas", "Bellemare", "Marc G", "Azar", "Mohammad Gheshlaghi", "Munos", "R\u00e9mi"], "venue": "arXiv preprint,", "citeRegEx": "Gruslys et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Gruslys et al\\.", "year": 2017}, {"title": "Efficient bayes-adaptive reinforcement learning using samplebased search", "author": ["Guez", "Arthur", "Silver", "David", "Dayan", "Peter"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Guez et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Guez et al\\.", "year": 2012}, {"title": "Variational information maximizing exploration", "author": ["Houthooft", "Rein", "Chen", "Xi", "Duan", "Yan", "Schulman", "John", "De Turck", "Filip", "Abbeel", "Pieter"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Houthooft et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Houthooft et al\\.", "year": 2016}, {"title": "Nearoptimal regret bounds for reinforcement learning", "author": ["Jaksch", "Thomas", "Ortner", "Ronald", "Auer", "Peter"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Jaksch et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Jaksch et al\\.", "year": 2010}, {"title": "Auto-encoding variational bayes", "author": ["Kingma", "Diederik P", "Welling", "Max"], "venue": "In Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Kingma et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2013}, {"title": "Exploration in model-based reinforcement learning by empirically estimating learning progress", "author": ["Lopes", "Manuel", "Lang", "Tobias", "Toussaint", "Marc", "Oudeyer", "Pierre-Yves"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Lopes et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Lopes et al\\.", "year": 2012}, {"title": "Safe and efficient off-policy reinforcement learning", "author": ["Munos", "R\u00e9mi", "Stepleton", "Tom", "Harutyunyan", "Anna", "Bellemare", "Marc G"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Munos et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Munos et al\\.", "year": 2016}, {"title": "Generalization and exploration via randomized value functions", "author": ["Osband", "Ian", "van Roy", "Benjamin", "Wen", "Zheng"], "venue": "In Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Osband et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Osband et al\\.", "year": 2016}, {"title": "Intrinsic motivation systems for autonomous mental development", "author": ["Oudeyer", "Pierre-Yves", "Kaplan", "Fr\u00e9d\u00e9ric", "Hafner", "Verena V"], "venue": "IEEE Transactions on Evolutionary Computation,", "citeRegEx": "Oudeyer et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Oudeyer et al\\.", "year": 2007}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Rezende", "Danilo Jimenez", "Mohamed", "Shakir", "Wierstra", "Daan"], "venue": "In Proceedings of The International Conference on Machine Learning,", "citeRegEx": "Rezende et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rezende et al\\.", "year": 2014}, {"title": "An analysis of model-based interval estimation for Markov decision processes", "author": ["Strehl", "Alexander L", "Littman", "Michael L"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "Strehl et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Strehl et al\\.", "year": 2008}, {"title": "Generalization in reinforcement learning: Successful examples using sparse coarse coding", "author": ["Sutton", "Richard S"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Sutton and S.,? \\Q1996\\E", "shortCiteRegEx": "Sutton and S.", "year": 1996}, {"title": "Reinforcement learning: An introduction", "author": ["Sutton", "Richard S", "Barto", "Andrew G"], "venue": null, "citeRegEx": "Sutton et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 1998}, {"title": "Exploration: A study of count-based exploration for deep reinforcement learning", "author": ["Filip", "Abbeel", "Pieter"], "venue": "arXiv preprint arXiv:1611.04717,", "citeRegEx": "Filip et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Filip et al\\.", "year": 2016}, {"title": "A note on the evaluation of generative models", "author": ["Theis", "Lucas", "van den Oord", "A\u00e4ron", "Bethge", "Matthias"], "venue": "In Proceedings of the International Conference on Learning Representations,", "citeRegEx": "Theis et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Theis et al\\.", "year": 2016}, {"title": "RMSProp: divide the gradient by a running average of its recent magnitude. COURSERA", "author": ["Tieleman", "Tijmen", "Hinton", "Geoffrey"], "venue": "Neural Networks for Machine Learning,", "citeRegEx": "Tieleman et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Tieleman et al\\.", "year": 2012}, {"title": "An analysis of temporal-difference learning with function approximation", "author": ["Tsitsiklis", "John N", "van Roy", "Benjamin"], "venue": "IEEE Transactions on Automatic Control,", "citeRegEx": "Tsitsiklis et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Tsitsiklis et al\\.", "year": 1997}, {"title": "Conditional image generation with PixelCNN decoders", "author": ["van den Oord", "Aaron", "Kalchbrenner", "Nal", "Espeholt", "Lasse", "Vinyals", "Oriol", "Graves", "Alex"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Oord et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2016}, {"title": "Pixel recurrent neural networks", "author": ["van den Oord", "Aaron", "Kalchbrenner", "Nal", "Kavukcuoglu", "Koray"], "venue": "In Proceedings of the International Conference on Machine Learning,", "citeRegEx": "Oord et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2016}, {"title": "Deep reinforcement learning with Double Q-learning", "author": ["van Hasselt", "Hado", "Guez", "Arthur", "Silver", "David"], "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,", "citeRegEx": "Hasselt et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hasselt et al\\.", "year": 2016}, {"title": "Context tree switching", "author": ["Veness", "Joel", "Ng", "Kee Siong", "Hutter", "Marcus", "Bowling", "Michael H"], "venue": "In Proceedings of the Data Compression Conference,", "citeRegEx": "Veness et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Veness et al\\.", "year": 2012}, {"title": "Dueling network architectures for deep reinforcement learning", "author": ["Wang", "Ziyu", "Schaul", "Tom", "Hessel", "Matteo", "van Hasselt", "Hado", "Lanctot", "Marc", "de Freitas", "Nando"], "venue": "In Proceedings of The 33rd International Conference on Machine Learning,", "citeRegEx": "Wang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "The Hardest Exploration Games Table 1 reproduces Bellemare et al. (2016)\u2019s taxonomy of games available through the ALE according to their exploration difficulty. \u201cHuman-Optimal", "author": ["D. exploration"], "venue": null, "citeRegEx": "exploration.,? \\Q2016\\E", "shortCiteRegEx": "exploration.", "year": 2016}], "referenceMentions": [{"referenceID": 10, "context": "From a theoretical perspective, exploration is now wellunderstood (e.g. Strehl & Littman, 2008; Jaksch et al., 2010; Osband et al., 2016), and Bayesian methods have Google DeepMind, London, UK.", "startOffset": 66, "endOffset": 137}, {"referenceID": 14, "context": "From a theoretical perspective, exploration is now wellunderstood (e.g. Strehl & Littman, 2008; Jaksch et al., 2010; Osband et al., 2016), and Bayesian methods have Google DeepMind, London, UK.", "startOffset": 66, "endOffset": 137}, {"referenceID": 8, "context": "been successfully demonstrated in a number of settings (Deisenroth & Rasmussen, 2011; Guez et al., 2012).", "startOffset": 55, "endOffset": 104}, {"referenceID": 0, "context": "As a practical application the authors used the pseudocounts derived from the simple CTS density model (Bellemare et al., 2014) to incentivize exploration in Atari 2600 agents.", "startOffset": 103, "endOffset": 127}, {"referenceID": 0, "context": "Bellemare 1 A\u00e4ron van den Oord 1 R\u00e9mi Munos 1 Abstract Bellemare et al. (2016) introduced the notion of a pseudo-count to generalize count-based exploration to non-tabular reinforcement learning.", "startOffset": 55, "endOffset": 79}, {"referenceID": 0, "context": "Bellemare 1 A\u00e4ron van den Oord 1 R\u00e9mi Munos 1 Abstract Bellemare et al. (2016) introduced the notion of a pseudo-count to generalize count-based exploration to non-tabular reinforcement learning. This pseudo-count is derived from a density model which effectively replaces the count table used in the tabular setting. Using an exploration bonus based on this pseudo-count and a mixed Monte Carlo update applied to a DQN agent was sufficient to achieve state-of-the-art on the Atari 2600 game Montezuma\u2019s Revenge. In this paper we consider two questions left open by their work: First, how important is the quality of the density model for exploration? Second, what role does the Monte Carlo update play in exploration? We answer the first question by demonstrating the use of PixelCNN, an advanced neural density model for images, to supply a pseudo-count. In particular, we examine the intrinsic difficulties in adapting Bellemare et al.\u2019s approach when assumptions about the model are violated. The result is a more practical and general algorithm requiring no special apparatus. We combine PixelCNN pseudo-counts with different agent architectures to dramatically improve the state of the art on several hard Atari games. One surprising finding is that the mixed Monte Carlo update is a powerful facilitator of exploration in the sparsest of settings, including Montezuma\u2019s Revenge. 1. Introduction Exploration is the process by which an agent learns about its environment. In the reinforcement learning framework, this involves reducing the agent\u2019s uncertainty about the environment\u2019s transition dynamics and attainable rewards. From a theoretical perspective, exploration is now wellunderstood (e.g. Strehl & Littman, 2008; Jaksch et al., 2010; Osband et al., 2016), and Bayesian methods have Google DeepMind, London, UK. Correspondence to: Georg Ostrovski <ostrovski@google.com>. been successfully demonstrated in a number of settings (Deisenroth & Rasmussen, 2011; Guez et al., 2012). On the other hand, practical algorithms for the general case remain scarce; fully Bayesian approaches are usually intractable in large state spaces, and the count-based method typical of theoretical results is not applicable in the presence of value function approximation. Recently, Bellemare et al. (2016) proposed the notion of pseudo-count as a reasonable generalization of the tabular setting considered in the theory literature.", "startOffset": 55, "endOffset": 2300}, {"referenceID": 2, "context": "Pseudo-Count and Prediction Gain Here we briefly introduce notation and results, referring the reader to (Bellemare et al., 2016) for technical details.", "startOffset": 105, "endOffset": 129}, {"referenceID": 12, "context": "Quantities related to prediction gain have been used for similar purposes in the intrinsic motivation literature (Lopes et al., 2012), where they measure an agent\u2019s learning progress (Oudeyer et al.", "startOffset": 113, "endOffset": 133}, {"referenceID": 15, "context": ", 2012), where they measure an agent\u2019s learning progress (Oudeyer et al., 2007).", "startOffset": 57, "endOffset": 79}, {"referenceID": 0, "context": "Density Models for Images The CTS density model (Bellemare et al., 2014) is based on the namesake algorithm, Context Tree Switching (Veness et al.", "startOffset": 48, "endOffset": 72}, {"referenceID": 27, "context": ", 2014) is based on the namesake algorithm, Context Tree Switching (Veness et al., 2012), a Bayesian variable-order Markov model.", "startOffset": 67, "endOffset": 88}, {"referenceID": 16, "context": "In recent years, neural generative models for images have achieved impressive successes in their ability to generate diverse images in various domains (Kingma & Welling, 2013; Rezende et al., 2014; Gregor et al., 2015; Goodfellow et al., 2014).", "startOffset": 151, "endOffset": 243}, {"referenceID": 6, "context": "In recent years, neural generative models for images have achieved impressive successes in their ability to generate diverse images in various domains (Kingma & Welling, 2013; Rezende et al., 2014; Gregor et al., 2015; Goodfellow et al., 2014).", "startOffset": 151, "endOffset": 243}, {"referenceID": 5, "context": "In recent years, neural generative models for images have achieved impressive successes in their ability to generate diverse images in various domains (Kingma & Welling, 2013; Rezende et al., 2014; Gregor et al., 2015; Goodfellow et al., 2014).", "startOffset": 151, "endOffset": 243}, {"referenceID": 15, "context": "Count-Based Exploration with Neural Density Models In particular, we explore the use of PixelCNN (van den Oord et al., 2016b;a), a state-of-the-art neural density model. We examine the challenges posed by this approach: Model choice. Performing two evaluations and one model update at each agent step (to compute \u03c1(x) and \u03c1\u2032(x)) can be prohibitively expensive. This requires the design of a simplified \u2013 yet sufficiently expressive and accurate \u2013 PixelCNN architecture. Model training. A CTS model can naturally be trained from sequentially presented, correlated data samples. Training a neural model in this online fashion requires more careful attention to the optimization procedure to prevent overfitting and catastrophic forgetting (French, 1999). Model use. The theory of pseudo-counts requires the density model\u2019s rate of learning to decay over time. Optimization of a neural model, however, imposes constraints on the step-size regime which cannot be violated without deteriorating effectiveness and stability of training. The concept of intrinsic motivation has made a recent resurgence in reinforcement learning research, in great part due to a dissatisfaction with -greedy and Boltzmann policies. Of note, Tang et al. (2016) maintain an approximate count by means of hash tables over features, which in the pseudo-count framework corresponds to a hash-based density model.", "startOffset": 106, "endOffset": 1236}, {"referenceID": 4, "context": "Houthooft et al. (2016) used a second-order Taylor approximation of the prediction gain to drive exploration in continuous control.", "startOffset": 0, "endOffset": 24}, {"referenceID": 0, "context": "Pseudo-Count and Prediction Gain Here we briefly introduce notation and results, referring the reader to (Bellemare et al., 2016) for technical details. Let \u03c1 be a density model on a finite space X , and \u03c1n(x) the probability assigned by the model to x after being trained on a sequence of states x1, . . . , xn. Assume \u03c1n(x) > 0 for all x, n. The recoding probability \u03c1n(x) is then the probability the model would assign to x if it were trained on that same x one more time. We call \u03c1 learning-positive if \u03c1n(x) \u2265 \u03c1n(x) for all x1, . . . , xn, x \u2208 X . The prediction gain (PG) of \u03c1 is PGn(x) = log \u03c1 \u2032 n(x)\u2212 log \u03c1n(x). (1) A learning-positive \u03c1 implies PGn(x) \u2265 0 for all x \u2208 X . For learning-positive \u03c1, we define the pseudo-count as N\u0302n(x) = \u03c1n(x)(1\u2212 \u03c1n(x)) \u03c1n(x)\u2212 \u03c1n(x) , derived from postulating that a single observation of x \u2208 X should lead to a unit increase in pseudo-count: \u03c1n(x) = N\u0302n(x) n\u0302 , \u03c1n(x) = N\u0302n(x) + 1 n\u0302+ 1 , where n\u0302 is the pseudo-count total. The pseudo-count generalizes the usual state visitation count function Nn(x). Under certain assumptions on \u03c1n, pseudo-counts grow approximately linearly with real counts. Crucially, the pseudo-count can be approximated using the prediction gain of the density model: N\u0302n(x) \u2248 ( en \u2212 1 )\u22121 . Its main use is to define an exploration bonus. We consider a reinforcement learning (RL) agent interacting with an environment that provides observations and extrinsic rewards (see Sutton & Barto, 1998, for a thorough exposition of the RL framework). To the reward at step n we add the bonus r(x) := (N\u0302n(x)) \u22121/2, which incentivizes the agent to try to re-experience surprising situations. Quantities related to prediction gain have been used for similar purposes in the intrinsic motivation literature (Lopes et al., 2012), where they measure an agent\u2019s learning progress (Oudeyer et al., 2007). Although the pseudo-count bonus is close to the prediction gain, it is asymptotically more conservative and supported by stronger theoretical guarantees. 2.2. Density Models for Images The CTS density model (Bellemare et al., 2014) is based on the namesake algorithm, Context Tree Switching (Veness et al., 2012), a Bayesian variable-order Markov model. In its simplest form, the model takes as input a 2D image and assigns to it a probability according to the product of location-dependent L-shaped filters, where the prediction of each filter is given by a CTS algorithm trained on past images. In Bellemare et al. (2016), this model was applied to 3-bit greyscale, 42 \u00d7 42 downsampled Atari 2600 frames (Fig.", "startOffset": 106, "endOffset": 2481}, {"referenceID": 2, "context": "Atari frame preprocessing (Bellemare et al., 2016).", "startOffset": 26, "endOffset": 50}, {"referenceID": 13, "context": "A better multi-step method is the recent Retrace(\u03bb) algorithm (Munos et al., 2016).", "startOffset": 62, "endOffset": 82}, {"referenceID": 1, "context": "We investigate how to best resolve these tensions in the context of the Arcade Learning Environment (Bellemare et al., 2013), a suite of benchmark Atari 2600 games.", "startOffset": 100, "endOffset": 124}, {"referenceID": 0, "context": "To achieve their success on the hardest Atari 2600 games, Bellemare et al. (2016) used the mixed Monte-Carlo update (MMC) Q(x, a)\u2190 Q(x, a) + \u03b1 [(1\u2212 \u03b2)\u03b4(x, a) + \u03b2\u03b4MC(x, a)] , with \u03b2 \u2208 [0, 1].", "startOffset": 58, "endOffset": 82}, {"referenceID": 2, "context": "The DQN-CTS agent we compare against is derived from the one in (Bellemare et al., 2016).", "startOffset": 64, "endOffset": 88}, {"referenceID": 7, "context": "To demonstrate the wide applicability of the PixelCNN exploration bonus, we also evaluate it with the more recent Reactor agent3 (Gruslys et al., 2017).", "startOffset": 129, "endOffset": 151}, {"referenceID": 21, "context": "However, we are not using the generative function of the models when computing an exploration bonus, and a better generative model does not necessarily give rise to better probability estimates (Theis et al., 2016).", "startOffset": 194, "endOffset": 214}, {"referenceID": 0, "context": "The Hardest Exploration Games Table 1 reproduces Bellemare et al. (2016)\u2019s taxonomy of games available through the ALE according to their exploration difficulty.", "startOffset": 49, "endOffset": 73}, {"referenceID": 2, "context": ", 2015), A3C-CTS (\u201cA3C+\u201d in (Bellemare et al., 2016)), Prioritized Dueling DQN (Wang et al.", "startOffset": 28, "endOffset": 52}, {"referenceID": 28, "context": ", 2016)), Prioritized Dueling DQN (Wang et al., 2016), and the basic versions of DQN-CTS and DQN-PixelCNN from Section 4.", "startOffset": 34, "endOffset": 53}], "year": 2017, "abstractText": "Bellemare et al. (2016) introduced the notion of a pseudo-count to generalize count-based exploration to non-tabular reinforcement learning. This pseudo-count is derived from a density model which effectively replaces the count table used in the tabular setting. Using an exploration bonus based on this pseudo-count and a mixed Monte Carlo update applied to a DQN agent was sufficient to achieve state-of-the-art on the Atari 2600 game Montezuma\u2019s Revenge.", "creator": "LaTeX with hyperref package"}}}