{"id": "1703.01830", "review": {"conference": "nips", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Mar-2017", "title": "Decomposable Submodular Function Minimization: Discrete and Continuous", "abstract": "This paper investigates connections between discrete and continuous approaches for decomposable submodular function minimization. We provide improved running time estimates for the state-of-the-art continuous algorithms for the problem using combinatorial arguments. We also provide a systematic experimental comparison of the two types of methods, based on a clear distinction between level-0 and level-1 algorithms in the experimental paper. To further investigate the differences in functional representation, we use an extended-sample approach in which the standard parameters used are used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 6 Mar 2017 12:06:58 GMT  (18kb)", "http://arxiv.org/abs/1703.01830v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.DS", "authors": ["alina ene", "huy l nguyen", "l\\'aszl\\'o a v\\'egh"], "accepted": true, "id": "1703.01830"}, "pdf": {"name": "1703.01830.pdf", "metadata": {"source": "CRF", "title": "Decomposable Submodular Function Minimization: Discrete and Continuous", "authors": ["Alina Ene", "Huy L. Nguy\u1ec5n", "L\u00e1szl\u00f3 A. V\u00e9gh"], "emails": ["aene@bu.edu", "hu.nguyen@northeastern.edu", "L.Vegh@lse.ac.uk"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 3.\n01 83\n0v 1\n[ cs\n.L G\n] 6\nM ar\nThis paper investigates connections between discrete and continuous approaches for decomposable submodular function minimization. We provide improved running time estimates for the state-of-the-art continuous algorithms for the problem using combinatorial arguments. We also provide a systematic experimental comparison of the two types of methods, based on a clear distinction between level-0 and level-1 algorithms."}, {"heading": "1 Introduction", "text": "Submodular functions arise in a wide range of applications: graph theory, optimization, economics, game theory, to name a few. A function f : 2V \u2192 R on a ground set V is submodular if f(X) + f(Y ) \u2265 f(X \u2229Y )+f(X \u222aY ) for all sets X,Y \u2286 V . Submodularity can also be interpreted as a decreasing marginals property.\nThere has been significant interest in submodular optimization in the machine learning and computer vision communities. The submodular function minimization (SFM) problem arises in problems in image segmentation or MAP inference tasks in Markov Random Fields. Landmark results in combinatorial optimization give polynomial-time exact algorithms for SFM. However, the high-degree polynomial dependence in the running time is prohibitive for large-scale problem instances. The main objective in this context is to develop fast and scalable SFM algorithms.\nInstead of minimizing arbitrary submodular functions, several recent papers aim to exploit special structural properties of submodular functions arising in practical applications. A popular model is decomposable submodular functions: these can be written as sums of several \u201csimple\u201d submodular functions defined on small supports.\nSome definitions are in order. Let f : 2V \u2192 R be a submodular function, and let n := |V |. We can assume w.l.o.g. that f(\u2205) = 0. We are interested in solving the submodular function minimization problem\nmin S\u2286V f(S). (SFM)\nThe base polytope of a submodular function is defined as\nB(f) := {x \u2208 RV : x(S) \u2264 f(S) \u2200S \u2286 V, x(V ) = f(V )}. \u2217Department of Computer Science, Boston University, aene@bu.edu \u2020College of Computer and Information Science, Northeastern University, hu.nguyen@northeastern.edu \u2021Department of Mathematics, London School of Economics, L.Vegh@lse.ac.uk\nOne can optimize linear functions over B(f) using the greedy algorithm. The problem (SFM) can be reduced to finding the minimum norm point of the base polytope B(f) [Fuj80].\nmin\n{ 1\n2 \u2016y\u201622 : y \u2208 B(f)\n}\n. (Min-Norm)\nThis reduction is the starting point of convex optimization approaches for (SFM). We refer the reader to Sections 44\u201345 in [Sch03] for concepts and results in submodular optimization, and to [Bac11] on machine learning applications.\nWe assume that f is given in the decomposition\nf(S) =\nr\u2211\ni=1\nfi(S),\nwhere each fi : 2 V \u2192 R is a submodular function. Such functions are called decomposable or Sum-ofSubmodular (SoS) in the literature. In this paper, we will use the abbreviation DSFM.\nFor each i \u2208 [r], the function fi has an effective support Ci such that fi(S) = fi(S \u2229 Ci) for every S \u2286 V . For each i \u2208 [r], we assume that two oracles are provided: (i) a value oracle that returns fi(S) for any set S \u2286 V in time EOi; and (ii) a quadratic minimization oracle Oi(w). For any input vector w \u2208 Rn, this oracle returns an optimal solution to (Min-Norm) for the function fi + w, or equivalently, an optimal solution to miny\u2208B(fi) \u2016y+w\u201622. We let \u0398i denote the running time of a single call to the oracle Oi, \u0398max := maxi\u2208[r] \u0398i denote the maximum time of an oracle call, \u0398avg := 1 r \u2211 i\u2208[r] \u0398i denote the average time of an oracle call. 1 We let Fi,max := maxS\u2286V |fi(S)|, Fmax := maxS\u2286V |f(S)| denote the maximum function values. Decomposable SFM thus requires algorithms on two levels. The level-0 algorithms are the subroutines used to evaluate the oracles Oi for every i \u2208 [r]. The level-1 algorithm minimizes the function f using the level-0 algorithms as black boxes."}, {"heading": "1.1 Prior work", "text": "SFM has had a long history in combinatorial optimization since the early 1970s, following the influential work of Edmonds [Edm70]. The first polynomial-time algorithm was obtained via the ellipsoid method [GLS81]; recent work presented substantial improvements using this approach [LSW15]. Substantial work focused on designing strongly polynomial combinatorial algorithms [Sch00, IFF01, FI03, Iwa03, Orl09, IO09]. Still, designing practical algorithms for SFM that can be applied to large-scale problem instances remains an open problem.\nLet us now turn to decomposable SFM. Previous work mainly focused on level-1 algorithms. These can be classified as discrete and continuous optimization methods. The discrete approach builds on techniques of classical discrete algorithms for network flows and for submodular flows. Kolmogorov [Kol12] showed that the problem can be reduced to submodular flow maximization, and also presented a more efficient augmenting path algorithm. Subsequent discrete approaches were given in [ABKM12, FJMPZ13, FWZ14]. Continuous approaches start with convex programming formulation (Min-Norm). Gradient methods were applied for the decomposable setting in [SK10, NJJ14, EN15].\nLess attention has been given to the level-0 algorithms. Some papers mainly focus on theoretical guarantees on the running time of level-1 algorithms, and treat the level-0 subroutines as black-boxes (e.g. [Kol12, NJJ14, EN15]). In other papers (e.g. [SK10, JBS13]), the model is restricted to functions fi of a simple specific type that are easy to minimize. An alternative assumption is that all Ci\u2019s are small, of size at most k; and thus these oracles can be evaluated by exhaustive search, in 2k value oracle calls (e.g. [ABKM12, FJMPZ13]).\n1For flow-type algorithms for DSFM, a slightly weaker oracle assumption suffices, returning a minimizer of minS\u2286Ci fi(S)+ w(S) for any given w \u2208 RCi . This oracle and the quadratic minimization oracle are reducible to each other: the former reduces to a single call to the latter, and one can implement the latter using O(|Ci|) calls to the former (see e.g. [Bac11]).\nShanu et al. [SAS16] use a block coordinate descent method for level-1, and allow arbitrary functions fi. The oracles are evaluated via the Fujishige-Wolfe minimum norm point algorithm [FI11, Wol76] for level-0."}, {"heading": "1.2 Our contributions", "text": "Our paper establishes connections between discrete and continuous methods for decomposable SFM, as well as provides a systematic experimental comparison of these approaches. Our main theoretical contribution improves the worst-case complexity bound of the most recent continuous optimization methods [NJJ14, EN15] by a factor of r, the number of functions in the decomposition. This is achieved by improving the bounds on the relevant condition numbers. Our proof exploits ideas from the discrete optimization approach. This provides not only better, but also considerably simpler arguments than the algebraic proof in [NJJ14].\nThe guiding principle of our experimental work is the clean conceptual distinction between the level-0 and level-1 algorithms. Previous experimental studies considered the level-0 and level-1 algorithms as a single \u201cpackage\u201d. For example, Shanu et al. [SAS16] compare the performance of their SoS Min-Norm algorithm to the continuous approach of Jegelka et al. [JBS13] and the combinatorial approach of Arora et al. [ABKM12]. However, these implementations are difficult to compare since they use three different level-0 algorithms: Fujishige-Wolfe in SoS Min-Norm, a general QP solver for the algorithm of [JBS13], and exhaustive search for [ABKM12]. For potentials of large support, Fujishige-Wolfe outperforms these other level-0 subroutines, hence the algorithms in [JBS13, ABKM12] could have compared more favorably using the same FujishigeWolfe subroutine.\nIn our experimental setup, we compare level-1 algorithms by using the same level-0 subroutines. We compare the state-of-the-art continuous and discrete algorithms: RCDM and ACDM from [EN15] with Submodular IBFS from [FJMPZ13]. We consider multiple options for the level-0 subroutines. For certain potential types, we use tailored subroutines exploiting the specific form of the problem. We also consider a variant of the Fujishige-Wolfe algorithm as a subroutine applicable for arbitrary potentials. Our experimental results reveal the following tradeoff. Discrete algorithms on level-1 require more calls to the level-0 oracle, but less overhead computation. Hence using algorithms such as IBFS on level-1 can be significantly faster than gradient descent as long as the potentials have fairly small supports. However, as the size of the potentials grow, or we do need to work with a generic level-0 algorithm, the better choice is using gradient methods. Gradient methods can perform better for larger potentials also due to weaker requirements on the level-0 subroutines: approximate level-0 subroutines suffice for them, whereas discrete algorithms require exact optimal solutions on level-0.\nPaper outline. The rest of the paper is structured as follows. Section 2 describes the level-1 algorithmic framework for DSFM that is based on network flows, and outlines the IBFS algorithm. Section 3 describes the level-1 algorithmic framework for DSFM that is based on convex optimization, and outlines the gradient descent algorithms. Section 4 gives improved convergence guarantees for the gradient descent algorithms outlined in Section 3. Section 5 discusses the different types of level-0 algorithms and how they can be used together with the level-1 frameworks. Section 6 presents our experimental results."}, {"heading": "2 Level-1 algorithms based on network flow", "text": "In this section, we outline a level-1 algorithmic framework for DSFM that is based on a combinatorial framework first studied in [FZ92].2 For a decomposable function f , every x \u2208 B(f) can be written as x = \u2211ri=1 xi, where supp(xi) \u2286 Ci and xi \u2208 B(fi) (see e.g. Theorem 44.6 in [Sch03]). A natural algorithmic approach is to maintain an x \u2208 B(f) in such a representation, and iteratively update it using the combinatorial framework described below. DSFM\n2The framework was introduced in a slightly different context, for the submodular intersection problem. The dual of this problem is minimizing a submodular function of the form f = f1 + f2, with access to oracles minimizing f1 and f2.\ncan be casted as a maximum network flow instance in a network that is suitably defined based on the current point x. This can be viewed as an analogue of the residual graph in the maxflow/mincut setting, and it is precisely the residual graph if the DSFM instance was a mincut instance. The auxiliary graph. For an x \u2208 B(f) of the form x = \u2211ri=1 xi, we construct the following directed auxiliary graph G = (V,E), with E =\n\u22c3r i=1 Ei and capacities c : E \u2192 R+. The arc sets Ei are complete\ndirected graphs (cliques) on Ci, and for an arc (u, v) \u2208 Ei, we define c(u, v) := min{fi(S)\u2212xi(S) : S \u2286 Ci, u \u2208 S, v /\u2208 S}. This is the maximum value \u03b5 such that x\u2032i \u2208 B(fi), where x\u2032i(u) = xi(u) + \u03b5, x\u2032i(v) = xi(v) \u2212 \u03b5, x\u2032i(z) = xi(z) for z /\u2208 {u, v}. Let N := {v \u2208 V : x(v) < 0} and P := {v \u2208 V : x(v) > 0}. The algorithm aims to improve the current x by updating along shortest directed paths from N to P with positive capacity; there are several ways to update the solution, and we discuss specific approaches later in the section. If there exists no such directed path, then we let S denote the set reachable from N on directed paths with positive capacity; thus, S \u2229 P = \u2205. It is easy to show that S is a minimizer of the function f .\nUpdating along a shortest path Q fromN to P amounts to the following. Let \u03b5 denote the minimum capacity of an arc on Q. If (u, v) \u2208 Q\u2229Ei, then we increase xi(u) by \u03b5 and decrease xi(v) by \u03b5. The crucial technical claim [FZ92] is the following. Let d(u) denote the shortest path distance of positive capacity arcs from u to the set P . Then, an update along a shortest directed path from N to P results in a feasible x \u2208 B(f), and further, all distance labels d(u) are non-decreasing.\nLevel-1 algorithms based on the network flow approach. Using this auxiliary graph, and updating on shortest augmenting paths, one can generalize several maximum flow algorithms to a level-1 algorithm of DSFM. These algorithms include: the Edmonds-Karp-Dinitz maximum flow algorithm, the preflow-push algorithm [GT88], the incremental breadth first search algorithm (IBFS) [GHK+11], and the excesses incremental breadth first search algorithm [GHK+15]. Our experiments will use an implementation of IBFS, following [FJMPZ13].\nSubmodular incremental breadth first search (IBFS). Fix et al. [FJMPZ13] adapt the IBFS algorithm to the above described submodular framework using the above mentioned claims by Fujishige & Zhang [FZ92]. IBFS is an augmenting path algorithm for the maximum flow problem. It identifies a shortest path from the source set N to the sink set P via growing shortest path trees simultaneously forwards from N and backwards from P .\nThe submodular IBFS algorithm provides us with a level-1 algorithm for DSFM. Each step of the algorithm involves determining the capacity of an arc in the auxiliary graph; as we explain in Section 5, each of these capacities can be computed using a single call to a level-0 subroutine Oi. By combining the level-1 IBFS algorithm with appropriate level-0 subroutines, we obtain an algorithm for DSFM whose running time can be upper bounded as follows. On a directed graph with n nodes and m arcs, IBFS runs in time O(n2m). In the DSFM setting, we have m = O( \u2211\ni\u2208[r] |Ci|2). Every step involves determining an auxiliary capacity, which can be implemented using a single call to a level-0 subroutine Oi (see Section 5); the maximum time of such an oracle call is \u0398max. Hence, the running time bound for submodular IBFS can be given as O(n2\u0398max \u2211 i\u2208[r] |Ci|2). If all Ci\u2019s are small, O(1), then this gives O(n2r\u0398max)."}, {"heading": "3 Level-1 algorithms based on convex optimization", "text": "In this section, we outline the level-1 algorithms for DSFM that are based on gradient descent. Recall the convex quadratic program (Min-Norm) from the Introduction. This program has a unique optimal solution s\u2217; the set S = {v \u2208 V : s\u2217(v) < 0} is the unique smallest minimizer to (SFM). We will refer to this optimal solution s\u2217 throughout the section.\nIn the DSFM setting, one can write (Min-Norm) in multiple equivalent forms [JBS13]. For the first formu-\nlation, we let P := \u220fri=1 B(fi) \u2286 Rrn, and let A \u2208 Rn\u00d7(rn) denote the following matrix:\nA := [InIn . . . In] \ufe38 \ufe37\ufe37 \ufe38\nr times\n.\nNote that, for every y \u2208 P , Ay = \u2211ri=1 yi, where yi is the i-th block of y, and thus Ay \u2208 B(f). The problem (Min-Norm) can be reformulated for DSFM as follow.\nmin\n{ 1\n2 \u2016Ay\u201622 : y \u2208 P\n}\n. (Prox-DSFM)\nThe second formulation is the following. Let us define the subspace A := {a \u2208 Rnr : Aa = 0}, and minimize its distance from P :\nmin { \u2016a\u2212 y\u201622 : a \u2208 A, y \u2208 P } . (Best-Approx)\nThe set of optimal solutions for both formulations (Prox-DSFM) and (Best-Approx) is the set E := {y \u2208 P : Ay = s\u2217}, where s\u2217 is the optimum of (Min-Norm). We note that, even though the set of solutions to (Best-Approx) are pairs of points (a, y) \u2208 A \u00d7 P , the optimal solutions are uniquely determined by y \u2208 P , since the corresponding a is the projection of y to A.\nLemma 3.1 ([JBS13], Lemma 2). The set E is non-empty and it coincides with the set of optimal solutions of (Prox-DSFM) and (Best-Approx).\nGradient methods. The gradient descent algorithms of [NJJ14, EN15] provide level-1 algorithms for DSFM. In the following, we provide a brief overview of these algorithms and we refer the reader to the respective papers for more details.\nThe alternating projections algorithm. Nishihara et al. minimize (Best-Approx) using alternating projections [NJJ14]. The algorithm starts with a point a0 \u2208 A and it iteratively constructs a sequence{ (a(k), x(k)) }\nk\u22650 by projecting onto A and P : x(k) = argminx\u2208P\u2016a(k) \u2212x\u20162, a(k+1) = argmina\u2208A\u2016a\u2212x(k)\u20162. Random coordinate descent algorithms. Ene and Nguyen minimize (Prox-DSFM) using random coordinate descent [EN15]. The RCDM algorithm adapts the random coordinate descent algorithm of Nesterov [Nes12] to (Prox-DSFM). In each iteration, the algorithm samples a block i \u2208 [r] uniformly at random and it updates xi via a standard gradient descent step for smooth functions. ACDM, the accelerated version of the algorithm, presents a further enhancement using techniques from [FR15].\nRate of convergence. The algorithms mentioned above enjoy a linear convergence rate despite the fact that the objective functions of (Best-Approx) and (Prox-DSFM) are not strongly convex. Instead, these works show that there are certain parameters that one can associate with the objective functions such that the convergence is at the rate (1 \u2212 \u03b1)k, where \u03b1 \u2208 (0, 1) is a quantity that depends on the appropriate parameter. Let us now precisely define these parameters and state the convergence guarantees as a function of these parameters. Let A\u2032 be the affine subspace A\u2032 := {a \u2208 Rnr : Aa = s\u2217}. Note that E = P \u2229 A\u2032. For y \u2208 Rnr and a closed set K \u2286 Rnr, we let d(y,K) = min {\u2016y \u2212 z\u20162 : z \u2208 K} denote the distance between y and K. The relevant parameter for the Alternating Projections algorithm is defined as follows.\nDefinition 3.2 ([NJJ14]). For every y \u2208 (P \u222a A\u2032) \\ E , let\n\u03ba(y) := d(y, E)\nmax {d(y,P), d(y,A\u2032)} , and\n\u03ba\u2217 := sup {\u03ba(y) : y \u2208 (P \u222a A\u2032) \\ E} .\nThe relevant parameter for the random coordinate descent algorithms is the following.\nDefinition 3.3 ([EN15]). For every y \u2208 P , let y\u2217 := argminp{\u2016p\u2212 y\u20162 : Ap = s\u2217} be the optimal solution to (Prox-DSFM) that is closest to y. We say that the objective function 12\u2016Ay\u201622 of (Prox-DSFM) is restricted \u2113-strongly convex if, for all y \u2208 P , we have\n\u2016A(y \u2212 y\u2217)\u201622 \u2265 \u2113\u2016y \u2212 y\u2217\u201622, and\n\u2113\u2217 := sup\n{\n\u2113 : 1\n2 \u2016Ay\u201622 is restricted \u2113-strongly convex\n}\n.\nThe running time dependence of the algorithms on these parameters is given in the following theorems.\nTheorem 3.4 ([NJJ14]). Let (a(0), x(0) = argminx\u2208P\u2016a(0) \u2212 x\u20162) be the initial solution and let (a\u2217, x\u2217) be an optimal solution to (Best-Approx). The alternating projection algorithm produces in\nk = \u0398\n(\n\u03ba2\u2217 ln (\u2016x(0) \u2212 x\u2217\u20162 \u01eb ))\niterations a pair of points a(k) \u2208 A and x(k) \u2208 P that is \u01eb-optimal, i.e., \u2016a(k) \u2212 x(k)\u201622 \u2264 \u2016a\u2217 \u2212 x\u2217\u201622 + \u03b5. Theorem 3.5 ([EN15]). Let x(0) \u2208 P be the initial solution and let x\u2217 be an optimal solution to (Prox-DSFM) that minimizes \u2016x(0) \u2212 x\u2217\u20162. The random coordinate descent algorithm produces in\nk = \u0398\n( r\n\u2113\u2217 ln (\u2016x(0) \u2212 x\u2217\u20162 \u01eb ))\niterations a solution x(k) that is \u01eb-optimal in expectation, i.e., E [\n1 2\u2016Ax(k)\u201622 ] \u2264 12\u2016Ax\u2217\u201622 + \u01eb.\nThe accelerated coordinate descent algorithm produces in\nk = \u0398\n(\nr\n\u221a 1\n\u2113\u2217 ln (\u2016x(0) \u2212 x\u2217\u20162 \u01eb ))\niterations (specifically, \u0398 ( ln (\n\u2016x(0)\u2212x\u2217\u20162 \u01eb\n)) epochs with \u0398 ( r \u221a\n1 \u2113\u2217\n)\niterations in each epoch) a solution x(k)\nthat is \u01eb-optimal in expectation, i.e., E [\n1 2\u2016Ax(k)\u201622 ] \u2264 12\u2016Ax\u2217\u201622 + \u01eb.\nNishihara et al. show that \u03ba\u2217 \u2264 nr, and a family of instances (in fact, minimum cut instances) is given for which \u03ba\u2217 \u2265 \u2126(n \u221a r). Ene and Nguyen show that \u2113\u2217 \u2265 r/\u03ba2\u2217. In Theorem 4.2, we close the remaining gap\nand show that \u03ba\u2217 = \u0398(n \u221a r) and \u2113\u2217 = \u0398(1/n2), and thus we obtain tight analyses for the running times of the above mentioned algorithms.\nBy combining the level-1 gradient descent algorithms with appropriate level-0 subroutines, we obtain algorithms for DSFM whose running times can be upper bounded as follows. Using our improved convergence guarantees, it follows that RCDM obtains in time O ( n2r\u0398avg ln ( \u2016x(0)\u2212x\u2217\u20162 \u01eb )) a solution that is \u03b5-approximate in expectation. For ACDM, the improved time bound is O ( nr\u0398avg ln ( \u2016x(0)\u2212x\u2217\u20162 \u01eb )) . We can upper bound the diameter of the base polytope by O( \u221a nFmax) [JB11]. For integer-valued functions, a \u03b5-approximate solution can be converted to an exact optimum if \u03b5 = O(1/n) [Bac11]."}, {"heading": "4 Tight convergence bounds for the continuous algorithms", "text": "In this section, we show that the combinatorial approach introduced in Section 2 can be applied to obtain better bounds on the parameters \u03ba\u2217 and \u2113\u2217 defined in Section 3. Besides giving a stronger bound, our proof is considerably simpler than the algebraic one using Cheeger\u2019s inequality in [NJJ14]. The key is the following lemma.\nLemma 4.1. Let y \u2208 P and s\u2217 \u2208 B(f). Then there exists a point x \u2208 P such that Ax = s\u2217 and \u2016x\u2212 y\u20162 \u2264\u221a n\n2 \u2016Ay \u2212 s\u2217\u20161.\nBefore proving this lemma, we show how it can be used to derive the bounds. Theorem 4.2. We have \u03ba\u2217 \u2264 n \u221a r/2 + 1 and \u2113\u2217 \u2265 4/n2.\nProof: We start with the bound on \u03ba\u2217. In order to bound \u03ba\u2217, we need to upper bound \u03ba(y) for any y \u2208 (P \u222a A\u2032) \\ E . We distinguish between two cases: y \u2208 P \\ E and y \u2208 A\u2032 \\ E . Case I: y \u2208 P \\ E. The denominator in the definition of \u03ba(y) is equal to d(y,A\u2032) = \u2016Ay \u2212 s\u2217\u20162/ \u221a r. This follows since the closest point a = (a1, . . . , ar) to y in A\u2032 is to set ai = yi + (s\u2217 \u2212 Ay)/r for each i \u2208 [r]. Lemma 4.1 gives an x \u2208 P such that Ax = s\u2217 and \u2016x\u2212 y\u20162 \u2264 \u221a n\n2 \u2016Ay\u2212 s\u2217\u20161 \u2264 n2 \u2016Ay\u2212 s\u2217\u20162. Since Ax = s\u2217, we have x \u2208 E and thus the numerator of \u03ba(y) is at most \u2016x\u2212y\u20162. Thus \u03ba(y) \u2264 \u2016x\u2212 y\u20162/(\u2016Ay \u2212 s\u2217\u20162/ \u221a r) \u2264\nn \u221a r/2. Case II: y \u2208 A\u2032 \\E. This means that Ay = s\u2217. The denominator of \u03ba(y) is equal to d(y,P). For each i \u2208 [r], let qi \u2208 B(fi) be the point that minimizes \u2016yi \u2212 qi\u20162. Let q = (q1, . . . , qr) \u2208 P . Then d(y,P) = \u2016y \u2212 q\u20162. Lemma 4.1 with q in place of y gives a point x \u2208 E such that \u2016q \u2212 x\u20162 \u2264 \u221a n\n2 \u2016Aq \u2212 s\u2217\u20161. We have \u2016Aq \u2212 s\u2217\u20161 = \u2016Aq \u2212 Ay\u20161 \u2264 \u2211r i=1 \u2016qi \u2212 yi\u20161 = \u2016q \u2212 y\u20161 \u2264 \u221a nr\u2016q \u2212 y\u20162. Thus \u2016q \u2212 x\u20162 \u2264 n \u221a r\n2 \u2016q \u2212 y\u20162. Since x \u2208 E , we have d(y, E) \u2264 \u2016x\u2212 y\u20162 \u2264 \u2016x\u2212 q\u20162 + \u2016q \u2212 y\u20162 \u2264 ( 1 + n \u221a r\n2\n) \u2016q \u2212 y\u20162 = ( 1 + n \u221a r\n2\n)\nd(y,P). Therefore \u03ba(p) \u2264 1 + n \u221a r\n2 , as desired.\nLet us now prove the bound on \u2113\u2217. Let y \u2208 P and let y\u2217 := argminp{\u2016p\u2212 y\u20162 : Ap = s\u2217}. We need to verify that \u2016A(y\u2212y\u2217)\u201622 \u2265 4n2 \u2016y\u2212y\u2217\u201622. Again, we apply Lemma 4.1 to obtain a point x \u2208 P such that Ax = s\u2217 and \u2016x\u2212 y\u201622 \u2264 n4 \u2016Ax\u2212Ay\u201621 \u2264 n 2\n4 \u2016Ax\u2212Ay\u201622. Since Ax = s\u2217, the definition of y\u2217 gives \u2016y \u2212 y\u2217\u201622 \u2264 \u2016x\u2212 y\u201622. Using that Ax = Ay\u2217 = s\u2217, we have \u2016Ax\u2212Ay\u20162 = \u2016Ay \u2212Ay\u2217\u20162. The same calculation as in Case II above implies the required \u2016y \u2212 y\u2217\u201622 \u2264 n 2\n4 \u2016A(y \u2212 y\u2217)\u201622. Proof of Lemma 4.1: We give an algorithm that transforms y to a vector x \u2208 P as in the statement through a sequence of path augmentations in the auxiliary graph defined in Section 2. We initialize x = y and maintain x \u2208 P (and thus Ax \u2208 B(f)) throughout. We now define the set of source and sink nodes as N := {v \u2208 V : (Ax)(v) < s\u2217(v)} and P := {v \u2208 V : (Ax)(v) > s\u2217(v)}. Once N = P = \u2205, we have Ax = s\u2217 and terminate. Note that since Ax, s\u2217 \u2208 B(f), we have \u2211v(Ax)(v) = \u2211 v s \u2217(v) = f(V ), and therefore N = \u2205 is equivalent to P = \u2205. The blocks of x are denoted as x = (x1, x2, . . . , xr), with xi \u2208 B(fi).\nClaim 4.3. If N 6= \u2205, then there exists a directed path of positive capacity in the auxiliary graph between the sets N and P .\nProof: We say that a set T is i-tight, if xi(T ) = fi(T ). It is a simple consequence of submodularity that the intersection and union of two i-tight sets are also i-tight sets. For every i \u2208 [r] and every u \u2208 V , we define Ti(u) as the unique minimal i-tight set containing u. It is easy to see that for an arc (u, v) \u2208 Ei, c(u, v) > 0 if and only if v \u2208 Ti(u). We note that if u /\u2208 Ci, then x(u) = fi({u}) = 0 and thus Ti(u) = {u}. Let S be the set of vertices reachable from N on a directed path of positive capacity in the auxiliary graph. For a contradiction, assume S \u2229 P = \u2205. By the definition of S, we must have Ti(u) \u2286 S for every u \u2208 S and every i \u2208 [r]. Since the union of i-tight sets is also i-tight, we see that S is i-tight for every i \u2208 [r], and consequently, x(S) = f(S). On the other hand, since N \u2286 S, S \u2229 P = \u2205, and N 6= \u2205, we have x(S) < s\u2217(S). Since s\u2217 \u2208 B(f), we have x(S) < s\u2217(S) \u2264 f(S), which is a contradiction. We conclude that S \u2229 P 6= \u2205. In every step of the algorithm, we take a shortest directed path Q of positive capacity from N to P , and update x along this path. That is, if (u, v) \u2208 Q \u2229 Ei, then we increase xi(u) by \u03b5 and decrease xi(v) by \u03b5, where \u03b5 is the minimum capacity of an arc on Q. Note that this is the same as running the Edmonds-KarpDinitz algorithm in the submodular auxiliary graph. Using the analysis in [FZ92], one can show that this change maintains x \u2208 P , and that the algorithm terminates in finite (in fact, strongly polynomial) time.\nIt remains to bound \u2016x\u2212y\u20162. At every path update, the change in \u2113\u221e-norm of x is at most \u03b5, and the change in \u21131-norm is at most n\u03b5, since the length of the path is \u2264 n. At the same time, \u2211 v\u2208N (s \u2217(v) \u2212 (Ax)(v)) decreases by \u03b5. Thus, \u2016x \u2212 y\u2016\u221e \u2264 \u2016Ay \u2212 s\u2217\u20161/2 and \u2016x \u2212 y\u20161 \u2264 n\u2016Ay \u2212 s\u2217\u20161/2. Using the inequality \u2016p\u20162 \u2264 \u221a \u2016p\u20161\u2016p\u2016\u221e, we obtain \u2016x\u2212 y\u20162 \u2264 \u221a n 2 \u2016Ay \u2212 s\u2217\u20161, completing the proof."}, {"heading": "5 The level-0 algorithms", "text": "In this section, we briefly discuss the level-0 algorithms and the interface between the level-1 and level-0 algorithms.\nTwo-level frameworks via quadratic minimization oracles. Recall from the Introduction the assumption on the subroutines Oi(w) that finds the minimum norm point in B(fi+w) for the input vector w \u2208 Rn. The continuous methods in Section 3 directly use the subroutines Oi(w) for the alternating projection or coordinate descent steps. For the flow-based algorithms in Section 2, the main oracle query is to find the auxiliary graph capacity c(u, v) of an arc (u, v) \u2208 Ei for some i \u2208 [r]. This can be easily formulated as minimizing the function fi+w for an appropriate w with supp(w) \u2286 Ci; the details are given in Lemma 5.1. As explained at the beginning of Section 3, an optimal solution to (Min-Norm) immediately gives an optimal solution to (SFM) for the same submodular function. Hence, the auxiliary graph capacity queries can be implemented via the subroutines Oi(w). Let us also remark that, while the functions fi are formally defined on the entire ground set V , their effective support is Ci, and thus it suffices to solve the quadratic minimization problems on the ground set Ci.\nLemma 5.1. The capacity c(u, v) := min{fi(S) \u2212 xi(S) : S \u2286 Ci, u \u2208 S, v /\u2208 S} can be computed as the minimum value of minS\u2286Ci fi(S) + w(S) for an appropriately chosen vector w \u2208 Rn, supp(w) \u2286 Ci. Proof: We define a weight vector w \u2208 Rn as follows: w(u) = \u2212(fi({u}) + 1); w(v) = \u2212(fi(Ci) \u2212 fi(Ci \\ {v}) \u2212 1); w(a) = \u2212x(a) for all a \u2208 Ci \\ {u, v}, and w(a) = 0 for all a /\u2208 Ci. Let A \u2286 Ci be a minimizer of minS\u2286Ci fi(S) + w(S). It suffices to show that u \u2208 A and v /\u2208 A. Note that fi({u}) = fi({u})\u2212 f(\u2205) is the maximum marginal value of u, i.e., maxS(fi(S \u222a {u}) \u2212 fi(S)). Moreover, fi(Ci) \u2212 fi(Ci \\ {v}) is the minimum marginal value of v. To show u \u2208 A, let us assume for a contradiction that u /\u2208 A.\nfi(A \u222a {u}) + w(A \u222a {u}) = (fi(A) + w(A)) + (fi(A \u222a {u})\u2212 fi(A)) + w(u) = (fi(A) + w(A)) + (fi(A \u222a {u})\u2212 fi(A))\u2212 fi({u}) + 1 \u2264 fi(A) + w(A) \u2212 1.\nSimilarly, to show that v /\u2208 A, suppose for a contradiction that v \u2208 A, and consider the set A \\ {v}. Since fi(Ci)\u2212 fi(Ci \\ {v}) \u2264 fi(A)\u2212 fi(A \\ {v}), we have\nfi(A \\ {v}) + w(A \\ {v}) = (fi(A) + w(A)) \u2212 (fi(A)\u2212 fi(A \\ {v}))\u2212 w(v) = (fi(A) + w(A)) \u2212 (fi(A)\u2212 fi(A \\ {v})) + (fi(Ci)\u2212 fi(Ci \\ {v}))\u2212 1 \u2264 fi(A) + w(A) \u2212 1.\nTherefore u \u2208 A and v /\u2208 A, and hence A \u2208 argmin{fi(S)\u2212 xi(S) : u \u2208 S, v /\u2208 S}. Whereas discrete and continuous algorithms require the same type of oracles, there is an important difference between the two algorithms in terms of exactness for the oracle solutions. The discrete algorithms require exact values of the auxiliary graph capacities c(u, v), as they must maintain xi \u2208 B(fi) throughout. Thus, the oracle must always return an optimal solution. The continuous algorithms are more robust, and return a solution with the required accuracy even if the oracle only returns an approximate solution. As discussed in Section 6, this difference leads to the continuous methods being applicable in settings where the combinatorial algorithms are prohibitively slow.\nLevel-0 algorithms. We now discuss specific algorithms for quadratic minimization over the base polytopes of the functions fi. Several functions that arise in applications are \u201csimple\u201d, meaning that there is a"}, {"heading": "UCDM time (sec)", "text": ""}, {"heading": "ACDM time (sec)", "text": "function-specific quadratic minimization subroutine that is very efficient. If a function-specific subroutine is not available, one can use a general-purpose submodular minimization algorithm. The works [ABKM12, FJMPZ13] use a brute force search as the subroutine for each each fi, whose running time is 2\n|Ci|EOi. However, this is applicable only for small Ci\u2019s and is not suitable for our experiments where the maximum clique size is quite large. As a general-purpose algorithm, we used the Fujishige-Wolfe minimum norm point algorithm [FI11, Wol76]. This provides an \u03b5-approximate solution in O(|Ci|F 2i,max/\u03b5) iterations, with overall running time bound O((|Ci|4 + |Ci|2EOi)F 2i,max/\u03b5). [CJK14]. The experimental running time of the Fujishige-Wolfe algorithm can be prohibitively large [JLB11]. As we discuss in Section 6, by warmstarting the algorithm and performing only a small number of iterations, we were able to use the algorithm in conjunction with the gradient descent level-1 algorithms."}, {"heading": "6 Experiments", "text": "We evaluate the algorithms on energy minimization problems that arise in image segmentation problems. We follow the standard approach and model the image segmentation task of segmenting an object from the background as finding a minimum cost 0/1 labeling of the pixels. The total labeling cost is the sum of labeling costs corresponding to cliques, where a clique is a set of pixels. We refer to the labeling cost"}, {"heading": "ACDM time (sec)", "text": ""}, {"heading": "RCDM time (sec)", "text": ""}, {"heading": "ACDM time (sec)", "text": ""}, {"heading": "RCDM time (sec)", "text": ""}, {"heading": "RCDM time (sec)", "text": ""}, {"heading": "ACDM time (sec)", "text": "functions as clique potentials.\nThe main focus of our experimental analysis is to compare the running times of the decomposable submodular minimization algorithms. Therefore we have chosen to use the simple hand-tuned potentials that were used in previous work [SAS16, ABKM12, SK10]: the edge-based costs defined by [ABKM12] and the count-based costs defined by [SK10]. Specifically, we used the following clique potentials in our experiments, all of which are submodular:\n\u2022 Unary potentials for each pixel. The unary potentials are derived from Gaussian Mixture Models of color features [RKB04]. \u2022 Pairwise potentials for each edge of the 8-neighbor grid graph. Each graph edge (i, j) between pixels i and j is assigned a weight that is a function of exp(\u2212\u2016vi\u2212 vj\u20162), where vi is the RGB color vector of pixel i. The clique potential for the edge is the cut function of the edge: the cost of a labeling is equal to zero if the two pixels have the same label and it is equal to the weight of the edge otherwise. \u2022 Square potentials for each 2 \u00d7 2 square of pixels. We view a 2 \u00d7 2 square as a graph on 4 nodes connected with 4 edges (two horizontal and two vertical edges). The cost of a labeling is the square root of the number of edges of the square that have different labels. This is the basic edge-based potential defined by [ABKM12]. \u2022 Region potentials for a set of regions of the image. We compute a set of regions of the image using the region growing algorithm suggested by [SK10]. For each region Ci, we define a count-based clique potential as in [SK10, SAS16]: for each set S \u2286 Ci of pixels, fi(S) = |S||Ci \\ S|. We used five image segmentation instances to evaluate the algorithms3. Table 1 provides the sizes of the resulting instances. The experiments were carried out on a single computer with a 3.3 GHz Intel Core i5 processor and 8 GB of memory. The reported times are averaged over 10 trials.\nNumber of iterations for the coordinate methods. We have run the coordinate descent algorithms for 1000r iterations, where r is the number of functions in the decomposition. Our choice is based on the empirical results of Jegelka et al. [JBS13] that showed that this number of iterations suffices to obtain good results.\nMinimum cut experiments. We evaluated the algorithms on instances containing only the unary poten-\n3The data is available at http://melodi.ee.washington.edu/~jegelka/cc/index.html and http://research.microsoft.com/en-us/um/cambridge/projects/visionimagevideoediting/segmentation/grabcut.htm\ntials and the pairwise potentials. Table 2 gives the running times in seconds.\nSmall cliques experiments. We evaluated the algorithms on instances containing the unary potentials, the pairwise potentials, and the square potentials. Table 3 gives the running times in seconds.\nLarge cliques experiments. We evaluated the algorithms on instances containing all of the potentials: the unary potentials, the pairwise potentials, the square potentials, and the region potentials. For the region potentials, we used a potential-specific level-0 algorithm that performs quadratic minimization over the base polytope in time O(|Ci| log(|Ci|) + |Ci|EOi). Additionally, due to the slow running time of IBFS, we used smaller regions: 50 regions with an average size between 45 and 50.\nLarge cliques experiments with Fujishige-Wolfe algorithm. We also ran a version of the large cliques experiments with the Fujishige-Wolfe algorithm as the level-0 algorithm for the region potentials. The Fujishige-Wolfe algorithm was significantly slower than the potential-specific quadratic minimization algorithm and in our experiments it was prohibitive to run the Fujishige-Wolfe algorithm to near-convergence. Since the IBFS algorithm requires almost exact quadratic minimization in order to compute exchange capacities, it was prohibitive to run the IBFS algorithm with the Fujishige-Wolfe algorithm. In contrast, the coordinate descent methods can potentially make progress even if the level-0 solution is far from being converged.\nIn order to empirically evaluate this hypothesis, we made a simple but crucial change to the Fujishige-Wolfe algorithm: we warm-started the algorithm with the current solution. Recall that the coordinate descent algorithms maintain a solution xi \u2208 B(fi) for each function fi in the decomposition. We warm-started the Fujishige-Wolfe algorithm with the current solution xi, and we ran the algorithm for a small number of iterations. In our experiments, we ran the Fujishige-Wolfe algorithm for 10 iterations. These changes made the level-0 running time considerably smaller, which made it possible to run the level-1 coordinate descent algorithms for as many as 1000r iterations. At the same time, performing 10 iterations starting from the current solution seemed enough to provide an improvement over the current solution. Table 5 gives the running times.\nConclusions. The combinatorial level-1 algorithms such as IBFS are exact and can be significantly faster than the gradient descent algorithms provided that the sizes of the cliques are fairly small. For instances with larger cliques, the combinatorial algorithms are no longer suitable if the only choice for the level-0 algorithms are generic methods such as the Fujishige-Wolfe algorithm. The experimental results suggest that in such cases, the coordinate descent methods together with a suitably modified Fujishige-Wolfe algorithm provides an approach for obtaining an approximate solution."}], "references": [{"title": "Generic cuts: An efficient algorithm for optimal inference in higher order mrf-map", "author": ["Chetan Arora", "Subhashis Banerjee", "Prem Kalra", "SN Maheshwari"], "venue": "In European Conference on Computer Vision,", "citeRegEx": "Arora et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Arora et al\\.", "year": 2012}, {"title": "Learning with submodular functions: A convex optimization perspective", "author": ["Francis Bach"], "venue": "ArXiv preprint arXiv:1111.6453,", "citeRegEx": "Bach.,? \\Q2011\\E", "shortCiteRegEx": "Bach.", "year": 2011}, {"title": "Provable submodular minimization using Wolfe\u2019s algorithm", "author": ["Deeparnab Chakrabarty", "Prateek Jain", "Pravesh Kothari"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Chakrabarty et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Chakrabarty et al\\.", "year": 2014}, {"title": "Submodular functions, matroids, and certain polyhedra", "author": ["Jack Edmonds"], "venue": "Combinatorial structures and their applications,", "citeRegEx": "Edmonds.,? \\Q1970\\E", "shortCiteRegEx": "Edmonds.", "year": 1970}, {"title": "Random coordinate descent methods for minimizing decomposable submodular functions", "author": ["A.R. Ene", "H.L. Nguyen"], "venue": "In Proceedings of the 32nd International Conference on Machine Learning (ICML),", "citeRegEx": "Ene and Nguyen.,? \\Q2015\\E", "shortCiteRegEx": "Ene and Nguyen.", "year": 2015}, {"title": "A push-relabel framework for submodular function minimization and applications to parametric optimization", "author": ["Lisa Fleischer", "Satoru Iwata"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "Fleischer and Iwata.,? \\Q2003\\E", "shortCiteRegEx": "Fleischer and Iwata.", "year": 2003}, {"title": "A submodular function minimization algorithm based on the minimum-norm base", "author": ["Satoru Fujishige", "Shigueo Isotani"], "venue": "Pacific Journal of Optimization,", "citeRegEx": "Fujishige and Isotani.,? \\Q2011\\E", "shortCiteRegEx": "Fujishige and Isotani.", "year": 2011}, {"title": "Structured learning of sum-of-submodular higher order energy functions", "author": ["Alexander Fix", "Thorsten Joachims", "Sung Min Park", "Ramin Zabih"], "venue": "In Proceedings of the IEEE International Conference on Computer Vision,", "citeRegEx": "Fix et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Fix et al\\.", "year": 2013}, {"title": "Accelerated, parallel, and proximal coordinate descent", "author": ["Olivier Fercoq", "Peter Richt\u00e1rik"], "venue": "SIAM Journal on Optimization,", "citeRegEx": "Fercoq and Richt\u00e1rik.,? \\Q2015\\E", "shortCiteRegEx": "Fercoq and Richt\u00e1rik.", "year": 2015}, {"title": "Lexicographically optimal base of a polymatroid with respect to a weight vector", "author": ["Satoru Fujishige"], "venue": "Mathematics of Operations Research,", "citeRegEx": "Fujishige.,? \\Q1980\\E", "shortCiteRegEx": "Fujishige.", "year": 1980}, {"title": "A primal-dual algorithm for higher-order multilabel markov random fields", "author": ["Alexander Fix", "Chen Wang", "Ramin Zabih"], "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "Fix et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Fix et al\\.", "year": 2014}, {"title": "New algorithms for the intersection problem of submodular systems", "author": ["Satoru Fujishige", "Xiaodong Zhang"], "venue": "Japan Journal of Industrial and Applied Mathematics,", "citeRegEx": "Fujishige and Zhang.,? \\Q1992\\E", "shortCiteRegEx": "Fujishige and Zhang.", "year": 1992}, {"title": "Maximum flows by incremental breadth-first search", "author": ["Andrew V Goldberg", "Sagi Hed", "Haim Kaplan", "Robert E Tarjan", "Renato F Werneck"], "venue": "In European Symposium on Algorithms,", "citeRegEx": "Goldberg et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Goldberg et al\\.", "year": 2011}, {"title": "Faster and more dynamic maximum flow by incremental breadth-first search", "author": ["Andrew V Goldberg", "Sagi Hed", "Haim Kaplan", "Pushmeet Kohli", "Robert E Tarjan", "Renato F Werneck"], "venue": "Algorithms-ESA", "citeRegEx": "Goldberg et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Goldberg et al\\.", "year": 2015}, {"title": "The ellipsoid method and its consequences in combinatorial optimization", "author": ["Martin Gr\u00f6tschel", "L\u00e1szl\u00f3 Lov\u00e1sz", "Alexander Schrijver"], "venue": null, "citeRegEx": "Gr\u00f6tschel et al\\.,? \\Q1981\\E", "shortCiteRegEx": "Gr\u00f6tschel et al\\.", "year": 1981}, {"title": "A new approach to the maximum-flow problem", "author": ["Andrew V Goldberg", "Robert E Tarjan"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "Goldberg and Tarjan.,? \\Q1988\\E", "shortCiteRegEx": "Goldberg and Tarjan.", "year": 1988}, {"title": "A combinatorial strongly polynomial algorithm for minimizing submodular functions", "author": ["Satoru Iwata", "Lisa Fleischer", "Satoru Fujishige"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "Iwata et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Iwata et al\\.", "year": 2001}, {"title": "A simple combinatorial algorithm for submodular function minimization", "author": ["Satoru Iwata", "James B Orlin"], "venue": "In ACM-SIAM Symposium on Discrete Algorithms (SODA),", "citeRegEx": "Iwata and Orlin.,? \\Q2009\\E", "shortCiteRegEx": "Iwata and Orlin.", "year": 2009}, {"title": "A faster scaling algorithm for minimizing submodular functions", "author": ["Satoru Iwata"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Iwata.,? \\Q2003\\E", "shortCiteRegEx": "Iwata.", "year": 2003}, {"title": "Online submodular minimization for combinatorial structures", "author": ["Stefanie Jegelka", "Jeff A Bilmes"], "venue": "In Proceedings of the 28th International Conference on Machine Learning", "citeRegEx": "Jegelka and Bilmes.,? \\Q2011\\E", "shortCiteRegEx": "Jegelka and Bilmes.", "year": 2011}, {"title": "Reflection methods for user-friendly submodular optimization", "author": ["Stefanie Jegelka", "Francis Bach", "Suvrit Sra"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Jegelka et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Jegelka et al\\.", "year": 2013}, {"title": "On fast approximate submodular minimization", "author": ["Stefanie Jegelka", "Hui Lin", "Jeff A Bilmes"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Jegelka et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Jegelka et al\\.", "year": 2011}, {"title": "Minimizing a sum of submodular functions", "author": ["Vladimir Kolmogorov"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "Kolmogorov.,? \\Q2012\\E", "shortCiteRegEx": "Kolmogorov.", "year": 2012}, {"title": "A faster cutting plane method and its implications for combinatorial and convex optimization", "author": ["Yin Tat Lee", "Aaron Sidford", "Sam Chiu-wai Wong"], "venue": "In IEEE Foundations of Computer Science (FOCS),", "citeRegEx": "Lee et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lee et al\\.", "year": 2015}, {"title": "Efficiency of coordinate descent methods on huge-scale optimization problems", "author": ["Yurii Nesterov"], "venue": "SIAM Journal on Optimization,", "citeRegEx": "Nesterov.,? \\Q2012\\E", "shortCiteRegEx": "Nesterov.", "year": 2012}, {"title": "On the convergence rate of decomposable submodular function minimization", "author": ["Robert Nishihara", "Stefanie Jegelka", "Michael I Jordan"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Nishihara et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Nishihara et al\\.", "year": 2014}, {"title": "A faster strongly polynomial time algorithm for submodular function minimization", "author": ["James B Orlin"], "venue": "Mathematical Programming,", "citeRegEx": "Orlin.,? \\Q2009\\E", "shortCiteRegEx": "Orlin.", "year": 2009}, {"title": "Grabcut: Interactive foreground extraction using iterated graph cuts", "author": ["Carsten Rother", "Vladimir Kolmogorov", "Andrew Blake"], "venue": "ACM Transactions on Graphics (TOG),", "citeRegEx": "Rother et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Rother et al\\.", "year": 2004}, {"title": "Min norm point algorithm for higher order mrf-map inference", "author": ["Ishant Shanu", "Chetan Arora", "Parag Singla"], "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "Shanu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Shanu et al\\.", "year": 2016}, {"title": "A combinatorial algorithm minimizing submodular functions in strongly polynomial time", "author": ["Alexander Schrijver"], "venue": "Journal of Combinatorial Theory, Series B,", "citeRegEx": "Schrijver.,? \\Q2000\\E", "shortCiteRegEx": "Schrijver.", "year": 2000}, {"title": "Combinatorial optimization - Polyhedra and Efficiency", "author": ["A. Schrijver"], "venue": null, "citeRegEx": "Schrijver.,? \\Q2003\\E", "shortCiteRegEx": "Schrijver.", "year": 2003}, {"title": "Efficient minimization of decomposable submodular functions", "author": ["Peter Stobbe", "Andreas Krause"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Stobbe and Krause.,? \\Q2010\\E", "shortCiteRegEx": "Stobbe and Krause.", "year": 2010}, {"title": "Finding the nearest point in a polytope", "author": ["Philip Wolfe"], "venue": "Mathematical Programming,", "citeRegEx": "Wolfe.,? \\Q1976\\E", "shortCiteRegEx": "Wolfe.", "year": 1976}], "referenceMentions": [], "year": 2017, "abstractText": "This paper investigates connections between discrete and continuous approaches for decomposable submodular function minimization. We provide improved running time estimates for the state-of-the-art continuous algorithms for the problem using combinatorial arguments. We also provide a systematic experimental comparison of the two types of methods, based on a clear distinction between level-0 and level-1 algorithms.", "creator": "LaTeX with hyperref package"}}}