{"id": "1704.01886", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Apr-2017", "title": "Landmark Guided Probabilistic Roadmap Queries", "abstract": "A landmark based heuristic is investigated for reducing query phase run-time of the probabilistic roadmap (\\PRM) motion planning method. The heuristic is generated by storing minimum spanning trees from a small number of vertices within the \\PRM graph and using these trees to approximate the cost of a shortest path between any two vertices of the graph. The intermediate step of preprocessing the graph increases the time and memory requirements of the classical motion planning technique in exchange for speeding up individual queries making the method advantageous in multi-query applications. This paper investigates these trade-offs on \\PRM graphs constructed in randomized environments as well as a practical manipulator simulation.We conclude that the method is preferable to Dijkstra's algorithm or the ${\\rm A}^*$ algorithm with conventional heuristics in multi-query applications. The paper's abstract is provided in the text at the end of this article.", "histories": [["v1", "Thu, 6 Apr 2017 15:16:03 GMT  (5631kb,D)", "http://arxiv.org/abs/1704.01886v1", "7 Pages"]], "COMMENTS": "7 Pages", "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["brian paden", "yannik nager", "emilio frazzoli"], "accepted": false, "id": "1704.01886"}, "pdf": {"name": "1704.01886.pdf", "metadata": {"source": "CRF", "title": "Landmark Guided Probabilistic Roadmap Queries", "authors": ["Brian Padena", "Yannik Nagera", "Emilio Frazzolia"], "emails": ["padenb@ethz.ch).", "ynager@ethz.ch).", "emilio.frazzoli@ethz.ch)."], "sections": [{"heading": null, "text": "I. INTRODUCTION\nThe probabilistic roadmap (PRM) [1] is a cornerstone of robot motion planning. It is widely used in practice or as the foundation for more complex planning algorithms. The method is divided into two phases: the PRM graph is first constructed followed by, potentially multiple, shortest path queries on this graph to solve motion planning problems. For a single motion planning query, a feasibility checking subroutine executed repeatedly during PRM construction dominates run-time. However, once the PRM is constructed it can be reused for multiple motion planning queries or modified slightly according to minor changes in the environment. Applicability to multi-query problems is one of the advantages of the PRM over tree-based planners such as Rapidly exploring Random Trees (RRT) [2] and Expansive Space Trees (EST) [3] which are tailored to single-query problems.\nRecent efforts have focused on fine tuning various aspects of PRM-based motion planning for real-time applications. Highly parallelized feasibility checking using FPGAs was recently developed in [4] to alleviate this computational bottleneck during the construction phase. The sparse roadmap spanner was introduced in [5] to reduce memory required to store the PRM and speed up the query phase by keeping only a sparse subgraph with near-optimality properties.\nIn this paper we examine the effectiveness of a landmark based admissible heuristic for reducing the running time of the query phase of the PRM. The landmark heuristic was originally developed for vehicle routing problems in road networks [6] where many shortest path queries are solved on a single graph. In theory, any amount of time spent preprocessing the graph is negligible in comparison to the\na The authors are with The Institute for Dynamic Systems and Control at ETH (email: {padenb,ynager,emilio.frazzoli}@ethz.ch).\nb The first two authors made equal contributions to this work.\ntime spent solving shortest path queries if sufficiently many queries must be solved. This observation suggests solving the all-pairs shortest path problem in order to answer each routing problem in constant time with respect to graph size. However, the memory required to store a solution to the all-pairs shortest is prohibitive for large road networks. The landmark heuristic provides a trade-off between memory requirements and query times by solving a small number of single-source shortest path problems and using their solutions to construct an effective heuristic for a particular graph.\nThis investigation is inspired by the similarities between road networks and the PRM; multiple path queries are solved on both graphs and both graphs are, in practice, too large to store an all pairs shortest path solution in memory.\nA useful feature of the landmark heuristic is that it can be used together with the sparse roadmap spanner and FPGAbased collision checking for a compounded speedup over a standard PRM implementation. Based on the results presented in this paper, we conclude that the landmark heuristic is effective on PRM graphs; solving shortest path queries as much as 20 times faster than Dijkstra\u2019s algorithm and twice as fast as the Euclidean distance-based heuristic in cluttered environments. The downside to the approach is that constructing the heuristic requires preprocessing the graph which adds to the computation time required before the PRM can be used for motion planning queries.\nAn overview of the motion planning problem is presented in Section II, followed by a review of the build and query phases of the PRM method. Section III introduces the landmark heuristic, discusses its admissibility and the complexity of its construction, and illustrates its utility with a simple shortest path problem. However, to better understand the effectiveness of the landmark heuristic in general, we construct randomized environments with a quantifiable degree of clutter and run numerous motion planning queries on these environments to obtain the average case performance. The environment construction and experimental results are presented in Section IV. In Section V we evaluate the landmark heuristic on a simulation of the Kinova Jaco robotic manipulator and find the landmark heuristic to be effective on realistic robot models. Lastly, we conclude with a discussion of our experimental observations in Section VI."}, {"heading": "II. MOTION PLANNING PROBLEM", "text": "The following optimal motion planning problem will be addressed: Let Xfree be an open, bounded subset of Rd, and \u0393 the set of continuous curves from [0, 1] to Rn. Then let \u0393free be the subset of \u0393 whose image is contained in Xfree. The cost objective is a function c : \u0393\u2192 [0,\u221e) that assigns a\nar X\niv :1\n70 4.\n01 88\n6v 1\n[ cs\n.R O\n] 6\nA pr\n2 01\n7\ncost to each curve in Rd. The cost function must be additive in the sense that if two curves \u03b31,2 \u2208 \u0393 satisfy \u03b31([0, 1]) \u2282 \u03b32([0, 1]) then c(\u03b31) \u2264 c(\u03b32).\nAn individual motion planning query on Xfree consists of finding a curve \u03b3\u2217 \u2208 \u0393free from an initial state x0 \u2208 Xfree to a goal state xg \u2208 Xfree. That is, \u03b3\u2217(0) = x0 and \u03b3\u2217(1) = xg . The subset of curves in \u0393free which satisfy these additional endpoint constraints are denoted \u0393sol. In addition to finding a curve in \u0393sol, we would like a curve \u03b3\u2217 which approximately minimizes the cost objective,\nc(\u03b3\u2217) < inf \u03b3\u2208\u0393sol (c(\u03b3)) + \u03b5, (1)\nfor a fixed \u03b5 > 0. An approximate minimization is often used for two reasons: the first is that the problem may not admit a minimum, and second, without further assumptions on the cost objective and geometry of Xfree there are no practical techniques available for obtaining exact solutions when they exist."}, {"heading": "A. Probabilistic Roadmaps", "text": "The set \u0393free has infinite dimension so the conventional approach to obtaining approximate solutions to motion planning problems is to construct a graph on Xfree whose vertices are points in Xfree. To avoid confusion with curves on Xfree, a path is a sequence of vertices in a graph {xi} such that (xi, xi+1) is an edge in the graph. Curves in \u0393free are approximated using paths in the graph by associating each edge of the graph with the line segment between the two vertices making up that edge. The PRM method falls into this category of approximations to \u0393free.\nThe PRM\u2217 method [7] is a popular variation of the PRM because it generates a sparse graph with the following property: if x0 and xg belong to a connected subset of Xfree, then for any fixed \u03b5 > 0, the probability that the PRM\u2217 graph contains a curve \u03b3\u0302 \u2208 \u0393free satisfying\nc(\u03b3\u0302) < inf \u03b3\u2208\u0393sol (c(\u03b3)) + \u03b5,\n\u2016\u03b3\u0302(0)\u2212 x0\u2016 < \u03b5, \u2016\u03b3\u0302(1)\u2212 xg\u2016 < \u03b5,\n(2)\nconverges to 1 as the number of vertices is increased."}, {"heading": "B. Graph Construction Phase", "text": "The construction phase of the PRM\u2217 method is summarized in Algorithm 1. The nearest(r, x, VPRM) subroutine returns the points v \u2208 VPRM\\{x} such that \u2016x\u2212v\u2016 < r. The subroutine sample(Xfree) in Algorithm 1 returns a randomly sampled point from the uniform distribution supported on Xfree. The subroutine collisionFree(x, v) returns true if the line segment connecting x to v is an element of \u0393free and false otherwise. In reference to line 2 of Algorithm 1, \u00b5 is the Legesgue measure on Rd, and B1(0) is the ball of radius 1 centered at 0.\nAlgorithm 1 PRM\u2217\n1: VPRM \u2190 \u2205; EPRM \u2190 \u2205 2: r = ( (2 + 2/d) ( \u00b5(Xfree) \u00b5(B1(0)) )( log(n) n ))1/d 3: for i = 1, . . . , n 4: VPRM \u2190 VPRM \u222a {sample(Xfree)} 5: for x \u2208 VPRM 6: U \u2190 nearest(r, x, VPRM) 7: for v \u2208 U \\ {x} 8: if collisionFree(x, v) 9: EPRM = EPRM \u222a {(x, v)}\n10: return (VPRM, EPRM)"}, {"heading": "C. Motion Planning Query Phase", "text": "After construction, paths in the graph (VPRM, EPRM) can be used to solve motion planning queries. One subtlety is that the probability of x0 and xg being present in the PRM graph is zero. There are a number of practical ways to resolve this issue, but to keep the exposition as concise as possible we will simply select the nearest vertex x\u03030 \u2208 VPRM to x0 and x\u0303g \u2208 VPRM to xg as an approximation in light of (2).\nOnce initial and final states x\u03030 and x\u0303g are selected, the motion planning query reduces to a shortest path problem on the PRM graph with edge weights determined by the cost of the line segments between vertices of the graph.\nAlgorithm 2 summarizes the A\u2217 algorithm for finding a shortest path in the PRM graph from x\u03030 to x\u0303g . The function parent : VPRM \u2192 VPRM \u222a {NULL} is used to keep track of the shortest path from x\u03030 to each vertex examined by the algorithm. Initially, parent maps all vertices of the graph to NULL, but is redefined in each iteration of the algorithm as shorter paths from x\u03030 to vertices in the graph are found. The function label : VPRM \u2192 [0,\u221e] maps each vertex to the cost of the shortest known path reaching that vertex from x\u03030. The function label initially maps all vertices to \u221e, but is updated at each iteration with the cost of newly discovered paths.\nA set Q of vertices represents a priority queue. The distinguishing feature of the A\u2217 algorithm is the ordering of vertices in the priority queue according to the labeled cost of the vertex plus a heuristic estimate of the remaining cost to reach the goal h : VPRM \u2192 [0,\u221e]. The subroutine pop(Q) returns a vertex x \u2208 Q such that\nx \u2208 argmin \u03bd\u2208Q {label(\u03bd) + h(\u03bd)} (3)\nThe heuristic h is called admissible if it never overestimates the cost to reach the goal from a particular vertex. The A\u2217 algorithm is guaranteed to return the shortest path from x\u03030 if the heuristic in equation (3) is admissible.\nThe pathToRoot subroutine returns the sequence of vertices {vi}i=1,...,N , terminating at vN = x\u03030, generated by the recursion\nvi+1 = parent(vi), v1 = x\u0303g, (4)\nIf pathToRoot is evaluated in Algorithm 2, then its output is a shortest path from x\u03030 to x\u0303g .\nFor graphs with nonnegative edge-weights the heuristic h(x) = 0 for all x \u2208 VPRM is clearly admissible. In this special case, the A\u2217 algorithm is equivalent to Dijkstra\u2019s algorithm. However, the more closely h underestimates the optimal cost from each vertex to x\u0303g the fewer iterations required by the A\u2217 algorithm to find the shortest path from x\u03030 to x\u0303g . Therefore, it is desirable to use a heuristic which estimates the optimal cost to reach the goal as closely as possible.\nAlgorithm 2 The A\u2217 algorithm 1: Q\u2190 x\u03030; 2: label(x\u03030)\u2190 0 3: while Q 6= \u2205 4: v \u2190 pop(Q) 5: if v = x\u0303g 6: return pathToRoot(xg) 7: S \u2190 neighbors(v) 8: for w \u2208 S 9: if label(v) + cost(v, w) < label(w) 10: label(w)\u2190 label(v) + cost(v, w) 11: parent(w)\u2190 v 12: Q\u2190 Q \u222a {w} 13: return NO SOLUTION\nWhen the cost functional is simply the length of the path, as in equation (5), the canonical heuristic is the Euclidean distance between x\u03030 to x\u0303g which is the length of the optimal path in the absence of obstacles.\nc(\u03b3) = \u222b 1 0 \u2016\u03b3\u2032(t)\u20162 dt (5)\nThe Euclidean distance heuristic is specific to shortest path objectives, and may not be admissible for cost functionals other than (5)."}, {"heading": "III. THE LANDMARK HEURISTIC", "text": "The landmark heuristic is tailored to a particular graph and requires preprocessing the graph before it can be used in the A\u2217 algorithm. The resulting heuristic is admissible regardless of cost functional and environment making it a very general approach to obtaining an admissible heuristic.\nThe idea behind the landmark heuristic is as follows: Let d : VPRM \u00d7 VPRM \u2192 [0,\u221e] be the function which returns the cost of a shortest path from one vertex of the graph to another; taking the value \u221e if no path exists. It follows from the definition that d satisfies the triangle inequality. Consider a vertex xl \u2208 VPRM that will represent a landmark. Rearranging the triangle inequality with xl and x\u0303g yields\n|d(x, xl)\u2212 d(xl, x\u0303g)| \u2264 d(x, x\u0303g) \u2200x \u2208 VPRM. (6)\nThus, the left hand side of (6) is a lower bound on cost of the shortest path to x\u0303g . While computing d explicitly would require solving the all-pairs shortest path problem, only the solution to the single-source shortest path problem from x\u0303l is required to evaluate (6).\nWhen the lower bound in (6) is evaluated at a vertex x that lies on or near to the shortest path from xl to x\u0303g\nor vice-versa it provides a surprisingly close estimate of the minimum cost path from x to x\u0303g . Figure 1 illustrates this lower bound. However, obtaining an effective heuristic for all origin-destination pairs requires having a collection of landmarks Vl \u2282 VPRM. The landmark heuristic then leverages (6) for each landmark:\nh(x, xg) = max xl\u2208Vl\n{|d(x, xl)\u2212 d(xl, x\u0303g)|}. (7)\nTo simplify the analysis presented in this paper, each landmark is an i.i.d. random variable selected from the uniform distribution on VPRM. However, other selection rules can be used to improve the heuristic."}, {"heading": "A. Complexity of the Landmark Heuristic", "text": "Generating the function d(\u00b7, xl) for an individual landmark requires solving a single-source shortest path problem which can be accomplished with Dijkstra\u2019s algorithm in O(|VPRM| log(|VPRM|)) time1 where | \u00b7 | denotes the cardinality of a set. Thus, the time complexity of constructing the heuristic is in O(|Vl| \u00b7 |VPRM| log(|VPRM|)). From this observation it is clear that this heuristic is only useful in instances where the number of motion planning queries that will be evaluated on the PRM graph will be greater than |Vl| since this many shortest path queries can be solved in the time required to construct the heuristic. Then evaluating the landmark heuristic (7) requires looking up the optimal cost to a landmark 2 \u00b7 |Vl| times so the complexity of (7) is linear in the number of landmarks.\nStoring the cost of the shortest path to each vertex from a landmark for use in (7) requires O(|VPRM|) memory per landmark for a total memory requirement in O(|Vl|\u00b7|VPRM|).\nThe next question is how many landmarks should be used? A natural choice is to select a fixed fraction of the PRM vertices to be landmarks. That is, |Vl| = \u03ba \u00b7 |VPRM| for some constant \u03ba. This results in O(|VPRM|2) space required to store the heuristic\u2019s lookup tables in memory. However, with just than 16 landmarks, the landmark heuristic has been observed to speed up routing queries by a factor of 9 to 16 on city to continent-scale road networks. On a PRM with a shortest path objective, this observation can be made precise as stated in the next result.\n1This assumes the PRM graph is constructed using Algorithm 1 which has O(|VPRM| log(|VPRM|) edges [7].\nLemma 1. If the number of landmarks relative to the number of vertices is given by |Vl| = \u03bb \u00b7 |VPRM| for \u03bb \u2208 (0, 1], then\nlim |VPRM|\u2192\u221e h(x, xg) = d(x, xg), (8)\nalmost surely.\nThe proof can be found in the appendix. With increasing graph size and an arbitrarily small fraction of vertices assigned to landmarks, the landmark heuristic will converge to the solution of the all-pairs shortest path problem."}, {"heading": "B. Demonstration of the Landmark Heuristic", "text": "To demonstrate the advantages of using the landmark heuristic, it was compared with Dijkstra\u2019s algorithm and A\u2217 with the Euclidean distance heuristic in a bug-trap environment. A PRM was constructed in the bug trap environment according to Algorithm 1 with a density of 1000 vertices per unit area for a total of 69, 272 vertices. The Landmark heuristic was then constructed with 100 landmarks (0.14% of vertices) obtained by randomly sampling from the vertices of the graph.\nFigure 2 shows the environment and vertices expanded by the A\u2217 algorithm using Euclidean distance as a heuristic and the landmark heuristic. The A\u2217 algorithm with Euclidean distance heuristic required 58, 145 iterations and 351ms to find the shortest path; a marginal difference in performance in comparison to the 69, 180 iterations and 334ms required by Dijkstra\u2019s algorithm. In contrast, the A\u2217 algorithm with the landmark heuristic required only 3, 338 iterations and 49ms to find the shortest path.\nThe results of this demo can be reproduced with the implementation of the landmark heuristic available in [8]."}, {"heading": "IV. EVALUATION IN RANDOMIZED ENVIRONMENTS", "text": "Environments with randomly placed obstacles provides a simple and easily reproducible benchmark for motion planning algorithms [9], [10]. In this paper, the degree of clutter in these randomly generated environments is quantified as the probability of the line segment connecting two randomly sampled points being contained in Xfree."}, {"heading": "A. Environment Generation", "text": "A Poisson forest with intensity \u03bb of circular obstacles with radius r is used as a random environment This is simulated over a sample window S = [\u22121, 1]2 by sampling the number of obstacles N from the Poisson distribution\nfN (n) = (\u03bb\u00b5(S))ne\u2212\u03bb\u00b5(S)\nn! , (9)\nand then placing these obstacles randomly by sampling from uniform distribution on S. The subset of S occupied by the circular obstacles is denoted Xobs. Then we select Xfree = [\u22120.5, 0.5]2\\Xobs. Embedding Xfree in S simplifies subsequent calculations by eliminating boundary effects of the sample window.\nLet Z1 and Z2 be independent random variables with the uniform distribution on Xfree, and let clear denote the event that the line segment connecting Z1 and Z2 remains in Xfree.\nThe next derivation relates the obstacle intensity \u03bb to the marginal probability P(clear). Observe that a line segment intersects a circular obstacle of radius r if and only if the circle of radius r swept along this line segment contains the obstacle center. If the obstacle is placed by sampling from the uniform distribution on S, the probability of collision is simply the ratio of the swept area of the circle along the line segment and the area of S. Thus, conditioned on the number of obstacles N and the points Z1, Z2, the probability of clear is\nP(clear|N,Z1, Z2) = ( \u00b5(S)\u2212 \u03c0r2 \u2212 2r\u2016Z1 \u2212 Z2\u2016\n\u00b5(S)\n)N .\n(10) Then the marginal probability P(clear) for a given obstacle intensity \u03bb can be calculated by combining (9) and (10) to obtain\nP (clear) =\u2211 n\u2208N \u222b Xfree \u222b Xfree P (clear|n,z1,z2)fN (n) (\u00b5(Xfree))2 \u00b5(dz1)\u00b5(dz2).\n(11)\nIn all of the numerical experiments of the next section random environments with obstacle radius r = 0.05 were used."}, {"heading": "B. Numerical Experiments", "text": "Experiments were designed to evaluate how the effectiveness of the landmark heuristic varies with with the parameter P(clear) and to validate Lemma 1. To facilitate obtaining the results in a reasonable time, experiments were run in parallel on the central high-performance cluster EULER (Erweiterbarer, Umweltfreundlicher, Leistungsf\u00e4higer ETHRechner) of ETH Z\u00fcrich. Each compute node consists of two 12-Core Intel Xeon E5-2680 processors with clock rates varying between 2.5-3.5 GHz.\nIn the first set of trials a single random environment was sampled with P(clear) = 0.05. Three PRM graphs were constructed on this environment with 40,000, 60,000 and 80,000 vertices. On each PRM, 700 landmark heuristics were constructed, 100 each for landmark quantities |Vl| \u2208 {10, 30, 50, 70, 90, 110, 130}. Then for each landmark heuristic, a random shortest path query is solved using A\u2217 with the landmark heuristic. In the second set of trials, 20 logarithmically spaced values for the parameter P(clear) from 0.01 to 1.0 were selected. For each of these values 100 random environments were generated according to the construction outlined in Section IV-A. A PRM with 100,000 vertices per unit area was constructed on each environment with 100, 000 vertices per unit area. Then for each PRM, the 9 landmark heuristics were constructed with landmark quantities |Vl| \u2208 {10, 30, 50, 70, 90, 110, 130, 150, 170}. Finally, for each of the 9 landmark heuristics, 100 shortest path queries were evaluated on each PRM using A\u2217."}, {"heading": "C. Results", "text": "The first experiment, summarized in Figure 4, revealed how the effectiveness of the landmark heuristic varied with the fraction of vertices assigned to landmarks as well as with varying graph sizes. We observed a rapid reduction in iterations required to find a solution relative to Dijkstra\u2019s algorithm with just 0.2% of vertices assigned to landmarks. Secondly, the number of iterations required to find a solution with A\u2217 relative to that of Dijkstra\u2019s algorithm decreased with increasing graph size. This validates Lemma 1 since the number of iterations required by A\u2217 decreases with an improving estimate of the optimal cost to reach the goal.\nIn the second experiment we observed that the effectiveness of the Euclidean distance heuristic rapidly diminishes with increasing clutter, while the the landmark heuristic was much less sensitive to P(clear). This is summarized in Figure 5 where the landmark heuristic reduced the number of iterations required to find a solution by a factor greater than 20 in highly cluttered environments whereas the Euclidean distance heuristic reduced the number of iterations by less than a factor of 3.\nThis experiment also showed the diminishing returns of increasing the number of landmarks in terms of iteration\ntime. Recall that evaluating the landmark heuristic in (7) required checking the triangle equality for each landmark. In Figure 6 the average running time of the A\u2217 algorithm with the landmark heuristic reaches a minimum with with 50 landmarks."}, {"heading": "V. ROBOT MANIPULATOR EXAMPLE", "text": "To demonstrate suitability of the landmark-based heuristic for realistic manipulator models, we use a model of the six degree of freedom Jaco manipulator by Kinova Robotics. To simulate a complex planning task the arm must find a collision free motion through a window terminating with the end effector near the ground to simulate reaching for an object.\nThe landmark heuristic was implemented in the Open Motion Planning Library (OMPL) [11] and the problem was solved using the MoveIt [12] software tool. Two planning\nobjectives were considered for this problem, a shortest path objective and a minimum mechanical work objective. Motivation for using the shortest path objective is that the Euclidean distance is available as an admissible heuristic. On the other hand, minimizing the mechanical work required to execute the motion is a more natural objective that is likely similar to the motion a human would use for the task. The drawback to the latter objective is that there is no obvious heuristic to inform the A\u2217 search. Since the landmark heuristic is admissible regardless of the objective it was applicable for this objective.\nA 100, 000 vertex PRM was constructed followed by the construction of a landmark heuristic with 50 landmarks. A minimum work path was computed in 48 iterations and 7.5ms using the landmark heuristic while Dijkstra\u2019s algorithm required 25, 207 iterations and 209.4ms. A shortest path was computed in 36 iterations and 5.6ms using the landmark heuristic while using the Euclidean distance required 1, 238 iterations and 14.4ms. Figure 7 illustrates the minimum energy motion that was computed."}, {"heading": "VI. CONCLUSION", "text": "The landmark heuristic is well known in the vehicle routing literature where it has been shown to reduce shortest path query times by a factor of 9 to 16 on city to continentscale road networks. Multi-query applications of the PRM in robot motion planning have striking similarities with vehicle routing problems in road networks in that shortest path queries are evaluated repeatedly on a large graph. The goal of this investigation was to evaluate the effectiveness of the landmark heuristic in robotic motion planning applications. Since the heuristic is based on preprocessing the PRM graph, our hypothesis was that its effectiveness would be independent of how densely cluttered the environment was\u2014 a useful feature for complex planning tasks.\nTo make this evaluation, we constructed a randomized environment parameterized by the probability that the line segment between two random points did not intersect obstacles. The average case relative performance of the landmark heuristic relative to the Euclidean distance heuristic was then measured through numerous randomized trials. Additionally, the performance of the landmark heuristic was evaluated on a manipulator arm model in a realistic planning scenario.\nThe landmark heuristic was empirically observed to be less sensitive to environment clutter than the Euclidean distance heuristic. For the range of parameters evaluated, the query times were reduced by a factor of 5 to 20 in comparison to Dijkstra\u2019s algorithm. Secondly, a theoretical analysis showed that, with a fixed fraction of PRM vertices assigned to be landmarks, the landmark heuristic converges to the optimal cost between any origin-destination pair with increasing graph size. This analysis was then validated in our experimental results.\nThe landmark heuristic is an effective heuristic for querying large PRM graphs. In particular, it is more effective than the Euclidean distance heuristic in all but nearly obstacle free problem instances. However, the preprocessing time\nrequired to construct the heuristic makes it only suitable for multi-query applications where the heuristic will be used repeatedly on the same graph. A valuable direction for future investigation would be an efficient update to the heuristic when small changes are made to the PRM as a result of changes in the workspace.\nAPPENDIX\nThe proof of Lemma 1 requires some additional notation. The symbol \u00b5 denotes the Lebesgue measure on Rd so that the uniform probability measure of a measurable subset S of Xfree is given by \u00b5(S)/\u00b5(Xfree). Since each landmark is an i.i.d. random variable with the uniform distribution on Xfree, the set of landmarks {l1, ..., l|Vl|} can be viewed as a random variable on the product space, denoted X |Vl|free . The probability of li \u2208 Si for subsets Si of Xfree is given by the product measure m:\nP ( {l1, ...l|Vl|} \u2208 S1 \u00d7 ...\u00d7 S|Vl| ) = m ( S1 \u00d7 ...\u00d7 S|Vl| ) = \u220f|Vl| i=1 \u00b5(Si) \u00b5(Xfree)\n(12) Next, an -net on Xfree is a subset {z1, ..., zk} of Xfree\nsuch that 1) Xfree \u2282 \u22c3M i=1B (zi),\n2) B /2(zi) \u2229B /2(zj) = \u2205 \u2200i 6= j. Based on these two properties it is clear that the number of points k making up an -net on Xfree is bounded by\n\u00b5(Xfree) \u00b5(B (\u00b7)) \u2264 k \u2264 \u00b5(Xfree) \u00b5(B /2(\u00b7)) . (13)\nObserve that not every B (zi) \u2229 Xfree is convex since it may intersect the boundary of Xfree. The the index set K \u2282 {1, ..., k} will identify open balls of the -net which have a convex intersection with Xfree. As the -net becomes finer, a greater fraction of points will lie on the interior of Xfree with a distance to the boundary greater than so\nlim \u21920 \u22c3 i\u2208K B (zi) = Xfree. (14)\nProof (Lemma 1). Consider the -net described above with = r/2, half the connection radius of the PRM. Note that every vertex in Br/2(zi) is connected by a line segment for i \u2208 K.\nThe probability that the landmarks {l1, ..., l|Vl|} \u2229 Br/2(zi) = \u2205 for some i \u2208 K can be written as\nP ( (l1, ..., l|Vl|) \u2208 \u22c3 i\u2208K(B c r/2(zi)) |Vl| )\n\u2264 \u2211 i\u2208Km((B c r/2(zi)) |Vl|)\n\u2264 \u00b5(Xfree)\u00b5(Br/4) \u00b7 ( 1\u2212 \u00b5(Br/2(zi))\u00b5(Xfree) )|Vl| (15)\nBy inserting the expression for r in Algorithm 1 and replacing |Vl| with \u03bb \u00b7 |VPRM|, the last expression in (15) simplifies to\n\u03b1 \u00b7 |VPRM| log(|VPRM|)\n\u00b7 (\n1\u2212 \u03b2 \u00b7 log(|VPRM|) |VPRM|\n)\u03bb\u00b7|VPRM| , (16)\nfor constants \u03b1, \u03b2 \u2208 (0, 1) that depend only on the dimension d of Xfree. One can readily verify that this expression converges to zero as |VPRM| \u2192 \u221e. Thus, the probability that there is at least one landmark in each Br/2(zi) for i \u2208 K converges 1. It follows that every vertex x \u2208 VPRM \u2229(\u22c3\ni\u2208KBr/2(zi) )\nhas a landmark as a neighbor almost surely as |VPRM| \u2192 \u221e. Therefore, for at least one landmark l\u2217, the optimal cost from x to l\u2217 satisfies d(x, l\u2217) \u2264 r. Thus,\nh(x, xg) = max xl\u2208Vl {|d(x, xl)\u2212 d(xl, x\u0303g)|} \u2265 d(x, l\u2217)\u2212 d(xg, l\u2217)\n(17)\nExpanding d(x, l\u2217) with the triangle inequality between x, l\u2217, and xg yields\nh(x, xg) \u2265 d(x, xg)\u2212 d(xg, xn)\u2212 d(xg, xn) \u2265 d(x, xg)\u2212 2r\n(18)\nCombining (6) and (17) we have d(x, xg)\u22122r \u2264 h(x, xg) \u2264 d(x, xg), and since r \u2192 0 as |VPRM| \u2192 \u221e we obtain\nlim |VPRM|\u2192\u221e h(x, xg) = d(x, xg), (19)\non \u22c3 i\u2208KBr/2(zi). The desired result (8) then follows in light of (14)."}], "references": [{"title": "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", "author": ["L.E. Kavraki", "P. Svestka", "J.-C. Latombe", "M.H. Overmars"], "venue": "IEEE transactions on Robotics and Automation, vol. 12, no. 4, pp. 566\u2013580, 1996.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1996}, {"title": "Randomized kinodynamic planning", "author": ["S.M. LaValle", "J.J. Kuffner"], "venue": "The International Journal of Robotics Research, vol. 20, no. 5, pp. 378\u2013400, 2001.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2001}, {"title": "Path planning in expansive configuration spaces", "author": ["D. Hsu", "J.-C. Latombe", "R. Motwani"], "venue": "Robotics and Automation, 1997. Proceedings., 1997 IEEE International Conference on, vol. 3, pp. 2719\u20132726, IEEE, 1997.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1997}, {"title": "Robot motion planning on a chip", "author": ["S. Murray", "W. Floyd-Jones", "Y. Qi", "D. Sorin", "G. Konidaris"], "venue": "Robotics: Science and Systems, 2016.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2016}, {"title": "Asymptotically near-optimal planning with probabilistic roadmap spanners", "author": ["J.D. Marble", "K.E. Bekris"], "venue": "IEEE Transactions on Robotics, vol. 29, no. 2, pp. 432\u2013444, 2013.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Computing the shortest path: A search meets graph theory", "author": ["A.V. Goldberg", "C. Harrelson"], "venue": "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pp. 156\u2013165, Society for Industrial and Applied Mathematics, 2005.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2005}, {"title": "Sampling-based algorithms for optimal motion planning", "author": ["S. Karaman", "E. Frazzoli"], "venue": "The International Journal of Robotics Research, vol. 30, no. 7, pp. 846\u2013894, 2011.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Landmark guided probabilistic roadmap queries", "author": ["B. Paden", "Y. Nager", "E. Frazzoli"], "venue": "2017. Available at: https://github.com/ bapaden/Landmark_Guided_PRM/releases/tag/v0.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2017}, {"title": "Batch informed trees (bit*): Sampling-based optimal planning via the heuristically guided search of implicit random geometric graphs", "author": ["J.D. Gammell", "S.S. Srinivasa", "T.D. Barfoot"], "venue": "2015 IEEE International Conference on Robotics and Automation (ICRA), pp. 3067\u2013 3074, IEEE, 2015.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "High-speed flight in an ergodic forest", "author": ["S. Karaman", "E. Frazzoli"], "venue": "Robotics and Automation (ICRA), 2012 IEEE International Conference on, pp. 2899\u20132906, IEEE, 2012.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "The Open Motion Planning Library", "author": ["I.A. \u015eucan", "M. Moll", "L.E. Kavraki"], "venue": "IEEE Robotics & Automation Magazine, vol. 19, pp. 72\u201382, December 2012. http://ompl.kavrakilab.org.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2012}, {"title": "Moveit", "author": ["I.A. Sucan", "S. Chitta"], "venue": "2016.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "The probabilistic roadmap (PRM) [1] is a cornerstone of robot motion planning.", "startOffset": 32, "endOffset": 35}, {"referenceID": 1, "context": "Applicability to multi-query problems is one of the advantages of the PRM over tree-based planners such as Rapidly exploring Random Trees (RRT) [2] and Expansive Space Trees (EST) [3] which are tailored to single-query problems.", "startOffset": 144, "endOffset": 147}, {"referenceID": 2, "context": "Applicability to multi-query problems is one of the advantages of the PRM over tree-based planners such as Rapidly exploring Random Trees (RRT) [2] and Expansive Space Trees (EST) [3] which are tailored to single-query problems.", "startOffset": 180, "endOffset": 183}, {"referenceID": 3, "context": "Highly parallelized feasibility checking using FPGAs was recently developed in [4] to alleviate this computational bottleneck during the construction phase.", "startOffset": 79, "endOffset": 82}, {"referenceID": 4, "context": "The sparse roadmap spanner was introduced in [5] to reduce memory required to store the PRM and speed up the query phase by keeping only a sparse subgraph with near-optimality properties.", "startOffset": 45, "endOffset": 48}, {"referenceID": 5, "context": "The landmark heuristic was originally developed for vehicle routing problems in road networks [6] where many shortest path queries are solved on a single graph.", "startOffset": 94, "endOffset": 97}, {"referenceID": 0, "context": "The following optimal motion planning problem will be addressed: Let Xfree be an open, bounded subset of R, and \u0393 the set of continuous curves from [0, 1] to R.", "startOffset": 148, "endOffset": 154}, {"referenceID": 0, "context": "The cost function must be additive in the sense that if two curves \u03b31,2 \u2208 \u0393 satisfy \u03b31([0, 1]) \u2282 \u03b32([0, 1]) then c(\u03b31) \u2264 c(\u03b32).", "startOffset": 87, "endOffset": 93}, {"referenceID": 0, "context": "The cost function must be additive in the sense that if two curves \u03b31,2 \u2208 \u0393 satisfy \u03b31([0, 1]) \u2282 \u03b32([0, 1]) then c(\u03b31) \u2264 c(\u03b32).", "startOffset": 100, "endOffset": 106}, {"referenceID": 6, "context": "The PRM\u2217 method [7] is a popular variation of the PRM because it generates a sparse graph with the following property: if x0 and xg belong to a connected subset of Xfree, then for any fixed \u03b5 > 0, the probability that the PRM\u2217 graph contains a curve \u03b3\u0302 \u2208 \u0393free satisfying", "startOffset": 16, "endOffset": 19}, {"referenceID": 6, "context": "1This assumes the PRM graph is constructed using Algorithm 1 which has O(|VPRM| log(|VPRM|) edges [7].", "startOffset": 98, "endOffset": 101}, {"referenceID": 7, "context": "The results of this demo can be reproduced with the implementation of the landmark heuristic available in [8].", "startOffset": 106, "endOffset": 109}, {"referenceID": 8, "context": "Environments with randomly placed obstacles provides a simple and easily reproducible benchmark for motion planning algorithms [9], [10].", "startOffset": 127, "endOffset": 130}, {"referenceID": 9, "context": "Environments with randomly placed obstacles provides a simple and easily reproducible benchmark for motion planning algorithms [9], [10].", "startOffset": 132, "endOffset": 136}, {"referenceID": 10, "context": "The landmark heuristic was implemented in the Open Motion Planning Library (OMPL) [11] and the problem was solved using the MoveIt [12] software tool.", "startOffset": 82, "endOffset": 86}, {"referenceID": 11, "context": "The landmark heuristic was implemented in the Open Motion Planning Library (OMPL) [11] and the problem was solved using the MoveIt [12] software tool.", "startOffset": 131, "endOffset": 135}], "year": 2017, "abstractText": "A landmark based heuristic is investigated for reducing query phase run-time of the probabilistic roadmap (PRM) motion planning method. The heuristic is generated by storing minimum spanning trees from a small number of vertices within the PRM graph and using these trees to approximate the cost of a shortest path between any two vertices of the graph. The intermediate step of preprocessing the graph increases the time and memory requirements of the classical motion planning technique in exchange for speeding up individual queries making the method advantageous in multi-query applications. This paper investigates these trade-offs on PRM graphs constructed in randomized environments as well as a practical manipulator simulation. We conclude that the method is preferable to Dijkstra\u2019s algorithm or the A\u2217 algorithm with conventional heuristics in multi-query applications.", "creator": "LaTeX with hyperref package"}}}