{"id": "1705.00594", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-May-2017", "title": "A System for Accessible Artificial Intelligence", "abstract": "While artificial intelligence (AI) has become widespread, many commercial AI systems are not yet accessible to individual researchers nor the general public due to the deep knowledge of the systems required to use them. We believe that AI has matured to the point where it should be an accessible technology for everyone. We present an ongoing project whose ultimate goal is to deliver an open source, user-friendly AI system that is specialized for machine learning analysis of complex data in the biomedical and health care domains. We discuss how genetic programming can aid in this endeavor, and highlight specific examples where genetic programming has automated machine learning analyses in previous projects.\n\n\n\n\nThis project is free and open source. This is open source. You can donate here.", "histories": [["v1", "Mon, 1 May 2017 17:11:48 GMT  (2999kb,D)", "http://arxiv.org/abs/1705.00594v1", "14 pages, 5 figures, submitted to Genetic Programming Theory and Practice 2017 workshop"], ["v2", "Thu, 10 Aug 2017 17:14:14 GMT  (2550kb,D)", "http://arxiv.org/abs/1705.00594v2", "14 pages, 5 figures, submitted to Genetic Programming Theory and Practice 2017 workshop"]], "COMMENTS": "14 pages, 5 figures, submitted to Genetic Programming Theory and Practice 2017 workshop", "reviews": [], "SUBJECTS": "cs.AI cs.HC cs.NE", "authors": ["randal s olson", "moshe sipper", "william la cava", "sharon tartarone", "steven vitale", "weixuan fu", "patryk orzechowski", "ryan j urbanowicz", "john h holmes", "jason h moore"], "accepted": false, "id": "1705.00594"}, "pdf": {"name": "1705.00594.pdf", "metadata": {"source": "CRF", "title": "A System for Accessible Artificial Intelligence", "authors": ["Randal S. Olson", "Moshe Sipper", "William La Cava", "Sharon Tartarone", "Steven Vitale", "Weixuan Fu", "John H. Holmes", "Jason H. Moore"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "A central goal of artificial intelligence (AI) is to use computational hardware and software to solve complex problems in a human-competitive manner [9]. The practicality of this goal is that AI can be tasked with solving problems or performing functions that humans cannot perform or simply don\u2019t have time for. Most AI methodologies can be grouped into top-down approaches, wherein cognition is viewed as a high-level phenomenon that is independent of the low-level details, or bottom-up approaches, which define basic computational building blocks such as artificial neurons that collectively give rise to \u201cemergent\u201d [29] intelligent behavior. The top-down approach has been difficult to realize given the inherent complexity of human cognition. However, the bottom-up has had some success owing to the availability of sophisticated algorithms such as genetic programming (GP) [10] and deep neural networks [6]. This is particularly true today with abundant and inexpensive high-performance computing, leading to many human-competitive success stories [9].\nar X\niv :1\n70 5.\n00 59\n4v 1\n[ cs\n.A I]\nMedical applications of AI have had a long history with both successes and failures. One of the early successes was the Mycin system, which was designed to predict the antibiotic that a patient with an infection should receive in the intensive care unit [2]. Mycin combined a knowledge base along with a set of rules implemented as part of an expert system. The system was demonstrated to be human-competitive, but was never put into clinical practice because of legal concerns and the time it took clinicians to enter the patient data required for Mycin to make the predictions. The field of AI has matured since Mycin was developed and, importantly, computing power has grown tremendously in parallel. Examples of modern AI successes include IBM\u2019s Watson, which beat the world champion of the game show Jeopardy [5]. The Watson AI system that won Jeopardy combined knowledge representation, information retrieval, natural language processing, and machine learning along with high-performance computing to access and exploit a knowledge base that included the Wikipedia text corpus. This was a milestone in AI because it showed that a computational system could compete with humans on difficult language processing tasks. Watson is now being marketed in the health care domain although the jury is still out on its effectiveness.\nCommercial AI systems such as Watson show potential but are not yet accessible to individual researchers nor the general public due the cost and the complexity of working with a team from IBM. It is our working hypothesis that,\nAI has matured to the point where it should be an accessible technology for everyone.\nDemocratization of AI will be important if we seek to integrate this exciting new technology into multiple different domains, as demonstrated by recent efforts such as Orange [4]. We describe here the early development stages of an open source and user-friendly AI system\u2014PennAI\u2014for machine learning analysis of complex data in the biomedical and health care domains. We focus our initial efforts on the classification of biomedical endpoints such as disease susceptibility. We describe in turn below each of the components of our AI system and then end with an example and a discussion of how we envision this system being used to solve complex biomedical problems. Further, we discuss how GP can aid in enhancing PennAI, and highlight specific examples where GP has automated machine learning analyses in previous work.\nThe components of PennAI include a human engine (i.e., the user); a userfriendly interface for interacting with the AI; a machine learning engine for data mining; a controller engine for launching jobs and keeping track of analytical results; a graph database for storing data and results (i.e., the memory); an AI engine for monitoring results and automatically launching or recommending new analyses; and a visualization engine to displaying results and analytical knowledge (Figure 1). This AI system provides a comprehensive set of integrated components for automated machine learning (AutoML), thus providing a data science assistant for generating useful results from large and complex data problems. PennAI is housed in the \u201cIdea Factory,\u201d a facility designed to facilitate\ncollaboration and promote new methods of communicating and presenting scientific innovation. The Idea Factory makes sophisticated data visualization and artificial intelligence analytics easy for users across the entire Penn community (Figure 2)."}, {"heading": "2 The Human Engine", "text": "The most important component of the proposed AI system is the user. Contrary to some claims that AI will replace human users, we see the human as an integral part of the discovery process and a partner with the AI. One way to view this partnership is with the human as the driver of the discovery process and the AI as the data science assistant. Thus, the AI provides an additional set of hands in a modern data science discovery environment that might include human teammates with expertise in computer science, statistics, and applied mathematics. We have previously suggested this idea of human-computer interaction that places the human user at the epicenter [22]. This idea has also previously been explored from the point of view of the user or domain expert [16].\nLangley [16] provides five important tips that are relevant to thinking about the relationship humans have with AI for data mining using machine learning. First, traditional machine learning notations are not easily communicated to\nscientists. This consideration is important because a machine learning model may not be interpretable by a user. Second, scientists often have initial models that should influence the discovery process. Domain-specific knowledge can be critical to the discovery process. Third, scientific datasets are often rare and difficult to obtain. It often takes years to collect and process the data before it can be analyzed. As such, it is important that the analysis is carefully planned and executed, and that any general feedback about the performance the learning process is not lost between studies. Fourth, scientists want models that move beyond description and provide explanations of the data. Explanation and interpretation are paramount to the user. Finally, scientists want computational assistance rather than a complete replacement of themselves. Langley [16] further suggests that users want interactive discovery environments that help them understand their data while at the same time giving them control over the modeling process. Collectively, these five lessons suggest that synergy between the user and the AI is critical. With this in mind, our proposed AI system includes a graphical user interface (GUI) that allows the user to easily launch analyses, view the results, and give the AI feedback about what results are useful or interesting."}, {"heading": "3 The Human-Computer Interaction Engine", "text": "As described above, a key component of PennAI is human-computer interaction. The first important feature is to make it easy for the user to directly launch machine learning analyses by choosing a method and its parameter settings from an intuitive push-button menu implemented through the web using JavaScript. The user can launch single analyses or, in an advanced mode, launch a grid search across multiple methods and parameter settings. The methods and the controller that keep track of these analyses is described below. Figures 3 and 4 show mockups of our GUI for uploading and viewing datasets for analysis and launching machine learning analyses on those datasets, respectively. Our JavaScript implementation is compatible with mobile devices, which allows the user to interact with the AI system from any Internet-connected device.\nThe second key feature of PennAI is the ability to toggle the AI on and off for automated analysis, shown in Figure 3. An AI toggle allows the user to turn the AI on and set parameters controlling the maximum number of runs the AI can launch, as well as the frequency of updates the user would like to receive by email or text message. The GUI also provides a simple thumbs up/down selection for each result received by PennAI, which provides feedback to PennAI that is incorporated into its expert knowledge system."}, {"heading": "4 The Machine Learning Engine", "text": "Our first application of PennAI is for data mining using machine learning in the biomedical domain. Here, we make use of an extensive open-source machine learning library in Python called scikit-learn [28]. Scikit-learn provides peer-reviewed implementations of several common supervised and unsupervised machine learning algorithms, data preprocessing methods, feature engineering and selection methods, hyperparameter optimization procedures, and more. To most users, scikit-learn is considered to be the standard machine learning library in Python.\nOf course, there are dozens of machine learning algorithms, preprocessors, etc. to choose from in scikit-learn, which can be overwhelming to a novice user. To simplify the algorithm selection process for PennAI users, we currently limit PennAI to six machine learning algorithms that we believe will handle most supervised classification use cases, shown in Table 1. We also limit the parameter choices for each algorithm to a handful of the most important parameters and parameter options, which makes it easier for users to choose a parameter configuration at the expense of algorithm customizability. An example of the interface to the Machine Learning Engine can be found in Figure 4, where only a handful of the most important parameters and parameter options are available for the k-Nearest Neighbors classification algorithm.\nIn an upcoming PennAI implementation, we will provide simplified descriptions of the machine learning algorithms and parameters so users can make use of the algorithms without fully understanding their implementation. For example, when using a random forest it is not necessary for the user to understand\nwhat tuning the n estimators parameter does to the model. Instead, it is more important for the user to understand that adding more decision trees to the random forest (i.e., increasing n estimators) improves model performance but increases training time, whereas removing decision trees from the random forest decreases model performance but decreases training time [7].\nOnce the Machine Learning Engine finishes training and evaluating a machine learning model, it stores the machine learning model, the model predictions, and an analysis of the model in the Graph Database Engine, which are used in the Visualization Engine (both described below)."}, {"heading": "5 The Controller Engine", "text": "The Controller Engine acts as the interface between the high-performance computing system and the user or AI. This component is hidden from the user but facilitates the automatic launching of jobs on a multi-CPU machine, computing cluster, or cloud computing system. The controller must not only coordinate the launching of jobs but also keep track of when they finish and deposit the results in the Graph Database Engine (described below) that serves as the memory of the system.\nFor the Controller Engine, we selected an open source package called the Future Gadget Lab (FGLab), which is available on GitHub1. FGLab functions as a server with individual runs launched as clients, called FGMachines. FGLab uses node.js to coordinate distributed jobs and uses MongoDB [3] as the backend database in the Graph Database Engine."}, {"heading": "6 The Graph Database Engine", "text": "Another key component of PennAI is a memory system that keeps track of every analysis that is run on each data set. We keep track of the details of the machine learning method, the parameter settings, the data set analyzed, and results such as the model, model error, and area under the receiver operating characteristic curve (AUC). These are all stored in a JSON file that is deposited in a MongoDB NoSQL database. The advantage of using a NoSQL database is that new\n1FGLab: https://github.com/Kaixhin/FGLab\ndata elements can be added without creating tables and without strict format specifications. This flexibility is important for the rapidly changing landscape of machine learning. MongoDB can also function as a graph database that allows the documents to be linked in a network according to shared index terms related to the analysis and data. This feature facilitates more complex semantic queries of the database, such as \u201cReturn the machine learning algorithm configurations that achieved the highest accuracy on any study involving prostate cancer.\u201d"}, {"heading": "6.1 Knowledge Base", "text": "The Graph Database Engine serves as the memory of PennAI and provides the raw materials for the AI to learn which methods and parameter settings are working better than others for particular kinds of problems. The initial knowledge base consists of results from a previously published benchmark of scikit-learn algorithms [24], in which 14 machine learning algorithms were run with full hyperparameter optimization on a suite of 165 supervised classification problems. The results are combined with meta-information about the datasets (e.g., number of features, number of instances, correlations between features, etc.) in order to allow the creation of a mapping from \u2018problem instance space\u2019, i.e. dataset meta-features and model performance, to \u2018learning space\u2019, i.e. machine learning algorithms and their parameters. This data can then be modelled to extract rules that represent the knowledge used by the Artificial Intelligence Engine to make informed analyses. The knowledge base will be updated with all future analyses."}, {"heading": "7 The Artificial Intelligence Engine", "text": "Each component described above provides the raw materials for the Artificial Intelligence Engine which then 1) searches the graph database for results related to one or more data sets, 2) performs statistical analysis comparing algorithms and their parameters, 3) combines facts and rules in an expert system to make new analysis recommendations, 4) communicates findings to the user, and 5) automatically launches new analyses using suggestions from the expert system. The first function uses the search capabilities of the MongoDB graph database to identify relevant machine learning results in the form of JSON files. All returned JSON files can be parsed to extract the machine learning algorithm, parameters, and information about the model performance. These results are collated in a tab-delimited file and a statistical analysis performed to determine the best algorithm configurations for certain problem types, similar to metalearning techniques [8].\nNew statistical results are used to populate the knowledge base of an expert system that has a set of decision rules provided by developers and advanced machine learning practitioners. This expert system is then used to make suggestions for additional analyses, for example by recommending better parameter settings or even entirely different machine learning algorithms that might\nbe better-suited for the user\u2019s dataset. The user can access these suggestions manually or PennAI can use the suggestions to automatically launch new jobs, thus continually growing the PennAI knowledge base. Essentially, the Artificial Intelligence Engine becomes a research assistant who tinkers with new ways of modeling the dataset and reports back to the user with their best findings."}, {"heading": "8 The Visualization Engine", "text": "Visualization will be critical for fostering the human-AI collaboration described above. The user will need to be able to see individual machine learning models and results as well as higher-level results from statistical analyses across machine learning runs. We extract visual results such as the receiver operating characteristic (ROC) curves and models to store in the graph database, as shown in Figure 5. PennAI will also generate heatmaps and other visualizations that summarize results across different machine learning methods and datasets. These higher-level visualizations will aid the user with making decisions about new manual analyses to launch and will help them assess how well the PennAI assistant is doing. These images will be linked to the datasets and results in the Graph Database Engine, and will thus be easily searchable."}, {"heading": "9 Discussion and Future Work", "text": "Thus far, we have described PennAI as a system that provides a simple interface for users to upload their datasets, launch machine learning analyses, view the\nresults of the analyses in an intuitive manner, and use those results to refine their machine learning analyses. We also described how PennAI will use a combination of expert knowledge from advanced machine learning practitioners and prior statistical knowledge of machine learning algorithm performance on datasets to recommend new analyses to the user, as well as launch its own analyses to later report to the user. In essence, the primary goal of PennAI is to provide an AI research assistant for its users. However, considering the name of this workshop and book\u2014Genetic Programming Theory and Practice\u2014one may be left wondering how GP can be incorporated into PennAI. In the following paragraphs, we will describe our plans for integrating GP into PennAI.\nThe first point of entry is to include GP as a machine learning option since a number of successful biomedical applications have been reported (e.g., [17\u2013 21, 34]). A GP system for classification based on multidimensional clustering [31] was recently demonstrated on biomedical classification problems [15] as a competitive alternative to traditional machine learning approaches. Recently GP has been proposed as a general feature engineering wrapper (FEW)2 in order to harness its feature learning capability to improve scikit-learn estimators, both for regression [13] and classification [14]. FEW allows GP to provide readable feature transformations to users while still utilizing existing modeling techniques for making predictions. As mentioned in Section 2, interpretation and explanatory power are important aspects of using AI for data mining, and therefore GP methods that produce concise models, e.g. by local search [11] or Pareto optimization [12], are important options to include. Further down the road, it could be possible for PennAI to allow advanced users to incorporate custom machine learning algorithms into PennAI by providing a scikit-learn formatted interface to their project (e.g. ellyn3). PennAI could then provide a \u201cbring your own learner\u201d type of service [1] to allow researchers to tackle complex data mining tasks with customized learning approaches, and incorporate the results into its knowledge base for improving future data science projects.\nBeyond using GP to perform the machine learning itself, recent work has shown that GP can also be harnessed to optimize a sequence of existing data analysis and machine learning operations on a dataset to maximize the predictive performance of the final machine learning model [30, 35]. For example, TPOT4 is an early prototype that uses GP to optimize a sequence of scikit-learn operations for both classification and regression problems [25\u201327], and has been shown to work quite well across a broad range of application domains ranging from epidemiological studies to image classification to time series prediction [23]. Given the general design of TPOT, the operations it optimizes over can be specialized for particular problem domains. As another example, the TPOT-MDR project [33] showed that TPOT can be specialized for genome-wide association studies (GWAS), and it outperforms several state-of-the-art modeling methods on both simulated and real-world GWAS problems because it considers a broad range of operations in with one another. As such, we view GP as a strong can-\n2http://lacava.github.io/few 3http://epistasislab.github.io/ellyn 4https://github.com/rhiever/tpot\ndidate for a future version of the PennAI Artificial Intelligence Engine, where the GP is seeded with the best known algorithm configurations and uses the core principles of GP (inheritance, mutation, and crossover)\u2014distributed over a high-performance computing cluster\u2014to improve the algorithm configurations from there. This brand of GP-based AI system would be useful for automatically launching new analyses, but less useful for recommending particular algorithm configurations to the user because GP does not provide a notion of the \u201cnext best\u201d solution to attempt.\nAnother offshoot of PennAI we are currently investigating is the use of a meta genetic algorithm to find parameters (population size, generation count, etc.) for a GP instance that work well, i.e., solve a given problem [32]. This meshes well with the idea that the AI of PennAI will aid non-machine-learning experts run complex algorithms, such as GP, without having to find or even understand every single parameter.\nUltimately, PennAI will likely be comprised of several disparate AI algorithms that use meta-data and meta-learning to improve the user experience and user productivity by suggesting machine learning algorithms and parameters, as well as providing other insights. As a result, we will be able to harness ensemble techniques to collate the advice given by the numerous AI algorithms.\nThe time is now to bring AI technology to anyone that wants to use it for big data analytics. The software and hardware technology exists and data has never been bigger, more complex, and more plentiful. PennAI will provide both machine learning and AI capability to both naive and expert users alike with a user-friendly web and smartphone-enabled interface. We see AI technology such as PennAI not as a replacement for the data scientist but rather as a data science assistant that can suggest analyses to the user or provide automatically generated results that are informed by previous analyses across different data sets. The user can take these results as-is or use them as inspiration in manual analyses. The democratization of AI is here."}, {"heading": "10 Acknowledgements", "text": "We thank Drs. Patryk Orzechowski and Ryan J. Urbanowicz for their helpful advice on the early stages of this project. This work was generously funded provided by the Perelman School of Medicine and the University of Pennsylvania Health System of the University of Pennsylvania. Additional funding was provided by National Institutes of Health grants AI116794, DK112217, ES013508, and TR001878."}], "references": [{"title": "Bring your own learner: A cloud-based, data-parallel commons for machine learning", "author": ["I. Arnaldo", "K. Veeramachaneni", "A. Song", "U.M. O\u2019Reilly"], "venue": "IEEE Computational Intelligence Magazine", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Rule-based expert systems: the MYCIN experiments of the Stanford Heuristic Programming Project", "author": ["B. Buchanan", "E. Shortliffe"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1984}, {"title": "MongoDB: The Definitive Guide", "author": ["K. Chodorow", "M. Dirolf"], "venue": "1st edn. O\u2019Reilly Media, Inc", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Orange: Data mining toolbox in python", "author": ["J. Dem\u0161ar", "T. Curk", "A. Erjavec", "\u010crt Gorup", "T. Ho\u010devar", "M. Milutinovi\u010d", "M. Mo\u017eina", "M. Polajnar", "M. Toplak", "A. Stari\u010d", "M. \u0160tajdohar", "L. Umek", "L. \u017dagar", "J. \u017dbontar", "M. \u017ditnik", "B. Zupan"], "venue": "Journal of Machine Learning Research", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Introduction to \u201cThis is Watson", "author": ["D.A. Ferrucci"], "venue": "IBM Journal of Research and Development 56(3.4),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "The Elements of Statistical Learning: Data Mining, Inference, and Prediction", "author": ["T.J. Hastie", "R.J. Tibshirani", "J.H. Friedman"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Algorithm selection via meta-learning", "author": ["A. Kalousis"], "venue": "Ph.D. thesis, Universite de Geneve", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Analyzing a decade of human-competitive (\u201chumie\u201d) winners: What can we learn", "author": ["K. Kannappan", "L. Spector", "M. Sipper", "T. Helmuth", "W. La Cava", "J. Wisdom", "O. Bernstein"], "venue": "Genetic Programming Theory and Practice XII,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Genetic programming: on the programming of computers by means of natural selection, vol", "author": ["J.R. Koza"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1992}, {"title": "Inference of compact nonlinear dynamic models by epigenetic local search", "author": ["W. La Cava", "K. Danai", "L. Spector"], "venue": "Engineering Applications of Artificial Intelligence 55,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2016}, {"title": "Automatic identification of wind turbine models using evolutionary multiobjective optimization", "author": ["W. La Cava", "K. Danai", "L. Spector", "P. Fleming", "A. Wright", "M. Lackner"], "venue": "Renewable Energy 87,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "A general feature engineering wrapper for machine learning using -lexicase survival", "author": ["W. La Cava", "J. Moore"], "venue": "European Conference on Genetic Programming,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2017}, {"title": "Ensemble representation learning: an analysis of fitness and survival for wrapper-based genetic programming methods. In: GECCO \u201917", "author": ["W. La Cava", "J.H. Moore"], "venue": "Proceedings of the Conference on Genetic and Evolutionary Computation", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2017}, {"title": "Genetic programming representations for multi-dimensional feature learning in biomedical classification", "author": ["W. La Cava", "S. Silva", "L. Vanneschi", "L. Spector", "J. Moore"], "venue": "European Conference on the Applications of Evolutionary Computation,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2017}, {"title": "Lessons for the Computational Discovery of Scientific Knowledge", "author": ["P. Langley"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2002}, {"title": "Development and evaluation of an open-ended computational evolution system for the genetic analysis of susceptibility to common human diseases", "author": ["J.H. Moore", "P.C. Andrews", "N. Barney", "B.C. White"], "venue": "European Conference on Evolutionary Computation, Machine Learning and Data Mining in Bioinformatics,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2008}, {"title": "Identification of Novel Genetic Models of Glaucoma Using the \u201cEMERGENT", "author": ["J.H. Moore", "C.S. Greene", "D.P. Hill"], "venue": "Genetic Programming-Based Artificial Intelligence System,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "Identification of novel genetic models of glaucoma using the emergent genetic programming-based artificial intelligence system", "author": ["J.H. Moore", "C.S. Greene", "D.P. Hill"], "venue": "Genetic Programming Theory and Practice XII,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Human- Computer Interaction in a Computational Evolution System for the Genetic Analysis of Cancer, pp. 153\u2013171", "author": ["J.H. Moore", "D.P. Hill", "J.M. Fisher", "N. Lavender", "L.C. Kidd"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}, {"title": "Exploring Interestingness in a Computational Evolution System for the Genome-Wide Genetic Analysis of Alzheimer\u2019s Disease, pp. 31\u201345", "author": ["J.H. Moore", "D.P. Hill", "A. Saykin", "L. Shen"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Genome-wide genetic analysis using genetic programming: The critical need for expert knowledge", "author": ["J.H. Moore", "B.C. White"], "venue": "Genetic Programming Theory and Practice IV,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2007}, {"title": "Evaluation of a Tree-based Pipeline Optimization Tool for Automating Data Science", "author": ["R.S. Olson", "N. Bartley", "R.J. Urbanowicz", "J.H. Moore"], "venue": "In: GECCO 2016,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2016}, {"title": "Pmlb: A large benchmark suite for machine learning evaluation and comparison", "author": ["R.S. Olson", "W. La Cava", "P. Orzeshowski", "J.H. Urbanowicz Ryan J Moore"], "venue": "arXiv e-print", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2017}, {"title": "Identifying and Harnessing the Building Blocks of Machine Learning Pipelines for Sensible Initialization of a Data Science Automation Tool. arXiv e-print", "author": ["R.S. Olson", "J.H. Moore"], "venue": null, "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2016}, {"title": "TPOT: A Tree-based Pipeline Optimization Tool for Automating Machine Learning", "author": ["R.S. Olson", "J.H. Moore"], "venue": "JMLR 64,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2016}, {"title": "Applications of Evolutionary Computation: 19th European Conference, EvoApplications 2016, Porto, Portugal, March 30\u2013April 1, 2016, Proceedings, Part I, chap. Automating Biomedical Data Science Through Tree-Based Pipeline Optimization, pp. 123\u2013137", "author": ["R.S. Olson", "R.J. Urbanowicz", "P.C. Andrews", "N.A. Lavender", "L.C. Kidd", "J.H. Moore"], "venue": null, "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2016}, {"title": "Scikit-learn: Machine learning in Python", "author": ["F. Pedregosa", "G. Varoquaux", "A. Gramfort", "V. Michel", "B. Thirion", "O. Grisel", "M. Blondel", "P. Prettenhofer", "R. Weiss", "V Dubourg"], "venue": "Journal of Machine Learning Research", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2011}, {"title": "Design, observation, surprise! a test of emergence", "author": ["E.M. Ronald", "M. Sipper", "M.S. Capcarr\u00e8re"], "venue": "Artificial Life 5(3),", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1999}, {"title": "RECIPE: A Grammar-Based Framework for Automatically Evolving Classification Pipelines", "author": ["A.G. de S\u00e1", "W.J.G. Pinto", "L.O.V. Oliveira", "G.L. Pappa"], "venue": "European Conference on Genetic Programming,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2017}, {"title": "Multiclass classification through multidimensional clustering", "author": ["S. Silva", "L. Mu\u00f1oz", "L. Trujillo", "V. Ingalalli", "M. Castelli", "L. Vanneschi"], "venue": "Genetic Programming Theory and Practice XIII,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2016}, {"title": "From MEGATON to RAS- CAL: Surfing the parameter space of genetic programming (2017)", "author": ["M. Sipper", "W. Fu", "K. Ahuja", "J.H. Moore"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2017}, {"title": "Toward the automated analysis of complex diseases in genome-wide association studies using genetic programming", "author": ["A. Sohn", "R.S. Olson", "J.H. Moore"], "venue": "arXiv e-print", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2017}, {"title": "Classification of oncologic data with genetic programming", "author": ["L. Vanneschi", "F. Archetti", "M. Castelli", "I. Giordani"], "venue": "Journal of Artificial Evolution and Applications 2009,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2009}, {"title": "Multiple objective vector-based genetic programming using human-derived primitives", "author": ["J. Zutty", "D. Long", "H. Adams", "G. Bennett", "C. Baxter"], "venue": "Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2015}], "referenceMentions": [{"referenceID": 7, "context": "A central goal of artificial intelligence (AI) is to use computational hardware and software to solve complex problems in a human-competitive manner [9].", "startOffset": 149, "endOffset": 152}, {"referenceID": 27, "context": "Most AI methodologies can be grouped into top-down approaches, wherein cognition is viewed as a high-level phenomenon that is independent of the low-level details, or bottom-up approaches, which define basic computational building blocks such as artificial neurons that collectively give rise to \u201cemergent\u201d [29] intelligent behavior.", "startOffset": 307, "endOffset": 311}, {"referenceID": 8, "context": "However, the bottom-up has had some success owing to the availability of sophisticated algorithms such as genetic programming (GP) [10] and deep neural networks [6].", "startOffset": 131, "endOffset": 135}, {"referenceID": 7, "context": "This is particularly true today with abundant and inexpensive high-performance computing, leading to many human-competitive success stories [9].", "startOffset": 140, "endOffset": 143}, {"referenceID": 1, "context": "One of the early successes was the Mycin system, which was designed to predict the antibiotic that a patient with an infection should receive in the intensive care unit [2].", "startOffset": 169, "endOffset": 172}, {"referenceID": 4, "context": "Examples of modern AI successes include IBM\u2019s Watson, which beat the world champion of the game show Jeopardy [5].", "startOffset": 110, "endOffset": 113}, {"referenceID": 3, "context": "Democratization of AI will be important if we seek to integrate this exciting new technology into multiple different domains, as demonstrated by recent efforts such as Orange [4].", "startOffset": 175, "endOffset": 178}, {"referenceID": 20, "context": "We have previously suggested this idea of human-computer interaction that places the human user at the epicenter [22].", "startOffset": 113, "endOffset": 117}, {"referenceID": 14, "context": "This idea has also previously been explored from the point of view of the user or domain expert [16].", "startOffset": 96, "endOffset": 100}, {"referenceID": 14, "context": "Langley [16] provides five important tips that are relevant to thinking about the relationship humans have with AI for data mining using machine learning.", "startOffset": 8, "endOffset": 12}, {"referenceID": 14, "context": "Langley [16] further suggests that users want interactive discovery environments that help them understand their data while at the same time giving them control over the modeling process.", "startOffset": 8, "endOffset": 12}, {"referenceID": 26, "context": "Here, we make use of an extensive open-source machine learning library in Python called scikit-learn [28].", "startOffset": 101, "endOffset": 105}, {"referenceID": 5, "context": ", increasing n estimators) improves model performance but increases training time, whereas removing decision trees from the random forest decreases model performance but decreases training time [7].", "startOffset": 194, "endOffset": 197}, {"referenceID": 2, "context": "js to coordinate distributed jobs and uses MongoDB [3] as the backend database in the Graph Database Engine.", "startOffset": 51, "endOffset": 54}, {"referenceID": 22, "context": "The initial knowledge base consists of results from a previously published benchmark of scikit-learn algorithms [24], in which 14 machine learning algorithms were run with full hyperparameter optimization on a suite of 165 supervised classification problems.", "startOffset": 112, "endOffset": 116}, {"referenceID": 6, "context": "These results are collated in a tab-delimited file and a statistical analysis performed to determine the best algorithm configurations for certain problem types, similar to metalearning techniques [8].", "startOffset": 197, "endOffset": 200}, {"referenceID": 19, "context": ", [17\u2013 21, 34]).", "startOffset": 2, "endOffset": 14}, {"referenceID": 32, "context": ", [17\u2013 21, 34]).", "startOffset": 2, "endOffset": 14}, {"referenceID": 29, "context": "A GP system for classification based on multidimensional clustering [31] was recently demonstrated on biomedical classification problems [15] as a competitive alternative to traditional machine learning approaches.", "startOffset": 68, "endOffset": 72}, {"referenceID": 13, "context": "A GP system for classification based on multidimensional clustering [31] was recently demonstrated on biomedical classification problems [15] as a competitive alternative to traditional machine learning approaches.", "startOffset": 137, "endOffset": 141}, {"referenceID": 11, "context": "Recently GP has been proposed as a general feature engineering wrapper (FEW) in order to harness its feature learning capability to improve scikit-learn estimators, both for regression [13] and classification [14].", "startOffset": 185, "endOffset": 189}, {"referenceID": 12, "context": "Recently GP has been proposed as a general feature engineering wrapper (FEW) in order to harness its feature learning capability to improve scikit-learn estimators, both for regression [13] and classification [14].", "startOffset": 209, "endOffset": 213}, {"referenceID": 9, "context": "by local search [11] or Pareto optimization [12], are important options to include.", "startOffset": 16, "endOffset": 20}, {"referenceID": 10, "context": "by local search [11] or Pareto optimization [12], are important options to include.", "startOffset": 44, "endOffset": 48}, {"referenceID": 0, "context": "PennAI could then provide a \u201cbring your own learner\u201d type of service [1] to allow researchers to tackle complex data mining tasks with customized learning approaches, and incorporate the results into its knowledge base for improving future data science projects.", "startOffset": 69, "endOffset": 72}, {"referenceID": 28, "context": "Beyond using GP to perform the machine learning itself, recent work has shown that GP can also be harnessed to optimize a sequence of existing data analysis and machine learning operations on a dataset to maximize the predictive performance of the final machine learning model [30, 35].", "startOffset": 277, "endOffset": 285}, {"referenceID": 33, "context": "Beyond using GP to perform the machine learning itself, recent work has shown that GP can also be harnessed to optimize a sequence of existing data analysis and machine learning operations on a dataset to maximize the predictive performance of the final machine learning model [30, 35].", "startOffset": 277, "endOffset": 285}, {"referenceID": 23, "context": "For example, TPOT is an early prototype that uses GP to optimize a sequence of scikit-learn operations for both classification and regression problems [25\u201327], and has been shown to work quite well across a broad range of application domains ranging from epidemiological studies to image classification to time series prediction [23].", "startOffset": 151, "endOffset": 158}, {"referenceID": 24, "context": "For example, TPOT is an early prototype that uses GP to optimize a sequence of scikit-learn operations for both classification and regression problems [25\u201327], and has been shown to work quite well across a broad range of application domains ranging from epidemiological studies to image classification to time series prediction [23].", "startOffset": 151, "endOffset": 158}, {"referenceID": 25, "context": "For example, TPOT is an early prototype that uses GP to optimize a sequence of scikit-learn operations for both classification and regression problems [25\u201327], and has been shown to work quite well across a broad range of application domains ranging from epidemiological studies to image classification to time series prediction [23].", "startOffset": 151, "endOffset": 158}, {"referenceID": 21, "context": "For example, TPOT is an early prototype that uses GP to optimize a sequence of scikit-learn operations for both classification and regression problems [25\u201327], and has been shown to work quite well across a broad range of application domains ranging from epidemiological studies to image classification to time series prediction [23].", "startOffset": 329, "endOffset": 333}, {"referenceID": 31, "context": "As another example, the TPOT-MDR project [33] showed that TPOT can be specialized for genome-wide association studies (GWAS), and it outperforms several state-of-the-art modeling methods on both simulated and real-world GWAS problems because it considers a broad range of operations in with one another.", "startOffset": 41, "endOffset": 45}, {"referenceID": 30, "context": ", solve a given problem [32].", "startOffset": 24, "endOffset": 28}], "year": 2017, "abstractText": "While artificial intelligence (AI) has become widespread, many commercial AI systems are not yet accessible to individual researchers nor the general public due to the deep knowledge of the systems required to use them. We believe that AI has matured to the point where it should be an accessible technology for everyone. We present an ongoing project whose ultimate goal is to deliver an open-source, user-friendly AI system that is specialized for machine learning analysis of complex data in the biomedical and health care domains. We discuss how genetic programming can aid in this endeavor, and highlight specific examples where genetic programming has automated machine learning analyses in previous projects.", "creator": "LaTeX with hyperref package"}}}