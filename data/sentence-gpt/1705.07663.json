{"id": "1705.07663", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-May-2017", "title": "LOGAN: Evaluating Privacy Leakage of Generative Models Using Generative Adversarial Networks", "abstract": "Recent advances in machine learning are paving the way for the artificial generation of high quality images and videos. In this paper, we investigate how generating synthetic samples through generative models can lead to information leakage, and, consequently, to privacy breaches affecting individuals' privacy that contribute their personal or sensitive data to train these models. In order to quantitatively measure privacy leakage, we train a Generative Adversarial Network (GAN), which combines a discriminative model and a generative model, to detect overfitting by relying on the discriminator capacity to learn statistical differences in distributions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 22 May 2017 11:05:06 GMT  (1381kb,D)", "https://arxiv.org/abs/1705.07663v1", null], ["v2", "Sat, 12 Aug 2017 10:39:48 GMT  (4156kb,D)", "http://arxiv.org/abs/1705.07663v2", "Compared to v1, this version introduces experiments on a medical dataset as well as general improvements"]], "reviews": [], "SUBJECTS": "cs.CR cs.LG", "authors": ["jamie hayes", "luca melis", "george danezis", "emiliano de cristofaro"], "accepted": false, "id": "1705.07663"}, "pdf": {"name": "1705.07663.pdf", "metadata": {"source": "CRF", "title": "LOGAN: Evaluating Privacy Leakage of Generative Models Using Generative Adversarial Networks", "authors": ["Jamie Hayes", "Luca Melis", "George Danezis", "Emiliano De Cristofaro"], "emails": ["e.decristofaro}@cs.ucl.ac.uk"], "sections": [{"heading": null, "text": "We present attacks based on both white-box and black-box access to the target model, and show how to improve the latter using limited auxiliary knowledge of samples in the dataset. We test our attacks on several state-of-the-art models, such as Deep Convolutional GAN (DCGAN), Boundary Equilibrium GAN (BEGAN), and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE), using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10), as well as medical images (Diabetic Retinopathy). The white-box attacks are 100% successful at inferring which samples were used to train the target model, and the black-box ones can infer training set membership with up to over 80% accuracy."}, {"heading": "1 Introduction", "text": "Machine learning allows an increasing number of tasks to be performed more and more accurately and at a lower cost. Over the past few years, companies like Google, Microsoft, and Amazon have started to provide customers with access to APIs, allowing them to easily embed artificial intelligence into their applications. Organizations can use Machine Learning as a Service (MLaaS) engines to outsource complex tasks \u2013 such as training classifiers, performing predictions, clustering, etc. They can also let other users query cloud models trained on their data, possibly at a cost.\nHowever, if malicious users can recover data used to train these models, this can lead to dangerous information leakage. In fact, organizations do not have much control over the kind\n\u2217Authors contributed equally.\nof models and training parameters used by the platform, which might lead to overfitting (i.e.,the model does not generalize well outside the data on which it was trained), thus making it easier for an attacker to recover training data.\nProblem statement. In this paper, we focus on generative models \u2013 i.e., models designed to generate random data values, given some hidden model parameters for a learned distribution \u2013 and study whether an adversary can recover, from trained models, information about the individual data records on which they were trained. That is, given access to a generative model and an individual data record, can an attacker tell if a specific record was used to train the model?\nWe consider both black-box and white-box attacks: in the former, the attacker can only make queries to the target model under attack, which we refer to as the cloud model, and has no access to the internal parameters of the model. In the latter, it also has access to the parameters of a trained cloud model.\nPerforming such membership inference attacks on generative models is much more difficult than on discriminative ones, as those presented by Shokri et al. [38] at IEEE S&P\u201917. Discriminative models attempt to predict a label given a data input and an attacker can use the confidence the model places on an input belonging to a label to perform the attack. In generative models there is no such signal. It is therefore difficult to both detect overfitting and infer membership.\nMotivation. Generative models are an important emerging area, as recent developments are paving the way for artificial generation of perfectly plausible images and videos. They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive. In this paper, we seek to explore how generating synthetic samples through (overfitted) generative models can lead to information leakage.\nOur membership inference attacks are relevant to, and can be used in, a number of settings: (1) They can directly violate individuals\u2019 privacy, since in-\nclusion in a training set in itself may often be sensitive. For instance, if images from a database of criminals are used to train a face generation algorithm [43], inference on training set membership might lead to learn-\nar X\niv :1\n70 5.\n07 66\n3v 2\n[ cs\n.C R\n] 1\n2 A\nug 2\n01 7\ning an individual\u2019s criminal history. Even more worryingly, organizations may use datasets obtained from health providers, and discovering that a record was in the training set leaks information about the individual\u2019s health condition. In fact, one of our experiments demonstrates membership inference on a sensitive medical dataset (see Section 5.7).\n(2) In the context of machine learning forensics, an analyst may wish to determine whether a particular data item, or a whole dataset, was used to train a model to establish wrongdoing. This, for example, may support the suspicion that a model was trained on personal data without an adequate legal basis, or for a purpose not compatible with the data collection, in the context of data protection regulations. In this case, an individual or a regulator may use our techniques to determine whether particular data items were indeed used in the training of a model. A very relevant real-world incident illustrates this case: Google DeepMind was recently found to have used personal medical records provided by the NHS for purposes beyond direct patient care\u2014the basis on which the data was collected.1 Our techniques can be used, e.g., by the NHS or regulators, to assess whether personal/health information has been used to train a generative model. Note that image synthesis is already a common technique for creating large datasets in the field of healthcare [29, 8, 9].\n(3) A cloud provider can use our methods to evaluate the quality of privacy protection of a trained model they offer. Our techniques can be used as a benchmark before allowing third parties access to the model \u2013 and providers may restrict access in case the inference attack yields good results, as this is indicative of significant information leakage. Relatedly, we expect susceptibility to our attack to correlate with other leakage, but also with overfitting of the model. The relationship between robust privacy protections and generalizations have already been highlighted by Dwork et al. [13].\nOverview of the attacks. In order to perform membership inference on generative machine learning models, we train a Generative Adversarial Network (GAN) model [17] on samples generated from the target model. More specifically, we use generative models as a method to learn information about the target generative model, and thus create a local copy of the target model from which we can launch the attack. Our intuition is that, if a generative model overfits, then a GAN, which combines a discriminative model and a generative model, should be able to detect this overfitting, even if it is not observable to a human, since the discriminator is trained to learn statistical differences in distributions. We leverage the ability of GANs to classify real and synthetic records in order to recognize differences in the samples generated from the target model, on inputs on which it was trained versus those on 1https://www.theverge.com/2016/7/5/12095830/google-deepmind-nhs-eyedisease-detection\nwhich it was not. Moreover, in the case of white-box attacks, the attacker-trained discriminator itself can be used to measure information leakage of the cloud model.\nWe test our attacks on several state-of-the-art models such as Deep Convolutional GAN (DCGAN) [35], Boundary Equilibrium GAN (BEGAN) [5], and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE) [24], using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10), and medical images (Diabetic Retinopathy), containing rich details both in the foreground and background. This represents a much more challenging task for the attacker compared to simple datasets such as MNIST, where samples from each class have very similar features.\nContributions. In summary, we make several contributions: (1) To the best of our knowledge, this work constitutes the first study of membership inference attacks on generative models; (2) We devise a white-box attack that is an excellent indicator of overfitting in generative models; (3) We present a successful black-box attack that can be mounted through Generative Adversarial Networks, and show how to boost the performance of the black-box attack via auxiliary attacker knowledge of training/test set; (4) We show that our white-box attacks are 100% successful at inferring which samples were used to train the target model, while we can recover up to over 80% of the training set with black-box access; (5) We showcase our attacks on a medical image dataset, which highlights their privacy implications even further.\nPaper Organization. The next section reviews related work. Section 3 introduces machine learning concepts used in the rest of the paper, while Section 4 gives an overview of our attacks. In Section 5, we present the results of our experimental evaluation, and discuss them in Section 6. The paper concludes in Section 7."}, {"heading": "2 Related Work", "text": ""}, {"heading": "2.1 Attacks", "text": "A few efforts [19, 3, 14] focus on inferring the presence of genomic data of particular individuals within a dataset of complex genomic mixtures. For instance, Homer et al. [19] determine whether an individual is in a mixture by comparing a distance measure between the individual and the mixture versus the individual and the general population. Other attacks, e.g., on distributed recommender systems [7], infer which inputs cause output changes by looking at temporal patterns of the model. Ateniese et al. [2] present a few attacks against SVM and HMM classifiers aimed to reconstruct general statistics about training sets by exploiting knowledge of model parameters. By contrast, our work aims to detect whether a record was used to train a generative machine learning model.\nShokri et al. [38] present membership inference attacks on supervised models. Their approach exploits differences in the model\u2019s response to inputs that were or were not seen during training. For each class of the targeted black-box model, they\ntrain a shadow model, with the same machine learning technique. Whereas, our approach targets generative models and relies on GANs to provide a general framework for measuring the information leakage. Also note that membership inference on generative models is a much more difficult task than on discriminative models: in the former, the attacker cannot exploit confidence values on inputs belonging to the same classes, and therefore it is more difficult to detect overfitting and perform the attack. In fact, detecting overfitting in generative models is regarded as one of the most important research problems in machine learning [44].\nModel inversion attacks allow adversaries to extract training data from outputted model predictions. In [16], an attacker relies on outputs from a given machine learning model to infer sensitive features used as inputs to the model itself. For instance, given the model and some demographic information about a patient whose records are used during training, an attacker might predict the patient\u2019s genetic markers. However, such an attack cannot be achieved by any statistical model that can generalize on inputs not seen at training time, thus, the attacker simply replies on statistical inference about the total population [27]. The extracted record is not an actual training record, rather, an average representation of the inputs that are classified in a particular class. Tramer et al. [41] present a model extraction attack that aims to infer the parameters from a trained classifier, however, it cannot be applied to scenarios where the attacker does not have access to the probabilities returned for each class.\nAlso, Hitaj et al. [18] propose a white-box attack against the privacy-preserving distributed deep learning framework proposed in [37]. It relies on GAN models to generate valid samples of a particular class from a targeted private training set, however, it cannot be extended to a black-box scenario. Furthermore, evaluation of the attack is limited to the MNIST dataset of handwritten digits where all samples in a class look very similar, and the AT&T Dataset of Faces (Olivetti dataset) which consists of only 400 grayscale images of faces\u2014by contrast, our evaluation is performed on 13,233, 60,000, and 88,702 images for the LFW, CIFAR-10, and Diabetic Retinopathy datasets, respectively.\nFinally, previous work has also focused on adversarial samples \u2013 i.e., malicious inputs modified to yield erroneous model outputs \u2013 in machine learning in [31]. In particular, [32] study adversarial samples in deep neural networks, showing that inputs crafted by an adversary might result in deep neural networks to misclassify them."}, {"heading": "2.2 Defenses", "text": "Defense mechanisms based on secure multiparty computation and homomorphic encryption have been proposed to train supervised machine learning models, such as decision trees [26], linear regressors [11], and neural networks [6, 10]. However, these mechanisms do not prevent an attacker from running inference attacks on the privately trained models as the final parameters are left unchanged.\nOn the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42]. Shokri and Shmatikov [37] support distributed training of deep learning networks in a privacy-preserving way, i.e., independent entities collaboratively build a model without sharing their training data. To this end, they selectively share subsets of noisy model parameters during training. Abadi et al. [1] show how to train deep neural networks with non-convex objectives, under an acceptable privacy budget, while Papernot et al. [30] combine multiple models trained with disjoint datasets without exposing the (possibly sensitive) models, with applications to non-convex models like deep neural networks. Finally, [33] presents a mechanism called \u201cdefensive distillation\u201d to reduce the effectiveness of adversarial samples on deep neural networks.\nTo the best of our knowledge, however, there are no practical (i.e., combining high utility and privacy levels) differentially private mechanisms that can be applied to complex deep learning generative models, such as Generative Adversarial Networks (GAN) [17] or Variational Auto-encoders (VAE) [22]."}, {"heading": "3 Background", "text": "In this section, we review machine learning concepts used throughout the paper.\nGenerative Models. Machine learning models are typically divided into discriminative and generative ones. Given a supervised learning task, and given the features (x) of a datapoint and the corresponding label (y), discriminative models attempt to predict y on future x by learning a discriminative function f from pairs (x,y), which takes x as inputs and outputs the most likely label y. Discriminative models are not able to \u201cexplain\u201d how the data-points might have been generated. By contrast, generative models describe how data is generated by learning the joint probability distribution of p(X,Y), which gives a score to the configuration determined together by pairs (x,y). Generative models based on deep neural networks, such as Generative Adversarial Networks (GAN) [17] and Variational Auto-encoders (VAE) [22] are considered as the state-of-the-art for producing samples of realistic images [21].\nGenerative Adversarial Networks (GANs). GANs [17] are neural networks trained in an adversarial manner to generate data mimicking some distribution. The main intuition is to\nhave two competing neural network models. One takes noise as input and generates samples\u2013and so is called the generator. The other model, the discriminator, receives samples from both the generator and the training data, and has to be able to distinguish between the two sources. The two networks play a continuous game where the generator is learning to produce more and more realistic samples, and the discriminator is learning to get better and better at distinguishing generated data from real data, as depicted in Fig. 1.\nMore formally, to learn the generator\u2019s output distribution over data-points x, we define a prior on input noise variables pz(z), then represent a mapping to data space as G(z; \u03b8g), where G is a generative deep neural network with parameters \u03b8g . We also define a discriminator D(x; \u03b8d) that outputs D(x) \u2208 [0, 1], representing the probability that x was taken from the training set rather than from the generator G. D is trained to maximize the probability of assigning the correct label to both real training examples and fake samples from G. We simultaneously train G to minimize log(1 \u2212 D(G(z))). The final optimization problem solved by the two networks D and G follows a two-player minimax game as:\nmin G max D Ex\u223cpdata(x)[logD(x)]+Ez\u223cpz(z)[log(1\u2212D(G(z)))]\nFirst, gradients of D are computed to discriminate fake samples from training data, then G is updated to generate samples that are more likely to be classified as data. After several steps of training, if G and D have enough capacity, they will reach a point at which both cannot improve [17].\nVariational Auto-Encoders (VAEs). VAEs [22] consist of two neural networks (an encoder and a decoder) and a loss function. The encoder compresses data into a latent space (z) while the decoder reconstructs the data given the hidden representation. The intuition is that, rather than attempting to maximize the likelihood, one could maximize a lower bound of the likelihood, thus, if the lower bound increases to a given level, the likelihood must be at least as high. If hidden variables are continuous, the lower bound, introduced by Variational Autoencoders (VAEs), can be used.\nMore formally, let x be a random vector of m observed variables, which are either discrete or continuous. Let z be a random vector of n latent continuous variables. The probability distribution between x and z assumes the form p\u03b8(x, z) = p\u03b8(z)p\u03b8(x | z), where \u03b8 indicates that p is parametrized by \u03b8. Also, let q\u03c6(z | x) be a recognition model whose goal is to approximate the true and intractable posterior distribution p\u03b8(z | x). We can then define a lower-bound on the log-likelihood of x as follows: L(x) = \u2212DKL(q\u03c6(z | x) || p\u03b8(z)) + Eq\u03c6(z|x)[log p\u03b8(x | z)]. The first term pushes q\u03c6(z | x) to be similar to p\u03b8(z) ensuring that, while training, the VAE learns a decoder that, at generation time, will be able to invert samples from the prior distribution such they look just like the training data. The second term can be seen as a form of reconstruction cost, and needs to be approximated by sampling from q\u03c6(z | x).\nIn VAEs, the gradient signal is propagated through the sampling process and through q\u03c6(z | x), using the so-called reparametrization trick. This is done by making z be a deterministic function of \u03c6 and some noise , i.e., z = f(\u03c6, ). For instance, sampling from a normal distribution can be done as z = \u00b5+ \u03c3 , where \u223c N (0, I). The re-parametrization trick can be viewed as an efficient way of adapting q\u03c6(z | x) to help improve the reconstruction. VAEs are trained using stochastic gradient descent to optimize the loss w.r.t. the parameters of the encoder and decoder \u03b8 and \u03c6.\nLarsen et al. [24] combine VAEs and GANs into an unsupervised generative model that simultaneously learns to encode and generate new samples, which contain more details, sampled from the training data-points."}, {"heading": "4 Attacks Outline", "text": "We now present our membership inference attacks against generative models. In all our attacks an adversary tries to establish whether a single known record was included in the training set of a generative machine lerning model. We distinguishing between two settings: white-box and black-box attacks. In the former, the attacker can only make queries to the target model under attack (the \u201ccloud model\u201d), and has no access to the internal parameters of the model; in the latter, it also has access to the parameters of a trained cloud model. In both settings we allow the adversary to know the size of the training set \u2013 but not its contents. Variants of the attack allow the adversary to access some further side information.\nIn our evaluation of all attacks, we will consider an attacker that aims to distinguish data-points that were used to train the cloud model, and so consider an attacker that has access to the dataset. We assume the attacker knows the size of the training set, |Xtrain| = n, used to train the cloud model, but does not know how data-points are split into training and test sets. The performance of the attacks \u2013 i.e., accuracy \u2013 is measured as the fraction of the records correctly inferred as members of the training set."}, {"heading": "4.1 White-Box Attack", "text": "Fig. 2 illustrates the intuition behind the white-box attack. We assume that an attackerAwb has access to the trained cloud model, namely, a GAN \u2013 i.e., a generator Gcloud and a discriminator Dcloud. The cloud model has been trained to generate samples that resemble the training set samples. Awb creates a local copy of Dcloud, which we call Dwb. Then, as shown in Fig. 3,Awb inputs all samplesX = {x1, . . . , xm+n} from the original dataset intoDwb, which outputs the resulting probability vector p = [Dwb(x1), . . . , Dwb(xm+n)]. If the cloud model overfitted on the training data, Dwb will place a higher confidence value on samples that were part of the training set. Awb sorts their predictions, p, in descending order and takes the samples associated with the largest n probabilities as predictions for members of the training set.\nObserve that the attacker does not need to train a model \u2013 rather, it relies on internal access to the cloud model, from\nwhich the attack can be launched."}, {"heading": "4.2 Black-Box Attack with No Auxiliary Knowledge", "text": "In the black-box attack, we assume that the attacker Abb does not have access to the cloud model parameters. Thus, Abb cannot directly steal the discriminator model from the cloud as in the white-box attack. Furthermore, while in the white-box attack we restrict the cloud model to be a GAN, here we do not, and the cloud model may not have an associated discriminative model (as with VAEs). The attacker has no knowledge of how the original dataset is split into training and test set, thus, they do no have access to the true labels of samples from the dataset and so cannot train a model using a discriminative approach. Instead,Abb trains a GAN in order to re-create the cloud model locally and, in the process, creates a discriminator Dbb, which detects overfitting in the generative cloud model Gcloud. We illustrate the attack in Fig. 4a.\nMore specifically, Abb locally trains a GAN (Gbb, Dbb) using queries from the cloud, i.e., Abb trains the local GAN on samples generated by Gcloud. Note that as the black-box attack depends only on samples generated by the cloud model, Gcloud can be any generative model. We assume Abb has neither knowledge nor control over the source of randomness used to generate the samples generated by Gbb. After the GAN has been trained, the attack proceeds to the white-box setting, i.e., Abb inputs data-points X into Dbb, sorts the resulting probabilities, and takes the largest n points as predictions for the training set\u2014as shown in Fig. 3."}, {"heading": "4.3 Black-Box Attack with Limited Auxiliary Knowledge", "text": "In the black-box attack presented above, we assume that Abb has no additional knowledge about subsets of members of the dataset. However, we also study the case where an attacker could leverage limited additional side information about the training set. This is a realistic setting, which has been considered extensively in the literature. For instance, social graph knowledge has been used to de-anonymize social networks [28]. Overall, auxiliary/incomplete knowledge of sensitive datasets is a common assumption in prior work [34, 20].\nAccess to side information about the training set means that the attacker can \u201caugment\u201d the black-box attack. We consider two attack settings: a generative and a discriminative one. In both settings, we consider a scenario where the attacker has incomplete knowledge of members of the test dataset, the training dataset, or both. Discriminative setting. We consider an attacker that trains a simple discriminative model to infer membership of the training set, as illustrated in Fig. 4b. This is feasible since the attacker now has access to true labels. Thus, they do not need to train a generative model to detect overfitting. Within this setting, we consider two scenarios:\n(1) The attacker has limited auxiliary knowledge of samples that were not used to train the target cloud model.\n(2) The attacker has limited auxiliary knowledge of both training set and test set samples.\nIn both cases, the general method of attack is the same: an attacker trains a local model to detect overfitting in the cloud model. In (1), the discriminator, D, is fed samples from this auxiliary set, labeled as fake samples, and samples generated by the cloud model, labeled as real samples. If the cloud model overfits the training set, D will learn to discriminate between training and test samples. In (2), D is fed both cloud generated samples and the auxiliary training samples, labeled as real samples, and samples from the auxiliary test set, labeled as fake samples. Once the attacker has trained a discriminator, the attack again proceeds as described in Fig. 3. Note that we have to consider that the attacker knows some test samples (i.e., fake samples) in order to properly train a binary discriminator. Generative setting. We also consider a generative attack, as outlined in Fig. 4c, again, as per two scenarios:\n(1) The attacker has limited auxiliary knowledge of samples that were used to train the target cloud model.\n(2) The attacker has limited auxiliary knowledge of both training set and test set samples.\nWith both, the attacker trains a local model \u2013 specifically, a GAN \u2013 that aims to detect overfitting in the cloud model. In (1), the discriminator of the attacker GAN, Dbb, is trained using samples generated by Gbb, labeled as fake samples, and\nboth samples from the auxiliary training set and cloud generated samples, labeled as real samples. Intuitively, we expect the attacker model to be stronger at recognizing overfitting in the cloud model, if it has auxiliary knowledge of samples on which it was originally trained. In (2), Dbb is trained on samples generated by Gbb and samples from auxiliary set of test ones, labeled as fake samples, and samples generated by the cloud model and samples from the auxiliary training set, labeled as real ones. The attacker GAN is trained to learn to discriminate between test and training samples directly. Again, once the attacker has trained their model, the attack proceeds by feeding samples into Dbb, and sorting predictions as described in Fig. 3."}, {"heading": "5 Evaluation", "text": "In this section, we present our experimental evaluation of the attacks presented above. Experiments are performed using PyTorch2 on a workstation running Ubuntu Server 16.04 LTS, equipped with a 3.4 GHz CPU i7-6800K, 32GB RAM, and NVIDIA Titan X GPU card. Source code is available upon request.\nFor white-box attacks, we measure membership inference accuracy at successive epochs of training the target cloud model, where one epoch corresponds to one round of training on all training set inputs.3 For black-box attacks, we fix the cloud model and measure membership inference accuracy at successive training steps of the attacker model, where one training step is defined as one iteration of training on a minibatch of inputs. The attacker model is trained using soft and noisy labels as suggested in [36], i.e., we replace labels with random numbers in [0.7, 1.2] for real samples, and random values in [0.0, 0.3] for fake samples. Also, we occasionally flip the labels when training the discriminator. These modifications to the original GAN models have been shown to stabilize training in practice.4\n2https://github.com/pytorch/pytorch 3We update model weights after training on mini-batches of 32 samples. 4https://github.com/soumith/ganhacks"}, {"heading": "5.1 Experimental Setup", "text": "Datasets. We first test our attacks using two standard machine learning datasets, namely, Labeled Faces in the Wild (LFW) and CIFAR-10, then, in Section 5.7, we also present a casestudy evaluation on a medical image dataset, i.e., the diabetic retinopathy (DR) dataset.\nLFW includes 13,233 images of faces collected from the web5, while CIFAR-10 consists of 60,000 32x32 color images in 10 classes, with 6,000 images per class.6 For both of them, we randomly choose 10% of the dataset for the training set. Note that LFW is unbalanced, i.e., some people appear in multiple images, while others only appear once. We also perform experiments so that the training set is chosen to include the ten most popular classes of people in terms of number of images they appear in, which amounts to 12.2% of the LFW dataset. Intuitively, we expect that models trained on the top ten classes will overfit more than the same models trained on random 10% subsets, as we are training on a more homogeneous set of images. Finally, the DR dataset consists of 88,702 high-resolution retina images taken under a variety of image conditions.7 From DR, we select images that have been labeled as having a moderate to proliferate diabetic retinopathy presence, and use them to train the generative cloud model.\nModels. Since the introduction of GANs [17], several variants have been proposed aiming to improve training stability and sample quality. In particular, deep convolutional generative adversarial networks (DCGANs) [35] combine the GAN training process with convolutional neural networks (CNNs). CNNs are considered the state-of-the-art for a range image recognition tasks and, by combining CNNs with the GAN training processes, DCGANs perform well at unsupervised learning tasks such as generating complex representations of objects and faces [35].\nGANs have also been combined with VAEs [24], by collapsing the generator (of the GAN) and decoder (of the VAE) into one, the model uses learned feature representations in the GAN discriminator as the reconstructive error term in the VAE. Experimentally, it has been shown that combining the\n5http://vis-www.cs.umass.edu/lfw/ 6https://www.cs.toronto.edu/\u223ckriz/cifar.html 7https://www.kaggle.com/c/diabetic-retinopathy-detection/data\nDCGAN architecture with a VAE yields more realistic generated samples.8 More recently, Boundary Equilibrium GAN (BEGAN) [5] have been proposed as an approximate measure of convergence. Loss terms in GAN training do not correlate with sample quality, making it difficult for a practitioner to decide when to stop training. This decision is usually performed by visually inspecting generated samples. BEGAN proposes a new method for training GANs by changing the loss function. The discriminator is an autoencoder and the loss is a function of the quality of reconstruction achieved by the discriminator on both generated and real samples. BEGAN produces realistic samples [5], and is simpler to train since loss convergence and sample quality is linked with one another."}, {"heading": "5.2 Na\u0131\u0308ve Approaches", "text": "We begin our evaluation with a na\u0131\u0308ve Euclidean distance based attack, which serves as motivation to using more sophisticated machine learning techniques in our attacks. It proceeds as follows: given a sample generated by a cloud model, the attacker computes the Euclidean distance between the generated sample and every real sample in the dataset. Repeating this multiple times for newly generated samples, the attacker computes an average distance from each real sample, sorts the array of average distances, and takes the smallest n distances (and the associated real samples) as the guess for the training set, where n is the size of the training set.\nWe perform this attack on a cloud model (DCGAN) trained on a random 10% subset of CIFAR-10 and a random 10% subset of LFW, finding that the attack does not perform better than if the attacker were to randomly guess which real samples were part of the original training set. For completeness, results are reported in Fig. 14 in Appendix A.\nIn the Appendix, we also discuss another unsuccessful technique, based on training a shadow model (somewhat inspired by techniques presented in [38])."}, {"heading": "5.3 White-Box Attack", "text": "We now present the results of our evaluation of the whitebox attack described in Section 4.1 on LFW and CIFAR-10. For the LFW dataset, we build the training set either as a random 10% subset of the dataset or the top ten classes. For CIFAR-10, the training set is a random 10% subset of the dataset. The cloud models we implement are DCGAN, DCGAN+VAE, and BEGAN. In the rest of this section, we will include a baseline in the plots (red dotted line) that corresponds to the success of an attacker randomly guessing which samples belong to the training set.\nFig. 5a shows the accuracy of a white-box attack against a cloud model trained on the top ten classes of the LFW dataset. We observe that both DCGAN and DCGAN+VAE are vulnerable to the white-box attack. For DCGAN and DCGAN+VAE cloud models trained for 100 epochs, the attacker infers training set membership with 80% accuracy, and for models trained\n8http://blog.otoro.net/2016/04/01/generating-large-images-from-latentvectors/\nfor 400 epochs \u2013 with 98% and 97% accuracy, respectively. The BEGAN cloud model does overfit, although to a lesser extent: after 400 epochs, an attacker with white-box access to the BEGAN cloud model can infer membership of the training set with 60% accuracy.\nIn Fig. 5b, we report the results of white-box attacks against a cloud model trained on a random 10% subset of the LFW dataset. Similar to Fig. 5a, both DCGAN and DCGAN+VAE are vulnerable: when these are trained for 250 epochs, an attacker can achieve perfect training set membership inference. BEGAN performs similar to the top ten classes white-box experiment, achieving 62% accuracy after 400 epochs.\nFinally, Fig. 5c plots the accuracy of the white-box attack against a cloud model trained on a random 10% subset of the CIFAR-10 dataset. For DCGAN, results are similar to DCGAN on LFW, with perfect training set membership inference after 400 epochs. However, DCGAN+VAE does not leak information (does not overfit) until around 250 epochs, where accuracy remains relatively steady, at 10-20%. Instead, after 250 epochs, the model overfits, with accuracy reaching 80% by 400 epochs. BEGAN, while producing quality samples, does not overfit, with final training set membership inference accuracy of 19%, which is only 9% better than randomly guessing the training set. Due to the limited accuracy of BEGAN in comparison to other models, we discard it as a cloud model for black-box attacks as it appears not to be vulnerable to membership inference attacks in general."}, {"heading": "5.4 Black-Box Attack with No Auxiliary Knowledge", "text": "We now present the results of the black-box attacks (cf. Section 4.2) on LFW and CIFAR-10. We assume the attacker has no knowledge of the training or test sets other than the size of the original training set. Once again, for LFW, the training set is either a random 10% subset of the dataset or the top ten classes, while, for CIFAR-10, the training set is always a random 10% subset of the dataset. The cloud models we implement are DCGAN and DCGAN+VAE (fixed at epoch 400), and the attacker model uses DCGAN.\nFig. 6a plots the results of a black-box attack against a cloud model trained on the top ten classes of the LFW dataset. After training the attacker model on cloud queries, the attack achieves 63% training set membership inference accuracy for both DCGAN and DCGAN+VAE cloud models. Surprisingly, the attack performs equally well when the cloud model differs from the attack model as when the cloud and attack model are identical. This highlights the fact that the attacker does not need to have knowledge of the cloud model architecture in order to perform the attack.\nIn Fig. 6b, the results are with respect to a cloud model trained on a random 10% subset of the LFW dataset. Once again, we find that DCGAN and DCGAN+VAE cloud models are equally vulnerable to a black-box attack. An attacker with no auxiliary information of the training set can still expect to perform membership inference with 40% (38%) accuracy for\nthe DCGAN (DCGAN+VAE) cloud model. Finally, Fig. 6c plots the accuracy of a black-box attack against a cloud model trained on a random 10% subset of the CIFAR-10 dataset. For the DCGAN+VAE cloud model, accuracy reaches 20% after approximately 1,000 training steps and stays flat. For the DCGAN cloud model, the attacker can infer training set membership with 37% accuracy, with accuracy improving steadily throughout the attacker model training process.\nWe observe that the disparity of the attack success between the DCGAN and DCGAN+VAE cloud models with CIFAR10 and the parity of the success of the two models with LFW is replicated in both white-box and black-box attacks. As expected, the best results are obtained when the attacker and cloud model have the same architecture. However, the attack does not overwhelmingly suffer under differing architectures. In fact, in LFW experiments there is a negligible difference in attack success, and, in the CIFAR-10 black-box experiments, the difference in accuracy is only 17%."}, {"heading": "5.5 Black-Box Attack with Limited Auxiliary Knowledge", "text": "As discussed in Section 4.3, we also consider black-box attacks where the attacker has some limited auxiliary knowledge of the dataset, and uses this knowledge to recover the full training set. We now present the results of these attacks on random 10% subsets of LFW and CIFAR-10 with DCGAN attacker and cloud models (fixed at epoch 400).\nWe consider different scenarios where the attacker has\nknowledge of 20\u201330% of the training set, 20-30% of the test set, or both. Nonetheless, the total number of samples of which the attacker has knowledge is quite modest. For LFW, 20% of the random 10% training set corresponds to 264 out of 1,323 images, 20% of the test set to 2,382 out of 11,910 images, whereas, for CIFAR-10, 20% of the random 10% training set amounts to 1,200 out of 6,000 images, and 20% of the test set to 10,000 out of 50,000 images. An attacker with auxiliary information of the training and test set has access to labels, and therefore may not need to train a generative model to perform a membership inference attack on a generative model. We also show that, while the attacker can train a discriminative model to perform membership inference, such an approach produces worse results than the generative method.\nIf an attacker has access to true labels within the dataset, they can train a discriminative model on these samples in order to learn to classify training samples correctly. For both LFW and CIFAR-10 DCGAN cloud models, trained on a random 10% subset of the dataset, we consider two settings:\n(i) the attacker has 20% knowledge of the test set; (ii) the attacker has 30% knowledge of both the training and\ntest set. We use the discriminator from DCGAN as the discriminative model trained by the attacker. In (i), we pass test set samples to the discriminator labeled as fake samples, and cloud generated ones labeled as real ones. In (ii), we pass test set samples to the discriminator labeled as fake ones, and cloud generated and training set samples labeled as real ones.\nIn Fig. 7, we plot the accuracy results for both settings,\nshowing that the attack fails with both datasets when the attacker has only test set knowledge, performing no better than random guessing. Whereas, if the attacker has both training and test knowledge, with LFW, the attacker recovers the training set with 50% accuracy, while, for CIFAR-10, accuracy reaches 33%. Note that this approach does not improve on CIFAR-10 black-box results with no auxiliary knowledge, and only marginally improves on LFW results. As a result, we also experiment with generative approaches to black-box attacks with auxiliary attacker knowledge, as discussed next.\nWe consider the same set of experiments with similar settings for attacker knowledge as in the discriminative approach; the only difference is that in setting (i) we now assume the attacker has 20% knowledge of the training set rather than the test set. We use DCGAN as the generative attacker model. Specifically, we consider two settings in which:\n(i) the attacker has 20% knowledge of the training set, (ii) the attacker has 30% knowledge of both the training and\ntest set.\nIn all the experiments, we introduce a delay of 1000 training steps before the attacker model uses the auxiliary attacker knowledge. We found that introducing the auxiliary knowledge early in training process of the attacker model resulted in a weaker discriminator \u2013 see Fig. 8. Fig. 9a shows results for setting (i): clearly, there is a substantial increase in accuracy for the LFW dataset, from 40% attack accuracy to nearly 60%. However, there is no increase in accuracy for the CIFAR-10 dataset. Thus, we conclude that setting (i) does not generalize. Fig. 9b shows results for setting (ii); for both LFW and CIFAR-10 there is a substantial improvement in accuracy. Accuracy for the LFW experiment increases from 40% (with no auxiliary attacker knowledge) to 60%, while accuracy for the CIFAR-10 experiment increases from 37% to 58%. Thus, we conclude that, even a small amount of auxiliary attacker knowledge can greatly help with membership inference attacks."}, {"heading": "5.6 Remarks", "text": "In order to better understand the relationship between membership inference and training performance, we show, in Fig. 10, the attack accuracy and samples generated at different training stages by the cloud DCGAN generator in the whitebox attack (Fig. 10a) and the attacker DCGAN generator in the black-box attack (Fig. 10b) on the top ten classes from the LFW dataset. The plots demonstrate that accuracy correlates well with the visual quality of the generated samples. In particular, samples generated by the target cloud yield a better visual quality than the ones generated by the attacker generator during the black-box attack, and this results in higher membership inference accuracies. Overall, the samples generated by both attacks at later stages look visually plausible and fairly similar to the original ones, i.e., real and cloud samples.\nOur attacks are evaluated on datasets that consist of complex representations of faces (LFW) and objects (CIFAR-10). As shown in Fig. 11a, real samples from LFW contain rich details both in the foreground and background. We do not observe any large deviations in images within datasets, excluding the possibility that the attack performs well due to some training samples being more easily learned by the model, and so predicting with higher confidence. Learning the distribution of such images is a challenging task compared to simple datasets such as MNIST, where samples from each class have extremely similar features. In fact, our black-box attack is able to generate realistic samples (see differences between Fig. 11b and 11c). We also have more examples of samples \u2013 to ease presentation, we include them in Appendix B."}, {"heading": "5.7 A Case Study on the Diabetic Retinopathy Dataset", "text": "We now present a case study of our attacks performed on the Diabetic Retinopathy (DR) dataset, which consists of high-resolution retina images, with an integer label assigning a score of how much the participant suffers from diabetic retinopathy. Diabetic retinopathy is a leading cause of blindness in the developed world, with detection currently performed manually by highly skilled clinicians. The machine learning competition site kaggle.com has recently demonstrated that it is possible to classify cases of diabetic retinopathy with high accuracy using machine learning, thus removing the need for the time-consuming process of manual detection. As noted in Section 1, the generation of medical images has become a powerful method for producing a large number of high-quality sample data on which machine learning models can be trained. Here we show that our attack can lead to serious privacy breaches if medical data was generated from retina images with cases of diabetic retinopathy.\nRecall that the diabetic retinopathy dataset consists of 88,702 high-resolution retina images under various imaging conditions. Each image has an associated integer label assigning how present diabetic retinopathy is within the retina, from 0 to 4. We train the generative cloud model on images with labels 2, 3 and 4, i.e., images with mild to severe cases of dia-\nbetic retinopathy. These images make up 19.7% of the dataset. Our attack then aims to infer which members of the entire dataset contributed to training the cloud model. Fig. 12 show real and cloud generated samples of retina images: specifically, Fig. 12a and Fig. 12b reports images from the diabetic retinopathy dataset with labels 0 and 4, respectively, while Fig. 12c shows artificially generated samples from the cloud model that are classified as belonging to the original training set by our attacks. In other words, they are samples that are classified as having a high presence of diabetic retinopathy.\nIn Fig. 13a, we report the results of the white-box attack, showing that the attack is overwhelmingly successful, nearing 100% accuracy at 350 training epochs. Fig. 13b shows black-box attacks results, when an attacker has no auxiliary knowledge, and when the attacker has 30% training and test set auxiliary knowledge. A no-knowledge black-box attack does not perform very well, while the attack with some auxiliary knowledge nears white-box attack accuracy, peaking at over 80% after 35K training steps."}, {"heading": "6 Discussion", "text": "Summary of results. The best accuracy for experiments on random 10% training sets (LFW, CIFAR-10) and the diabetic retinopathy (DR) dataset experiments are summarized in Table 1. Overall, our analysis shows that state-of-the-art gen-\nerative models are vulnerable against membership inference attacks. In the case of white-box attacks, the attacker successfully infers the training set with 100% accuracy on both the LFW and CIFAR-10 datasets, and 95% accuracy for DR dataset. Accuracy drops to 40% on LFW, 37% on CIFAR10 and 22% on DR for black-box attacks with no auxiliary knowledge. However, even with a small amount of auxiliary knowledge, the attacker can boost membership inference performance up to 60% on LFW, 58% on CIFAR-10 and 81% on DR. A random guess corresponds to 10% accuracy on LFW and CIFAR-10, and 20% on DR. Furthermore, our attacks are robust against different cloud model architectures.\nPossible countermeasures. Defense strategies against membership inference discussed in [38], such as restricting the prediction vector to the top k classes, coarsening and increasing the entropy of the prediction vector, are not suitable to our attacks, since generative models do not output prediction vectors. However, regularization techniques could be applied to\ngenerative models to produce more robust and stable training as well as more diverse and visually pleasant samples, which we leave as part of future work. Without a robust method for detecting overfitting or analyzing sample quality in generative models, it is difficult to decide how best to defend against membership inference attacks.\nInterestingly, our attack can actually be used as a defense: the difference in white-box and black-box accuracy provides information about how well the local model approximates the cloud model, thus, a practitioner can use this information to train a cloud model which cannot be well approximated. Furthermore, similarly to early-stopping criteria in model training, one could decide to cease training when visual sample quality is high but white-box attack accuracy is still low.\nIn our experiments, we observe the benefits of a more regularized model in increasing the robustness against information leakage in the case of BEGAN. For instance, in whitebox attacks on CIFAR-10, BEGAN produces quality samples without overfitting, with final training set membership inference of only 9% better than randomly guessing the training set (cf. Fig. 5c).\nCost of the Attacks. We also set to quantify the cost of the attacks in terms of computational and time overhead, and, to some extent, monetary costs. To mount the attacks, the attacker needs a GPU, which can be obtained at a reason-\nable cost\u2014in fact, our attacks can run on graphics cards currently priced at approximately $100-200. The attacks also have minimal running time overheads: for the white-box attack, complexity is negligible as we only query a pre-trained target cloud model to steal discriminator model parameters, whereas, for black-box attacks, one step of training the attacker model takes 0.05 seconds. Black-box attacks with no auxiliary attacker knowledge yield the best results after 50,000 training steps, therefore, an attacker can expect best results after approximately 42 minutes with 32 \u00d7 50,000 queries to the target cloud model (since we define one training step as one mini-batch iteration, with 32 inputs per mini-batch). For attacks with auxiliary knowledge, the best results are reached after 15,000 training steps, which correspond to approximately 13 minutes.\nWe also estimate monetary cost based on current discriminative MLaaS pricing structures from Google.9 At a cost of $0.50 per 1,000 cloud queries, after an initial 10,000 free queries, the black-box attack with no auxiliary knowledge would cost $795, while the black-box attack with auxiliary knowledge $235. Therefore, we consider our attacks to have minimal costs, especially considering the potential severity of the information leakage they enable.\n9https://cloud.google.com/prediction/pricing"}, {"heading": "7 Conclusion", "text": "In this paper, we presented a first-of-its-kind evaluation of information leakage in generative models, showing that a variety of models are actually vulnerable to membership inference attacks, i.e., reconstructing the records used during training. The attacks do not need information about the model under attack and generalize well. Our techniques can be used as a method for practitioners to evaluate information leakage and decide how best to train their models not to be vulnerable to membership inference. Indeed, as generative models become increasingly popular, care must be taken when selecting a model if the application is privacy sensitive. Therefore, our attacks can be used to evaluate the quality of privacy protection of a trained generative model offered by organizations (e.g., health and assurance providers).\nWe presented a thorough experimental analysis on several state-of-the-art probabilistic models such as Deep Convolutional GAN (DCGAN), Boundary Equilibrium GAN (BEGAN), and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE), using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10) and medical images with real-world privacy concerns (diabetic retinopathy). We considered both black-box and whitebox attacks. In the former, the attacker can only make queries to the target model under attack, and has no access to the internal parameters of the model, whereas, in the latter it has also access to the parameters of a trained cloud model. We showed that the white-box attack can be used as a simple method to detect overfitting in generative models and help selecting an appropriate model that will not leak information about samples on which it was trained. Moreover, we demonstrated that our low-cost black-box attack can perform membership inference\nusing a newly crafted method of training GANs, and showed that an attacker with limited auxiliary knowledge of dataset samples can significantly improve accuracy.\nWe also provide evidence that models that generalize well (such as BEGAN) also yield higher protection against membership inference attacks \u2013 strengthening the hypothesis that generalization and privacy are associated. This observation also demonstrates that our evaluation may be used to empirically assess the generalization quality of a generative model \u2013 which is an open machine learning research problem and of independent interest.\nAs part of future work, we plan to apply our attacks to other datasets, including healthcare and location data. We also intend to investigate more advanced defense techniques, such as differentially private generative models, aiming to mitigate the effects of membership inference attacks."}, {"heading": "A Unsuccessful Attacks", "text": "We now report a few additional results, not included in the main body of the paper to ease presentation. In Fig. 14, we report the results of the Euclidean attack presented in Section 5.2. This attack was performed on a cloud model (DCGAN) trained on a random 10% subset of CIFAR-10 and a random 10% subset of LFW, but we found that the attack did not perform much better than a random guess.\nWe also report on the results of a black-box setting where where 10% of training set samples from LFW are used to train a shadow model \u2013 see Fig. 15. Samples generated by this model are then injected into the attacker model together with the samples generated by the cloud model. More specifically, at training time, each mini-batch is composed of synthetic samples generated either by the cloud model or by the shadow model. However, this attack, somewhat inspired by the approach proposed in [38], only yields around 18% of accuracy, with no improvements during training."}, {"heading": "B Additional Samples", "text": "Finally, in Figures 16\u201321, we report additional examples of samples deferred from Section 6."}], "references": [{"title": "Deep learning with differential privacy", "author": ["M. Abadi", "A. Chu", "I. Goodfellow", "H.B. McMahan", "I. Mironov", "K. Talwar", "L. Zhang"], "venue": "ACM CCS,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "Hacking smart machines with smarter ones: How to extract meaningful data from machine learning classifiers", "author": ["G. Ateniese", "L.V. Mancini", "A. Spognardi", "A. Villani", "D. Vitali", "G. Felici"], "venue": "International Journal of Security and Networks,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Membership Privacy in MicroRNA-based Studies", "author": ["M. Backes", "P. Berrang", "M. Humbert", "P. Manoharan"], "venue": "ACM CCS,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Generalized denoising auto-encoders as generative models", "author": ["Y. Bengio", "L. Yao", "G. Alain", "P. Vincent"], "venue": "NIPS,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "BEGAN: Boundary Equilibrium Generative Adversarial Networks", "author": ["D. Berthelot", "T. Schumm", "L. Metz"], "venue": "arXiv preprint 1703.10717,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2017}, {"title": "Practical secure aggregation for privacy preserving machine learning. https://eprint.iacr.org/2017/281", "author": ["K. Bonawitz", "V. Ivanov", "B. Kreuter", "A. Marcedone", "H.B. McMahan", "S. Patel", "D. Ramage", "A. Segal", "K. Seth"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2017}, {"title": "You Might Also Like:\u201d Privacy Risks of Collaborative Filtering", "author": ["J.A. Calandrino", "A. Kilzer", "A. Narayanan", "E.W. Felten", "V. Shmatikov"], "venue": "IEEE Security and Privacy,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Generating Multi-label Discrete Electronic Health Records using Generative Adversarial Networks", "author": ["E. Choi", "S. Biswal", "B. Malin", "J. Duke", "W.F. Stewart", "J. Sun"], "venue": "arXiv preprint 1703.06490,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2017}, {"title": "Towards Adversarial Retinal Image Synthesis", "author": ["P. Costa", "A. Galdran", "M.I. Meyer", "M.D. Abr\u00e0moff", "M. Niemeijer", "A.M. Mendon\u00e7a", "A. Campilho"], "venue": "arXiv preprint 1701.08974,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2017}, {"title": "Cryptonets: Applying neural networks to encrypted data with high throughput and accuracy", "author": ["N. Dowlin", "R. Gilad-Bachrach", "K. Laine", "K. Lauter", "M. Naehrig", "J. Wernsing"], "venue": "ICML,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2016}, {"title": "Privacy-preserving multivariate statistical analysis: Linear regression and classification", "author": ["W. Du", "Y.S. Han", "S. Chen"], "venue": "ICDM,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2004}, {"title": "Differential privacy: A survey of results", "author": ["C. Dwork"], "venue": "Theory and Applications of Models of Computation,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2008}, {"title": "Generalization in adaptive data analysis and holdout reuse", "author": ["C. Dwork", "V. Feldman", "M. Hardt", "T. Pitassi", "O. Reingold", "A. Roth"], "venue": "NIPS,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Robust traceability from trace amounts", "author": ["C. Dwork", "A. Smith", "T. Steinke", "J. Ullman", "S. Vadhan"], "venue": "FOCS,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2015}, {"title": "The Difficulty of Training Deep Architectures and the Effect of Unsupervised Pre-Training", "author": ["D. Erhan", "P.-A. Manzagol", "Y. Bengio", "S. Bengio", "P. Vincent"], "venue": "AISTATS,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2009}, {"title": "Model inversion attacks that exploit confidence information and basic countermeasures", "author": ["M. Fredrikson", "S. Jha", "T. Ristenpart"], "venue": "CCS,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Generative adversarial nets", "author": ["I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde- Farley", "S. Ozair", "A. Courville", "Y. Bengio"], "venue": "NIPS,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep Models Under the GAN: Information Leakage from Collaborative Deep Learning", "author": ["B. Hitaj", "G. Ateniese", "F. Perez-Cruz"], "venue": "arXiv preprint 1702.07464,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2017}, {"title": "Resolving individuals contributing trace amounts of DNA to highly complex mixtures using high-density SNP genotyping microarrays", "author": ["N. Homer", "S. Szelinger", "M. Redman", "D. Duggan", "W. Tembe", "J. Muehling", "J.V. Pearson", "D.A. Stephan", "S.F. Nelson", "D.W. Craig"], "venue": "PLoS Genet,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2008}, {"title": "On your social network de-anonymizablity: Quantification and large scale evaluation with seed knowledge", "author": ["S. Ji", "W. Li", "N.Z. Gong", "P. Mittal", "R.A. Beyah"], "venue": "NDSS,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2015}, {"title": "Generative Models", "author": ["A. Karpathy", "P. Abbeel", "G. Brockman", "P. Chen", "V. Cheung", "R. Duan", "I. Goodfellow", "D. Kingma", "J. Ho", "R. Houthooft", "T. Salimans", "J. Schulman", "I. Sutskever", "W. Zaremba"], "venue": "https://blog.openai.com/generative-models/,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2017}, {"title": "Auto-Encoding Variational Bayes", "author": ["D.P. Kingma", "M. Welling"], "venue": "ICLR,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2013}, {"title": "Differentially Private Bayesian Optimization", "author": ["M.J. Kusner", "J.R. Gardner", "R. Garnett", "K.Q. Weinberger"], "venue": "ICML,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Autoencoding beyond pixels using a learned similarity metric", "author": ["A.B.L. Larsen", "S.K. S\u00f8nderby", "H. Larochelle", "O. Winther"], "venue": "arXiv preprint 1512.09300,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2015}, {"title": "Photorealistic single image super-resolution using a generative adversarial network", "author": ["C. Ledig", "L. Theis", "F. Husz\u00e1r", "J. Caballero", "A. Cunningham", "A. Acosta", "A. Aitken", "A. Tejani", "J. Totz", "Z. Wang"], "venue": "arXiv preprint 1609.04802,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2016}, {"title": "Privacy preserving data mining", "author": ["Y. Lindell", "B. Pinkas"], "venue": "CRYPTO,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2000}, {"title": "Statistical inference considered harmful", "author": ["F. McSherry"], "venue": "https://github.com/frankmcsherry/blog/blob/master/posts/2016- 06-14.md,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2016}, {"title": "De-anonymizing social networks", "author": ["A. Narayanan", "V. Shmatikov"], "venue": "IEEE Security and Privacy,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2009}, {"title": "Medical Image Synthesis with Context-Aware Generative Adversarial Networks", "author": ["D. Nie", "R. Trullo", "C. Petitjean", "S. Ruan", "D. Shen"], "venue": "arXiv preprint 1612.05362,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2016}, {"title": "Semi-supervised knowledge transfer for deep learning from private training data", "author": ["N. Papernot", "M. Abadi", "\u00da. Erlingsson", "I. Goodfellow", "K. Talwar"], "venue": "ICLR,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2017}, {"title": "Practical Black-Box Attacks against Machine Learning", "author": ["N. Papernot", "P. McDaniel", "I. Goodfellow", "S. Jha", "Z.B. Celik", "A. Swami"], "venue": "arXiv preprint 1602.02697,", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2016}, {"title": "The Limitations of Deep Learning in Adversarial Settings", "author": ["N. Papernot", "P. McDaniel", "S. Jha", "M. Fredrikson", "Z.B. Celik", "A. Swami"], "venue": "IEEE EuroSP,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2015}, {"title": "Distillation as a defense to adversarial perturbations against deep neural networks", "author": ["N. Papernot", "P. McDaniel", "X. Wu", "S. Jha", "A. Swami"], "venue": "IEEE Security and Privacy,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2016}, {"title": "De-anonymizing social networks and inferring private attributes using knowledge graphs", "author": ["J. Qian", "X.-Y. Li", "C. Zhang", "L. Chen"], "venue": "INFOCOM,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2016}, {"title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "author": ["A. Radford", "L. Metz", "S. Chintala"], "venue": "arXiv preprint 1511.06434,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2015}, {"title": "Improved Techniques for Training GANs", "author": ["T. Salimans", "I. Goodfellow", "W. Zaremba", "V. Cheung", "A. Radford", "X. Chen", "X. Chen"], "venue": "NIPS,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2016}, {"title": "Privacy-preserving deep learning", "author": ["R. Shokri", "V. Shmatikov"], "venue": "CCS,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2015}, {"title": "Membership inference attacks against machine learning models", "author": ["R. Shokri", "M. Stronati", "C. Song", "V. Shmatikov"], "venue": "IEEE Security and Privacy,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2017}, {"title": "A note on the evaluation of generative models", "author": ["L. Theis", "A. v. d. Oord", "M. Bethge"], "venue": "arXiv preprint 1511.01844,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2015}, {"title": "Lossy image compression with compressive autoencoders", "author": ["L. Theis", "W. Shi", "A. Cunningham", "F. Husz\u00e1r"], "venue": "arXiv preprint 1703.00395,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2017}, {"title": "Stealing machine learning models via prediction apis", "author": ["F. Tram\u00e8r", "F. Zhang", "A. Juels", "M.K. Reiter", "T. Ristenpart"], "venue": "USENIX Security,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2016}, {"title": "Privacy aware learning", "author": ["M.J. Wainwright", "M.I. Jordan", "J.C. Duchi"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2012}, {"title": "Automated Inference on Criminality using Face Images", "author": ["X. Wu", "X. Zhang"], "venue": "arXiv preprint 1611.04135,", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2016}, {"title": "On the Quantitative Analysis of Decoder-Based Generative Models", "author": ["Y. Wu", "Y. Burda", "R. Salakhutdinov", "R. Grosse"], "venue": "https://openreview.net/forum?id=B1M8JF9xx,", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2016}, {"title": "Semantic Image Inpainting with Perceptual and Contextual Losses", "author": ["R. Yeh", "C. Chen", "T.Y. Lim", "M. Hasegawa-Johnson", "M.N. Do"], "venue": "arXiv preprint 1607.07539,", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 37, "context": "[38] at IEEE S&P\u201917.", "startOffset": 0, "endOffset": 4}, {"referenceID": 39, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 65, "endOffset": 69}, {"referenceID": 3, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 81, "endOffset": 84}, {"referenceID": 44, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 97, "endOffset": 101}, {"referenceID": 24, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 120, "endOffset": 124}, {"referenceID": 35, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 150, "endOffset": 154}, {"referenceID": 38, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 167, "endOffset": 171}, {"referenceID": 14, "context": "They are used in a plethora of applications, such as compression [40], denoising [4], inpainting [45], super-resolution [25], semisupervised learning [36], clustering [39], and deep neural networks pre-training [15] in cases where labeled data is expensive.", "startOffset": 211, "endOffset": 215}, {"referenceID": 42, "context": "For instance, if images from a database of criminals are used to train a face generation algorithm [43], inference on training set membership might lead to learn-", "startOffset": 99, "endOffset": 103}, {"referenceID": 28, "context": "Note that image synthesis is already a common technique for creating large datasets in the field of healthcare [29, 8, 9].", "startOffset": 111, "endOffset": 121}, {"referenceID": 7, "context": "Note that image synthesis is already a common technique for creating large datasets in the field of healthcare [29, 8, 9].", "startOffset": 111, "endOffset": 121}, {"referenceID": 8, "context": "Note that image synthesis is already a common technique for creating large datasets in the field of healthcare [29, 8, 9].", "startOffset": 111, "endOffset": 121}, {"referenceID": 12, "context": "[13].", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "In order to perform membership inference on generative machine learning models, we train a Generative Adversarial Network (GAN) model [17] on samples generated from the target model.", "startOffset": 134, "endOffset": 138}, {"referenceID": 34, "context": "We test our attacks on several state-of-the-art models such as Deep Convolutional GAN (DCGAN) [35], Boundary Equilibrium GAN (BEGAN) [5], and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE) [24], using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10), and medical images (Diabetic Retinopathy), containing rich details both in the foreground and background.", "startOffset": 94, "endOffset": 98}, {"referenceID": 4, "context": "We test our attacks on several state-of-the-art models such as Deep Convolutional GAN (DCGAN) [35], Boundary Equilibrium GAN (BEGAN) [5], and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE) [24], using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10), and medical images (Diabetic Retinopathy), containing rich details both in the foreground and background.", "startOffset": 133, "endOffset": 136}, {"referenceID": 23, "context": "We test our attacks on several state-of-the-art models such as Deep Convolutional GAN (DCGAN) [35], Boundary Equilibrium GAN (BEGAN) [5], and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE) [24], using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10), and medical images (Diabetic Retinopathy), containing rich details both in the foreground and background.", "startOffset": 210, "endOffset": 214}, {"referenceID": 18, "context": "A few efforts [19, 3, 14] focus on inferring the presence of genomic data of particular individuals within a dataset of complex genomic mixtures.", "startOffset": 14, "endOffset": 25}, {"referenceID": 2, "context": "A few efforts [19, 3, 14] focus on inferring the presence of genomic data of particular individuals within a dataset of complex genomic mixtures.", "startOffset": 14, "endOffset": 25}, {"referenceID": 13, "context": "A few efforts [19, 3, 14] focus on inferring the presence of genomic data of particular individuals within a dataset of complex genomic mixtures.", "startOffset": 14, "endOffset": 25}, {"referenceID": 18, "context": "[19] determine whether an individual is in a mixture by comparing a distance measure between the individual and the mixture versus the individual and the general population.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": ", on distributed recommender systems [7], infer which inputs cause output changes by looking at temporal patterns of the model.", "startOffset": 37, "endOffset": 40}, {"referenceID": 1, "context": "[2] present a few attacks against SVM and HMM classifiers aimed to reconstruct general statistics about training sets by exploiting knowledge of model parameters.", "startOffset": 0, "endOffset": 3}, {"referenceID": 37, "context": "[38] present membership inference attacks on supervised models.", "startOffset": 0, "endOffset": 4}, {"referenceID": 43, "context": "In fact, detecting overfitting in generative models is regarded as one of the most important research problems in machine learning [44].", "startOffset": 131, "endOffset": 135}, {"referenceID": 15, "context": "In [16], an attacker relies on outputs from a given machine learning model to infer sensitive features used as inputs to the model itself.", "startOffset": 3, "endOffset": 7}, {"referenceID": 26, "context": "However, such an attack cannot be achieved by any statistical model that can generalize on inputs not seen at training time, thus, the attacker simply replies on statistical inference about the total population [27].", "startOffset": 211, "endOffset": 215}, {"referenceID": 40, "context": "[41] present a model extraction attack that aims to infer the parameters from a trained classifier, however, it cannot be applied to scenarios where the attacker does not have access to the probabilities returned for each class.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[18] propose a white-box attack against the privacy-preserving distributed deep learning framework proposed in [37].", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[18] propose a white-box attack against the privacy-preserving distributed deep learning framework proposed in [37].", "startOffset": 111, "endOffset": 115}, {"referenceID": 30, "context": ", malicious inputs modified to yield erroneous model outputs \u2013 in machine learning in [31].", "startOffset": 86, "endOffset": 90}, {"referenceID": 31, "context": "In particular, [32] study adversarial samples in deep neural networks, showing that inputs crafted by an adversary might result in deep neural networks to misclassify them.", "startOffset": 15, "endOffset": 19}, {"referenceID": 25, "context": "Defense mechanisms based on secure multiparty computation and homomorphic encryption have been proposed to train supervised machine learning models, such as decision trees [26], linear regressors [11], and neural networks [6, 10].", "startOffset": 172, "endOffset": 176}, {"referenceID": 10, "context": "Defense mechanisms based on secure multiparty computation and homomorphic encryption have been proposed to train supervised machine learning models, such as decision trees [26], linear regressors [11], and neural networks [6, 10].", "startOffset": 196, "endOffset": 200}, {"referenceID": 5, "context": "Defense mechanisms based on secure multiparty computation and homomorphic encryption have been proposed to train supervised machine learning models, such as decision trees [26], linear regressors [11], and neural networks [6, 10].", "startOffset": 222, "endOffset": 229}, {"referenceID": 9, "context": "Defense mechanisms based on secure multiparty computation and homomorphic encryption have been proposed to train supervised machine learning models, such as decision trees [26], linear regressors [11], and neural networks [6, 10].", "startOffset": 222, "endOffset": 229}, {"referenceID": 11, "context": "On the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42].", "startOffset": 40, "endOffset": 44}, {"referenceID": 0, "context": "On the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42].", "startOffset": 143, "endOffset": 162}, {"referenceID": 22, "context": "On the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42].", "startOffset": 143, "endOffset": 162}, {"referenceID": 29, "context": "On the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42].", "startOffset": 143, "endOffset": 162}, {"referenceID": 36, "context": "On the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42].", "startOffset": 143, "endOffset": 162}, {"referenceID": 41, "context": "On the other hand, Differential Privacy [12] can mitigate inference attacks, and it has been widely applied to various machine learning models [1, 23, 30, 37, 42].", "startOffset": 143, "endOffset": 162}, {"referenceID": 36, "context": "Shokri and Shmatikov [37] support distributed training of deep learning networks in a privacy-preserving way, i.", "startOffset": 21, "endOffset": 25}, {"referenceID": 0, "context": "[1] show how to train deep neural networks with non-convex objectives, under an acceptable privacy budget, while Papernot et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 29, "context": "[30] combine multiple models trained with disjoint datasets without exposing the (possibly sensitive) models, with applications to non-convex models like deep neural networks.", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "Finally, [33] presents a mechanism called \u201cdefensive distillation\u201d to reduce the effectiveness of adversarial samples on deep neural networks.", "startOffset": 9, "endOffset": 13}, {"referenceID": 16, "context": ", combining high utility and privacy levels) differentially private mechanisms that can be applied to complex deep learning generative models, such as Generative Adversarial Networks (GAN) [17] or Variational Auto-encoders (VAE) [22].", "startOffset": 189, "endOffset": 193}, {"referenceID": 21, "context": ", combining high utility and privacy levels) differentially private mechanisms that can be applied to complex deep learning generative models, such as Generative Adversarial Networks (GAN) [17] or Variational Auto-encoders (VAE) [22].", "startOffset": 229, "endOffset": 233}, {"referenceID": 16, "context": "Generative models based on deep neural networks, such as Generative Adversarial Networks (GAN) [17] and Variational Auto-encoders (VAE) [22] are considered as the state-of-the-art for producing samples of realistic images [21].", "startOffset": 95, "endOffset": 99}, {"referenceID": 21, "context": "Generative models based on deep neural networks, such as Generative Adversarial Networks (GAN) [17] and Variational Auto-encoders (VAE) [22] are considered as the state-of-the-art for producing samples of realistic images [21].", "startOffset": 136, "endOffset": 140}, {"referenceID": 20, "context": "Generative models based on deep neural networks, such as Generative Adversarial Networks (GAN) [17] and Variational Auto-encoders (VAE) [22] are considered as the state-of-the-art for producing samples of realistic images [21].", "startOffset": 222, "endOffset": 226}, {"referenceID": 16, "context": "GANs [17] are neural networks trained in an adversarial manner to generate data mimicking some distribution.", "startOffset": 5, "endOffset": 9}, {"referenceID": 0, "context": "We also define a discriminator D(x; \u03b8d) that outputs D(x) \u2208 [0, 1], representing the probability that x was taken from the training set rather than from the generator G.", "startOffset": 60, "endOffset": 66}, {"referenceID": 16, "context": "After several steps of training, if G and D have enough capacity, they will reach a point at which both cannot improve [17].", "startOffset": 119, "endOffset": 123}, {"referenceID": 21, "context": "VAEs [22] consist of two neural networks (an encoder and a decoder) and a loss function.", "startOffset": 5, "endOffset": 9}, {"referenceID": 23, "context": "[24] combine VAEs and GANs into an unsupervised generative model that simultaneously learns to encode and generate new samples, which contain more details, sampled from the training data-points.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "For instance, social graph knowledge has been used to de-anonymize social networks [28].", "startOffset": 83, "endOffset": 87}, {"referenceID": 33, "context": "Overall, auxiliary/incomplete knowledge of sensitive datasets is a common assumption in prior work [34, 20].", "startOffset": 99, "endOffset": 107}, {"referenceID": 19, "context": "Overall, auxiliary/incomplete knowledge of sensitive datasets is a common assumption in prior work [34, 20].", "startOffset": 99, "endOffset": 107}, {"referenceID": 35, "context": "The attacker model is trained using soft and noisy labels as suggested in [36], i.", "startOffset": 74, "endOffset": 78}, {"referenceID": 16, "context": "Since the introduction of GANs [17], several variants have been proposed aiming to improve training stability and sample quality.", "startOffset": 31, "endOffset": 35}, {"referenceID": 34, "context": "In particular, deep convolutional generative adversarial networks (DCGANs) [35] combine the GAN training process with convolutional neural networks (CNNs).", "startOffset": 75, "endOffset": 79}, {"referenceID": 34, "context": "CNNs are considered the state-of-the-art for a range image recognition tasks and, by combining CNNs with the GAN training processes, DCGANs perform well at unsupervised learning tasks such as generating complex representations of objects and faces [35].", "startOffset": 248, "endOffset": 252}, {"referenceID": 23, "context": "GANs have also been combined with VAEs [24], by collapsing the generator (of the GAN) and decoder (of the VAE) into one, the model uses learned feature representations in the GAN discriminator as the reconstructive error term in the VAE.", "startOffset": 39, "endOffset": 43}, {"referenceID": 4, "context": "8 More recently, Boundary Equilibrium GAN (BEGAN) [5] have been proposed as an approximate measure of convergence.", "startOffset": 50, "endOffset": 53}, {"referenceID": 4, "context": "BEGAN produces realistic samples [5], and is simpler to train since loss convergence and sample quality is linked with one another.", "startOffset": 33, "endOffset": 36}, {"referenceID": 37, "context": "In the Appendix, we also discuss another unsuccessful technique, based on training a shadow model (somewhat inspired by techniques presented in [38]).", "startOffset": 144, "endOffset": 148}, {"referenceID": 37, "context": "Defense strategies against membership inference discussed in [38], such as restricting the prediction vector to the top k classes, coarsening and increasing the entropy of the prediction vector, are not suitable to our attacks, since generative models do not output prediction vectors.", "startOffset": 61, "endOffset": 65}], "year": 2017, "abstractText": "Advances in machine learning are paving the way for the artificial generation of high-quality images and videos. In this paper, however, we show that generating synthetic samples with generative models can lead to information leakage, i.e., an adversary might infer information about individuals whose data is used to train the models. To this end, we train a Generative Adversarial Network (GAN), which combines a discriminative and a generative model, to detect overfitting and recognize inputs that were part of training datasets by relying on the discriminator\u2019s capacity to learn statistical differences in distributions. We present attacks based on both white-box and black-box access to the target model, and show how to improve the latter using limited auxiliary knowledge of samples in the dataset. We test our attacks on several state-of-the-art models, such as Deep Convolutional GAN (DCGAN), Boundary Equilibrium GAN (BEGAN), and the combination of DCGAN with a Variational Autoencoder (DCGAN+VAE), using datasets consisting of complex representations of faces (LFW), objects (CIFAR-10), as well as medical images (Diabetic Retinopathy). The white-box attacks are 100% successful at inferring which samples were used to train the target model, and the black-box ones can infer training set membership with up to over 80% accuracy.", "creator": "LaTeX with hyperref package"}}}