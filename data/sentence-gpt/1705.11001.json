{"id": "1705.11001", "review": {"conference": "nips", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-May-2017", "title": "Adversarial Ranking for Language Generation", "abstract": "Generative adversarial networks (GANs) have great successes on synthesizing data. However, the existing GANs restrict the discriminator to be a binary classifier, and thus limit their learning capacity for tasks that need to synthesize output with rich structures such as natural language descriptions. In this paper, we propose a novel generative adversarial network, RankGAN, for generating high-quality language descriptions. Rather than train the discriminator to learn and assign absolute binary predicate for individual data sample, the proposed RankGAN is able to analyze and rank a collection of human-written and machine-written sentences by giving a reference group. By viewing a set of data samples collectively and evaluating their quality through relative ranking scores, the discriminator is able to make better assessment which in turn helps to learn a better generator. The proposed RankGAN is optimized through the policy gradient technique. Experimental results on multiple public datasets clearly demonstrate the effectiveness of the proposed approach.", "histories": [["v1", "Wed, 31 May 2017 09:21:04 GMT  (592kb)", "http://arxiv.org/abs/1705.11001v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["kevin lin", "dianqi li", "xiaodong he", "zhengyou zhang", "ming-ting sun"], "accepted": true, "id": "1705.11001"}, "pdf": {"name": "1705.11001.pdf", "metadata": {"source": "CRF", "title": "Adversarial Ranking for Language Generation", "authors": ["Kevin Lin", "Dianqi Li", "Xiaodong He", "Zhengyou Zhang", "Ming-Ting Sun"], "emails": ["kvlin@uw.edu,", "dianqili@uw.edu,", "mts@uw.edu,", "xiaohe@microsoft.com", "zhang@microsoft.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 5.\n11 00\n1v 1\n[ cs\n.C L\n] 3\n1 M\nay 2"}, {"heading": "1 Introduction", "text": "Language generation plays an important role in natural language processing, which is essential to many applications such as machine translation [1], image captioning [6], and dialogue systems [25]. Recent studies [9, 10, 27, 32] show that the recurrent neural networks (RNNs) and the long shortterm memory networks (LSTMs) can achieve impressive performances for the task of language generation. In evaluation, metrics such as BLEU [21], METEOR [2], and CIDEr [31] are reported in the literature.\nGenerative adversarial networks (GANs) have drawn great attentions since Goodfellow et al. [8] introduced the framework for generating the synthetic data that is similar to the real one. The main idea behind GANs is to have two neural network models, the discriminator and the generator, competing against each other during learning. The discriminator aims to distinguish the synthetic from the real data, while the generator is trained to confuse the discriminator by generating high quality synthetic data. During learning, the gradient of the training loss from the discriminator is then used as the guidance for updating the parameters of the generator. Since then, GANs achieve great performance in computer vision tasks such as image synthesis [5, 13, 16, 23, 30]. Their successes are mainly attributed to training the discriminator to estimate the statistical properties of the continuous real-valued data (e.g., pixel values).\nThe adversarial learning framework provides a possible way to synthesize language descriptions in high quality. However, GANs have limited progress with natural language processing. Primarily, the GANs have difficulties in dealing with discrete data (e.g., text sequences [3]). In natural languages processing, the text sequences are evaluated as the discrete tokens whose values are nondifferentiable. Therefore, the optimization of GANs is challenging. Secondly, most of the existing\n\u2217The authors contributed equally to this work.\nGANs assume the output of the discriminator to be a binary predicate indicating whether the given sentence is written by human or machine [4, 15, 17, 33, 34]. For the large variety of natural language expressions, this binary predication is too restrictive, since the diversity and richness inside the sentences are constrained by the degenerate distribution due to binary classification.\nIn this paper, we propose a novel adversarial learning framework, RankGAN, for generating highquality language descriptions. RankGAN learns the model from the relative ranking information between the machine- and the human-written sentences in an adversarial framework. In the proposed RankGAN, we relax the training of the discriminator to a learning-to-rank optimization problem. Specifically, the proposed new adversarial network consists of two neural network models, the generator and the ranker. As opposed to performing a binary classification task, we propose to train the ranker to rank the machine-written sentences lower than human-written sentences with respect to a reference sentence which is human-written. Accordingly, we train the generator to synthesize sentences which confuse the ranker so that machine-written sentences are ranked higher than human-written sentences in regard to the reference. During learning, we adopt the policy gradient technique [29] to overcome the non-differentiable problem. Consequently, by viewing a set of data samples collectively and evaluating their quality through relative ranking, the discriminator is able to make better assessment of the quality of the samples, which in turn helps the generator to learn better. Our method is suitable for language learning in comparison to conventional GANs. Experimental results clearly demonstrate that our proposed method outperforms the state-of-the-art methods."}, {"heading": "2 Related works", "text": "GANs: Recently, GANs [8] have been widely explored due to its nature of unsupervised deep learning. Though GANs achieve great successes on computer vision applications [5, 13, 16, 23, 30], there are only a few progresses in natural language processing because the discrete sequences are not differentiable. To tackle the non-differentiable problem, SeqGAN [34] addresses this issue by the policy gradient inspired from the reinforcement learning [28]. The approach considers each word in the sentence as an action, and computes the reward of the sequence with the Monte Carlo (MC) search. Their method back-propagates the reward from the discriminator, and encourages the generator to create human-like language sentences. Li et al. [17] apply GANs with the policy gradient method to dialogue generation. They train a Seq2Seq model as the generator, and build the discriminator using a hierarchical encoder followed by a 2-way softmax function. Dai et al. [4] show that it is possible to enhance the diversity of the generated image captions with conditional GANs. Yang et al. [33] further proof that training a convolutional neural network (CNN) as a discriminator yields better performance than that of the recurrent neural network (RNN) for the task of machine translation (MT). Despite many new advances in language generation with GANs, their discriminator is limited to binary regression.\nLearning to rank: Learning to rank plays an essential role in Information Retrieval (IR) [20]. The ranking technique has been proofed effective for searching documents [11] and images [22]. Given a reference, the desired information (such as click-through logs [14]) is incorporated into the ranking function which aims to encourage the relevant documents to be returned as early as possible. Our proposed RankGAN is one of the first generative adversarial network which learns by relative ranking information."}, {"heading": "3 Method", "text": ""}, {"heading": "3.1 Overall architecture", "text": "In conventional GANs [8], the discriminator with multilayer perceptrons outputs a single probability distribution to suggest whether the unknown sequences come from the real data rather than the data synthesized by a generator. Contrast to conventional GANs, RankGAN consists of a sequence generator G and a ranker R, where the R can endow a relative rank among the sequences when given a reference. As illustrated in Figure 1, the learning objective of G is to produce a synthetic sentence that receives higher rank score than those drawn from real data. However, the goal of R is\nto rank the synthetic sentence lower than human written sentences. Thus, this can be treated as G and R play a minimax game with the objective function L:\nmin \u03b8 max \u03c6 L(G\u03b8, R\u03c6) = E s\u223cPh\n[\nlogR\u03c6(s|U, C \u2212)\n]\n+ E s\u223cG\u03b8\n[\nlog(1\u2212R\u03c6(s|U, C +))\n]\n(1)\nwhere \u03b8 and \u03c6 are the variable parameters inG andR, respectively. TheE is the expectation operator, and Ph is the real data from human written sentences. The U is the reference set used for estimating relative ranks, and C+, C\u2212 are the comparison set with regard to different input sentences s. When the input sentence s is the real data, C\u2212 is pre-sampled from generated data; If the input sentence s is the synthetic data, the C+ is pre-sampled from human-written data.\nThe forms of G\u03b8 and R\u03c6 can be achieved in many ways. In this paper, we design the generative model with the long short-term memory networks (LSTMs) [10]. A LSTM iteratively takes the embedded features of the current token wt plus the information in the hidden state ht\u22121 and the cell state ct\u22121 from previous stages, and updates the current states ht and ct. Additionally, the subsequent word wt+1 is conditionally sampled subjects to the probability distribution p(wt+1|ht) which is determined by the value of the current hidden state ht. Benefiting from the capacity of LSTMs, our generative model can conserve long-term gradient information and produce more delicate word sequences s = (w0, w1, w2, ..., wT ), where T is the sequence length.\nRecent studies show that the convolutional neural network can achieve high performance for machine translation [7, 33] and text classification [35]. The proposed ranker R, which shares the similar convolutional architecture, first maps concatenated sequence matrices into the embedded feature vectors ys = F(s) through a series of nonlinear functions F. Then, the ranking score will be calculated for the sequence features ys with the reference feature yu which is extracted by R in advance."}, {"heading": "3.2 Rank score", "text": "More disparities between sentences can be observed by contrasts. Inspired by this, unlike the conventional GANs, our architecture possesses a novel comparison system that evaluates the relative ranking scores among sentences. Following the ranking steps commonly used in Web search [11], the relevance score of the input sequence s given a reference u is measured as:\n\u03b1(s|u) = cosine(ys, yu) = ys \u00b7 yu\n\u2016ys\u2016\u2016yu\u2016 (2)\nwhere the yu and ys are the embedded feature vectors of the reference and the input sequence, respectively. \u2016\u00b7\u2016 denotes the norm operator. Then, a softmax-like formula is used to compute the ranking score for a certain sequence s given a comparison set C:\nP (s|u, C) = exp(\u03b3\u03b1(s|u)) \u2211\ns \u2032 \u2208C\n\u2032 exp(\u03b3\u03b1(s\u2032 |u)) (3)\nThe parameter \u03b3, whose value is set empirically during experiments, shares the similar idea with the Boltzmann exploration [28] method in reinforcement learning. Lower \u03b3 causes all sentences to be nearly equiprobable, while higher \u03b3 increases the biases toward the sentence with the greater score. The set C \u2032 = C \u222a {s} denotes the set of input sentences to be ranked.\nThe collective ranking score for an input sentence is an expectation of its scores given different references sampled across the reference space. During learning, we randomly sample a set of references from human written sentences to construct the reference set U . Meanwhile, the comparison set C will be constructed according to the type of the input sentence s, i.e., C is sampled from the human written set if s is a synthetic sentence produced by G, and vice versa. With the above setting, the expected log ranking score computed for the input sentence s can be derived by:\nlogR\u03c6(s|U, C) = E u\u2208U log [P (s|u, C)] (4)\nHere, s is the input sentence. It is either human-written or produced by G\u03b8 . Accordingly, the comparison set C is C+ if s is generated by machine, and vice versa. Given the reference set and the comparison set, we are able to compute the rank scores indicating the relative ranks for the complete sentences. The ranking scores will be used for the objective functions of generator G\u03b8 and ranker R\u03c6."}, {"heading": "3.3 Training", "text": "In conventional settings, GANs are designed for generating real-valued image data and thus the generatorG\u03b8 consists of a series of differential functions with continuous parameters guided by the objective function from discriminatorD\u03c6 [8]. Unfortunately, the synthetic data in the text generation task is based on discrete symbols, which are hard to update through common back-propagation. To solve this issue, we adopt the Policy Gradient method [29], which has been widely used in reinforcement learning.\nSuppose the vocabulary set is V , at time step t, the previous tokens generated in the sequence are (w0, w1, ..., wt\u22121), where all words wi \u2208 V . When compared to the typical reinforcement learning algorithms, the existing sequence s1:t\u22121 = (w0, w1, ..., wt\u22121) is the current state, the next word wt that selected in the next step is an action sampling from the policy \u03c0\u03b8(wt|s1:t\u22121). Since we useG to generate the next token, the policy \u03c0\u03b8 equals to p(wt|s1:t\u22121) which has been mentioned previously, and \u03b8 is the parameter set in generatorG. Once the generator reaches the end of one sequence (i.e., s = s1:T ), it receives a ranking reward R(s|U, C) according to the comparison set C and its related reference set U .\nNote that in reinforcement learning, the current reward is compromised by the rewards from intermediate states and future states. However, in text generation, the generator G\u03b8 obtains the reward if and only if one sequence has been completely generated, which means no intermediate reward is gained before the sequence hits the end symbol. To relieve this problem, we utilize the Monte Carlo rollouts methods [4, 34] to simulate intermediate rewards when a sequence is incomplete. Then, the expected future reward V for partial sequences can be computed by:\nV\u03b8,\u03c6(s1:t\u22121, U) = E sr\u223cG\u03b8\n[\nlogR\u03c6(sr|U, C +, s1:t\u22121)\n]\n(5)\nHere, sr represents the complete sentence sampled by rollout methods with the given starter sequence s1:t\u22121. To be more specific, the beginning words (w0, w1, ..., wt\u22121) were fixed and the rest words were consecutively simulated by G\u03b8 until the last token is picked up. We denote this as the \u201cpath\u201d generated by the current policy. We keep sampling n different paths with the corresponding\nranking scores. Then, the average ranking score will be used for approximating the expected future reward for the current partial sequence.\nWith the feasible intermediate rewards, we can finalize the objective function for complete sentences. Refer to the proof in [29], the gradient of the objective function for generator G can be formulated as:\n\u2207\u03b8L\u03b8(s0) = E s1:T\u223cG\u03b8\n[\nT \u2211\nt=1\n\u2211\nwt\u2208V\n\u2207\u03b8\u03c0\u03b8(wt|s1:t\u22121)V\u03b8,\u03c6(s1:t, U)\n]\n(6)\nwhere \u2207\u03b8 is the partial differential operator. The start state s0 is the first generated token w0. Es1:T \u223cG\u03b8 is the mean over all sampled complete sentences based on current generator\u2019s parameter \u03b8 within one minibatch. Note that we only compute the partial derivatives for \u03b8, as the R\u03c6 is fixed during the training of generator. Importantly, different from the gradient policy methods in other works [4, 19, 34], our method replaces the simple binary outputs with a ranking system based on multiple sentences, which can better reflect the quality of the imitate sentences and facilitate effective training of the generatorG.\nTo train the ranker\u2019s parameter set \u03c6, we can fix the parameters in \u03b8 and maximize the objective equation (1). In practice, however, it has been found that the network model learns better by minimizing log(R\u03c6(s|U, C +)) instead of maximizing log(1 \u2212 R\u03c6(s|U, C +)), where s \u223c G\u03b8 . This is similar to the finding in [24]. Hence, during the training of R\u03c6, we maximize the following ranking objective function:\nL\u03c6 = E s\u223cPh\n[\nlogR\u03c6(s|U, C \u2212)\n]\n\u2212 E s\u223cG\u03b8\n[\nlogR\u03c6(s|U, C +)\n]\n(7)\nIt is worthwhile to note that when the evaluating data comes from the human written sentences, the comparison set C\u2212 is sampled from the generated sentences through G\u03b8; In contrast, if the estimating data belongs to the synthetic sentences, C+ consists of human written sentences. We found empirically that this gives more stable training."}, {"heading": "4 Experimental results", "text": "Following the evaluation protocol in [34], we first carry out experiments on the data and simulator proposed in [34]. Then, we compare the performance of RankGAN with other state-of-the-art methods on multiple public language datasets including Chinese poems [36], COCO captions [18], and Shakespear\u2019s plays [26]."}, {"heading": "4.1 Simulation on synthetic data", "text": "We first conduct the test on the dataset proposed in [34]. The synthetic data2 is a set of sequential tokens which can be seen as the simulated data comparing to the real-word language data. We conduct this simulation to validate that the proposed method is able to capture the dependency of the sequential tokens. In the simulation, we firstly collect 10, 000 sequential data generated by the oracle model (or true model) as the training set. Note that the oracle model we used is a random initialized LSTM which is publicly available2. During learning, we randomly select one training\n2The synthetic data and the oracle model (LSTM model) are public available at https://github.com/LantaoYu/SeqGAN\nsentence and one generated sentence from RankGAN to form the input set C \u2032\n. Then, given the reference sample which is also randomly selected from the training set, we compute the ranking score and optimize the proposed objective function. Note that the sentence length of the training data is fixed to 20 for simplicity.\nFollowing the evaluation protocol in [34], we evaluate the machine-written sentences by stimulating the Turing test. In the synthetic data experiment, the oracle model, which plays the role as the human, generates the \"human-written\" sentences following its intrinsic data distribution Po. We assume these sentences are the ground truth sentences used for training, thus each model should learn and imitate the sentences from Po. At the test stage, obviously, the generated sentences from each model will be evaluated by the original oracle model. Following this, we take the sentences generated by RankGAN as the input of the oracle model, and estimate the average negative loglikelihood (NLL) [12]. The lower the NLL score is, the higher probability the generated sentence will pass the Turing test.\nWe compare our approach with the state-of-the-art methods including maximum likelihood estimation (MLE), policy gradient with BLEU (PG-BLEU), and SeqGAN [34]. The PG-BLEU computes the BLEU score to measure the similarity between the generated sentence and the human-written sentences, then takes the BLEU score as the reward to update the generator with policy gradient. Because PG-BLEU also learns the similarity information during training, it can be seen as a baseline comparing to our approach. It\u2019s noteworthy that while the PG-BLEU grasps the similarities depend on the n-gramsmatching from the token-level among sentences, RankGAN explores the ranking connections inside the embedded features of sentences. These two methods are fundamentally different. Table 1 shows the performance comparison of RankGAN and the other methods. It can be seen that the proposed RankGAN performs more favourably against the compared methods. Figure 2 shows the learning curves of different approaches with respect to different training epochs. While MLE, PG-BLEU and SeqGAN tend to converge after 200 training epochs, the proposed RankGAN consistently improves the language generator and achieve relatively lower NLL score. The results suggest that the proposed ranking objective, which relaxes the binary restriction of the discriminator, is able to learn effective language generator. It is worth noting that the proposed RankGAN achieves better performance than that of PG-BLUE. This indicates employing the ranking information as the reward is more informative than making use of the BLEU score that stands on token-level similarities.\nConventional GANs employ a binary classifier to distinguish the human-written and the machinecreated sentences. Though effective, it is also very restrictive for tasks like natural language generation, where rich structures and various language expressions need to be considered. For these tasks,\nusually a relative quality assessment is more suitable. The proposed RankGAN is able to perform quality assessment in a relative space, and therefore, rather than train the discriminator to assign the absolute 0 or 1 binary predicate to the synthesized or real data sample, we expect the discriminator to rank the synthetic data compared to the real data in the relative assessment space where better quality judgements of different data samples can be obtained. Given the rewards with the relative ranking information, the proposed RankGAN is possible to learn better language generator than the compared state-of-the-art methods."}, {"heading": "4.2 Results on Chinese poems composition", "text": "To evaluate the performance of our language generator, we compare our method with other approaches including MLE and SeqGAN [34] on the real-word language data. We conduct experiments on the Chinese poem dataset [36], which contains 13, 123 five-word quatrain poems. Each poem has 4 sentences, and each sentence contains 5 words resulting in a total of 20 words. After the standard pre-processing which replaces the non-frequently used words (appeared less than 5 times) with the special character UNK, we train our model on the dataset and generate the poem. To keep the proposed method general, our model does not take advantage of any prior knowledge such as phonology during learning.\nFollowing the evaluation protocol in [34, 36], we compute the BLEU-2 score and estimate the similarity between the human-written poem and the machine-created one. Table 2 summarizes the BLEU-2 score of different methods. It can be seen that the proposed RankGAN performs more favourably compared to the state-of-the-art methods in terms of BLEU-2 score. This indicates that the proposed objective is able to learn effective language generator with real-world data.\nWe further conduct human study to evaluate the quality of the generated poem in human perspective. Specifically, we invite 57 participants who are native mandarin Chinese speakers to score the poems. During the evaluation, we randomly sample and show 15 poemswritten by differentmethods, including RankGAN, SeqGAN, and written by human. Then, we ask the subjects to evaluate the quality of the poem by grading the poem from 1 to 10 points. It can be seen in Table 2, human-written poems receive the highest score comparing to the machine-written one. RankGAN outperforms the compared methods in terms of the human evaluation score. The results suggest that the ranking score is informative for the generator to create human-like sentences."}, {"heading": "4.3 Results on COCO image captions", "text": "We further evaluate our method on the large-scale dataset for the purpose of testing the stability of our model. We test our method on the image captions provided by the COCO dataset [18]. The captions are the narrative sentences written by human, and each sentence is at least 8 words and at most 20 words. We randomly select 80, 000 captions as the training set, and select 5, 000 captions to form the validation set. We replace the words appeared less than 5 times with UNK character. Since the proposed RankGAN belongs to unconditional GANs that does not consider any prior knowledge as input, we train our model without the image data.\nSimilar to the experiment shown in previous section, we compute the BLUE scores to measure the similarity between the generated sentences and the human-written sentences in the validation set. Table 3 shows the performance comparison of different methods. RankGAN achieves better performance than the other methods in terms of different BLEU scores. The results show that RankGAN is able to learn effective language generator in a large corpus.\nWe also conduct human study to evaluate the quality of the generated sentences. We invite 28 participants who are native or proficient English speakers to grade the sentences. Similar to the setting in previous section, we randomly sample and show 15 sentences written by differentmethods, and ask the subjects to grade from 1 to 10 points. Table 3 shows the human evaluation scores. As can be seen, the human-written sentences get the highest score comparing to the language models. Among the GANs approaches, RankGAN receives better score than SeqGAN, which is consistent to the finding in the Chinese poem composition. The results demonstrate that the proposed learning objective is capable to increase the diversity of the wording making it realistic toward human-like language description."}, {"heading": "4.4 Results on Shakespeare\u2019s plays", "text": "Finally, we investigate the possibility of learning Shakespeare\u2019s lexical dependency, and make use of the rare phrases. In this experiment, we train our model on the Romeo and Juliet play [26] to further validate the proposed method. The script is splited into 2, 500 training sentences and 565 test sentences. To learn the rare words in the script, we adjust the threshold of UNK from 5 to 2. Table 4 shows the performance comparison of the proposed RankGAN and the other methods including MLE and SeqGAN. As can be seen, the proposed method achieves consistently higher BLEU score than the other methods in terms of the different n-grams criteria. The results indicate the proposed RankGAN is able to capture the transition pattern among the words, even if the training sentences are novel, delicate and complicated."}, {"heading": "5 Conclusion", "text": "We presented a new generative adversarial network, RankGAN, for generating high-quality natural language descriptions. Instead of training the discriminator to assign absolute binary predicate to real or synthesized data samples, we propose using a ranker to rank the human-written sentences higher than the machine-written sentences relatively. We then train the generator to synthesize natural language sentences that can be ranked higher than the human-written one. By relaxing the binary-classification restriction and conceiving a relative space with rich information for the discriminator in the adversarial learning framework, the proposed learning objective is favourable for synthesizing natural language sentences in high quality. Experimental results on multiple public datasets demonstrate that our method achieves significantly better performance than previous stateof-the-art language generators."}], "references": [{"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1409.0473,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Meteor: An automatic metric for mt evaluation with improved correlation with human judgments", "author": ["Satanjeev Banerjee", "Alon Lavie"], "venue": "In Proc. ACL workshops,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Generating sentences from a continuous space", "author": ["Samuel R Bowman", "Luke Vilnis", "Oriol Vinyals", "Andrew M Dai", "Rafal Jozefowicz", "Samy Bengio"], "venue": "Proc. CoNLL,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "Towards diverse and natural image descriptions via a conditional gan", "author": ["Bo Dai", "Dahua Lin", "Raquel Urtasun", "Sanja Fidler"], "venue": "arXiv preprint arXiv:1703.06029,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2017}, {"title": "Deep generative image models using a laplacian pyramid of adversarial networks", "author": ["Emily L Denton", "Soumith Chintala", "Rob Fergus"], "venue": "In Proc. NIPS,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "From captions to visual concepts and back", "author": ["Hao Fang", "Saurabh Gupta", "Forrest Iandola", "Rupesh K Srivastava", "Li Deng", "Piotr Doll\u00e1r", "Jianfeng Gao", "Xiaodong He", "Margaret Mitchell", "John C Platt"], "venue": "In Proc. CVPR,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Convolutional sequence to sequence learning", "author": ["Jonas Gehring", "Michael Auli", "David Grangier", "Denis Yarats", "Yann N Dauphin"], "venue": "arXiv preprint arXiv:1705.03122,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2017}, {"title": "Generative adversarial nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio"], "venue": "In Proc. NIPS,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "Generating sequences with recurrent neural networks", "author": ["Alex Graves"], "venue": "arXiv preprint arXiv:1308.0850,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1997}, {"title": "Learning deep structured semantic models for web search using clickthrough data", "author": ["Po-Sen Huang", "Xiaodong He", "Jianfeng Gao", "Li Deng", "Alex Acero", "Larry Heck"], "venue": "In Proc. CIKM,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "How (not) to train your generative model: Scheduled sampling, likelihood, adversary", "author": ["Ferenc Husz\u00e1r"], "venue": "arXiv preprint arXiv:1511.05101,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Image-to-image translation with conditional adversarial networks", "author": ["Phillip Isola", "Jun-Yan Zhu", "Tinghui Zhou", "Alexei A Efros"], "venue": "In Proc. CVPR,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2017}, {"title": "Optimizing search engines using clickthrough data", "author": ["Thorsten Joachims"], "venue": "In Proc. SIGKDD,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2002}, {"title": "Gans for sequences of discrete elements with the gumbel-softmax distribution", "author": ["Matt J Kusner", "Jos\u00e9 Miguel Hern\u00e1ndez-Lobato"], "venue": "arXiv preprint arXiv:1611.04051,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2016}, {"title": "Photo-realistic single image superresolution using a generative adversarial network", "author": ["Christian Ledig", "Lucas Theis", "Ferenc Husz\u00e1r", "Jose Caballero", "Andrew Cunningham", "Alejandro Acosta", "Andrew Aitken", "Alykhan Tejani", "Johannes Totz", "Zehan Wang"], "venue": "arXiv preprint arXiv:1609.04802,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "Adversarial learning for neural dialogue generation", "author": ["Jiwei Li", "Will Monroe", "Tianlin Shi", "Alan Ritter", "Dan Jurafsky"], "venue": "arXiv preprint arXiv:1701.06547,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2017}, {"title": "Microsoft coco: Common objects in context", "author": ["Tsung-Yi Lin", "Michael Maire", "Serge Belongie", "James Hays", "Pietro Perona", "Deva Ramanan", "Piotr Doll\u00e1r", "C Lawrence Zitnick"], "venue": "In Proc. ECCV,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "Learning to rank for information retrieval", "author": ["Tie-Yan Liu"], "venue": "Foundations and Trends R  \u00a9 in Information Retrieval,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2009}, {"title": "Bleu: a method for automatic evaluation of machine translation", "author": ["Kishore Papineni", "Salim Roukos", "Todd Ward", "Wei-Jing Zhu"], "venue": "In Proc. ACL,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2002}, {"title": "Relative attributes", "author": ["Devi Parikh", "Kristen Grauman"], "venue": "In Proc. ICCV, pages 503\u2013510,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2011}, {"title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "author": ["Alec Radford", "Luke Metz", "Soumith Chintala"], "venue": "arXiv preprint arXiv:1511.06434,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}, {"title": "Generative adversarial text to image synthesis", "author": ["Scott Reed", "Zeynep Akata", "Xinchen Yan", "Lajanugen Logeswaran", "Bernt Schiele", "Honglak Lee"], "venue": "In Proc. NIPS,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2016}, {"title": "Generating recommendation dialogs by extracting information from user reviews", "author": ["Kevin Reschke", "Adam Vogel", "Dan Jurafsky"], "venue": "In ACL,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2013}, {"title": "The complete works of William Shakespeare", "author": ["William Shakespeare"], "venue": "Race Point Publishing,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2014}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V Le"], "venue": "In Proc. NIPS,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2014}, {"title": "Reinforcement learning: An introduction, volume 1", "author": ["Richard S Sutton", "Andrew G Barto"], "venue": "MIT press Cambridge,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1998}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["Richard S Sutton", "David A McAllester", "Satinder P Singh", "Yishay Mansour"], "venue": "In NIPS,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1999}, {"title": "Improved regret bounds for oracle-based adversarial contextual bandits", "author": ["Vasilis Syrgkanis", "Haipeng Luo", "Akshay Krishnamurthy", "Robert E Schapire"], "venue": "In Proc. NIPS,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2016}, {"title": "Cider: Consensus-based image description evaluation", "author": ["Ramakrishna Vedantam", "C Lawrence Zitnick", "Devi Parikh"], "venue": "In Proc. CVPR,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2015}, {"title": "Google\u2019s neural machine translation system: Bridging the gap between human and machine translation", "author": ["Yonghui Wu", "Mike Schuster", "Zhifeng Chen", "Quoc V Le", "Mohammad Norouzi", "Wolfgang Macherey", "Maxim Krikun", "Yuan Cao", "Qin Gao", "Klaus Macherey"], "venue": "arXiv preprint arXiv:1609.08144,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2016}, {"title": "Improving neural machine translation with conditional sequence generative adversarial nets", "author": ["Zhen Yang", "Wei Chen", "Feng Wang", "Bo Xu"], "venue": "arXiv preprint arXiv:1703.04887,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2017}, {"title": "Seqgan: sequence generative adversarial nets with policy gradient", "author": ["Lantao Yu", "Weinan Zhang", "Jun Wang", "Yong Yu"], "venue": "In Proc. AAAI,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2017}, {"title": "Text understanding from scratch", "author": ["Xiang Zhang", "Yann LeCun"], "venue": "arXiv preprint arXiv:1502.01710,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2015}, {"title": "Chinese poetry generation with recurrent neural networks", "author": ["Xingxing Zhang", "Mirella Lapata"], "venue": "In Proc. EMNLP,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Language generation plays an important role in natural language processing, which is essential to many applications such as machine translation [1], image captioning [6], and dialogue systems [25].", "startOffset": 144, "endOffset": 147}, {"referenceID": 5, "context": "Language generation plays an important role in natural language processing, which is essential to many applications such as machine translation [1], image captioning [6], and dialogue systems [25].", "startOffset": 166, "endOffset": 169}, {"referenceID": 23, "context": "Language generation plays an important role in natural language processing, which is essential to many applications such as machine translation [1], image captioning [6], and dialogue systems [25].", "startOffset": 192, "endOffset": 196}, {"referenceID": 8, "context": "Recent studies [9, 10, 27, 32] show that the recurrent neural networks (RNNs) and the long shortterm memory networks (LSTMs) can achieve impressive performances for the task of language generation.", "startOffset": 15, "endOffset": 30}, {"referenceID": 9, "context": "Recent studies [9, 10, 27, 32] show that the recurrent neural networks (RNNs) and the long shortterm memory networks (LSTMs) can achieve impressive performances for the task of language generation.", "startOffset": 15, "endOffset": 30}, {"referenceID": 25, "context": "Recent studies [9, 10, 27, 32] show that the recurrent neural networks (RNNs) and the long shortterm memory networks (LSTMs) can achieve impressive performances for the task of language generation.", "startOffset": 15, "endOffset": 30}, {"referenceID": 30, "context": "Recent studies [9, 10, 27, 32] show that the recurrent neural networks (RNNs) and the long shortterm memory networks (LSTMs) can achieve impressive performances for the task of language generation.", "startOffset": 15, "endOffset": 30}, {"referenceID": 19, "context": "In evaluation, metrics such as BLEU [21], METEOR [2], and CIDEr [31] are reported in the literature.", "startOffset": 36, "endOffset": 40}, {"referenceID": 1, "context": "In evaluation, metrics such as BLEU [21], METEOR [2], and CIDEr [31] are reported in the literature.", "startOffset": 49, "endOffset": 52}, {"referenceID": 29, "context": "In evaluation, metrics such as BLEU [21], METEOR [2], and CIDEr [31] are reported in the literature.", "startOffset": 64, "endOffset": 68}, {"referenceID": 7, "context": "[8] introduced the framework for generating the synthetic data that is similar to the real one.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "Since then, GANs achieve great performance in computer vision tasks such as image synthesis [5, 13, 16, 23, 30].", "startOffset": 92, "endOffset": 111}, {"referenceID": 12, "context": "Since then, GANs achieve great performance in computer vision tasks such as image synthesis [5, 13, 16, 23, 30].", "startOffset": 92, "endOffset": 111}, {"referenceID": 15, "context": "Since then, GANs achieve great performance in computer vision tasks such as image synthesis [5, 13, 16, 23, 30].", "startOffset": 92, "endOffset": 111}, {"referenceID": 21, "context": "Since then, GANs achieve great performance in computer vision tasks such as image synthesis [5, 13, 16, 23, 30].", "startOffset": 92, "endOffset": 111}, {"referenceID": 28, "context": "Since then, GANs achieve great performance in computer vision tasks such as image synthesis [5, 13, 16, 23, 30].", "startOffset": 92, "endOffset": 111}, {"referenceID": 2, "context": ", text sequences [3]).", "startOffset": 17, "endOffset": 20}, {"referenceID": 3, "context": "GANs assume the output of the discriminator to be a binary predicate indicating whether the given sentence is written by human or machine [4, 15, 17, 33, 34].", "startOffset": 138, "endOffset": 157}, {"referenceID": 14, "context": "GANs assume the output of the discriminator to be a binary predicate indicating whether the given sentence is written by human or machine [4, 15, 17, 33, 34].", "startOffset": 138, "endOffset": 157}, {"referenceID": 16, "context": "GANs assume the output of the discriminator to be a binary predicate indicating whether the given sentence is written by human or machine [4, 15, 17, 33, 34].", "startOffset": 138, "endOffset": 157}, {"referenceID": 31, "context": "GANs assume the output of the discriminator to be a binary predicate indicating whether the given sentence is written by human or machine [4, 15, 17, 33, 34].", "startOffset": 138, "endOffset": 157}, {"referenceID": 32, "context": "GANs assume the output of the discriminator to be a binary predicate indicating whether the given sentence is written by human or machine [4, 15, 17, 33, 34].", "startOffset": 138, "endOffset": 157}, {"referenceID": 27, "context": "During learning, we adopt the policy gradient technique [29] to overcome the non-differentiable problem.", "startOffset": 56, "endOffset": 60}, {"referenceID": 7, "context": "GANs: Recently, GANs [8] have been widely explored due to its nature of unsupervised deep learning.", "startOffset": 21, "endOffset": 24}, {"referenceID": 4, "context": "Though GANs achieve great successes on computer vision applications [5, 13, 16, 23, 30], there are only a few progresses in natural language processing because the discrete sequences are not differentiable.", "startOffset": 68, "endOffset": 87}, {"referenceID": 12, "context": "Though GANs achieve great successes on computer vision applications [5, 13, 16, 23, 30], there are only a few progresses in natural language processing because the discrete sequences are not differentiable.", "startOffset": 68, "endOffset": 87}, {"referenceID": 15, "context": "Though GANs achieve great successes on computer vision applications [5, 13, 16, 23, 30], there are only a few progresses in natural language processing because the discrete sequences are not differentiable.", "startOffset": 68, "endOffset": 87}, {"referenceID": 21, "context": "Though GANs achieve great successes on computer vision applications [5, 13, 16, 23, 30], there are only a few progresses in natural language processing because the discrete sequences are not differentiable.", "startOffset": 68, "endOffset": 87}, {"referenceID": 28, "context": "Though GANs achieve great successes on computer vision applications [5, 13, 16, 23, 30], there are only a few progresses in natural language processing because the discrete sequences are not differentiable.", "startOffset": 68, "endOffset": 87}, {"referenceID": 32, "context": "To tackle the non-differentiable problem, SeqGAN [34] addresses this issue by the policy gradient inspired from the reinforcement learning [28].", "startOffset": 49, "endOffset": 53}, {"referenceID": 26, "context": "To tackle the non-differentiable problem, SeqGAN [34] addresses this issue by the policy gradient inspired from the reinforcement learning [28].", "startOffset": 139, "endOffset": 143}, {"referenceID": 16, "context": "[17] apply GANs with the policy gradient method to dialogue generation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "[4] show that it is possible to enhance the diversity of the generated image captions with conditional GANs.", "startOffset": 0, "endOffset": 3}, {"referenceID": 31, "context": "[33] further proof that training a convolutional neural network (CNN) as a discriminator yields better performance than that of the recurrent neural network (RNN) for the task of machine translation (MT).", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "Learning to rank: Learning to rank plays an essential role in Information Retrieval (IR) [20].", "startOffset": 89, "endOffset": 93}, {"referenceID": 10, "context": "The ranking technique has been proofed effective for searching documents [11] and images [22].", "startOffset": 73, "endOffset": 77}, {"referenceID": 20, "context": "The ranking technique has been proofed effective for searching documents [11] and images [22].", "startOffset": 89, "endOffset": 93}, {"referenceID": 13, "context": "Given a reference, the desired information (such as click-through logs [14]) is incorporated into the ranking function which aims to encourage the relevant documents to be returned as early as possible.", "startOffset": 71, "endOffset": 75}, {"referenceID": 7, "context": "In conventional GANs [8], the discriminator with multilayer perceptrons outputs a single probability distribution to suggest whether the unknown sequences come from the real data rather than the data synthesized by a generator.", "startOffset": 21, "endOffset": 24}, {"referenceID": 9, "context": "In this paper, we design the generative model with the long short-term memory networks (LSTMs) [10].", "startOffset": 95, "endOffset": 99}, {"referenceID": 6, "context": "Recent studies show that the convolutional neural network can achieve high performance for machine translation [7, 33] and text classification [35].", "startOffset": 111, "endOffset": 118}, {"referenceID": 31, "context": "Recent studies show that the convolutional neural network can achieve high performance for machine translation [7, 33] and text classification [35].", "startOffset": 111, "endOffset": 118}, {"referenceID": 33, "context": "Recent studies show that the convolutional neural network can achieve high performance for machine translation [7, 33] and text classification [35].", "startOffset": 143, "endOffset": 147}, {"referenceID": 10, "context": "Following the ranking steps commonly used in Web search [11], the relevance score of the input sequence s given a reference u is measured as:", "startOffset": 56, "endOffset": 60}, {"referenceID": 26, "context": "The parameter \u03b3, whose value is set empirically during experiments, shares the similar idea with the Boltzmann exploration [28] method in reinforcement learning.", "startOffset": 123, "endOffset": 127}, {"referenceID": 7, "context": "In conventional settings, GANs are designed for generating real-valued image data and thus the generatorG\u03b8 consists of a series of differential functions with continuous parameters guided by the objective function from discriminatorD\u03c6 [8].", "startOffset": 235, "endOffset": 238}, {"referenceID": 27, "context": "To solve this issue, we adopt the Policy Gradient method [29], which has been widely used in reinforcement learning.", "startOffset": 57, "endOffset": 61}, {"referenceID": 3, "context": "To relieve this problem, we utilize the Monte Carlo rollouts methods [4, 34] to simulate intermediate rewards when a sequence is incomplete.", "startOffset": 69, "endOffset": 76}, {"referenceID": 32, "context": "To relieve this problem, we utilize the Monte Carlo rollouts methods [4, 34] to simulate intermediate rewards when a sequence is incomplete.", "startOffset": 69, "endOffset": 76}, {"referenceID": 27, "context": "Refer to the proof in [29], the gradient of the objective function for generator G can be formulated as:", "startOffset": 22, "endOffset": 26}, {"referenceID": 3, "context": "Importantly, different from the gradient policy methods in other works [4, 19, 34], our method replaces the simple binary outputs with a ranking system based on multiple sentences, which can better reflect the quality of the imitate sentences and facilitate effective training of the generatorG.", "startOffset": 71, "endOffset": 82}, {"referenceID": 32, "context": "Importantly, different from the gradient policy methods in other works [4, 19, 34], our method replaces the simple binary outputs with a ranking system based on multiple sentences, which can better reflect the quality of the imitate sentences and facilitate effective training of the generatorG.", "startOffset": 71, "endOffset": 82}, {"referenceID": 22, "context": "This is similar to the finding in [24].", "startOffset": 34, "endOffset": 38}, {"referenceID": 32, "context": "Following the evaluation protocol in [34], we first carry out experiments on the data and simulator proposed in [34].", "startOffset": 37, "endOffset": 41}, {"referenceID": 32, "context": "Following the evaluation protocol in [34], we first carry out experiments on the data and simulator proposed in [34].", "startOffset": 112, "endOffset": 116}, {"referenceID": 34, "context": "Then, we compare the performance of RankGAN with other state-of-the-art methods on multiple public language datasets including Chinese poems [36], COCO captions [18], and Shakespear\u2019s plays [26].", "startOffset": 141, "endOffset": 145}, {"referenceID": 17, "context": "Then, we compare the performance of RankGAN with other state-of-the-art methods on multiple public language datasets including Chinese poems [36], COCO captions [18], and Shakespear\u2019s plays [26].", "startOffset": 161, "endOffset": 165}, {"referenceID": 24, "context": "Then, we compare the performance of RankGAN with other state-of-the-art methods on multiple public language datasets including Chinese poems [36], COCO captions [18], and Shakespear\u2019s plays [26].", "startOffset": 190, "endOffset": 194}, {"referenceID": 32, "context": "Table 1: The performance comparison of different methods on the synthetic data [34] in terms of the negative log-likelihood (NLL) scores.", "startOffset": 79, "endOffset": 83}, {"referenceID": 32, "context": "We first conduct the test on the dataset proposed in [34].", "startOffset": 53, "endOffset": 57}, {"referenceID": 32, "context": "Following the evaluation protocol in [34], we evaluate the machine-written sentences by stimulating the Turing test.", "startOffset": 37, "endOffset": 41}, {"referenceID": 11, "context": "Following this, we take the sentences generated by RankGAN as the input of the oracle model, and estimate the average negative loglikelihood (NLL) [12].", "startOffset": 147, "endOffset": 151}, {"referenceID": 32, "context": "We compare our approach with the state-of-the-art methods including maximum likelihood estimation (MLE), policy gradient with BLEU (PG-BLEU), and SeqGAN [34].", "startOffset": 153, "endOffset": 157}, {"referenceID": 32, "context": "To evaluate the performance of our language generator, we compare our method with other approaches including MLE and SeqGAN [34] on the real-word language data.", "startOffset": 124, "endOffset": 128}, {"referenceID": 34, "context": "We conduct experiments on the Chinese poem dataset [36], which contains 13, 123 five-word quatrain poems.", "startOffset": 51, "endOffset": 55}, {"referenceID": 32, "context": "Following the evaluation protocol in [34, 36], we compute the BLEU-2 score and estimate the similarity between the human-written poem and the machine-created one.", "startOffset": 37, "endOffset": 45}, {"referenceID": 34, "context": "Following the evaluation protocol in [34, 36], we compute the BLEU-2 score and estimate the similarity between the human-written poem and the machine-created one.", "startOffset": 37, "endOffset": 45}, {"referenceID": 17, "context": "We test our method on the image captions provided by the COCO dataset [18].", "startOffset": 70, "endOffset": 74}, {"referenceID": 24, "context": "In this experiment, we train our model on the Romeo and Juliet play [26] to further validate the proposed method.", "startOffset": 68, "endOffset": 72}], "year": 2017, "abstractText": "Generative adversarial networks (GANs) have great successes on synthesizing data. However, the existing GANs restrict the discriminator to be a binary classifier, and thus limit their learning capacity for tasks that need to synthesize output with rich structures such as natural language descriptions. In this paper, we propose a novel generative adversarial network, RankGAN, for generating highquality language descriptions. Rather than train the discriminator to learn and assign absolute binary predicate for individual data sample, the proposed RankGAN is able to analyze and rank a collection of human-written and machine-written sentences by giving a reference group. By viewing a set of data samples collectively and evaluating their quality through relative ranking scores, the discriminator is able to make better assessment which in turn helps to learn a better generator. The proposed RankGAN is optimized through the policy gradient technique. Experimental results on multiple public datasets clearly demonstrate the effectiveness of the proposed approach.", "creator": "LaTeX with hyperref package"}}}