{"id": "1706.00139", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jun-2017", "title": "Natural Language Generation for Spoken Dialogue System using RNN Encoder-Decoder Networks", "abstract": "Natural language generation (NLG) is a critical component in a spoken dialogue system. This paper presents a Recurrent Neural Network based Encoder-Decoder architecture, in which an LSTM-based decoder is introduced to select, aggregate semantic elements produced by an attention mechanism over the input elements, and to produce the required utterances. The proposed generator can be jointly trained both sentence planning and surface realization to produce natural language sentences.\n\n\n\n\nIn this paper, we demonstrate how to construct an LSTM-based Decoder. The LSTM-based decoder consists of a recursive Coder, and an LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-based LSTM-", "histories": [["v1", "Thu, 1 Jun 2017 01:06:17 GMT  (222kb)", "https://arxiv.org/abs/1706.00139v1", "has been accepted to appear at CoNLL 2017"], ["v2", "Tue, 20 Jun 2017 05:54:56 GMT  (222kb)", "http://arxiv.org/abs/1706.00139v2", "has been accepted to appear at CoNLL 2017"], ["v3", "Sat, 12 Aug 2017 15:41:14 GMT  (1164kb)", "http://arxiv.org/abs/1706.00139v3", "has been accepted to appear at CoNLL 2017. arXiv admin note: text overlap witharXiv:1706.06714"]], "COMMENTS": "has been accepted to appear at CoNLL 2017", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["van-khanh tran", "le-minh nguyen"], "accepted": false, "id": "1706.00139"}, "pdf": {"name": "1706.00139.pdf", "metadata": {"source": "CRF", "title": "Natural Language Generation for Spoken Dialogue System using RNN Encoder-Decoder Networks", "authors": ["Van-Khanh Tran"], "emails": ["nguyenml}@jaist.ac.jp", "tvkhanh@ictu.edu.vn"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 6.\n00 13\n9v 3\n[ cs\n.C L\n] 1\n2 A\nug 2\n01 7\ncritical component in a spoken dialogue system. This paper presents a Recurrent Neural Network based Encoder-Decoder architecture, in which an LSTM-based decoder is introduced to select, aggregate semantic elements produced by an attention mechanism over the input elements, and to produce the required utterances. The proposed generator can be jointly trained both sentence planning and surface realization to produce natural language sentences. The proposed model was extensively evaluated on four different NLG datasets. The experimental results showed that the proposed generators not only consistently outperform the previous methods across all the NLG domains but also show an ability to generalize from a new, unseen domain and learn from multi-domain datasets."}, {"heading": "1 Introduction", "text": "Natural Language Generation (NLG) plays a critical role in Spoken Dialogue Systems (SDS) with task is to convert a meaning representation produced by the Dialogue Manager into natural language utterances. Conventional approaches still rely on comprehensive hand-tuning templates and rules requiring expert knowledge of linguistic representation, including rulebased (Mirkovic et al., 2011), corpus-based ngram models (Oh and Rudnicky, 2000), and a trainable generator (Stent et al., 2004).\nRecently, Recurrent Neural Networks (RNNs) based approaches have shown promising performance in tackling the NLG problems. The RNNbased models have been applied for NLG as a\njoint training model (Wen et al., 2015a,b) and an end-to-end training model (Wen et al., 2016c). A recurring problem in such systems is requiring annotated datasets for particular dialogue acts1 (DAs). To ensure that the generated utterance representing the intended meaning of the given DA, the previous RNN-based models were further conditioned on a 1-hot vector representation of the DA. Wen et al. (2015a) introduced a heuristic gate to ensure that all the slot-value pair was accurately captured during generation. Wen et al. (2015b) subsequently proposed a Semantically Conditioned Long Short-term Memory generator (SC-LSTM) which jointly learned the DA gating signal and language model.\nMore recently, Encoder-Decoder networks (??), especially the attentional based models (Wen et al., 2016b; Mei et al., 2015) have been explored to solve the NLG tasks. The Attentional RNN Encoder-Decoder (Bahdanau et al., 2014) (ARED) based approaches have also shown improved performance on a variety of tasks, e.g., image captioning (Xu et al., 2015; Yang et al., 2016), text summarization (Rush et al., 2015; Nallapati et al., 2016).\nWhile the RNN-based generators with DA gating-vector can prevent the undesirable semantic repetitions, the ARED-based generators show signs of better adapting to a new domain. However, none of the models show significant advantage from out-of-domain data. To better analyze model generalization to an unseen, new domain as well as model leveraging the out-ofdomain sources, we propose a new architecture which is an extension of the ARED model. In order to better select, aggregate and control the semantic information, a Refinement Adjustment LSTM-based component (RALSTM) is introduced\n1A combination of an action type and a set of slot-value pairs. e.g. inform(name=\u2019Bar crudo\u2019; food=\u2019raw food\u2019)\nto the decoder side. The proposed model can learn from unaligned data by jointly training the sentence planning and surface realization to produce natural language sentences. We conducted experiments on four different NLG domains and found that the proposed methods significantly outperformed the state-of-the-art methods regarding BLEU (Papineni et al., 2002) and slot error rate ERR scores (Wen et al., 2015b). The results also showed that our generators could scale to new domains by leveraging the out-of-domain data. To sum up, we make three key contributions in this paper:\n\u2022 We present an LSTM-based component called RALSTM cell applied on the decoder\nside of an ARED model, resulting in an endto-end generator that empirically shows significant improved performances in comparison with the previous approaches.\n\u2022 We extensively conduct the experiments to evaluate the models training from scratch on\neach in-domain dataset.\n\u2022 We empirically assess the models\u2019 ability to: learn from multi-domain datasets by pool-\ning all available training datasets; and adapt to a new, unseen domain by limited feeding amount of in-domain data.\nWe review related works in Section 2. Following a detail of proposed model in Section 3, Section 4 describes datasets, experimental setups, and evaluation metrics. The resulting analysis is presented in Section 5. We conclude with a brief summary and future work in Section 6."}, {"heading": "2 Related Work", "text": "Recently, RNNs-based models have shown promising performance in tackling the NLG problems. Zhang and Lapata (2014) proposed a generator using RNNs to create Chinese poetry. Xu et al. (2015); Karpathy and Fei-Fei (2015); Vinyals et al. (2015) also used RNNs in a multimodal setting to solve image captioning tasks. The RNN-based Sequence to Sequence models have applied to solve variety of tasks: conversational modeling (???), machine translation (??)\nFor task-oriented dialogue systems, Wen et al. (2015a) combined a forward RNN generator, a CNN reranker, and a backward RNN reranker to\ngenerate utterances. Wen et al. (2015b) proposed SC-LSTM generator which introduced a control sigmoid gate to the LSTM cell to jointly learn the gating mechanism and language model. A recurring problem in such systems is the lack of sufficient domain-specific annotated data. Wen et al. (2016a) proposed an out-of-domain model which was trained on counterfeited data by using semantically similar slots from the target domain instead of the slots belonging to the out-of-domain dataset. The results showed that the model can achieve a satisfactory performance with a small amount of in-domain data by fine tuning the target domain on the out-of-domain trained model.\nMore recently, RNN encoder-decoder based models with attention mechanism (Bahdanau et al., 2014) have shown improved performances in various tasks. Yang et al. (2016) proposed a review network to the image captioning, which reviews all the information encoded by the encoder and produces a compact thought vector. Mei et al. (2015) proposed RNN encoderdecoder-based model by using two attention layers to jointly train content selection and surface realization. More close to our work, Wen et al. (2016b) proposed an attentive encoder-decoder based generator which computed the attention mechanism over the slot-value pairs. The model showed a domain scalability when a very limited amount of data is available.\nMoving from a limited domain dialogue system to an open domain dialogue system raises some issues. Therefore, it is important to build an open domain dialogue system that can make as much use of existing abilities of functioning from other domains. There have been several works to tackle this problem, such as (Mrks\u030cic\u0301 et al., 2015) using RNN-based networks for multi-domain dialogue state tracking, (Wen et al., 2016a) using a procedure to train multi-domain via multiple adaptation steps, or (Gas\u030cic\u0301 et al., 2015; Williams, 2013) adapting of SDS components to new domains."}, {"heading": "3 Recurrent Neural Language Generator", "text": "The recurrent language generator proposed in this paper is based on a neural language generator (Wen et al., 2016b), which consists of three main components: (i) an Encoder that incorporates the target meaning representation (MR) as the model inputs, (ii) an Aligner that aligns and controls the semantic elements, and (iii) an RNN Decoder that\ngenerates output sentences. The generator architecture is shown in Figure 1. The Encoder first encodes the MR into input semantic elements which are then aggregated and selected by utilizing an attention-based mechanism by the Aligner. The input to the RNN Decoder at each time step is a 1-hot encoding of a token2 wt and an attentive DA representation dt. At each time step t, RNN Decoder also computes how much the feature value vector st\u22121 retained for the next computational steps, and adds this information to the RNN output which represents the probability distribution of the next token wt+1. At generation time, we can sample from this conditional distribution to obtain the next token in a generated sentence, and feed it as the next input to the RNN Decoder. This process finishes when an end sign is generated (Karpathy and Fei-Fei, 2015), or some constraints are reached (Zhang and Lapata, 2014). The model can produce a sequence of tokens which can finally be lexicalized3 to form the required utterance.\n2Input texts are delexicalized where slot values are replaced by its corresponding slot tokens.\n3The process in which slot token is replaced by its value."}, {"heading": "3.1 Encoder", "text": "The slots and values are separated parameters used in the encoder side. This embeds the source information into a vector representation zi which is a concatenation of embedding vector representation of each slot-value pair, and is computed by:\nzi = ui \u2295 vi (1)\nwhere ui, vi are the i-th slot and value embedding vectors, respectively, and \u2295 is vector concatenation. The i index runs over the L given slot-value pairs. In this work, we use a 1-layer, Bidirectional LSTM (Bi-LSTM) to encode the sequence of slotvalue pairs4 embedding. The Bi-LSTM consists of forward and backward LSTMs which read the sequence of slot-value pairs from left-to-right and right-to-left to produce forward and backward sequence of hidden states ( \u2212\u2192 e1 , .., \u2212\u2192 eL), and ( \u2190\u2212 e1 , .., \u2190\u2212 eL), respectively. We then obtain the sequence of encoded hidden states E = (e1, e2, .., eL) where ei\n4We treated the set of slot-value pairs as a sequence and use the order specified by slot\u2019s name (e.g., slot address comes first, food follows address). We have tried treating slot-value pairs as a set with natural order as in the given DAs. However, this yielded even worse results.\nis a sum of the forward hidden state \u2212\u2192 ei and the backward one \u2190\u2212 ei as follows:\nei = \u2212\u2192 ei + \u2190\u2212 ei (2)"}, {"heading": "3.2 Aligner", "text": "The Aligner utilizes attention mechanism to calculate the DA representation as follows:\n\u03b2t,i = exp et,i \u2211\nj exp et,j (3)\nwhere\net,i = a(ei,ht\u22121) (4)\nand \u03b2t,i is the weight of i-th slot-value pair calculated by the attention mechanism. The alignment model a is computed by:\na(ei,ht\u22121) = v \u22a4 a tanh(Waei + Uaht\u22121) (5)\nwhere va,Wa,Ua are the weight matrices to learn. Finally, the Aligner calculates dialogue act embedding dt as follows:\ndt = a \u2295 \u2211\ni \u03b2t,iei (6)\nwhere a is vector embedding of the action type."}, {"heading": "3.3 RALSTM Decoder", "text": "The proposed semantic RALSTM cell applied for Decoder side consists of three components: a Refinement cell, a traditional LSTM cell, and an Adjustment cell:\nFirstly, instead of feeding the original input token wt into the RNN cell, the input is recomputed by using a semantic gate as follows:\nrt = \u03c3(Wrddt + Wrhht\u22121) xt = rt \u2299 wt (7)\nwhere Wrd and Wrh are weight matrices. Element-wise multiplication \u2299 plays a part in word-level matching which not only learns the vector similarity, but also preserves information about the two vectors. Wrh acts like a key phrase detector that learns to capture the pattern of generation tokens or the relationship between multiple tokens. In other words, the new input xt consists of information of the original input token wt, the DA representation dt, and the hidden context ht\u22121. rt is called a Refinement gate because the input tokens are refined by a combination gating information of the attentive DA representation dt and the\nprevious hidden state ht\u22121. By this way, we can represent the whole sentence based on the refined inputs.\nSecondly, the traditional LSTM network proposed by Hochreiter and Schmidhuber (2014) in which the input gate ii, forget gate ft and output gates ot are introduced to control information flow and computed as follows:\n\n   it ft ot c\u0302t\n\n   =\n\n  \n\u03c3 \u03c3 \u03c3\ntanh\n\n   W4n,4n\n\n xt dt\nht\u22121\n\n (8)\nwhere n is hidden layer size, W4n,4n is model parameters. The cell memory value ct is modified to depend on the DA representation as:\nct = ft \u2299 ct\u22121 + it \u2299 c\u0302t + tanh(Wcrrt) h\u0303t = ot \u2299 tanh(ct) (9)\nwhere h\u0303t is the output.\nThirdly, inspired by work of Wen et al. (2015b) in which the generator was further conditioned on a 1-hot representation vector s of given dialogue act, and work of Lu et al. (2016) that proposed a visual sentinel gate to make a decision on whether the model should attend to the image or to the sentinel gate, an additional gating cell is introduced on top of the traditional LSTM to gate another controlling vector s. Figure 6 shows how RALSTM controls the DA vector s. First, starting from the 1-hot vector of the DA s0, at each time step t the proposed cell computes how much the LSTM output h\u0303t affects the DA vector, which is computed as follows:\nat = \u03c3(Waxxt + Wahh\u0303t) st = st\u22121 \u2299 at (10)\nwhere Wax, Wah are weight matrices to be learned. at is called an Adjustment gate since its task is to control what information of the given DA have been generated and what information should be retained for future time steps. Second, we consider how much the information preserved in the DA st can be contributed to the output, in which an additional output is computed by applying the output gate ot on the remaining information in st as follows:\nca = \u03c3(Wosst) h\u0303a = ot \u2299 tanh(ca) (11)\nwhere Wos is a weight matrix to project the DA presentation into the output space, h\u0303a is the Adjustment cell output. Final RALSTM output is a combination of both outputs of the traditional LSTM cell and the Adjustment cell, and computed as follows:\nht = h\u0303t + h\u0303a (12)\nFinally, the output distribution is computed by applying a softmax function g, and the distribution can be sampled to obtain the next token,\nP (wt+1 | wt, ...w0,DA) = g(Whoht) wt+1 \u223c P (wt+1 | wt, wt\u22121, ...w0,DA) (13)\nwhere DA = (s, z)."}, {"heading": "3.4 Training", "text": "The objective function was the negative loglikelihood and computed by:\nF(\u03b8) = \u2212\nT \u2211\nt=1\ny\u22a4t log pt (14)\nwhere: yt is the ground truth token distribution, pt is the predicted token distribution, T is length of the input sentence. The proposed generators were trained by treating each sentence as a mini-batch with l2 regularization added to the objective function for every 5 training examples. The models were initialized with a pretrained Glove word embedding vectors (Pennington et al., 2014) and optimized by using stochastic gradient descent and back propagation through time (Werbos, 1990). Early stopping mechanism was implemented to prevent over-fitting by using a validation set as suggested in (Mikolov, 2010)."}, {"heading": "3.5 Decoding", "text": "The decoding consists of two phases: (i) overgeneration, and (ii) reranking. In the overgeneration, the generator conditioned on both representations of the given DA use a beam search to generate a set of candidate responses. In the reranking phase, cost of the generator is computed to form the reranking score R as follows:\nR = F(\u03b8) + \u03bbERR (15)\nwhere \u03bb is a trade off constant and is set to a large value in order to severely penalize nonsensical outputs. The slot error rate ERR, which is the\nnumber of slots generated that is either missing or redundant, and is computed by:\nERR = p + q\nN (16)\nwhere N is the total number of slots in DA, and p, q is the number of missing and redundant slots, respectively."}, {"heading": "4 Experiments", "text": "We extensively conducted a set of experiments to assess the effectiveness of the proposed models by using several metrics, datasets, and model architectures, in order to compare to prior methods."}, {"heading": "4.1 Datasets", "text": "We assessed the proposed models on four different NLG domains: finding a restaurant, finding a hotel, buying a laptop, and buying a television. The Restaurant and Hotel were collected in (Wen et al., 2015b), while the Laptop and TV datasets have been released by (Wen et al., 2016a) with a much larger input space but only one training example for each DA so that the system must learn partial realization of concepts and be able to recombine and apply them to unseen DAs. This makes the NLG tasks for the Laptop and TV domains become much harder. The dataset statistics are shown in Table 1."}, {"heading": "4.2 Experimental Setups", "text": "The generators were implemented using the TensorFlow library (Abadi et al., 2016) and trained with training, validation and testing ratio as 3:1:1. The hidden layer size, beam size were set to be 80 and 10, respectively, and the generators were trained with a 70% of dropout rate. We performed 5 runs with different random initialization of the network and the training is terminated by using early stopping. We then chose a model that yields the highest BLEU score on the validation set as shown in Table 2. Since the trained models can\ndiffer depending on the initialization, we also report the results which were averaged over 5 randomly initialized networks. Note that, except the results reported in Table 2, all the results shown were averaged over 5 randomly initialized networks. We set \u03bb to 1000 to severely discourage the reranker from selecting utterances which contain either redundant or missing slots. For each DA, we over-generated 20 candidate sentences and selected the top 5 realizations after reranking. Moreover, in order to better understand the effectiveness of our proposed methods, we: (i) performed an ablation experiments to demonstrate the contribution of each proposed cells (Tables 2, 3), (ii) trained the models on the Laptop domain with varied proportion of training data, starting from 10% to 100% (Figure 3), (iii) trained general models by merging all the data from four domains together and tested them in each individual domain (Figure 4), and (iv) trained adaptation models on merging data from restaurant and hotel domains, then fine tuned the model on laptop domain with varied amount of adaptation data (Figure 5)."}, {"heading": "4.3 Evaluation Metrics and Baselines", "text": "The generator performance was assessed on the two evaluation metrics: the BLEU and the slot error rate ERR by adopting code from an open source benchmark toolkit for Natural Language\nGeneration5. We compared the proposed models against three strong baselines which have been recently published as state-of-the-art NLG benchmarks5.\n\u2022 HLSTM proposed by Wen et al. (2015a) which used a heuristic gate to ensure that all\nof the slot-value information was accurately captured when generating.\n\u2022 SCLSTM proposed by Wen et al. (2015b) which can jointly learn the gating signal and\nlanguage model.\n\u2022 Enc-Dec proposed by Wen et al. (2016b) which applied the attention-based encoder-\ndecoder architecture."}, {"heading": "5 Results and Analysis", "text": ""}, {"heading": "5.1 Results", "text": "We conducted extensive experiments on our models and compared against the previous methods. Overall, the proposed models consistently achieve the better performance regarding both evaluation metrics across all domains in all test cases.\nModel Comparison in an Unseen Domain\nThe ablation studies (Tables 2, 3) demonstrate the contribution of different model components\n5https://github.com/shawnwun/RNNLG\nin which the models were assessed without Adjustment cell (w/o A), or without Refinement cell (w/o R). It clearly sees that the Adjustment cell contributes to reducing the slot error rate ERR score since it can effectively prevent the undesirable slot-value pair repetitions by gating the DA vector s. A comparison between the ARED-based models (denoted by \u266f in Table 2) shows that the proposed models not only have better performance with higher the BLEU score but also significantly reduce the slot error rate ERR score by a large margin about 2% to 4% in every datasets. Moreover, a comparison between the models with gating the DA vector also indicates that the proposed models (w/o R, RALSTM) have significant improved performance on both the evaluation metrics across the four domains compared to the SCLSTM model. The RALSTM cell without the Refinement cell is similar as the SCLSTM cell. However, it obtained the results much better than the\nSCLSTM baselines. This stipulates the necessary of the LSTM encoder and the Aligner in effectively partial learning the correlated order between slot-value representation in the DAs, especially for the unseen domain where there is only one training example for each DA. Table 3 further demonstrates the stable strength of our models since the results\u2019 pattern stays unchanged compared to those in Table 2.\nFigure 3 shows a comparison of three models (Enc-Dec, SCLSTM, and RALSTM) which were trained from scratch on the unseen laptop domain in varied proportion of training data, from 1% to 100%. It clearly shows that the RALSTM outperforms the previous models in all cases, while the Enc-Dec has a much greater ERR score comparing to the two models.\nA comparison of top responses generated for some input DAs between different models are shown in Table 4. While the previous models still\nTable 4: Comparison of top responses generated for some input dialogue acts between different models. Errors are marked in color (missing, misplaced information). All2* are general models.\n# Model Generated Responses from Laptop Domain 1 Input DA ?compare(name=\u201dsatellite notus 19\u201d, pricerange=\u201dbudget\u201d, drive=\u201d500 gb\u201d, name=\u201dportege thanatos 98\u201d,\npricerange=\u201dexpensive\u201d, drive=\u201d128 gb\u201d)\nReference the satellite notus 19 has a 500 gb drive and is in the budget price range . on the other hand the portege thanatos 98\nhas a 128 gb drive and is in the expensive price range . which would you prefer\nHLSTM the satellite notus 19 is a budget priced laptop with a 500 gb drive and a 128 gb drive . which one do you prefer\n[portege thanatos 98, expensive]\nEnc-Dec the satellite notus 19 is in the budget price range . the portege thanatos 98 has a 500 gb drive and is in the expensive\nprice range . which one do you prefer [128 gb]\nSCLSTM the satellite notus 19 is in the budget price range and has a 500 gb drive and the portege thanatos 98 has a 128 gb\ndrive . which one do you prefer [expensive]\nRALSTM the satellite notus 19 is in the budget price range with a 500 gb drive , while the portege thanatos 98 is in the\nexpensive price range and has a 128 gb drive . which one do you prefer\nAll2Laptop the satellite notus 19 is a budget price range with a 500 gb drive and the portege thanatos 98 has a 128 gb drive and\nis in the expensive price range . which one do you prefer\n# Model Generated Responses from TV Domain 2 Input DA inform count(count=\u201d73\u201d, type=\u201dtelevision\u201d, hasusbport=\u201ddontcare\u201d, hdmiport=\u201d2\u201d, screensizerange=\u201ddontcare\u201d)\nReference there are 73 televisions if you do not care about whether it has usb port or not, with 2 hdmi ports and if you do not\ncare about the screen size\nHLSTM there are 73 televisions with 2 hdmi ports and if you do not care about the number of usb ports [screensizerange] Enc-Dec there are 73 televisions with 2 hdmi ports if you do not care about usb ports [screensizerange] SCLSTM there are 73 televisions with 2 hdmi ports if you do not care about the screen size and if you do not care about the\nnumber of usb ports\nRALSTM there are 73 televisions with 2 hdmi ports if you do not care about screen size or usb ports All2Tv there are 73 televisions with 2 hdmi ports if you do not care about screen size or usb ports\nproduce some errors (missing and misplaced information), the proposed models (RALSTM and the models All2* trained by pooling all datasets together) can generate appropriate sentences. We also found that the proposed models tend to generate more complete and concise sentences than the other models.\nAll these prove the importance of the proposed components: the Refinement cell in aggregating and selecting the attentive information, and the Adjustment cell in controlling the feature vector (see Examples in Figure 6).\nGeneral Models\nFigure 4 shows a comparison performance of general models as described in Section 4.2. The results are consistent with the Figure 3, in which the RALSTM has better performance than the Enc-Dec and SCLSTM on all domains in terms of the BLEU and the ERR scores, while the Enc-Dec has difficulties in reducing the ERR score. This indicates the relevant contribution of the proposed component Refinement and Adjustment cells to the original ARED architecture, in which the Refinement with attentional gating can effectively select and aggregate the information before putting them into the traditional LSTM cell, while the Adjustment with gating DA vector can effectively control the\n<\\s> th e\nSLO T_N\nAME is a gre at\nSLO T_T\nYPE for bus ines s with a\nSLO T_B\nATT ERY\nRAT ING bat tery and an\nSLO T_P\nROC ESS\nOR pro ces\nsor 0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nFe at u re s\nBATTERYRATING=value BUSINESS=true NAME=value PROCESSOR=value TYPE=value\n(a) An example from the Laptop domain.\n<\\s>\nSLO T_N\nAME is a\nSLO T_T\nYPE tha t has\nSLO T_H\nDMI POR T hdm i por t -s ,\nSLO T_A\nUDI O aud io , colo r is\nSLO T_C\nOLO R\n0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nFe at u re s\nAUDIO=value COLOR=value HDMIPORT=value NAME=value TYPE=value\n(b) An example from the TV domain.\nFigure 6: Example showing how RALSTM drives down the DA feature value vector s step-by-step, in which the model generally shows its ability to detect words and phases describing a corresponding slot-value pair.\ninformation flow during generation.\nAdaptation Models\nFigure 5 shows domain scalability of the three models in which the models were first trained on\nthe merging out-of-domain Restaurant and Hotel datasets, then fine tuned the parameters with varied amount of in-domain training data (laptop domain). The RALSTM model outperforms the previous model in both cases where the sufficient indomain data is used (as in Figure 5-left) and the limited in-domain data is used (Figure 5-right). The Figure 5-right also indicates that the RALSTM model can adapt to a new, unseen domain faster than the previous models."}, {"heading": "6 Conclusion and Future Work", "text": "We present an extension of ARED model, in which an RALSTM component is introduced to select and aggregate semantic elements produced by the Encoder, and to generate the required sentence. We assessed the proposed models on four NLG domains and compared to the state-of-theart generators. The proposed models empirically show consistent improvement over the previous methods in both the BLEU and ERR evaluation metrics. The proposed models also show an ability to extend to a new, unseen domain no matter how much the in-domain training data was fed. In the future, it would be interesting to apply the proposed model to other tasks that can be modeled based on the encoder-decoder architecture, i.e., image captioning, reading comprehension, and machine translation."}], "references": [{"title": "Tensorflow: Large-scale machine learning on heterogeneous distributed systems", "author": ["Mart\u0131n Abadi", "Ashish Agarwal", "Paul Barham", "Eugene Brevdo", "Zhifeng Chen", "Craig Citro", "Greg S Corrado", "Andy Davis", "Jeffrey Dean", "Matthieu Devin"], "venue": null, "citeRegEx": "Abadi et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Abadi et al\\.", "year": 2016}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "KyunghyunCho", "Yoshua Bengio."], "venue": "arXiv preprint arXiv:1409.0473 .", "citeRegEx": "Bahdanau et al\\.,? 2014", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Distributed dialogue policies for multi-domain statistical dialogue management", "author": ["Milica Ga\u0161i\u0107", "Dongho Kim", "Pirros Tsiakoulis", "Steve Young."], "venue": "Acoustics, Speech and Signal Processing (ICASSP), 2015 IEEE International Conference on.", "citeRegEx": "Ga\u0161i\u0107 et al\\.,? 2015", "shortCiteRegEx": "Ga\u0161i\u0107 et al\\.", "year": 2015}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Neural computation .", "citeRegEx": "Hochreiter and Schmidhuber.,? 1997", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Deep visualsemantic alignments for generating image", "author": ["Andrej Karpathy", "Li Fei-Fei"], "venue": null, "citeRegEx": "Karpathy and Fei.Fei.,? \\Q2015\\E", "shortCiteRegEx": "Karpathy and Fei.Fei.", "year": 2015}, {"title": "Abstractive text summa", "author": ["Bing Xiang"], "venue": null, "citeRegEx": "Xiang,? \\Q2016\\E", "shortCiteRegEx": "Xiang", "year": 2016}, {"title": "Bleu: a method for automatic", "author": ["Jing Zhu"], "venue": null, "citeRegEx": "Zhu.,? \\Q2002\\E", "shortCiteRegEx": "Zhu.", "year": 2002}, {"title": "Stochastic Language Generation in Dialogue using Recurrent Neural Networks with Convolutional Sentence Reranking", "author": ["Tsung-Hsien Wen", "Milica Ga\u0161i\u0107", "Dongho Kim", "Nikola Mrk\u0161i\u0107", "Pei-Hao Su", "David Vandyke", "Steve Young."], "venue": "Proceedings", "citeRegEx": "Wen et al\\.,? 2015a", "shortCiteRegEx": "Wen et al\\.", "year": 2015}, {"title": "Multi-domain neural network language generation for spoken dialogue systems", "author": ["Tsung-Hsien Wen", "Milica Gasic", "Nikola Mrksic", "Lina M Rojas-Barahona", "Pei-Hao Su", "David Vandyke", "Steve Young."], "venue": "arXiv preprint arXiv:1603.01232 .", "citeRegEx": "Wen et al\\.,? 2016a", "shortCiteRegEx": "Wen et al\\.", "year": 2016}, {"title": "Toward multidomain language generation using recurrent neural networks", "author": ["Tsung-Hsien Wen", "Milica Ga\u0161ic", "Nikola Mrk\u0161ic", "Lina M Rojas-Barahona", "Pei-Hao Su", "David Vandyke", "Steve Young"], "venue": null, "citeRegEx": "Wen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wen et al\\.", "year": 2016}, {"title": "Semantically conditioned lstm-based natural language generation for spoken dialogue systems", "author": ["Tsung-Hsien Wen", "Milica Ga\u0161i\u0107", "Nikola Mrk\u0161i\u0107", "PeiHao Su", "David Vandyke", "Steve Young."], "venue": "Proceedings of EMNLP. Association for Computa-", "citeRegEx": "Wen et al\\.,? 2015b", "shortCiteRegEx": "Wen et al\\.", "year": 2015}, {"title": "A networkbased end-to-end trainable task-oriented dialogue system", "author": ["Tsung-Hsien Wen", "David Vandyke", "Nikola Mrksic", "Milica Gasic", "Lina M Rojas-Barahona", "Pei-Hao Su", "Stefan Ultes", "Steve Young."], "venue": "arXiv preprint arXiv:1604.04562 .", "citeRegEx": "Wen et al\\.,? 2016c", "shortCiteRegEx": "Wen et al\\.", "year": 2016}, {"title": "Backpropagation through time: what it does and how to do it", "author": ["Paul J Werbos."], "venue": "Proceedings of the IEEE 78(10):1550\u20131560.", "citeRegEx": "Werbos.,? 1990", "shortCiteRegEx": "Werbos.", "year": 1990}, {"title": "Multi-domain learning and generalization in dialog state tracking", "author": ["Jason Williams."], "venue": "Proceedings of SIGDIAL. Citeseer, volume 62.", "citeRegEx": "Williams.,? 2013", "shortCiteRegEx": "Williams.", "year": 2013}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron C Courville", "Ruslan Salakhutdinov", "Richard S Zemel", "Yoshua Bengio."], "venue": "ICML. volume 14, pages 77\u201381.", "citeRegEx": "Xu et al\\.,? 2015", "shortCiteRegEx": "Xu et al\\.", "year": 2015}, {"title": "Review networks for caption generation", "author": ["Zhilin Yang", "Ye Yuan", "Yuexin Wu", "William W Cohen", "Ruslan R Salakhutdinov."], "venue": "Advances in Neural Information Processing Systems. pages 2361\u20132369.", "citeRegEx": "Yang et al\\.,? 2016", "shortCiteRegEx": "Yang et al\\.", "year": 2016}, {"title": "Chinese poetry generation with recurrent neural networks", "author": ["Xingxing Zhang", "Mirella Lapata."], "venue": "EMNLP. pages 670\u2013680.", "citeRegEx": "Zhang and Lapata.,? 2014", "shortCiteRegEx": "Zhang and Lapata.", "year": 2014}], "referenceMentions": [{"referenceID": 11, "context": ", 2015a,b) and an end-to-end training model (Wen et al., 2016c).", "startOffset": 44, "endOffset": 63}, {"referenceID": 1, "context": "The Attentional RNN Encoder-Decoder (Bahdanau et al., 2014) (ARED) based approaches have also shown improved performance on a variety of tasks, e.", "startOffset": 36, "endOffset": 59}, {"referenceID": 14, "context": ", image captioning (Xu et al., 2015; Yang et al., 2016), text summarization (Rush et al.", "startOffset": 19, "endOffset": 55}, {"referenceID": 15, "context": ", image captioning (Xu et al., 2015; Yang et al., 2016), text summarization (Rush et al.", "startOffset": 19, "endOffset": 55}, {"referenceID": 6, "context": "The RNNbased models have been applied for NLG as a joint training model (Wen et al., 2015a,b) and an end-to-end training model (Wen et al., 2016c). A recurring problem in such systems is requiring annotated datasets for particular dialogue acts (DAs). To ensure that the generated utterance representing the intended meaning of the given DA, the previous RNN-based models were further conditioned on a 1-hot vector representation of the DA. Wen et al. (2015a) introduced a heuristic gate to ensure that all the slot-value pair was accurately captured during generation.", "startOffset": 73, "endOffset": 460}, {"referenceID": 6, "context": "The RNNbased models have been applied for NLG as a joint training model (Wen et al., 2015a,b) and an end-to-end training model (Wen et al., 2016c). A recurring problem in such systems is requiring annotated datasets for particular dialogue acts (DAs). To ensure that the generated utterance representing the intended meaning of the given DA, the previous RNN-based models were further conditioned on a 1-hot vector representation of the DA. Wen et al. (2015a) introduced a heuristic gate to ensure that all the slot-value pair was accurately captured during generation. Wen et al. (2015b) subsequently proposed a Semantically Conditioned Long Short-term Memory generator (SC-LSTM) which jointly learned the DA gating signal and language model.", "startOffset": 73, "endOffset": 589}, {"referenceID": 10, "context": ", 2002) and slot error rate ERR scores (Wen et al., 2015b).", "startOffset": 39, "endOffset": 58}, {"referenceID": 9, "context": "Zhang and Lapata (2014) proposed a generator using RNNs to create Chinese poetry.", "startOffset": 0, "endOffset": 24}, {"referenceID": 8, "context": "Xu et al. (2015); Karpathy and Fei-Fei (2015); Vinyals et al.", "startOffset": 0, "endOffset": 17}, {"referenceID": 4, "context": "(2015); Karpathy and Fei-Fei (2015); Vinyals et al.", "startOffset": 8, "endOffset": 36}, {"referenceID": 4, "context": "(2015); Karpathy and Fei-Fei (2015); Vinyals et al. (2015) also used RNNs in a multimodal setting to solve image captioning tasks.", "startOffset": 8, "endOffset": 59}, {"referenceID": 4, "context": "(2015); Karpathy and Fei-Fei (2015); Vinyals et al. (2015) also used RNNs in a multimodal setting to solve image captioning tasks. The RNN-based Sequence to Sequence models have applied to solve variety of tasks: conversational modeling (???), machine translation (??) For task-oriented dialogue systems, Wen et al. (2015a) combined a forward RNN generator, a CNN reranker, and a backward RNN reranker to generate utterances.", "startOffset": 8, "endOffset": 324}, {"referenceID": 4, "context": "(2015); Karpathy and Fei-Fei (2015); Vinyals et al. (2015) also used RNNs in a multimodal setting to solve image captioning tasks. The RNN-based Sequence to Sequence models have applied to solve variety of tasks: conversational modeling (???), machine translation (??) For task-oriented dialogue systems, Wen et al. (2015a) combined a forward RNN generator, a CNN reranker, and a backward RNN reranker to generate utterances. Wen et al. (2015b) proposed SC-LSTM generator which introduced a control sigmoid gate to the LSTM cell to jointly learn the gating mechanism and language model.", "startOffset": 8, "endOffset": 445}, {"referenceID": 4, "context": "(2015); Karpathy and Fei-Fei (2015); Vinyals et al. (2015) also used RNNs in a multimodal setting to solve image captioning tasks. The RNN-based Sequence to Sequence models have applied to solve variety of tasks: conversational modeling (???), machine translation (??) For task-oriented dialogue systems, Wen et al. (2015a) combined a forward RNN generator, a CNN reranker, and a backward RNN reranker to generate utterances. Wen et al. (2015b) proposed SC-LSTM generator which introduced a control sigmoid gate to the LSTM cell to jointly learn the gating mechanism and language model. A recurring problem in such systems is the lack of sufficient domain-specific annotated data. Wen et al. (2016a) proposed an out-of-domain model which was trained on counterfeited data by using semantically similar slots from the target domain instead of the slots belonging to the out-of-domain dataset.", "startOffset": 8, "endOffset": 700}, {"referenceID": 1, "context": "More recently, RNN encoder-decoder based models with attention mechanism (Bahdanau et al., 2014) have shown improved performances in various tasks.", "startOffset": 73, "endOffset": 96}, {"referenceID": 1, "context": "More recently, RNN encoder-decoder based models with attention mechanism (Bahdanau et al., 2014) have shown improved performances in various tasks. Yang et al. (2016) proposed a review network to the image captioning, which reviews all the information encoded by the encoder and produces a compact thought vector.", "startOffset": 74, "endOffset": 167}, {"referenceID": 1, "context": "More recently, RNN encoder-decoder based models with attention mechanism (Bahdanau et al., 2014) have shown improved performances in various tasks. Yang et al. (2016) proposed a review network to the image captioning, which reviews all the information encoded by the encoder and produces a compact thought vector. Mei et al. (2015) proposed RNN encoderdecoder-based model by using two attention layers to jointly train content selection and surface realization.", "startOffset": 74, "endOffset": 332}, {"referenceID": 1, "context": "More recently, RNN encoder-decoder based models with attention mechanism (Bahdanau et al., 2014) have shown improved performances in various tasks. Yang et al. (2016) proposed a review network to the image captioning, which reviews all the information encoded by the encoder and produces a compact thought vector. Mei et al. (2015) proposed RNN encoderdecoder-based model by using two attention layers to jointly train content selection and surface realization. More close to our work, Wen et al. (2016b) proposed an attentive encoder-decoder based generator which computed the attention mechanism over the slot-value pairs.", "startOffset": 74, "endOffset": 505}, {"referenceID": 8, "context": ", 2015) using RNN-based networks for multi-domain dialogue state tracking, (Wen et al., 2016a) using a procedure to train multi-domain via multiple adaptation steps, or (Ga\u0161i\u0107 et al.", "startOffset": 75, "endOffset": 94}, {"referenceID": 2, "context": ", 2016a) using a procedure to train multi-domain via multiple adaptation steps, or (Ga\u0161i\u0107 et al., 2015; Williams, 2013) adapting of SDS components to new domains.", "startOffset": 83, "endOffset": 119}, {"referenceID": 13, "context": ", 2016a) using a procedure to train multi-domain via multiple adaptation steps, or (Ga\u0161i\u0107 et al., 2015; Williams, 2013) adapting of SDS components to new domains.", "startOffset": 83, "endOffset": 119}, {"referenceID": 4, "context": "This process finishes when an end sign is generated (Karpathy and Fei-Fei, 2015), or some constraints are reached (Zhang and Lapata, 2014).", "startOffset": 52, "endOffset": 80}, {"referenceID": 16, "context": "This process finishes when an end sign is generated (Karpathy and Fei-Fei, 2015), or some constraints are reached (Zhang and Lapata, 2014).", "startOffset": 114, "endOffset": 138}, {"referenceID": 3, "context": "Secondly, the traditional LSTM network proposed by Hochreiter and Schmidhuber (2014) in which the input gate ii, forget gate ft and output gates ot are introduced to control information flow and computed as follows:", "startOffset": 51, "endOffset": 85}, {"referenceID": 7, "context": "Thirdly, inspired by work of Wen et al. (2015b) in which the generator was further conditioned on a 1-hot representation vector s of given dialogue act, and work of Lu et al.", "startOffset": 29, "endOffset": 48}, {"referenceID": 7, "context": "Thirdly, inspired by work of Wen et al. (2015b) in which the generator was further conditioned on a 1-hot representation vector s of given dialogue act, and work of Lu et al. (2016) that proposed a visual sentinel gate to make a decision on whether the model should attend to the image or to the sentinel gate, an additional gating cell is introduced on top of the traditional LSTM to gate another controlling vector s.", "startOffset": 29, "endOffset": 182}, {"referenceID": 12, "context": ", 2014) and optimized by using stochastic gradient descent and back propagation through time (Werbos, 1990).", "startOffset": 93, "endOffset": 107}, {"referenceID": 10, "context": "The Restaurant and Hotel were collected in (Wen et al., 2015b), while the Laptop and TV datasets have been released by (Wen et al.", "startOffset": 43, "endOffset": 62}, {"referenceID": 8, "context": ", 2015b), while the Laptop and TV datasets have been released by (Wen et al., 2016a) with a much larger input space but only one training example for each DA so that the system must learn partial realization of concepts and be able to recombine and apply them to unseen DAs.", "startOffset": 65, "endOffset": 84}, {"referenceID": 0, "context": "The generators were implemented using the TensorFlow library (Abadi et al., 2016) and trained with training, validation and testing ratio as 3:1:1.", "startOffset": 61, "endOffset": 81}, {"referenceID": 7, "context": "\u2022 HLSTM proposed by Wen et al. (2015a) which used a heuristic gate to ensure that all of the slot-value information was accurately captured when generating.", "startOffset": 20, "endOffset": 39}, {"referenceID": 7, "context": "\u2022 SCLSTM proposed by Wen et al. (2015b) which can jointly learn the gating signal and language model.", "startOffset": 21, "endOffset": 40}, {"referenceID": 7, "context": "\u2022 Enc-Dec proposed by Wen et al. (2016b) which applied the attention-based encoderdecoder architecture.", "startOffset": 22, "endOffset": 41}], "year": 2017, "abstractText": "Natural language generation (NLG) is a critical component in a spoken dialogue system. This paper presents a Recurrent Neural Network based Encoder-Decoder architecture, in which an LSTM-based decoder is introduced to select, aggregate semantic elements produced by an attention mechanism over the input elements, and to produce the required utterances. The proposed generator can be jointly trained both sentence planning and surface realization to produce natural language sentences. The proposed model was extensively evaluated on four different NLG datasets. The experimental results showed that the proposed generators not only consistently outperform the previous methods across all the NLG domains but also show an ability to generalize from a new, unseen domain and learn from multi-domain datasets.", "creator": "LaTeX with hyperref package"}}}