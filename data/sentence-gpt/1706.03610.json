{"id": "1706.03610", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Jun-2017", "title": "Neural Domain Adaptation for Biomedical Question Answering", "abstract": "Factoid question answering (QA) has recently benefited from the development of deep learning (DL) systems. Neural network models outperform traditional approaches in domains where large datasets exist, such as SQuAD (ca. 100,000 questions) for Wikipedia articles. However, these systems have not yet been applied to QA in more specific domains, such as biomedicine, because datasets are generally too small to train a DL system from scratch. For example, the BioASQ dataset for biomedical QA comprises less then 900 factoid (single answer) and list (multiple answers) QA instances. In this work, we adapt a neural QA system trained on a large open-domain dataset (SQuAD, source) to a biomedical dataset (BioASQ, target) by employing various transfer learning techniques. Our network architecture is based on a state-of-the-art QA system, extended with biomedical word embeddings and a novel mechanism to answer list questions. In contrast to existing biomedical QA systems, our system does not rely on domain-specific ontologies, parsers or entity taggers, which are expensive to create. Despite this fact, our systems achieve state-of-the-art results on factoid questions and competitive results on list questions. This approach is therefore applied to a wide range of domains, including the most recent online discussion of the topic.\n\n\n\nAcknowledgments\n\nThis work is supported by the following grantees: Ola, Zavich and Wirshad, and Filippo R. The results of this work are available in the following formats: RIAA and EASQ2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "histories": [["v1", "Mon, 12 Jun 2017 13:08:21 GMT  (143kb,D)", "https://arxiv.org/abs/1706.03610v1", null], ["v2", "Thu, 15 Jun 2017 15:16:18 GMT  (143kb,D)", "http://arxiv.org/abs/1706.03610v2", null]], "reviews": [], "SUBJECTS": "cs.CL cs.AI cs.NE", "authors": ["georg wiese", "dirk weissenborn", "mariana neves"], "accepted": false, "id": "1706.03610"}, "pdf": {"name": "1706.03610.pdf", "metadata": {"source": "CRF", "title": "Neural Domain Adaptation for Biomedical Question Answering", "authors": ["Georg Wiese", "Dirk Weissenborn", "Mariana Neves"], "emails": ["georg.wiese@student.hpi.de,", "dirk.weissenborn@dfki.de,", "mariana.neves@hpi.de"], "sections": [{"heading": "1 Introduction", "text": "Question answering (QA) is the task of retrieving answers to a question given one or more contexts. It has been explored both in the opendomain setting (Voorhees et al., 1999) as well as domain-specific settings, such as BioASQ for the\nbiomedical domain (Tsatsaronis et al., 2015). The BioASQ challenge provides\u2248 900 factoid and list questions, i.e., questions with one and several answers, respectively. This work focuses on answering these questions, for example: Which drugs are included in the FEC-75 regimen? \u2192 fluorouracil, epirubicin, and cyclophosphamide.\nWe further restrict our focus to extractive QA, i.e., QA instances where the correct answers can be represented as spans in the contexts. Contexts are relevant documents which are provided by an information retrieval (IR) system.\nTraditionally, a QA pipeline consists of namedentity recognition, question classification, and answer processing steps (Jurafsky, 2000). These methods have been applied to biomedical datasets, with moderate success (Zi et al., 2016). The creation of large-scale, open-domain datasets such as SQuAD (Rajpurkar et al., 2016) have recently enabled the development of neural QA systems, e.g., Wang and Jiang (2016), Xiong et al. (2016), Seo et al. (2016), Weissenborn et al. (2017), leading to impressive performance gains over more traditional systems.\nHowever, creating large-scale QA datasets for more specific domains, such as the biomedical, would be very expensive because of the need for domain experts, and therefore not desirable. The recent success of deep learning based methods on open-domain QA datasets raises the question whether the capabilities of trained models are transferable to another domain via domain adaptation techniques. Although domain adaptation has been studied for traditional QA systems (Blitzer et al., 2007) and deep learning systems (Chen et al., 2012; Ganin et al., 2016; Bousmalis et al., 2016; Riemer et al., 2017; Kirkpatrick et al., 2017), it has to our knowledge not yet been applied for end-to-end neural QA systems.\nTo bridge this gap we employ various do-\nar X\niv :1\n70 6.\n03 61\n0v 2\n[ cs\n.C L\n] 1\n5 Ju\nn 20\n17\nmain adaptation techniques to transfer knowledge from a trained, state-of-the-art neural QA system (FastQA, Weissenborn et al. (2017)) to the biomedical domain using the much smaller BioASQ dataset. In order to answer list questions in addition to factoid questions, we extend FastQA with a novel answering mechanism. We evaluate various transfer learning techniques comprehensively. For factoid questions, we show that mere fine-tuning reaches state-of-the-art results, which can further be improved by a forgetting cost regularization (Riemer et al., 2017). On list questions, the results are competitive to existing systems. Our manual analysis of a subset of the factoid questions suggests that the results are even better than the automatic evaluation states, revealing that many of the \u201dincorrect\u201d answers are in fact synonyms to the gold-standard answer."}, {"heading": "2 Related Work", "text": "Traditional Question Answering Traditional factoid and list question answering pipelines can be subdivided into named-entity recognition, question classification, and answer processing components (Jurafsky, 2000). Such systems have also been applied to biomedical QA such as the OAQA system by Zi et al. (2016). Besides a number of domain-independent features, they incorporate a rich amount of biomedical resources, including a domain-specific parser, entity tagger and thesaurus to retrieve concepts and synonyms. A logistic regression classifier is used both for question classification and candidate answer scoring. For candidate answer generation, OAQA employs different strategies for general factoid/list questions, choice questions and quantity questions.\nNeural Question Answering Neural QA systems differ from traditional approaches in that the algorithm is not subdivided into discrete steps. Instead, a single model is trained end-to-end to compute an answer directly for a given question and context. The typical architecture of such systems (Wang and Jiang, 2016; Xiong et al., 2016; Seo et al., 2016) can be summarized as follows:\n1. Embedding Layer: Question and context tokens are mapped to a high-dimensional vector space, for example via GloVe embeddings (Pennington et al., 2014) and (optionally) character embeddings (Seo et al., 2016).\n2. Encoding Layer: The token vectors are processed independently for question and context, usually by a recurrent neural network (RNN).\n3. Interaction Layer: This layer allows for interaction between question and context representations. Examples are Match-LSTM (Wang and Jiang, 2016) and Coattention (Xiong et al., 2016).\n4. Answer Layer: This layer assigns start and end scores to all of the context tokens, which can be done either statically (Wang and Jiang, 2016; Seo et al., 2016) or by a dynamic decoding process (Xiong et al., 2016).\nFastQA FastQA fits into this schema, but reduces the complexity of the architecture by removing the interaction layer, while maintaining state-of-the-art performance (Weissenborn et al., 2017). Instead of one or several interaction layers of RNNs, FastQA computes two simple wordin-question features for each token, which are appended to the embedding vectors before the encoding layer. We chose to base our work on this architecture because of its state-of-the-art performance, faster training time and reduced number of parameters.\nUnsupervised Domain Adaptation Unsupervised domain adaptation describes the task of learning a predictor in a target domain while labeled training data only exists in a different source domain. In the context of deep learning, a common method is to first train an autoencoder on a large unlabeled corpus from both domains and then use the learned input representations as input features to a network trained on the actual task using the labeled source domain dataset (Glorot et al., 2011; Chen et al., 2012). Another approach is to learn the hidden representations directly on the target task. For example, domain-adversarial training optimizes the network such that it computes hidden representations that both help predictions on the source domain dataset and are indistinguishable from hidden representations of the unlabeled target domain dataset (Ganin et al., 2016). These techniques cannot be straightforwardly applied to the question answering task, because they require a large corpus of biomedical question-context pairs (albeit no answers are required).\nSupervised Domain Adaptation In contrast to the unsupervised case, supervised domain adaptation assumes access to a small amount of labeled training data in the target domain. The simplest approach to supervised domain adaptation for neural models is to pre-train the network on data from the source domain and then fine-tune its parameters on data from the target domain. The main drawback of this approach is catastrophic forgetting, which describes the phenomenon that neural networks tend to \u201dforget\u201d knowledge, i.e., its performance in the source domain drops significantly when they are trained on the new dataset. Even though we do not directly aim for good performance in the source domain, measures against catastrophic forgetting can serve as a useful regularizer to prevent over-fitting.\nProgressive neural networks combat this issue by keeping the original parameters fixed and adding new units that can access previously learned features (Rusu et al., 2016). Because this method adds a significant amount of new parameters which have to be trained from scratch, it is not well-suited if the target domain dataset is small. Riemer et al. (2017) use fine-tuning, but add an additional forgetting cost term that punishes deviations from predictions with the original parameters. Another approach is to add an L2 loss which punishes deviation from the original parameters. Kirkpatrick et al. (2017) apply this loss selectively on parameters which are important in the source domain."}, {"heading": "3 Model", "text": "Our network architecture is based on FastQA (Weissenborn et al., 2017), a state-of-the-art neural QA system. Because the network architecture itself is exchangeable, we treat it as a black box, with subtle changes at the input and output layer as well as to the decoding and training procedure. These changes are described in the following. See\nFigure 3 for an overview of the system."}, {"heading": "3.1 Input Layer", "text": "In a first step, words are embedded into a highdimensional vector space. We use three sources of embeddings, which are concatenated to form a single embedding vector:\n\u2022 GloVe embeddings: 300-dimensional GloVe vectors (Pennington et al., 2014). These are\nopen-domain word vectors trained on 840 billion tokens from web documents. The vectors are not updated during training.\n\u2022 Character embeddings: As used in FastQA (Weissenborn et al., 2017) and proposed originally by Seo et al. (2016), we employ a 1-dimensional convolutional neural network which computes word embeddings from the characters of the word.\n\u2022 Biomedical Word2Vec embeddings: 200- dimensional vectors trained using Word2Vec (Mikolov et al., 2013) on about 10 million PubMed abstracts (Pavlopoulos et al., 2014). These vectors are specific to the biomedical domain and we expect them to help on biomedical QA.\nAs an optional step, we add entity tag features to the token embeddings via concatenation. Entity tags are provided by a dictionary-based entity tagger based on the UMLS Metathesaurus. The entity tag feature vector is a 127-dimensional bit vector that for each of the UMLS semantic types states whether the current token is part of an entity of that type. This step is only applied if explicitly\nnoted. Finally, a one-hot encoding of the question type (factoid or list) is appended to all the input vectors. With these embedding vectors as input, we invoke FastQA to produce start and end scores for each of the n context tokens. We denote start scores by yistart and end scores conditioned on a predicted start at position i by yi,jend, with start index i \u2208 [1, n] and end index j \u2208 [i, n]."}, {"heading": "3.2 Output Layer", "text": "In our adapted output layer, we convert the start and end scores to span probabilities. The computation of these probabilities is independent of the question type. The interpretation, however, depends on the question type: While for factoid questions, the list of answer spans is interpreted as a ranked list of answer candidates, for list questions, answers above a certain probability threshold are interpreted as the set of answers to the question.\nGiven the start scores y1start, ..., y n start and end scores yi,1end, ..., y i,n end, we compute the start and end probabilities as follows:\npistart = \u03c3(y i start) (1)\npi,\u00b7end = softmax(y i,\u00b7 end) (2)\nwhere \u03c3(x) is the sigmoid function. As a consequence, multiple tokens can be chosen as likely start tokens, but the network is expected to select a single end token for a given start token, hence the softmax function. Finally, the probability that a given span (i, j) answers the question is pi,jspan = pistart \u00b7 p i,j end. This extension generalizes the FastQA output layer such that multiple answer spans with different start positions can have a high probability, allowing us to retrieve multiple answers for list questions."}, {"heading": "3.3 Decoding", "text": "Given a trained model, start probabilities can be obtained by running a forward pass and computing the start probability as in Equation 1. For the top 20 starts, we compute the end probabilities as given by Eq. 2. From the start and end probabilities, we extract the top 20 answer spans ranked by pi,jspan. As a simple post-processing step, we remove duplicate strings and retain only those with the highest probability.\nFor factoid questions, we output the 5 most likely answer spans as our ranked list of answers. For list questions, we learn a probability cutoff threshold t that defines the set of list answers A = {(i, j)|pi,jspan \u2265 t}. We choose t to be the threshold that optimizes the list F1 score on the respective development set."}, {"heading": "3.4 Domain Adaptation", "text": "Fine-tuning Our training procedure consists of two phases: In the pre-training phase, we train the model on SQuAD, using a token F1 score as the training objective as by Weissenborn et al. (2017). We will refer to the resulting parameters as the base model. In the fine-tuning phase, we initialize the model parameters with the base model and then continue our optimization on the BioASQ dataset with a smaller learning rate.\nForgetting Cost Regularization To avoid catastrophic forgetting during fine-tuning as a means to regularize our model, we optionally add an additional forgetting cost term Lfc, as proposed by Riemer et al. (2017). It is defined as the cross-entropy loss between the current predictions and the base model\u2019s predictions.\nL2 Weight Regularization We also add an L2 loss term Ll2 which penalizes deviations from the base model\u2019s parameters. Note that a more advanced approach would be to apply this loss selectively on weights which are particularly important in the source domain (Kirkpatrick et al., 2017). The final loss is computed as Lfinal = Loriginal + Cfc \u00b7 Lfc + Cl2 \u00b7 Ll2 where Cfc and Cl2 are hyperparameters which are set to 0 unless otherwise noted."}, {"heading": "4 Experimental Setup", "text": ""}, {"heading": "4.1 Datasets", "text": "SQuAD SQuAD (Rajpurkar et al., 2016) is a dataset of\u2248 100, 000 questions with relevant contexts and answers that sparked research interest into the development of neural QA systems recently. The contexts are excerpts of Wikipedia articles for which crowd-source workers generated questions-answer pairs. Because of the large amount of training examples in SQuAD, it lends itself perfectly as our source dataset.\nBioASQ The BioASQ challenge provides a biomedical QA dataset (Tsatsaronis et al., 2015)\nconsisting of questions, relevant contexts (called snippets) from PubMed abstracts and possible answers to the question. It was carefully created with the help of biomedical experts.\nIn this work, we focus on Task B, Phase B of the BioASQ challenge, in which systems must answer questions from gold-standard snippets. These questions can be either yes/no questions, summary questions, factoid questions, or list questions. Because we employ an extractive QA system, we restrict this study to answering factoid and list questions by extracting answer spans from the provided contexts.\nThe 2017 BioASQ training dataset contains 1, 799 questions, of which 413 are factoid and 486 are list questions. The questions have \u2248 20 snippets on average, each of which are on average \u2248 34 tokens long. We found that around 65% of the factoid questions and around 92% of the list questions have at least one extractable answer. For questions with extractable answers, answers spans are computed via a simple substring search in the provided snippets. All other questions are ignored during training and treated as answered incorrectly during evaluation."}, {"heading": "4.2 Training", "text": "We minimize the cross-entropy loss for the gold standard answer spans. However, for multiple answer spans that refer to the same answer (e.g. synonyms), we only minimize the loss for the span of the lowest loss. We use the ADAM (Kingma and Ba, 2014) for optimization on SQuAD with a learning rate starting at 10\u22123 which is halved whenever performance drops between checkpoints. During the fine-tuning phase, we continue optimization on the BioASQ dataset with a smaller learning rate starting at 10\u22124. During both phases, the model is regularized by variational dropout of rate 0.5 (Gal and Ghahramani, 2015)."}, {"heading": "4.3 Evaluation", "text": "The official evaluation measures from BioASQ are mean reciprocal rank (MRR) for factoid questions and F1 score for list questions 1. For factoid questions, the list of ranked answers can be at most five entries long. The F1 score is measured on the gold standard list elements. For both measures,\n1The details can be found at http:// participants-area.bioasq.org/Tasks/b/ eval_meas/\ncase-insensitive string matches are used to check the correctness of a given answer. A list of synonyms is provided for all gold-standard answers. If the system\u2019s response matches one of them, the answer counts as correct.\nFor evaluation, we use two different finetuning datasets, depending on the experiment: BioASQ3B, which contains all questions of the first three BioASQ challenges, and BioASQ4B which additionally contains the test questions of the fourth challenge. BioASQ4B is used as the training dataset for the fifth BioASQ challenge whereas BioASQ3B was used for training during the fourth challenge.\nBecause the datasets are small, we perform 5- fold cross-validation and report the average performance across the five folds. We use the larger BioASQ4B dataset except when evaluating the ensemble and when comparing to participating systems of previous BioASQ challenges.\nAll models were implemented using TensorFlow (Abadi et al., 2016) with a hidden size of 100. Because the context in BioASQ usually comprises multiple snippets, they are processed independently in parallel for each question. Answers from all snippets belonging to a question are merged and ranked according to their individual probabilities."}, {"heading": "5 Results", "text": ""}, {"heading": "5.1 Domain Adaptation", "text": "In this section, we evaluate various domain adaptation techniques. The results of the experiments are summarized in Table 1.\nBaseline As a baseline without transfer learning, Experiment 1 trains the model on BioASQ only. Because the BioASQ dataset by itself is very small, a dropout rate of 0.7 was used, because it worked best in preliminary experiments. We observe a rather low performance, which is expected when applying deep learning to such a small dataset.\nFine-tuning Experiments 2 and 3 evaluate the pure fine-tuning approach: Our base model is a system trained on SQuAD only and tested on BioASQ (Experiment 2). For Experiment 3, we fine-tuned the base model on the BioASQ4B training set. We observe that performance increases significantly, especially on list questions. This increase is expected, because the network is trained\non biomedical- and list questions, which are not part of the SQuAD dataset, for the first time. Overall, the performance of the fine-tuned model on both question types is much higher than the baseline system without transfer learning.\nFeatures In order to evaluate the impact of using biomedical word embeddings, we repeat Experiment 3 without them (Experiment 4). We see a factoid and list performance drop of 3.3 and 1.2 percentage points, respectively, showing that biomedical word embeddings help increase performance.\nIn Experiment 5, we append entity features to the word vector, as described in Section 3.1. Even though these features provide the network with domain-specific knowledge, we found that it actually harms performance on factoid questions. Because most of the entity features are only active during fine-tuning with the small dataset, we conjecture that the performance decrease is due to over-fitting.\nCatastrophic Forgetting We continue our study with techniques to combat catastrophic forgetting as a means to regularize training during fine-tuning. In Experiment 6 of Table 1 we fine-tune the base model on a half-half mixture of BioASQ and SQuAD questions (BioASQ questions have been upsampled accordingly). This form of joint training yielded no significant performance gains. Experiment 7 regularizes the model via an additional forgetting cost term, as\nproposed by Riemer et al. (2017) and explained in Section 3.4. We generally found that this technique only increases performance for factoid questions where the performance boost was largest for Cfc = 100.0. The fact that the forgetting loss decreases performance on list questions is not surprising, as predictions are pushed more towards the predictions of the base model, which has very poor performance on list questions.\nExperiment 8 adds an L2 loss which penalizes deviations from the base model\u2019s parameters. We found that performance decreases as we increase the value of Cl2 which shows that this technique does not help at all. For the sake of completeness we report results for Cl2 = 0.3, the lowest value that yielded a significant drop in performance."}, {"heading": "5.2 Ensemble", "text": "Model ensembles are a common method to tweak the performance of a machine learning system. Ensembles combine multiple model predictions, for example by averaging, in order to improve generalization and prevent over-fitting. We evaluate the utility of an ensemble by training five models on the BioASQ3B dataset using 5-fold crossvalidation. Each of the models is evaluated on the 4B test data, i.e., data which is not included in BioASQ3B.\nDuring application, we run an ensemble by averaging the start and end scores of individual models before they are passed to the sigmoid / softmax functions as defined in Eq. 1 and 2. In Table 2 we summarize the average performance of\nExperiment Factoid MRR List F1\nthe five models, the best performance across the five models, and the performance of the ensemble. We observe performance gains of 3 percentage points on factoid questions and a less than 1 percentage point on list questions, relative to the best single model. This demonstrates a small performance gain that is consistent with the literature."}, {"heading": "5.3 Comparison to competing BioASQ systems", "text": "Because the final results of the fifth BioASQ challenge are not available at the time of writing, we compare our system to the best systems in last year\u2019s challenge 2. For comparison, we use the best single model and the model ensemble trained on BioASQ3B (see Section 5.2). We then evaluate the model on the 5 batches of last year\u2019s challenge using the official BioASQ evaluation tool. Each batch contains 100 questions of which only some are factoid and list questions. Note that the results underestimate our system\u2019s performance, because our competing system\u2019s responses have been manually evaluated by humans while our system\u2019s responses are evaluated automatically using string matching against a potentially incomplete list of synonyms. In fact, our qualitative analysis in Section 5.4 shows that many answers are counted as incorrect, but are synonyms of the gold-standard answer. The results are summarized in Table 3 and compared to the best systems in the challenge in each of the batches and question type categories.\nWith our system winning four out of five batches on factoid questions, we consider it stateof-the-art in biomedical factoid question answering, especially when considering that our results might be higher on manual evaluation. The results on list questions are slightly worse, but still very\n2Last year\u2019s results are available at http: //participants-area.bioasq.org/results/ 4b/phaseB/\ncompetitive. This is surprising, given that the network never saw a list question prior to the finetuning phase. Due to small test set sizes, the sampling error in each batch is large, causing the single model to outperform the model ensemble on some batches."}, {"heading": "5.4 Qualitative Analysis", "text": "In order to get a better insight into the quality of the predictions, we manually validated the predictions for the factoid questions of batch 5 of the fourth BioASQ challenge as given by the best single model (see Table 3). There are in total 33 factoid questions, of which 23 have as the gold standard answer a span in one of the contexts. According to the official BioASQ evaluation, only 4 questions are predicted correctly (i.e., the gold standard answer is ranked highest). However, we identified 10 rank-1 answers which are not counted as correct but are synonyms to the gold standard answer. Examples include \u201dCMT4D disease\u201d instead of \u201dCharcot-Marie-Tooth (CMT) 4D disease\u201d, \u201dtafazzin\u201d instead of \u201dTafazzin (TAZ) gene\u201d, and \u201d\u03b2-glucocerebrosidase\u201d instead of \u201dBeta glucocerebrosidase\u201d. In total, we labeled 14 questions as correct and 24 questions as having their correct answer in the top 5 predictions.\nIn the following, we give examples of mistakes made by the system. Questions are presented in italics. In the context, we underline predicted answers and present correct answers in boldface.\nWe identified eight questions for which the semantic type of the top answer differs from the question answer type. Some of these cases are completely wrong predictions. However, this category also includes subtle mistakes like the following:"}, {"heading": "In which yeast chromosome does", "text": "the rDNA cluster reside?\nThe rDNA cluster in Saccharomyces cerevisiae is located 450 kb from the left end and 610 kb from the right end of chromosome XII...\nHere, it predicted a yeast species the rDNA cluster is located in, but ignored that the question is asking for a chromosome.\nAnother type of mistakes is that the top answer is somewhat correct, but is missing essential information. We labeled four predictions with this category, like the following example:\nHow early during pregnancy does non-invasive cffDNA testing allow sex determination of the fetus? Gold Standard Answer: \"6th to\n10th week of gestation\" or \"first trimester of pregnancy\" Given Top Answer: \"6th-10th\" In summary, to our judgment, 14 of 33 questions (42.4%) are answered correctly, and 24 of 33 questions (72.7%) are answered correctly in one of the top 5 answers. These are surprisingly high numbers considering low MRR score of 23.7% of the automatic evaluation (Table 3)."}, {"heading": "6 Discussion and future work", "text": "The most significant result of this work is that state-of-the-art results in biomedical question answering can be achieved even in the absence of domain-specific feature engineering. Most competing systems require structured domain-specific resources, such as biomedical ontologies, parsers, and entity taggers. While these resources are available in the biomedical domain, they are not available in most domains.\nOur system, on the other hand, requires a large open-domain QA dataset, biomedical word embeddings (which are trained in an unsupervised fashion), and a small biomedical QA dataset. This suggests that our methodology is easily transferable to other domains as well.\nFurthermore, we explored several supervised domain adaptation techniques. In particular, we demonstrated the usefulness of forgetting cost for factoid questions. The decreased performance on list questions is not surprising, because the model\u2019s performance on those questions is very\npoor prior to fine-tuning which is due to the lack of list questions in SQuAD. We believe that large scale open-domain corpora for list questions would enhance performance further.\nUnsupervised domain adaptation could be an interesting direction for future work, because the biomedical domain offers large amounts of textual data, some of which might even contain questions and their corresponding answers. We believe that leveraging these resources holds potential to further improve biomedical QA."}, {"heading": "7 Conclusion", "text": "In this paper, we described a deep learning approach to address the task of biomedical question answering by using domain adaptation techniques. Our experiments reveal that mere fine-tuning in combination with biomedical word embeddings yield state-of-the-art performance on biomedical QA, despite the small amount of in-domain training data and the lack of domain-dependent feature engineering. Techniques to overcome catastrophic forgetting, such as a forgetting cost, can further boost performance for factoid questions. Overall, we show that employing domain adaptation on neural QA systems trained on large-scale, open-domain datasets can yield good performance in domains where large datasets are not available."}, {"heading": "Acknowledgments", "text": "This research was supported by the German Federal Ministry of Education and Research (BMBF) through Software Campus project GeNIE (01IS12050)."}], "references": [{"title": "Tensorflow: Large-scale machine learning on heterogeneous distributed systems", "author": ["Mart\u0131\u0301n Abadi", "Ashish Agarwal", "Paul Barham", "Eugene Brevdo", "Zhifeng Chen", "Craig Citro", "Greg S Corrado", "Andy Davis", "Jeffrey Dean", "Matthieu Devin"], "venue": null, "citeRegEx": "Abadi et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Abadi et al\\.", "year": 2016}, {"title": "Biographies, bollywood, boom-boxes and blenders: Domain adaptation for sentiment classification", "author": ["John Blitzer", "Mark Dredze", "Fernando Pereira"], "venue": "In ACL", "citeRegEx": "Blitzer et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Blitzer et al\\.", "year": 2007}, {"title": "Domain separation networks", "author": ["Konstantinos Bousmalis", "George Trigeorgis", "Nathan Silberman", "Dilip Krishnan", "Dumitru Erhan."], "venue": "Advances in Neural Information Processing Systems. pages 343\u2013 351.", "citeRegEx": "Bousmalis et al\\.,? 2016", "shortCiteRegEx": "Bousmalis et al\\.", "year": 2016}, {"title": "Marginalized denoising autoencoders for domain adaptation", "author": ["Minmin Chen", "Zhixiang Xu", "Kilian Weinberger", "Fei Sha."], "venue": "arXiv preprint arXiv:1206.4683 .", "citeRegEx": "Chen et al\\.,? 2012", "shortCiteRegEx": "Chen et al\\.", "year": 2012}, {"title": "Dropout as a bayesian approximation: Representing model uncertainty in deep learning", "author": ["Yarin Gal", "Zoubin Ghahramani."], "venue": "arXiv preprint arXiv:1506.02142 2.", "citeRegEx": "Gal and Ghahramani.,? 2015", "shortCiteRegEx": "Gal and Ghahramani.", "year": 2015}, {"title": "Domain-adversarial training of neural networks", "author": ["Yaroslav Ganin", "Evgeniya Ustinova", "Hana Ajakan", "Pascal Germain", "Hugo Larochelle", "Fran\u00e7ois Laviolette", "Mario Marchand", "Victor Lempitsky."], "venue": "Journal of Machine Learning Research", "citeRegEx": "Ganin et al\\.,? 2016", "shortCiteRegEx": "Ganin et al\\.", "year": 2016}, {"title": "Domain adaptation for large-scale sentiment classification: A deep learning approach", "author": ["Xavier Glorot", "Antoine Bordes", "Yoshua Bengio."], "venue": "Proceedings of the 28th international conference on machine learning (ICML-11). pages 513\u2013520.", "citeRegEx": "Glorot et al\\.,? 2011", "shortCiteRegEx": "Glorot et al\\.", "year": 2011}, {"title": "Speech & language processing", "author": ["Dan Jurafsky."], "venue": "Pearson Education India.", "citeRegEx": "Jurafsky.,? 2000", "shortCiteRegEx": "Jurafsky.", "year": 2000}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba."], "venue": "arXiv preprint arXiv:1412.6980 .", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Overcoming catastrophic forgetting", "author": ["James Kirkpatrick", "Razvan Pascanu", "Neil Rabinowitz", "Joel Veness", "Guillaume Desjardins", "Andrei A Rusu", "Kieran Milan", "John Quan", "Tiago Ramalho", "Agnieszka Grabska-Barwinska"], "venue": null, "citeRegEx": "Kirkpatrick et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Kirkpatrick et al\\.", "year": 2017}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."], "venue": "Advances in neural information processing systems. pages 3111\u20133119.", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Glove: Global vectors for word representation", "author": ["Jeffrey Pennington", "Richard Socher", "Christopher D. Manning."], "venue": "Empirical Methods in Natural Language Processing (EMNLP). pages 1532\u2013 1543. http://www.aclweb.org/anthology/D14-1162.", "citeRegEx": "Pennington et al\\.,? 2014", "shortCiteRegEx": "Pennington et al\\.", "year": 2014}, {"title": "Squad: 100,000+ questions for machine comprehension of text", "author": ["Pranav Rajpurkar", "Jian Zhang", "Konstantin Lopyrev", "Percy Liang."], "venue": "arXiv preprint arXiv:1606.05250 .", "citeRegEx": "Rajpurkar et al\\.,? 2016", "shortCiteRegEx": "Rajpurkar et al\\.", "year": 2016}, {"title": "Representation stability as a regularizer for improved text analytics transfer learning https://openreview.net/pdf?id=HyenWc5gx", "author": ["Metthew Riemer", "Elham Khabiri", "Richard Goodwin"], "venue": null, "citeRegEx": "Riemer et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Riemer et al\\.", "year": 2017}, {"title": "Progressive neural networks", "author": ["Andrei A Rusu", "Neil C Rabinowitz", "Guillaume Desjardins", "Hubert Soyer", "James Kirkpatrick", "Koray Kavukcuoglu", "Razvan Pascanu", "Raia Hadsell."], "venue": "arXiv preprint arXiv:1606.04671 .", "citeRegEx": "Rusu et al\\.,? 2016", "shortCiteRegEx": "Rusu et al\\.", "year": 2016}, {"title": "Bidirectional attention flow for machine comprehension", "author": ["Minjoon Seo", "Aniruddha Kembhavi", "Ali Farhadi", "Hannaneh Hajishirzi."], "venue": "arXiv preprint arXiv:1611.01603 .", "citeRegEx": "Seo et al\\.,? 2016", "shortCiteRegEx": "Seo et al\\.", "year": 2016}, {"title": "An overview of the bioasq", "author": ["George Tsatsaronis", "Georgios Balikas", "Prodromos Malakasiotis", "Ioannis Partalas", "Matthias Zschunke", "Michael R Alvers", "Dirk Weissenborn", "Anastasia Krithara", "Sergios Petridis", "Dimitris Polychronopoulos"], "venue": null, "citeRegEx": "Tsatsaronis et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tsatsaronis et al\\.", "year": 2015}, {"title": "The trec-8 question answering track report", "author": ["Ellen M Voorhees"], "venue": "Trec. volume 99, pages 77\u2013", "citeRegEx": "Voorhees,? 1999", "shortCiteRegEx": "Voorhees", "year": 1999}, {"title": "Machine comprehension using match-lstm and answer pointer", "author": ["Shuohang Wang", "Jing Jiang."], "venue": "arXiv preprint arXiv:1608.07905 .", "citeRegEx": "Wang and Jiang.,? 2016", "shortCiteRegEx": "Wang and Jiang.", "year": 2016}, {"title": "Making neural qa as simple as possible but not simpler", "author": ["Dirk Weissenborn", "Georg Wiese", "Laura Seiffe."], "venue": "arXiv preprint arXiv:1703.04816 .", "citeRegEx": "Weissenborn et al\\.,? 2017", "shortCiteRegEx": "Weissenborn et al\\.", "year": 2017}, {"title": "Dynamic coattention networks for question answering", "author": ["Caiming Xiong", "Victor Zhong", "Richard Socher."], "venue": "arXiv preprint arXiv:1611.01604 .", "citeRegEx": "Xiong et al\\.,? 2016", "shortCiteRegEx": "Xiong et al\\.", "year": 2016}, {"title": "Learning to answer biomedical questions: Oaqa at bioasq 4b", "author": ["Yang Zi", "Zhou Yue", "Eric Nyberg."], "venue": "ACL 2016 page 23.", "citeRegEx": "Zi et al\\.,? 2016", "shortCiteRegEx": "Zi et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 16, "context": ", 1999) as well as domain-specific settings, such as BioASQ for the biomedical domain (Tsatsaronis et al., 2015).", "startOffset": 86, "endOffset": 112}, {"referenceID": 7, "context": "Traditionally, a QA pipeline consists of namedentity recognition, question classification, and answer processing steps (Jurafsky, 2000).", "startOffset": 119, "endOffset": 135}, {"referenceID": 21, "context": "These methods have been applied to biomedical datasets, with moderate success (Zi et al., 2016).", "startOffset": 78, "endOffset": 95}, {"referenceID": 12, "context": "The creation of large-scale, open-domain datasets such as SQuAD (Rajpurkar et al., 2016) have recently enabled the development of neural QA systems, e.", "startOffset": 64, "endOffset": 88}, {"referenceID": 7, "context": "Traditionally, a QA pipeline consists of namedentity recognition, question classification, and answer processing steps (Jurafsky, 2000). These methods have been applied to biomedical datasets, with moderate success (Zi et al., 2016). The creation of large-scale, open-domain datasets such as SQuAD (Rajpurkar et al., 2016) have recently enabled the development of neural QA systems, e.g., Wang and Jiang (2016), Xiong et al.", "startOffset": 120, "endOffset": 411}, {"referenceID": 7, "context": "Traditionally, a QA pipeline consists of namedentity recognition, question classification, and answer processing steps (Jurafsky, 2000). These methods have been applied to biomedical datasets, with moderate success (Zi et al., 2016). The creation of large-scale, open-domain datasets such as SQuAD (Rajpurkar et al., 2016) have recently enabled the development of neural QA systems, e.g., Wang and Jiang (2016), Xiong et al. (2016), Seo et al.", "startOffset": 120, "endOffset": 432}, {"referenceID": 7, "context": "Traditionally, a QA pipeline consists of namedentity recognition, question classification, and answer processing steps (Jurafsky, 2000). These methods have been applied to biomedical datasets, with moderate success (Zi et al., 2016). The creation of large-scale, open-domain datasets such as SQuAD (Rajpurkar et al., 2016) have recently enabled the development of neural QA systems, e.g., Wang and Jiang (2016), Xiong et al. (2016), Seo et al. (2016), Weissenborn et al.", "startOffset": 120, "endOffset": 451}, {"referenceID": 7, "context": "Traditionally, a QA pipeline consists of namedentity recognition, question classification, and answer processing steps (Jurafsky, 2000). These methods have been applied to biomedical datasets, with moderate success (Zi et al., 2016). The creation of large-scale, open-domain datasets such as SQuAD (Rajpurkar et al., 2016) have recently enabled the development of neural QA systems, e.g., Wang and Jiang (2016), Xiong et al. (2016), Seo et al. (2016), Weissenborn et al. (2017), leading to impressive performance gains over more traditional systems.", "startOffset": 120, "endOffset": 478}, {"referenceID": 1, "context": "Although domain adaptation has been studied for traditional QA systems (Blitzer et al., 2007) and deep learning systems (Chen et al.", "startOffset": 71, "endOffset": 93}, {"referenceID": 3, "context": ", 2007) and deep learning systems (Chen et al., 2012; Ganin et al., 2016; Bousmalis et al., 2016; Riemer et al., 2017; Kirkpatrick et al., 2017), it has to our knowledge not yet been applied for end-to-end neural QA systems.", "startOffset": 34, "endOffset": 144}, {"referenceID": 5, "context": ", 2007) and deep learning systems (Chen et al., 2012; Ganin et al., 2016; Bousmalis et al., 2016; Riemer et al., 2017; Kirkpatrick et al., 2017), it has to our knowledge not yet been applied for end-to-end neural QA systems.", "startOffset": 34, "endOffset": 144}, {"referenceID": 2, "context": ", 2007) and deep learning systems (Chen et al., 2012; Ganin et al., 2016; Bousmalis et al., 2016; Riemer et al., 2017; Kirkpatrick et al., 2017), it has to our knowledge not yet been applied for end-to-end neural QA systems.", "startOffset": 34, "endOffset": 144}, {"referenceID": 13, "context": ", 2007) and deep learning systems (Chen et al., 2012; Ganin et al., 2016; Bousmalis et al., 2016; Riemer et al., 2017; Kirkpatrick et al., 2017), it has to our knowledge not yet been applied for end-to-end neural QA systems.", "startOffset": 34, "endOffset": 144}, {"referenceID": 9, "context": ", 2007) and deep learning systems (Chen et al., 2012; Ganin et al., 2016; Bousmalis et al., 2016; Riemer et al., 2017; Kirkpatrick et al., 2017), it has to our knowledge not yet been applied for end-to-end neural QA systems.", "startOffset": 34, "endOffset": 144}, {"referenceID": 13, "context": "For factoid questions, we show that mere fine-tuning reaches state-of-the-art results, which can further be improved by a forgetting cost regularization (Riemer et al., 2017).", "startOffset": 153, "endOffset": 174}, {"referenceID": 18, "context": "main adaptation techniques to transfer knowledge from a trained, state-of-the-art neural QA system (FastQA, Weissenborn et al. (2017)) to the biomedical domain using the much smaller BioASQ dataset.", "startOffset": 108, "endOffset": 134}, {"referenceID": 7, "context": "Traditional Question Answering Traditional factoid and list question answering pipelines can be subdivided into named-entity recognition, question classification, and answer processing components (Jurafsky, 2000).", "startOffset": 196, "endOffset": 212}, {"referenceID": 7, "context": "Traditional Question Answering Traditional factoid and list question answering pipelines can be subdivided into named-entity recognition, question classification, and answer processing components (Jurafsky, 2000). Such systems have also been applied to biomedical QA such as the OAQA system by Zi et al. (2016). Besides a number of domain-independent features, they incorporate a rich amount of biomedical resources, including a domain-specific parser, entity tagger and thesaurus to retrieve concepts and synonyms.", "startOffset": 197, "endOffset": 311}, {"referenceID": 18, "context": "The typical architecture of such systems (Wang and Jiang, 2016; Xiong et al., 2016; Seo et al., 2016) can be summarized as follows:", "startOffset": 41, "endOffset": 101}, {"referenceID": 20, "context": "The typical architecture of such systems (Wang and Jiang, 2016; Xiong et al., 2016; Seo et al., 2016) can be summarized as follows:", "startOffset": 41, "endOffset": 101}, {"referenceID": 15, "context": "The typical architecture of such systems (Wang and Jiang, 2016; Xiong et al., 2016; Seo et al., 2016) can be summarized as follows:", "startOffset": 41, "endOffset": 101}, {"referenceID": 11, "context": "Embedding Layer: Question and context tokens are mapped to a high-dimensional vector space, for example via GloVe embeddings (Pennington et al., 2014) and (optionally) character embeddings (Seo et al.", "startOffset": 125, "endOffset": 150}, {"referenceID": 15, "context": ", 2014) and (optionally) character embeddings (Seo et al., 2016).", "startOffset": 46, "endOffset": 64}, {"referenceID": 18, "context": "Examples are Match-LSTM (Wang and Jiang, 2016) and Coattention (Xiong et al.", "startOffset": 24, "endOffset": 46}, {"referenceID": 20, "context": "Examples are Match-LSTM (Wang and Jiang, 2016) and Coattention (Xiong et al., 2016).", "startOffset": 63, "endOffset": 83}, {"referenceID": 18, "context": "Answer Layer: This layer assigns start and end scores to all of the context tokens, which can be done either statically (Wang and Jiang, 2016; Seo et al., 2016) or by a dynamic decoding process (Xiong et al.", "startOffset": 120, "endOffset": 160}, {"referenceID": 15, "context": "Answer Layer: This layer assigns start and end scores to all of the context tokens, which can be done either statically (Wang and Jiang, 2016; Seo et al., 2016) or by a dynamic decoding process (Xiong et al.", "startOffset": 120, "endOffset": 160}, {"referenceID": 20, "context": ", 2016) or by a dynamic decoding process (Xiong et al., 2016).", "startOffset": 41, "endOffset": 61}, {"referenceID": 19, "context": "FastQA FastQA fits into this schema, but reduces the complexity of the architecture by removing the interaction layer, while maintaining state-of-the-art performance (Weissenborn et al., 2017).", "startOffset": 166, "endOffset": 192}, {"referenceID": 6, "context": "In the context of deep learning, a common method is to first train an autoencoder on a large unlabeled corpus from both domains and then use the learned input representations as input features to a network trained on the actual task using the labeled source domain dataset (Glorot et al., 2011; Chen et al., 2012).", "startOffset": 273, "endOffset": 313}, {"referenceID": 3, "context": "In the context of deep learning, a common method is to first train an autoencoder on a large unlabeled corpus from both domains and then use the learned input representations as input features to a network trained on the actual task using the labeled source domain dataset (Glorot et al., 2011; Chen et al., 2012).", "startOffset": 273, "endOffset": 313}, {"referenceID": 5, "context": "For example, domain-adversarial training optimizes the network such that it computes hidden representations that both help predictions on the source domain dataset and are indistinguishable from hidden representations of the unlabeled target domain dataset (Ganin et al., 2016).", "startOffset": 257, "endOffset": 277}, {"referenceID": 14, "context": "Progressive neural networks combat this issue by keeping the original parameters fixed and adding new units that can access previously learned features (Rusu et al., 2016).", "startOffset": 152, "endOffset": 171}, {"referenceID": 12, "context": "Riemer et al. (2017) use fine-tuning, but add an additional forgetting cost term that punishes deviations from predictions with the original parameters.", "startOffset": 0, "endOffset": 21}, {"referenceID": 9, "context": "Kirkpatrick et al. (2017) apply this loss selectively on parameters which are important in the source domain.", "startOffset": 0, "endOffset": 26}, {"referenceID": 19, "context": "Our network architecture is based on FastQA (Weissenborn et al., 2017), a state-of-the-art neural QA system.", "startOffset": 44, "endOffset": 70}, {"referenceID": 11, "context": "\u2022 GloVe embeddings: 300-dimensional GloVe vectors (Pennington et al., 2014).", "startOffset": 50, "endOffset": 75}, {"referenceID": 19, "context": "At its core, it uses an extractive neural QA system as a black box (we use FastQA (Weissenborn et al., 2017)).", "startOffset": 82, "endOffset": 108}, {"referenceID": 19, "context": "\u2022 Character embeddings: As used in FastQA (Weissenborn et al., 2017) and proposed originally by Seo et al.", "startOffset": 42, "endOffset": 68}, {"referenceID": 15, "context": ", 2017) and proposed originally by Seo et al. (2016), we employ a 1-dimensional convolutional neural network which computes word embeddings from the characters of the word.", "startOffset": 35, "endOffset": 53}, {"referenceID": 10, "context": "\u2022 Biomedical Word2Vec embeddings: 200dimensional vectors trained using Word2Vec (Mikolov et al., 2013) on about 10 million PubMed abstracts (Pavlopoulos et al.", "startOffset": 80, "endOffset": 102}, {"referenceID": 19, "context": "Fine-tuning Our training procedure consists of two phases: In the pre-training phase, we train the model on SQuAD, using a token F1 score as the training objective as by Weissenborn et al. (2017). We will refer to the resulting parameters as the base model.", "startOffset": 170, "endOffset": 196}, {"referenceID": 13, "context": "Forgetting Cost Regularization To avoid catastrophic forgetting during fine-tuning as a means to regularize our model, we optionally add an additional forgetting cost term Lfc, as proposed by Riemer et al. (2017). It is defined as the cross-entropy loss between the current predictions and the base model\u2019s predictions.", "startOffset": 192, "endOffset": 213}, {"referenceID": 9, "context": "Note that a more advanced approach would be to apply this loss selectively on weights which are particularly important in the source domain (Kirkpatrick et al., 2017).", "startOffset": 140, "endOffset": 166}, {"referenceID": 12, "context": "SQuAD SQuAD (Rajpurkar et al., 2016) is a dataset of\u2248 100, 000 questions with relevant contexts and answers that sparked research interest into the development of neural QA systems recently.", "startOffset": 12, "endOffset": 36}, {"referenceID": 16, "context": "BioASQ The BioASQ challenge provides a biomedical QA dataset (Tsatsaronis et al., 2015)", "startOffset": 61, "endOffset": 87}, {"referenceID": 8, "context": "We use the ADAM (Kingma and Ba, 2014) for optimization on SQuAD with a learning rate starting at 10\u22123 which is halved whenever performance drops between checkpoints.", "startOffset": 16, "endOffset": 37}, {"referenceID": 4, "context": "5 (Gal and Ghahramani, 2015).", "startOffset": 2, "endOffset": 28}, {"referenceID": 0, "context": "All models were implemented using TensorFlow (Abadi et al., 2016) with a hidden size of 100.", "startOffset": 45, "endOffset": 65}, {"referenceID": 13, "context": "Experiment 7 regularizes the model via an additional forgetting cost term, as proposed by Riemer et al. (2017) and explained in Section 3.", "startOffset": 90, "endOffset": 111}], "year": 2017, "abstractText": "Factoid question answering (QA) has recently benefited from the development of deep learning (DL) systems. Neural network models outperform traditional approaches in domains where large datasets exist, such as SQuAD (\u2248 100, 000 questions) for Wikipedia articles. However, these systems have not yet been applied to QA in more specific domains, such as biomedicine, because datasets are generally too small to train a DL system from scratch. For example, the BioASQ dataset for biomedical QA comprises less then 900 factoid (single answer) and list (multiple answers) QA instances. In this work, we adapt a neural QA system trained on a large open-domain dataset (SQuAD, source) to a biomedical dataset (BioASQ, target) by employing various transfer learning techniques. Our network architecture is based on a state-of-theart QA system, extended with biomedical word embeddings and a novel mechanism to answer list questions. In contrast to existing biomedical QA systems, our system does not rely on domain-specific ontologies, parsers or entity taggers, which are expensive to create. Despite this fact, our systems achieve state-of-the-art results on factoid questions and competitive results on list questions.", "creator": "LaTeX with hyperref package"}}}