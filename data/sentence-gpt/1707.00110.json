{"id": "1707.00110", "review": {"conference": "EMNLP", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jul-2017", "title": "Efficient Attention using a Fixed-Size Memory Representation", "abstract": "The standard content-based attention mechanism typically used in sequence-to-sequence models is computationally expensive as it requires the comparison of large encoder and decoder states at each time step. In this work, we propose an alternative attention mechanism based on a fixed size memory representation that is more efficient. Our technique predicts a compact set of K attention contexts during encoding and lets the decoder compute an efficient lookup that does not need to consult the memory location to get information.\n\n\n\n\n\n\n\n\nThe K type class has a number of K type types for encoding the value of a function to the data type. The K type class is a type-based representation of the K type with the return type of an K type.\nThe data type consists of a type-based representation of the K type that is implemented for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable of the data type that is used for decoding a variable", "histories": [["v1", "Sat, 1 Jul 2017 08:16:24 GMT  (3265kb,D)", "http://arxiv.org/abs/1707.00110v1", "EMNLP 2017"]], "COMMENTS": "EMNLP 2017", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["denny britz", "melody y guan", "minh-thang luong"], "accepted": true, "id": "1707.00110"}, "pdf": {"name": "1707.00110.pdf", "metadata": {"source": "CRF", "title": "Efficient Attention using a Fixed-Size Memory Representation", "authors": ["Denny Britz", "Melody Y. Guan"], "emails": ["dennybritz@google.com", "melodyguan@google.com", "thangluong@google.com"], "sections": [{"heading": "1 Introduction", "text": "Sequence-to-sequence models (Sutskever et al., 2014; Cho et al., 2014) have achieved state of the art results across a wide variety of tasks, including Neural Machine Translation (NMT) (Bahdanau et al., 2014; Wu et al., 2016), text summarization (Rush et al., 2015; Nallapati et al., 2016), speech recognition (Chan et al., 2015; Chorowski and Jaitly, 2016), image captioning (Xu et al., 2015), and conversational modeling (Vinyals and Le, 2015; Li et al., 2015).\nThe most popular approaches are based on an encoder-decoder architecture consisting of two recurrent neural networks (RNNs) and an attention mechanism that aligns target to source tokens (Bahdanau et al., 2014; Luong et al., 2015). The typical attention mechanism used in these architectures computes a new attention context at each decoding\n\u2217Equal Contribution. Author order alphabetical.\nstep based on the current state of the decoder. Intuitively, this corresponds to looking at the source sequence after the output of every single target token.\nInspired by how humans process sentences, we believe it may be unnecessary to look back at the entire original source sequence at each step.1 We thus propose an alternative attention mechanism (section 3) that leads to smaller computational time complexity. Our method predictsK attention context vectors while reading the source, and learns to use a weighted average of these vectors at each step of decoding. Thus, we avoid looking back at the source sequence once it has been encoded. We show (section 4) that this speeds up inference while performing on-par with the standard mechanism on both toy and real-world WMT translation datasets. We also show that our mechanism leads to larger speedups as sequences get longer. Finally, by visualizing the attention scores (section 5), we verify that the proposed technique learns meaningful alignments, and that different attention context vectors specialize on different parts of the source."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Sequence-to-Sequence Model with Attention", "text": "Our models are based on an encoder-decoder architecture with attention mechanism (Bahdanau et al., 2014; Luong et al., 2015). An encoder function takes as input a sequence of source tokens x=(x1,...,xm) and produces a sequence of states s=(s1,...,sm) .The decoder is an RNN that predicts the probability of a target sequence y=(y1,...,yT |s). The probability of each target token yi \u2208{1,...,|V |} is predicted based on the recurrent state in the decoder RNN, hi, the previous words, y<i, and a context vector ci. The context vector ci, also referred to as the attention vector, is calculated as a weighted average of the source states.\n1Eye-tracking and keystroke logging data from human translators show that translators generally do not reread previously translated source text words when producing target text (Carl et al., 2011).\nar X\niv :1\n70 7.\n00 11\n0v 1\n[ cs\n.C L\n] 1\nJ ul\n2 01\n7\nci= \u2211 j \u03b1ijsj (1)\n\u03b1i=softmax(fatt(hi,s)) (2)\nHere, fatt(hi, s) is an attention function that calculates an unnormalized alignment score between the encoder state sj and the decoder state hi. Variants of fatt used in Bahdanau et al. (2014) and Luong et al. (2015) are:\nfatt(hi,sj)= { vTa tanh(Wa[hi,sj]), Bahdanau hTi Wasj Luong\nwhere Wa and va are model parameters learned to predict alignment. Let |S| and |T | denote the lengths of the source and target sequences respectively andD denoate the state size of the encoder and decoder RNN. Such content-based attention mechanisms result in inference times ofO(D2|S||T |)2, as each context vector depends on the current decoder statehi and all encoder states, and requires anO(D2) matrix multiplication.\nThe decoder outputs a distribution over a vocabulary of fixed-size |V |:\nP(yi|y<i,x)=softmax(W [si;ci]+b) (3)\nThe model is trained end-to-end by minimizing the negative log likelihood of the target words using stochastic gradient descent."}, {"heading": "3 Memory-Based Attention Model", "text": "Our proposed model is shown in Figure 1. During encoding, we compute an attention matrix C\u2208RK\u00d7D, where K is the number of attention vectors and a hyperparameter of our method, and D is the dimensionality of the top-most encoder state. This matrix is computed by predicting a score vector \u03b1t \u2208 RK at each encoding time step t. C is then a linear combination of the encoder states, weighted by \u03b1t:\nCk= |S|\u2211 t=0 \u03b1tkst (4)\n\u03b1t=softmax(W\u03b1st), (5)\nwhereW\u03b1 is a parameter matrix in RK\u00d7D. The computational time complexity for this operation is O(KD|S|). One can think of C as compact fixed-length memory that the decoder\n2An exception is the dot-attention from Luong et al. (2015), which is O(D|S||T |), which we discuss further in Section 3.\nwill perform attention over. In contrast, standard approaches use a variable-length set of encoder states for attention. At each decoding step, we similarly predictK scores \u03b2\u2208RK. The final attention context c is a linear combination of the rows in C weighted by the scores. Intuitively, each decoder step predicts how important each of theK attention vectors is.\nc= K\u2211 i=0 \u03b2iCi (6)\n\u03b2=softmax(W\u03b2h) (7)\nHere, h is the current state of the decoder, andW\u03b2 is a learned parameter matrix. Note that we do not access the encoder states at each decoder step. We simply take a linear combination of the attention matrix C pre-computed during encoding - a much cheaper operation that is independent of the length of the source sequence. The time complexity of this computation isO(KD|T |) as multiplication with theK attention matrices needs to happen at each decoding step.\nSumming O(KD|S|) from encoding and O(KD|T |) from decoding, we have a total linear computational complexity of O(KD(|S| + |T |). As D is typically very large, 512 or 1024 units in most applications, we expect our model to be faster than the standard attention mechanism running in O(D2|S||T |). For long sequences (as in summarization, where \u2014S\u2014 is large), we also expect our model to be faster than the cheaper dot-based attention mechanism, which needs O(D|S||T |) computation time and requires encoder and decoder states sizes to match.\nWe also experimented with using a sigmoid function instead of the softmax to score the encoder and decoder attention scores, resulting in 4 possible combinations. We call this choice the scoring function. A softmax scoring function calculates normalized scores, while the sigmoid scoring function results in unnormalized scores that can be understood as gates."}, {"heading": "3.1 Model Interpretations", "text": "Our memory-based attention model can be understood intuitively in two ways. We can interpret it as \u201dpredicting\u201d the set of attention contexts produced by a standard attention mechanism during encoding. To see this, assume we set K\u2248|T |. In this case, we predict all |T | attention contexts during the encoding stage and learn to choose the right one during decoding. This is cheaper than computing contexts one-by-one based on the decoder and encoder content. In fact, we could enforce this objective by first training\na regular attention model and adding a regularization term to force the memory matrix C to be close to the T\u00d7D vectors computed by the standard attention. We leave it to future work to explore such an objective.\nAlternatively, we can interpret our mechanism as first predicting a compact K \u00d7D memory matrix, a representation of the source sequence, and then performing location-based attention on the memory by picking which row of the matrix to attend to. Standard location-based attention mechanism, by contrast, predicts a location in the source sequence to focus on (Luong et al., 2015; Xu et al., 2015)."}, {"heading": "3.2 Position Encodings (PE)", "text": "In the above formulation, the predictions of attention contexts are symmetric. That is, Ci is not forced to be different from Cj 6=i. While we would hope for the model to learn to generate distinct attention contexts, we now present an extension that pushes the model into this direction. We add position encodings to the score matrix that forces the first few context vector C1,C2,... to focus on the beginning of the sequence and the last few vectors ...,CK\u22121,CK to focus on the end (thereby encouraging in-between vectors to focus on the middle).\nExplicitly, we multiply the score vector \u03b1 with\nposition encodings ls\u2208RK:\nCPE= |S|\u2211 s=0 \u03b1PEhs (8) \u03b1PEs =softmax(W\u03b1hs\u25e6ls) (9)\nTo obtain ls we first calculate a constant matrix L where we define each element as\nLks=(1\u2212k/K)(1\u2212s/S)+ k\nK\ns S , (10)\nadapting a formula from (Sukhbaatar et al., 2015). Here, k \u2208 {1,2, ...,K} is the context vector index and S is the maximum sequence length across all source sequences. The manifold is shown graphically in Figure 2. We can see that earlier encoder states are upweighted in the first context vectors, and later states are upweighted in later vectors. The symmetry of the manifold and its stationary point having value 0.5 both follow from Eq. 10. The elements of the matrix that fall beyond the sequence lengths are then masked out and the remaining elements are renormalized across the timestep dimension. This results in the jagged array of position encodings {lks}."}, {"heading": "4 Experiments", "text": ""}, {"heading": "4.1 Toy Copying Experiment", "text": "Due to the reduction of computational time complexity we expect our method to yield performance gains especially for longer sequences and tasks where the source can be compactly represented in a fixed-size memory matrix. To investigate the trade-off between speed and performance, we compare our technique to standard models with and without attention on a Sequence Copy Task of varying length like in Graves et al. (2014). We generated 4 training datasets of 100,000 examples and a validation dataset of 1,000 examples. The vocabulary size was 20. For each dataset, the sequences had lengths randomly chosen between 0 to L, for L\u2208{10,50,100,200} unique to each dataset."}, {"heading": "4.1.1 Training Setup", "text": "All models are implemented using TensorFlow based on the seq2seq implementation of Britz et al. (2017)3 and trained on a single machine with a Nvidia K40m GPU. We use a 2-layer 256-unit, a bidirectional LSTM (Hochreiter and Schmidhuber, 1997) encoder, a 2-layer 256-unit LSTM decoder, and 256-dimensional embeddings. For the attention baseline, we use the standard parametrized attention (Bahdanau et al., 2014). Dropout of 0.2 (0.8 keep probability) is applied to the input of each cell and we optimize using Adam (Kingma and Ba, 2014) at a learning rate of 0.0001 and batch size 128. We train for at most 200,000 steps (see Figure 3 for sample learning curves). BLEU scores are calculated on tokenized data using the multi-bleu.perl script in Moses.4 We decode using beam search with a beam\n3http://github.com/google/seq2seq 4http://github.com/moses-smt/mosesdecoder\nsize of 10 (Wiseman and Rush, 2016)."}, {"heading": "4.1.2 Results", "text": "Table 1 shows the BLEU scores of our model on different sequence lengths while varyingK. This is a study of the trade-off between computational time and representational power. A largeK allows us to compute complex source representations, while aK of 1 limits the source representation to a single vector. We can see that performance consistently increases withK up to a point that depends on the data length, with longer sequences requiring more complex representations. The results with and without position encodings are almost identical on the toy data. Our technique learns to fit the data as well as the standard attention mechanism despite having less representational power. Both beat the non-attention baseline by a significant margin.\n0 50 100 150 200 steps (k)\n0.0\n0.5\n1.0\n1.5\n2.0\n2.5\n3.0 3.5 lo g p e rp le x it y K=1 K=4 K=16 K=32 K=64 attention no attention\n(a) Comparison of varying K for copying sequences of length 200 on evaluation data, showing that large K leads to faster convergence and small K performs similarly to the non-attentional baseline.\n0 50 100 150 200 steps (k)\n0.0\n0.5\n1.0\n1.5\n2.0\n2.5\n3.0\n3.5\nlo g p\ne rp\nle x it\ny\nsigmoid/sigmoid sigmoid/softmax softmax/sigmoid softmax/softmax\n(b) Comparison of sigmoid and softmax functions for choosing the encoder and decoder attention scores on evaluation data, showing that choice of gating/normalization matters.\nFigure 3: Training Curves for the Toy Copy task\nThat we are able to represent the source sequence with a fixed size matrix with fewer than |S| rows suggests that traditional attention mechanisms may be representing the source with redundancies and wasting computational resources. This makes intuitive sense for the toy task, which should require a relatively simple representation.\nThe last column shows that our technique significantly speeds up the inference process. The gap in inference speed increases as sequences become longer. We measured inference time on the full validation set of 1,000 examples, not including data loading or model construction times.\nFigure 3a shows the learning curves for sequence length 200. We see thatK=1 is unable to fit the data distribution, whileK\u2208{32,64} fits the data almost as quickly as the attention-based model. Figure 3b shows the effect of varying the encoder and decoder scoring functions between softmax and sigmoid. All combinations manage to fit the data, but some converge faster than others. In section 5 we show that distinct alignments are learned by different function combinations."}, {"heading": "4.2 Machine Translation", "text": "Next, we explore if the memory-based attention mechanism is able to fit complex real-world datasets. For this purpose we use 4 large machine translation datasets of WMT\u2019175 on the following language pairs: English-Czech (en-cs, 52M examples), EnglishGerman (en-de, 5.9M examples), English-Finish (en-fi, 2.6M examples), and English-Turkish (en-tr, 207,373 examples). We used the newly available pre-\n5statmt.org/wmt17/translation-task.html\nprocessed datasets for the WMT\u201917 task.6 Note that our scores may not be directly comparable to other work that performs their own data pre-processing. We learn shared vocabularies of 16,000 subword units using the BPE algorithm (Sennrich et al., 2016). We use newstest2015 as a validation set, and report BLEU on newstest2016."}, {"heading": "4.2.1 Training Setup", "text": "We use a similar setup to the Toy Copy task, but use 512 RNN and embedding units, train using 8 distributed workers with 1 GPU each, and train for at most 1M steps. We save checkpoints every 30 minutes during training, and choose the best based on the validation BLEU score."}, {"heading": "4.2.2 Results", "text": "Table 2 compares our approach with and without position encodings, and with varying values for hyperparameter K, to baseline models with regular attention mechanism. Learning curves are shown in Figure 4. We see that our memory attention model with sufficiently high K performs on-par with, or slightly better, than the attention-based baseline model despite its simpler nature. Across the board, models with K = 64 performed better than corresponding models with K =32, suggesting that using a larger number of attention vectors can capture a richer understanding of source sequences. Position encodings also seem to consistently improve model performance.\nTable 3 shows that our model results in faster decoding time even on a complex dataset with a large\n6http://data.statmt.org/wmt17/translation-task/preprocessed\nvocabulary of 16k. We measured decoding time over the full validation set, not including time used for model setup and data loading, averaged across 10 runs. The average sequence length for examples in this data was 35, and we expect more significant speedups for tasks with longer sequences, as suggested by our experiments on toy data. Note that in our NMT ex-\namples/experiments,K\u2248T , but we obtain computational savings from the fact thatK D. We may be able to setK T , as in toy copying, and still get very good performance in other tasks. For instance, in summarization the source is complex but the representation of the source required to perform the task is \u201dsimple\u201d (i.e. all that is needed to generate the abstract).\nFigure 5 shows the effect of using sigmoid and softmax function in the encoders and decoders. We found that softmax/softmax consistently performs badly, while all other combinations perform about equally well. We report results for the best combination only (as chosen on the validation set), but we found this choice to only make a minor difference."}, {"heading": "5 Visualizing Attention", "text": "A useful property of the standard attention mechanism is that it produces meaningful alignment between source and target sequences. Often, the attention mechanism learns to progressively focus on the next source token as it decodes the target. These visualizations can be an important tool in debugging and evaluating seq2seq models and are often used for unknown token replacement.\nThis raises the question of whether or not our proposed memory attention mechanism also learns to generate meaningful alignments. Due to limiting the number of attention contexts to a number that is generally less than the sequence length, it is not immediately obvious what each context would learn to focus on. Our hope was that the model would learn to focus on multiple alignments at the same time, within the same attention vector. For example, if the source sequence is of length 40 and we haveK=10 attention contexts, we would hope that C1 roughly focuses on tokens 1 to 4, C2 on tokens 5 to 8, and so on. Figures 6 and 7 show that this is indeed the case. To generate this visualization we multiply the attention scores \u03b1 and \u03b2 from the encoder and decoder. Figure 8 shows a sample translation task visualization.\nFigure 6 suggests that our model learns distinct ways to use its memory depending on the encoder and decoder functions. Interestingly, using softmax normalization results in attention maps typical of those derived from using standard attention, i.e. a relatively linear mapping between source and target tokens. Meanwhile, using sigmoid gating results in what seems to be a distributed representation of the source sequences across encoder time steps, with multiple contiguous attention contexts being accessed at each decoding step."}, {"heading": "6 Related Work", "text": "Our contributions build on previous work in making seq2seq models more computationally efficient. Luong et al. (2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence. Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain.\nWu et al. (2016) presents several enhancements to the standard seq2seq architecture that allow more efficient computation on GPUs, such as only attending on the bottom layer. Kalchbrenner et al. (2016) propose a linear time architecture based on stacked convolutional neural networks. Gehring et al. (2016) also propose the use of convolutional encoders to speed up NMT. de Bre\u0301bisson and Vincent (2016) propose a linear attention mechanism based on covariance matrices applied to information retrieval. Raffel et al. (2017) enable online linear time attention calculation by enforcing that the alignment between input and output sequence elements be monotonic. Previously, monotonic attention was proposed for morphological inflection generation by Aharoni and Goldberg (2016)."}, {"heading": "7 Conclusion", "text": "In this work, we propose a novel memory-based attention mechanism that results in a linear computational time of O(KD(|S|+|T |)) during decoding in seq2seq models. Through a series of experiments, we demonstrate that our technique leads to consistent inference speedups as sequences get longer, and can fit complex data distributions such as those found in Neural Machine Translation. We show that our attention mechanism learns meaningful alignments despite being constrained to a fixed representation after encoding. We encourage future work that explores the optimal values of K for various language tasks and examines whether or not it is possible to predict K based on the task at hand. We also encourage evaluating our models on other tasks that must deal with long sequences but have compact representations, such as summarization and question-answering, and further exploration of their effect on memory and training speed."}], "references": [{"title": "Morphological inflection generation with hard monotonic attention", "author": ["Roee Aharoni", "Yoav Goldberg."], "venue": "CoRR abs/1611.01487. http://arxiv.org/abs/1611.01487.", "citeRegEx": "Aharoni and Goldberg.,? 2016", "shortCiteRegEx": "Aharoni and Goldberg.", "year": 2016}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."], "venue": "CoRR abs/1409.0473. http://arxiv.org/abs/1409.0473.", "citeRegEx": "Bahdanau et al\\.,? 2014", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Massive Exploration of Neural Machine Translation Architectures", "author": ["Denny Britz", "Anna Goldie", "Thang Luong", "Quoc Le."], "venue": "CoRR abs/1703.03906. http://arxiv.org/abs/1703.03906.", "citeRegEx": "Britz et al\\.,? 2017", "shortCiteRegEx": "Britz et al\\.", "year": 2017}, {"title": "A taxonomy of human translation styles", "author": ["Michael Carl", "Barbara Dragsted", "Arnt Lykke Jakobsen."], "venue": "Translation Journal 16(2).", "citeRegEx": "Carl et al\\.,? 2011", "shortCiteRegEx": "Carl et al\\.", "year": 2011}, {"title": "Listen, attend and spell", "author": ["William Chan", "Navdeep Jaitly", "Quoc V. Le", "Oriol Vinyals."], "venue": "CoRR abs/1508.01211. http://arxiv.org/abs/1508.01211.", "citeRegEx": "Chan et al\\.,? 2015", "shortCiteRegEx": "Chan et al\\.", "year": 2015}, {"title": "Learning phrase representations using RNN encoder-decoder for statistical machine translation", "author": ["Kyunghyun Cho", "Bart van Merrienboer", "\u00c7aglar G\u00fcl\u00e7ehre", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio."], "venue": "EMNLP.", "citeRegEx": "Cho et al\\.,? 2014", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Towards better decoding and language model integration in sequence to sequence models", "author": ["Jan Chorowski", "Navdeep Jaitly."], "venue": "CoRR abs/1612.02695. http://arxiv.org/abs/1612.02695.", "citeRegEx": "Chorowski and Jaitly.,? 2016", "shortCiteRegEx": "Chorowski and Jaitly.", "year": 2016}, {"title": "A cheap linear attention mechanism with fast lookups and fixed-size representations", "author": ["Alexandre de Br\u00e9bisson", "Pascal Vincent."], "venue": "CoRR abs/1609.05866. http://arxiv.org/abs/1609.05866.", "citeRegEx": "Br\u00e9bisson and Vincent.,? 2016", "shortCiteRegEx": "Br\u00e9bisson and Vincent.", "year": 2016}, {"title": "A convolutional encoder model for neural machine translation", "author": ["Jonas Gehring", "Michael Auli", "David Grangier", "Yann N. Dauphin."], "venue": "CoRR abs/1611.02344. http://arxiv.org/abs/1611.02344.", "citeRegEx": "Gehring et al\\.,? 2016", "shortCiteRegEx": "Gehring et al\\.", "year": 2016}, {"title": "Neural turing machines", "author": ["Alex Graves", "Greg Wayne", "Ivo Danihelka."], "venue": "CoRR abs/1410.5401. http://arxiv.org/abs/1410.5401.", "citeRegEx": "Graves et al\\.,? 2014", "shortCiteRegEx": "Graves et al\\.", "year": 2014}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Neural Computation 9(8):1735\u2013 1780.", "citeRegEx": "Hochreiter and Schmidhuber.,? 1997", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Neural machine translation in linear time", "author": ["Nal Kalchbrenner", "Lasse Espeholt", "Karen Simonyan", "A\u00e4ron van den Oord", "Alex Graves", "Koray Kavukcuoglu."], "venue": "CoRR abs/1610.10099. http://arxiv.org/abs/1610.10099.", "citeRegEx": "Kalchbrenner et al\\.,? 2016", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2016}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik P. Kingma", "Jimmy Ba."], "venue": "CoRR abs/1412.6980. http://arxiv.org/abs/1412.6980.", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "A diversity-promoting objective function for neural conversation models", "author": ["Jiwei Li", "Michel Galley", "Chris Brockett", "Jianfeng Gao", "Bill Dolan."], "venue": "CoRR abs/1510.03055. http://arxiv.org/abs/1510.03055.", "citeRegEx": "Li et al\\.,? 2015", "shortCiteRegEx": "Li et al\\.", "year": 2015}, {"title": "Effective approaches to attention-based neural machine translation", "author": ["Minh-Thang Luong", "Hieu Pham", "Christopher D. Manning."], "venue": "CoRR abs/1508.04025. http://arxiv.org/abs/1508.04025.", "citeRegEx": "Luong et al\\.,? 2015", "shortCiteRegEx": "Luong et al\\.", "year": 2015}, {"title": "Sequence-to-sequence rnns for text summarization", "author": ["Ramesh Nallapati", "Bing Xiang", "Bowen Zhou."], "venue": "CoRR abs/1602.06023. http://arxiv.org/abs/1602.06023.", "citeRegEx": "Nallapati et al\\.,? 2016", "shortCiteRegEx": "Nallapati et al\\.", "year": 2016}, {"title": "Online and linear-time attention by enforcing monotonic alignments", "author": ["Colin Raffel", "Thang Luong", "Peter J. Liu", "Ron J. Weiss", "Douglas Eck."], "venue": "CoRR abs/1704.00784. http://arxiv.org/abs/1704.00784.", "citeRegEx": "Raffel et al\\.,? 2017", "shortCiteRegEx": "Raffel et al\\.", "year": 2017}, {"title": "A neural attention model for abstractive sentence summarization", "author": ["Alexander M. Rush", "Sumit Chopra", "Jason Weston."], "venue": "CoRR abs/1509.00685. http://arxiv.org/abs/1509.00685.", "citeRegEx": "Rush et al\\.,? 2015", "shortCiteRegEx": "Rush et al\\.", "year": 2015}, {"title": "Neural machine translation of rare words with subword units", "author": ["Rico Sennrich", "Barry Haddow", "Alexandra Birch."], "venue": "ACL.", "citeRegEx": "Sennrich et al\\.,? 2016", "shortCiteRegEx": "Sennrich et al\\.", "year": 2016}, {"title": "Weakly supervised memory networks", "author": ["Sainbayar Sukhbaatar", "Arthur Szlam", "Jason Weston", "Rob Fergus."], "venue": "CoRR abs/1503.08895. http://arxiv.org/abs/1503.08895.", "citeRegEx": "Sukhbaatar et al\\.,? 2015", "shortCiteRegEx": "Sukhbaatar et al\\.", "year": 2015}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V. Le."], "venue": "NIPS.", "citeRegEx": "Sutskever et al\\.,? 2014", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "A neural conversational model", "author": ["Oriol Vinyals", "Quoc V. Le."], "venue": "CoRR abs/1506.05869. http://arxiv.org/abs/1506.05869.", "citeRegEx": "Vinyals and Le.,? 2015", "shortCiteRegEx": "Vinyals and Le.", "year": 2015}, {"title": "Sequence-to-sequence learning as beamsearch optimization", "author": ["Sam Wiseman", "Alexander M. Rush."], "venue": "CoRR abs/1606.02960. http://arxiv.org/abs/1606.02960.", "citeRegEx": "Wiseman and Rush.,? 2016", "shortCiteRegEx": "Wiseman and Rush.", "year": 2016}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron C. Courville", "Ruslan Salakhutdinov", "Richard S. Zemel", "Yoshua Bengio."], "venue": "CoRR abs/1502.03044.", "citeRegEx": "Xu et al\\.,? 2015", "shortCiteRegEx": "Xu et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 20, "context": "Sequence-to-sequence models (Sutskever et al., 2014; Cho et al., 2014) have achieved state of the art results across a wide variety of tasks, including Neural Machine Translation (NMT) (Bahdanau et al.", "startOffset": 28, "endOffset": 70}, {"referenceID": 5, "context": "Sequence-to-sequence models (Sutskever et al., 2014; Cho et al., 2014) have achieved state of the art results across a wide variety of tasks, including Neural Machine Translation (NMT) (Bahdanau et al.", "startOffset": 28, "endOffset": 70}, {"referenceID": 1, "context": ", 2014) have achieved state of the art results across a wide variety of tasks, including Neural Machine Translation (NMT) (Bahdanau et al., 2014; Wu et al., 2016), text summarization (Rush et al.", "startOffset": 122, "endOffset": 162}, {"referenceID": 17, "context": ", 2016), text summarization (Rush et al., 2015; Nallapati et al., 2016), speech recognition (Chan et al.", "startOffset": 28, "endOffset": 71}, {"referenceID": 15, "context": ", 2016), text summarization (Rush et al., 2015; Nallapati et al., 2016), speech recognition (Chan et al.", "startOffset": 28, "endOffset": 71}, {"referenceID": 4, "context": ", 2016), speech recognition (Chan et al., 2015; Chorowski and Jaitly, 2016), image captioning (Xu et al.", "startOffset": 28, "endOffset": 75}, {"referenceID": 6, "context": ", 2016), speech recognition (Chan et al., 2015; Chorowski and Jaitly, 2016), image captioning (Xu et al.", "startOffset": 28, "endOffset": 75}, {"referenceID": 23, "context": ", 2015; Chorowski and Jaitly, 2016), image captioning (Xu et al., 2015), and conversational modeling (Vinyals and Le, 2015; Li et al.", "startOffset": 54, "endOffset": 71}, {"referenceID": 21, "context": ", 2015), and conversational modeling (Vinyals and Le, 2015; Li et al., 2015).", "startOffset": 37, "endOffset": 76}, {"referenceID": 13, "context": ", 2015), and conversational modeling (Vinyals and Le, 2015; Li et al., 2015).", "startOffset": 37, "endOffset": 76}, {"referenceID": 1, "context": "The most popular approaches are based on an encoder-decoder architecture consisting of two recurrent neural networks (RNNs) and an attention mechanism that aligns target to source tokens (Bahdanau et al., 2014; Luong et al., 2015).", "startOffset": 187, "endOffset": 230}, {"referenceID": 14, "context": "The most popular approaches are based on an encoder-decoder architecture consisting of two recurrent neural networks (RNNs) and an attention mechanism that aligns target to source tokens (Bahdanau et al., 2014; Luong et al., 2015).", "startOffset": 187, "endOffset": 230}, {"referenceID": 1, "context": "Our models are based on an encoder-decoder architecture with attention mechanism (Bahdanau et al., 2014; Luong et al., 2015).", "startOffset": 81, "endOffset": 124}, {"referenceID": 14, "context": "Our models are based on an encoder-decoder architecture with attention mechanism (Bahdanau et al., 2014; Luong et al., 2015).", "startOffset": 81, "endOffset": 124}, {"referenceID": 3, "context": "Eye-tracking and keystroke logging data from human translators show that translators generally do not reread previously translated source text words when producing target text (Carl et al., 2011).", "startOffset": 176, "endOffset": 195}, {"referenceID": 1, "context": "Variants of fatt used in Bahdanau et al. (2014) and Luong et al.", "startOffset": 25, "endOffset": 48}, {"referenceID": 1, "context": "Variants of fatt used in Bahdanau et al. (2014) and Luong et al. (2015) are:", "startOffset": 25, "endOffset": 72}, {"referenceID": 14, "context": "An exception is the dot-attention from Luong et al. (2015), which is O(D|S||T |), which we discuss further in Section 3.", "startOffset": 39, "endOffset": 59}, {"referenceID": 14, "context": "Standard location-based attention mechanism, by contrast, predicts a location in the source sequence to focus on (Luong et al., 2015; Xu et al., 2015).", "startOffset": 113, "endOffset": 150}, {"referenceID": 23, "context": "Standard location-based attention mechanism, by contrast, predicts a location in the source sequence to focus on (Luong et al., 2015; Xu et al., 2015).", "startOffset": 113, "endOffset": 150}, {"referenceID": 19, "context": "adapting a formula from (Sukhbaatar et al., 2015).", "startOffset": 24, "endOffset": 49}, {"referenceID": 9, "context": "To investigate the trade-off between speed and performance, we compare our technique to standard models with and without attention on a Sequence Copy Task of varying length like in Graves et al. (2014). We generated 4 training datasets of 100,000 examples and a validation dataset of 1,000 examples.", "startOffset": 181, "endOffset": 202}, {"referenceID": 10, "context": "We use a 2-layer 256-unit, a bidirectional LSTM (Hochreiter and Schmidhuber, 1997) encoder, a 2-layer 256-unit LSTM decoder, and 256-dimensional embeddings.", "startOffset": 48, "endOffset": 82}, {"referenceID": 1, "context": "For the attention baseline, we use the standard parametrized attention (Bahdanau et al., 2014).", "startOffset": 71, "endOffset": 94}, {"referenceID": 12, "context": "8 keep probability) is applied to the input of each cell and we optimize using Adam (Kingma and Ba, 2014) at a learning rate of 0.", "startOffset": 84, "endOffset": 105}, {"referenceID": 1, "context": "All models are implemented using TensorFlow based on the seq2seq implementation of Britz et al. (2017)3 and trained on a single machine with a Nvidia K40m GPU.", "startOffset": 83, "endOffset": 103}, {"referenceID": 22, "context": "size of 10 (Wiseman and Rush, 2016).", "startOffset": 11, "endOffset": 35}, {"referenceID": 18, "context": "We learn shared vocabularies of 16,000 subword units using the BPE algorithm (Sennrich et al., 2016).", "startOffset": 77, "endOffset": 100}, {"referenceID": 23, "context": "Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain.", "startOffset": 35, "endOffset": 52}, {"referenceID": 9, "context": "Luong et al. (2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al.", "startOffset": 0, "endOffset": 20}, {"referenceID": 0, "context": "(2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence.", "startOffset": 144, "endOffset": 167}, {"referenceID": 0, "context": "(2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence. Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain. Wu et al. (2016) presents several enhancements to the standard seq2seq architecture that allow more efficient computation on GPUs, such as only attending on the bottom layer.", "startOffset": 144, "endOffset": 424}, {"referenceID": 0, "context": "(2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence. Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain. Wu et al. (2016) presents several enhancements to the standard seq2seq architecture that allow more efficient computation on GPUs, such as only attending on the bottom layer. Kalchbrenner et al. (2016) propose a linear time architecture based on stacked convolutional neural networks.", "startOffset": 144, "endOffset": 609}, {"referenceID": 0, "context": "(2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence. Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain. Wu et al. (2016) presents several enhancements to the standard seq2seq architecture that allow more efficient computation on GPUs, such as only attending on the bottom layer. Kalchbrenner et al. (2016) propose a linear time architecture based on stacked convolutional neural networks. Gehring et al. (2016) also propose the use of convolutional encoders to speed up NMT.", "startOffset": 144, "endOffset": 714}, {"referenceID": 0, "context": "(2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence. Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain. Wu et al. (2016) presents several enhancements to the standard seq2seq architecture that allow more efficient computation on GPUs, such as only attending on the bottom layer. Kalchbrenner et al. (2016) propose a linear time architecture based on stacked convolutional neural networks. Gehring et al. (2016) also propose the use of convolutional encoders to speed up NMT. de Br\u00e9bisson and Vincent (2016) propose a linear attention mechanism based on covariance matrices applied to information retrieval.", "startOffset": 144, "endOffset": 810}, {"referenceID": 0, "context": "(2015) introduce various attention mechanisms that are computationally simpler and perform as well or better than the original one presented in Bahdanau et al. (2014). However, these typically still require O(D2) computation complexity, or lack the flexibility to look at the full source sequence. Efficient location-based attention (Xu et al., 2015) has also been explored in the image recognition domain. Wu et al. (2016) presents several enhancements to the standard seq2seq architecture that allow more efficient computation on GPUs, such as only attending on the bottom layer. Kalchbrenner et al. (2016) propose a linear time architecture based on stacked convolutional neural networks. Gehring et al. (2016) also propose the use of convolutional encoders to speed up NMT. de Br\u00e9bisson and Vincent (2016) propose a linear attention mechanism based on covariance matrices applied to information retrieval. Raffel et al. (2017) enable online linear time attention calculation by enforcing that the alignment between input and output sequence elements be monotonic.", "startOffset": 144, "endOffset": 931}, {"referenceID": 0, "context": "Previously, monotonic attention was proposed for morphological inflection generation by Aharoni and Goldberg (2016).", "startOffset": 88, "endOffset": 116}], "year": 2017, "abstractText": "The standard content-based attention mechanism typically used in sequence-to-sequence models is computationally expensive as it requires the comparison of large encoder and decoder states at each time step. In this work, we propose an alternative attention mechanism based on a fixed size memory representation that is more efficient. Our technique predicts a compact set of K attention contexts during encoding and lets the decoder compute an efficient lookup that does not need to consult the memory. We show that our approach performs on-par with the standard attention mechanism while yielding inference speedups of 20% for real-world translation tasks and more for tasks with longer sequences. By visualizing attention scores we demonstrate that our models learn distinct, meaningful alignments.", "creator": "LaTeX with hyperref package"}}}