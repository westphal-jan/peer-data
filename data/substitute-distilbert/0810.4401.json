{"id": "0810.4401", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Oct-2008", "title": "Efficient Exact Inference in Planar Ising Models", "abstract": "we give polynomial - time steps for the exact computation of lowest - chance ( ground ) graphs, worst margin violators, partition functions, and marginal probabilities in certain binary undirected graphical models. our approach produces an interesting alternative dubbed the well - known hierarchical characterization paradigm in that it does not impose any submodularity constraints ; instead you require planarity to establish a polynomial with perfect matchings ( dimer coverings ) in an expanded dual graph. we implement a unified framework while delegating complex but well - understood cases ( planar embedding, arbitrary - weight perfect matching ) to established procedures for which efficient implementations are freely available. notwithstanding graph cut parameters, iteration can perform penalized maximum - likelihood as well as maximum - margin parameter estimation in the associated conditional random fields ( crfs ), and employ marginal probabilities as effective as maximum a posteriori ( map ) states for instances. maximum - utility crf parameter estimation on dynamic gamma curve segmentation problems shows our approach to be efficient and effective.", "histories": [["v1", "Fri, 24 Oct 2008 08:49:09 GMT  (685kb,DS)", "http://arxiv.org/abs/0810.4401v1", null], ["v2", "Wed, 17 Dec 2008 06:47:01 GMT  (937kb,DS)", "http://arxiv.org/abs/0810.4401v2", "Fixed a number of bugs in v1; added 10 pages of additional figures, explanations, proofs, and experiments"]], "reviews": [], "SUBJECTS": "cs.LG cs.CV stat.ML", "authors": ["nicol n schraudolph", "dmitry kamenetsky"], "accepted": true, "id": "0810.4401"}, "pdf": {"name": "0810.4401.pdf", "metadata": {"source": "CRF", "title": "Efficient Exact Inference in Planar Ising Models", "authors": ["Nicol N. Schraudolph", "Dmitry Kamenetsky"], "emails": ["nic@schraudolph.org", "dmitry.kamenetsky@nicta.com.au"], "sections": [{"heading": "1. Introduction", "text": "Undirected graphical models are a popular tool in machine learning; they represent realvalued energy functions of the form\nE\u2032(y) := \u2211 i\u2208V E\u2032i(yi) + \u2211 (i,j)\u2208E E\u2032ij(yi, yj) , (1)\nwhere the terms in the first sum range over the nodes V = {1, 2, . . . n}, and those in the second sum over the edges E \u2286 V \u00d7 V of an undirected graph G(V, E).\nThe junction tree decomposition provides an efficient framework for exact statistical inference in graphs that are (or can be decomposed into) trees of small cliques. The resulting algorithms, however, require time exponential in the clique size, i.e., the treewidth of the original graph. The treewidth of many graphs of practical interest is prohibitively large \u2014 for instance, it grows as O(n) for an n \u00d7 n square lattice. A large number of approximate inference techniques have been developed so as to deal with such graphs, such as pseudolikelihood (Besag, 1986), mean field approximation, loopy belief propagation (Weiss, 2001;\nar X\niv :0\n81 0.\n44 01\nv1 [\ncs .L\nG ]\n2 4\nO ct\nYedidia et al., 2003), tree reweighting (Wainwright et al., 2003, 2005), and tree sampling (Hamze and de Freitas, 2004)."}, {"heading": "1.1 The Ising Model", "text": "Efficient exact inference is possible in certain graphical models with binary node labels. Here we focus on Ising models, whose energy functions have the form E : {0, 1}n \u2192 R with\nE(y) := \u2211\n(i,j)\u2208E\n[yi 6= yj ]Eij , (2)\nwhere [\u00b7] denotes the indicator function, i.e., the cost Eij is incurred only in those states y where yi and yj disagree. Compared to the general model (1) for binary nodes, (2) imposes two additional restrictions: zero node energies, and edge energies in the form of disagreement costs. At first glance these constraints look severe; for instance, such systems must obey the symmetry E(y) = E(\u00acy), where \u00ac denotes Boolean negation (ones\u2019 complement). It is well known, however, that adding a single node makes the Ising model (2) as expressive as the general model (1) for binary variables:\nTheorem 1 Every energy function of the form (1) over n binary variables is equivalent to an Ising energy function of the form (2) over n + 1 variables, with the additional variable held constant.\nProof by construction: Two energy functions are equivalent if they differ only by a constant. Without loss of generality, denote the additional variable y0 and hold it constant at y0 := 0. Given an energy function of the form (1), construct an Ising model with disagreement costs as follows:\n1. For each node energy function E\u2032i(yi), add a disagreement cost of E0i := E \u2032 i(1)\u2212E\u2032i(0),\nas shown in Figure 1a. Note that in both states of yi, the energy of the resulting Ising model is shifted relative to E\u2032i(yi) by the same constant amount, namely E \u2032 i(0):\nyi general Ising energy 0 E\u2032i(0) 0 = E \u2032 i(0)\u2212 E\u2032i(0) 1 E\u2032i(1) E0i = E \u2032 i(1)\u2212 E\u2032i(0)\n2. For each edge energy function E\u2032ij(yi, yj), add the three disagreement cost terms\nEij := 12 [(E \u2032 ij(0, 1) + E \u2032 ij(1, 0))\u2212 (E\u2032ij(0, 0) + E\u2032ij(1, 1))], E0i := E\u2032ij(1, 0)\u2212 E\u2032ij(0, 0)\u2212 Eij , and (3) E0j := E\u2032ij(0, 1)\u2212 E\u2032ij(0, 0)\u2212 Eij ,\nas shown in Figure 1b. Note that for all states of yi and yj , the energy of the resulting Ising model is shifted relative to E\u2032i(yi) by the same constant amount, namely E \u2032 ij(0, 0):\nyi yj general Ising energy 0 0 E\u2032ij(0, 0) 0 = E \u2032 ij(0, 0)\u2212 E\u2032ij(0, 0) 0 1 E\u2032ij(0, 1) E0j + Eij = E \u2032 ij(0, 1)\u2212 E\u2032ij(0, 0) 1 0 E\u2032ij(1, 0) E0i + Eij = E \u2032 ij(1, 0)\u2212 E\u2032ij(0, 0) 1 1 E\u2032ij(1, 1) E0i + E0j = E \u2032 ij(1, 1)\u2212 E\u2032ij(0, 0)\nSumming the above terms, the total bias of node i (i.e., its disagreement cost with the bias node) is\nE0i = E\u2032i(1)\u2212 E\u2032i(0) + \u2211\nj:(i,j)\u2208E\n[E\u2032ij(1, 0)\u2212 E\u2032ij(0, 0)\u2212 Eij ] . (4)\nThis construction defines an Ising model whose energy in every configuration y is shifted, relative to that of the general model we started with, by the same constant amount, namely E\u2032(0):\n\u2200y \u2208 {0, 1}n : E ([\n0 y\n]) = E\u2032(y) \u2212 \u2211 i\u2208V E\u2032i(0) \u2212 \u2211 (i,j)\u2208E E\u2032ij(0, 0)\n= E\u2032(y)\u2212 E\u2032(0). (5)\nThe two models\u2019 energy functions are therefore equivalent.\nNote how in the above construction the label symmetry E(y) = E(\u00acy) of the plain Ising model (2) is conveniently broken by the introduction of a bias node, through the convention that y0 := 0."}, {"heading": "1.2 Energy Minimization via Graph Cuts", "text": "Definition 2 The cut C of a binary graphical model G(V, E) induced by state y \u2208 {0, 1}n is the set C(y) := {(i, j) \u2208 E : yi 6= yj}; its weight |C(y)| is the sum of the weights of its edges.\nAny given state y partitions the nodes of a binary graphical model into two sets: those labeled \u20180\u2019, and those labeled \u20181\u2019. The corresponding graph cut is the set of edges crossing the partition; since only they contribute disagreement costs to the Ising model (2), we have \u2200y : |C(y)| = E(y). The lowest-energy state of an Ising model therefore induces its minimum-weight cut.\nMinimum-weight cuts can be computed in polynomial time in graphs whose edge weights are all non-negative. Introducing one more node, with the constraint yn+1 := 1, allows us to construct an equivalent energy function by replacing each negatively weighted bias edge E0i < 0 by an edge to the new node n + 1 with the positive weight Ei,n+1 := \u2212E0i > 0 (Figure 1c). This still leaves us with the requirement that all non-bias edges be nonnegative. This submodularity constraint implies that agreement between nodes must be locally preferable to disagreement \u2014 a severe limitation.\nThe now widespread use of graph cuts in machine learning to find lowest-energy configurations, in particular in image processing, was pioneered by Greig et al. (1989). Our construction (Figure 1c) differs from that of Kolmogorov and Zabih (2004) (Figure 1d) in that we do not employ the notion of directed edges. (In directed graphs, the weight of a cut is the sum of the weights of only those edges crossing the cut in a given direction.) We note that a more elaborate construction can give partial answers in graphs with some negative edge weights (Kolmogorov and Rother, 2007; Rother et al., 2007b), and that a sequence of expansion moves (energy minimizations in binary graphs) can efficiently yield an approximate answer for graphs with discrete but non-binary node labels (Boykov et al., 2001)."}, {"heading": "2. Planarity", "text": "Unlike graph cut methods, the inference algorithms we describe below do not depend on submodularity; instead they require that the model graph be planar, and that a planar embedding be provided. In this section we review these concepts and discuss the implications for our approach."}, {"heading": "2.1 Embedding Planar Graphs", "text": "Definition 3 A graph is planar if it can be drawn in the plane R2 without edge intersections. The regions into which such a plane drawing partitions R2 are the faces of the drawing; the unbounded region is the external face.\nThe operational nature of this definition would suggest that our algorithms must produce (or have access to) a plane drawing of the model graph. This is unsatisfactory in that such a drawing contains much information (such as the precise location of the vertices, and the exact shape of the edges) that we will not need. All we care about is the cyclic (say, clockwise) ordering of the edges incident upon each vertex. In topological graph theory, this is formalized in the notion of a rotation system (White and Beineke, 1978, p. 21f):\nDefinition 4 Let G(V, E) be an undirected, connected graph. For each vertex i \u2208 V, let Ei denote the set of edges in E incident upon i, considered as being oriented away from i, and let \u03c0i be a cyclic permutation of Ei. A rotation system for G is a set of permutations \u03a0 = {\u03c0i : i \u2208 V}.\nTo define the sets Ei of oriented edges more formally, construct the directed graph G(V, E \u2032), where E \u2032 contains a pair of directed edges (known as edgelets) for each undirected edge in E , that is, (i, j) \u2208 E \u2032 \u21d0\u21d2 [(i, j) \u2208 E \u2228 (j, i) \u2208 E ]. Then Ei = {(j, k) \u2208 E \u2032 : i = j}.\nRotation systems directly correspond to topological graph embeddings in orientable surfaces:\nTheorem 5 Each rotation system determines an embedding of G in some orientable surface S such that \u2200i \u2208 V, any edge (i, j) \u2208 Ei is followed by \u03c0i(i, j) in (say) clockwise orientation, and such that the faces F of the embedding, given by the orbits of the mapping (i, j) \u2192 \u03c0j(j, i), are 2-cells (topological disks).\nProof see White and Beineke (1978, p. 22f).\nNote that while in graph visualisation \u201cembedding\u201d is often used as a synonym for \u201cdrawing\u201d, in modern topological graph theory it stands for \u201crotation system\u201d. We adopt the latter usage, which views embeddings as equivalence classes of graph drawings characterized by identical cyclic ordering of the edges incident upon each vertex. For instance, \u03c04(4, 5) = (4, 3) in Figures 2b and 2c (same embedding) but \u03c04(4, 5) = (4, 1) in Figure 2d (different embedding). A sample face in Figures 2b\u20132d is given by the orbit\n(4, 1) \u2192 \u03c01(1, 4) = (1, 2) \u2192 \u03c02(2, 1) = (2, 4) \u2192 \u03c04(4, 2) = (4, 1).\nThe genus g of the embedding surface S can be determined from the Euler characteristic\n|V| \u2212 |E|+ |F| = 2\u2212 2g, (6)\nwhere |F| is found by counting the orbits of the rotation system, as described in Theorem 5. Since planar graphs are exactly those that can be embedded on a surface of genus g = 0 (a topological sphere), we arrive at a purely combinatorial definition of planarity:\nDefinition 6 A graph G(V, E) is planar iff it has a rotation system \u03a0 producing exactly 2 + |E| \u2212 |V| orbits. Such a system is called a planar embedding of G, and G(V, E ,\u03a0) is called a plane graph.\nOur inference algorithms require a plane graph as input. In certain domains (e.g., when working with geographic information) a plane drawing of the graph (from which the corresponding embedding is readily determined) may be available. Where it is not, we employ\nthe algorithm of Boyer and Myrvold (2004) which, given any connected graph G as input, produces in linear time either a planar embedding for G or a proof that G is non-planar. Source code for this step is freely available (Boyer and Myrvold, 2004; Windsor, 2007)."}, {"heading": "2.2 The Planarity Constraint", "text": "In Section 1.1 we have mapped a general binary graphical model to an Ising model with an additional bias node; now we require that that Ising model be planar. What does that imply for the original, general model? If all nodes of the graph are to be connected to the bias node without violating planarity, the graph has to be outerplanar, i.e., have a planar embedding in which all its nodes lie on the external face \u2014 a very severe restriction.\nThe situation improves, however, if we do not insist that all nodes be connected to the bias: If only a subset B \u2282 V of nodes have non-zero bias (4), then the graph only needs to be B-outerplanar, i.e., have a planar embedding in which all nodes in B lie on the same face. Model selection may thus entail the step of picking the face of a suitably embedded planar Ising model whose nodes will be connected to the bias node. In image processing, for instance, where it is common to operate on a square grid of pixels, we can permit bias for all nodes on the perimeter of the grid, which borders the external face.\nIn general, a planar embedding which maximizes a weighted sum over the nodes bordering a given face can be found in linear time (Gutwenger and Mutzel, 2004); by setting node weights to some measure of their bias, such as the magnitude or square of E0i (4), we can thus efficiently obtain the planar Ising model closest (in that measure) to any given planar binary graphical model.\nIn contrast to submodularity, B-outerplanarity is a structural constraint. This has the advantage that once a model obeying the constraint is selected, inference (e.g., parameter estimation) can proceed via unconstrained methods (e.g., optimization).\nFinally, we note that all our algorithms can be extended to work for non-planar graphs as well. They then take time exponential in the genus of the embedding though still polynomial in the size of the graph; for graphs of low genus this may well be preferable to current approximative methods."}, {"heading": "3. Computing Ground States via Maximum-Weight Perfect Matching", "text": "Definition 7 A frustrated cycle O \u2286 E of a graph G(V, E) with non-zero edge weights w is a simple cycle whose product of edge weights is negative, i.e., \u220f o\u2208O wo < 0. (A simple cycle is a closed path with no repeated edges or vertices.)\nA weighted graph is said to be frustrated if it contains any frustrated cycles. Note that trees can never be frustrated because they do not contain any cycles to begin with.\nThe lowest-energy (ground) state y\u2217 := argminy E(y) of an unfrustrated Ising model is easily found by labeling nodes as we traverse the graph, flipping our binary label whenever we traverse an edge with negative disagreement cost (as done by Algorithm 1 below when invoked on the cut C = {(i, j) \u2208 E : Eij < 0}). This cannot lead to a contradiction because by Definition 7 we will flip the label an even number of times along any cycle in the graph, hence always end a cycle on the same label we started it with.\nThe presence of frustration unfortunately makes the computation of ground states much harder \u2014 in fact, it is known to be NP-hard in general (Barahona, 1982). As shown below, the ground state of a planar Ising model can be computed in polynomial time via maximumweight perfect matching on an expanded dual of its embedded graph.\nA relationship between the states of a planar Ising model and perfect matchings (\u201cdimer coverings\u201d to physicists) was first established by Kasteleyn (1961, 1963, 1967) and Fisher (1961, 1966). Perfect matchings in dual graph constructs were used by Bieche et al. (1980) and Barahona (1982) to compute Ising ground states; below we generalize a simpler construction for triangulated graphs due to Globerson and Jaakkola (2007). Working independently, Thomas and Middleton (2007) arrived at the same construction as we did, though their algorithm to compute ground states is less straightforward."}, {"heading": "3.1 The Expanded Dual Graph", "text": "Definition 8 The dual G\u2217(F , E) of an embedded graph G(V, E ,\u03a0) has a vertex for each face of G, with edges connecting vertices corresponding to faces that are adjacent ( i.e., share an edge) in G.\nFigure 3 (top left) shows the dual for a square face of our plane graph. Each edge of the dual crosses exactly one edge of the original graph; due to this one-to-one relationship we will consider the dual to have the same set of edges E (with the same energies) as the original. Since the nodes in the dual are different, however, we will (with some abuse of notation) use a single index for dual edges and their weights, corresponding to the index of the original\nedge in some arbitrary ordering of E . Thus if (i, j) is the kth edge in the (ordered) E , its dual will have weight Ek := Eij .\nWe now expand the dual graph by replacing each node with a q-clique, where q is the degree of the node, as shown in Figure 3 (bottom left) for q = 4. The additional edges internal to each q-clique are given zero energy so as to leave the model unaffected. For large q the introduction of these O(q2) internal edges slows down subsequent computations (solid line in Figure 6, left); this can be avoided by subdividing the offending q-gonal face with chords (which are also given zero energy) before constructing the dual. Our implementation performs best when \u201coctangulating\u201d the graph, i.e., splitting octagons off all faces with q > 13; this is more efficient than a full triangulation (Figure 6, left).\nIt is easily seen that the expanded dual has 2|E| vertices, two for each edge in the original graph. We therefore give the two vertices connected by the dual of the kth edge in E the indices 2k \u2212 1 and 2k. This consistent indexing scheme allows us to run the inference algorithms described in the remainder of this paper without explicitly constructing an expanded dual graph data structure."}, {"heading": "3.2 Complementary Perfect Matchings", "text": "Definition 9 A perfect matching of a graph G(V, E) is a subset M \u2286 E of edges wherein exactly one edge is incident upon each vertex: \u2200v \u2208 V, |v| = 1 in G(V,M). Its weight |M| is the sum of the weights of its edges.\nTheorem 10 For every cut C of an embedded graph G(V, E ,\u03a0) there exists at least one (if G is triangulated: exactly one) perfect matching M of its expanded dual complementary to C, i.e., E\\M = C.\nProof sketch Consider the complement E\\C of the cut as a partial matching of the expanded dual. By definition, C intersects any cycle of G, and therefore also the perimeters of G\u2019s faces F , in an even number of edges. In each clique of the expanded dual, C\u2019s complement thus leaves an even number of nodes unmatched;M can therefore be completed using only edges interior to the cliques to pair up unmatched nodes. In a 3-clique, there is only one way to do this, so M is unique if G is triangulated.\nIn other words, there exists a surjection from perfect matchings in the expanded dual of G to cuts in G. Furthermore, since we have given edges interior to the cliques of the expanded dual zero energy, every perfect matching M complementary to a cut C of our Ising model (2) obeys the relation\n|M|+ |C| = \u2211\n(i,j)\u2208E\nEij = const. (7)\nThis means that instead of a minimum-weight cut in a graph we can look for a maximumweight perfect matching in its expanded dual. But will that matching always be complementary to a cut?\nTheorem 11 Every perfect matching M of the expanded dual of a plane graph G(V, E ,\u03a0) is complementary to a cut C of G, i.e., E\\M = C.\nProof sketch In each clique of the expanded dual, an even number of nodes is matched by edges interior to the clique. The complement E\\M of the matching in G thus contains an even number of edges around the perimeter of each face of the embedding. By induction over faces, this holds for every contractible (on the embedding surface) cycle of G. Because a plane is simply connected, all cycles in a plane graph are contractible; E\\M is therefore a cut.\nThis is where planarity matters: Surfaces of non-zero genus are not simply connected, and thus non-plane graphs may contain non-contractible cycles; in the presence of frustration, our construction does not guarantee that the complement E\\M of a perfect matching of the expanded dual contains an even number of edges along such cycles. For planar graphs, however, the above theorems allow us to leverage known polynomial-time algorithms for perfect matchings into inference methods for Ising models. This approach also works for non-planar Ising models that contain no frustrated non-conctractible cycle."}, {"heading": "3.3 Computing the Ground State", "text": "The blossom-shrinking algorithm (Edmonds, 1965a,b) is a sophisticated method to efficiently compute the maximum-weight perfect matching of a graph. It can be implemented (Mehlhorn and Scha\u0308fer, 2002) to run in as little as O(|E| |V| log |V|) time (Galil et al., 1986). Although the Blossom IV code we are using (Cook and Rohe, 1999) is asymptotically less efficient \u2014O(|E| |V|2) \u2014 we have found it to be very fast in practice (Figure 6, left).\nWe can now efficiently compute the lowest-energy state of a planar Ising model as follows: Find a planar embedding of the model graph (Section 2.1), construct its expanded dual (Section 3.1), and run the blossom-shrinking algorithm on that to compute its maximumweight perfect matching. Its complement in the original model is the minimum-weight graph cut (Section 3.2). We can identify the state which induces this cut via a depth-first graph traversal (Algorithm 1) that labels nodes as it encounters them, and checks for consistency on subsequent encounters. The traversal starts by labeling the bias node with its known state y0 := 0."}, {"heading": "4. Computing the Partition Function and Marginal Probabilities", "text": "A Markov random field (MRF) over our Ising model (2) models the distribution\nP(y) = 1 Z e\u2212E(y), where Z := \u2211 y e\u2212E(y) (8)\nis the MRF\u2019s partition function. As it involves a summation over exponentially many states y, calculating the partition function is generally intractable. For planar graphs, however, the generating function for perfect matchings can be calculated in polynomial time via the determinant of a skew-symmetric matrix (Kasteleyn, 1961, 1963, 1967; Fisher, 1961, 1966), which we call the Kasteleyn matrix K. Due to the close relationship with graph cuts (Section 3.2) we can apply this method to calculate Z in (8). We first convert a planar embedding of the Ising model graph into a Boolean \u201chalf-Kasteleyn\u201d matrix H, in four steps which will be elaborated below:\nAlgorithm 1 Find State from Corresponding Graph Cut\nInput: Ising model graph G(V, E), graph cut C(y) \u2286 E 1. \u2200 i \u2208 {0, 1, 2, . . . n} : yi := unknown; 2. dfs state(0, 0);\nOutput: state vector y\nprocedure dfs state(i \u2208 {0, 1, 2, . . . n}, s \u2208 {0, 1}) if yi = unknown then\n1. yi := s; 2. \u2200(i, j) \u2208 Ei :\nif (i, j) \u2208 C then dfs state(j,\u00acs);\nelse dfs state(j, s); else assert yi = s;\n1. Section 4.1, Algorithm 2: plane triangulate the embedded graph so as to make the relationship between cuts and complementary perfect matchings a bijection (cf. Section 3.2);\n2. Section 4.2, Algorithm 3: orient the edges of the graph such that the in-degree of every node is odd;\n3. Section 4.3, Algorithm 4: construct the Boolean half-Kasteleyn matrix H from the oriented graph;\n4. Section 4.4.3: prefactor the triangulation edges (added in Step 1) out of H.\nOur Step 2 simplifies equivalent operations in previous constructions (Kasteleyn, 1963, 1967; Fisher, 1966; Globerson and Jaakkola, 2007), Step 3 differs in that it only sets unit (i.e., +1) entries in a Boolean matrix, and Step 4 can dramatically reduce the size of H for compact storage (as a bit matrix) and faster subsequent computations (Figure 6).\nFor a given set of edge disagreement costs Ek, k = {1, 2, , . . . |E|} on the Ising model, we then build from H the conventional, real-valued Kasteleyn matrix K by adding the exponentiated disagreement costs along the superdiagonal and skew-symmetrizing:\n1. K := H;\n2. \u2200k \u2208 {1, 2, , . . . |E|} : K2k\u22121,2k := K2k\u22121,2k + eEk ;\n3. K := K \u2212K>.\nWe can now factor K and compute the partition function as Z = \u221a |K| (Kasteleyn, 1961; Fisher, 1961). The marginal probability of disagreement on the kth edge can likewise be\ncomputed via the inverse of K: P(k \u2208 C) := \u2211\ny: k\u2208C(y)\nP(y) = 1 Z \u2211 y: k\u2208C(y) e\u2212E(y)\n= \u2212 \u2202 lnZ \u2202Ek = \u2212 1 Z \u2202Z \u2202Ek = \u22121 2|K| \u2202|K| \u2202Ek\n(9)\n= \u2212 12 tr ( K\u22121 \u2202K\n\u2202Ek\n) = K\u221212k\u22121,2kK2k\u22121,2k.\nwhere tr denotes the matrix trace, and we have employed the well-known fact that the inverse of an invertible, skew-symmetric, real matrix is skew-symmetric as well. Note the well-known fact that the marginal edge probabilities equal the negative gradient of the log partition function: P(k \u2208 C) = \u2212\u2202 lnZ/\u2202Ek.\nIn what follows, we elaborate in turn on the operations of plane triangulation (Section 4.1), odd edge orientation (Section 4.2), construction of the half-Kasteleyn matrix H (Section 4.3), and factoring of the Kasteleyn matrixK, resp. prefactoring ofH (Section 4.4)."}, {"heading": "4.1 Plane Triangulation", "text": "Definition 12 An embedded graph is plane triangulated iff it is biconnected and each of its faces (including the external face) is a triangle.\nNote that plane triangulation is not equivalent to making a graph chordal, though the latter process is sometimes also called \u201ctriangulation\u201d. For instance, the graph in Figure 4a is chordal but not plane triangulated because the external face is not triangular, while that in Figure 4b is plane triangulated but not chordal because it contains a 4-cycle (bold blue) that has no chord.\nWe can plane triangulate an embedded graph in linear time by traversing all of its faces, inserting chords as necessary as we go along (Algorithm 2). This may create multiple edges between the same two vertices, as shown in Figure 4c. Care must be taken when\nencountering singly connected components with a perimeter of length two, which could cause the insertion of a self-loop (see Figure 4d). Algorithm 2 detects and biconnects such components, as Definition 12 requires.\nThe insert chord(i, j, k) subroutine of Algorithm 2 not only updates E , but also \u03c0i and \u03c0k so as to insert the new edge (i, k) in its proper place in the rotation system. In order to leave the distribution (8) modeled by the graph unchanged, the new edge is given zero energy. Repeated traversals of the same face in Algorithm 2 can be avoided by the obvious use of \u201cdone\u201d flags, omitted here for the sake of clarity.\nNote that plane triangulation is not strictly necessary for the computation of partition function or marginal probabilities; it merely simplifies subsequent steps in the construction. Previously (Fisher, 1966; Globerson and Jaakkola, 2007) this convencience came at a computational price: the edges added during plane triangulation can make factoring and inversion of K (Section 4.4) significantly (up to 20 times) more expensive. We avoid this cost by removing the triangulation edges again before constructing K, during prefactoring of the half-Kasteleyn bit matrix H (Section 4.4.3).\nAlgorithm 2 Plane Triangulation\nInput: plane graph G(V, E ,\u03a0) with |V| \u2265 3 \u2200i \u2208 V : \u2200(i, j) \u2208 Ei : 1. (j, k) := \u03c0j(j, i); 2. (k, l) := \u03c0k(k, j); 3. while l 6= i \u2228 \u03c0l(l, k) 6= (l, j)\n(a) if i = k then (avoid self-loop) i := j; j := k; k := l; (k, l) := \u03c0k(k, j); (b) insert chord(i, j, k); (c) i := k; j := l; (d) (j, k) := \u03c0j(j, i); (e) (k, l) := \u03c0k(k, j);\nOutput: plane triangulated graph G(V, E ,\u03a0)\nprocedure insert chord(i, j, k \u2208 V) 1. E := E \u222a {(i, k)}; 2. \u03c0k(k, i) := \u03c0k(k, j); 3. \u03c0k(k, j) := (k, i); 4. \u03c0i(\u03c0\u22121i (i, j)) := (i, k); 5. \u03c0i(i, k) := (i, j); 6. Eik := 0;"}, {"heading": "4.2 Odd Edge Orientation", "text": "To calculate the generating function for perfect matchings, the graph in question (namely, the expanded dual of our model graph) must be given a clockwise odd orientation.\nDefinition 13 An orientation of an undirected graph G(V, E) is a set E \u2032 of oriented edges with |E \u2032| = |E| such that \u2200(i, j) \u2208 E, E \u2032 contains either (i, j) or (j, i).\nDefinition 14 (Kasteleyn, 1963) An orientation of an embedded graph is clockwise odd iff the number of edges oriented clockwise around each face (except possibly the external face) is odd.\nConsider Figure 5a: by giving all interior edges of the 3-cliques of the expanded dual a clockwise orientation, we ensure that (a) the interior faces of the 3-cliques have clockwise odd orientation, and (b) all interior edges of the 3-cliques are oriented counterclockwise wrt. all faces exterior to the 3-cliques, hence do not affect the latters\u2019 clockwise odd orientation status. It remains to consider the orientation of edges external to the 3-cliques, i.e., of the unexpanded dual graph. What does a clockwise odd orientation of these edges correspond to in the original model graph?\nTo map each edge of the unexpanded dual back into the model graph, rotate it clockwise by 90 degrees, as shown in Figure 5b. A face with clockwise odd orientation of its perimeter in the dual thus maps to a vertex with an odd in-degree, i.e., an odd number of edges oriented towards it. This facilitates a drastic simplification of this step in our construction:"}, {"heading": "To establish a clockwise odd orientation of the expanded dual, simply orient the edges of the model graph such that all vertices, except possibly one, have an odd in-degree.", "text": "Algorithm 3 achieves this in linear time by orienting edges appropriately upon return from a depth-first traversal of the graph. In contrast to earlier constructions (Kasteleyn, 1963;\nFisher, 1966; Globerson and Jaakkola, 2007), it does not require following orbits around faces, and in fact does not refer to an embedding \u03a0 or dual graph G\u2217 at all.\nAlgorithm 3 Construct Odd Edge Orientation\nInput: undirected graph G(V, E) 1. \u2200 v \u2208 V : v.visited = false; 2. pick arbitrary edge (r, s) \u2208 E ; 3. E \u2032 := {(r, s)}; 4. make odd(r, s);\nOutput: orientation E \u2032 of E : \u2200 v \u2208 V\\{s}, in-degree(v) \u2261 1 mod 2 in G(V, E \u2032)\nfunction make odd: (u, v \u2208 V)\u2192 {true, false} 1. E := E\\(u, v); 2. if v.visited then return true; 3. v.visited := true; 4. odd := false; 5. \u2200w \u2208 V : {v, w} \u2208 E\nif make odd(v, w) then (a) E \u2032 := E \u2032 \u222a {(w, v)}; (b) odd := \u00ac odd;\nelse E \u2032 := E \u2032 \u222a {(v, w)}; 6. return odd\nAny vertex can be chosen to be the exceptional vertex s, since the choice of external face of a plane drawing is arbitrary \u2014 it is an artifact of the drawing, not an intrinsic property of the embedding: a planar graph embedded on a sphere has no external face."}, {"heading": "4.3 Constructing the half-Kasteleyn Bit Matrix", "text": "The Kasteleyn matrix K is a skew-symmetric, 2|E|\u00d72|E| matrix constructed from the Ising model graph whose determinant is the square of the partition function. Our construction improves upon the work of Globerson and Jaakkola (2007) in a number of ways:\n\u2022 We employ an indexing scheme that obviates any need to refer to the expanded dual of the model graph (which we consequently never explicitly construct at all);\n\u2022 We break construction of the Kasteleyn matrix into two phases, the first of which is invariant with respect to the model\u2019s disagreement costs;\n\u2022 We make the \u201chalf-Kasteleyn\u201d matrix H computed in the first phase very compact by prefactoring out the triangulation edges (see Section 4.4.3) and storing it as a bit matrix."}, {"heading": "4.3.1 Two-Phase Construction", "text": "In a first phase we process the model graph structure into a Boolean \u201chalf-Kasteleyn\u201d matrix H. Disagreement costs do not enter into H; they are taken into account in a second phase, when the full Kasteleyn matrix K is constructed from H. This two-phase approach holds a number of advantages:\n\u2022 When working with a large number of isomorphic graphs (as we do in Section 6), the corresponding half-Kasteleyn matrix is identical for all of them, hence needs to be constructed just once.\n\u2022 During maximum likelihood parameter estimation, partition function and/or marginals have to be recomputed many times for the same graph, with disagreement costs varying due to the ongoing adaptation of the model parameters. H remains valid when disagreement costs change, so we can compute it just once upfront, then re-use it in the parameter estimation loop.\n\u2022 H can be stored very compactly as a prefactored bit matrix. As Figure 6 (right) shows, the uncompressed H can be several orders of magnitude smaller than the corresponding Kasteleyn matrix K. Row-compressed sparse storage of K (which has exactly 3 non-zero entries in each row and column) is more efficient, but applying the bzip2 compressor1 to the prefactored bit matrix H yields by far the most compact storage format. Such memory efficiency becomes very important when working with large data sets of non-isomorphic graphs.\n1. http://www.bzip.org/"}, {"heading": "4.3.2 Indexing Scheme", "text": "Without loss of generality, let E = {e1, e2, . . . e|E|}. Note that the expanded dual has 2|E| vertices, one lying to either side of every edge in the model graph. When viewing edge ek along its direction in E \u2032, we label the dual node to its right 2k\u22121 and that to its left 2k; see Figure 5c for an example. One benefit of this scheme is that quantities relating to the edges of the model graph (as opposed to internal edges of the cliques of the expanded dual) will always be found on the superdiagonal of K. We also extend the rotation system from Section 2.1 to support this indexing scheme: ek = (i, j)\u21d0\u21d2 e\u03c0i(k) = \u03c0i(i, j).\nAlgorithm 4 Construct Half-Kasteleyn Bit Matrix\nInput: oriented, embedded, triangulated graph G(V, E \u2032,\u03a0)\n1. H := 0 \u2208 {0, 1}2|E \u2032|\u00d72|E \u2032|\n2. \u2200 v \u2208 V : (a) es := any edge incident on v; (b) if es = (\u00b7, v) (edge points to v)\nthen \u03b1 := 2s; else \u03b1 := 2s\u2212 1;\n(c) i := \u03c0v(s); (d) repeat\nif ei = (\u00b7, v) (edge points to v) then H2i\u22121,\u03b1 := 1;\n\u03b1 := 2i; if ei created by Algorithm 2 (plane triangulation) then H2i\u22121,2i := 1;\nelse H2i,\u03b1 := 1; \u03b1 := 2i\u2212 1;\ni := \u03c0v(i); until i = \u03c0v(s);\nOutput: Half-Kasteleyn bit matrix H"}, {"heading": "4.3.3 Construction Algorithm", "text": "Using the above indexing scheme, Algorithm 4 constructs H in linear time, cycling once through the edges incident upon each vertex of the model graph. It deviates from the classical construction of K (Kasteleyn, 1961; Fisher, 1961; Globerson and Jaakkola, 2007) in that it makes only positive entries, and only those corresponding to edges with zero disagreement cost, i.e., added during plane triangulation or internal to the cliques of the\nexpanded dual. All such entries have the value e0 = 1, making H a Boolean matrix, which can be stored compactly as a bit matrix."}, {"heading": "4.4 Factoring Kasteleyn Matrices", "text": "Standard approaches such as LU-factorization can be used to factor the Kasteleyn matrix K, but do not exploit its skew symmetry. Here we develop a numerically stable Choleskylike factorization for even-sized skew-symmetric matrices, which can be used to factor K as well as to prefactor H (see below). Begin by writing the Kasteleyn matrix as\nK =  0 c a>\u2212c 0 b> \u2212a \u2212b C  , (10) for some scalar c, vectors a and b, and a matrix C which is either empty or again of the same form. We factor (10) into (cf. Bunch, 1982; Benner et al., 2000)\nK =  0 \u22121 0>1 0 0> a/c b/c I  0 c 0>\u2212c 0 0> 0 0 C\u2032  0 1 a>/c\u22121 0 b>/c 0 0 I  , (11) where C\u2032 is the Schur complement C\u2032 := C + (ba>\u2212 ab>)/c. Iterated application of (11) to the Schur complement ultimately yields K = R>JR, where\nR :=  0 1 a>1/c1 \u22121 0 b>1/c1 0 0 0 1 a>2/c2 0 \u22121 0 b>2/c2 ... . . . . . . ... 0 0 0 1\n0 \u00b7 \u00b7 \u00b7 0 \u22121 0\n (12)\nand\nJ :=  0 c1 0 \u00b7 \u00b7 \u00b7 0 \u2212c1 0 0 0 0 0 0 c2 . . . ... 0 \u2212c2 0 0... . . . . . . 0 0 0 0 0 c|E|\n0 \u00b7 \u00b7 \u00b7 0 \u2212c|E| 0\n . (13)\nTo prevent small pivots ci from causing numerical instability, pivoting is required. Since Kasteleyn matrices have at least two entries of unit magnitude in each row and column, partial pivoting suffices."}, {"heading": "4.4.1 Partition Function", "text": "Since |R| = 1 and |J | = \u220f i c 2 i , we have\nZ = \u221a |K| = \u221a |R>| |J | |R| = \u221a |J | = |E|\u220f i=1 |ci|. (14)\nCalculation of the product in (14) is prone to numerical overflow; this is easily avoided by directly computing the log partition function as\nlnZ = ln \u221a |K| = |E|\u2211 i=1 ln |ci|. (15)"}, {"heading": "4.4.2 Marginal Probabilities", "text": "To invert K, observe from (12) resp. (13) that R and J are essentially triangular resp. diagonal (simply swap rows 2k\u22121 and 2k, k = 1, 2, . . . |E|), and thus easily inverted. Then use K\u22121 = R\u22121J\u22121R\u2212> to obtain\n[K\u22121]2k\u22121,2k = 2|E|\u2211 i=1 2|E|\u2211 j=1 [R\u22121]2k\u22121,i[J\u22121]i,j [R\u2212>]j,2k = \u22121 ck + |E|\u2211 i=k+1 dik, (16)\nwhere dik := [R\u22121]2k\u22121,2i[R\u22121]2k,2i\u22121 \u2212 [R\u22121]2k\u22121,2i\u22121[R\u22121]2k,2i\nci ."}, {"heading": "4.4.3 Prefactoring", "text": "Consider the rows and columns of K corresponding to an edge added during triangulation. Re-order K to bring those rows and columns to the top left. Since the disagreement cost of a triangulation edge is zero, we now have a unity pivot c = 1 in (10). This has two interesting consequences:\nSize reduction: The unity pivot does not affect the value of the partition function. Since we are not interested in the marginal probability of triangulation edges (which after all are not part of the original model), we do not need a or b either, once we have computed the Schur complement. We can therefore discard the first two rows and columns of K after factoring (10). Factoring out all triangulation edges in this fashion reduces the size of K to range only over the edges of the original Ising model graph. This reduces storage requirements and speeds up subsequent computation of the inverse (Figure 6, center).\nBoolean closure: The unity pivot eliminates the division from the Schur complement; in fact it can be shown that when (11) is applied to the Boolean half-Kasteleyn matrix H, all elements of C\u2032 are in {\u22121, 0, 1}. We can therefore factor triangulation edges directly out of H; the applicable Schur complement is given by\nC\u2032 := C + (b+ b\u0304)(a+ a\u0304)>, where H =  0 1 a>0 0 b> a\u0304 b\u0304 C  , (17) and addition and multiplication are implemented by Boolean disjunction (\u201cOR\u201d) and conjunction (\u201cAND\u201d), respectively."}, {"heading": "5. Application to CRF Parameter Estimation", "text": "Our algorithms can be applied to regularized maximum likelihood and maximum margin parameter estimation in conditional random fields (CRFs). In a standard planar Ising CRF, the disagreement costs in (2) are computed as Ek := \u03b8>xk, i.e., as inner products between local features (sufficient statistics) xk of the modeled data at each edge k, and corresponding parameters \u03b8 of the model. The conditional distribution P(y|x,\u03b8) (where x represents the union of all local features) is then modeled as a Markov random field (8)."}, {"heading": "5.1 Maximum Likelihood", "text": "Maximum-likelihood (ML) CRF parameter estimation seeks to minimize wrt. \u03b8 the L2regularized negative log likelihood\nLML(\u03b8) := 12 \u03bb\u2016\u03b8\u2016 2 \u2212 ln P(y\u2217|x,\u03b8)\n= 12 \u03bb\u2016\u03b8\u2016 2 + E(y\u2217|x,\u03b8) + lnZ(\u03b8|x) (18)\nof a given target labeling y\u2217,2 with regularization parameter \u03bb. This is a smooth, convex objective that can be optimized via batch or online implementations of gradient methods such as LBFGS (Vishwanathan et al., 2006). The gradient of (18) with respect to the parameters \u03b8 is given by\n\u2202\n\u2202\u03b8 LML(\u03b8) = \u03bb\u03b8 + \u2211 k\u2208E ( [k \u2208 C(y\u2217)] \u2212 P(k \u2208 C(y|x)) ) xk. (19)\nThe contribution of each edge k to the gradient (19) is given by the product between its local features xk and the difference between the indicator function for membership of k in the cut induced by the target state y\u2217 and the marginal probability of k being contained in a cut, given x. We compute the latter via the inverse of the Kasteleyn matrix (9)."}, {"heading": "5.2 Maximum Margin", "text": "For maximum-margin (MM) parameter estimation (Taskar et al., 2004) we instead minimize\nLMM(\u03b8) := 12 \u03bb\u2016\u03b8\u2016 2 + E(y\u2217|x,\u03b8)\u2212min y M(y|y\u2217,x,\u03b8) (20)\n= 12 \u03bb\u2016\u03b8\u2016 2 + E(y\u2217|x,\u03b8)\u2212 E(y\u0302|x,\u03b8) + d(y\u0302|y\u2217),\nwhere y\u0302 := argminy M(y|y\u2217,x,\u03b8) is the worst margin violator, i.e., the state that minimizes, relative to a given target state y\u2217, the margin energy\nM(y|y\u2217) := E(y)\u2212 d(y|y\u2217), (21)\nwhere d(\u00b7|\u00b7) is a measure of divergence in state space. If d(\u00b7|\u00b7) is a weighted Hamming distance between induced cuts:\nd(y|y\u2217) := \u2211 k\u2208E [[k \u2208 C(y)] 6= [k \u2208 C(y\u2217)]] vk, (22)\n2. For notational clarity we suppress here the fact that we are usually modeling a collection of data items.\nwhere the vk > 0 are constant weighting factors (in the simplest case: all ones) on the edges of our Ising model, then it is easily verified that the margin energy (21) is implemented (up to a shift that depends only on y\u2217) by an isomorphic Ising model with disagreement costs\nEk + (2[k \u2208 C(y\u2217)]\u2212 1) vk. (23)\nWe can thus use our algorithm of Section 3.3 to efficiently find the worst margin violator.3\nThe maximum-margin objective (20) is convex but non-smooth; its gradient is\n\u2202\n\u2202\u03b8 LMM(\u03b8) = \u03bb\u03b8 + \u2211 k\u2208E ( [k \u2208 C(y\u2217)] \u2212 [k \u2208 C(y\u0302)] ) xk, (24)\ni.e., local features xk are multiplied by one of {\u22121, 0, 1}, depending on the membership of edge k in the cuts induced by y\u2217 and y\u0302, respectively. We can minimize (20) via bundle methods, such as the BT bundle trust algorithm (Schramm and Zowe, 1992), making use of the convenient lower bound \u2200\u03b8 : LMM(\u03b8) \u2265 0."}, {"heading": "6. Experiments", "text": "We now demonstrate the scalability of our approach to maximum-margin CRF parameter estimation (Section 5.2) on two simple image segmentation problems: the synthetic binary image denoising task of Kumar and Hebert (2004, 2006), and the detection of segmentation boundaries in noisy masks from the GrabCut Ground Truth image segmentation database (Rother et al., 2007a)."}, {"heading": "6.1 Synthetic Binary Image Denoising", "text": "Kumar and Hebert (2004, 2006) developed an image denoising benchmark problem for binary random fields based on four hand-drawn 64 \u00d7 64 pixel images (Figure 7, top row). We created 50 instances of each image corrupted with pink noise, produced by convolving a white noise image (all pixels i.i.d. uniformly random) with a Gaussian density of one pixel standard deviation. Original and pink noise images were linearly mixed using signal-tonoise (S/N) amplitude ratios of 1 :n, n \u2208 N. Figure 7 shows samples of the resulting noisy instances for S/N ratios of 1:6 (second row) and 1:7 (fourth row).\nWe then employed a 64 \u00d7 64 square grid (4096 nodes, 8064 edges) planar Ising CRF to denoise the images, with edge energies set to Eij := \u3008[1, |xi \u2212 xj |],\u03b8\u3009, where xi is the pixel intensity at node i. The CRF was trained by MM parameter estimation on the 50 noisy instances derived from the first image (Figure 7, left column) only. The gradient (24) was computed by adding the contributions from all 50 training instances to that of the regularizer, with \u03bb = 100. The MAP states of the CRF for all 150 noisy instances of the other three images were then interpreted as attempted reconstructions of the original images. We did not employ a bias node for this task, instead disambiguating MAP states by calling \u201cwhite\u201d whichever state the majority of the nodes on the perimeter of the grid were in.\n3. Thomas and Middleton (2007) employ a similar approach to obtain the ground state from a given state y\u2217 by setting up an isomorphic Ising model with disagreement costs (1\u2212 2 [k \u2208 C(y\u2217)])Ek.\nRows 3 and 5 of Figure 7 show the reconstructions obtained from the noisy instances shown in rows 2 and 4, respectively. At low noise levels (n < 6) we obtained perfect reconstruction of the original images. At an S/N ratio of 1:6 the first small reconstruction errors do creep in (Figure 7, third row), even though over 99.7% of the nodes (and over 99.8% the edges) are still predicted correctly. At the 1:7 S/N ratio, these figures drop to 98.2% (nodes) and 98.8% (edges), and the errors become far more noticeable (Figure 7, bottom row). For higher noise levels (n > 7) the reconstructions rapidly deteriorate as the noise finally overwhelms the signal. We note that at these noise levels our human visual system was no longer able to accurately reconstruct the images either."}, {"heading": "6.2 Segmentation Boundary Detection", "text": "To further scale up our approach, we designed a simple boundary detection task based on images from the GrabCut Ground Truth image segmentation database (Rother et al., 2007a). We took 100\u00d7 100 pixel subregions of images that depicted a segmentation boundary, and corrupted the segmentation mask with pink noise, produced by convolving a white noise image (all pixels i.i.d. uniformly random) with a Gaussian density with one pixel standard deviation.\nWe then employed a planar Ising model to recover the original boundary \u2014 namely, a 100 \u00d7 100 square grid with one additional edge pegged to a high energy, encoding prior knowledge that the bottom left and top right corners of the grid depict different regions. AS before, the energy of the other edges was set to Eij := \u3008[1, |xi \u2212 xj |],\u03b8\u3009, where xi is the pixel intensity at node i. We did not employ a bias node for this task, and simply set the regularization constant to \u03bb = 1.\nNote that this is a huge model: 10 000 nodes and 19 801 edges. Computing the partition function or marginals would require inverting a Kasteleyn matrix with over 1.5 \u00b7109 entries; minimizing (18) is therefore computationally infeasible for us. Computing a ground state via the algorithm described in Section 3, by contrast, takes only 0.3 seconds on an Apple MacBook with 2.2 GHz Intel Core2 Duo processor. We can therefore efficiently minimize (20) to obtain the MM parameter vector \u03b8\u2217, then compute the CRF\u2019s MAP (i.e., ground) state for rapid prediction.\nAs before, we titrated for the smallest S/N ratio of the form 1:n for which we obtained a good segmentation; depending on the image this occurred for n = 7 or 8. Figure 8 (right column) shows that at these noise levels our approach is capable of recovering the original segmentation boundary quite well, with less than 1% of nodes mislabeled. For S/N ratios of 1:9 and lower the system was unable to locate the boundary; for S/N ratios of 1:7 and higher we obtained perfect reconstruction. Again this corresponded closely to our human ability to visually locate the segmentation boundary accurately."}, {"heading": "7. Discussion and Outlook", "text": "We have proposed an alternative algorithmic framework for efficient exact inference in binary graphical models, which replaces the submodularity constraint of graph cut methods with a planarity constraint. Besides proving efficient and effective in first experiments, our approach opens up a number of interesting research directions to be explored:\nOur algorithms can all be extended to nonplanar graphs, at a cost exponential in the genus of the embedding. We are currently developing these extensions, which may prove of great practical value for graphs that are \u201calmost\u201d planar; examples include road networks (where edge crossings arise from overpasses without on-ramps) and graphs describing the tertiary structure of proteins (Vishwanathan et al., 2007).\nOur algorithms also provide a foundation for efforts to develop efficient approximate inference methods for nonplanar Ising models.\nOur method for calculating the ground state (Section 3) actually works for nonplanar graphs whose ground state does not contain frustrated non-contractible cycles. The QPBO graph cut method (Kolmogorov and Rother, 2007) finds ground states that do not contain any frustrated cycles, and otherwise yields a partial labeling. Can we likewise obtain a partial labeling of ground states with frustrated non-contractible cycles?\nThe existence of two distinct tractable frameworks for inference in binary graphical models implies a yet more powerful hybrid: Consider a graph each of whose biconnected components is either planar or submodular. As a whole, this graph may be neither planar nor submodular, yet efficient exact inference in it is clearly possible by applying the appropriate framework to each component. Can this hybrid approach be extended to cover less obvious situations?\nAbout NICTA\nNICTA is a national research institute with a charter to build Australia\u2019s pre-eminent centre of excellence for information and communications technology (ICT). NICTA is building capabilities in ICT research, research training and commercialisation for the generation of national benefit. NICTA is funded by the Australian Government as represented by the Department of Broadband, Communications and the Digital Economy and the Australian Research Council through the ICT Centre of Excellence program."}], "references": [{"title": "On the computational complexity of Ising spin glass models", "author": ["Francisco Barahona"], "venue": "Journal of Physics A: Mathematical, Nuclear and General,", "citeRegEx": "Barahona.,? \\Q1982\\E", "shortCiteRegEx": "Barahona.", "year": 1982}, {"title": "Cholesky-like factorizations of skew-symmetric matrices", "author": ["Peter Benner", "Ralph Byers", "Heike Fassbender", "Volker Mehrmann", "David Watkins"], "venue": "Electronic Transactions on Numerical Analysis,", "citeRegEx": "Benner et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Benner et al\\.", "year": 2000}, {"title": "On the statistical analysis of dirty pictures", "author": ["J. Besag"], "venue": "Journal of the Royal Statistical Society B,", "citeRegEx": "Besag.,? \\Q1986\\E", "shortCiteRegEx": "Besag.", "year": 1986}, {"title": "On the ground states of the frustration model of a spin glass by a matching method of graph theory", "author": ["I. Bieche", "R. Maynard", "R. Rammal", "J.P. Uhry"], "venue": "Journal of Physics A: Mathematical, Nuclear and General,", "citeRegEx": "Bieche et al\\.,? \\Q1980\\E", "shortCiteRegEx": "Bieche et al\\.", "year": 1980}, {"title": "On the cutting edge: Simplified O(n) planarity by edge addition", "author": ["John M. Boyer", "Wendy J. Myrvold"], "venue": "Journal of Graph Algorithms and Applications,", "citeRegEx": "Boyer and Myrvold.,? \\Q2004\\E", "shortCiteRegEx": "Boyer and Myrvold.", "year": 2004}, {"title": "Fast approximate energy minimization via graph cuts", "author": ["Yuri Boykov", "Olga Veksler", "Ramin Zabih"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "Boykov et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Boykov et al\\.", "year": 2001}, {"title": "A note on the stable decomposition of skew-symmetric matrices", "author": ["James R. Bunch"], "venue": "Mathematics of Computation,", "citeRegEx": "Bunch.,? \\Q1982\\E", "shortCiteRegEx": "Bunch.", "year": 1982}, {"title": "Computing minimum-weight perfect matchings", "author": ["William Cook", "Andr\u00e9 Rohe"], "venue": "INFORMS Journal on Computing,", "citeRegEx": "Cook and Rohe.,? \\Q1999\\E", "shortCiteRegEx": "Cook and Rohe.", "year": 1999}, {"title": "Paths, trees, and flowers", "author": ["Jack Edmonds"], "venue": "Canadian Journal of Mathematics,", "citeRegEx": "Edmonds.,? \\Q1965\\E", "shortCiteRegEx": "Edmonds.", "year": 1965}, {"title": "Statistical mechanics of dimers on a plane lattice", "author": ["Michael E. Fisher"], "venue": "Physical Review,", "citeRegEx": "Fisher.,? \\Q1961\\E", "shortCiteRegEx": "Fisher.", "year": 1961}, {"title": "On the dimer solution of planar Ising models", "author": ["Michael E. Fisher"], "venue": "Journal of Mathematical Physics,", "citeRegEx": "Fisher.,? \\Q1966\\E", "shortCiteRegEx": "Fisher.", "year": 1966}, {"title": "An O(EV logV ) algorithm for finding a maximal weighted matching in general graphs", "author": ["Zvi Galil", "Silvio Micali", "Harold N. Gabow"], "venue": "SIAM Journal of Computing,", "citeRegEx": "Galil et al\\.,? \\Q1986\\E", "shortCiteRegEx": "Galil et al\\.", "year": 1986}, {"title": "Approximate inference using planar graph decomposition", "author": ["Amir Globerson", "Tommi Jaakkola"], "venue": "Advances in Neural Information Processing Systems 19,", "citeRegEx": "Globerson and Jaakkola.,? \\Q2007\\E", "shortCiteRegEx": "Globerson and Jaakkola.", "year": 2007}, {"title": "Exact maximum a posteriori estimation for binary images", "author": ["D.M. Greig", "B.T. Porteous", "A.H. Seheult"], "venue": "Journal of the Royal Statistical Society B,", "citeRegEx": "Greig et al\\.,? \\Q1989\\E", "shortCiteRegEx": "Greig et al\\.", "year": 1989}, {"title": "Graph embedding with minimum depth and maximum external face", "author": ["Carsten Gutwenger", "Petra Mutzel"], "venue": "Graph Drawing 2003,", "citeRegEx": "Gutwenger and Mutzel.,? \\Q2004\\E", "shortCiteRegEx": "Gutwenger and Mutzel.", "year": 2004}, {"title": "From fields to trees", "author": ["F. Hamze", "N. de Freitas"], "venue": "In Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Hamze and Freitas.,? \\Q2004\\E", "shortCiteRegEx": "Hamze and Freitas.", "year": 2004}, {"title": "Kasteleyn. The statistics of dimers on a lattice: I. the number of dimer arrangements on a quadratic lattice", "author": ["W. Pieter"], "venue": null, "citeRegEx": "Pieter,? \\Q1961\\E", "shortCiteRegEx": "Pieter", "year": 1961}, {"title": "Kasteleyn. Dimer statistics and phase transitions", "author": ["W. Pieter"], "venue": "Journal of Mathematical Physics,", "citeRegEx": "Pieter,? \\Q1963\\E", "shortCiteRegEx": "Pieter", "year": 1963}, {"title": "Kasteleyn. Graph theory and crystal physics", "author": ["W. Pieter"], "venue": "Graph Theory and Theoretical Physics,", "citeRegEx": "Pieter,? \\Q1967\\E", "shortCiteRegEx": "Pieter", "year": 1967}, {"title": "Minimizing nonsubmodular functions with graph cuts \u2013 a review", "author": ["Vladimir Kolmogorov", "Carsten Rother"], "venue": "IEEE Trans. Pattern Analysis and Machine Intelligence,", "citeRegEx": "Kolmogorov and Rother.,? \\Q2007\\E", "shortCiteRegEx": "Kolmogorov and Rother.", "year": 2007}, {"title": "What energy functions can be minimized via graph cuts", "author": ["Vladimir Kolmogorov", "Ramin Zabih"], "venue": "IEEE Trans. Pattern Analysis and Machine Intelligence,", "citeRegEx": "Kolmogorov and Zabih.,? \\Q2004\\E", "shortCiteRegEx": "Kolmogorov and Zabih.", "year": 2004}, {"title": "Discriminative fields for modeling spatial dependencies in natural images", "author": ["Sanjiv Kumar", "Martial Hebert"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Kumar and Hebert.,? \\Q2004\\E", "shortCiteRegEx": "Kumar and Hebert.", "year": 2004}, {"title": "Discriminative random fields", "author": ["Sanjiv Kumar", "Martial Hebert"], "venue": "International Journal of Computer Vision,", "citeRegEx": "Kumar and Hebert.,? \\Q2006\\E", "shortCiteRegEx": "Kumar and Hebert.", "year": 2006}, {"title": "GrabCut ground truth database", "author": ["C. Rother", "V. Kolmogorov", "A. Blake", "M. Brown"], "venue": "http: //research.microsoft.com/vision/cambridge/i3l/segmentation/GrabCut.htm,", "citeRegEx": "Rother et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Rother et al\\.", "year": 2007}, {"title": "Optimizing binary MRFs via extended roof duality", "author": ["Carsten Rother", "Vladimir Kolmogorov", "Victor Lempitsky", "Martin Szummer"], "venue": "In Proc. IEEE Conf. Computer Vision and Pattern Recognition,", "citeRegEx": "Rother et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Rother et al\\.", "year": 2007}, {"title": "A version of the bundle idea for minimizing a nonsmooth function: Conceptual idea, convergence analysis, numerical results", "author": ["Helga Schramm", "Jochem Zowe"], "venue": "SIAM J. Optimization,", "citeRegEx": "Schramm and Zowe.,? \\Q1992\\E", "shortCiteRegEx": "Schramm and Zowe.", "year": 1992}, {"title": "Max-margin Markov networks", "author": ["B. Taskar", "C. Guestrin", "D. Koller"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Taskar et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Taskar et al\\.", "year": 2004}, {"title": "Matching Kasteleyn cities for spin glass ground states", "author": ["Creighton K. Thomas", "A. Alan Middleton"], "venue": "Physical Review B,", "citeRegEx": "Thomas and Middleton.,? \\Q2007\\E", "shortCiteRegEx": "Thomas and Middleton.", "year": 2007}, {"title": "Accelerated training conditional random fields with stochastic gradient methods", "author": ["S.V.N. Vishwanathan", "Nicol N. Schraudolph", "Mark Schmidt", "Kevin Murphy"], "venue": "In Proc. Intl. Conf. Machine Learning,", "citeRegEx": "Vishwanathan et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Vishwanathan et al\\.", "year": 2006}, {"title": "Fast computation of graph kernels", "author": ["S.V.N. Vishwanathan", "Karsten Borgwardt", "Nicol N. Schraudolph"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Vishwanathan et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Vishwanathan et al\\.", "year": 2007}, {"title": "Tree-based reparameterization framework for analysis of sum-product and related algorithms", "author": ["Martin J. Wainwright", "Tommi S. Jaakkola", "Alan S. Willsky"], "venue": "IEEE Transactions on Information Theory,", "citeRegEx": "Wainwright et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Wainwright et al\\.", "year": 2003}, {"title": "A new class of upper bounds on the log partition function", "author": ["Martin J. Wainwright", "Tommi S. Jaakkola", "Alan S. Willsky"], "venue": "IEEE Transactions on Information Theory,", "citeRegEx": "Wainwright et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Wainwright et al\\.", "year": 2005}, {"title": "Comparing the mean field method and belief propagation for approximate inference in MRFs", "author": ["Yair Weiss"], "venue": "Advanced Mean Field Methods. MIT Press,", "citeRegEx": "Weiss.,? \\Q2001\\E", "shortCiteRegEx": "Weiss.", "year": 2001}, {"title": "Topological graph theory", "author": ["Arthur T. White", "Lowell W. Beineke"], "venue": "Selected Topics in Graph Theory,", "citeRegEx": "White and Beineke.,? \\Q1978\\E", "shortCiteRegEx": "White and Beineke.", "year": 1978}, {"title": "Planar graph functions for the boost graph library. C++ source code, boost file vault: http://boost-consulting.com/vault/index.php?directory=Algorithms/graph", "author": ["Aaron Windsor"], "venue": null, "citeRegEx": "Windsor.,? \\Q2007\\E", "shortCiteRegEx": "Windsor.", "year": 2007}, {"title": "Understanding belief propagation and its generalizations", "author": ["J.S. Yedidia", "W.T. Freeman", "Y. Weiss"], "venue": "Science & Technology Books,", "citeRegEx": "Yedidia et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Yedidia et al\\.", "year": 2003}], "referenceMentions": [{"referenceID": 2, "context": "A large number of approximate inference techniques have been developed so as to deal with such graphs, such as pseudolikelihood (Besag, 1986), mean field approximation, loopy belief propagation (Weiss, 2001; ar X iv :0 81 0.", "startOffset": 128, "endOffset": 141}, {"referenceID": 19, "context": ") We note that a more elaborate construction can give partial answers in graphs with some negative edge weights (Kolmogorov and Rother, 2007; Rother et al., 2007b), and that a sequence of expansion moves (energy minimizations in binary graphs) can efficiently yield an approximate answer for graphs with discrete but non-binary node labels (Boykov et al.", "startOffset": 112, "endOffset": 163}, {"referenceID": 5, "context": ", 2007b), and that a sequence of expansion moves (energy minimizations in binary graphs) can efficiently yield an approximate answer for graphs with discrete but non-binary node labels (Boykov et al., 2001).", "startOffset": 185, "endOffset": 206}, {"referenceID": 12, "context": "The now widespread use of graph cuts in machine learning to find lowest-energy configurations, in particular in image processing, was pioneered by Greig et al. (1989). Our construction (Figure 1c) differs from that of Kolmogorov and Zabih (2004) (Figure 1d) in that we do not employ the notion of directed edges.", "startOffset": 147, "endOffset": 167}, {"referenceID": 12, "context": "The now widespread use of graph cuts in machine learning to find lowest-energy configurations, in particular in image processing, was pioneered by Greig et al. (1989). Our construction (Figure 1c) differs from that of Kolmogorov and Zabih (2004) (Figure 1d) in that we do not employ the notion of directed edges.", "startOffset": 147, "endOffset": 246}, {"referenceID": 4, "context": "Source code for this step is freely available (Boyer and Myrvold, 2004; Windsor, 2007).", "startOffset": 46, "endOffset": 86}, {"referenceID": 34, "context": "Source code for this step is freely available (Boyer and Myrvold, 2004; Windsor, 2007).", "startOffset": 46, "endOffset": 86}, {"referenceID": 4, "context": "the algorithm of Boyer and Myrvold (2004) which, given any connected graph G as input, produces in linear time either a planar embedding for G or a proof that G is non-planar.", "startOffset": 17, "endOffset": 42}, {"referenceID": 14, "context": "In general, a planar embedding which maximizes a weighted sum over the nodes bordering a given face can be found in linear time (Gutwenger and Mutzel, 2004); by setting node weights to some measure of their bias, such as the magnitude or square of E0i (4), we can thus efficiently obtain the planar Ising model closest (in that measure) to any given planar binary graphical model.", "startOffset": 128, "endOffset": 156}, {"referenceID": 0, "context": "The presence of frustration unfortunately makes the computation of ground states much harder \u2014 in fact, it is known to be NP-hard in general (Barahona, 1982).", "startOffset": 141, "endOffset": 157}, {"referenceID": 0, "context": "The presence of frustration unfortunately makes the computation of ground states much harder \u2014 in fact, it is known to be NP-hard in general (Barahona, 1982). As shown below, the ground state of a planar Ising model can be computed in polynomial time via maximumweight perfect matching on an expanded dual of its embedded graph. A relationship between the states of a planar Ising model and perfect matchings (\u201cdimer coverings\u201d to physicists) was first established by Kasteleyn (1961, 1963, 1967) and Fisher (1961, 1966). Perfect matchings in dual graph constructs were used by Bieche et al. (1980) and Barahona (1982) to compute Ising ground states; below we generalize a simpler construction for triangulated graphs due to Globerson and Jaakkola (2007).", "startOffset": 142, "endOffset": 599}, {"referenceID": 0, "context": "The presence of frustration unfortunately makes the computation of ground states much harder \u2014 in fact, it is known to be NP-hard in general (Barahona, 1982). As shown below, the ground state of a planar Ising model can be computed in polynomial time via maximumweight perfect matching on an expanded dual of its embedded graph. A relationship between the states of a planar Ising model and perfect matchings (\u201cdimer coverings\u201d to physicists) was first established by Kasteleyn (1961, 1963, 1967) and Fisher (1961, 1966). Perfect matchings in dual graph constructs were used by Bieche et al. (1980) and Barahona (1982) to compute Ising ground states; below we generalize a simpler construction for triangulated graphs due to Globerson and Jaakkola (2007).", "startOffset": 142, "endOffset": 619}, {"referenceID": 0, "context": "The presence of frustration unfortunately makes the computation of ground states much harder \u2014 in fact, it is known to be NP-hard in general (Barahona, 1982). As shown below, the ground state of a planar Ising model can be computed in polynomial time via maximumweight perfect matching on an expanded dual of its embedded graph. A relationship between the states of a planar Ising model and perfect matchings (\u201cdimer coverings\u201d to physicists) was first established by Kasteleyn (1961, 1963, 1967) and Fisher (1961, 1966). Perfect matchings in dual graph constructs were used by Bieche et al. (1980) and Barahona (1982) to compute Ising ground states; below we generalize a simpler construction for triangulated graphs due to Globerson and Jaakkola (2007). Working independently, Thomas and Middleton (2007) arrived at the same construction as we did, though their algorithm to compute ground states is less straightforward.", "startOffset": 142, "endOffset": 755}, {"referenceID": 0, "context": "The presence of frustration unfortunately makes the computation of ground states much harder \u2014 in fact, it is known to be NP-hard in general (Barahona, 1982). As shown below, the ground state of a planar Ising model can be computed in polynomial time via maximumweight perfect matching on an expanded dual of its embedded graph. A relationship between the states of a planar Ising model and perfect matchings (\u201cdimer coverings\u201d to physicists) was first established by Kasteleyn (1961, 1963, 1967) and Fisher (1961, 1966). Perfect matchings in dual graph constructs were used by Bieche et al. (1980) and Barahona (1982) to compute Ising ground states; below we generalize a simpler construction for triangulated graphs due to Globerson and Jaakkola (2007). Working independently, Thomas and Middleton (2007) arrived at the same construction as we did, though their algorithm to compute ground states is less straightforward.", "startOffset": 142, "endOffset": 807}, {"referenceID": 11, "context": "It can be implemented (Mehlhorn and Sch\u00e4fer, 2002) to run in as little as O(|E| |V| log |V|) time (Galil et al., 1986).", "startOffset": 98, "endOffset": 118}, {"referenceID": 7, "context": "Although the Blossom IV code we are using (Cook and Rohe, 1999) is asymptotically less efficient \u2014O(|E| |V|2) \u2014 we have found it to be very fast in practice (Figure 6, left).", "startOffset": 42, "endOffset": 63}, {"referenceID": 10, "context": "Our Step 2 simplifies equivalent operations in previous constructions (Kasteleyn, 1963, 1967; Fisher, 1966; Globerson and Jaakkola, 2007), Step 3 differs in that it only sets unit (i.", "startOffset": 70, "endOffset": 137}, {"referenceID": 12, "context": "Our Step 2 simplifies equivalent operations in previous constructions (Kasteleyn, 1963, 1967; Fisher, 1966; Globerson and Jaakkola, 2007), Step 3 differs in that it only sets unit (i.", "startOffset": 70, "endOffset": 137}, {"referenceID": 9, "context": "We can now factor K and compute the partition function as Z = \u221a |K| (Kasteleyn, 1961; Fisher, 1961).", "startOffset": 68, "endOffset": 99}, {"referenceID": 10, "context": "Previously (Fisher, 1966; Globerson and Jaakkola, 2007) this convencience came at a computational price: the edges added during plane triangulation can make factoring and inversion of K (Section 4.", "startOffset": 11, "endOffset": 55}, {"referenceID": 12, "context": "Previously (Fisher, 1966; Globerson and Jaakkola, 2007) this convencience came at a computational price: the edges added during plane triangulation can make factoring and inversion of K (Section 4.", "startOffset": 11, "endOffset": 55}, {"referenceID": 12, "context": "Our construction improves upon the work of Globerson and Jaakkola (2007) in a number of ways: \u2022 We employ an indexing scheme that obviates any need to refer to the expanded dual of the model graph (which we consequently never explicitly construct at all); \u2022 We break construction of the Kasteleyn matrix into two phases, the first of which is invariant with respect to the model\u2019s disagreement costs; \u2022 We make the \u201chalf-Kasteleyn\u201d matrix H computed in the first phase very compact by prefactoring out the triangulation edges (see Section 4.", "startOffset": 43, "endOffset": 73}, {"referenceID": 7, "context": "Left: MAP state calculated via Blossom IV (Cook and Rohe, 1999) on original, triangulated, and octangulated ring.", "startOffset": 42, "endOffset": 63}, {"referenceID": 9, "context": "It deviates from the classical construction of K (Kasteleyn, 1961; Fisher, 1961; Globerson and Jaakkola, 2007) in that it makes only positive entries, and only those corresponding to edges with zero disagreement cost, i.", "startOffset": 49, "endOffset": 110}, {"referenceID": 12, "context": "It deviates from the classical construction of K (Kasteleyn, 1961; Fisher, 1961; Globerson and Jaakkola, 2007) in that it makes only positive entries, and only those corresponding to edges with zero disagreement cost, i.", "startOffset": 49, "endOffset": 110}, {"referenceID": 1, "context": "We factor (10) into (cf. Bunch, 1982; Benner et al., 2000) K = \uf8ee\uf8f0 0 \u22121 0> 1 0 0> a/c b/c I \uf8f9\uf8fb\uf8ee\uf8f0 0 c 0> \u2212c 0 0> 0 0 C\u2032 \uf8f9\uf8fb\uf8ee\uf8f0 0 1 a>/c \u22121 0 b>/c 0 0 I \uf8f9\uf8fb , (11)", "startOffset": 20, "endOffset": 58}, {"referenceID": 28, "context": "This is a smooth, convex objective that can be optimized via batch or online implementations of gradient methods such as LBFGS (Vishwanathan et al., 2006).", "startOffset": 127, "endOffset": 154}, {"referenceID": 26, "context": "2 Maximum Margin For maximum-margin (MM) parameter estimation (Taskar et al., 2004) we instead minimize LMM(\u03b8) := 1 2 \u03bb\u2016\u03b8\u2016 2 + E(y\u2217|x,\u03b8)\u2212min y M(y|y\u2217,x,\u03b8) (20) = 12 \u03bb\u2016\u03b8\u2016 2 + E(y\u2217|x,\u03b8)\u2212 E(\u0177|x,\u03b8) + d(\u0177|y\u2217), where \u0177 := argminy M(y|y\u2217,x,\u03b8) is the worst margin violator, i.", "startOffset": 62, "endOffset": 83}, {"referenceID": 25, "context": "We can minimize (20) via bundle methods, such as the BT bundle trust algorithm (Schramm and Zowe, 1992), making use of the convenient lower bound \u2200\u03b8 : LMM(\u03b8) \u2265 0.", "startOffset": 79, "endOffset": 103}, {"referenceID": 27, "context": "Thomas and Middleton (2007) employ a similar approach to obtain the ground state from a given state y\u2217 by setting up an isomorphic Ising model with disagreement costs (1\u2212 2 [k \u2208 C(y)])Ek.", "startOffset": 0, "endOffset": 28}, {"referenceID": 29, "context": "We are currently developing these extensions, which may prove of great practical value for graphs that are \u201calmost\u201d planar; examples include road networks (where edge crossings arise from overpasses without on-ramps) and graphs describing the tertiary structure of proteins (Vishwanathan et al., 2007).", "startOffset": 274, "endOffset": 301}, {"referenceID": 19, "context": "The QPBO graph cut method (Kolmogorov and Rother, 2007) finds ground states that do not contain any frustrated cycles, and otherwise yields a partial labeling.", "startOffset": 26, "endOffset": 55}], "year": 2017, "abstractText": "We give polynomial-time algorithms for the exact computation of lowest-energy (ground) states, worst margin violators, partition functions, and marginal probabilities in certain binary undirected graphical models. Our approach provides an interesting alternative to the well-known graph cut paradigm in that it does not impose any submodularity constraints; instead we require planarity to establish a correspondence with perfect matchings (dimer coverings) in an expanded dual graph. We implement a unified framework while delegating complex but well-understood subproblems (planar embedding, maximum-weight perfect matching) to established algorithms for which efficient implementations are freely available. Unlike graph cut methods, we can perform penalized maximum-likelihood as well as maximum-margin parameter estimation in the associated conditional random fields (CRFs), and employ marginal probabilities as well as maximum a posteriori (MAP) states for prediction. Maximum-margin CRF parameter estimation on image denoising and segmentation problems shows our approach to be efficient and effective.", "creator": "LaTeX with hyperref package"}}}