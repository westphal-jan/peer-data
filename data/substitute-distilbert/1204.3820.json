{"id": "1204.3820", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Apr-2012", "title": "Distance Optimal Formation Control on Graphs with a Tight Convergence Time Guarantee", "abstract": "for elementary task of moving a set of indistinguishable agents on a connected graph with unit edge distance into an arbitrary target formation, free of collisions, we propose a fast distance optimal control algorithm that guides the agents into the desired formation. essentially, we show rather good algorithm also provides a tight convergence time guarantee ( time optimality and total optimality without be simultaneously satisfied ). naive generic graph formulation allows the function to be tailored to scenarios such as grids with holes ( modeling obstacles ) in similar dimensions. simulations, available online, confirm later theoretical developments.", "histories": [["v1", "Tue, 17 Apr 2012 15:58:57 GMT  (2548kb,S)", "https://arxiv.org/abs/1204.3820v1", null], ["v2", "Tue, 24 Jul 2012 16:13:40 GMT  (2550kb,S)", "http://arxiv.org/abs/1204.3820v2", "Accepted to CDC 2012, this is the updated version"], ["v3", "Thu, 6 Sep 2012 17:25:27 GMT  (2549kb,S)", "http://arxiv.org/abs/1204.3820v3", "Brought to be in-sync with final version submitted to CDC 2012 with only minor updates"]], "reviews": [], "SUBJECTS": "cs.SY cs.AI cs.RO", "authors": ["jingjin yu", "steven m lavalle"], "accepted": false, "id": "1204.3820"}, "pdf": {"name": "1204.3820.pdf", "metadata": {"source": "CRF", "title": "Distance Optimal Formation Control on Graphs with a Tight Convergence Time Guarantee", "authors": ["Jingjin Yu", "Steven M. LaValle"], "emails": ["jyu18@uiuc.edu.", "lavalle@uiuc.edu."], "sections": [{"heading": null, "text": "ar X\niv :1\n20 4.\n38 20\nv3 [\ncs .S\nY ]\n6 S\nep 2\n01 2\nI. INTRODUCTION\nIn this paper, we study the problem of controlling a group of indistinguishable agents with non-negligible sizes to take arbitrary desired formations. The agents, confined to an arbitrary connected graph, are capable of moving from one vertex to an adjacent vertex in one time step. The control policy must ensure that no collisions occur, which may happen when two agents attempt to move to the same vertex or move along the same edge. Counting each edge as having unit distance, we show that a (centralized) policy/schedule exists that moves the agents to the desired formation along paths having shortest total distance. The control policy also guarantees that a convergence time (the time when the formation is complete) of no more than n+\u2113\u22121, in which n is the number of agents, \u2113 is the maximum (shortest) distance between any two initial and goal vertices. Moreover, the algorithm for computing the policy has a time complexity of O(nV 2), with V being the number of vertices of the graph. This paragraph also summarizes the main contributions of this paper.\nThe general problem of formation control, sometimes also being referred to as rendezvous or consensus due to differences in emphases, has remained a central research topic in control theory and robotics; see, e.g., [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30]. An early account of the rendezvous problem, as a special case of formation control, appeared in [1], in which algorithmic solutions are provided for agents with limited\nThis work was supported in part by NSF grants 0904501 (IIS Robotics) and 1035345 (Cyberphysical Systems), DARPA SToMP grant HR0011-051-0008, and MURI/ONR grant N00014-09-1-1052. We greatly appreciate the invaluable suggestions from the anonymous reviewers that helped improve the quality of the final presentation.\nJingjin Yu is with the Department of Electrical and Computer Engineering, University of Illinois at Urbana-Champaign, Urbana, IL 61801 USA. E-mail: jyu18@uiuc.edu. Steven M. LaValle is with the Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, IL 61801 USA. E-mail: lavalle@uiuc.edu.\n1http://msl.cs.uiuc.edu/~jyu18/pe/formation.html.\nrange sensing capabilities. Stop-and-go strategies extending the algorithm in [1] are proposed in [13] and [14], which cover various synchronous and asynchronous formulations. An n-dimensional rendezvous problem was approached via proximity graphs in [3]. For the consensus problem it is shown that averaging the behavior of close neighbors causes all agents to converge to the same behavior eventually [9]. We point out that, although this paper works with disjoint initial and goal vertex sets of n distinct elements each, the presented results can be easily generalized to any number of goal vertices between 1 and n, thus covering additional problems such as multi-agent rendezvous.\nFor the problem of achieving and maintaining formations in which not all agents are collocated, graph theoretic approaches are quite popular, probably because agents and inter-agent constraints can be represented naturally with vertices and edges of graphs [5], [23], [31]. On research that appears most related to our problem, a discrete grid abstraction model for formation control was studied in [16]. To plan the paths, a three-step process was used in [16]: 1) Target assignment, 2) Path allocation, 3) Trajectory scheduling. Although it was shown that the process always terminates, no characterization of solution complexity was offered. In contrast, we provide efficient algorithms that solve a strictly more general class of problems with optimality assurance. Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27]. In particular, we recently proposed a network flow based method for attacking the multi-agent path planning problem [29] (to be consistent with [29], the problem we study here is phrased as a multi-agent path planning problem). This paper, focusing on distance optimality and convergence time of the formation control problem, does not use a network flow based method. Some preliminary versions of the theoretical developments appeared in [29] without proofs. These proofs are provided in this paper.\nThe rest of the paper is organized as follows. Section II defines the problem of formation control on graphs and illustrates the problem and main results with an example. In Section III, we characterize the properties of a distance optimal path set, without explicit consideration of collision. Section IV shows that the optimal path set can be scheduled, free of collisions, with tightly bounded convergence time. In Section V, we present efficient algorithms that schedule distance optimal paths and discuss computation as well as simulation results. We conclude in Section VI."}, {"heading": "II. MODELING FORMATION CONTROL ON GRAPHS", "text": "A. Formation Control on Graphs with Collision Prevention\nLet G = (V,E) be a connected, undirected, simple graph, in which V = {vi} is its vertex set and E = {(vi,v j)} is its edge set. Let A = {a1, . . . ,an} be a set of agents that move with unit speeds along the edges of G, with initial and goal vertices on G given by the injective maps xI ,xG : A \u2192 V , respectively. The set A is effectively an index set. For convenience, we let n = |A| and use V,E to denote the cardinalities of the sets V,E , respectively, since the meaning is clear from the context. Let \u03c3 be a permutation that acts on the elements of xG, (\u03c3 \u25e6xG) is a map that defines a possible goal vertex assignment (a target formation).\nA scheduled path is a map pi : Z+ \u2192V , in which Z+ := N\u222a{0}. Intuitively, the domain of the paths is discrete time steps. A scheduled path pi is feasible for a single agent ai if it satisfies the following properties: 1) pi(0) = xI(ai). 2) For each i, there exists a smallest kmin \u2208Z+ such that pi(kmin) = (\u03c3 \u25e6xG)(ai) for some fixed \u03c3 (i.e., same \u03c3 for all 1 \u2264 i \u2264 n). That is, the end point of the path pi is some unique goal vertex. 3) For any k \u2265 kmin, pi(k)\u2261 (\u03c3 \u25e6 xG)(ai). 4) For any 0 \u2264 k < kmin, (pi(k), pi(k+1)) \u2208 E or pi(k) = pi(k+1). We say that two paths pi, p j are in collision if there exists k \u2208Z+ such that pi(k) = p j(k) (meet) or (pi(k), pi(k+1))= (p j(k+ 1), p j(k)) (head-on). If p(k) = p(k+ 1), the agent stays at vertex p(k) between the time steps k and k+ 1.\nProblem 1 (Formation Control on Graphs) Given a 4- tuple (G,A,xI ,xG), find a set of paths P = {p1, . . . , pn} and a fixed \u03c3 such that pi\u2019s are feasible paths for respective agents ai\u2019s for this \u03c3 and no two paths pi, p j are in collision.\nIn this paper, we assume that we work with graphs on which the only possible collisions that may happen are \u201cmeet\u201d or \u201chead-on\u201d collisions. This assumption is a mild one: For example, a 2D grid with unit edge distance is such a graph for agents with radii of no more than \u221a 2/4.\nB. A Motivating Example\nTo characterize what we solve in this paper, look at the example in Fig. 1. For the 6\u00d7 7 grid with some vertices removed, we assign the top left corner coordinates (0,0) and bottom right corner coordinates (6,5). There are six agents with xI(A) = {(0, i\u22121)},xG(A) = {(6, i\u22121)},1\u2264 i \u2264 6. That is, we want to move the agents from left to right. Given this problem, our algorithm first plans distance optimal paths\nwithout considering collisions (the multi-colored lines in Fig. 1). Then, the paths are ordered to produce the schedule in Table I. Each main entry of the table designates the coordinates an agent should be at the given time step. It is clear that a simple control policy can be easily generated from the schedule."}, {"heading": "III. SELECTING DISTANCE OPTIMAL PATHS", "text": "In this section, we pick a set of unscheduled paths Q = {q1, . . . ,qn} (the colored paths in Fig. 1) that is distance optimal for the formation control task and characterize some of its properties. We use Q to distinguish these paths from the scheduled paths, P. For convenience, head(qi), tail(qi), and len(qi) denote the start vertex, end vertex, and length of qi, respectively. With a slight abuse of notation, V (\u00b7), E(\u00b7) denote the vertex set and undirected edge set of the input parameter, which can be either a path, qi, or a set of paths, such as Q. We define an intersection between two paths as a maximal consecutive sequence of vertices and edges common to the two paths.\nSince we want to send agents from xI(A) to xG(A), we need a path set Q such that head(qi)\u2208 xI(A), tail(qi)\u2208 xG(A) for all i and |{head(qi)}| = |{tail(qi)}| = n. It is clear that among all path sets satisfying the above property, there must be a set with the smallest total distance since there are only finitely many such path sets (there may be multiple such path sets with the same total distance). From this point onward, we use Q to refer to an arbitrary unscheduled path set with shortest total distance, unless otherwise noted. This path set Q has many interesting properties. Note that any path qi \u2208 Q must be a shortest path between head(qi) and tail(qi). Once a Q is selected, a \u03c3 is implicitly determined.\nLemma 2 If we orient the edges of every path qi \u2208 Q from head(qi) to tail(qi), then no two paths share a common edge of E(Q) oriented in different directions.\nPROOF. Suppose the statement is false and assume that two oriented paths qi,q j run in different directions on some common edge (u,v). We may write the paths as qi = s + i \u03c9 + i uv\u03c9 \u2212 i s \u2212 i and q j = s + j \u03c9 + j vu\u03c9 \u2212 j s \u2212 j , in which \u03c9+i is the path of qi connecting s + i to u (see Fig. 2). \u03c9\u2212i ,\u03c9 + j ,\u03c9 \u2212 j are interpreted similarly. Then, the paths q\u2032i = s + i \u03c9 + i \u03c9 \u2212 j s \u2212 j and q \u2032 j = s + j \u03c9 + j \u03c9 \u2212 i s \u2212 i have total length equaling len(qi)+ len(q j)\u2212 2, contradicting the minimality of Q. We conclude that no two oriented paths can have edges oriented in opposite directions.\nAbove proof technique can be applied to show that E(Q) can be oriented to form a directed acyclic graph (DAG).\nTheorem 3 The path set Q induces a DAG on E(Q).\nPROOF. By Lemma 2, each edge of E(Q) can be assigned a unique direction if we orient them from head(qi) to tail(qi) for 1\u2264 i \u2264 n. That is, the path set Q induces a directed graph over E(Q). Therefore, the claim of the theorem can only be false if there is a directed cycle in the induced graph. Since a single path from Q, being a shortest path, cannot form a directed cycle itself, at least two or more paths, say q1, . . . ,qk, are need to form a directed cycle. Without loss of generality, we assume these k paths are all needed to form a cycle (i.e., {q1, . . . ,qk}\\qi, 1 \u2264 i \u2264 k, contains no directed cycle). That is, for each 1 \u2264 i \u2264 k, the directed cycle, say C, has at least one edge that belongs only to qi (an illustration is given in Fig. 3). We show that we can update these paths, without changing the total distance of the path set, to obtain a path that intersects itself (containing a cycle). This means the total distance of the path set can be shortened by removing the cycle, a contradiction.\nWe may write q1 as \u03c91u\u03c92v\u03c93, in which u\u03c92v is the maximal segment of q1 belonging to the cycle C; \u03c91,\u03c93 may be empty. Some other path intersecting C must intersect u\u03c92v at v (by the maximality of u\u03c92v) and have a segment belonging to C starting at vertex v; let q2 be such a path. Since q2 contributes some unique edges to C, there are some edges of q2 in C that follow v but do not belong to u\u03c92v. We can then write q2 = \u03c94v\u03c95w\u03c96, in which w is the last vertex of q2 belonging to C. Note that u\u03c92v and \u03c94v may have edges that overlap. We can rearrange q1,q2 into q\u20321 = \u03c91u\u03c92v\u03c95w\u03c96 and q\u20322 = \u03c94v\u03c93. Clearly,\nlen(q1) + len(q2) = len(q\u20321) + len(q \u2032 2); the new path set is still minimal. We have shown that a path set {q1, . . . ,qk} with a directed cycle can be rearranged to yield a path set such that {q\u20321,q3, . . . ,qk} again contains the same directed cycle. Applying the same reasoning recursively yields a shortest path that contains the (same) directed cycle.\nIf a vertex v \u2208 xG(A) is on exactly one path q \u2208 Q, v is a standalone goal vertex. Theorem 3 implies the following.\nCorollary 4 Q has a standalone goal vertex.\nPROOF. At least one vertex v \u2208 xG(A) must be a standalone goal vertex; otherwise, every goal must be on another path and the directed path containing the goals must close to form a directed cycle because the number of goals is finite, contradicting Theorem 3."}, {"heading": "IV. SCHEDULING DISTANCE OPTIMAL PATHS", "text": "In this section we show that an arbitrary unscheduled path set Q can be turned into a scheduled path set P with a tight convergence time guarantee. As mentioned in the introduction, time optimality is measured by the time it takes the last agent to reach its goal (some call this measurement the makespan). Our scheduling algorithm is quite simple. In what follows, DQ is the DAG induced by Q on E(Q).\nSchedule 5 (Sequential Transfer Schedule) For each time step t = i, 0 \u2264 i \u2264 n\u2212 1, over all standalone goal vertices (Corollary 4 guarantees at least one exists), pick an initial vertex that is closest to one of these standalone goal vertices on DQ. Denoting this pair of initial and goal vertices as s+i+1,s \u2212 i+1, let the agent on s + i+1 move to s \u2212 i+1 following an arbitrary directed path on DQ (there may be more than one such path). The path followed by the agent is q\u2032i and the time parameterized path is pi. Remove s+i+1 from xI(A) and s \u2212 i+1 from xG(A) and repeat the process for t = i+ 1.\nWith Schedule 5, distance optimality is not violated and no two pi, p j \u2208P may collide, as shown in the next two lemmas. The statement of Lemma 6 may feel counter-intuitive due to its recursive nature; the proof and figures should make things more clear. Note that as a path set Q is updated, the associated \u03c3 is also updated implicitly.\nLemma 6 There exists an ordered path set Q = {q1, . . . ,qn} such that for any 1 \u2264 i \u2264 n, restricting to Qi := {qi, . . . ,qn}, among all possible paths connecting an initial vertex (of Qi) to a standalone goal vertex (of Qi) using directed edges from DQ, qi is a shortest such path.\nPROOF. We begin with a path set Q = {q1, . . . ,qn} and construct a new path set Q\u2032 = {q\u20321, . . . ,q\u2032n} satisfying the desired property, using edges from E(Q). By Corollary 4, there are one or more standalone goal vertices. Among all possible paths connecting initial vertices and standalone goals using directed edges of DQ, we pick one of the\nshortest. This is q\u20321. Note it is likely that q \u2032 1 /\u2208 Q, in which case we may assume head(q\u20321) = head(qi) and tail(q\u20321) = tail(q j) for some qi,q j \u2208 Q. There are two possibilities: Either E(q\u20321) \u2282 E(qi) \u222a E(q j) or q\u20321 contains edges from some other paths. For the first case (Fig. 4(a)), rearranging the paths as shown in green does not change total path length. For the second case, we may assume that E(q\u20321)\\(E(qi) \u222a E(q j)) belong to some other paths qk (applying similar reasoning used in the first case, we can always get such a qk via switching heads and tails of paths without changing the total path length). The switching shown in Fig. 4(b) gives us a q\u20321 without changing\ntotal path length. After updating Q (now contains q\u20321 as an element), we apply the same procedure to Q\\{q\u20321} and so on; the end result is a path set satisfying the desired property.\nLemma 7 No two paths pi, p j \u2208 P, produced by Schedule 5, will collide.\nPROOF. With a path set Q produced by the construction used in Lemma 6, no path update is necessary; we are left to show that the scheduled paths will not collide. As stated in Section II, there are two types of collision for two scheduled paths pi, p j: Meet (pi(k) = p j(k) for some k) and head-on ((pi(k), pi(k+ 1)) = (p j(k+ 1), p j(k)) for some k). Lemma 2 rules out the possibility of having head-on collision. For the meet case, we prove via induction. For the base case, agent a1 starts at head(q1) at t = 0. By construction, no other initial vertices can be closer to tail(q1) than head(q1). Since all other paths start later, they cannot get in the way of q1\u2019s schedule, which we denote p1. Therefore, p1 cannot collide with any other scheduled paths before it reaches its goal.\nFor the inductive case, assume that {q1, . . . ,qk\u22121} can be scheduled to get {p1, . . . , pk\u22121} without collision. We need to show that {q1, . . . ,qk} can be scheduled to get {p1, . . . , pk} without collision. Invoking the property that tail(q1) is a standalone goal vertex (that is, p1 cannot collide with any other path on or after the time it reaches its goal, tail(q1)), q1 can be removed from the set {q1, . . . ,qk} and induction hypothesis the applies to {q2, . . . ,qk} to show that {p2, . . . , pk} contains no pairs that will collide. Adding p1 back proves the inductive case.\nTheorem 8 Let dist(u,v) denote the shortest distance between two vertices u,v. Schedule 5 provides a distance optimal solution to Problem 1 with convergence time no more than n+ \u2113\u2212 1, in which\n\u2113= max u\u2208xI(A),v\u2208xG(A) dist(u,v). (1)\nFurthermore, the bound on the convergence time is tight.\nPROOF. Lemma 6 and 7 show that Schedule 5 correctly takes the agents to the desired formation. Since Schedule 5 handles one agent per time step, the last agent starts moving no later than t = n\u2212 1 and finishes no later than n+ \u2113\u2212 1.\nTo see that the time bound n+ \u2113\u2212 1 is necessary and therefore tight, look at an instance of Problem 1 shown in Fig. 5. The graph G is two stars with centers connected by a single path; the red vertices form xI(A) and the blue ones xG(A). It is clear that all red vertices are of distance \u2113 to all blue vertices. Given this graph G, only one agent can go from a red vertex to the adjacent black vertex u in one time step. Thus, it takes at least n time steps for the last agent at a red vertex to reach u. After that, it takes the last agent \u2113\u2212 1 steps to reach a blue vertex. Therefore, a total of n+ \u2113\u2212 1 time steps is necessary.\nMoreover, in a sense, the convergence time given in Theorem 8 is the best we can hope for since distance optimality and time optimality cannot be simultaneously achieved.\nProposition 9 Distance optimality and time optimality for Problem 1 cannot be simultaneously satisfied.\nPROOF. In Fig. 6, let the red (resp. blue) vertices be the initial (resp. goal) vertices. For distance optimality, the agents should take the solid paths with a total distance of 3+ 1+ 1+ 1 = 6. These paths yield a value of 3 for the time objective since the longest path has a length of 3. If we optimize over time, then the dashed paths yield a value of 2 and they give a total distance of 2+ 2+ 2+ 2= 8."}, {"heading": "V. COMPUTATIONAL COMPLEXITY AND RESULTS", "text": "A. Pseudocode and Time complexity\nHaving proved that Schedule 5 takes n agents to any formation within n + \u2113\u2212 1 time, we provide how such a schedule can be efficiently computed. The computation time will be given as worst case asymptotic bound in terms of the input parameters, n,V , and E . The scheduling routine, as described in Sections III and IV, is outlined in Algorithm 1.\nAlgorithm 1 PLANANDSCHEDULEFORMATIONPATHS Input: G,A,xI ,xG as input to Problem 1 Output: P = {p1, . . . , pn}\n1: for each ui \u2208 xI(A),v j \u2208 xG(A) do 2: obtain a shortest path qi j between ui,v j 3: end for 4: pick paths from {qi j} to form a path set Q 5: update Q according to Lemma 6 6: for t = 0 to n\u22121 do 7: schedule qt+1 to start at t to get pt+1 8: end for 9: return P = {p1, . . . , pn}\nIn Algorithm 1, lines 1-3 can be realized with n runs of breadth first search (BFS) on G, once for each v\u2208 xI(A); this takes time O(nE)\u2264O(nV 2). A Hungarian algorithm [12] can then finish line 4 in O(n3) time. To compute an updated Q (line 5), take DQ and invert the orientation of all its edges; denote the new graph DQ. We then create a new vertex v0 and connect it to all standalone goals of Q in DQ. Running BFS on DQ from v0 gives us an inverted q\u20321 as constructed in the proof of Lemma 6. This is one iteration of Lemma 6, which takes time O(E), resulting O(nE)\u2264 O(nV 2) time for line 5. Lines 6-8 can be completed in O(nE) time, which is bounded by O(nV 2). Since n \u2264 V , the overall running time of Algorithm 1 is then O(nV 2). This is faster than the network flow based algorithm from [29], which takes time O(V 2E logV ).\nB. Computational Results\nWe also evaluated the real world performance of the control strategy on commodity hardware2. In the evaluation, we used 2D grids as the underlying graph (for example, a 1600 vertex graph is a 40 \u00d7 40 grid) and randomly picked initial and goal vertices. The computational results are listed in Table II. The main entries are seconds that the algorithm takes to run for the given number of agents and vertices. The times are averages over 5 runs; the standard deviations are very small (< 2%). \u201cN/A\u201d indicates that the number of agents are too many to put on the graph. Because all the subroutines used by Algorithm 1 are combinatorial [7] with small constants, even the Java implementation is fairly efficient on large graphs with many agents. For example, it\n2We implemented Algorithm 1 adhering to the Java 1.6 language standard under the Eclipse development environment. The computations were performed on a workstation with an Intel Core 2 Quad processor running at 3.0 GHz (only a single core was used). The JavaVM has a maximum memory of 3GB.\ntakes 24 seconds to compute and schedule distance optimal paths for 1000 agents on a 10000 vertex graph.\nC. Heuristics and Simulations\nTheorem 8 puts the worst case scheduling time bound at n+ \u2113\u2212 1. However, if we adapt a simple heuristic, the total time to convergence can be greatly shortened. In many cases Schedule 5 can be compressed to yield a much shorter convergence time: Schedule a later path earlier when no conflict arises. We observed that when the agents and the goals are randomly scattered on a graph, more agents imply shorter convergence time (steps), as shown in Table III (for\nthe simulation, a 21 \u00d7 21 grid was used. Initial and goal vertices were randomly picked; Fig. 7 captures one run with 75 agents. The data are averages over 10 runs). For example, the n + \u2113\u2212 1 bound translates to about 100 steps for 75 agents; our simulations show that on average only 10 steps are necessary. This is not surprising: When the graph is more crowded, the initial and goal vertices are generally closer.\nTo confirm that Algorithm 1 is graph based and therefore insensitive to obstacles (as long as the obstacles are accounted for by the graph), we also examined grids with holes and observed no performance differences. The simulations mentioned in this subsection, as well as some additional interesting examples, are accessible on the Web (see abstract for the link)."}, {"heading": "VI. CONCLUSION, FUTURE WORK, AND OPEN PROBLEMS", "text": "In this paper, we show that formation control on graphs, as defined in Problem 1, has distance optimal solutions that\ncan be computed efficiently. Furthermore, the shortest paths can be scheduled to yield a control policy with a tight convergence time guarantee. The computation of the control policy can be carried out very efficiently.\nTwo threads of future work are currently being explored, one of which is to make the algorithm decentralized, ideally requiring no global clock and only limited local communication. Another natural next step is to extend the results from graphs to continuous workspaces. There are many possible ways of doing this. For example, we may overlay a graph structure on an Euclidean space via discretization (see e.g.,\nFig. 8), which is not limited to grids. Given arbitrary initial and goal formations, we may design controllers by first aligning the initial and goal formations with vertices of the discrete graph. Algorithm 1 then applies. It remains to be characterized that how distance/time optimality might be affected and how differential constraints can be incorporated.\n(a) (b)\nFig. 8. Two types of discretizations.\nMany open questions remain; we mention two here. In this paper, we only focused on indistinguishable agents. By restricting \u03c3 , different levels of distinguishability can be defined. For example, partitioning \u03c3 into a few smaller ones with disjoint domains effectively grouping the agents into teams. In the extreme, \u03c3 may be the identity map, assigning each agent a specific goal. It is interesting to see whether the structures enabled by shortest paths, present in Problem 1, generalizes to these problems. Shifting the emphasis to convergence time, we have demonstrated that it heavily depends on the graph structure, the number and the distribution of agents, and the distribution of goal vertices. Studying the interplay among these factors may lead to refined convergence time bound and better control policies."}], "references": [{"title": "Distributed memoryless point convergence algorithm for mobile robots with limited visibility", "author": ["H. Ando", "Y. Oasa", "I. Suzuki", "M. Yamashita"], "venue": "IEEE Trans. Robot. Automat.,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1999}, {"title": "Behavior-based formation control for multirobot teams", "author": ["T. Balch", "R.C. Arkin"], "venue": "IEEE Transaction on Robotics and Automation,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1998}, {"title": "Robust rendezvous for mobile autonomous agents via proximity graphs in arbitrary dimensions", "author": ["J. Cort\u00e9s", "S. Martin\u00e9z", "F. Bullo"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2006}, {"title": "On multiple moving objects", "author": ["M.A. Erdmann", "T. Lozano-P\u00e9rez"], "venue": "In Proceedings IEEE International Conference on Robotics & Automation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1986}, {"title": "Information flow and cooperative control of vehicle formations", "author": ["J.A. Fax", "R.M. Murray"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Stability of a discrete-time asynchronous swarm with timedependent communication links", "author": ["V. Gazi"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics: Part B,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Complexity, Oracles, and Numerical Computation", "author": ["M. Gr\u00f6tschel", "A. Schrijver L. Lov\u00e1sz"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1988}, {"title": "A distributed and optimal motion planning approach for multiple mobile robots", "author": ["Y. Guo", "L.E. Parker"], "venue": "In Proceedings IEEE International Conference on Robotics and Automation,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Coordination of groups of mobile autonomous agents using nearest neighbor rules", "author": ["A. Jadbabaie", "J. Lin", "A.S. Morse"], "venue": "IEEE Trans. Automat. Control,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2003}, {"title": "Towards efficient trajectory planning: The path velocity decomposition", "author": ["K. Kant", "S. Zucker"], "venue": "International Journal of Robotics Research,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1986}, {"title": "Path planning for permutation-invariant multirobot formations", "author": ["S. Kloder", "S. Hutchinson"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2006}, {"title": "Combinatorial optimization - networks and matroids", "author": ["E. Lawler"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1976}, {"title": "The multi-agent rendezvous problem. part 1: The synchronous case", "author": ["J. Lin", "A.S. Morse", "B.D.O. Anderson"], "venue": "SIAM Journal on Control and Optimization,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}, {"title": "The multi-agent rendezvous problem. part 2: The asynchronous case", "author": ["J. Lin", "A.S. Morse", "B.D.O. Anderson"], "venue": "SIAM Journal on Control and Optimization,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}, {"title": "Local control strategies for groups of mobile autonomous agents", "author": ["Z. Lin", "M. Broucke", "B. Francis"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "A discrete grid abstraction for formation control in the presence of obstacles", "author": ["D. Miklic", "S. Bogdan", "R. Fierro", "S. Nestic"], "venue": "In Proceedings IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2009}, {"title": "Stability of multiagent systems with time-dependent communication links", "author": ["L. Moreau"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Deadlock-free and collisionfree coordination of two robot manipulators", "author": ["P.A. O\u2019Donnell", "T. Lozano-P\u00e9rez"], "venue": "In Proceedings IEEE International Conference on Robotics & Automation,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1989}, {"title": "Coordinating multiple robots with kinodynamic constraints along specified paths", "author": ["J. Peng", "S. Akella"], "venue": "Algorithmic Foundations of Robotics V (WAFR", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2002}, {"title": "Consensus seeking in multi-agent systems under dynamically changing interaction topologies", "author": ["W. Ren", "R.W. Beard"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2005}, {"title": "Switching rules for decentralized control with simple control laws", "author": ["B. Shucker", "T. Murphey", "J.K. Bennett"], "venue": "In American Control Conference,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2007}, {"title": "Path coordination for multiple mobile robots: A resolution complete algorithm", "author": ["T. Sim\u00e9on", "S. Leroy", "J.-P. Laumond"], "venue": "IEEE Transactions on Robotics & Automation,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2002}, {"title": "Automatic generation of persistent formations for multi-agent networks under range constraints", "author": ["B. Smith", "M. Egerstedt", "A. Howard"], "venue": "ACM/Springer Mobile Networks and Applications Journal,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2009}, {"title": "Curve shortening and the rendezvous problem for mobile autonomous robots", "author": ["S.L. Smith", "M.E. Broucke", "B.A. Francis"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "Leader-to-formation stability", "author": ["H. Tanner", "G. Pappas", "V. Kumar"], "venue": "IEEE Transactions on Robotics and Automation,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2004}, {"title": "Prioritized motion planning for multiple robots", "author": ["J. van den Berg", "M. Overmars"], "venue": "In Proceedings IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2005}, {"title": "Centralized path planning for multiple robots: Optimal decoupling into sequential plans", "author": ["J. van den Berg", "J. Snoeyink", "M. Lin", "D. Manocha"], "venue": "In Proceedings Robotics: Science and Systems,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2009}, {"title": "Coordinated path planning for multiple robots", "author": ["P. \u0160vestka", "M.H. Overmars"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1998}, {"title": "Multi-agent path planning and network flow", "author": ["J. Yu", "S.M. LaValle"], "venue": "In The Tenth International Workshop on Algorithmic Foundations of Robotics (WAFR),", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2012}, {"title": "Rendezvous without coordinates", "author": ["J. Yu", "S.M. LaValle", "D. Liberzon"], "venue": "IEEE Trans. Autom. Control,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2012}, {"title": "Graph-theoretic connectivity control of mobile robot networks", "author": ["M.M. Zavlanos", "M.B. Egerstedt", "G.J. Pappas"], "venue": "Proceedings of the IEEE,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 2, "endOffset": 5}, {"referenceID": 1, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 7, "endOffset": 10}, {"referenceID": 2, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 12, "endOffset": 15}, {"referenceID": 5, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 17, "endOffset": 20}, {"referenceID": 8, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 22, "endOffset": 25}, {"referenceID": 10, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 27, "endOffset": 31}, {"referenceID": 12, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 33, "endOffset": 37}, {"referenceID": 13, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 39, "endOffset": 43}, {"referenceID": 14, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 45, "endOffset": 49}, {"referenceID": 16, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 51, "endOffset": 55}, {"referenceID": 19, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 57, "endOffset": 61}, {"referenceID": 20, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 63, "endOffset": 67}, {"referenceID": 22, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 69, "endOffset": 73}, {"referenceID": 23, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 75, "endOffset": 79}, {"referenceID": 24, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 81, "endOffset": 85}, {"referenceID": 29, "context": ", [1], [2], [3], [6], [9], [11], [13], [14], [15], [17], [20], [21], [23], [24], [25], [30].", "startOffset": 87, "endOffset": 91}, {"referenceID": 0, "context": "An early account of the rendezvous problem, as a special case of formation control, appeared in [1], in which algorithmic solutions are provided for agents with limited", "startOffset": 96, "endOffset": 99}, {"referenceID": 0, "context": "Stop-and-go strategies extending the algorithm in [1] are proposed in [13] and [14], which cover various synchronous and asynchronous formulations.", "startOffset": 50, "endOffset": 53}, {"referenceID": 12, "context": "Stop-and-go strategies extending the algorithm in [1] are proposed in [13] and [14], which cover various synchronous and asynchronous formulations.", "startOffset": 70, "endOffset": 74}, {"referenceID": 13, "context": "Stop-and-go strategies extending the algorithm in [1] are proposed in [13] and [14], which cover various synchronous and asynchronous formulations.", "startOffset": 79, "endOffset": 83}, {"referenceID": 2, "context": "An n-dimensional rendezvous problem was approached via proximity graphs in [3].", "startOffset": 75, "endOffset": 78}, {"referenceID": 8, "context": "For the consensus problem it is shown that averaging the behavior of close neighbors causes all agents to converge to the same behavior eventually [9].", "startOffset": 147, "endOffset": 150}, {"referenceID": 4, "context": "For the problem of achieving and maintaining formations in which not all agents are collocated, graph theoretic approaches are quite popular, probably because agents and inter-agent constraints can be represented naturally with vertices and edges of graphs [5], [23], [31].", "startOffset": 257, "endOffset": 260}, {"referenceID": 22, "context": "For the problem of achieving and maintaining formations in which not all agents are collocated, graph theoretic approaches are quite popular, probably because agents and inter-agent constraints can be represented naturally with vertices and edges of graphs [5], [23], [31].", "startOffset": 262, "endOffset": 266}, {"referenceID": 30, "context": "For the problem of achieving and maintaining formations in which not all agents are collocated, graph theoretic approaches are quite popular, probably because agents and inter-agent constraints can be represented naturally with vertices and edges of graphs [5], [23], [31].", "startOffset": 268, "endOffset": 272}, {"referenceID": 15, "context": "On research that appears most related to our problem, a discrete grid abstraction model for formation control was studied in [16].", "startOffset": 125, "endOffset": 129}, {"referenceID": 15, "context": "To plan the paths, a three-step process was used in [16]: 1) Target assignment, 2) Path allocation, 3) Trajectory scheduling.", "startOffset": 52, "endOffset": 56}, {"referenceID": 3, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 130, "endOffset": 133}, {"referenceID": 7, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 135, "endOffset": 138}, {"referenceID": 9, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 140, "endOffset": 144}, {"referenceID": 17, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 146, "endOffset": 150}, {"referenceID": 27, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 152, "endOffset": 156}, {"referenceID": 18, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 158, "endOffset": 162}, {"referenceID": 21, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 164, "endOffset": 168}, {"referenceID": 25, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 170, "endOffset": 174}, {"referenceID": 26, "context": "Our particular problem formulation is also closely related to the multi-robot path planning problem, studied actively in robotics [4], [8], [10], [18], [28], [19], [22], [26], [27].", "startOffset": 176, "endOffset": 180}, {"referenceID": 28, "context": "In particular, we recently proposed a network flow based method for attacking the multi-agent path planning problem [29] (to be consistent with [29], the problem we study here is phrased as a multi-agent path planning problem).", "startOffset": 116, "endOffset": 120}, {"referenceID": 28, "context": "In particular, we recently proposed a network flow based method for attacking the multi-agent path planning problem [29] (to be consistent with [29], the problem we study here is phrased as a multi-agent path planning problem).", "startOffset": 144, "endOffset": 148}, {"referenceID": 28, "context": "Some preliminary versions of the theoretical developments appeared in [29] without proofs.", "startOffset": 70, "endOffset": 74}, {"referenceID": 11, "context": "A Hungarian algorithm [12] can then finish line 4 in O(n3) time.", "startOffset": 22, "endOffset": 26}, {"referenceID": 28, "context": "This is faster than the network flow based algorithm from [29], which takes time O(V 2E logV ).", "startOffset": 58, "endOffset": 62}, {"referenceID": 6, "context": "Because all the subroutines used by Algorithm 1 are combinatorial [7] with small constants, even the Java implementation is fairly efficient on large graphs with many agents.", "startOffset": 66, "endOffset": 69}], "year": 2012, "abstractText": "For the task of moving a set of indistinguishable agents on a connected graph with unit edge distance to an arbitrary set of goal vertices, free of collisions, we propose a fast distance optimal control algorithm that guides the agents into the desired formation. Moreover, we show that the algorithm also provides a tight convergence time guarantee (time optimality and distance optimality cannot be simultaneously satisfied). Our generic graph formulation allows the algorithm to be applied to scenarios such as grids with holes (modeling obstacles) in arbitrary dimensions. Simulations, available online1, confirm our theoretical developments.", "creator": "LaTeX with hyperref package"}}}