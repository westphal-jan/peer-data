{"id": "1210.5840", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Oct-2012", "title": "Supervised Learning with Similarity Functions", "abstract": "we address the problem of general information learning when data can only be evaluated through an ( indefinite ) similarity function between spectral fragments. existing work on domains with indefinite kernels has concentrated solely on binary / multi - class classification problems. we propose a model that includes generic enough to handle any supervised learning effort and also subsumes the model previously proposed for classification. we give a \" goodness \" criterion for similarity functions w. r. t. a given supervised learning task and then adapt a well - known landmarking technique called provide efficient measurement for supervised learning using \" good \" similarity functions. we demonstrate the effectiveness of our model on three important super - vised learning problems : a ) real - valued regression, development ) ordinal regression and c ) ranking where we show that our method guarantees bounded generalization error. furthermore, for the case of real - valued lessons, we test a smaller goodness definition that, when used in conjunction with a recent result in sparse spectral recovery, guarantees a false predictor with bounded generalization error. finally, we report results of our learning algorithms on clustered and ordinal quality tasks using n - psd characteristic functions then demonstrate similar ability supporting our algorithms, especially that of every sparse landmark selection algorithm that achieves significantly higher accuracies than the baseline methods while handling reduced computational bias.", "histories": [["v1", "Mon, 22 Oct 2012 08:55:13 GMT  (945kb,DS)", "http://arxiv.org/abs/1210.5840v1", "To appear in the proceedings of NIPS 2012, 30 pages"]], "COMMENTS": "To appear in the proceedings of NIPS 2012, 30 pages", "reviews": [], "SUBJECTS": "cs.LG stat.ML", "authors": ["purushottam kar", "prateek jain 0002"], "accepted": true, "id": "1210.5840"}, "pdf": {"name": "1210.5840.pdf", "metadata": {"source": "CRF", "title": "Supervised Learning with Similarity Functions", "authors": ["Purushottam Kar", "Prateek Jain"], "emails": ["purushot@cse.iitk.ac.in", "prajain@microsoft.com"], "sections": [{"heading": "1 Introduction", "text": "The goal of this paper is to develop an extended framework for supervised learning with similarity functions. Kernel learning algorithms [1] have become the mainstay of discriminative learning with an incredible amount of effort having been put in, both from the theoretician\u2019s as well as the practitioner\u2019s side. However, these algorithms typically require the similarity function to be a positive semi-definite (PSD) function, which can be a limiting factor for several applications. Reasons being: 1) the Mercer\u2019s condition is a formal statement that is hard to verify, 2) several natural notions of similarity that arise in practical scenarios are not PSD, and 3) it is not clear as to why an artificial constraint like PSD-ness should limit the usability of a kernel.\nSeveral recent papers have demonstrated that indefinite similarity functions can indeed be successfully used for learning [2, 3, 4, 5]. However, most of the existing work focuses on classification tasks and provides specialized techniques for the same, albeit with little or no theoretical guarantees. A notable exception is the line of work by [6, 7, 8] that defines a goodness criterion for a similarity function and then provides an algorithm that can exploit this goodness criterion to obtain provably accurate classifiers. However, their definitions are yet again restricted to the problem of classification as they take a \u201cmargin\u201d based view of the problem that requires positive points to be more similar to positive points than to negative points by at least a constant margin.\nIn this work, we instead take a \u201ctarget-value\u201d point of view and require that target values of similar points be similar. Using this view, we propose a generic goodness definition that also admits the\nar X\niv :1\n21 0.\n58 40\nv1 [\ncs .L\nG ]\n2 2\nO ct\n2 01\ngoodness definition of [6] for classification as a special case. Furthermore, our definition can be seen as imposing the existence of a smooth function over a generic space defined by similarity functions, rather than over a Hilbert space as required by typical goodness definitions of PSD kernels.\nWe then adapt the landmarking technique of [6] to provide an efficient algorithm that reduces learning tasks to corresponding learning problems over a linear space. The main technical challenge at this stage is to show that such reductions are able to provide good generalization error bounds for the learning tasks at hand. To this end, we consider three specific problems: a) regression, b) ordinal regression, and c) ranking. For each problem, we define appropriate surrogate loss functions, and show that our algorithm is able to, for each specific learning task, guarantee bounded generalization error with polynomial sample complexity. Moreover, by adapting a general framework given by [9], we show that these guarantees do not require the goodness definition to be overly restrictive by showing that our definitions admit all good PSD kernels as well.\nFor the problem of real-valued regression, we additionally provide a goodness definition that captures the intuition that usually, only a small number of landmarks are influential w.r.t. the learning task. However, to recover these landmarks, the uniform sampling technique would require sampling a large number of landmarks thus increasing the training/test time of the predictor. We address this issue by applying a sparse vector recovery algorithm given by [10] and show that the resulting sparse predictor still has bounded generalization error.\nWe also address an important issue faced by algorithms that use landmarking as a feature constructions step viz [6, 7, 8], namely that they typically assume separate landmark and training sets for ease of analysis. In practice however, one usually tries to overcome paucity of training data by reusing training data as landmark points as well. We use an argument outlined in [11] to theoretically justify such \u201cdouble dipping\u201d in our case. The details of the argument are given in Appendix B.\nWe perform several experiments on benchmark datasets that demonstrate significant performance gains for our methods over the baseline of kernel regression. Our sparse landmark selection technique provides significantly better predictors that are also more efficient at test time.\nRelated Work: Existing approaches to extend kernel learning algorithms to indefinite kernels can be classified into three broad categories: a) those that use indefinite kernels directly with existing kernel learning algorithms, resulting in non-convex formulations [2, 3]. b) those that convert a given indefinite kernel into a PSD one by either projecting onto the PSD-cone [4, 5] or performing other spectral operations [12]. The second approach is usually expensive due to the spectral operations involved apart from making the method inherently transductive. Moreover, any domain knowledge stored in the original kernel is lost due to these task oblivious operations and consequently, no generalization guarantees can be given. c) those that use notions of \u201ctask-kernel alignment\u201d or equivalently, notions of \u201cgoodness\u201d of a kernel, to give learning algorithms [6, 7, 8]. This approach enjoys several advantages over the other approaches listed above. These models are able to use the indefinite kernel directly with existing PSD kernel learning techniques; all the while retaining the ability to give generalization bounds that quantitatively parallel those of PSD kernel learning models. In this paper, we adopt the third approach for general supervised learning problem."}, {"heading": "2 Problem formulation and Preliminaries", "text": "The goal in similarity-based supervised learning is to closely approximate a target predictor y : X \u2192 Y over some domain X using a hypothesis f\u0302( \u00b7 ;K) : X \u2192 Y that restricts its interaction with data points to computing similarity values given by K. Now, if the similarity function K is not discriminative enough for the given task then we cannot hope to construct a predictor out of it that enjoys good generalization properties. Hence, it is natural to define the \u201cgoodness\u201d of a given similarity function with respect to the learning task at hand. Definition 1 (Good similarity function: preliminary). Given a learning task y : X \u2192 Y over some distribution D, a similarity function K : X \u00d7 X \u2192 R is said to be ( 0, B)-good with respect to this task if there exists some bounded weighing function w : X \u2192 [\u2212B,B] such that for at least a (1\u2212 0) D-fraction of the domain, we have y(x) = E\nx\u2032\u223cD Jw(x\u2032)y(x\u2032)K(x,x\u2032)K .\nThe above definition is inspired by the definition of a \u201cgood\u201d similarity function with respect to classification tasks given in [6]. However, their definition is tied to class labels and thus applies only\nAlgorithm 1 Supervised learning with Similarity functions Input: A target predictor y : X \u2192 Y over a distribution D, an ( 0, B)-good similarity function K, labeled\ntraining points sampled from D: T = { (xt1, y1), . . . , (x t n, yn) } , loss function `S : R\u00d7 Y \u2192 R+.\nOutput: A predictor f\u0302 : X \u2192 R with bounded true loss over D 1: Sample d unlabeled landmarks from D: L = { xl1, . . . ,x l d } // Else subsample d landmarks from T (see Appendix B for details)\n2: \u03a8L : x 7\u2192 1/ \u221a d ( K(x,xl1), . . . ,K(x,x l d) ) \u2208 Rd 3: w\u0302 = arg min w\u2208Rd:\u2016w\u20162\u2264B \u2211n i `S (\u2329 w,\u03a8L(x t i) \u232a , yi ) 4: return f\u0302 : x 7\u2192 \u3008w\u0302,\u03a8L(x)\u3009\nto classification tasks. Similar to [6], the above definition calls a similarity function K \u201cgood\u201d if the target value y(x) of a given point x can be approximated in terms of (a weighted combination of) the target values of the K-\u201cneighbors\u201d of x. Also, note that this definition automatically enforces a smoothness prior on the framework.\nHowever the above definition is too rigid. Moreover, it defines goodness in terms of violations, a non-convex loss function. To remedy this, we propose an alternative definition that incorporates an arbitrary (but in practice always convex) loss function.\nDefinition 2 (Good similarity function: final). Given a learning task y : X \u2192 Y over some distribution D, a similarity function K is said to be ( 0, B)-good with respect to a loss function `S : R\u00d7 Y \u2192 R if there exists some bounded weighing function w : X \u2192 [\u2212B,B] such that if we define a predictor as f(x) := E\nx\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K, then we have E x\u223cD J`S(f(x), y(x))K \u2264 0.\nNote that Definition 2 reduces to Definition 1 for `S(a, b) = 1{a6=b}. Moreover, for the case of binary classification where y \u2208 {\u22121,+1}, if we take `S(a, b) = 1{ab\u2264B\u03b3}, then we recover the ( 0, \u03b3)-goodness definition of a similarity function, given in Definition 3 of [6]. Also note that, assuming sup\nx\u2208X {|y(x)|} <\u221e we can w.l.o.g. merge w(x\u2032)y(x\u2032) into a single term w(x\u2032).\nHaving given this definition we must make sure that \u201cgood\u201d similarity functions allow the construction of effective predictors (Utility property). Moreover, we must make sure that the definition does not exclude commonly used PSD kernels (Admissibility property). Below, we formally define these two properties and in later sections, show that for each of the learning tasks considered, our goodness definition satisfies these two properties."}, {"heading": "2.1 Utility", "text": "Definition 3 (Utility). A similarity functionK is said to be 0-useful w.r.t. a loss function `actual (\u00b7, \u00b7) if the following holds: there exists a learning algorithm A that, for any 1, \u03b4 > 0, when given poly(1/ 1, log(1/\u03b4)) \u201clabeled\u201d and \u201cunlabeled\u201d samples from the input distribution D, with probability at least 1 \u2212 \u03b4 , generates a hypothesis f\u0302(x;K) s.t. E\nx\u223cD\nr `actual ( f\u0302(x), y(x) )z \u2264 0 + 1.\nNote that f\u0302(x;K) is restricted to access the data solely through K.\nHere, the 0 term captures the misfit or the bias of the similarity function with respect to the learning problem. Notice that the above utility definition allows for learning from unlabeled data points and thus puts our approach in the semi-supervised learning framework.\nAll our utility guarantees proceed by first using unlabeled samples as landmarks to construct a landmarked space. Next, using the goodness definition, we show the existence of a good linear predictor in the landmarked space. This guarantee is obtained in two steps as outlined in Algorithm 1: first of all we choose d unlabeled landmark points and construct a map \u03a8 : X \u2192 Rd (see Step 1 of Algorithm 1) and show that there exists a linear predictor over Rd that closely approximates the predictor f used in Definition 2 (see Lemma 15 in Appendix A). In the second step, we learn a predictor (over the landmarked space) using ERM over a fresh labeled training set (see Step 3 of Algorithm 1). We then use individual task-specific arguments and Rademacher average-based generalization bounds [13] thus proving the utility of the similarity function."}, {"heading": "2.2 Admissibility", "text": "In order to show that our models are not too rigid, we would prove that they admit good PSD kernels. The notion of a good PSD kernel for us will be one that corresponds to a prevalent large margin technique for the given problem. In general, most notions correspond to the existence of a linear operator in the RKHS of the kernel that has small loss at large margin. More formally, Definition 4 (Good PSD Kernel). Given a learning task y : X \u2192 Y over some distribution D, a PSD kernelK : X \u00d7X \u2192 R with associated RKHSHK and canonical feature map \u03a6K : X \u2192 HK is said to be ( 0, \u03b3)-good with respect to a loss function `K : R\u00d7 Y \u2192 R if there exists W\u2217 \u2208 HK such that \u2016W\u2217\u2016 = 1 and\nE x\u223cD\ns `K\n( \u3008W\u2217,\u03a6K(x)\u3009\n\u03b3 , y(x)\n){ < 0\nWe will show, for all the learning tasks considered, that every ( 0, \u03b3)-good PSD kernel, when treated as simply a similarity function with no consideration of its RKHS, is also ( + 1, B)-good for arbitrarily small 1 with B = h(\u03b3, 1) for some function h. To prove these results we will adapt techniques introduced in [9] with certain modifications and task-dependent arguments."}, {"heading": "3 Applications", "text": "We will now instantiate the general learning model described above to real-valued regression, ordinal regression and ranking by providing utility and admissibility guarantees. Due to lack of space, we relegate all proofs as well as the discussion on ranking to the supplementary material (Appendix F)."}, {"heading": "3.1 Real-valued Regression", "text": "Real-valued regression is a quintessential learning problem [1] that has received a lot of attention in the learning literature. In the following we shall present algorithms for performing real-valued regression using non-PSD similarity measures. We consider the problem with `actual (a, b) = |a\u2212 b| as the true loss function. For the surrogates `S and `K , we choose the -insensitive loss function [1] defined as follows:\n` (a, b) = ` (a\u2212 b) = {\n0, if |a\u2212 b| < , |a\u2212 b| \u2212 , otherwise.\nThe above loss function automatically gives us notions of good kernels and similarity functions by appealing to Definitions 4 and 2 respectively. It is easy to transfer error bounds in terms of absolute error to those in terms of mean squared error (MSE), a commonly used performance measure for real-valued regression. See Appendix D for further discussion on the choice of the loss function.\nUsing the landmarking strategy described in Section 2.1, we can reduce the problem of real regression to that of a linear regression problem in the landmarked space. More specifically, the ERM step in Algorithm 1 becomes the following: arg min\nw\u2208Rd:\u2016w\u20162\u2264B\n\u2211n i ` (\u3008w,\u03a8L(xi)\u3009 \u2212 yi).\nThere exist solvers (for instance [14]) to efficiently solve the above problem on linear spaces. Using proof techniques sketched in Section 2.1 along with specific arguments for the -insensitive loss, we can prove generalization guarantees and hence utility guarantees for the similarity function. Theorem 5. Every similarity function that is ( 0, B)-good for a regression problem with respect to the insensitive loss function ` (\u00b7, \u00b7) is ( 0 + )-useful with respect to absolute loss as well as (B 0 +B )-useful with respect to mean squared error. Moreover, both the dimensionality of the\nlandmarked space as well as the labeled sample complexity can be bounded by O ( B2\n21 log 1\u03b4\n) .\nWe are also able to prove the following (tight) admissibility result: Theorem 6. Every PSD kernel that is ( 0, \u03b3)-good for a regression problem is, for any 1 > 0,( 0 + 1,O ( 1\n1\u03b32\n)) -good as a similarity function as well. Moreover, for any 1 < 1/2 and any\n\u03b3 < 1, there exists a regression instance and a corresponding kernel that is (0, \u03b3)-good for the regression problem but only ( 1, B)-good as a similarity function for B = \u2126 (\n1 1\u03b32\n) ."}, {"heading": "3.2 Sparse regression models", "text": "An artifact of a random choice of landmarks is that very few of them might turn out to be \u201cinformative\u201d with respect to the prediction problem at hand. For instance, in a network, there might exist hubs or authoritative nodes that yield rich information about the learning problem. If the relative abundance of such nodes is low then random selection would compel us to choose a large number of landmarks before enough \u201cinformative\u201d ones have been collected.\nHowever this greatly increases training and testing times due to the increased costs of constructing the landmarked space. Thus, the ability to prune away irrelevant landmarks would speed up training and test routines. We note that this issue has been addressed before in literature [8, 12] by way of landmark selection heuristics. In contrast, we guarantee that our predictor will select a small number of landmarks while incurring bounded generalization error. However this requires a careful restructuring of the learning model to incorporate the \u201cinformativeness\u201d of landmarks. Definition 7. A similarity function K is said to be ( 0, B, \u03c4)-good for a real-valued regression problem y : X \u2192 R if for some bounded weight function w : X \u2192 [\u2212B,B] and choice function R : X \u2192 {0, 1} with E\nx\u223cD JR(x)K = \u03c4 , the predictor f : x 7\u2192 E x\u2032\u223cD Jw(x\u2032)K(x,x\u2032)|R(x\u2032)K has\nbounded -insensitive loss i.e. E x\u223cD J` (f(x), y(x))K < 0.\nThe role of the choice function is to single out informative landmarks, while \u03c4 specifies the relative density of informative landmarks. Note that the above definition is similar in spirit to the goodness definition presented in [15]. While the motivation behind [15] was to give an improved admissibility result for binary classification, we squarely focus on the utility guarantees; with the aim of accelerating our learning algorithms via landmark pruning.\nWe prove the utility guarantee in three steps as outlined in Appendix D. First, we use the usual landmarking step to project the problem onto a linear space. This step guarantees the following: Theorem 8. Given a similarity function that is ( 0, B, \u03c4)-good for a regression problem, there exists a randomized map \u03a8 : X \u2192 Rd for d = O ( B2\n\u03c4 21 log 1\u03b4\n) such that with probability at least 1 \u2212 \u03b4,\nthere exists a linear operator f\u0303 : x 7\u2192 \u3008w,x\u3009 over Rd such that \u2016w\u20161 \u2264 B with -insensitive loss bounded by 0 + 1. Moreover, with the same confidence we have \u2016w\u20160 \u2264 3d\u03c4 2 .\nOur proof follows that of [15], however we additionally prove sparsity of w as well. The number of landmarks required here is a \u2126 (1/\u03c4) fraction greater than that required by Theorem 5. This formally captures the intuition presented earlier of a small fraction of dimensions (read landmarks) being actually relevant to the learning problem. So, in the second step, we use the Forward Greedy Selection algorithm given in [10] to learn a sparse predictor. The use of this learning algorithm necessitates the use of a different generalization bound in the final step to complete the utility guarantee given below. We refer the reader to Appendix D for the details of the algorithm and its utility analysis. Theorem 9. Every similarity function that is ( 0, B, \u03c4)-good for a regression problem with respect to the insensitive loss function ` (\u00b7, \u00b7) is ( 0 + )-useful with respect to absolute loss as well; with the dimensionality of the landmarked space being bounded by O ( B2\n\u03c4 21 log 1\u03b4\n) and the labeled sampled\ncomplexity being bounded by O ( B2\n21 log B 1\u03b4\n) . Moreover, this utility can be achieved by an O (\u03c4)-\nsparse predictor on the landmarked space.\nWe note that the improvements obtained here by using the sparse learning methods of [10] provide \u2126 (\u03c4) increase in sparsity. We now prove admissibility results for this sparse learning model. We do this by showing that the dense model analyzed in Theorem 5 and that given in Definition 7 are interpretable in each other for an appropriate selection of parameters. The guarantees in Theorem 6 can then be invoked to conclude the admissibility proof. Theorem 10. Every ( 0, B)-good similarity function K is also ( 0, B, w\u0304 B ) -good where w\u0304 =\nE x\u223cD J|w(x)|K. Moreover, every ( 0, B, \u03c4)-good similarity function K is also ( 0, B/\u03c4)-good.\nUsing Theorem 6, we immediately have the following corollary: Corollary 11. Every PSD kernel that is ( 0, \u03b3)-good for a regression problem is, for any 1 > 0,( 0 + 1,O ( 1\n1\u03b32\n) , 1 ) -good as a similarity function as well."}, {"heading": "3.3 Ordinal Regression", "text": "The problem of ordinal regression requires an accurate prediction of (discrete) labels coming from a finite ordered set [r] = {1, 2, . . . , r}. The problem is similar to both classification and regression, but has some distinct features due to which it has received independent attention [16, 17] in domains such as product ratings etc. The most popular performance measure for this problem is the absolute loss which is the absolute difference between the predicted and the true labels.\nA natural and rather tempting way to solve this problem is to relax the problem to real-valued regression and threshold the output of the learned real-valued predictor using predefined thresholds b1, . . . , br to get discrete labels. Although this approach has been prevalent in literature [17], as the discussion in the supplementary material shows, this leads to poor generalization guarantees in our model. More specifically, a goodness definition constructed around such a direct reduction is only able to ensure ( 0 + 1)-utility i.e. the absolute error rate is always greater than 1.\nOne of the reasons for this is the presence of the thresholding operation that makes it impossible to distinguish between instances that would not be affected by small perturbations to the underlying real-valued predictor and those that would. To remedy this, we enforce a (soft) margin with respect to thresholding that makes the formulation more robust to noise. More formally, we expect that if a point belongs to the label i, then in addition to being sandwiched between the thresholds bi and bi+1, it should be separated from these by a margin as well i.e. bi + \u03b3 \u2264 f(x) \u2264 bi+1 \u2212 \u03b3. This is a direct generalization of the margin principle in classification where we expect w>x > b+\u03b3 for positively labeled points and w>x < b \u2212 \u03b3 for negatively labeled points. Of course, wherein classification requires a single threshold, we require several, depending upon the number of labels. For any x \u2208 R, let [x]+ = max {x, 0}. Thus, if we define the \u03b3-margin loss function to be [x]\u03b3 := [\u03b3 \u2212 x]+ (note that this is simply the well known hinge loss function scaled by a factor of \u03b3), we can define our goodness criterion as follows: Definition 12. A similarity function K is said to be ( 0, B)-good for an ordinal regression problem y : X \u2192 [r] if for some bounded weight function w : X \u2192 [\u2212B,B] and some (unknown but fixed) set of thresholds {bi}ri=1 with b1 = \u2212\u221e, the predictor f : x 7\u2192 Ex\u2032\u223cD Jw(x \u2032)K(x,x\u2032)K satisfies\nE x\u223cD\nr[ f(x)\u2212 by(x) ] \u03b3 + [ by(x)+1 \u2212 f(x) ] \u03b3 z < 0.\nWe now give utility guarantees for our learning model. We shall give guarantees on both the misclassification error as well as the absolute error of our learned predictor. We say that a set of points x1, . . . , xi . . . is \u2206-spaced if min\ni 6=j {|xi \u2212 xj |} \u2265 \u2206. Define the function \u03c8\u2206(x) = x+\u2206\u22121\u2206 .\nTheorem 13. Let K be a similarity function that is ( 0, B)-good for an ordinal regression problem with respect to \u2206-spaced thresholds and \u03b3-margin loss. Let \u03b3\u0304 = max {\u03b3, 1}. Then K is \u03c8(\u2206/\u03b3\u0304) ( 0 \u03b3\u0304 ) -useful with respect to ordinal regression error (absolute loss). Moreover, K is ( 0 \u03b3\u0304 ) - useful with respect to the zero-one mislabeling error as well.\nWe can bound, both dimensionality of the landmarked space as well as labeled sampled complexity, by O ( B2\n21 log 1\u03b4\n) . Notice that for 0 < 1 and large enough d, n, we can ensure that the ordinal\nregression error rate is also bounded above by 1 since sup x\u2208[0,1],\u2206>0 (\u03c8\u2206 (x)) = 1. This is in contrast with the direct reduction to real valued regression which has ordinal regression error rate bounded below by 1. This indicates the advantage of the present model over a naive reduction to regression.\nWe can show that our definition of a good similarity function admits all good PSD kernels as well. The kernel goodness criterion we adopt corresponds to the large margin framework proposed by [16]. We refer the reader to Appendix E.3 for the definition and give the admissibility result below. Theorem 14. Every PSD kernel that is ( 0, \u03b3)-good for an ordinal regression problem is also( \u03b31 0 + 1,O ( \u03b321 1\u03b32 )) -good as a similarity function with respect to the \u03b31-margin loss for any \u03b31, 1 > 0. Moreover, for any 1 < \u03b31/2, there exists an ordinal regression instance and a corresponding kernel that is (0, \u03b3)-good for the ordinal regression problem but only ( 1, B)-good as a\nsimilarity function with respect to the \u03b31-margin loss function for B = \u2126 ( \u03b321 1\u03b32 ) .\nDue to lack of space we refer the reader to Appendix F for a discussion on ranking models that includes utility and admissibility guarantees with respect to the popular NDCG loss."}, {"heading": "4 Experimental Results", "text": "In this section we present an empirical evaluation of our learning models for the problems of realvalued regression and ordinal regression on benchmark datasets taken from a variety of sources [18, 19, 20]. In all cases, we compare our algorithms against kernel regression (KR), a well known technique [21] for non-linear regression, whose predictor is of the form:\nf : x 7\u2192 \u2211\nxi\u2208T y(xi)K(x,xi)\u2211 xi\u2208T K(x,xi) .\nwhere T is the training set. We selected KR as the baseline as it is a popular regression method that does not require similarity functions to be PSD. For ordinal regression problems, we rounded off the result of the KR predictor to get a discrete label. We implemented all our algorithms as well as the\nbaseline KR method in Matlab. In all our experiments we report results across 5 random splits on the (indefinite) Sigmoid: K(x,y) = tanh(a \u3008x,y\u3009 + r) and Manhattan: K(x,y) = \u2212\u2016x\u2212 y\u20161 kernels. Following standard practice, we fixed r = \u22121 and a = 1/dorig for the Sigmoid kernel where dorig is the dimensionality of the dataset.\nReal valued regression: For this experiment, we compare our methods (RegLand and RegLand-Sp) with the KR method. For RegLand, we constructed the landmarked space as specified in Algorithm 1 and learned a linear predictor using the LIBLINEAR package [14] that minimizes -insensitive loss. In the second algorithm (RegLand-Sp), we used the sparse learning algorithm of [10] on the landmarked space to learn the best predictor for a given sparsity level. Due to its simplicity and good convergence properties, we implemented the Fully Corrective version of the Forward Greedy Selection algorithm with squared loss as the surrogate.\nWe evaluated all methods using Mean Squared Error (MSE) on the test set. Figure 1a shows the MSE incurred by our methods along with reference values of accuracies obtained by KR as landmark sizes increase. The plots clearly show that our methods incur significantly lesser error than KR. Moreover, RegLand-Sp learns more accurate predictors using the same number of landmarks. For instance, when learning using the Sigmoid kernel on the CPUData dataset, at 20 landmarks, RegLand is able to guarantee an MSE of 0.016 whereas RegLand-Sp offers an MSE of less than 0.02 ; MLKR is only able to guarantee an MSE rate of 0.04 for this dataset. In Table 1a, we compare accuracies of the two algorithms when given 50 landmark points with those of KR for the Sigmoid and Manhattan kernels. We find that in all cases, RegLand-Sp gives superior accuracies than KR. Moreover, the Manhattan kernel seems to match or outperform the Sigmoid kernel on all the datasets.\nOrdinal Regression: Here, we compare our method with the baseline KR method on benchmark datasets. As mentioned in Section 3.3, our method uses the EXC formulation of [16] along with landmarking scheme given in Algorithm 1. We implemented a gradient descent-based solver (ORLand) to solve the primal formulation of EXC and used fixed equi-spaced thresholds instead of learning them as suggested by [16]. Of the six datasets considered here, the two Wine datasets are ordinal regression datasets where the quality of the wine is to be predicted on a scale from 1 to 10. The remaining four datasets are regression datasets whose labels were subjected to equi-frequency binning to obtain ordinal regression datasets [16]. We measured the average absolute error (AAE) for each method. Figure 1b compares ORLand with KR as the number of landmarks increases. Table 1b compares accuracies of ORLand for 50 landmark points with those of KR for Sigmoid and Manhattan kernels. In almost all cases, ORLand gives a much better performance than KR. The Sigmoid kernel seems to outperform the Manhattan kernel on a couple of datasets.\nWe refer the reader to Appendix G for additional experimental results."}, {"heading": "5 Conclusion", "text": "In this work we considered the general problem of supervised learning using non-PSD similarity functions. We provided a goodness criterion for similarity functions w.r.t. various learning tasks. This allowed us to construct efficient learning algorithms with provable generalization error bounds. At the same time, we were able to show, for each learning task, that our criterion is not too restrictive in that it admits all good PSD kernels. We then focused on the problem of identifying influential landmarks with the aim of learning sparse predictors. We presented a model that formalized the intuition that typically only a small fraction of landmarks is influential for a given learning problem. We adapted existing sparse vector recovery algorithms within our model to learn provably sparse predictors with bounded generalization error. Finally, we empirically evaluated our learning algorithms on benchmark regression and ordinal regression tasks. In all cases, our learning methods, especially the sparse recovery algorithm, consistently outperformed the kernel regression baseline.\nAn interesting direction for future research would be learning good similarity functions a\u0301 la metric learning or kernel learning. It would also be interesting to conduct large scale experiments on realworld data such as social networks that naturally capture the notion of similarity amongst nodes."}, {"heading": "Acknowledgments", "text": "P. K. is supported by a Microsoft Research India Ph.D. fellowship award. Part of this work was done while P. K. was an intern at Microsoft Research Labs India, Bangalore."}, {"heading": "Appendix A Proofs of supplementary theorems", "text": "In this section we give proofs for certain generic results that would be used in the utility and admissibility proofs. The first result, given as Lemma 15, allows us to analyze the landmarking step (Step 1 of Algorithm 1) and allows us to reduce the learning problem to that of learning a linear predictor over the landmarked space. The second result, given as Lemma 16, gives us a succinct re-statement of generalization error bounds proven in [13] that would be used in proving utility bounds. The third result, given as Lemma 17, is a technical result that helps us prove admissibility bounds for our goodness definitions. Lemma 15 (Landmarking approximation guarantee [8]). Given a similarity function K over a domainX and a bounded function of the form f(x) = E\nx\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K for some bounded weight\nfunction w : X \u2192 {\u2212B,B}, for every , \u03b4 > 0 there exists a randomized map \u03a8 : X \u2192 Rd for d = d ( , \u03b4) such that with probability at least 1 \u2212 \u03b4, there exists a linear operator f\u0303 over Rd such that E\nx\u223cD r\u2223\u2223\u2223f\u0303 (\u03a8 (x))\u2212 f(x)\u2223\u2223\u2223z \u2264 . Proof. This result essentially allows us to project the learning problem into a Euclidean space where one can show, for the various learning problems considered here, that existing large margin techniques are applicable to solve the original problem. The result appeared in [8] and is presented here for completeness.\nSample d landmark points L = {x1, . . . ,xd} from D and construct the map \u03a8L : x 7\u2192 1\u221a d\n(K(x,x1), . . . ,K(x,xd)) and consider the linear operator f\u0303 over Rd defined as follows (in the following, we shall always omit the subscript L for clarity):\nf\u0303 : x 7\u2192 1 d d\u2211 i=1 w(xi)K(x,xi) = \u3008w\u0303,\u03a8(x)\u3009\nfor w = 1\u221a d (w(x1), . . . , w(xd)) \u2208 Rd. A standard Hoeffding-style argument shows that for d = O ( B2\n2 log 1 \u03b42\n) = O ( B2\n2 log 1 \u03b4\n) , f\u0303 gives a point wise approximation to f , i.e. for all x \u2208 X , with\nprobability greater than 1\u2212 \u03b42, we have \u2223\u2223\u2223f\u0303(\u03a8(x))\u2212 f(x)\u2223\u2223\u2223 < .\nNow call the event BAD-APPROX (x) := \u2223\u2223\u2223f\u0303(\u03a8(x))\u2212 f(x)\u2223\u2223\u2223 > . Thus we have for all x \u2208 X ,\nP\u0303 f [BAD-APPROX (x)] = E\u0303 f\nq 1BAD-APPROX(x) y < \u03b42 (here the probabilities are being taken over\nthe construction of f\u0303 i.e. the choice of the landmark points). Taking expectations over the entire domain, applying Fubini\u2019s theorem to switch expectations and applying Markov\u2019s inequality we get\nP\u0303 f\n[ P\nx\u223cD [BAD-APPROX (x)] > \u03b4\n] < \u03b4\nThus with confidence 1 \u2212 \u03b4 we have P x\u223cD [BAD-APPROX (x)] < \u03b4 and thus\nE x\u223cD r\u2223\u2223\u2223f\u0303(\u03a8(x))\u2212 f(x)\u2223\u2223\u2223z < (1 \u2212 \u03b4) + 2B\u03b4 since sup x\u2208X \u2223\u2223\u2223f\u0303(\u03a8(x))\u2223\u2223\u2223 = sup x\u2208X |f(x)| = B. For\n\u03b4 < B we get Ex\u223cD r\u2223\u2223\u2223f\u0303(\u03a8(x))\u2212 f(x)\u2223\u2223\u2223z < 2 . Lemma 16 (Risk bounds for linear predictors [13]). Consider a real-valued prediction problem y over a domain X = {x : \u2016x\u20162 \u2264 CX} and a linear learning model F : {x 7\u2192 \u3008w,x\u3009 : \u2016w\u20162 \u2264 CW } under some fixed loss function ` (\u00b7, \u00b7) that is CL-Lipschitz in its second argument. For any f \u2208 F , let Lf = E\nx\u223cD J`(f(x), y(x))K and L\u0302nf be the empirical loss on a set\nof n i.i.d. chosen points. Then we have, with probability greater than (1\u2212 \u03b4),\nsup f\u2208F\n( Lf \u2212 L\u0302nf ) \u2264 3CLCXCW \u221a log(1/\u03b4)\nn\nProof. There exist a few results that provide a unified analysis for the generalization properties of linear predictors [13, 22]. However we use the heavy hammer of Rademacher average based analysis since it provides sharper bounds than covering number based analyses.\nThe result follows from imposing a squared L2 regularization on the w vectors. Since the squared L2 function is 2-strongly convex with respect to the L2 norm, using [13, Theorem 1], we get a bound on the Rademacher complexity of the function class F as Rn (F) \u2264 CXCW \u221a 1 n . Next, using the Lipschitz properties of the loss function, a result from [23] allows us to bound the excess error by\n2CLRn(F) + CLCXCW \u221a log(1/\u03b4) 2n . The result then follows from simple manipulations.\nLemma 17 (Admissible weight functions for PSD kernels [9]). Consider a PSD kernel that is ( 0, \u03b3)-good for a learning problem with respect to some convex loss function `K . Then there exists a vector W\u2032 \u2208 HK and a bounded weight function w : X \u2192 R such that E\nx\u223cD J`K (\u3008W\u2032,\u03a6K(x)\u3009 , y(x))K \u2264 0 + 12C\u03b32 for some arbitrary positive constant C and for all x \u2208 X , we have E x\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K = \u3008W\u2032,\u03a6K(x)\u3009.\nProof. Note that the ( 0, \u03b3)-goodness of K guarantees the existence of a weight vector W\u2217 \u2208 HK with small loss at large margin. Thus W\u2032 acts as a proxy for W\u2217 providing bounded loss at unit margin but with the additional property of being functionally equivalent to a bounded weighted average of the kernel values as required by the definition of a good similarity function. This will help us prove admissibility results for our similarity learning models.\nWe start by proving the theorem for a discrete distribution - the generalization to non-discrete distributions will follow by using variational optimization techniques as discussed in [9]. Consider a discrete learning problem with X = {x1, . . . ,xn}, corresponding distribution D = {p1, . . . , pn} and target y = {y1, . . . , yn} such that \u2211 pi = 1. Set up the following regularized ERM problem (albeit on the entire domain):\nmin W\u2208HK\n1 2 \u2016W\u20162HK + C n\u2211 i=1 pi`K (\u3008W,\u03a6K(xi)\u3009 , yi)\nLet W\u2032 be the weight vector corresponding to the optima of the above problem. By the Representer Theorem (for example [24]), we can choose W\u2032 = \u2211 \u03b1i\u03a6K(xi) for some bounded \u03b1i (the exact\nbounds on \u03b1i are problem specific). By ( 0, \u03b3)-goodness of K we have\n1 2 \u2016W\u2032\u20162HK + C n\u2211 i=1 pi`K (\u3008W\u2032,\u03a6K(xi)\u3009 , yi) \u2264 1 2 \u2225\u2225\u2225\u2225 1\u03b3W\u2217 \u2225\u2225\u2225\u22252 HK + C n\u2211 i=1 pi`K ( \u3008W\u2217,\u03a6K(xi)\u3009 \u03b3 , yi ) = 1\n2\u03b32 + C \u00b7 E x\u223cD\ns `K\n( \u3008W\u2217,\u03a6K(x)\u3009\n\u03b3 , y(x) ){ \u2264 1\n2\u03b32 + C 0\nThus we have\nE x\u223cD\nJ`K (\u3008W\u2032,\u03a6K(x)\u3009 , y(x))K \u2264 1\n2C \u2016W\u2032\u20162HK + n\u2211 i=1 pi`K (\u3008W\u2032,\u03a6K(xi)\u3009 , yi)\n\u2264 0 + 1\n2C\u03b32\nwhich proves the first part of the claim. For the second part, set up a weight function wi = \u03b1ipi . Then, for any x \u2208 X we have\nE x\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K = n\u2211 i=1 piwiK(x,xi) = n\u2211 i=1 pi \u03b1i pi K(x,xi)\n= n\u2211 i=1 \u03b1i \u3008\u03a6K(x),\u03a6K(xi)\u3009 = \u3008W\u2032,\u03a6K(x)\u3009\nThe weight function is bounded since the \u03b1i are bounded and, this being a discrete learning problem, cannot have vanishing probability masses pi (actually, in the cases we shall consider, the \u03b1i will itself contain a pi term that will subsequently get cancelled). For non-discrete cases, variational techniques give us similar results."}, {"heading": "Appendix B Justifying Double-dipping", "text": "All our analyses (as well as the analyses presented in [6, 7, 8]) use some data as landmark points and then require a fresh batch of training points to learn a classifier on the landmarked space. In practice, however, it might be useful to reuse training data to act as landmark points as well. This is especially true of [7, 8] who require labeled landmarks. We give below, generalization bounds for similarity-based learning algorithms that indulge in such \u201cdouble dipping\u201d. The argument uses a technique outlined in [11] and falls within the Rademacher-average based uniform convergence guarantees used elsewhere in the paper. We present a generic argument that, in a manner similar to Lemma 16, can be specialized to the various learning problems considered in this paper.\nTo make the presentation easier we set up some notation. For any predictor f , let Lf = E\nx\u223cD J`(f(x), y(x))K and for any training set S of size n, let L\u0302Sf = 1n \u2211 xi\u2208S `(f(xi), y(xi)). For any landmark set S = (x1, . . . ,xn), we let \u03a8S : x 7\u2192 (K(x,x1), . . . ,K(x,xn)). For any weight vector w \u2208 Rn, \u2016w\u2016\u221e \u2264 B in the landmarked space, denote the predictor\nf(S,w) := 1 n \u3008w,\u03a8S(x)\u3009 = x 7\u2192 1 n n\u2211 i=1 wiK(x,xi). Also let FS := { x 7\u2192 1n \u3008w,\u03a8S(x)\u3009 } ={\nf(S,w) : w \u2208 Rn, \u2016w\u2016\u221e \u2264 B } .\nWe note that the embedding defined above is \u201cstable\u201d in the sense that changing a single landmark does not change the embedding too much with respect to bounded predictors. More formally, for any set of n points S = (x1, . . . ,xn), define g(S) := sup\nf\u2208FS\n{ Lf \u2212 L\u0302Sf } . Let Si be another set of n\npoints that (arbitrarily) differs from S just at the ith point and coincides with S on the rest. Then we have, for any fixed w of bounded L\u221e norm (i.e. \u2016w\u2016\u221e \u2264 B) and bounded similarity function (i.e.\nK(x,y) \u2264 1),\nsup x {\u2223\u2223f(S,w)(x)\u2212 f(Si,w)(x)\u2223\u2223} = sup x  \u2223\u2223\u2223\u2223\u2223\u2223 1n n\u2211 j=1 wjK(x,xj)\u2212 1 n n\u2211 i=1 wjK(x,x \u2032 j) \u2223\u2223\u2223\u2223\u2223\u2223 \n= sup x {\u2223\u2223\u2223\u2223 1nwi (K(x,xi)\u2212K(x,x\u2032i)) \u2223\u2223\u2223\u2223}\n\u2264 2B n\nNote that, although [8] uses pairs of labeled points to define the embedding, the following argument can easily be extended to incorporate this since the embedding is identical to the embedding \u03a8S described above with respect to being \u201cstable\u201d. In fact this analysis holds for any stable embedding defined using training points.\nOur argument proceeds by showing that with high probability (over choice of the set S) we have\nsup w\n{ Lf(S,w) \u2212 L\u0302 S f(S,w) } \u2264\nBy the definition of FS , the above requirement translates to showing that with high probability,\nsup f\u2208FS\n{ Lf \u2212 L\u0302Sf } \u2264\nwhich highlights the fact that we are dealing with a problem of sample dependent hypothesis spaces1. Note that this exactly captures the double dipping procedure of reusing training points as landmark points. Such a result would be useful as follows: using Lemma 15 and task specific guarantees (outlined in detail in the subsequent sections), we have, with high probability, the existence of a good predictor in the landmarked space of a randomly chosen landmark set S i.e. with very high probability over choice of S, we have inf\nf\u2208FS {Lf} \u2264 0. Let this be achieved by the predictor f\u2217.\nUsing the uniform convergence guarantee above we get L\u0302Sf\u2217 \u2264 0 + (with some loss of confidence due to application of a union bound).\nNow consider the predictor f\u0302 := inf f\u2208FS\n{ L\u0302Sf } . Clearly L\u0302S f\u0302 \u2264 L\u0302Sf\u2217 \u2264 0 + . Invoking the uniform\nconvergence bound yet again shows us that\nLf\u0302 \u2264 L\u0302 S f\u0302\n+ sup f\u2208FS\n{ Lf \u2212 L\u0302Sf } \u2264 0 + 2\nNote that we incur some more loss of confidence due to another application of the union bound. This tells us that with high probability, a predictor learned by choosing a random landmark set and training on the landmark set itself would yield a good predictor.\nWe will proceed via a vanilla uniform convergence argument involving symmetrization and an application of the McDiarmid\u2019s inequality (stated below). However, proving the stability prerequisite for the application of the McDiarmid\u2019s inequality shall require use of the stability of both the predictor f(S,w) as well as the embedding \u03a8S . Let the loss function ` be CL-Lipschitz in its first argument. Theorem 18 (McDiarmid\u2019s inequality [25]). Let X1, . . . , Xn be independent random variables taking values in some set X . Further, let f : Xn \u2192 R be a function of n variables that satisfies, for all i \u2208 [n] and all x1, . . . , xn, x\u2032i \u2208 X ,\n|f (x1, . . . , xi, . . . , xn)\u2212 f (x1, . . . , x\u2032i, . . . , xn)| \u2264 ci then for all > 0, we have\nP [f \u2212 E JfK > ] \u2264 exp ( \u22122 2\u2211n i=1 c 2 i ) 1We were not able to find any written manuscript detailing the argument of [11]. However the argument itself is fairly generic in allowing one to prove generalization bounds for sample dependent hypothesis spaces.\nWe shall invoke the McDiarmid\u2019s inequality on the function g(S) := sup f\u2208FS\n{ Lf \u2212 L\u0302Sf } with S =\n(x1, . . . ,xn) being the random variables in question. To do so we first prove the stability of the function g(S) with respect to its variables and then bound the value of E\nS Jg(S)K. Theorem 19. For any S, Si, we have \u2223\u2223g(S)\u2212 g(Si)\u2223\u2223 \u2264 6BCLn .\nProof. We have\ng(S) = sup f\u2208FS\n{ Lf \u2212 L\u0302Sf } = sup\nf\u2208FS\n{ Lf \u2212 L\u0302Sf \u2212 L\u0302S i f + L\u0302S i f } \u2264 sup\nf\u2208FS\n{ Lf \u2212 L\u0302S i\nf } + sup f\u2208FS { L\u0302Sf \u2212 L\u0302S i f } \u2264 sup\nf\u2208FS\n{ Lf \u2212 L\u0302S i\nf\n} +\n2BCL n\nwhere in the fourth step we have used the fact that the loss function is Lipschitz and the embedding function \u03a8S is bounded. We also have\nsup f\u2208FS\n{ Lf \u2212 L\u0302S i\nf\n} = sup\nw\n{ Lf(S,w) \u2212 L\u0302 Si\nf(S,w) } = sup\nw\n{ Lf(S,w) \u2212 Lf(Si,w) + Lf(Si,w) \u2212 L\u0302 Si f(Si,w) + L\u0302S i f(Si,w) \u2212 L\u0302S i f(S,w) } \u2264 sup\nw\n{ Lf(Si,w) \u2212 L\u0302 Si f(Si,w) } + sup\nw\n{ Lf(S,w) \u2212 Lf(Si,w) } +sup\nw\n{ L\u0302S i\nf(Si,w) \u2212 L\u0302S\ni\nf(S,w) } \u2264 sup\nw\n{ Lf(Si,w) \u2212 L\u0302 Si f(Si,w) } + 2BCL n + 2BCL n\n= sup f\u2208FSi\n{ Lf \u2212 L\u0302S i\nf\n} +\n4BCL n\n= g(Si) + 4BCL n\nwhere in the fourth step we have used the stability of the embedding function and that the loss function is CL-Lipschitz in its first argument so that for all x we have\u2223\u2223` (f(S,w)(x), y(x))\u2212 ` (f(Si,w)(x), y(x))\u2223\u2223 \u2264 2BCLn which holds in expectation over any (empirical) distribution as well. Putting the two inequalities together gives us g(S) \u2264 g(Si) + 6BCL\nn .\nSimilarly we also have g(Si) \u2264 g(S) + 6BCL n which gives us the result. We now have that the function g(S) is O ( 1\nn\n) -stable with respect to each of its inputs. We now\nmove on to bound its expectation. For any function class F we define its empirical Rademacher average as follows\nR\u0302n(F) := E \u03c3 t sup f\u2208F\n{ 1\nn \u2211 xi\u2208S \u03c3if(xi) }\u2223\u2223\u2223\u2223\u2223S |\nAlso let F := {x 7\u2192 \u3008w,x\u3009 : \u2016w\u20162 \u2264 B} and X := {x : \u2016x\u20162 \u2264 1}.\nTheorem 20. E S t sup f\u2208FS { Lf \u2212 L\u0302Sf }| \u2264 2BCL \u221a 1 n\nProof. We have\nE S t sup f\u2208FS { Lf \u2212 L\u0302Sf }| = E S t sup f\u2208FS { E S\u2032 r L\u0302S \u2032 f z \u2212 L\u0302Sf }|\n\u2264 E S,S\u2032 t sup f\u2208FS { L\u0302S \u2032 f \u2212 L\u0302Sf }|\n\u2264 E S,S\u2032\nt sup\nf\u2208FS\u222aS\u2032\n{ L\u0302S \u2032 f \u2212 L\u0302Sf }|\n= E S,S\u2032,\u03c3 u v sup f\u2208FS\u222aS\u2032  1n \u2211 xi\u2208S,x\u2032i\u2208S\u2032 \u03c3i (`(f(x \u2032 i), y(x \u2032 i))\u2212 `(f(xi), y(xi)))  } ~\n\u2264 2 E S,S\u2032,\u03c3\nt sup\nf\u2208FS\u222aS\u2032\n{ 1\nn \u2211 xi\u2208S \u03c3i`(f(xi), y(xi))\n}|\n= 2 E S,S\u2032,\u03c3 t sup w\n{ 1\nn \u2211 xi\u2208S \u03c3i`(f(S\u222aS\u2032,w)(xi), y(xi))\n}|\n\u2264 2 E S,S\u2032,\u03c3 t sup f\u2208F\n{ 1\nn \u2211 xi\u2208S \u03c3i`(f(xi), y(xi))\n}|\n= 2 E S\nr R\u0302n(` \u25e6 F) z \u2264 2CL E\nS\nr R\u0302n(F) z \u2264 2BCL\n\u221a 1\nn\nwhere in the third step we have used the fact that FS \u2287 FS\u2032 if S \u2287 S\u2032 (this is the monotonicity requirement in [11]). Note that this is essential to introduce symmetry so that Rademacher variables can be introduced in the next (symmetrization) step. In the seventh step, we have used the fact that for every S such that |S| = n and w \u2208 Rn such that \u2016w\u2016\u221e \u2264 B, there exists a function f \u2208 F such that for all x, there exists a x\u2032 \u2208 X such that f(S,w)(x) = f(x\u2032). In the last step we have used a result from [26] which allows calculation of Rademacher averages for composition classes and an intermediate result from the proof of Lemma 16 which gives us Rademacher averages for the function class F .\nThus, by an application of McDiarmid\u2019s inequality we have, with probability (1\u2212 \u03b4) over choice of the landmark (training) set,\nsup f\u2208FS\n{ Lf \u2212 L\u0302Sf } \u2264 E t sup f\u2208FS { Lf \u2212 L\u0302Sf }| + 6BCL \u221a log 1/\u03b4 2n \u2264 4BCL \u221a log 1/\u03b4 n\nwhich concludes our argument justifying double dipping."}, {"heading": "Appendix C Regression with Similarity Functions", "text": "In this section we give proofs of utility and admissibility results for our similarity based learning model for real-valued regression tasks.\nC.1 Proof of Theorem 5\nFirst of all, we use Lemma 15 to project onto a d dimensional space where there exists a linear predictor f\u0303 : x 7\u2192 \u3008w,x\u3009 such that E\nx\u223cD r\u2223\u2223\u2223f\u0303 (\u03a8 (x))\u2212 f(x)\u2223\u2223\u2223z \u2264 2 1. Note that \u2016w\u20162 \u2264 B and sup x\u2208X {\u2016\u03a8(x)\u2016} \u2264 1 by construction. We will now show that f\u0303 has bounded -insensitive loss.\nE x\u223cD\nr ` ( f\u0303 (\u03a8 (x)) , y(x) )z = E\nx\u223cD J` (f(x), y(x))K + E x\u223cD\nr ` ( f\u0303 (\u03a8 (x)) , y(x) ) \u2212 ` (f(x), y(x)) z\n\u2264 0 + E x\u223cD\nr ` ( f\u0303 (\u03a8 (x)) , y(x) ) \u2212 ` (f(x), y(x)) z\n\u2264 0 + E x\u223cD r\u2223\u2223\u2223f\u0303 (\u03a8(x))\u2212 f(x)\u2223\u2223\u2223z \u2264 0 + 2 1\nwhere in the second step we have used the goodness properties of K, in the third step we used the fact that the -insensitive loss function is 1-Lipschitz in its first argument. Note that \u2016w\u2016 \u2248 E x\u223cD q w2(x) y with high probability and if E x\u223cD q w2(x) y B then we get a much better bound on the norm of w. The excess loss incurred due to this landmarking step is, with probability 1 \u2212 \u03b4, at most 32B \u221a log(1/\u03b4)\nd .\nNow consider the following regularized ERM problem on n i.i.d. sample points:\nw\u0302 = arg min w:\u2016w\u20162\u2264B\n1\nn n\u2211 i=1 ` (\u3008w,\u03a8(xi)\u3009 , y(xi))\nThe final output of our learning algorithm shall be x 7\u2192 \u3008w\u0302,\u03a8(x)\u3009. Here we have CX = 1, CL = 1 since ` (\u00b7) is 1-Lipschitz and CW = B. Thus by Lemma 16, we get that the excess loss incurred due to this regularized ERM step is at most 3B \u221a log 1/\u03b4 n .\nSince the -insensitive loss is related to the absolute error by |x| \u2264 ` (x) + we have the total error (with respect to absolute loss) being incurred by our predictor to be, with probability at least 1\u2212 2\u03b4, at most\n0 + 32B\n\u221a log(1/\u03b4)\nd + 3B\n\u221a log 1/\u03b4\nn +\nTaking d = O ( B2\n21 log 1\u03b4\n) unlabeled landmarks and n = O ( B2\n21 log 1\u03b4\n) labeled training points\ngives us our desired result.\nC.2 Proof of Theorem 6\nWe prove the two parts of the result separately. Part 1: Admissibility: Using Lemma 17 it is possible to obtain a vector W\u2032 = n\u2211 i=1 (\u03b1i \u2212 \u03b1\u2217i )\u03a6K(xi) \u2208 HK with small loss such that 0 \u2264 \u03b1i, \u03b1\u2217i \u2264 piC and \u03b1i\u03b1\u2217i = 0 (these inequalities are a consequence of applying the KKT conditions). This allows us to construct as weight function wi = \u03b1i\u2212\u03b1\u2217i pi such that |wi| \u2264 C and E x\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K = \u3008W\u2032,\u03a6K(x)\u3009 for all x \u2208 X .\nThus we have E x\u223cD\nr ` ( E\nx\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K , y(x)\n)z = E\nx\u223cD J` (\u3008W\u2032,\u03a6K(x)\u3009 , y(x))K \u2264\n1 2C\u03b32 + 0. Setting C = 1 2 1\u03b32 gives us our result.\nWe can use variational techniques to extend this to non-discrete distributions as well.\nPart 2: Tightness: The tight example that we provide is an adaptation of the example given for large margin classification in [9]. However, our analysis differs from that of [9], partly necessitated by our choice of loss function.\nConsider the following regression problem: X = {x1,x2,x3,x4} \u2282 R3, D = { 1 2 \u2212 , , , 1 2 \u2212 } , y = {+1,+1,\u22121,\u22121}\nx1 = ( \u03b3, \u03b3, \u221a 1\u2212 2\u03b32 ) x2 = ( \u03b3,\u2212\u03b3, \u221a 1\u2212 2\u03b32\n) x3 = ( \u2212\u03b3, \u03b3, \u221a 1\u2212 2\u03b32\n) x4 = ( \u2212\u03b3,\u2212\u03b3, \u221a 1\u2212 2\u03b32\n) Clearly the vector w = (1, 0, 0) yields a predictor y\u2032 with no -insensitive loss for = 0 (i.e. E\nx\u223cD J`0 (y(x)\u2212 y\u2032(x))K = 0) at margin \u03b3. Thus the native inner product \u3008\u00b7, \u00b7\u3009 on R3 is a (0, \u03b3)good kernel for this particular regression problem.\nNow consider any bounded weighing function on X , w = {w1, w2, w3, w4} and analyze the effectiveness of \u3008\u00b7, \u00b7\u3009 as a similarity function. The output y\u0303 of the resulting predictor on the different\npoints is given by y\u0303i = 4\u2211 j=1 pjwj \u3008xi,xj\u3009.\nIn particular, consider the output on the heavy points x1 and x4 (note that the analysis in [9] considers the light points x2 and x3 instead). We have\ny\u03031 =\n( 1 2 \u2212 ) w1 + ( 1\u2212 2\u03b32 ) (w2 + w3) + ( 1 2 \u2212 ) w4 ( 1\u2212 4\u03b32 ) = a+ ( 1 2 \u2212 ) (w1 + bw4)\ny\u03034 =\n( 1 2 \u2212 ) w1 ( 1\u2212 4\u03b32 ) + ( 1\u2212 2\u03b32 ) (w2 + w3) + ( 1 2 \u2212 ) w4 = a+ ( 1 2 \u2212 ) (bw1 + w4)\nfor a = ( 1\u2212 2\u03b32 ) (w2 + w3) , b = ( 1\u2212 4\u03b32 ) . The main idea behind this choice is that the difference in the value of the predictor on these points is only due to the values of w1 and w4. Since the true values at these points are very different, this should force w1 and w4 to take large values unless a large error is incurred. To formalize this argument we lower bound the expected `0 (\u00b7) loss of this predictor by the loss incurred on these heavy points.\nE x\u223cD\nJ`0 (y(x)\u2212 y\u0303(x))K \u2265 ( 1 2 \u2212 ) (`0 (y(x1)\u2212 y\u0303(x1)) + `0 (y(x4)\u2212 y\u0303(x4)))\n=\n( 1 2 \u2212 ) (|1\u2212 y\u0303(x1)|+ |\u22121\u2212 y\u0303(x4)|)\n\u2265 ( 1 2 \u2212 ) (2\u2212 y\u0303(x1) + y\u0303(x4))\n=\n( 1 2 \u2212 )( 2\u2212 ( 1 2 \u2212 ) (1\u2212 b) (w4 \u2212 w1) )\n=\n( 1 2 \u2212 )( 2\u2212 ( 1 2 \u2212 )( 4\u03b32 ) (w4 \u2212 w1) )\nwhere in the second step we use the fact that `0 (x) = |x| and in the third step we used the fact that |a|+ |b| \u2265 a\u2212 b. Thus, in order to have expected error at most 1, we require\nw4 \u2212 w1 \u2265 1\n4\u03b32\n( 2\u2212 11\n2 \u2212\n) 1\n1 2 \u2212\n= 1\n4 1\u03b32\nfor the setting = 12 \u2212 1. Thus we have |w1| + |w4| \u2265 w4 \u2212 w1 \u2265 1 4 1\u03b32 which implies max (|w1| , |w4|) \u2265 18 1\u03b32 which proves the result."}, {"heading": "Appendix D Sparse Regression with Similarity functions", "text": "Our utility proof proceeds in three steps. In the first step we project our learning problem, via the landmarking step given in Step 1 of Algorithm 1, to a linear landmarked space and show that the\nAlgorithm 2 Sparse regression [10] Input: A \u03b2-smooth loss function `(\u00b7, \u00b7), regularization parameter CW used in Equation 2, error tolerance Output: A sparse predictor w\u0302 with bounded loss\n1: k \u2190 \u2308 8C2W 2 \u2309 , w(0) = 0\n2: for t = 1 to k do 3: \u03b8(t) \u2190 \u2207wR(w(t)) = E\nx\u223cD\nr \u2202 \u2202w ` (\u2329 w(t),x \u232a , y(x) )z 4: rt = arg max\nj\u2208d \u2223\u2223\u2223\u03b8(t)j \u2223\u2223\u2223 5: \u03b4t = \u2329 \u03b8(t),w(t) \u232a + CW \u2225\u2225\u2225\u03b8(t)\u2225\u2225\u2225 \u221e\n6: \u03b7t = min {\n1, \u03b4t 4C2 W \u03b2 } 7: w(t+1) \u2190 (1\u2212 \u03b7t)w(t) + \u03b7tsign ( \u2212\u03b8(t)rt ) CW e rt 8: if \u03b4t \u2264 then 9: return w(t)\n10: end if 11: end for 12: return w(k)\nlandmarked space admits a sparse linear predictor with bounded -insensitive loss. This is formalized in Theorem 8 which we restate for convenience.\nTheorem 21 (Theorem 8 restated). Given a similarity function that is ( 0, B, \u03c4)-good for a regression problem, there exists a randomized map \u03a8 : X \u2192 Rd for d = O ( B2\n\u03c4 21 log 1\u03b4\n) such that\nwith probability at least 1 \u2212 \u03b4, there exists a linear operator f\u0303 : x 7\u2192 \u3008w,x\u3009 over Rd such that \u2016w\u20161 \u2264 B with -insensitive loss bounded by 0 + 1. Moreover, with the same confidence we have \u2016w\u20160 \u2264 3d\u03c4 2 .\nProof. The proof of this theorem essentially parallels that of [15, Theorem 8] but diverges later since the aim there is to preserve margin violations whereas we wish to preserve loss under the absolute loss function. Sample d landmark points L = {x1, . . . ,xd} from the distribution D and construct the map \u03a8L : x 7\u2192 (K(x,x1), . . . ,K(x,xd)) and consider the linear operator f\u0303 : x 7\u2192 \u3008w,x\u3009\nwith wi = w(xi)R(xi)\ndinfo where dinfo = d\u2211 i=1 R(xi) is the number of informative landmarks. In the\nfollowing we will refer to f\u0303 and w interchangeably. This ensures that \u2225\u2225\u2225f\u0303\u2225\u2225\u2225\n1 := \u2016w\u20161 \u2264 B. Note\nthat we have chosen an L1 normalized weight vector instead of an L2 normalized one like we had in Lemma 15. This is due to a subsequent use of sparsity promoting regularizers whose analysis requires the existence of bounded L1 norm predictors.\nUsing the arguments given for Lemma 15 and Theorem 5, we can show that if dinfo = \u2126 ( B2\n21 log 1\u03b4 ) (i.e. if we have collected enough informative landmarks), then we are done. However, the Chernoff bound (lower tail) tells us that for d = \u2126 ( B2\n\u03c4 21 log 1\u03b4\n) , this will happen with probability 1 \u2212 \u03b4.\nMoreover, the Chernoff bound (upper tail) tells us that, simultaneously we will also have dinf \u2264 3d\u03c42 . Together these prove the claim.\nNote that the number of informative landmarks required is, up to constant factors, the same as the number required in Theorem 5. However, we see that in order to get these many informative landmarks, we have to sample a much larger number number of landmarks. In the following, we shall see how to extract a sparse predictor in the landmarked space with good generalization properties. The following analysis shall assume the the existence of a good predictor on the landmarked space and hence all subsequent results shall be conditioned on the guarantees given by Theorem 8.\nD.1 Learning sparse predictors in the landmarked space\nWe use the Forward Greedy Selection algorithm presented in [10] to extract a sparse predictor in the landmarked space. The algorithm is presented in pseudo code form in Algorithm 2. The algorithm can be seen as a (modified) form of orthogonal matching pursuit wherein at each step we add a coordinate to the support of the weight vector. The coordinate is added in a greedy manner so as to provide maximum incremental benefit in terms of lowering the loss. Thus the sparsity of the resulting predictor is bounded by the number of steps for which this algorithm is allowed to run. The algorithm requires that it be used with a smooth loss function. A loss function ` : R\u00d7R\u2192 R+ is said to be \u03b2-smooth if, for all y, a, b \u2208 R, we have\n`(a, y)\u2212 `(b, y) \u2264 \u2202 \u2202x `(x, y) \u2223\u2223\u2223\u2223 x=b (a\u2212 b) + \u03b2(a\u2212 b) 2 2\nUnfortunately, this excludes the -insensitive loss. However it is possible to run the algorithm with a smooth surrogate whose loss can be transferred to -insensitive loss. Following [10], we choose the following loss function:\n\u02dc\u0300 \u03b2(a, b) = inf\nv\u2208R\n[ \u03b2\n2 v2 + ` (a\u2212 v, b) ] One can, by a mildly tedious case-by-case analysis, arrive at an explicit form for this loss function\n\u02dc\u0300 \u03b2(a, b) =  0 |a\u2212 b| \u2264 \u03b2 2 (|a\u2212 b| \u2212 ) 2 < |a\u2212 b| < + 1\u03b2\n|a\u2212 b| \u2212 \u2212 12\u03b2 |a\u2212 b| \u2265 + 1 \u03b2\nNote that this loss function is convex as well as differentiable (actually \u03b2-smooth) which will be crucial in the following analysis. Moreover, for any a, b we have\n0 \u2264 ` (a, b)\u2212 \u02dc\u0300\u03b2(a, b) \u2264 1\n2\u03b2 (1)\nAnalysis of Forward Greedy Selection: We need to setup some notation before we can describe the guarantees given for the predictor learned using the Forward Greedy Selection algorithm. Consider a domain X \u2282 Rd for some d > 0 and the class of functions F = {x 7\u2192 \u3008w,x\u3009 : \u2016w\u20161 \u2264 CW }. For any distribution D on X and any predictor from F , define RD(w) := E\nx\u223cD J` (\u3008w,x\u3009 , y(x))K\nand R\u0303D(w) := E x\u223cD\nr \u02dc\u0300 \u03b2(\u3008w,x\u3009 , y(x)) z . Also let w\u0304 be the minimizer of the following program\nw\u0304 = arg min w:\u2016w\u20161\u2264CW\nR\u0303D(w) (2)\nThen [10, Theorem 2.4], when specialized to our case, guarantees that Algorithm 2, when executed with \u02dc\u0300\u03b2(\u00b7, \u00b7) as the loss function for \u03b2 = 1 2 , produces a k-sparse predictor x\u0302, for k = \u2308 8C2W 22 \u2309 , with \u2016w\u0302\u20161 \u2264 CW such that R\u0303D(w\u0302)\u2212 R\u0303D(w\u0304) \u2264 2\nThus, if we can show the existence of a good predictor in our space with bounded L1 norm then this would upper bound the loss incurred by the minimizer of Equation 2 and using [10, Theorem 2.4] we would be done. Note that Theorem 8 does indeed give us such a guarantee which allows us to make the following argument: we are guaranteed of the existence of a predictor f\u0303 with L1 norm bounded by B that has -insensitive loss bounded by ( 0 + 1). Thus if we take CW = B in Equation 2 and use the left inequality of Equation 1, we get R\u0303D(w\u0304) \u2264 0+ 1. Thus we have R\u0303D(w\u0302) \u2264 0+ 1+ 2. Using Equation 1 (right inequality) with \u03b2 = 1 2 , we getRD(w\u0302) \u2264 0 + 1 + 3 2/2.\nHowever it is not possible to give utility guarantees with bounded sample complexities using the above analysis, the reason being that Algorithm 2 requires us to calculate, for any given vector w, the vector \u2207wR\u0303(w) = E\nx\u223cD\nr \u2202 \u2202w \u02dc\u0300 \u03b2(\u3008w,x\u3009 , y(x)) z which is infeasible to calculate for a distribution\nwith infinite support since it requires unbounded sample complexities. To remedy we shall, as\nsuggested by [10], take D not to be the true distribution over the entire domain X , but rather the empirical distributionDemp = 1n n\u2211 i=1 1{x=xi} for a given sample of training points x1, . . . ,xn. Note that the result in [10] holds for any distribution which allows us to proceed as before.\nNotice however, that we are yet again faced with the challenge of proving an upper bound on the loss incurred by the minimizer of Equation 2. This we do as follows: the predictor f\u0303 defined in Theorem 8 has expected -insensitive loss over the entire domain bounded by 0 + 1. Hence it will, with probability greater than (1\u2212 \u03b4), have at most 0 + 1 +O ( B\u221a n ) loss on a random sample of n\npoints by an application of Hoeffding\u2019s inequality. Thus we have R\u0303Demp(w\u0304) \u2264 0 + 1 + O ( B\u221a n ) with high probability.\nThe main difference in this analysis shall be that the guarantee on w\u0302 we get will be on its training loss rather than its true loss, i.e. we will have RDemp(w\u0302) \u2264 0 + 1 + O ( B\u221a n ) + 2. However since Algorithm 2 guarantees \u2016w\u0302\u20161 \u2264 CW = B, we can still hope to bound its generalization error. More specifically, Lemma 22, given below, shows that with probability greater than (1\u2212 \u03b4) over the choice of training points we will have, for all w \u2208 Rd, RD(w)\u2212RDemp(w) \u2264 O\u0303 ( B\u221a n ) where the\nO\u0303 (\u00b7) notation hides certain log factors. Lemma 22 (Risk bounds for sparse linear predictors [13]). Consider a real-valued prediction problem y over a domain X = {x : \u2016x\u2016\u221e \u2264 CX} \u2282 Rd and a linear learning model F : {x 7\u2192 \u3008w,x\u3009 : \u2016w\u20160 \u2264 k, \u2016w\u20161 \u2264 CW } under some fixed loss function ` (\u00b7, \u00b7) that is CL-Lipschitz in its second argument. For any f \u2208 F , let Lf = E\nx\u223cD J`(f(x), y(x))K and L\u0302nf be the empirical loss\non a set of n i.i.d. chosen points, then we have, with probability greater than (1\u2212 \u03b4),\nsup f\u2208F\n( Lf \u2212 L\u0302nf ) \u2264 2CLCXCW \u221a 2 log(2d)\nn + CLCXCW\n\u221a log(1/\u03b4)\n2n\nProof. The result for non-sparse vectors, that applies here as well, follows in a straightforward manner from [13, Theorem 1, Example 3.1(2)] and [23] which we reproduce for completeness. Since the L1 and L\u221e norms are dual to each other, for any w \u2208 (R+)\nd such that \u2016w\u20161 = B and any \u00b5 \u2208 \u2206d, where \u2206d is the probability simplex in d dimensions, the Kullback-divergence function KL ( w B \u2225\u2225\u00b5) is 1B2 -strongly convex with respect to the L1 norm. We can remove the positivity constraints on the coordinates of w by using the standard method of introducing additional dimensions that encode negative components of the (signed) weight vector.\nUsing [13, Theorem 1], thus, we can bound the Rademacher complexity of the function class F as Rn (F) \u2264 CXCW \u221a 2 log 2d n . Next, using the Lipschitz properties of the loss function, a result from\n[23] allows us to bound the excess error by 2CLRn(F) + CLCXCW \u221a log(1/\u03b4) 2n . The result then follows.\nThus, by applying a union bound, with probability at least (1\u2212 2\u03b4), we will choose a training set such that f\u0303 , and consequently w\u0304, has bounded loss on that set as well as the uniform convergence guarantee of Lemma 22 will hold. Then we can bound the true loss of the predictor returned by Algorithm 2 as\nRD(w\u0302) \u2264 RDemp(w\u0302) + O\u0303 ( B\u221a n ) \u2264 0 + 1 + 2 + O\u0303 ( B\u221a n ) where the first inequality uses the uniform convergence guarantee and the second inequality holds conditional on f\u0303 having bounded loss on a given training set. The final guarantee is formally given in Theorem 9.\nNote that using Lemma 16 here would at best guarantee a decay of O (\u221a\nd n\n) . Transferring -\ninsensitive loss to absolute loss requires an addition of . Using all the results given above, we can now give a proof for Theorem 9 which we restate for convenience.\nTheorem 23 (Theorem 9 restated). Every similarity function that is ( 0, B, \u03c4)-good for a regression problem with respect to the insensitive loss function ` (\u00b7, \u00b7) is ( 0 + )-useful with respect to absolute loss as well; with the dimensionality of the landmarked space being bounded by O ( B2\n\u03c4 21 log 1\u03b4\n) and\nthe labeled sampled complexity being bounded by O ( B2\n21 log B 1\u03b4\n) . Moreover, this utility can be\nachieved by an O (\u03c4)-sparse predictor on the landmarked space.\nProof. Using Theorem 8, we first bound the excess loss due to landmarking by 32B \u221a\nlog(1/\u03c4\u03b4) d .\nNext we set up the (dummy) Ivanov regularized regression problem (given in Equation 2) with the training loss being the objective and regularization parameter CW = B. The training loss incurred by the minimizer of that problem winter is, with probability at least (1\u2212 \u03b4), bounded by L\u0302 (winter) \u2264 0 + 32B \u221a log(1/\u03b4) \u03c4d + B \u221a log(1/\u03b4)\nn due to the guarantees of Theorem 8. Next, we run the Forward Greedy Selection algorithm of [10] (specialized to our case in Algorithm 2) and obtain another predictor w\u0302 with L1 norm bounded by B that has empirical error at most L\u0302 (w\u0302) \u2264 L\u0302 (winter) + \u221a 18B2\nk . Finally, using Lemma 22, we bound the true -insensitive loss incurred by w\u0302 by L\u0302 (w\u0302) + 2B \u221a\n2 log(2d) n +B\n\u221a log(1/\u03b4)\n2n . Adding to convert this loss to absolute loss we get that with probability at most (1\u2212 3\u03b4), we will output a k-sparse predictor in a d-dimensional space with absolute regression loss at most\n0 + 32B\n\u221a log(1/\u03b4)\n\u03c4d +\n\u221a 18B2\nk + 2B\n\u221a 2 log(2d)\nn + 2B\n\u221a log(1/\u03b4)\n2n +\nWe note that Forward Greedy Selection gives O (\n1 k\n) error rates, which are much better, if the loss\nfunction being used is smooth. This can be achieved by using squared loss `sq (a, b) = (a\u2212 b)2 as the surrogate. However we note that assuming goodness of the similarity function in terms of squared loss would impose strictly stronger conditions on the learning problem. This is because E J`sq (a, b)K = sup (a\u2212 b) \u00b7 E J|a\u2212 b|K and thus, under boundedness conditions, squared loss is bounded by a constant times the absolute loss but it is not possible to bound absolute loss (or - insensitive loss) as a constant multiple of the squared loss since there exist distributions such that E J|a\u2212 b|K = \u2126 ( 1 inf(|a\u2212b|) \u00b7 E J`sq (a, b)K ) and 1inf(|a\u2212b|) can diverge.\nBelow we prove admissibility results for the sparse learning model.\nD.2 Proof of Theorem 10\nTo prove the first part, construct a new weight function w\u0303(x) = sign (w(x)) \u00b7 w\u0304. Note that we have |w\u0303(x)| \u2264 w\u0304 \u2264 B. Also construct the choice function as follows: for any x, let P [R(x) = 1|x] = |w(x)| B . This gives us Ex\u223cD JR(x)K = w\u0304 B . Then for any x, we have\nE x\u2032\u223cD Jw\u0303(x\u2032)K(x,x\u2032)|R(x\u2032)K = E x\u2032\u223cD\ns sign (w(x)) w\u0304K(x,x\u2032)\n|w(x)| B { / P x\u223cD [R(x) = 1]\n= E x\u2032\u223cD\nr w(x)K(x,x\u2032) w\u0304\nB z / ( w\u0304 B ) = E\nx\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K\nSince f(x) = E x\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K has small -insensitive loss by ( 0, B)-goodness ofK, we have our result. To prove the second part, construct a new weight function w\u0303(x) = w(x)\u03c4 P [R(x) = 1|x].\nNote that we have |w\u0303(x)| \u2264 B\u03c4 . Then for any x, we have\nE x\u2032\u223cD Jw\u0303(x\u2032)K(x,x\u2032)K = E x\u2032\u223cD\ns w(x\u2032)\n\u03c4 R(x\u2032)K(x,x\u2032)\n{\n= E x\u2032\u223cD\ns w(x\u2032)\n\u03c4 K(x,x\u2032)|R(x\u2032)\n{ P\nx\u2032\u223cD [R(x\u2032) = 1]\n= E x\u2032\u223cD\nJw(x\u2032)K(x,x\u2032)|R(x\u2032)K\nSince f(x) = E x\u2032\u223cD Jw(x\u2032)K(x,x\u2032)|R(x\u2032)K has small -insensitive loss by ( 0, B, \u03c4)-goodness of K, we have our result.\nUsing the above result we get out admissibility guarantee. Corollary 24. Every PSD kernel that is ( 0, \u03b3)-good for a regression problem is, for any 1 > 0,( 0 + 1,O ( 1\n1\u03b32\n) , 1 ) -good as a similarity function as well.\nThe above result is rather weak with respect to the sparsity parameter \u03c4 since we have made no assumptions on the distribution of the dual variables \u03b1i, \u03b1\u2217i in the proof of Theorem 6 which is why we are forced to use the (weak) inequality w\u0304B \u2264 1. Any stronger assumptions on the kernel goodness shall also strengthen this admissibility result."}, {"heading": "Appendix E Ordinal Regression", "text": "In this section we give missing utility and admissibility proofs for the similarity-based learning model for ordinal regression. But before we present the analysis of our model, we give below, an analysis of algorithms that choose to directly reduce the ordinal regression problem to real-valued regression. The analysis will serve as motivation that will help us define our goodness criteria.\nE.1 Reductions to real valued regression\nOne of the simplest learning algorithms for the problem of ordinal regression involves a reduction to real-valued regression [17, 16] where we modify our goal to that of learning a real valued function f which we then threshold using a set of thresholds {bi}ri=1 with b1 = \u2212\u221e to get discrete labels as shown below\nyf (x) = arg max i\u2208[r]\n{bi : f(x) \u2265 bi}\nThese thresholds may themselves be learned or fixed apriori. A simple choice for these thresholds is bi = i\u2212 1 for i > 1. It is easy to show (using a result in [17]) that for the fixed thresholds specified above, we have for all f : X \u2192 R,\n`ord (yf (x), y(x)) \u2264 min {\n2 |f(x)\u2212 y(x)| , |f(x)\u2212 y(x)|+ 1 2 } \u2264 min { 2` (f(x)\u2212 y(x)) + 2 , ` (f(x)\u2212 y(x)) + + 1\n2 } where in the last step we use the fact that |x| \u2212 \u2264 ` (x) \u2264 |x|. It is tempting to use this reduction along with guarantees given for real-valued regression to directly give generalization bounds for ordinal regression. To pursue this further, we need a notion of a good similarity function which we give below: Definition 25. A similarity function K is said to be ( 0, B)-good for an ordinal regression problem y : X \u2192 [r] if for some bounded weight function w : X \u2192 [\u2212B,B], the following predictor, when subjected to fixed thresholds, has expected ordinal regression error at most 0\nf : x 7\u2192 E x\u2032\u223cD\nJw(x\u2032)K(x,x\u2032)K\ni.e. E x\u223cD J|yf (x)\u2212 y(x)|K < 0.\nFrom the definition of the thresholding scheme used to define yf from f , it is clear that |f(x)\u2212 y(x)| \u2264 |yf (x)\u2212 y(x)| + 12 . Since we have ` (x) \u2264 |x| for any \u2265 0, we have ` (f(x)\u2212 y(x)) \u2264 |y(x)\u2212 yf (x)|+ 12 and thus we have Ex\u223cD J` (f(x), y(x))K < 0 + 1 2 .\nThus, starting with goodness guarantee of the similarity function with respect to ordinal regression, we obtain a guarantee of the goodness of the similarity function K with respect to real-valued regression that satisfies the requirements of Theorem 5. Thus we have the existence of a linear predictor over a low dimensional space with -insensitive error at most 0 + 12 + 1. We can now argue (using results from [17]) that this real-valued predictor, when subjected to the fixed thresholds, would yield a predictor with ordinal regression error at most\nmin { 2 ( 0 + 1\n2 + 1\n) + 2 , ( 0 + 1\n2 + 1\n) + + 1\n2\n} = 1 + 0 + 1 + .\nHowever, this is rather disappointing since this implies that the resulting predictor would, on an average, give out labels that are at least one step away from the true label. This forms the intuition behind introducing (soft) margins in the goodness formulation that gives us Definition 12. Below we give proofs for utility and admissibility guarantees for our model for similarity-based ordinal regression.\nE.2 Proof of Theorem 13\nWe use Lemma 15 to construct a landmarked space with a linear predictor f\u0303 : x 7\u2192 \u3008w,x\u3009 such that E\nx\u223cD r\u2223\u2223\u2223f\u0303 (\u03a8 (x))\u2212 f(x)\u2223\u2223\u2223z \u2264 2 1. As before, we have \u2016w\u20162 \u2264 B and sup x\u2208X {\u2016\u03a8(x)\u2016} \u2264 1. In\nthe following, we shall first show bounds on the mislabeling error i.e P x\u223cD [y\u0302(x) 6= y(x)]. Next, we shall convert these bounds into ordinal regression loss by introducing a spacing parameter into the model.\nSince the \u03b3-margin loss function is 1-Lipschitz, we get[ f\u0303(\u03a8(x))\u2212 by(x) ] \u03b3 \u2264 [ f(x)\u2212 by(x) ] \u03b3\n+ 2 1[ by(x)+1 \u2212 f\u0303(\u03a8(x)) ] \u03b3 \u2264 [ by(x)+1 \u2212 f(x) ] \u03b3 + 2 1\nWhich gives us, upon taking expectations on both sides,\nE x\u223cD\ns[ f\u0303(\u03a8(x))\u2212 by(x) ] \u03b3 + [ by(x)+1 \u2212 f\u0303(\u03a8(x)) ] \u03b3 { \u2264 0 + 4 1\nLemma 15 guarantees the excess loss due to landmarking to be at most 64B \u221a\nlog(1/\u03b4) d . Moreover,\nsince the \u03b3-margin loss is 1-Lipschitz, Lemma 16 allows us to bound excess loss due to training by 3B \u221a\nlog(1/\u03b4) n so that the learned predictor has \u03b3-margin loss at most 0 + 1 for any 1 given large\nenough d and n. Now, from the definition of the \u03b3-margin loss it is clear that if the loss is greater than \u03b3 then it indicates a mislabeling. Hence, the mislabeling error is bounded by 0+ 1\u03b3 .\nThis may be unsatisfactory if \u03b3 1 - to remedy such situations we show that we can bound the 1-margin loss directly. Starting from E\nx\u223cD r\u2223\u2223\u2223f\u0303(\u03a8(x))\u2212 f(x)\u2223\u2223\u2223z < 2 1, we can also deduce E\nx\u223cD\ns[ 1\u2212 f\u0303(\u03a8(x)) + by(x) ] + + [ 1\u2212 by(x)+1 + f\u0303(\u03a8(x)) ] + { \u2264 0 + 4 1\nWe can bound the excess training error for this loss function as well. Since the 1-margin loss directly bounds the mislabeling error, combining the two arguments we get the second part of the claim.\nHowever, the margin losses themselves do not present any bound on the ordinal regression error. This is because, if the thresholds are closely spaced together, then even an instance of gross ordinal regression loss could correspond to very small margin loss. To remedy this, we introduce a spacing parameter into the model. We say that a set of thresholds is \u2206-spaced if min\ni\u2208[r] {|bi \u2212 bi+1|} \u2265 \u2206.\nSuch a condition can easily be incorporated into the model of [17] as a constraint in the optimization formulation.\nSuppose that a given instance has ordinal regression error `ord (y\u0302(x), y(x)) = k. This can happen if the point was given a label k labels below (or above) its correct label. Also suppose that the \u03b3-margin error in this case is [y\u0302(x)\u2212 y(x)]\u03b3 = h. Without loss of generality, assume that the point x of label k + 1 was given the label 1 giving an ordinal regression loss of lord = k (a similar analysis would hold if the point of label 1 were to be given a label k + 1 by symmetry of the margin loss formulation with respect to left and right thresholds). In this case the value of the underlying regression function must lie between b1 and b2 and thus, the margin loss h satisfies\nh \u2265 bk+1 + \u03b3 \u2212 b2 = \u03b3 + k\u2211 i=2 (bi+1 \u2212 bi) \u2265 \u03b3 + (k \u2212 1) \u2206. Thus, if the margin loss is at most h, the ordinal regression error must satisfy `ord (y\u0302(x), y(x)) \u2264 [y\u0302(x)\u2212by(x)]\u03b3+[by(x)+1\u2212y\u0302(x)]\u03b3\u2212\u03b3\n\u2206 + 1. Let \u03c8\u2206(x) = x+\u2206\u22121\u2206 . Using the bounds on the \u03b3-margin and 1-margin losses given above, we get the first part of the claim.\nIn particular, a constraint of \u2206 = 1 put into an optimization framework ensures that the bounds on mislabeling loss and ordinal regression loss match since \u03c81(x) = x for all x. In general, the cases where the above framework yields a non-trivial bound for the mislabeling error rate, i.e. `01 < 1 (which can always be ensured if 0 < 1 by taking large enough d and n), also correspond to those where the ordinal regression error rate is also bounded above by 1 since sup\nx\u2208[0,1],\u2206>0 (\u03c8\u2206 (x)) = 1.\nE.3 Admissibility Guarantees\nWe begin by giving the kernel goodness criterion which we adapt from existing literature on large margin approaches to ordinal regression. More specifically we use the framework described in [16] for which generalization guarantees are given in [17]. Definition 26. Call a PSD kernel K ( 0, \u03b3)-good for an ordinal regression problem y : X \u2192 [r] if there exists W\u2217 \u2208 HK , \u2016W\u2217\u2016 = 1 and a fixed set of thresholds {bi}ri=1 such that\nE x\u223cD\nt[ by(x) + 1\u2212\n\u3008W\u2217,\u03a6K(x)\u3009 \u03b3 ] + + [ \u3008W\u2217,\u03a6K(x)\u3009 \u03b3 \u2212 by(x)+1 + 1 ] + | < 0\nThe above definition exactly corresponds to the EXC formulation put forward by [17] except for the fact that during actual optimization, a strict ordering on the thresholds is imposed explicitly. [17] present yet another model called IMC which does not impose any explicit orderings, rather the ordering emerges out of the minimization process itself. Our model can be easily extended to the IMC formulation as well. Theorem 27 (Theorem 14 restated). Every PSD kernel that is ( 0, \u03b3)-good for an ordinal regression problem is also ( \u03b31 0 + 1,O ( \u03b321 1\u03b32 )) -good as a similarity function with respect to the \u03b31-margin loss for any \u03b31, 1 > 0. Moreover, for any 1 < \u03b31/2, there exists an ordinal regression instance and a corresponding kernel that is (0, \u03b3)-good for the ordinal regression problem but only ( 1, B)-good\nas a similarity function with respect to the \u03b31-margin loss function for B = \u2126 ( \u03b321 1\u03b32 ) .\nProof. We prove the two parts of the result separately. Part 1: Admissibility: As before, using Lemma 17 it is possible to obtain a vector W\u2032 = n\u2211 i=1 (\u03b1i \u2212 \u03b1\u2217i )\u03a6K(xi) \u2208 HK such that 0 \u2264 \u03b1i, \u03b1\u2217i \u2264 piC (by applying the KKT conditions) and the following holds:\nE x\u223cD\nr[ by(x) + 1\u2212 \u3008W\u2032,\u03a6K(x)\u3009 ] + + [ \u3008W\u2032,\u03a6K(x)\u3009 \u2212 by(x)+1 + 1 ] + z < 1\n2C\u03b32 + 0 (3)\nThis allows us to construct a weight function wi = \u03b1i\u2212\u03b1\u2217i pi\nsuch that |wi| \u2264 2C (since we do not have any guarantee that \u03b1i\u03b1\u2217i = 0) and E\nx\u2032\u223cD Jw(x\u2032)K(x,x\u2032)K = \u3008W\u2032,\u03a6K(x)\u3009 for all x \u2208 X .\nDenoting f(x) := E x\u2032\u223cD\nJw(x\u2032)K(x,x\u2032)K for convenience gives us\nE x\u223cD\nq[ f(x)\u2212 by(x) ] 1 + [ by(x)+1 \u2212 f(x) ] 1 y = E\nx\u223cD\nr[ 1\u2212 f(x) + by(x) ] + + [ 1\u2212 by(x)+1 + f(x) ] + z\n\u2264 1 2C\u03b32 + 0\nwhere in the first step we used [x]1 = [1\u2212 x]+. Now use the fact [x]1 = 1 \u03b3 [\u03b3x]\u03b3 to get the following:\nE x\u223cD\nr[ \u03b31f(x)\u2212 \u03b31by(x) ] \u03b31 + [ \u03b31by(x)+1 \u2212 \u03b31f(x) ] \u03b31 z \u2264 \u03b31 2C\u03b32 + \u03b31 0\nNote that it is not possible to perform the analysis on the loss function [\u00b7]\u03b3 directly since using it requires us to scale the threshold values by a factor of \u03b31 that makes the result in Equation 3 unusable. Hence we first perform the analysis for [\u00b7]1, utilize Equation 3 and then interpret the resulting inequality in terms of [\u00b7]\u03b31 .\nSetting 2C = \u03b31 1\u03b32 , using w \u2032(x) = \u03b31w(x) as weights, using b\u2032j = \u03b31bj as the thresholds and noting that the new bound on the weights is |w\u2032i| \u2264 2C\u03b31 gives us the result. As before, using variational optimization techniques, this result can be extended to non-discrete distributions as well.\nIn particular, setting \u03b31 = \u03b3 gives us that any PSD kernel that is ( 0, \u03b3)-good for an ordinal regression problem is also ( \u03b3 0 + 1,\n1 1\n) -good as a similarity function with respect to the \u03b3-margin\nloss.\nPart 2: Tightness: We adapt our running example (used for proving the lower bound for real regression) for the case of ordinal regression as well. Consider the points with value \u22121 as having label 1 and those having value +1 as having label 2. Clearly, w = (1, 0, 0) along with the thresholds b1 = \u2212\u221e and b2 = 0 establishes the native inner product as a (0, \u03b3)-good PSD kernel. Now consider the heavy points yet again and some weight function and threshold b2 (b1 is always fixed at\u2212\u221e) that is supposed to demonstrate the goodness of the inner product kernel as a similarity function. Clearly we have\nE x\u223cD\nr[ f(x)\u2212 by(x) ] \u03b31 + [ by(x)+1 \u2212 f(x) ] \u03b31 z \u2265\n( 1 2 \u2212 )( [f(x1)\u2212 b2]\u03b31 + [b2 \u2212 f(x4)]\u03b31 )\n=\n( 1 2 \u2212 )( [\u03b31 \u2212 f(x1) + b2]+ + [\u03b31 \u2212 b2 + f(x4)]+ )\n\u2265 ( 1 2 \u2212 ) (2\u03b31 \u2212 f(x1) + f(x4))\n=\n( 1 2 \u2212 )( 2\u03b31 \u2212 ( 1 2 \u2212 ) (1\u2212 b) (w4 \u2212 w1) )\n=\n( 1 2 \u2212 )( 2\u03b31 \u2212 ( 1 2 \u2212 )( 4\u03b32 ) (w4 \u2212 w1) )\nwhere in the third step we have used the fact that [a]++[b]+ \u2265 a+b. Thus, in order to have expected error at most 1, we must have\nw4 \u2212 w1 \u2265 1\n4\u03b32\n( 2\u03b31 \u2212\n1 1 2 \u2212\n) 1\n1 2 \u2212\n= \u03b321\n4 1\u03b32\nby setting = 12 \u2212 1 \u03b31 which then proves the result after applying an averaging argument."}, {"heading": "Appendix F Ranking", "text": "The problem of ranking stems from the need to sort a set of items based on their relevance. In the model considered here, each ranking instance is composed of m documents (pages) (p1, . . . , pm)\nfrom some universe P along with their relevance to some particular query q \u2208 Q that are given as relevance scores from some set R \u2282 R. Thus we have X = Q \u00d7 Pm with each instance x \u2208 X being provided with a relevance vector r(x) = Rm. Let the ith query-document pair of a ranking instance x be denoted by zi \u2208 Q \u00d7 P . For any z = (p, q) \u2208 P \u00d7 Q, let r(z) \u2208 R denote the true relevance of document p to query q.\nFor any relevance vector r \u2208 Rm, let r\u0304 be the vector with elements of r sorted in descending order and \u03c0r be the permutation that this sorting induces. For any permutation \u03c0, \u03c0(i) shall denote the index given to the index i under \u03c0. Although the desired output of a ranking problem is a permutation, we shall follow the standard simplification [27] of requiring the output to be yet another relevance vector s with the permutation \u03c0s being considered as the actual output. This converts the ranking problem into a vector-valued regression problem.\nWe will take the true loss function `actual (\u00b7, \u00b7) to be the popular NDCG loss function [28] defined below\n`NDCG (s, r) = \u2212 1\n\u2016G(r)\u2016D m\u2211 i=1 G(r(i)) F (\u03c0s(i))\nwhere \u2016r\u2016D = max\u03c0\u2208Sm m\u2211 i=1 r(i) F (\u03c0(i)) , G(r) = 2r \u2212 1 is the growth function and F (t) = log(1 + t) is the decay function.\nFor the surrogate loss functions `K and `S , we shall use the squared loss function `sq (s, r) = \u2016s\u2212 r\u201622. We shall overload notation to use `sq (\u00b7, \u00b7) upon reals as well. For any vector r \u2208 Rm, let \u03b7(r) := G(r)\n\u2016G(r)\u2016D and let ri denote its ith coordinate.\nDue to the decomposable nature of the surrogate loss function, we shall require kernels and similarity functions to act over query-document pairs i.e. K : (P \u00d7Q) \u00d7 (P \u00d7Q) \u2192 R. This also coincides with a common feature extraction methodology (see for example [27, 29]) where every query-document pair is processed to yield a feature vector. Consequently, all our goodness definitions shall loosely correspond to the ability of a kernel/similarity to accurately predict the true relevance scores for a given query-document pair. We shall assume ranking instances to be generated by the sampling of a query q \u223c DQ followed by m independent samples of documents from the (conditional) distribution DP|q . The distribution over ranking instances is then a product distribution D = DX = DQ \u00d7 DP|q \u00d7DP|q \u00d7 . . .\u00d7DP|q\ufe38 \ufe37\ufe37 \ufe38\nm times\n. A key consequence of this generative\nmechanism is that the ith query-document pair of a random ranking instance, for any fixed i, is a random query-document instance selected from the distribution \u00b5 := DQ \u00d7DP|q . Definition 28. A similarity function K is said to be ( 0, B)-good for a ranking problem y : X \u2192 Sm if for some bounded weight function w : P \u00d7 Q \u2192 [\u2212B,B], for any ranking instance x = (q, p1, p2, . . . , pm), if we define f : X \u2192 Rm as\nfi := E z\u223c\u00b5 Jw(z)K(zi, z)K\nwhere zi = (pi, q), then we have E x\u223cD J`sq (f(x), \u03b7(r(z)))K < 0.\nDefinition 29. A PSD kernel K is said to be ( 0, \u03b3)-good for a ranking problem y : X \u2192 Sm if there exists W\u2217 \u2208 HK , \u2016W\u2217\u2016 = 1 such that if for any ranking instance x = (q, p1, p2, . . . , pm), if, for any W \u2208 HK , when we define f ( \u00b7 ;W) : X \u2192 Rm as\nfi(x;W) = \u3008W,\u03a6K(zi)\u3009\n\u03b3\nwhere fi is the ith coordinate of the output of f and zi = (pi, q), then we have E\nx\u223cD J`sq (f(x;W\u2217), \u03b7(r(z)))K < 0.\nThe choice of this surrogate is motivated by consistency considerations. We would ideally like a minimizer of the surrogate loss to have bounded actual loss as well. Using results from [27], it can be shown that the above defined surrogate is not only consistent, but that excess loss in terms of\nthis surrogate can be transferred to excess loss in terms of `NDCG (\u00b7, \u00b7), a very desirable property. Although [27] shows this to be true for a whole family of surrogates, we chose `sq (\u00b7, \u00b7) for its simplicity. All our utility arguments carry forward to other surrogates defined in [27] with minimal changes.\nWe move on to prove utility guarantees for the given similarity learning model.\nTheorem 30. Every similarity function that is ( 0, B)-good for a ranking problem form-documents with respect to squared loss is O (\u221a m\nlogm \u00b7 \u221a 0\n) -useful with respect to NDCG loss.\nProof. As before, we use Lemma 15 to construct a landmarked space with a linear predictor f\u0303 : x 7\u2192 \u3008w,x\u3009 such that E\nz\u223c\u00b5 r\u2223\u2223\u2223f\u0303 (\u03a8 (z))\u2212 f(z)\u2223\u2223\u2223z \u2264 2 1. We have \u2016w\u20162 \u2264 B and sup x\u2208X {\u2016\u03a8(x)\u2016} \u2264 1.\nNow lets overload notation to denote by \u03a8(x) the concatenation of the images of the m documentquery pairs in x under \u03a8(\u00b7) and by f\u0303(\u03a8(x)), the m-dimensional vector obtained by applying f\u0303 to each of the m components of \u03a8(x).\nSince the squared loss function is 2B-Lipschitz in its first argument in the region of interest, we get\nE x\u223cD\nr `sq ( f\u0303(\u03a8(x)), \u03b7(r(x)) )z = E\nx\u223cD t m\u2211 i=1 `sq ( f\u0303(\u03a8(zi)), \u03b7(r(x))i )|\n= m\u2211 i=1 E x\u223cD r `sq ( f\u0303(\u03a8(zi)), \u03b7(r(x))i )z =\nm\u2211 i=1 E x\u223cD J`sq (f(zi), \u03b7(r(x))i)K +\nm\u2211 i=1 E x\u223cD r `sq ( f\u0303(\u03a8(zi)), \u03b7(r(x))i ) \u2212 `sq (f(zi), \u03b7(r(x))i) z\n\u2264 m\u2211 i=1 E x\u223cD J`sq (f(zi), \u03b7(r(x))i)K + 2B m\u2211 i=1 E x\u223cD r\u2223\u2223\u2223f\u0303(\u03a8(zi))\u2212 f(zi)\u2223\u2223\u2223z =\nm\u2211 i=1 E x\u223cD J`sq (f(zi), \u03b7(r(x))i)K + 2B m\u2211 i=1 E z\u223c\u00b5 r\u2223\u2223\u2223f\u0303(\u03a8(z))\u2212 f(z)\u2223\u2223\u2223z \u2264\nm\u2211 i=1 E x\u223cD J`sq (f(zi), \u03b7(r(x))i)K + 4Bm 1\n= E x\u223cD t m\u2211 i=1 `sq (f(zi), \u03b7(r(x))i) | + 4Bm 1\n= E x\u223cD J`sq (f(x), \u03b7(r(x)))K + 4Bm 1 \u2264 0 + 4Bm 1\nwhere x = (q, p1, . . . , pm) and zi = (pi, q). In the first and the last but one step we have used decomposability of the squared loss, in the fourth step we have used Lipschitz properties of the squared loss, in the fifth step we have used properties of the generative mechanism assumed for ranking instances, in the sixth step we have used the guarantee given by Lemma 15. Throughout we have repeatedly used linearity of expectation. This bounds the excess error due to landmarking to d\ndimensions by 64B2m2 \u221a\nlog(1/\u03b4) d using Lemma 15. Similarly, Lemma 16 also allows us to bound the excess error due to training by 3B2 \u221a\nlog(1/\u03b4) n which puts our total squared loss at 0 + 1 for\nlarge enough d and n.\nWe now invoke [27, Theorem 10] that states that if the surrogate loss function `(\u00b7, \u00b7) being used is a Bregman divergence generated by a function that is CS-strongly convex with respect to some norm\n\u2016\u00b7\u2016 then we can bound `NDCG (s, r) \u2264 CF\u221aCS \u00b7 \u221a ` (s, r) where CF = 2 \u2225\u2225\u2225\u2225( 1F (1) , . . . , 1F (m))>\u2225\u2225\u2225\u2225 \u2217 , F is the decay function used in the definition of NDCG and \u2016\u00b7\u2016\u2217 is the dual norm of \u2016\u00b7\u2016. Note that we are using the \u201cnoiseless\u201d version of the result where r(x) is a deterministic function of x.\nIn our case the squared loss is 2-strongly convex with respect to the L2 norm which is its own dual. Hence CS = 2 and CF = O\n(\u221a m\nlogm\n) , if f\u0302 : x 7\u2192 \u3008w\u0302,\u03a8(x)\u3009 is our final output, we get, for some\nconstant C,\nE x\u223cD\nr `NDCG ( f\u0302(x), r(x) )z \u2264 C \u221a m logm \u00b7 \u221a 0 + 4Bm 1 \u2264 C \u221a m logm \u00b7 \u221a 0 +C 2m\u221a logm \u00b7 \u221a B 1\nwhich proves the claim. This affects the bounds given by Lemmata 15 and 16 since the dependence of the excess error on d and n will now be in terms of the inverse of their fourth roots instead of inverse of the square roots as was the case in regression and ordinal regression.\nWe note that the (rather heavy) dependence of the final utility guarantee (that is O (\u221a m 0 ) ) on m is because the decay function F (t) = log(1 + t) chosen here (which seems to be a standard in literature but with little theoretical justification) is a very slowly growing function (it might sound a bit incongruous to have an increasing function as our decay function - however since this function appears in the denominator in the definition of NDCG, it effectively induces a decay). Using decay functions that grow super-linearly (or rather those that induce super-linear decays), we can ensure O (\u221a 0 ) -usefulness since in those cases, CF = O (1).\nWe next prove admissibility bounds for the ranking problem. The learning setting as well as the proof is different for ranking (due to presence of multiple entities in a single ranking instance), hence we shall provide all the arguments for completeness. Theorem 31. Every PSD kernel that is ( 0, \u03b3)-good for a ranking problem is also( 0 + 1,O ( m \u221a m\n1 \u221a 1\u03b33\n)) -good as a similarity function for any 1 > 0.\nProof. For notational convenience, we shall assume that the RKHS HK is finite dimensional so that we can talks in terms of finite dimensional matrices and vectors. As before, let f(z;W) = \u3008W,\u03a6K(z)\u3009 and let W\u2032 be the minimizer of the following program.\nmin W\u2208HK\n1 2 \u2016W\u20162HK + C Ex\u223cD J`sq (f(x;W), \u03b7(r(x)))K\n\u2261 min W\u2208HK\n1 2 \u2016W\u20162HK + C Ex\u223cD t m\u2211 i=1 `sq (f(zi;W), \u03b7(r(x))i) |\n\u2261 min W\u2208HK\n1 2 \u2016W\u20162HK + C m\u2211 i=1 E x\u223cD J`sq (f(zi;W), \u03b7(r(x))i)K\n\u2261 min W\u2208HK\n1 2 \u2016W\u20162HK +mC Ez\u223c\u00b5 J`sq (f(z;W), r\u0303(z))K + CD\nwhere for any z \u2208 Q\u00d7 P , r\u0303(z) gives us the expected normalized relevance of this document-query pair across ranking instances and CD is some constant independent of W and dependent solely on the underlying distributions. Using the goodness of the kernel K and the argument given in the proof of Lemma 17, it is possible to show that the vector W\u2032 has squared loss at most 12C\u03b32 + 0. Hence the only task remaining is to show that their exists a bounded weight function w such that for all z \u2208 P \u00d7Q, we have f(z;W) = \u3008W\u2032,\u03a6K(z)\u3009 = E\nz\u2032\u223c\u00b5 Jw(z)K(z, z\u2032)K which will prove the\nclaim.\nTo do so we assume that the (finite) set of document-query pairs is (z1, . . . , zk) with zi having probability \u00b5i and relevance ri = r\u0303(zi). Then the above program can equivalently be written as\nmin W\u2208HK\n1 2 \u2016W\u20162HK +mC k\u2211 i=1 \u00b5i`sq (\u3008W,\u03a6K(zi)\u3009 , ri)\n\u2261 min W\u2208HK\n1 2 \u2016W\u20162HK +mC \u2225\u2225\u2225\u221aPX>W \u2212\u221aPr\u2225\u2225\u22252 2\n\u2261 min W\u2208HK\n1 2 \u2016W\u20162HK +mC \u2225\u2225\u2225X\u0303>W \u2212 r\u0303\u2225\u2225\u22252 2\n\u2261 min \u03b1\u2208Rmn\n1 2 \u2016X\u03b1\u20162HK +mC \u2225\u2225\u2225X\u0303>X\u03b1\u2212 r\u0303\u2225\u2225\u22252 2\nwhere X = (\u03a6K(z1), . . . ,\u03a6K(zk)), r = (r1, . . . , rk) >, P is the k \u00d7 k diagonal matrix with\nPii = \u00b5i, X\u0303 = X \u221a P and r\u0303 = \u221a Pr. The last step follows by the Representer Theorem which tells us that at the optima, W\u2032 = X\u03b1 for some \u03b1 \u2208 Rk. Some simple linear algebra shows us that the minimizer \u03b1 has the form\n\u03b1 = ( X>X\u0303X\u0303>X + 1\n2mC X>X\n)\u22121 X>X\u0303 r\u0303\n= ( GPG+ G\n2mC\n)\u22121 GPr\n= ( PG+ I\n2mC\n)\u22121 G\u22121GPr\n= ( PG+ I\n2mC\n)\u22121 Pr\nwhere G = X>X is the Gram matrix given by the kernel K. In the third step we have assumed that G does not have vanishing eigenvalues which can always be ensured by adding a small positive constant to the diagonal. Thus we have(\nPG+ I\n2mC\n) \u03b1 = Pr\nlooking at the ith element of both sides we have\n\u00b5i k\u2211 j=1 \u03b1jK(zi, zj) + \u03b1i m2C = \u00b5iri\nwhich gives us \u03b1i = 2mC\u00b5i (ri \u2212 \u3008W\u2032,\u03a6K(zi)\u3009). Now assume, without loss of generality, that the relevance scores are normalized, i.e. ri \u2264 1 for all i. Thus we have\n1 2 \u2016W\u2032\u20162HK +mC \u2225\u2225\u2225X\u0303>W\u2032 \u2212 r\u0303\u2225\u2225\u22252 2 \u2264 1 2 \u20160\u20162HK +mC \u2225\u2225\u2225X\u0303>0\u2212 r\u0303\u2225\u2225\u22252 2\nwhich gives us 12 \u2016W \u2032\u20162HK \u2264 mC \u2016r\u0303\u2016 2 2 \u2264 mC k\u2211 i=1 \u00b5i = mC which gives us \u2016W\u2032\u2016 \u2264 \u221a 2mC. Since the kernel is already a normalized kernel, \u2016\u03a6K(zi)\u2016 \u2264 1 which gives us, by an application of Cauchy-Schwartz, |\u03b1i| \u2264 2mC\u00b5i(1 + \u221a m2C) \u2264 5\u00b5imC \u221a mC. If we now establish a weight function over the domain wi = \u03b1i\u00b5i , then |wi| \u2264 5mC \u221a mC and we can show that for all z, we have \u3008W\u2032,\u03a6K(z)\u3009 = E z\u2032\u223c\u00b5\nJw(z)K(z, z\u2032)K. Setting C = 12 1\u03b32 finishes the proof."}, {"heading": "Appendix G Supplementary Experimental Results", "text": "Below we present additional experimental results for regression and ordinal regression problems.\nG.1 Regression Experiments\nWe present results on various benchmark datasets considered in Section 4 for Gaussian K(x,y) = exp ( \u2212\u2016x\u2212y\u2016 2 2\n2\u03c32 ) and Euclidean: K(x,y) = \u2212\u2016x\u2212 y\u201622 kernels. Following standard practice, we\nfixed \u03c3 to be the average pairwise distance between data points in the training set.\nG.2 Ordinal Regression Experiments\nWe present results on various benchmark datasets considered in Section 4 for Gaussian K(x,y) = exp ( \u2212\u2016x\u2212y\u2016 2 2\n2\u03c32 ) and Manhattan: K(x,y) = \u2212\u2016x\u2212 y\u20161 kernels."}], "references": [], "referenceMentions": [], "year": 2012, "abstractText": "We address the problem of general supervised learning when data can only be ac-<lb>cessed through an (indefinite) similarity function between data points. Existing<lb>work on learning with indefinite kernels has concentrated solely on binary/multi-<lb>class classification problems. We propose a model that is generic enough to handle<lb>any supervised learning task and also subsumes the model previously proposed for<lb>classification. We give a \u201cgoodness\u201d criterion for similarity functions w.r.t. a given<lb>supervised learning task and then adapt a well-known landmarking technique to<lb>provide efficient algorithms for supervised learning using \u201cgood\u201d similarity func-<lb>tions. We demonstrate the effectiveness of our model on three important super-<lb>vised learning problems: a) real-valued regression, b) ordinal regression and c)<lb>ranking where we show that our method guarantees bounded generalization error.<lb>Furthermore, for the case of real-valued regression, we give a natural goodness<lb>definition that, when used in conjunction with a recent result in sparse vector re-<lb>covery, guarantees a sparse predictor with bounded generalization error. Finally,<lb>we report results of our learning algorithms on regression and ordinal regression<lb>tasks using non-PSD similarity functions and demonstrate the effectiveness of<lb>our algorithms, especially that of the sparse landmark selection algorithm that<lb>achieves significantly higher accuracies than the baseline methods while offering<lb>reduced computational costs.", "creator": "LaTeX with hyperref package"}}}