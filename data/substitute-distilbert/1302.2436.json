{"id": "1302.2436", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Feb-2013", "title": "Extracting useful rules through improved decision tree induction using information entropy", "abstract": "classification provides widely adopted technique in the data mining domain, where scalability and efficiency are the immediate problems in classification algorithms for large databases. we suggest improvements to the existing c4. five decision tree algorithm. throughout this paper attribute ladder induction ( aoi ) and relevance analysis are incorporated with related hierarchys knowledge and heightbalancepriority planning for construction of decision tree along with multi category mining. the assignment of priorities to attributes is done by evaluating information entropy, employing different levels of abstraction besides building decision tree using heightbalancepriority information. modified dmql queries are used to understand and explore the shortcomings of the decision trees predicted by c4. 5 classifier access education dataset and the analyses are compared with the proposed approach.", "histories": [["v1", "Mon, 11 Feb 2013 10:29:17 GMT  (528kb)", "http://arxiv.org/abs/1302.2436v1", "15 pages, 7 figures, 4 tables, International Journal of Information Sciences and Techniques (IJIST) Vol.3, No.1, January 2013"]], "COMMENTS": "15 pages, 7 figures, 4 tables, International Journal of Information Sciences and Techniques (IJIST) Vol.3, No.1, January 2013", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["mohd mahmood ali", "mohd s qaseem", "lakshmi rajamani", "a govardhan"], "accepted": false, "id": "1302.2436"}, "pdf": {"name": "1302.2436.pdf", "metadata": {"source": "CRF", "title": "EXTRACTING USEFUL RULES THROUGH IMPROVED DECISION TREE INDUCTION USING INFORMATION ENTROPY", "authors": ["Mohd. Mahmood Ali", "Mohd. S. Qaseem", "Lakshmi Rajamani", "A. Govardhan"], "emails": ["mahmoodedu@gmail.com", "ms_qaseem@yahoo.com", "drlakshmiraja@gmail.com", "dejntuh@jntuh.ac.in"], "sections": [{"heading": null, "text": "DOI : 10.5121/ijist.2013.3103 27\nClassification is widely used technique in the data mining domain, where scalability and efficiency are the\nimmediate problems in classification algorithms for large databases. We suggest improvements to the existing C4.5 decision tree algorithm. In this paper attribute oriented induction (AOI) and relevance analysis are incorporated with concept hierarchy\u201fs knowledge and HeightBalancePriority algorithm for construction of decision tree along with Multi level mining. The assignment of priorities to attributes is done by evaluating information entropy, at different levels of abstraction for building decision tree using HeightBalancePriority algorithm. Modified DMQL queries are used to understand and explore the shortcomings of the decision trees generated by C4.5 classifier for education dataset and the results are compared with the proposed approach.\nKEYWORDS\nAttribute oriented induction (AOI), Concept hierarchy, Data Mining Query Language (DMQL), HeightBalancePriority algorithm, Information entropy, C4.5 classifier."}, {"heading": "1. INTRODUCTION", "text": "Classification is a supervised learning technique in data mining where training data is given to classifier that builds classification rules. Later if test data, is given to classifier, it will predict the values for unknown classes.\nC4.5 classifier [1],[2], a well-liked tree based classifier, is used to generate decision tree from a set of training examples. Nowadays C4.5 is renamed as J48 classifier in WEKA tool, an open source data mining tool. The heuristic function used in this classifier is based on the concept of information entropy.\nInduction of decision trees from very large training sets has been previously addressed by SLIQ [3] and SPRINT [4], but the data stored is without generalization. The generalization concept for evaluating classification rules using DMQL in data cube is proposed [5]. Decision tree construction process performed on very large datasets leads to bushy or meaningless results. This issue which is addressed in data generalization and summarization based characterization [5], consist of three steps attribute-oriented induction, where the low-level\nDOI : 10.5121/ijist.2013.3103 28\ndata is generalized to high-level data using the concept hierarchies, relevance analysis [6], and multi-level mining, where decision trees can be induced at different levels of abstraction. The integration of these steps leads to efficient, high quality and the elegant handling of continuous and noisy data. An inherent weakness of C4.5 classifier, is that the information gain attribute selection criterion favors many-valued attributes, due to which some of the attributes are pruned because of less information gain in decision tree construction. Ultimately this leads to less classification rules. C4.5 classifier encounters the over-branching problem caused by unnecessary partitioning of the data which is of least importance to users. Therefore, we propose a HeightBalancePriority algorithm which constitutes NodeMerge and HeightBalance algorithms [11] that allows merging of nodes in the decision tree thereby, discouraging over-partitioning of the data. This algorithm also uses the concept of Height Balancing in the decision tree based on priority checks at every node based on attribute values selected for different attributes using information entropy. This enhances the overall performance, as the final decision tree constructed is efficient enough to derive the complete classification rules effectively avoiding over-branching problem of unnecessary attributes.\nIn this paper, we emphasized on decision tree construction and classification rules derived based on priority by using information entropy, which gives importance to selected attributes that was neglected by C4.5 classifier. In the Remainder of the paper, for clarity and better understanding, the Modified DMQL queries are used that explore the dataset used for decision tree construction.\nThe paper is organized as follows. Section 2, describes the data generalization and summarization based characterization. Section 3 briefly, explains about the proposed algorithms used for decision tree construction. The Decision tree formed using C4.5, yet suffers from deficiencies. To overcome the priority based decision tree construction method is discussed in Section 4. In Section 5, some more examples are taken to explore C4.5, deficiencies and results obtained are compared with proposed approach. Section 6 summarizes the methodology for priority based Decision tree construction and future challenges."}, {"heading": "2. CLASSIFICATION USING DECISION TREE INDUCTION", "text": "Scalability and efficiency issues for classification techniques are addressed for large databases that has improved C4.5 classifier, using the following four steps:\nGeneralization by AOI, which compresses training data. This includes storage of generalized data in data cube to allow fast accessing [8].\nRelevance analysis, that removes irrelevant attributes, thereby, further compacting training data.\nMulti-level mining, which combines the induction of decision trees with knowledge in concept hierarchies.\nPriority based height balance trees using Entropy. The top three methodologies are discussed in Generalization and Decision tree induction for efficient classification [7], we have also used the above three methodologies with slight improvements, where as the priority based decision tree construction using Information entropy, is discussed in Section 4."}, {"heading": "2.1. Generalization by AOI (Attribute oriented Induction)", "text": "AOI [9], a knowledge discovery tool which allows the generalization of data, offers two major advantages for the mining of large databases. Firstly, it allows the raw data to be handled at higher\nDOI : 10.5121/ijist.2013.3103 29\nconceptual levels. Generalization is performed with the use of attribute concept hierarchies, where the leaves of a given attribute\u2019s concept hierarchy correspond to the attribute\u2019s values in the data (referred to as primitive level data) [10]. Secondly, generalization of the training data is achieved by replacing primitive level data by higher level concepts. Hence, attribute- oriented induction allows the user to view the data at more meaningful abstractions.\nFurthermore, AOI, addresses the scalability issue by compressing the training data. The generalized training data will be much more compact than the original training set, and hence, will involve fewer input/output operations. With the help of AOI, many-valued attributes in the selection of determinant attributes are avoided since AOI reduces large number of attribute values to small set of distinct values according to the specified thresholds.\nAOI also performs generalization by attribute removal [9]. In this technique, an attribute having a large number of distinct values is removed if there is no higher level concept for it. Attribute removal further compact the training data and reduces the bushiness of resulting trees. Hence, aside from increasing efficiency, AOI may result in classification trees that are more understandable, smaller, and therefore easier to interpret than trees obtained from methods operating on non-generalized (larger) sets of low-level data. The degree of generalization is controlled by an empirically set generalization threshold. If the number of distinct values of an attribute is less than or equal to this threshold, then further generalization of the attribute is halted. We consider a simple example to explain all the detail steps to generalize the final classification tree and find out the classification rules. Table 1, depicts a raw training data of class of average education level is used, region wise, with the count in relation with the country part to which that place belongs around the world.\nThe Generalization using AOI for the attribute WORLD is depicted in Figure 1. Similarly the concept hierarchies for age, income, and education can also be represented. We illustrate\nideas of attribute-oriented induction (AOI) with an example for edu_dataset shown in table 1, generalized using the concept hierarchy. AOI is performed on set of relevant\ndata. An intermediate relation, achieved by concept ascension using concept hierarchies as shown in Figure 1, attribute region normalized to country as shown in\nTable 2. Owing to attribute removal technique, attribute values INDIA.EAST, INDIA.WEST, INDIA.SOUTH, are replaced with INDIA, as depicted in Figure 1.\nDOI : 10.5121/ijist.2013.3103 30\nIdentical tuples for Table 1 merged while collecting the count information shown in Table 2, which is achieved by applying modified data mining query language (DMQL) queries as shown with example 2.1. The resultant table obtained is substantially smaller than the original table, generalized with task-relevant data as shown in Table 2.\nExample 2.1. Classification task.\nClassify Region_Data till World_Data replace {USA,Cuba,India,China} attribute_values with new_attribute Country in relevance to avg_edu_level,country new_attribute count from edu_dataset where Country_Data={\u201dIndia\u201c,\u201dUSA\u201d,\u201dCuba\u201d,\u201dChina\u201d} and Region_Data={\u201dIndia.east\u201d,\u201dIndia.west\u201d,\u201dIndia.south\u201d, \u201dUSA.east\u201d,\u201dUSA.west\u201d,\u201dUSA.south\u201d,\u201d USA.middle\u201d,\u201dCuba.north\u201d, \u201dCuba.south\u201d, \u201dChina.south\u201d,\u201dChina.east\u201d,\u201dChina.west\u201d}\nIn the above modified DMQL query the bold words represent reserve keywords. The keyword Classify constitutes the proposed approach algorithms, which are discussed in this paper."}, {"heading": "2.2. Relevance Analysis", "text": "The uncertainty coefficient U(A) for attribute A is used to further reduce the size of the generalized training data as shown in Equation (1). U(A) is obtained by normalizing the information gain of A so that U(A) ranges from 0 (meaning statistical independence between A and the classifying attribute) to 1 (strongest degree of relevance between the two attributes). The user has the option of retaining either the n most relevant attributes or all attributes whose uncertainty coefficient value is greater than a pre-specified uncertainty threshold, where n and the threshold are userdefined. Note that it is much more efficient to apply the relevance analysis to the generalized data rather than to the original training data.\nDOI : 10.5121/ijist.2013.3103 31\n1 2\np\nU(A)= I(p 1 , p 2 ,\u2026, pm,) \u2013 E(A) Equation... (1)\nI(p 1 , p 2 ,\u2026, p m ,)\nWhere: I(p1 , ,\u2026, pm,) = - \u2211 m p\ni/ p log2 pi /p\nE(A) = \u2211 p 1j ,+ \u2026+ p mj I(p1j,\u2026, pm,) Equation\u2026 (2)\nj=1 p\nGain(A)= I(p 1 , p 2 ,\u2026, p m ,) \u2013 E(A) Equation\u2026 (3)\nHere P is the set of the final generalized training data, where P contains m distinct values defining with the output distinct output class Pi (for i = 1, 2, 3,\u2026,m) and P contains pi samples for each Pi, then the expected information i.e. Information Entropy needed to classify a given sample is I(p1, p2,\u2026, pm ). For example: we have the attribute A with the generalized final value {a1 ,a2 ,a3 , ...,ak} can be partition P into {C1 ,C2, C3 , ...,Ck} , where Cj contain those samples in C that have value aj of A. The expected information based on partitioning by A is given by E(A) Equation (2), which is the average of the expected information. The Gain(A) given in Equation (3), is the difference of the two calculations. If the uncertainty coefficient for attribute A is 0, which means no matter how we partition the attribute A, we can get nothing lose information. So the attributes A have no effect on the building of the final decision tree. If U(A) is 1, mean that we can use this attribute to classify the final decision tree. This is similar to find the max goodness in the class to find which attribute we can use to classify the final decision tree. After the relevance analysis, we can get rid of some attribute and further compact the training data based on selection of attributes by users. Entropy for income class which has attribute values (High, Medium, Low):\nI(s1,s2,s3)=I(5,5,7)=-\n= [-0.29411764705882 * log2(0.29411764705882)-\n0.29411764705882 * log2(0.29411764705882)0.41176470588235 * log2(0.41176470588235)]\n= 1.56565311164580141944\nIf we want to choose one of the attribute as root node then, we have to calculate Information Entropy for all other attributes present, in the education dataset, in most of cases the continuous values are given preference to be the root node, if not multi-valued attribute values of an attribute is selected as root node. This depends effectively on the highest information gain for the attribute values present in the attributes (Average education level, Region, family income per year). Let us calculate the information gain for all other attributes using equation (1) and equation (2) discussed above. We have to still compute the expected information for each of these distributions For Avg education level = \u201cIlliterate\u201d\ns11=2 ; s21=0; & s31=0\nI(s11,s21,s31)= = 0\nFor Avg education level =\u201d4yearscollege\u201d\ns12=2; s22 =3; &s32=0\nI(s12,s22,s32)=\nFor Avg education level =\u201d2yearscollege\u201d s13=1; s23 =2; & s33=0\nI(s13,s23,s33)=\np\nDOI : 10.5121/ijist.2013.3103 32\nFor Avg education level =\u201dGraduate school\u201d\ns14=3; s24 =0; &s33=0\nI(s14,s24,s34)=\nFor Avg education level =\u201dElementary school\u201d\ns15=1; s25 =0; & s35=0\nI(s15,s25,s35)=\nSimilarly entropy for attribute values of attribute Avg education level = \u201dPh.D\u201d, \u201cHigh School\", \u201dJunior High\u201d is 0; Using the equation (2) given above , if the samples are partitioned according to Avg education level, then\nE(Avg education level) =\n= 0.44762470588235\nHence, the gain in information from such a partitioning would be calculated using equation (3) given above:\nGain (Avg education level) = I(s1,s2,s3) \u2013 E(Avg education level) =1.56565311164580141944 \u2013 0.44762470588235 = 1.11802840576345141944\nSimilarly, we have calculated Gain(Region)=1.3; Gain(family income per year)=0; We can say that Gain is high for Region, so we have to select Region as root node. After the decision tree is built, tree pruning phase is applied, resulting in removing of the nodes (attributes) which are of user interest from the tree. Cross-validation technique analyzes the final constructed tree that estimate errors, and rebuilds the decision tree as used in WEKA tool discussed in Section 4 and Section 5. Some of the classification rules are skipped resulting in inadequate decision trees. So to avoid the above problems, in our approach, we propose algorithms discussed below (algorithm 4) which give priority preference to the nodes (attributes) for decision tree construction with hidden classification rules by swapping the priorities of attributes discussed in Section 3, and with an example in Section 4. The DMQL queries are used in this paper to understand the propose work clearly, these DMQL queries include our proposed algorithms integrated."}, {"heading": "2.3. Multi-level mining", "text": "The third step of decision tree construction method is multilevel mining. This combines decision tree induction of the generalized data obtained in Sections 2.1 and 2.2 (Attribute- oriented induction and relevance analysis) with knowledge in the concept hierarchies. The induction of decision trees is done at different levels of abstraction by employing the knowledge stored in the concept hierarchies. Furthermore, once a decision tree has been derived [5], the concept hierarchies can be used to generalize individual nodes in the tree, allowing attribute roll-up or drill- down, and reclassification of the data for the newly specified abstraction level. This depends on information entropy and the selection of attributes by the user.\nThe main idea is to construct a decision tree based on these proposed steps and prune it accordingly based on priority using Height Balancing tree concept [14], without losing any of\nDOI : 10.5121/ijist.2013.3103 33\nthe classification rules. The Decision Tree Construction Algorithm 1 is shown in Figure 2, which constructs a decision tree for the given training data. The stopping criteria, depends not only on maximum information entropy but also selection of the attributes by the users and its priority. In some cases if the attributes selected by the user are not in the data set then thresholds plays a vital role as previously addressed [7] for decision tree construction. Apart from generalization threshold, we used two other thresholds for improving the efficiency namely, exception threshold (\u20ac) and classification threshold (\u0138). Because of the recursive partitioning, some resulting data subsets may become so small that partitioning them further would have no statistically significant basis. These \u201cinsignificant\u201d data subsets are statistically determined by the exception threshold. If the portion of samples in a given subset is less than the threshold, further partitioning of the subset is halted. Instead, a leaf node is created which stores the subset and class distribution of the subset samples.\nThe splitting-criterion in the Algorithm 1, deals with both the threshold constraints and also information gain calculation for the data. In this process, the candidate with maximum information gain is selected as \u201ctest\u201d attribute and is partitioned. The condition, if the frequency of the majority class in a given subset is greater than the classification threshold, or if the percentage of training objects represented by the subset is less than the exception threshold, is used to terminate classification otherwise further classification will be performed recursively until all the attributes are not selected which is of users interest. The algorithm operates on training data that has been generalized to an intermediate level by AOI, and for which unimportant attributes have been removed by relevance analysis, if attributes selected are not present in the users list.\nAlgorithm 1. Decision Tree Construction Input: Pre-processed Dataset without noise.\nOutput: Final well-balanced Decision tree built based on priority attributes selected by users interest.\nDecisionTree (Node n, DataPartition D) { Apply AOI-Method to D to find splitting-criterion of node n\nLet k be the number of children of n if k>O do\nCreate k children c1, c2,..., ck of n Use splitting-criterion to partition D into D1, D2..., Dk for i = 1 to k do DecisionTree(ci, Di) end for\nendif\n//Assign priority to the nodes based on the attribute\nCall HeightBalancePriority(HeightBalance, Priority_Attribute)\n//Calls Algorithm 4\nALLOCATE highest information entropy attributes to\nPRIORITY attribute/\nIn this way, the tree is first fully grown based on these conditions. Then under the pruning process, we used two algorithms namely, NodeMerge and HeightBalance algorithms [11], which help in enhancing the efficiency in case of dynamic pruning by avoiding the bushy growth of decision trees, with HeightBalancePriority algorithm, gives priority and builds\nDOI : 10.5121/ijist.2013.3103 34\ndecision tree considering all the classification rules, that C4.5 classifier had neglected."}, {"heading": "2.4. Priority based Decision tree construction", "text": "The C 4.5 classifier gives preference to multi valued attributes, for which information entropy is calculated and the attribute that has the highest information entropy is selected as root node. This continues till the decision tree is fully grown.\nSimilarly in this priority based decision tree construction approach, Information entropy is calculated for all attributes using the concepts explained in sections 2.1, 2.2, and 2.3. But attributes that are selected by the user is given higher preference, next the priority is considered. During this, if the attribute selected by the user has less information entropy in such a case the information entropy is to be replaced by attribute that has highest Information entropy. This continues till all the attributes (which is of users interest) are selected and replaced based on higher information entropy of other attributes which is of least important to users.\nFinally the decision tree is grown with all attributes that is of users interest, with all the classification rules."}, {"heading": "3. PROPOSED DECISION TREE ALGORITHMS", "text": "The Decision tree construction algorithm integrates attribute-oriented induction and relevance analysis with modified version, of the C4.5 classifier is outlined in Algorithm 1. Algorithm 2, is used for merging of nodes as decision tree is built considering all the nodes, is shown in Figure 3.\nAlgorithm 2. Merging of nodes at multiple levels of abstraction when decision tree is constructed.\nInput: All Nodes with attributes and attribute values given Output: Merged decision tree is constructed.\nNodeMerge( NodeData_A, NodeData_B) { Check priorities for node_A and node_B;\nDuring the process of merging the nodes, the algorithm checks for assigned priorities for attribute values of distinct attributes during decision tree construction. The primary\nDOI : 10.5121/ijist.2013.3103 35\ndisadvantage of ordinary tree is that they attain very large heights in ordinary situation when large data sets are given to classifier as seen in C4.5. To overcome this problem Heightbalance algorithm 3 is used outlined in Figure 4 (a).\nDecision tree constructed is prioritized, by giving preference to specific attribute considering highest Information gain with the given algorithm 4, shown in Figure 4 (b).\nAlgorithm 3. Height balancing of decision tree.\nHeightBalance (union, link_AB)\nAlgorithm 4. Height balancing for decision tree with priority.\nInput: Nodes with Height balanced tree are given\nOutput: Prioritized Height balanced decision tree.\nHeightBalancePriority (HeightBalance, Priority_Attribute) {\nCheck for Priority in HeightBalance(Union,link_AB)\nEvaluate (priority_attribute (Attributevalue1, .., Attributevaluen))\n{\nSwitch(priority_attribute)\n{\nCase 1:\nPriority_Attribute=\u201fAttributevalue1\u201f //place it first Check InformationGain //calculate Information Gain\nAllocate the first Highest InformationGain //first priority Attrib.\nCase 2:\nPriority_Attribute=\u201fAttribute value2\u201f //place it second Check InformationGain //calculate Information Gain Allocate the second Highest Information Gain//second priority attrib.\nCase n:\nPriority_Attribute=\u201fAttributevaluen \u201f// place it n Check InformationGain //calculate Information Gain Allocate the nth Highest InformationGain // nth priority\nattrib.\nDefault: Priority _Attribute = \u201eInvalid\u201f } } Print(\u201cBalanced Reconstructed Tree\u201d) Check for path preservations; Generate Classification Rules;\n}\nFigure 4 (b). Prioritized Height balancing for Decision tree\nMost of operations on decision trees are time consuming, which depends on height of the tree, so it is desirable to keep the height as small as suggested in C4.5 leading to less classification rules, where few attributes are missed out when the decision tree constructed. Some of the classification rules found to be undesirable for the users, resulting in scalability and efficiency problem, which will be discussed in Section 4 with an example."}, {"heading": "4. PRIORITY BASED DECISION TREE CONSTRUCTION", "text": "Consider education dataset (edu_dataset) shown in Table 3, with following attributes avg_edu_level, country, and income_level with attribute values of type {Illiterate, fouryrcollege, twoyrcollege, graduateschool, elementaryschool, Phd}, {Cuba, USA, China, India} and {HIGH, MEDIUM, LOW} respectively.\nDOI : 10.5121/ijist.2013.3103 37\nWhen the decision tree is constructed using C4.5/J48 classifier [12] for the edu_dataset it has pruned the attribute values of country attribute as shown in Figure 5. The Constructed decision tree has attribute values of income_level only which reduces the scalability for large datasets.\nThe other important aspect is efficiency is not achieved, for proper evaluation of classification rules; the resultant outputs obtained using J48 classifier of WEKA TOOL [12], reveals that priority to be allocated for attribute values at each level of abstraction when the decision tree is built.\nThis is achieved with our proposed Algorithms discussed, and for simplicity the working of our algorithms shown, using modified DMQL query [9], with the example 4.1. The output obtained is shown in Figure 6.\nExample 4.1: Classification task. Classify Decision_Tree according to priority{country(India,USA,China,Cuba) attribute values} in relevance to income_level where attribute values for income_level count //leaf node(s) from edu_dataset\nIt is observed, some of the nodes are pruned in C4.5 classifier when decision tree, is built as shown in Figure 5. The outputs obtained after applying modified DMQL query that constitutes our proposed algorithms, for decision tree construction for the same edu_dataset, which is far better than earlier as shown in Figure 6, that considers all the attributes of users interest.\nDOI : 10.5121/ijist.2013.3103 38"}, {"heading": "5. PERFORMANCE EVALUATION", "text": "The classifiers like C4.5, ID3 and other classifiers (SLIQ, SPRINT) use decision tree induction method which follows greedy top-down approach recursively. The decision tree induction employs Attribute selection measure like Information Gain equations (1) and (2) discussed in Section 2, that selects the test attribute at each node in the tree, during the prepruning and post-pruning of branches in the decision tree construction. [1], [3], [4]. Outputs obtained using WEKA tool, C4.5 classifier is shown in Figure 7.\nAttribute is represented by ellipse whereas actual attribute values are represented in rectangular box with number specified throughout the figures drawn in this paper. The Decision tree constructed in Figure 7, depicts that out of four distinct attributes i.e., avg_edu_level and family_income_peryear attributes are only shown, remaining attributes like region and income_level are pruned from the tree based on attribute selection measure of information gain. It is also conveyed that the root node selected by C4.5 classifier, is avg_edu_level attribute always. Family_income_per_year attribute can be calculated by counting the number of leaf nodes shown in rectangular boxes, with two conditions only. The remaining conditions are skipped. Overall the number of classification rules is reduced to nine in the decision tree.\nClassification rules are retrieved by traversing the tree from root node to leaf nodes. To achieve this task of scalability and efficiency the NodeMerge and HeightBalance algorithms, applied by considering the concepts of priority based decision tree construction, followed by AOI (Attributed oriented induction), relevance analysis and multilevel mining technique as discussed in Section 3, at each level considering all nodes. This is achieved with modified DMQL query (constitutes our proposed algorithms), shown in example 5.1. The outputs obtained are shown in Figure 8.\nExample 5.1: Classification task.\nClassify Decision_Tree according to priority1{country(India,USA,China,Cuba) attribute values} according to priortiy2 {region(\u201dIndia.east\u201d, \u201dIndia.west\u201d,\n\u201dIndia.south\u201d,\u201dUSA.east\u201d, \u201dUSA.west\u201d, \u201dUSA.south\u201d, \u201dUSA.middle\u201d, \u201dCuba.north\u201d, \u201dCuba.south\u201d, \u201dChina.south\u201d,\u201dChina.east\u201d,\u201dChina.west\u201d) attribute values}\nin relevance to fam_inc_peryear with attribute values for region count //leaf node(s)\nfrom edu_dataset All the Classification rules are retrieved by traversing the tree from root node to leaf nodes\nDOI : 10.5121/ijist.2013.3103 39\naccurately without missing a single rule, as seen in the earlier case shown in Figure 7. (previous decision tree some of the attributes are skipped), In this way scalability for large databases with multiple attributes at each level can be achieved efficiently with less classifier errors. The Minimum Description Length (MDL) principle used to evaluate the cost of tree is discussed [13].\nIt is observed that in Figure 8, decision tree built, has considered multiple conditions for distinct attributes and attributes values given, which is of users interest. The parameters that can be compared with C4.5 classifier is shown in Table 4 with the proposed approach."}, {"heading": "6. CONCLUSION", "text": "The methodology to improve C4.5 Classifier discussed, and the deficiencies exits in C4.5 classifier analyzed using WEKA tool by constructing decision trees with different types of data sets, especially with large data sets, (for practical understanding, in our case we have taken T4I5K3N8 education data set) resulted in few classification rules as shown in Section 4, using C4.5 classifier.\nTo achieve scalability and efficiency in decision trees, many Classification rules are retrieved. NodeMerge and HeightBalance algorithms, applied by considering the concepts of priority based decision tree construction i.e HeightBalancePriority algorithm, as discussed in Section 3, at each level that consider all nodes. Modified DMQL query, is used for better understanding as discussed in Section 4 and 5 with many examples by taking education data set (edu_data set).\nPerformance is evaluated based on parameters mentioned in Table 4. The other parameters like classification of correctly classified instances and incorrectly classified instances can also be evaluated using precision and recall measures.\nDOI : 10.5121/ijist.2013.3103 40\nOur future approach is to use the constructed priority based Decision tree, for Predicting the missing and unknown values in very large data sets, and evaluate them using Confusion matrix."}], "references": [{"title": "Improved use of continuous attributes in C4.5", "author": ["J.R. Quinlan"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1996}, {"title": "A survey paper on Top 10 algorithm in data", "author": ["Xindong Wu", "Vipin Kumar", "J.Ross Quinlan", "Joydeep Ghosh", "Qiang Yang", "Hiroshi Motoda", "Geoffrey", "J. McLachlan", "Angus Ng", "Bing Liu", "Philip S. Yu", "Zhi-Hua Zhou", "Michael steinbach", "David J. Hand", "Dan Steinberg"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2007}, {"title": "SLIQ: A fast scalable classifier for data mining", "author": ["M. Mehta", "R. Agrawal", "J. Rissanen"], "venue": "In Proceeding of International Conference on Extending Database Technology (EDBT\u201f96),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1996}, {"title": "SPRINT: A scalable parallel classifier for data mining", "author": ["H J. Shafer", "R. Agrawal", "M. Mehta"], "venue": "In Proceedings of the 22nd International Conference Very Large Databases (VLDB),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1996}, {"title": "Data Mining Concepts and Techniques, Elsevier Publishers", "author": ["J. Han", "M. Kamber"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2006}, {"title": "Applied Categorical Data", "author": ["D.H. Freeman", "Jr."], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1987}, {"title": "Generalization and Decision Tree Induction: Efficient classification in Data Mining, for IEEE", "author": ["Micheline Kamber", "Lara Wistone", "Wan Gong", "Shan Chen", "Han"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1997}, {"title": "Decision Tree Construction from Multidimensional Structured Data, Sixth IEEE International Conference on Data Mining (ICDMW'06", "author": ["Tomoki Watanuma", "Tomonobu Ozaki", "Takenao Ohkawa"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2006}, {"title": "Data driven discovery of quantitative rules in relational databases, for IEEE Transactions Knowledge and data Engineering, 5:29-40", "author": ["J. Han", "Y. Cai", "N. Cercone"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1993}, {"title": "Intermediate decision trees,", "author": ["L.B. Holder"], "venue": "In Proc. 14th Int., Joint Conf. on Artificial Intelligence,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1995}, {"title": "Decision Tree Induction: Data Classification using Height-Balanced Tree, In Proceedings of International Conference of Information and Knowledge Engineering at (IKE \u201f09), U.S.A", "author": ["Mohd Mahmood Ali", "Lakshmi Rajamani"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "The WEKA Data Mining Software: An Update, for SIGKDD Explorations", "author": ["Mark Hall", "Eibe Frank", "Geoffrey Holmes", "Bernhard Pfahringer", "Peter Reutemann", "Ian H. Witten"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2009}, {"title": "Inferring Decision Trees Using the Minimum Description Length Principle", "author": ["J.R. Quinlan", "R.L. Rivest"], "venue": "Journal of Information and Computation,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1989}, {"title": "Decision Tree Induction: Priority Classification, for IEEE", "author": ["Mohammed Mahmood Ali", "Lakshmi Rajamani"], "venue": "Prof CSE , DE JNTU Hyderabad India. ms_qaseem@yahoo.com Dr. Lakshmi Rajamani, Professor, Dept. of C.S.E., Univ. College of Engg.,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "5 classifier [1],[2], a well-liked tree based classifier, is used to generate decision tree from a set of training examples.", "startOffset": 13, "endOffset": 16}, {"referenceID": 1, "context": "5 classifier [1],[2], a well-liked tree based classifier, is used to generate decision tree from a set of training examples.", "startOffset": 17, "endOffset": 20}, {"referenceID": 2, "context": "Induction of decision trees from very large training sets has been previously addressed by SLIQ [3] and SPRINT [4], but the data stored is without generalization.", "startOffset": 96, "endOffset": 99}, {"referenceID": 3, "context": "Induction of decision trees from very large training sets has been previously addressed by SLIQ [3] and SPRINT [4], but the data stored is without generalization.", "startOffset": 111, "endOffset": 114}, {"referenceID": 4, "context": "The generalization concept for evaluating classification rules using DMQL in data cube is proposed [5].", "startOffset": 99, "endOffset": 102}, {"referenceID": 4, "context": "This issue which is addressed in data generalization and summarization based characterization [5], consist of three steps attribute-oriented induction, where the low-level", "startOffset": 94, "endOffset": 97}, {"referenceID": 5, "context": "3103 28 data is generalized to high-level data using the concept hierarchies, relevance analysis [6], and multi-level mining, where decision trees can be induced at different levels of abstraction.", "startOffset": 97, "endOffset": 100}, {"referenceID": 10, "context": "Therefore, we propose a HeightBalancePriority algorithm which constitutes NodeMerge and HeightBalance algorithms [11] that allows merging of nodes in the decision tree thereby, discouraging over-partitioning of the data.", "startOffset": 113, "endOffset": 117}, {"referenceID": 7, "context": "This includes storage of generalized data in data cube to allow fast accessing [8].", "startOffset": 79, "endOffset": 82}, {"referenceID": 6, "context": "The top three methodologies are discussed in Generalization and Decision tree induction for efficient classification [7], we have also used the above three methodologies with slight improvements, where as the priority based decision tree construction using Information entropy, is discussed in Section 4.", "startOffset": 117, "endOffset": 120}, {"referenceID": 8, "context": "AOI [9], a knowledge discovery tool which allows the generalization of data, offers two major advantages for the mining of large databases.", "startOffset": 4, "endOffset": 7}, {"referenceID": 9, "context": "Generalization is performed with the use of attribute concept hierarchies, where the leaves of a given attribute\u2019s concept hierarchy correspond to the attribute\u2019s values in the data (referred to as primitive level data) [10].", "startOffset": 220, "endOffset": 224}, {"referenceID": 8, "context": "AOI also performs generalization by attribute removal [9].", "startOffset": 54, "endOffset": 57}, {"referenceID": 4, "context": "Furthermore, once a decision tree has been derived [5], the concept hierarchies can be used to generalize individual nodes in the tree, allowing attribute roll-up or drill- down, and reclassification of the data for the newly specified abstraction level.", "startOffset": 51, "endOffset": 54}, {"referenceID": 13, "context": "The main idea is to construct a decision tree based on these proposed steps and prune it accordingly based on priority using Height Balancing tree concept [14], without losing any of", "startOffset": 155, "endOffset": 159}, {"referenceID": 6, "context": "In some cases if the attributes selected by the user are not in the data set then thresholds plays a vital role as previously addressed [7] for decision tree construction.", "startOffset": 136, "endOffset": 139}, {"referenceID": 10, "context": "Then under the pruning process, we used two algorithms namely, NodeMerge and HeightBalance algorithms [11], which help in enhancing the efficiency in case of dynamic pruning by avoiding the bushy growth of decision trees, with HeightBalancePriority algorithm, gives priority and builds", "startOffset": 102, "endOffset": 106}, {"referenceID": 11, "context": "5/J48 classifier [12] for the edu_dataset it has pruned the attribute values of country attribute as shown in Figure 5.", "startOffset": 17, "endOffset": 21}, {"referenceID": 11, "context": "The other important aspect is efficiency is not achieved, for proper evaluation of classification rules; the resultant outputs obtained using J48 classifier of WEKA TOOL [12], reveals that priority to be allocated for attribute values at each level of abstraction when the decision tree is built.", "startOffset": 170, "endOffset": 174}, {"referenceID": 8, "context": "This is achieved with our proposed Algorithms discussed, and for simplicity the working of our algorithms shown, using modified DMQL query [9], with the example 4.", "startOffset": 139, "endOffset": 142}, {"referenceID": 0, "context": "[1], [3], [4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[1], [3], [4].", "startOffset": 5, "endOffset": 8}, {"referenceID": 3, "context": "[1], [3], [4].", "startOffset": 10, "endOffset": 13}, {"referenceID": 12, "context": "The Minimum Description Length (MDL) principle used to evaluate the cost of tree is discussed [13].", "startOffset": 94, "endOffset": 98}], "year": 2013, "abstractText": "Classification is widely used technique in the data mining domain, where scalability and efficiency are the immediate problems in classification algorithms for large databases. We suggest improvements to the existing C4.5 decision tree algorithm. In this paper attribute oriented induction (AOI) and relevance analysis are incorporated with concept hierarchy\u201fs knowledge and HeightBalancePriority algorithm for construction of decision tree along with Multi level mining. The assignment of priorities to attributes is done by evaluating information entropy, at different levels of abstraction for building decision tree using HeightBalancePriority algorithm. Modified DMQL queries are used to understand and explore the shortcomings of the decision trees generated by C4.5 classifier for education dataset and the results are compared with the proposed approach.", "creator": "Microsoft\u00ae Office Word 2007"}}}