{"id": "1303.4664", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Mar-2013", "title": "Large-Scale Learning with Less RAM via Randomization", "abstract": "we reduce the memory footprint of popular large - scale online learning methods by projecting our weight vector onto a coarse discrete set generating randomized matrices. compared to standard 32 - arrow float rounding, this reduces ram usage by more \u00b1 50 % during assessment and by up to 95 % when making predictions from a fixed model, with almost no loss function accuracy. we also show that randomized counting can be made to implement per - coordinate learning rates, improving model testing with substantially additional ram. how prove these memory - saving methods achieve regret guarantees similar to their exact variants. improved evaluation confirms excellent performance, dominating standard approaches across memory versus accuracy tradeoffs.", "histories": [["v1", "Tue, 19 Mar 2013 17:00:22 GMT  (59kb,D)", "http://arxiv.org/abs/1303.4664v1", "Extended version of ICML 2013 paper"]], "COMMENTS": "Extended version of ICML 2013 paper", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["daniel golovin", "d sculley", "h brendan mcmahan", "michael young"], "accepted": true, "id": "1303.4664"}, "pdf": {"name": "1303.4664.pdf", "metadata": {"source": "CRF", "title": "Large-Scale Learning with Less RAM via Randomization", "authors": ["Daniel Golovin", "Brendan McMahan"], "emails": ["dgg@google.com", "dsculley@google.com", "mcmahan@google.com", "mwyoung@google.com"], "sections": [{"heading": "1. Introduction", "text": "As the growth of machine learning data sets continues to accelerate, available machine memory (RAM) is an increasingly important constraint. This is true for training massive-scale distributed learning systems, such as those used for predicting ad click through rates (CTR) for sponsored search (Richardson et al., 2007; Craswell et al., 2008; Bilenko & Richardson, 2011; Streeter & McMahan, 2010) or for filtering email spam at scale (Goodman et al., 2007). Minimizing RAM use is also important on a single machine if we wish to utilize the limited memory of a fast GPU processor, or to simply use fast L1-cache more effectively. After training, memory cost remains a key consideration at prediction time as real-world models are often replicated to multiple machines to minimize prediction latency.\nThis is an extend version of the paper of the same name which appeared in ICML 2013. The main addition is Appendix A.3, which contains additional proofs.\nEfficient learning at peta-scale is commonly achieved by online gradient descent (OGD) (Zinkevich, 2003) or stochastic gradient descent (SGD), (e.g., Bottou & Bousquet, 2008), in which many tiny steps are accumulated in a weight vector \u03b2 \u2208 Rd. For large-scale learning, storing \u03b2 can consume considerable RAM, especially when datasets far exceed memory capacity and examples are streamed from network or disk.\nOur goal is to reduce the memory needed to store \u03b2. Standard implementations store coefficients in single precision floating-point representation, using 32 bits per value. This provides fine-grained precision needed to accumulate these tiny steps with minimal roundoff error, but has a dynamic range that far exceeds the needs of practical machine learning (see Figure 1).\nWe use coefficient representations that have more limited precision and dynamic range, allowing values to be stored cheaply. This coarse grid does not provide enough resolution to accumulate gradient steps without error, as the grid spacing may be larger than the updates. But we can obtain a provable safety guarantee through a suitable OGD algorithm that uses randomized rounding to project its coefficients onto the grid each round. The precision of the grid used on each round may be fixed in advance or changed adaptively as learning progresses. At prediction time, more aggressive rounding is possible because errors no longer accumulate.\nOnline learning on large feature spaces where some features occur very frequently and others are rare often benefits from per-coordinate learning rates, but this requires an additional 32-bit count to be stored for each coordinate. In the spirit of randomized rounding, we limit the memory footprint of this strategy by using an 8-bit randomized counter for each coordinate based on a variant of Morris\u2019s algorithm (1978). We show the resulting regret bounds are only slightly worse than the exact counting variant (Theorem 3.3), and empirical results show negligible added loss.\nar X\niv :1\n30 3.\n46 64\nv1 [\ncs .L\nG ]\n1 9\nM ar\n2 01\nContributions This paper gives the following theoretical and empirical results:\n1. Using a pre-determined fixed-point representation of coefficient values reduces cost from 32 to 16 bits per value, at the cost of a small linear regret term.\n2. The cost of a per-coordinate learning rate schedule can be reduced from 32 to 8 bits per coordinate using a randomized counting scheme.\n3. Using an adaptive per-coordinate coarse representation of coefficient values reduces memory cost further and yields a no\u2013regret algorithm.\n4. Variable-width encoding at prediction time allows coefficients to be encoded even more compactly (less than 2 bits per value in experiments) with negligible added loss.\nApproaches 1 and 2 are particularly attractive, as they require only small code changes and use negligible additional CPU time. Approaches 3 and 4 require more sophisticated data structures."}, {"heading": "2. Related Work", "text": "In addition to the sources already referenced, related work has been done in several areas.\nSmaller Models A classic approach to reducing memory usage is to encourage sparsity, for example via the Lasso (Tibshirani, 1996) variant of least-squares regression, and the more general application of L1 regularizers (Duchi et al., 2008; Langford et al., 2009; Xiao, 2009; McMahan, 2011). A more recent trend has been to reduce memory cost via the use of feature hashing (Weinberger et al., 2009). Both families of approaches are effective. The coarse encoding schemes reported here may be used in conjunction with these methods to give further reductions in memory usage.\nRandomized Rounding Randomized rounding schemes have been widely used in numerical computing and algorithm design (Raghavan & Tompson, 1987). Recently, the related technique of randomized counting has enabled compact language models\n(Van Durme & Lall, 2009). To our knowledge, this paper gives the first algorithms and analysis for online learning with randomized rounding and counting.\nPer-Coordinate Learning Rates Duchi et al. (2010) and McMahan & Streeter (2010) demonstrated that per-coordinate adaptive regularization (i.e., adaptive learning rates) can greatly boost prediction accuracy. The intuition is to let the learning rate for common features decrease quickly, while keeping the learning rate high for rare features. This adaptivity increases RAM cost by requiring an additional statistic to be stored for each coordinate, most often as an additional 32-bit integer. Our approach reduces this cost by using an 8-bit randomized counter instead, using a variant of Morris\u2019s algorithm (Morris, 1978)."}, {"heading": "3. Learning with Randomized Rounding and Probabilistic Counting", "text": "For concreteness, we focus on logistic regression with binary feature vectors x \u2208 {0, 1}d and labels y \u2208 {0, 1}. The model has coefficients \u03b2 \u2208 Rd, and gives predictions p\u03b2 (x) \u2261 \u03c3(\u03b2 \u00b7 x), where \u03c3(z) \u2261 1/(1+e\u2212z) is the logistic function. Logistic regression finds the model that minimizes the logistic\u2013loss L. Given a labeled example (x, y) the logistic\u2013loss is\nL(x, y;\u03b2) \u2261 \u2212y log (p\u03b2 (x))\u2212 (1\u2212 y) log (1\u2212 p\u03b2 (x))\nwhere we take 0 log 0 = 0. Here, we take log to be the natural logarithm. We define \u2016x\u2016p as the `p norm of a vector x; when the subscript p is omitted, the `2 norm is implied. We use the compressed summation notation g1:t \u2261 \u2211t s=1 gs for scalars, and similarly\nf1:t(x) \u2261 \u2211t s=1 fs(x) for functions.\nThe basic algorithm we propose and analyze is a variant of online gradient descent (OGD) that stores coefficients \u03b2 in a limited precision format using a discrete set ( Z)d. For each OGD update, we compute each new coefficient value in 64-bit floating point representation and then use randomized rounding to project the updated value back to the coarser representation.\nA useful representation for the discrete set ( Z)d is the Qn.m fixed-point representation. This uses n bits for the integral part of the value, and m bits for the fractional part. Adding in a sign bit results in a total of K = n + m + 1 bits per value. The value m may be fixed in advance, or set adaptively as described below. We use the method RandomRound from Algorithm 1 to project values onto this encoding.\nThe added CPU cost of fixed-point encoding and randomized rounding is low. Typically K is chosen to correspond to a machine integer (say K = 8 or 16),\nAlgorithm 1 OGD-Rand-1d\ninput: feasible set F = [\u2212R,R], learning rate schedule \u03b7t, resolution schedule t define fun Project (\u03b2) = max(\u2212R,min(\u03b2,R)) Initialize \u03b2\u03021 = 0 for t=1, . . . , T do\nPlay the point \u03b2\u0302t, observe gt \u03b2t+1 = Project ( \u03b2\u0302t \u2212 \u03b7tgt ) \u03b2\u0302t+1 \u2190 RandomRound(\u03b2t+1, t)\nfunction RandomRound(\u03b2, ) a\u2190 \u230a \u03b2 \u230b ; b\u2190 \u2308 \u03b2 \u2309 return { b with prob. (\u03b2 \u2212 a)/ a otherwise\nso converting back to a floating point representations requires a single integer-float multiplication (by = 2\u2212m). Randomized rounding requires a call to a pseudo-random number generator, which may be done in 18-20 flops. Overall, the added CPU overhead is negligible, especially as many large-scale learning methods are I/O bound reading from disk or network rather than CPU bound."}, {"heading": "3.1. Regret Bounds for Randomized Rounding", "text": "We now prove theoretical guarantees (in the form of upper bounds on regret) for a variant of OGD that uses randomized rounding on an adaptive grid as well as per-coordinate learning rates. (These bounds can also be applied to a fixed grid). We use the standard definition\nRegret \u2261 T\u2211 t=1 ft(\u03b2\u0302t)\u2212 arg min \u03b2\u2217\u2208F T\u2211 t=1 ft(\u03b2 \u2217)\ngiven a sequence of convex loss functions ft. Here the \u03b2\u0302t our algorithm plays are random variables, and since we allow the adversary to adapt based on the previously observed \u03b2\u0302t, the ft and post-hoc optimal \u03b2 \u2217 are also random variables. We prove bounds on expected regret, where the expectation is with respect to the randomization used by our algorithms (highprobability bounds are also possible). We consider regret with respect to the best model in the nondiscretized comparison class F = [\u2212R,R]d.\nWe follow the usual reduction from convex to linear functions introduced by Zinkevich (2003); see also Shalev-Shwartz (2012, Sec. 2.4). Further, since we consider the hyper-rectangle feasible set F = [\u2212R,R]d, the linear problem decomposes into n independent one-dimensional problems.1 In this setting, we consider OGD with randomized rounding to an adaptive\n1Extension to arbitrary feasible sets is possible, but\ngrid of resolution t on round t, and an adaptive learning rate \u03b7t. We then run one copy of this algorithm for each coordinate of the original convex problem, implying that we can choose the \u03b7t and t schedules appropriately for each coordinate. For simplicity, we assume the t resolutions are chosen so that \u2212R and +R are always gridpoints. Algorithm 1 gives the onedimensional version, which is run independently on each coordinate (with a different learning rate and discretization schedule) in Algorithm 2. The core result is a regret bound for Algorithm 1 (omitted proofs can be found in the Appendix):\nTheorem 3.1. Consider running Algorithm 1 with adaptive non-increasing learning-rate schedule \u03b7t, and discretization schedule t such that t \u2264 \u03b3\u03b7t for a constant \u03b3 > 0. Then, against any sequence of gradients g1, . . . , gT (possibly selected by an adaptive adversary) with |gt| \u2264 G, against any comparator point \u03b2\u2217 \u2208 [\u2212R,R], we have\nE[Regret(\u03b2\u2217)] \u2264 (2R) 2\n2\u03b7T +\n1 2 (G2 + \u03b32)\u03b71:T + \u03b3R\n\u221a T .\nBy choosing \u03b3 sufficiently small, we obtain an expected regret bound that is indistinguishable from the nonrounded version (which is obtained by taking \u03b3 = 0). In practice, we find simply choosing \u03b3 = 1 yields excellent results. With some care in the choice of norms used, it is straightforward to extend the above result to d dimensions. Applying the above algorithm on a per-coordinate basis yields the following guarantee:\nCorollary 3.2. Consider running Algorithm 2 on the feasible set F = [\u2212R,R]d, which in turn runs Algorithm 1 on each coordinate. We use percoordinate learning rates \u03b7t,i = \u03b1/\n\u221a \u03c4t,i with \u03b1 =\u221a 2R/ \u221a G2 + \u03b32, where \u03c4t,i \u2264 t is the number of nonzero gs,i seen on coordinate i on rounds s = 1, . . . , t. Then, against convex loss functions ft, with gt a subgradient of ft at \u03b2\u0302t, such that \u2200t, \u2016gt\u2016\u221e \u2264 G, we have\nE[Regret] \u2264 d\u2211 i=1 ( 2R \u221a 2\u03c4T,i(G2 + \u03b32) + \u03b3R \u221a \u03c4T,i ) .\nThe proof follows by summing the bound from Theorem 3.1 over each coordinate, considering only the rounds when gt,i 6= 0, and then using the inequality\u2211T t=1 1/ \u221a t \u2264 2 \u221a T to handle the sum of learning rates on each coordinate.\nThe core intuition behind this algorithm is that for features where we have little data (that is, \u03c4i is small, for\nchoosing the hyper-rectangle simplifies the analysis; in practice, projection onto the feasible set rarely helps performance.\nAlgorithm 2 OGD-Rand\ninput: feasible set F = [\u2212R,R]d, parameters \u03b1, \u03b3 > 0 Initialize \u03b2\u03021 = 0 \u2208 Rd; \u2200i, \u03c4i = 0 for t=1, . . . , T do\nPlay the point \u03b2\u0302t, observe loss function ft for i=1, . . . , d do\nlet gt,i = \u2207ft(xt)i if gt,i = 0 then continue \u03c4i \u2190 \u03c4i + 1 let \u03b7t,i = \u03b1/ \u221a \u03c4i and t,i = \u03b3\u03b7t,i\n\u03b2t+1,i \u2190 Project ( \u03b2\u0302t,i \u2212 \u03b7t,igt,i ) \u03b2\u0302t+1,i \u2190 RandomRound(\u03b2t+1,i, t,i)\nexample rare words in a bag-of-words representation, identified by a binary feature), using a fine-precision coefficient is unnecessary, as we can\u2019t estimate the correct coefficient with much confidence. This is in fact the same reason using a larger learning rate is appropriate, so it is no coincidence the theory suggests choosing t and \u03b7t to be of the same magnitude.\nFixed Discretization Rather than implementing an adaptive discretization schedule, it is more straightforward and more efficient to choose a fixed grid resolution, for example a 16-bit Qn.m representation is sufficient for many applications.2 In this case, one can apply the above theory, but simply stop decreasing the learning rate once it reaches say (= 2\u2212m). Then, the \u03b71:T term in the regret bound yields a linear term like O( T ); this is unavoidable when using a fixed resolution . One could let the learning rate continue to decrease like 1/ \u221a t, but this would provide no benefit; in fact, lower-bounding the learning-rate is known to allow online gradient descent to provide regret bounds against a moving comparator (Zinkevich, 2003).\nData Structures There are several viable approaches to storing models with variable\u2013sized coefficients. One can store all keys at a fixed (low) precision, then maintain a sequence of maps (e.g., as hashtables), each containing a mapping from keys to coefficients of increasing precision. Alternately, a simple linear probing hash\u2013table for variable length keys is efficient for a wide variety of distributions on key lengths, as demonstrated by Thorup (2009). With this data structure, keys and coefficient values can be treated as strings over 4-bit or 8-bit bytes, for example. Blandford & Blelloch (2008) provide yet another data structure: a compact dictionary for variable length keys. Finally, for a fixed model, one can write out the string\n2If we scale x \u2192 2x then we must take \u03b2 \u2192 \u03b2/2 to make the same predictions, and so appropriate choices of n and m must be data-dependent.\ns of all coefficients (without end of string delimiters), store a second binary string of length s with ones at the coefficient boundaries, and use any of a number of rank/select data structures to index into it, e.g., the one of Patrascu (2008)."}, {"heading": "3.2. Approximate Feature Counts", "text": "Online convex optimization methods typically use a learning rate that decreases over time, e.g., setting \u03b7t proportional to 1/ \u221a t. Per-coordinate learning rates require storing a unique count \u03c4i for each coordinate, where \u03c4i is the number of times coordinate i has appeared with a non-zero gradient so far. Significant space is saved by using a 8-bit randomized counting scheme rather than a 32-bit (or 64-bit) integer to store the d total counts. We use a variant of Morris\u2019 probabilistic counting algorithm (1978) analyzed by Flajolet (1985). Specifically, we initialize a counter C = 1, and on each increment operation, we increment C with probability p(C) = b\u2212C , where base b is a parameter. We estimate the count as \u03c4\u0303(C) = b C\u2212b b\u22121 , which is an unbiased estimator of the true count. We then use learning rates \u03b7t,i = \u03b1/ \u221a \u03c4\u0303t,i + 1, which ensures that even when \u03c4\u0303t,i = 0 we don\u2019t divide by zero.\nWe compute high-probability bounds on this counter in Lemma A.1. Using these bounds for \u03b7t,i in conjunction with Theorem 3.1, we obtain the following result (proof deferred to the appendix).\nTheorem 3.3. Consider running the algorithm of Corollary 3.2 under the assumptions specified there, but using approximate counts \u03c4\u0303i in place of the exact counts \u03c4i. The approximate counts are computed using the randomized counter described above with any base b > 1. Thus, \u03c4\u0303t,i is the estimated number of times gs,i 6= 0 on rounds s = 1, . . . , t, and the per\u2013coordinate learning rates are \u03b7t,i = \u03b1/ \u221a \u03c4\u0303t,i + 1. With an appropriate choice of \u03b1 we have\nE[Regret(g)] = o ( R \u221a G2 + \u03b32T 0.5+\u03b4 ) for all \u03b4 > 0,\nwhere the o-notation hides a small constant factor and the dependence on the base b.3"}, {"heading": "4. Encoding During Prediction Time", "text": "Many real-world problems require large-scale prediction. Achieving scale may require that a trained model be replicated to multiple machines (Bucilua\u030c et al., 2006). Saving RAM via rounding is especially attractive here, because unlike in training accumulated\n3Eq. (5) in the appendix provides a non-asymptotic (but more cumbersome) regret bound.\nroundoff error is no longer an issue. This allows even more aggressive rounding to be used safely.\nConsider a rounding a trained model \u03b2 to some \u03b2\u0302. We can bound both the additive and relative effect on logistic\u2013loss L(\u00b7) in terms of the quantity |\u03b2 \u00b7x\u2212 \u03b2\u0302 \u00b7x|:\nLemma 4.1 (Additive Error). Fix \u03b2, \u03b2\u0302 and (x, y). Let \u03b4 = |\u03b2 \u00b7 x\u2212 \u03b2\u0302 \u00b7 x|. Then the logistic\u2013loss satisfies\nL(x, y; \u03b2\u0302)\u2212 L(x, y;\u03b2) \u2264 \u03b4.\nProof. It is well known that \u2223\u2223\u2223\u2202L(x,y;\u03b2)\u2202\u03b2i \u2223\u2223\u2223 \u2264 1 for all x, y, \u03b2 and i, which implies the result.\nLemma 4.2 (Relative Error). Fix \u03b2, \u03b2\u0302 and (x, y) \u2208 {0, 1}d \u00d7 {0, 1}. Let \u03b4 = |\u03b2 \u00b7 x\u2212 \u03b2\u0302 \u00b7 x|. Then\nL(x, y; \u03b2\u0302)\u2212 L(x, y;\u03b2) L(x, y;\u03b2) \u2264 e\u03b4 \u2212 1.\nSee the appendix for a proof. Now, suppose we are using fixed precision numbers to store our model coefficients such as the Qn.m encoding described earlier, with a precision of . This induces a grid of feasible model coefficient vectors. If we randomly round each coefficient \u03b2i (where |\u03b2i| \u2264 2n) independently up or down to the nearest feasible value \u03b2\u0302i, such that\nE[\u03b2\u0302i] = \u03b2i, then for any x \u2208 {0, 1}d our predicted logodds ratio, \u03b2\u0302 \u00b7x is distributed as a sum of independent random variables {\u03b2\u0302i | xi = 1}.\nLet k = \u2016x\u20160. In this situation, note that |\u03b2 \u00b7 x \u2212 \u03b2\u0302 \u00b7 x| \u2264 \u2016x\u20161 = k, since |\u03b2i \u2212 \u03b2\u0302i| \u2264 for all i. Thus Lemma 4.1 implies\nL(x, y; \u03b2\u0302)\u2212 L(x, y;\u03b2) \u2264 \u2016x\u20161.\nSimilarly, Lemma 4.2 immediately provides an upper bound of e k \u2212 1 on relative logistic error; this bound is relatively tight for small k, and holds with probability one, but it does not exploit the fact that the randomness is unbiased and that errors should cancel out when k is large. The following theorem gives a bound on expected relative error that is much tighter for large k:\nTheorem 4.3. Let \u03b2\u0302 be a model obtained from \u03b2 using unbiased randomized rounding to a precision grid as described above. Then, the expected logistic\u2013 loss relative error of \u03b2\u0302 on any input x is at most 2 \u221a 2\u03c0k exp ( 2k/2 ) where k = \u2016x\u20160.\nAdditional Compression Figure 1 reveals that coefficient values are not uniformly distributed. Storing these values in a fixed-point representation means that individual values will occur many times. Basic information theory shows that the more common val-\nues may be encoded with fewer bits. The theoretical bound for a whole model with d coefficients is \u2212 \u2211d i=1 log p(\u03b2i) d bits per value, where p(v) is the probability of occurrence of v in \u03b2 across all dimensions d. Variable length encoding schemes may approach this limit and achieve further RAM savings."}, {"heading": "5. Experimental Results", "text": "We evaluated on both public and private large data sets. We used the public RCV1 text classification data set, specifically from Chang & Lin (2011). In keeping with common practice on this data set, the smaller \u201ctrain\u201d split of 20,242 examples was used for parameter tuning and the larger \u201ctest\u201d split of 677,399 examples was used for the full online learning experiments. We also report results from a private CTR data set of roughly 30M examples and 20M features, sampled from real ad click data from a major search engine. Even larger experiments were run on data sets of billions of examples and billions of dimensions, with similar results as those reported here.\nThe evaluation metrics for predictions are error rate for the RCV1 data, and AucLoss (or 1-AUC) relative to a control model for the CTR data. Lower values are better. Metrics are computed using progressive validation (Blum et al., 1999) as is standard for online learning: on each round a prediction is made for a given example and record for evaluation, and only after that is the model allowed to train on the example. We also report the number of bits per coordinate used.\nRounding During Training Our main results are given in Figure 2. The comparison baseline is online logistic regression using a single global learning rate and 32-bit floats to store coefficients. We also test the effect of per-coordinate learning rates with both 32- bit integers for exact counts and with 8-bit randomized counts. We test the range of tradeoffs available for fixed-precision rounding with randomized counts, varying the number of precision m in q2.m encoding to plot the tradeoff curve (cyan). We also test the range\nof tradeoffs available for adaptive-precision rounding with randomized counts, varying the precision scalar \u03b3 to plot the tradeoff curve (dark red). For all randomized counts a base of 1.1 was used. Other than these differences, the algorithms tested are identical.\nUsing a single global learning rate, a fixed q2.13 encoding saves 50% of the RAM at no added loss compared to the baseline. The addition of per-coordinate learning rates gives significant improvement in predictive performance, but at the price of added memory consumption, increasing from 32 bits per coordinate to 64 bits per coordinate in the baselines. Using randomized counts reduces this down to 40 bits per coordinate. However, both the fixed-precision and the adaptive precision methods give far better results, achieving the same excellent predictive performance as the 64-bit method with 24 bits per coefficient or less. This saves 62.5% of the RAM cost compared to the 64-bit method, and is still smaller than using 32-bit floats with a global learning rate.\nThe benefit of adaptive precision is only apparent on the larger CTR data set, which has a \u201clong tail\u201d distribution of support across features. However, it is useful to note that the simpler fixed-precision method also gives great benefit. For example, using q2.13 encoding for coefficient values and 8-bit randomized counters allows full-byte alignment in naive data structures.\nRounding at Prediction Time We tested the effect of performing coarser randomized rounding of a fully-trained model on the CTR data, and compared to the loss incurred using a 32-bit floating point representation. These results, given in Table 1, clearly support the theoretical analysis that suggests more aggressive rounding is possible at prediction time. Surprisingly coarse levels of precision give excellent results, with little or no loss in predictive performance. The memory savings achievable in this scheme are considerable, down to less than two bits per value for q2.7 with theoretically optimal encoding of the discrete values."}, {"heading": "6. Conclusions", "text": "Randomized storage of coefficient values provides an efficient method for achieving significant RAM savings both during training and at prediction time.\nWhile in this work we focus on OGD, similar randomized rounding schemes may be applied to other learning algorithms. The extension to algorithms that efficiently handle L1 regularization, like RDA (Xiao, 2009) and FTRL-Proximal (McMahan, 2011), is rela-\ntively straightforward.4 Large scale kernel machines, matrix decompositions, topic models, and other largescale learning methods may all be modifiable to take advantage of RAM savings through low precision randomized rounding methods."}, {"heading": "Acknowledgments", "text": "We would like to thank Matthew Streeter, Gary Holt, Todd Phillips, and Mark Rose for their help with this work."}, {"heading": "A. Appendix: Proofs", "text": "A.1. Proof of Theorem 3.1\nOur analysis extends the technique of Zinkevich (2003). Let \u03b2\u2217 be any feasible point (with possibly infinite precision coefficients). By the definition of \u03b2t+1,\n\u2016\u03b2t+1\u2212\u03b2\u2217\u20162 = \u2016\u03b2\u0302t\u2212\u03b2\u2217\u20162\u22122\u03b7tgt \u00b7 (\u03b2\u0302t\u2212\u03b2\u2217)+\u03b72t \u2016gt\u20162.\nRearranging the above yields\ngt \u00b7 (\u03b2\u0302t \u2212 \u03b2\u2217)\n\u2264 1 2\u03b7t\n( \u2016\u03b2\u0302t \u2212 \u03b2\u2217\u20162 \u2212 \u2016\u03b2t+1 \u2212 \u03b2\u2217\u20162 ) + \u03b7t 2 \u2016gt\u20162\n= 1\n2\u03b7t\n( \u2016\u03b2\u0302t \u2212 \u03b2\u2217\u20162 \u2212 \u2016\u03b2\u0302t+1 \u2212 \u03b2\u2217\u20162 ) + \u03b7t 2 \u2016gt\u20162 + \u03c1t,\nwhere the \u03c1t = 1\n2\u03b7t\n( \u2016\u03b2\u0302t+1 \u2212 \u03b2\u2217\u20162 \u2212 \u2016\u03b2t+1 \u2212 \u03b2\u2217\u20162 ) terms will capture the extra regret due to the randomized rounding. Summing over t, and following Zinkevich\u2019s analysis, we obtain a bound of\nRegret(T ) \u2264 (2R) 2 2\u03b7T + \u2016gt\u201622 2 \u03b71:T + \u03c11:T .\nIt remains to bound \u03c11:T . Letting dt = \u03b2t+1 \u2212 \u03b2\u0302t+1 and at = dt/\u03b7t, we have\n\u03c11:T = T\u2211 t=1 1 2\u03b7t ( (\u03b2\u0302t+1 \u2212 \u03b2\u2217)2 \u2212 (\u03b2t+1 \u2212 \u03b2\u2217)2 ) \u2264\nT\u2211 t=1 1 2\u03b7t ( \u03b2\u03022t+1 \u2212 \u03b22t+1 ) + \u03b2\u2217a1:T\n\u2264 T\u2211 t=1 1 2\u03b7t ( \u03b2\u03022t+1 \u2212 \u03b22t+1 ) +R |a1:T | .\nWe bound each of the terms in this last expression in expectation. First, note |dt| \u2264 t \u2264 \u03b3\u03b7t by definition of the resolution of the rounding grid, and so\n4Some care must be taken to store a discretized version of a scaled gradient sum, so that the dynamic range remains roughly unchanged as learning progresses.\n|at| \u2264 \u03b3. Further E[dt] = 0 since the rounding is unbiased. Letting W = |a1:T |, by Jensen\u2019s inequality we have E[W ]2 \u2264 E[W 2]. Thus, E[|a1:T |] \u2264\u221a\nE[(a1:T )2] = \u221a\nVar(a1:T ), where the last equality follows from the fact E[a1:T ] = 0. The at are not independent given an adaptive adversary.5 Nevertheless, consider any as and at with s < t. Since both have expectation zero, Cov(as, at) = E[asat]. By construction, E[at | gt, \u03b2t,histt] = 0, where histt is the full history of the game up until round t, which includes as in particular. Thus\nCov(as, at) = E[asat] = E [ E[asat | gt, \u03b2t,histt] ] = 0.\nFor all t, |at| \u2264 \u03b3 so Var(at) \u2264 \u03b32, and Var(a1:T ) =\u2211 t Var(at) \u2264 \u03b32T . Thus, E[|a1:T |] \u2264 \u03b3 \u221a T .\nNext, consider E[\u03b2\u03022t+1 \u2212 \u03b22t+1 | \u03b2t+1]. Since E[\u03b2\u0302t+1 | \u03b2t+1] = \u03b2t+1, for any shift s \u2208 R, we have E [ (\u03b2\u0302t+1 \u2212\ns)2 \u2212 (\u03b2t+1 \u2212 s)2 | \u03b2t+1 ] = E [ \u03b2\u03022t+1 \u2212 \u03b22t+1 | \u03b2t+1 ] , and so taking s = \u03b2t+1,\n1 \u03b7t E [ \u03b2\u03022t+1 \u2212 \u03b22t+1 | \u03b2t+1 ] = 1 \u03b7t E [ (\u03b2\u0302t+1 \u2212 \u03b2t+1)2 | \u03b2t+1 ] \u2264 2 t\n\u03b7t \u2264 \u03b3 2\u03b72t \u03b7t = \u03b32\u03b7t.\nCombining this result with E[|a1:T |] \u2264 \u03b3 \u221a T , we have\nE [\u03c11:T ] \u2264 \u03b32\u03b71:T + \u03b3R \u221a T ,\nwhich completes the proof.\nA.2. Approximate Counting\nWe first provide high\u2013probability bounds for the approximate counter.\nLemma A.1. Fix T and t \u2264 T . Let Ct+1 be the value of the counter after t increment operations using the approximate counting algorithm described in Section 3.2 with base b > 1. Then, for all c > 0, the estimated count \u03c4\u0303(Ct+1) satisfies\nPr [ \u03c4\u0303(Ct+1) <\nt bc log(T ) \u2212 1 ] \u2264 1 T c\u22121 (1)\nand\nPr [ \u03c4\u0303(Ct+1) > et\nb\u2212 1 b \u221a 2c logb(T )+2\n] \u2264 1\nT c . (2)\nBoth T and c are essentially parameters of the bound; in the Eq. (2), any choices of T and c that keep T c\n5For example the adversary could ensure at+1 = 0 (by playing gt+1 = 0) iff at > 0.\nconstant produce the same bound. In the first bound, the result is sharpest when T = t, but it will be convenient to set T equal to the total number of rounds so that we can easily take a union bound (in the proof of Theorem 3.3).\nProof of Lemma A.1. Fix a sequence of T increments, and let Ci denote the value of the approximate counter at the start of increment number i, so C1 = 1. Let Xj = |{i : Ci = j}|, a random variable for the number of increments for which the counter stayed at j.\nWe start with the bound of Eq. (1). When C = j, the update probability is pj = p(j) = b\n\u2212j , so for any `j we have Xj \u2265 `j with probability at most (1\u2212 pj)`j \u2264 exp(\u2212pj)`j = exp(\u2212pj`j) since (1\u2212 x) \u2264 exp(\u2212x) for all x. To make this at most T\u2212c it suffices to take `j = c(log T )/pj = cb\nj log T . Taking a (rather loose) union bound over j = 1, 2, . . . , T , we have\nPr [ \u2203j, Xj > cbj log T ] \u2264 1/T c\u22121.\nFor Eq. (1), it suffices to show that if this does not occur, then \u03c4\u0303(Ct) \u2265 t/(bc log(T ))\u22121. Note \u2211Ct j=1Xj \u2265 t. With our supposition that Xj \u2264 cbj log T for all j, this implies t \u2264 \u2211Ct j=1 cb j log T = cb log T ( bCt\u22121 b\u22121 ) , and\nthus Ct \u2265 logb ( t(b\u22121) bc log T + 1 ) . Since \u03c4\u0303 is monotonically increasing and b > 1, simple algebra then shows \u03c4\u0303(Ct+1) \u2265 \u03c4\u0303(Ct) \u2265 t/(bc log(T ))\u2212 1.\nNext consider the bound of Eq. (2). Let j0 be the minimum value such that p(j0) \u2264 1/et, and fix k \u2265 0. Then Ct+1 \u2265 j0 + k implies the counter was incremented k times with an increment probability at most p(j0). Thus,\nPr[Ct \u2265 j0 + k] \u2264 ( t\nk ) j0+k\u22121\u220f j=j0 p(j)\n\u2264 ( te\nk )kk\u22121\u220f j=0 p(j0)b \u2212j  = ( te\nk\n)k p(j0) k b\u2212k(k\u22121)/2\n\u2264 k\u2212k \u00b7 b\u2212k(k\u22121)/2\nNote that j0 \u2264 dlogb (et)e. Taking k = \u221a\n2c logb(T )+1 is sufficient to ensure this probability is at most T\u2212c, since k\u2212k \u2264 1 and k2 \u2212 k \u2265 2c logb T . Observing that \u03c4\u0303 ( dlogb (et)e+ \u221a 2c logb(T ) + 1 ) \u2264 etb\u22121b \u221a 2c logb(T )+2 completes the proof.\nProof of Theorem 3.3. We prove the bound for the one-dimensional case; the general bound then follows by summing over dimensions. Since we consider a single dimension, we assume |gt| > 0 on all rounds. This is without loss of generality, because we can implicitly skip all rounds with zero gradients, which means we don\u2019t need to make the distinction between t and \u03c4t,i. We abuse notation slightly by defining \u03c4\u0303t \u2261 \u03c4\u0303(Ct+1) \u2248 t = \u03c4t for the approximate count on round t. We begin from the bound\nE[Regret] \u2264 (2R) 2\n2\u03b7T +\n1 2 (G2 + \u03b32)\u03b71:t + \u03b3R\n\u221a T .\nof Theorem 3.1, with learning rates \u03b7t = \u03b1/ \u221a \u03c4\u0303t + 1. Lemma A.1 with c = 2.5 then implies\nPr[\u03c4\u0303t + 1 < k1t] \u2264 1\nT 1.5 and Pr[\u03c4\u0303t > k2t] \u2264\n1\nT 2.5 ,\nwhere k1 = 1/(bc log T ) and k2 = eb \u221a 2c logb T+2\nb\u22121 . A union bound on t = 1, ..., T on the first bound implies with probability 1\u2212 1\u221a\nT we have \u2200t, \u03c4\u0303t + 1 \u2265 k1t, so\n\u03b71:T = T\u2211 t=1 \u03b1\u221a \u03c4\u0303t + 1 \u2264 1\u221a k1 T\u2211 t=1 \u03b1\u221a t \u2264 2\u03b1 \u221a T\u221a k1 , (3)\nwhere we have used the inequality \u2211T t=1 1\u221a t \u2264 2 \u221a T . Similarly, the second inequality implies with probability at least 1\u2212 1T 2.5 ,\n\u03b7T = \u03b1\u221a \u03c4\u0303T + 1 \u2265 \u03b1\u221a k2T + 1 . (4)\nTaking a union bound, Eqs. (3) and (4) hold with probability at least 1\u22122/ \u221a T , and so at least one fails with probability at most 2/ \u221a T . Since ft(\u03b2)\u2212ft(\u03b2\u2032) \u2264 2GR for any \u03b2, \u03b2\u2032 \u2208 [\u2212R,R] (using the convexity of ft and the bound on the gradients G), on any run of the algorithm, regret is bounded by 2RGT . Thus, these failed cases contribute at most 4RG \u221a T to the expected regret bound.\nNow suppose Eqs. (3) and (4) hold. Choosing \u03b1 = R\u221a G2+\u03b32 minimizes the dependence on the other constants, and note for any \u03b4 > 0, both 1\u221a k1 and \u221a k2 are o(T \u03b4). Thus, when Eqs. (3) and (4) hold,\nE[Regret] \u2264 (2R) 2\n2\u03b7T +\n1 2 (G2 + \u03b32)\u03b71:t + \u03b3R\n\u221a T\n\u2264 2R 2 \u221a k2T + 1\n\u03b1 + (G2 + \u03b32) \u03b1 \u221a T\u221a k1 + \u03b3R \u221a T\n= o ( R \u221a G2 + \u03b32T 0.5+\u03b4 ) .\nAdding 4RG \u221a T for the case when the high-probability statements fail still leaves the same bound.\nIt follows from the proof that we have the more precise but cumbersome upper bound on E[Regret]:\n2R2 \u221a k2T + 1\n\u03b1 + (G2 + \u03b32) \u03b1 \u221a T\u221a k1 + \u03b3R \u221a T + 4RG \u221a T .\n(5)\nA.3. Encoding During Prediction Time\nWe use the following well\u2013known inequality, which is a direct corollary of the Azuma\u2013Hoeffding inequality. For a proof, see (Chung & Lu, 2006).\nTheorem A.2. Let X1, . . . , Xd be independent random variables such that for each i, there is a constant ci such that |Xi \u2212 E [Xi] | \u2264 ci, always. Let X = \u2211d i=1Xi. Then Pr[|X \u2212E [X] | \u2265 t] \u2264\n2 exp{\u2212t2/2 \u2211 i c 2 i }.\nAn immediate consequence is the following large deviation bound on \u03b4 = |\u03b2 \u00b7 x\u2212 \u03b2\u0302 \u00b7 x|:\nLemma A.3. Let \u03b2\u0302 be a model obtained from \u03b2 using unbiased randomized rounding to a precision grid. Fix x, and let Z = \u03b2\u0302 \u00b7 x be the random predicted logodds ratio. Then\nPr[|Z \u2212 \u03b2 \u00b7 x| \u2265 t] \u2264 2 exp ( \u2212t2\n2 2\u2016x\u20160\n)\nLemmas 4.1 and 4.2 provide bounds in terms of the quantity |\u03b2 \u00b7x\u2212\u03b2\u0302 \u00b7x|. The former is proved in Section 4; we now provide a proof of the latter.\nProof of Lemma 4.2 We claim that the relative error is bounded as\nL(x, y; \u03b2\u0302)\u2212 L(x, y;\u03b2) L(x, y;\u03b2) \u2264 e\u03b4 \u2212 1, (6)\nor equivalently, that that L(x, y; \u03b2\u0302) \u2264 e\u03b4L(x, y;\u03b2), where \u03b4 \u2261 |\u03b2 \u00b7 x \u2212 \u03b2\u0302 \u00b7 x| as before. We will argue the case in which y = 1; the y = 0 case is analogous. Let z = \u03b2 \u00b7 x, and z\u0302 = \u03b2\u0302 \u00b7 x; then, when y = 1,\nL(x, y, \u03b2) = log(1 + exp(\u2212z)),\nand similarly for \u03b2\u0302 and z\u0302. If z\u0302 > z then L(x, y; \u03b2\u0302) is less than L(x, y;\u03b2), which immediately implies the claim. Thus, we need only consider the case when z\u0302 = z \u2212 \u03b4. Then, the claim of Eq. (6) is equivalent to\nlog (1 + exp (\u2212z + \u03b4)) \u2264 exp(\u03b4) log (1 + exp (\u2212z)) ,\nor equivalently,\n1 + exp (\u2212z + \u03b4) \u2264 (1 + exp (\u2212z))exp(\u03b4) .\nLet w \u2261 exp (\u03b4) and u \u2261 exp (\u2212z). Then, we can rewrite the last line as 1+wu \u2264 (1+u)w, which is true by Bernoulli\u2019s inequality, since u \u2265 0 and w \u2265 1.\nProof of Theorem 4.3 Let R = L(x,y;\u03b2\u0302)\u2212L(x,y;\u03b2)L(x,y;\u03b2) denote the relative error due to rounding, and let R(\u03b4) be the worst case expected relative error given \u03b4 = |\u03b2\u0302 \u00b7 x\u2212 \u03b2 \u00b7 x|. Let R\u0304 \u2261 e\u03b4 \u2212 1. Then, by Lemma 4.2, R(\u03b4) \u2264 R\u0304(\u03b4). It is sufficient to prove a suitable upper bound on E [ R\u0304 ] . First, for r \u2265 0,\nPr [ R\u0304 \u2265 r ] = Pr [ e\u03b4 \u2212 1 \u2265 r ] = Pr[\u03b4 \u2265 log(r + 1)]\n\u2264 2 exp ( \u2212 log2(r + 1)\n2 2\u2016x\u20160\n) . [Lemma A.3]\nUsing this, we bound the expectation of R\u0304 as follows:\nE[R\u0304] = \u222b \u221e r=0 Pr [ R\u0304 \u2265 r ] dr\n\u2264 2 \u222b \u221e r=0 exp ( \u2212 log2(r + 1) 2 2\u2016x\u20160 ) dr,\nand since the function being integrated is non-negative on (\u22121,\u221e),\n\u2264 2 \u222b \u221e r=\u22121 exp ( \u2212 log2(r + 1) 2 2\u2016x\u20160 ) dr\n= 2 \u221a 2\u03c0\u2016x\u20160 exp ( 2\u2016x\u20160\n2\n) ,\nwhere the last line follows after straightforward calculus. A slightly tighter bound (replacing the leading 2 with 1 + Erf( \u221a \u2016x\u20160/ \u221a 2)) can be obtained if one does not make the change in the lower limit of integration."}], "references": [{"title": "Predictive client-side profiles for personalized advertising", "author": ["Bilenko", "Mikhail", "Richardson", "Matthew"], "venue": "In Proceedings of the 17th ACM SIGKDD international conference on Knowledge discovery and data mining,", "citeRegEx": "Bilenko et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Bilenko et al\\.", "year": 2011}, {"title": "Compact dictionaries for variable-length keys and data with applications", "author": ["Blandford", "Daniel K", "Blelloch", "Guy E"], "venue": "ACM Trans. Algorithms,", "citeRegEx": "Blandford et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Blandford et al\\.", "year": 2008}, {"title": "Beating the hold-out: bounds for k-fold and progressive crossvalidation", "author": ["Blum", "Avrim", "Kalai", "Adam", "Langford", "John"], "venue": "In Proceedings of the twelfth annual conference on Computational learning theory,", "citeRegEx": "Blum et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Blum et al\\.", "year": 1999}, {"title": "The tradeoffs of large scale learning", "author": ["Bottou", "L\u00e9on", "Bousquet", "Olivier"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Bottou et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Bottou et al\\.", "year": 2008}, {"title": "LIBSVM: A library for support vector machines", "author": ["Chang", "Chih-Chung", "Lin", "Chih-Jen"], "venue": "ACM Transactions on Intelligent Systems and Technology,", "citeRegEx": "Chang et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Chang et al\\.", "year": 2011}, {"title": "An experimental comparison of click positionbias models", "author": ["Craswell", "Nick", "Zoeter", "Onno", "Taylor", "Michael", "Ramsey", "Bill"], "venue": "In Proceedings of the international conference on Web search and web data mining,", "citeRegEx": "Craswell et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Craswell et al\\.", "year": 2008}, {"title": "Efficient projections onto the l1ball for learning in high dimensions", "author": ["Duchi", "John", "Shalev-Shwartz", "Shai", "Singer", "Yoram", "Chandra", "Tushar"], "venue": "In Proceedings of the 25th international conference on Machine learning,", "citeRegEx": "Duchi et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Duchi et al\\.", "year": 2008}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["Duchi", "John", "Hazan", "Elad", "Singer", "Yoram"], "venue": "In COLT,", "citeRegEx": "Duchi et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Duchi et al\\.", "year": 2010}, {"title": "Approximate counting: A detailed analysis", "author": ["Flajolet", "Philippe"], "venue": "BIT, 25(1):113\u2013134,", "citeRegEx": "Flajolet and Philippe.,? \\Q1985\\E", "shortCiteRegEx": "Flajolet and Philippe.", "year": 1985}, {"title": "Spam and the ongoing battle for the inbox", "author": ["Goodman", "Joshua", "Cormack", "Gordon V", "Heckerman", "David"], "venue": "Commun. ACM, 50(2),", "citeRegEx": "Goodman et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Goodman et al\\.", "year": 2007}, {"title": "Sparse online learning via truncated gradient", "author": ["Langford", "John", "Li", "Lihong", "Zhang", "Tong"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Langford et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Langford et al\\.", "year": 2009}, {"title": "Follow-the-Regularized-Leader and Mirror Descent: Equivalence Theorems and L1 Regularization", "author": ["McMahan", "H. Brendan"], "venue": "In Proceedings of the 14th International Conference on Artificial Intelligence and Statistics (AISTATS),", "citeRegEx": "McMahan and Brendan.,? \\Q2011\\E", "shortCiteRegEx": "McMahan and Brendan.", "year": 2011}, {"title": "Adaptive bound optimization for online convex optimization", "author": ["McMahan", "H. Brendan", "Streeter", "Matthew"], "venue": "In COLT,", "citeRegEx": "McMahan et al\\.,? \\Q2010\\E", "shortCiteRegEx": "McMahan et al\\.", "year": 2010}, {"title": "Counting large numbers of events in small registers", "author": ["Morris", "Robert"], "venue": "Communications of the ACM,", "citeRegEx": "Morris and Robert.,? \\Q1978\\E", "shortCiteRegEx": "Morris and Robert.", "year": 1978}, {"title": "Randomized rounding: a technique for provably good algorithms and algorithmic proofs", "author": ["Raghavan", "Prabhakar", "Tompson", "Clark D"], "venue": "Combinatorica, 7(4),", "citeRegEx": "Raghavan et al\\.,? \\Q1987\\E", "shortCiteRegEx": "Raghavan et al\\.", "year": 1987}, {"title": "Predicting clicks: estimating the click-through rate for new ads", "author": ["Richardson", "Matthew", "Dominowska", "Ewa", "Ragno", "Robert"], "venue": "In Proceedings of the 16th international conference on World Wide Web,", "citeRegEx": "Richardson et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Richardson et al\\.", "year": 2007}, {"title": "Online learning and online convex optimization", "author": ["Shalev-Shwartz", "Shai"], "venue": "Foundations and Trends in Machine Learning,", "citeRegEx": "Shalev.Shwartz and Shai.,? \\Q2012\\E", "shortCiteRegEx": "Shalev.Shwartz and Shai.", "year": 2012}, {"title": "Less regret via online conditioning", "author": ["Streeter", "Matthew J", "McMahan", "H. Brendan"], "venue": "CoRR, abs/1002.4862,", "citeRegEx": "Streeter et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Streeter et al\\.", "year": 2010}, {"title": "String hashing for linear probing", "author": ["Thorup", "Mikkel"], "venue": "In Proceedings of the 20th ACM-SIAM Symposium on Discrete Algorithms,", "citeRegEx": "Thorup and Mikkel.,? \\Q2009\\E", "shortCiteRegEx": "Thorup and Mikkel.", "year": 2009}, {"title": "Regression shrinkage and selection via the lasso", "author": ["Tibshirani", "Robert"], "venue": "Journal of the Royal Statistical Society. Series B (Methodological),", "citeRegEx": "Tibshirani and Robert.,? \\Q1996\\E", "shortCiteRegEx": "Tibshirani and Robert.", "year": 1996}, {"title": "Probabilistic counting with randomized storage", "author": ["Van Durme", "Benjamin", "Lall", "Ashwin"], "venue": "In Proceedings of the 21st international jont conference on Artifical intelligence,", "citeRegEx": "Durme et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Durme et al\\.", "year": 2009}, {"title": "Feature hashing for large scale multitask learning", "author": ["Weinberger", "Kilian", "Dasgupta", "Anirban", "Langford", "John", "Smola", "Alex", "Attenberg", "Josh"], "venue": "In Proceedings of the 26th Annual International Conference on Machine Learning,", "citeRegEx": "Weinberger et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Weinberger et al\\.", "year": 2009}, {"title": "Dual averaging method for regularized stochastic learning and online optimization", "author": ["Xiao", "Lin"], "venue": "In NIPS,", "citeRegEx": "Xiao and Lin.,? \\Q2009\\E", "shortCiteRegEx": "Xiao and Lin.", "year": 2009}, {"title": "Online convex programming and generalized infinitesimal gradient ascent", "author": ["Zinkevich", "Martin"], "venue": "In ICML,", "citeRegEx": "Zinkevich and Martin.,? \\Q2003\\E", "shortCiteRegEx": "Zinkevich and Martin.", "year": 2003}], "referenceMentions": [{"referenceID": 15, "context": "This is true for training massive-scale distributed learning systems, such as those used for predicting ad click through rates (CTR) for sponsored search (Richardson et al., 2007; Craswell et al., 2008; Bilenko & Richardson, 2011; Streeter & McMahan, 2010) or for filtering email spam at scale (Goodman et al.", "startOffset": 154, "endOffset": 256}, {"referenceID": 5, "context": "This is true for training massive-scale distributed learning systems, such as those used for predicting ad click through rates (CTR) for sponsored search (Richardson et al., 2007; Craswell et al., 2008; Bilenko & Richardson, 2011; Streeter & McMahan, 2010) or for filtering email spam at scale (Goodman et al.", "startOffset": 154, "endOffset": 256}, {"referenceID": 9, "context": ", 2008; Bilenko & Richardson, 2011; Streeter & McMahan, 2010) or for filtering email spam at scale (Goodman et al., 2007).", "startOffset": 99, "endOffset": 121}, {"referenceID": 6, "context": "Smaller Models A classic approach to reducing memory usage is to encourage sparsity, for example via the Lasso (Tibshirani, 1996) variant of least-squares regression, and the more general application of L1 regularizers (Duchi et al., 2008; Langford et al., 2009; Xiao, 2009; McMahan, 2011).", "startOffset": 219, "endOffset": 289}, {"referenceID": 10, "context": "Smaller Models A classic approach to reducing memory usage is to encourage sparsity, for example via the Lasso (Tibshirani, 1996) variant of least-squares regression, and the more general application of L1 regularizers (Duchi et al., 2008; Langford et al., 2009; Xiao, 2009; McMahan, 2011).", "startOffset": 219, "endOffset": 289}, {"referenceID": 21, "context": "A more recent trend has been to reduce memory cost via the use of feature hashing (Weinberger et al., 2009).", "startOffset": 82, "endOffset": 107}, {"referenceID": 6, "context": "Per-Coordinate Learning Rates Duchi et al. (2010) and McMahan & Streeter (2010) demonstrated that per-coordinate adaptive regularization (i.", "startOffset": 30, "endOffset": 50}, {"referenceID": 6, "context": "Per-Coordinate Learning Rates Duchi et al. (2010) and McMahan & Streeter (2010) demonstrated that per-coordinate adaptive regularization (i.", "startOffset": 30, "endOffset": 80}, {"referenceID": 2, "context": "Metrics are computed using progressive validation (Blum et al., 1999) as is standard for online learning: on each round a prediction is made for a given example and record for evaluation, and only after that is the model allowed to train on the example.", "startOffset": 50, "endOffset": 69}], "year": 2013, "abstractText": "We reduce the memory footprint of popular large-scale online learning methods by projecting our weight vector onto a coarse discrete set using randomized rounding. Compared to standard 32-bit float encodings, this reduces RAM usage by more than 50% during training and by up to 95% when making predictions from a fixed model, with almost no loss in accuracy. We also show that randomized counting can be used to implement percoordinate learning rates, improving model quality with little additional RAM. We prove these memory-saving methods achieve regret guarantees similar to their exact variants. Empirical evaluation confirms excellent performance, dominating standard approaches across memory versus accuracy tradeoffs.", "creator": "TeX"}}}