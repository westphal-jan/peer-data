{"id": "1402.0929", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Feb-2014", "title": "Input Warping for Bayesian Optimization of Non-Stationary Functions", "abstract": "bayesian optimization hasn proven to be a highly effective methodology for designing global optimization technique unknown, expensive robust multimodal functions. my ability to automatically model distributions over functions is critical to the effectiveness of bayesian reasoning. a gaussian processes provide a flexible prior over functions which can be queried efficiently, there are various classes of functions that remain difficult to describe. one of 3 most frequently occurring of these is the domain of non - stationary functions. the optimization context the learning of machine learning problems is a problem domain in which parameters are often manually transformed a priori, for example by optimizing in \" log - space, \" to mitigate the effects of spatially - varying length scale. we develop a methodology for automatically learning a wide family of bijective transformations or warpings of the input space using the beta cumulative distribution function. we further extend the warping framework to multi - task bayesian optimization so that multiple tasks can be warped into a jointly compiled space. on a set of challenging benchmark dependent tasks, us observe that the local process warping greatly improves on the state - of - the - art, producing better bounds adequately versus safer reliably.", "histories": [["v1", "Wed, 5 Feb 2014 03:55:39 GMT  (955kb,D)", "https://arxiv.org/abs/1402.0929v1", null], ["v2", "Thu, 20 Feb 2014 22:00:38 GMT  (955kb,D)", "http://arxiv.org/abs/1402.0929v2", null], ["v3", "Wed, 11 Jun 2014 20:32:11 GMT  (956kb,D)", "http://arxiv.org/abs/1402.0929v3", null]], "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["jasper snoek", "kevin swersky", "richard s zemel", "ryan p adams"], "accepted": true, "id": "1402.0929"}, "pdf": {"name": "1402.0929.pdf", "metadata": {"source": "CRF", "title": "INPUT WARPING FOR BAYESIAN OPTIMIZATION OF NON-STATIONARY FUNCTIONS BY JASPER SNOEK", "authors": ["RICHARD S. ZEMEL", "RYAN P. ADAMS"], "emails": [], "sections": [{"heading": null, "text": "INPUT WARPING FOR BAYESIAN OPTIMIZATION OF NON-STATIONARY FUNCTIONS"}, {"heading": "BY JASPER SNOEK , KEVIN SWERSKY , RICHARD S. ZEMEL AND RYAN P. ADAMS", "text": "Harvard University and University of Toronto\nBayesian optimization has proven to be a highly effective methodology for the global optimization of unknown, expensive and multimodal functions. The ability to accurately model distributions over functions is critical to the effectiveness of Bayesian optimization. Although Gaussian processes provide a flexible prior over functions, there are various classes of functions that remain difficult to model. One of the most frequently occurring of these is the class of non-stationary functions. The optimization of the hyperparameters of machine learning algorithms is a problem domain in which parameters are often manually transformed a priori, for example by optimizing in \u201clog-space,\u201d to mitigate the effects of spatially-varying length scale. We develop a methodology for automatically learning a wide family of bijective transformations or warpings of the input space using the Beta cumulative distribution function. We further extend the warping framework to multi-task Bayesian optimization so that multiple tasks can be warped into a jointly stationary space. On a set of challenging benchmark optimization tasks, we observe that the inclusion of warping greatly improves on the state-of-the-art, producing better results faster and more reliably."}, {"heading": "1. Introduction", "text": "Bayesian optimization is a strategy for the global optimization of noisy, black-box functions. The goal is to find the minimum of an expensive function of interest as quickly as possible. Bayesian optimization fits a surrogate model that estimates the expensive function, and a proxy optimization is performed on this in order to select promising locations to query. Naturally, the ability of the surrogate to accurately model the underlying function is crucial to the success of the optimization routine. Recent work in machine learning has revisited the idea of Bayesian optimization [e.g., Osborne et al., 2009, Brochu et al., 2010, Srinivas et al., 2010, Hutter et al., 2011, Bergstra et al., 2011, Bull, 2011, Snoek et al., 2012, Hennig and Schuler, 2012] in large part due to advances in the ability to efficiently and accurately model statistical distributions over large classes of real-world functions. Gaussian processes (GPs) [see, e.g., Rasmussen and Williams, 2006] provide a powerful framework to express flexible prior distributions over smooth functions, yielding accurate estimates of the expected value of the function at any given input, but crucially also uncertainty estimates over that value. These are the two main components that enable the exploration and exploitation tradeoff that makes Bayesian optimization so effective.\nA major limitation of the most commonly used form of Gaussian process regression is the assumption of stationarity \u2014 that the covariance between two outputs is invariant to translations in input space. This assumption simplifies the regression task, but hurts the ability of the Gaussian process to model more realistic non-stationary functions. This presents a challenge for Bayesian optimization, as many problems of interest are inherently non-stationary. For example, when optimizing the hyperparameters of a machine learning algorithm, we might expect the objective function to have a short length scale near the optimum, but have a long length scale far away from the optimum. That is, we would expect bad hyperparameters to yield similar bad performance everywhere (e.g., classifying at random) but expect the generalization performance to be sensitive to small tweaks in good hyperparameter regimes.\nWe introduce a simple solution that allows Gaussian processes to model a large variety of non-stationary\nar X\niv :1\n40 2.\n09 29\nv3 [\nst at\n.M L\n] 1\n1 Ju\nn 20\n14\nfunctions that is particularly well suited to Bayesian optimization. We automatically learn a bijective warping of the inputs that removes major non-stationary effects. This is achieved by projecting each dimension of the input through the cumulative distribution function of the Beta distribution, while marginalizing over the shape of the warping. Our approach is computationally efficient, captures a variety of desirable transformations, such as logarithmic, exponential, sigmoidal, etc., and is easily interpretable. In the context of Bayesian optimization, understanding the parameter space is often just as important as achieving the best possible result and our approach lends itself to a straightforward analysis of the non-stationarities in a given problem domain.\nWe extend this idea to multi-task Bayesian optimization [Swersky et al., 2013] so that multiple tasks can be warped into a jointly stationary space. Thus, tasks can be warped onto one another in order to better take advantage of their shared structure.\nIn the empirical study that forms the experimental part of this paper, we show that modeling nonstationarity is extremely important and yields significant empirical improvements in the performance of Bayesian optimization. For example, we show that on a recently introduced Bayesian optimization benchmark [Eggensperger et al., 2013], our method outperforms all of the previous state-of-the-art algorithms on the problems with continuous-valued parameters. We further observe that on four different challenging machine learning optimization tasks our method outperforms that of Snoek et al. [2012], consistently converging to a better result in fewer function evaluations. As our methodology involves a transformation of the inputs, this strategy generalizes to a wide variety of models and algorithms. Empirically, modeling non-stationarity is a fundamentally important component of effective Bayesian optimization."}, {"heading": "2. Background and Related Work", "text": "2.1. Gaussian Processes The Gaussian process is a powerful and flexible prior distribution over functions f : X \u2192 R which is widely used for non-linear Bayesian regression. An attractive property of the Gaussian process in the context of Bayesian optimization is that, conditioned on a set of observations, the expected output value and corresponding uncertainty of any unobserved input is easily computed.\nThe properties of the Gaussian process are specified by a mean function m : X \u2192 R and a positive definite covariance, or kernel, functionK : X \u00d7 X \u2192 R. Given a finite set of training points IN = {xn, yn}Nn=1, where xn \u2208 X , yn \u2208 R, the predictive mean and covariance under a GP can be respectively expressed as:\n\u00b5(x; IN ) = m(X) +K(X,x) >K(X,X)\u22121(y \u2212m(X)),(1) \u03a3(x,x\u2032; IN ) = K(x,x \u2032)\u2212K(X,x)>K(X,X)\u22121K(X,x\u2032).(2)\nHereK(X,x) is theN -dimensional column vector of cross-covariances between x and the set X. TheN \u00d7N matrix K(X,X) is the Gram matrix for the set X resulting from applying the covariance function K(x,x\u2032) pairwise over the set {xn}Nn=1. The most common choices of covariance functions K(x,x\u2032) are functions of r(x,x\u2032) = x\u2212 x\u2032, such as the automatic relevance determination (ARD) exponentiated quadratic covariance\nKSE(x,x \u2032) = \u03b80 exp(\u2212r2) r = D\u2211 d=1 (xd \u2212 x\u2032d)2/\u03b82d ,(3)\nor the ARD Mate\u0301rn 5/2 kernel advocated for hyperparameter tuning with Bayesian optimization by Snoek et al. [2012]:\nKM52(x,x \u2032) = \u03b80 ( 1 + \u221a 5r2 + 5 3 r2 ) exp { \u2212 \u221a 5r2 } .(4)\nSuch covariance functions are invariant to translations along the input space and thus are stationary.\n2.2. Non-stationary Gaussian Process Regression Numerous approaches have been proposed to extend GPs to model non-stationary functions. Gramacy [2005] proposed a Bayesian treed GP model which accommodates various complex non-stationarities through modeling the data using multiple GPs with different covariances. Various non-stationary covariance functions have been proposed [e.g., Higdon et al., 1998, Rasmussen and Williams, 2006]. Previously, Sampson and Guttorp [1992] proposed projecting the inputs into a stationary latent space using a combination of metric multidimensional scaling and thin plate splines. Schmidt and O\u2019Hagan [2003] extended this warping approach for general GP regression problems using a flexible GP mapping. Spatial deformations of two dimensional inputs have been studied extensively in the spatial statistics literature [Anderes and Stein, 2008]. Bornn et al. [2012] project the inputs into a higher dimensional stationary latent representation. Snelson et al. [2003] apply a warping to the output space, y, while Adams and Stegle [2008] perform input-dependent output scaling with a second Gaussian process.\nCompared to these approaches, our approach is relatively simple, yet as we will demonstrate, flexible enough to capture a wide variety of nonstationary behaviours. Our principal aim is to show that addressing nonstationarity is a critical component of effective Bayesian optimization, and that any advantages gained from using our approach would likely generalize to more elaborate techniques.\n2.3. Multi-Task Gaussian Processes Many problems involve making predictions over multiple datasets (we will henceforth refer to these prediction problems as tasks). When the datasets share an input domain, and the mappings from inputs to outputs are correlated, then these correlations can be used to share information between different tasks and improve predictive performance. There have been many extensions of Gaussian processes to the multi-task setting, e.g., Goovaerts [1997], Alvarez and Lawrence [2011]. However, a basic and surprisingly effective approach is to assume that each task is derived from a single latent function which is transformed to produce each output [Teh et al., 2005, Bonilla et al., 2008].\nFormally, this approach involves combining a kernel over inputs K(x,x\u2032) and a kernel over task indices K(t, t\u2032), t = {1, ..., T} via a product to form the joint kernel:\nK((x, t), (x\u2032, t\u2032)) = KT (t, t \u2032)K(x,x\u2032).(5)\nWe infer the elements of KT (t, t\u2032) directly using the spherical parametrization of a covariance matrix [Osborne, 2010, Pinheiro and Bates, 1996].\n2.4. Bayesian Optimization Bayesian optimization is a general framework for the global optimization of noisy, expensive, black-box functions [Mockus et al., 1978], see Brochu et al. [2010] or Lizotte [2008] for an in-depth explanation and review. The strategy relies on the use of a relatively cheap probabilistic model that can be queried liberally as a surrogate in order to more effectively evaluate an expensive function of interest. Bayes\u2019 rule is used to derive the posterior estimate of the true function, given observations, and the surrogate is then used to determine, via a proxy optimization over an acquisition function, the next most promising point to query. Using the posterior mean and variance of the probabilistic model, the acquisition function generally expresses a tradeoff between exploitation and exploration. Numerous acquisition functions and combinations thereof have been proposed [e.g., Kushner, 1964, Srinivas et al., 2010, Hoffman et al., 2011].\nIn this work, we follow the common approach, which is to use a GP to define a distribution over objective functions from the input space to a loss that one wishes to minimize. Our approach is based on that of Jones [2001]. Specifically, we use a GP surrogate, and the expected improvement acquisition function [Mockus et al., 1978]. Let \u03c32(x) = \u03a3(x,x) be the marginal predictive variance of a GP, and define\n\u03b3(x) = f(xbest)\u2212 \u00b5(x; {xn, yn} , \u03b8)\n\u03c3(x; {xn, yn} , \u03b8) ,(6)\nE xp\non en\ntia l\nde ca\ny A\nno n-\nst at\nio na\nry\npe rio\ndi c\nfu nc\ntio n\n0 0.2 0.4 0.6 0.8 1 0\n0.2\n0.4\n0.6\n0.8\n1\n0 0.2 0.4 0.6 0.8 1 0\n0.2\n0.4\n0.6\n0.8\n1\n0 0.2 0.4 0.6 0.8 1 0\n0.2\n0.4\n0.6\n0.8\n1\n0 0.2 0.4 0.6 0.8 1 0\n0.2\n0.4\n0.6\n0.8\n1\n0 0.2 0.4 0.6 0.8 1 0\n0.2\n0.4\n0.6\n0.8\n1\n0 0.2 0.4 0.6 0.8 1 0\n0.2\n0.4\n0.6\n0.8\n1\nOriginal Objective Function Warping Function Post-Warping\nTwo examples of how input warping using the Beta CDF can transform a non-stationary function into a stationary one. Fig 1: Two examples of how input warping using the Beta CDF can transform a non-stationary function into a\nstationary one. The warping function maps the original inputs on the horizontal axis to new inputs shown on the vertical axis. The effect is to stretch and contract regions of the input space in such a manner as to remove non-stationarity.\nwhere f(xbest) is the lowest observed value. The expected improvement criterion is defined as\naEI(x; {xn, yn} , \u03b8) = \u03c3(x; {xn, yn} , \u03b8) (\u03b3(x)\u03a6(\u03b3(x)) +N (\u03b3(x); 0, 1)) .(7)\nHere \u03a6(\u00b7) is the cumulative distribution function of a standard normal, and N (\u00b7; 0, 1) is the density of a standard normal. Note that the method proposed in this paper is independent of the choice of acquisition function and do not affect its analytic properties.\n2.5. Multi-Task Bayesian Optimization When utilizing machine learning in practice, a single model will often need to be trained on multiple datasets. This can happen when e.g., new data is collected and a model must be retrained. In these scenarios we can think of each dataset as a different task and use multi-task Gaussian processes to predict where to query next. In Krause and Ong [2011], this idea was applied to find peptide sequences that bind to molecules for vaccine design, while in Swersky et al. [2013] it was applied to hyperparameter optimization. In these cases it was shown that sharing information between tasks can be extremely beneficial for Bayesian optimization. Other approaches include Bardenet et al. [2013], which finds a joint latent function over tasks explicitly using a ranking model, and Hutter et al. [2011] which uses a set of auxiliary task features to improve prediction."}, {"heading": "3. Input Warping", "text": "We assume that we have a positive definite covariance function K(x, x\u0303), where x, x\u0303 \u2208 [0, 1]D due to projecting a bounded input range to the unit hypercube. In practice, when tuning the hyperparameters of an algorithm, e.g., the regularization parameter of a support vector machine, researchers often first transform the input space using a monotonic function such as the natural logarithm and then perform a grid search in this transformed space. Such an optimization in \u201clog-space\u201d takes advantage of a priori knowledge of the non-stationarity that is inherent in the input space. Often however, the non-stationary properties of the input space are not known a priori and such a transformation is generally a crude approximation to the ideal (unknown) transformation. Our approach is to instead consider a class of bijective warping functions, and estimate them from previous objective function evaluations. We can then use commonly-engineered\ndesirable warping functions and adjusting the prior over input warpings allows one to easily encode prior beliefs over the form of non-stationarity. For example, choosing \u00b5\u03b1 = \u00b5\u03b2 = 0 and \u03c3\u03b1 = \u03c3\u03b2 = 0.5 expresses a prior for slight or no warping (2a). Setting \u00b5\u03b1 = 0, \u03c3\u03b1 = 0.25 and \u00b5\u03b2 = \u03c3\u03b2 = 1 or \u00b5\u03b1 = \u03c3\u03b1 = 1, \u00b5\u03b2 = 0 and \u03c3\u03b2 = 0.25 expresses a prior for approximately exponential (2b) or logarithmic (2c) warping functions respectively. Approximately sigmoidal (2d) warpings that contract the outer regions of the space while expanding the center can be expressed as a prior with \u00b5\u03b1 = \u00b5\u03b2 = 2 and \u03c3\u03b1 = \u03c3\u03b2 = 0.5. One can also express logit shaped warpings (not shown here).\ntransformations\u2014such as the log transform\u2014to specify a prior on bijections. Specifically, we change the kernel function to be K(w(x), w(x\u0303)),\nwd(xd) = BetaCDF(xd;\u03b1d, \u03b2d) ,\n= \u222b xd 0 u\u03b1d\u22121(1\u2212 u)\u03b2d\u22121 B(\u03b1d, \u03b2d) du ,(8)\nwhere BetaCDF refers to the Beta cumulative distribution function and B(\u03b1, \u03b2) is the normalization constant. That is, w : [0, 1]D \u2192 [0, 1]D is a vector-valued function in which the dth output dimension is a function of the dth input dimension, and is specified by the cumulative distribution function of the Beta distribution. Each of these D bijective transformations from [0, 1] to [0, 1] has a unique shape, determined by parameters \u03b1d > 0 and \u03b2d > 0. The Beta CDF has no closed form solution for non-integer values of \u03b1 and \u03b2, however accurate approximations are implemented in many statistical software packages.\nAlternatively, one can think of input warping as applying a particular kind of non-stationary kernel to the original data. Examples of non-stationary functions and their corresponding ideal warping that transforms them into stationary functions are shown in Figure 1.\nOur choice of the Beta distribution is motivated by the fact that it is capable of expressing a variety of monotonic warpings, while still being concisely parameterized. In general, there are many other suitable choices.\n3.1. Integrating over warpings Rather than assume a single, explicit transformation function, we define a hierarchical Bayesian model by placing a prior over the shape parameters, \u03b1d and \u03b2d, of the bijections and integrating them out. We treat the collection {\u03b1d, \u03b2d}Dd=1 as hyperparameters of the covariance function and use Markov chain Monte Carlo via slice sampling, following the treatment of covariance hyperparameters from Snoek et al. [2012]. We use a log-normal distribution, i.e.\nlog(\u03b1d) \u223c N (\u00b5\u03b1, \u03c3\u03b1) log(\u03b2d) \u223c N (\u00b5\u03b2, \u03c3\u03b2),(9)\nto express a prior for a wide family of desirable functions. Figure 2 demonstrates example warping functions arising from sampling transformation parameters from various instantiations of this prior. Note that the geometric mean or median of the zero-mean log-normal distribution for the \u03b1d and \u03b2d corresponds to the\nTree Parzen Estimator (TPE) [Bergstra et al., 2011] and Spearmint [Snoek et al., 2012]. The results for SMAC, Spearmint and TPE are reproduced from Eggensperger et al. [2013]. Following the standard protocol for these benchmarks, each algorithm was run ten times for the given number of evaluations, and the average validation loss and standard deviation are reported. The algorithm with the lowest validation loss is shown in bold. We note that on some of the benchmarks our algorithm converges to a solution in far fewer evaluations than the protocol allows.\nidentity transform. With this prior the model centers itself on the identity transformation of the input space. In the following empirical analysis we use this formulation with a variance of 0.75. A nice property of this approach is that a user can easily specify a prior when they expect a specific form of warping, as we show in Figure 2.\n3.2. Multi-Task Input Warping When training the same model on different datasets, certain properties, such as the size of the dataset, can have a dramatic effect on the optimal hyperparameter settings. For example, a model trained on a small dataset will likely require more regularization than the same model trained on a larger dataset. In other words, it is possible that one part of the input space on one task can be correlated with a different part of the input space on another task. To account for this, we allow each task to have its own set of warping parameters. Inferring these parameters will effectively try to warp both tasks into a jointly stationary space that is more suitably modeled by a standard multi-task kernel. In this way, large values on one task can map to small values on another, and vice versa."}, {"heading": "4. Empirical Analyses", "text": "Our empirical analysis is comprised of three distinct experiments. In the first experiment, we compare to the method of Snoek et al. [2012] in order to demonstrate the effectiveness of input warping. In the second experiment, we compare to other hyperparameter optimization methods using a subset of the benchmark suite found in Eggensperger et al. [2013]. Finally, we show how our multi-task extension can further benefit this important setting.\n4.1. Comparison to Stationary GPs\nExperimental setup We evaluate the standard Gaussian process expected improvement algorithm (GP EI MCMC) as implemented by Snoek et al. [2012], with and without warping. Following their treatment, we use the Mate\u0301rn 5/2 kernel and we marginalize over kernel parameters \u03b8 using slice sampling [Murray and Adams, 2010]. We repeat three of the experiments1 from Snoek et al. [2012], and perform an experiment involving the tuning of a deep convolutional neural network2 on a subset of the popular CIFAR-10 data set [Krizhevsky, 2009]. The deep network consists of three convolutional layers and two fully connected layers and we optimize over two learning rates, one for each layer type, six dropout regularization rates, six\n1See Snoek et al. [2012] for details of these experiments. 2We use the Deepnet package from https://github.com/nitishsrivastava/deepnet\nweight norm constraints, the number of hidden units per layer, a convolutional kernel size and a pooling size for a total of 21 hyperparameters. On the logistic regression problem we also compare to warping the input space a priori using the log-transform (optimizing in log-space).\nResults Figure 3 shows that in all cases, dealing with non-stationary effects via input warpings greatly improves the convergence of the optimization. Of particular note, on the higher-dimensional convolutional network problem (Figure 3d) input warped Bayesian optimization consistently converges to a better solution than Bayesian optimization with a stationary GP.\nIn Figure 4 we plot examples of some of the inferred warpings. For logistic regression, Figure 4a shows that our method learns different logarithmic-like warpings for three dimensions and no warping for the fourth. Figure 4b shows how the posterior distribution over the learning rate warping evolves, becoming more extreme and more certain, as observations are gathered. Figure 4c shows that on both convolutional and dense layers, the intuition that one should log-transform the learning rates holds. For transformations on weight norm constraints, shown in Figure 4d, the weights connected to the inputs and outputs use a sigmoidal transformation, the convolutional-layer weights use an exponential transformation, and the denselayer weights use a logarithmic transformation. Effectively, this means that the most variation in the error occurs in the medium, high and low scales respectively for these types of weights. Especially interesting are the wide variety of transformations that are learned for dropout on different layers, shown in Figure 4e. These show that different layers benefit from different dropout rates, which was also confirmed on test set error, and challenges the notion that they should just be set to 0.5 [Hinton et al., 2012].\nIt is clear that the learned warpings are non-trivial. In some cases, like with learning rates, they agree with intuition, while for others like dropout they yield surprising results. Given the number of hyperparameters and the variety of transformations, it is highly unlikely that even experts would be able to determine the whole set of appropriate warpings. This highlights the utility of learning them automatically.\n4.2. HPOLib Continuous Benchmarks\nExperimental setup In our next set of experiments, we tested our approach on the subset of benchmarks over continuous inputs from the HPOLib benchmark suite [Eggensperger et al., 2013]. These benchmarks are designed to assess the strengths and weaknesses of several popular hyperparameter optimization schemes. All of the tested methods perform Bayesian optimization, however the underlying surrogate models differ significantly. The SMAC package [Hutter et al., 2011] uses a random forest, the Hyperopt package [Bergstra et al., 2011] uses the tree Parzen estimator, and the Spearmint package [Snoek et al., 2012] uses a Gaussian process. For our experiments, we augmented the Spearmint package with input warping.\nlogistic regression with different numbers of observations, along with the standard deviation. Each curve in Figures 4d and 4e is annotated with the depth of the layer that each parameter is applied to.\nResults Table 1 shows the results, where all but the warped results are taken from Eggensperger et al. [2013]. Overall, input warpings improve the performance of the Gaussian process approach such that it does at least as well as every other method, and in many cases better. Furthermore, the standard deviation also decreases significantly in many instances, meaning that the results are far more reliable. Finally, it is worth noting that the number of function evaluations required to solve the problems is also drastically reduced in many cases.\nInterestingly, the random forest approach in SMAC also naturally deals with nonstationarity, albeit in a fundamentally different way, by partitioning the space in a non-uniform manner. There are several possibilities to explain the performance discrepancy. Unlike random forests, Gaussian processes produce a smooth function of the inputs, meaning that EI can be locally optimized via gradient methods, so it is possible that better query points are selected in this way. Alternatively, the random forest is not a well-defined prior on functions and there may be overfitting in the absence of parameter marginalization. Further investigation is merited to tease apart this discrepancy.\n4.3. Multi-Task Warping\nExperimental setup In this experiment, we apply multi-task warping to logistic regression and online LDA [Hoffman et al., 2010] in a similar manner to Swersky et al. [2013]. In the logistic regression problem, a search over hyperparameters has already been completed on the USPS dataset, which consists of 6, 000 training examples of handwritten digits of size 16\u00d7 16. It was demonstrated that it was possible to use this previous search to speed up the hyperparameter search for logistic regression on the MNIST dataset, which consists of 60, 000 training examples of size 28\u00d7 28.\nmodel is learned, then the search transferred to the full dataset. In both cases, the warped version substantially outperforms multi-task Bayesian optimization with no warping. In Figure 5a, we show the mean warping learned by each task for each parameter. The solid lines indicates the MNIST task, while the dashed lines indicate the USPS task.\nIn the online LDA problem, we assume that a model has been trained on 50, 000 documents and that we would now like to train one on 200, 000 documents. Again, it was shown that it is possible to transfer information over to this task, resulting in more efficient optimization.\nResults In Figure 5 we see that warped multi-task Bayesian optimization (warped MTBO) outperforms multi-task Bayesian optimization (MTBO) without warping, and performs far better than single-task Bayesian optimization (STBO) that does not have the benefit of a prior search. On logistic regression it appears that ordinary MTBO gets stuck in a local minimum, while warped MTBO is able to consistently escape this by the 20th function evaluation.\nIn Figure 5a we show the mean warping learned for each task/hyperparameter combination (generated by averaging over samples from the posterior). The warping of the L2 penalty on the USPS model favours configurations that are toward the higher end of the range. Conversely, the warping on the MNIST dataset favours relatively lower penalties. This agrees with intuition that a high regularization with less data is roughly equivalent to low regularization with more data. Other observations also agree with intuition. For example, since USPS is smaller each learning epoch consists of fewer parameter updates. This can be offset by training for more epochs, using smaller minibatch sizes, or increasing the learning rate relative to the same model on MNIST."}, {"heading": "5. Conclusion", "text": "In this paper we develop a novel formulation to elegantly model non-stationary functions using Gaussian processes that is especially well suited to Bayesian optimization. Our approach uses the cumulative distribution function of the Beta distribution to warp the input space in order to remove the effects of mild input-dependent length scale variations. This approach allows us to automatically infer a variety of warpings in a computationally efficient way. In our empirical analysis we see that an inability to model non-stationary functions is a major weakness when using stationary kernels in the GP Bayesian optimization framework. Our simple approach to learn the form of the non-stationarity significantly outperforms the standard Bayesian optimization routine of Snoek et al. [2012] both in the number of evaluations it takes to converge and the value reached. As an additional bonus, the method finds good solutions more reliably. Our experiments on the continuous subset of the HPOLib benchmark [Eggensperger et al., 2013] shows that input warping performs substantially better than state-of-the-art baselines on these problems.\nA key advantage of our approach is that the learned transformations can be analyzed post hoc, and our analysis of a convolutional neural network architecture leads to surprising insights that challenge established doctrine. Post-training analysis is becoming a critical component of neural network development. For example, the winning Imagenet 2013 [Deng et al., 2009] submission [Zeiler and Fergus, 2013] used post hoc analysis to correct for model defects. The development of interpretable Bayesian optimization strategies can provide a unique opportunity to facilitate this kind of interaction. An interesting follow-up would be to determine whether consistent patterns emerge across architectures, datasets and domains.\nIn Bayesian optimization, properly characterizing uncertainty is just as important as making predictions. GPs are ideally suited to this problem because they offer a good balance between modeling power and computational tractability. In many real world problems, however, the assumptions made by the Gaussian processes are often violated, nullifying many of their benefits. In light of this, many opt to use frequentist models instead, which offer minimax-type guarantees. Our emphasis in this work is to demonstrate that it is possible to stay within the Bayesian framework and thus enjoy its characterization of uncertainty, while still overcoming some of the limitations associated with the conventional GP approach. In future work we intend to experiment with more elaborate models of non-stationarity to see if these yield further improvements."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Nitish Srivastava for providing help with the Deepnet package. Jasper Snoek is a fellow in the Harvard Center for Research on Computation and Society. During his time at the University of Toronto, Jasper Snoek was supported by a grant from Google. This work was funded by DARPA Young Faculty Award N66001-12-1-4219, an Amazon AWS in Research grant, the Natural Sciences and Engineering Research Council of Canada (NSERC) and the Canadian Institute for Advanced Research (CIFAR)."}], "references": [{"title": "A Bayesian interactive optimization approach to procedural animation design", "author": ["Eric Brochu", "Tyson Brochu", "Nando de Freitas"], "venue": "Intelligent Optimization,", "citeRegEx": "Brochu et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Brochu et al\\.", "year": 2009}, {"title": "Practical Bayesian optimization of machine learning algorithms", "author": ["Jasper Snoek", "Hugo Larochelle", "Ryan P. Adams"], "venue": null, "citeRegEx": "Snoek et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Snoek et al\\.", "year": 2011}, {"title": "Gaussian Processes for Machine Learning", "author": ["Carl E. Rasmussen", "Christopher Williams"], "venue": null, "citeRegEx": "Rasmussen and Williams.,? \\Q2006\\E", "shortCiteRegEx": "Rasmussen and Williams.", "year": 2006}, {"title": "Modeling nonstationary processes through dimension expansion", "author": ["Luke Bornn", "Gavin Shaddick", "James V. Zidek"], "venue": null, "citeRegEx": "Bornn et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Bornn et al\\.", "year": 2008}, {"title": "The application of Bayesian methods for seeking the extremum", "author": ["Jonas Mockus", "Vytautas Tiesis", "Antanas Zilinskas"], "venue": null, "citeRegEx": "Mockus et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Mockus et al\\.", "year": 1996}, {"title": "Collaborative hyperparameter tuning", "author": ["R\u00e9mi Bardenet", "M\u00e1ty\u00e1s Brendel", "Bal\u00e1zs K\u00e9gl", "Mich\u00e8le Sebag"], "venue": "Processing Systems,", "citeRegEx": "Bardenet et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Bardenet et al\\.", "year": 2011}, {"title": "Alex Krizhevsky", "author": ["Information Processing Systems."], "venue": "Learning multiple layers of features from tiny images. Technical report, Department of Computer Science,", "citeRegEx": "Systems.,? 2010", "shortCiteRegEx": "Systems.", "year": 2010}, {"title": "Improving neural networks", "author": ["Geoffrey E. Hinton", "Nitish Srivastava", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2009}], "referenceMentions": [{"referenceID": 1, "context": "We further observe that on four different challenging machine learning optimization tasks our method outperforms that of Snoek et al. [2012], consistently converging to a better result in fewer function evaluations.", "startOffset": 121, "endOffset": 141}, {"referenceID": 1, "context": "or the ARD Mat\u00e9rn 5/2 kernel advocated for hyperparameter tuning with Bayesian optimization by Snoek et al. [2012]:", "startOffset": 95, "endOffset": 115}, {"referenceID": 2, "context": ", 1998, Rasmussen and Williams, 2006]. Previously, Sampson and Guttorp [1992] proposed projecting the inputs into a stationary latent space using a combination of metric multidimensional scaling and thin plate splines.", "startOffset": 8, "endOffset": 78}, {"referenceID": 2, "context": ", 1998, Rasmussen and Williams, 2006]. Previously, Sampson and Guttorp [1992] proposed projecting the inputs into a stationary latent space using a combination of metric multidimensional scaling and thin plate splines. Schmidt and O\u2019Hagan [2003] extended this warping approach for general GP regression problems using a flexible GP mapping.", "startOffset": 8, "endOffset": 246}, {"referenceID": 2, "context": ", 1998, Rasmussen and Williams, 2006]. Previously, Sampson and Guttorp [1992] proposed projecting the inputs into a stationary latent space using a combination of metric multidimensional scaling and thin plate splines. Schmidt and O\u2019Hagan [2003] extended this warping approach for general GP regression problems using a flexible GP mapping. Spatial deformations of two dimensional inputs have been studied extensively in the spatial statistics literature [Anderes and Stein, 2008]. Bornn et al. [2012] project the inputs into a higher dimensional stationary latent representation.", "startOffset": 8, "endOffset": 502}, {"referenceID": 2, "context": ", 1998, Rasmussen and Williams, 2006]. Previously, Sampson and Guttorp [1992] proposed projecting the inputs into a stationary latent space using a combination of metric multidimensional scaling and thin plate splines. Schmidt and O\u2019Hagan [2003] extended this warping approach for general GP regression problems using a flexible GP mapping. Spatial deformations of two dimensional inputs have been studied extensively in the spatial statistics literature [Anderes and Stein, 2008]. Bornn et al. [2012] project the inputs into a higher dimensional stationary latent representation. Snelson et al. [2003] apply a warping to the output space, y, while Adams and Stegle [2008] perform input-dependent output scaling with a second Gaussian process.", "startOffset": 8, "endOffset": 603}, {"referenceID": 2, "context": ", 1998, Rasmussen and Williams, 2006]. Previously, Sampson and Guttorp [1992] proposed projecting the inputs into a stationary latent space using a combination of metric multidimensional scaling and thin plate splines. Schmidt and O\u2019Hagan [2003] extended this warping approach for general GP regression problems using a flexible GP mapping. Spatial deformations of two dimensional inputs have been studied extensively in the spatial statistics literature [Anderes and Stein, 2008]. Bornn et al. [2012] project the inputs into a higher dimensional stationary latent representation. Snelson et al. [2003] apply a warping to the output space, y, while Adams and Stegle [2008] perform input-dependent output scaling with a second Gaussian process.", "startOffset": 8, "endOffset": 673}, {"referenceID": 0, "context": ", 1978], see Brochu et al. [2010] or Lizotte [2008] for an in-depth explanation and review.", "startOffset": 13, "endOffset": 34}, {"referenceID": 0, "context": ", 1978], see Brochu et al. [2010] or Lizotte [2008] for an in-depth explanation and review.", "startOffset": 13, "endOffset": 52}, {"referenceID": 0, "context": ", 1978], see Brochu et al. [2010] or Lizotte [2008] for an in-depth explanation and review. The strategy relies on the use of a relatively cheap probabilistic model that can be queried liberally as a surrogate in order to more effectively evaluate an expensive function of interest. Bayes\u2019 rule is used to derive the posterior estimate of the true function, given observations, and the surrogate is then used to determine, via a proxy optimization over an acquisition function, the next most promising point to query. Using the posterior mean and variance of the probabilistic model, the acquisition function generally expresses a tradeoff between exploitation and exploration. Numerous acquisition functions and combinations thereof have been proposed [e.g., Kushner, 1964, Srinivas et al., 2010, Hoffman et al., 2011]. In this work, we follow the common approach, which is to use a GP to define a distribution over objective functions from the input space to a loss that one wishes to minimize. Our approach is based on that of Jones [2001]. Specifically, we use a GP surrogate, and the expected improvement acquisition function [Mockus et al.", "startOffset": 13, "endOffset": 1043}, {"referenceID": 5, "context": "Other approaches include Bardenet et al. [2013], which finds a joint latent function over tasks explicitly using a ranking model, and Hutter et al.", "startOffset": 25, "endOffset": 48}, {"referenceID": 5, "context": "Other approaches include Bardenet et al. [2013], which finds a joint latent function over tasks explicitly using a ranking model, and Hutter et al. [2011] which uses a set of auxiliary task features to improve prediction.", "startOffset": 25, "endOffset": 155}, {"referenceID": 1, "context": "We treat the collection {\u03b1d, \u03b2d}d=1 as hyperparameters of the covariance function and use Markov chain Monte Carlo via slice sampling, following the treatment of covariance hyperparameters from Snoek et al. [2012]. We use a log-normal distribution, i.", "startOffset": 194, "endOffset": 214}, {"referenceID": 1, "context": ", 2011] and Spearmint [Snoek et al., 2012]. The results for SMAC, Spearmint and TPE are reproduced from Eggensperger et al. [2013]. Following the standard protocol for these benchmarks, each algorithm was run ten times for the given number of evaluations, and the average validation loss and standard deviation are reported.", "startOffset": 23, "endOffset": 131}, {"referenceID": 1, "context": "In the first experiment, we compare to the method of Snoek et al. [2012] in order to demonstrate the effectiveness of input warping.", "startOffset": 53, "endOffset": 73}, {"referenceID": 1, "context": "In the first experiment, we compare to the method of Snoek et al. [2012] in order to demonstrate the effectiveness of input warping. In the second experiment, we compare to other hyperparameter optimization methods using a subset of the benchmark suite found in Eggensperger et al. [2013]. Finally, we show how our multi-task extension can further benefit this important setting.", "startOffset": 53, "endOffset": 289}, {"referenceID": 1, "context": "Experimental setup We evaluate the standard Gaussian process expected improvement algorithm (GP EI MCMC) as implemented by Snoek et al. [2012], with and without warping.", "startOffset": 123, "endOffset": 143}, {"referenceID": 1, "context": "Experimental setup We evaluate the standard Gaussian process expected improvement algorithm (GP EI MCMC) as implemented by Snoek et al. [2012], with and without warping. Following their treatment, we use the Mat\u00e9rn 5/2 kernel and we marginalize over kernel parameters \u03b8 using slice sampling [Murray and Adams, 2010]. We repeat three of the experiments1 from Snoek et al. [2012], and perform an experiment involving the tuning of a deep convolutional neural network2 on a subset of the popular CIFAR-10 data set [Krizhevsky, 2009].", "startOffset": 123, "endOffset": 378}, {"referenceID": 1, "context": "See Snoek et al. [2012] for details of these experiments.", "startOffset": 4, "endOffset": 24}, {"referenceID": 1, "context": "Our simple approach to learn the form of the non-stationarity significantly outperforms the standard Bayesian optimization routine of Snoek et al. [2012] both in the number of evaluations it takes to converge and the value reached.", "startOffset": 134, "endOffset": 154}], "year": 2014, "abstractText": "Bayesian optimization has proven to be a highly effective methodology for the global optimization of unknown, expensive and multimodal functions. The ability to accurately model distributions over functions is critical to the effectiveness of Bayesian optimization. Although Gaussian processes provide a flexible prior over functions, there are various classes of functions that remain difficult to model. One of the most frequently occurring of these is the class of non-stationary functions. The optimization of the hyperparameters of machine learning algorithms is a problem domain in which parameters are often manually transformed a priori, for example by optimizing in \u201clog-space,\u201d to mitigate the effects of spatially-varying length scale. We develop a methodology for automatically learning a wide family of bijective transformations or warpings of the input space using the Beta cumulative distribution function. We further extend the warping framework to multi-task Bayesian optimization so that multiple tasks can be warped into a jointly stationary space. On a set of challenging benchmark optimization tasks, we observe that the inclusion of warping greatly improves on the state-of-the-art, producing better results faster and more reliably.", "creator": "LaTeX with hyperref package"}}}