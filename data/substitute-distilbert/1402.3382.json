{"id": "1402.3382", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Feb-2014", "title": "Machine Learning of Phonologically Conditioned Noun Declensions For Tamil Morphological Generators", "abstract": "this paper presents machine learning solutions to a practical problem of natural language generation ( nlg ), assuming the impression formation in agglutinative languages like tamil, in supervised supervised manner. the morphological generator is an important component of embodied language processing in artificial intelligence. it generates template forms given a root and affixes. the morphophonemic changes like addition, deletion, alternation etc., occur when marker or a verb or words joined together. the sandhi rules should be explicitly specified in the language diagram morphological analyzers and generators. in machine learning classrooms, candidate rules can be learned automatically by either system from the training samples and subsequently be applied for new inputs. in subsequent paper jung proposed the machine learning psychologists which learn the morphophonemic rules for complex analyses from the given training data. these models are trained to use sandhi rules using fuzzy learning algorithms and the performance of those algorithms are measuring. from this we conclude that neural learning of morphological processing such as its form generation can be successfully learned in a supervised manner, without explicit description of rules. the performance of decision trees and bayesian machine learning training on noun declensions are discussed.", "histories": [["v1", "Fri, 14 Feb 2014 06:46:44 GMT  (315kb)", "http://arxiv.org/abs/1402.3382v1", "13 pages. International Journal of Computer Engineering and Applications, 2013"]], "COMMENTS": "13 pages. International Journal of Computer Engineering and Applications, 2013", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["k rajan", "dr v ramalingam", "dr m ganesan"], "accepted": false, "id": "1402.3382"}, "pdf": {"name": "1402.3382.pdf", "metadata": {"source": "META", "title": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "authors": [], "emails": [], "sections": [{"heading": null, "text": "This paper presents machine learning solutions to a practical problem of Natural Language Generation (NLG), particularly the word formation in agglutinative languages like Tamil, in a supervised manner. The morphological generator is an important component of Natural Language Processing in Artificial Intelligence. It generates word forms given a root and affixes. The morphophonemic changes like addition, deletion, alternation etc., occur when two or more morphemes or words joined together. The Sandhi rules should be explicitly specified in the rule based morphological analyzers and generators. In machine learning framework, these rules can be learned automatically by the system from the training samples and subsequently be applied for new inputs.\nIn this paper we proposed the machine learning models which learn the morphophonemic rules for noun declensions from the given training data. These models are trained to learn sandhi rules using various learning algorithms and the performance of those algorithms are presented. From this we conclude that machine learning of morphological processing such as word form generation can be successfully learned in a supervised manner, without explicit description of rules. The performance of Decision trees and Bayesian machine learning algorithms on noun declensions are discussed.\nKeywords: Machine learning, Tamil morphology, Morphophonemic rules, Decision Trees, Bayesian models.\n[1] INTRODUCTION\nMost of the Indian languages are morphologically rich. Words in these languages are formed by combining meaningful constituents, called morphemes. There are free morphemes which can function independently as words, and bound morphemes appear only as parts of words, always in conjunction with a root and sometimes with other bound morphemes. The bound morphemes act as affixes to form inflectional and derivational categories. The way in which these constituents are organised in word-forms follows morphological rules. Morphemes may have varied forms in particular contexts, variations of that morphemes are called allomorphs.[1][13][18].\nOne important aspect of morphemes is that they change when grouped together. Actually, they influence each other phonologically. These changes are called morphophonemic changes. When suffixes are added with words, a change in the word, like addition of consonant or vowel takes place depending upon the nature of the suffix. The rules that make changes in words when adding suffixes are called sandhi rules. The word 'sandhi' is a Sanskrit word meaning \u2018meeting together\u2019. Application of sandhi rules is necessary to correctly write and pronounce complex word forms [1]. Developing a rule based system to model these sandhi-changes involves many complex"}, {"heading": "International Journal of Computer Engineering and Applications, Volume IV, Issue III, Oct-Dec,13", "text": "linguistic rules along with the list of affixes to be selected and concatenated to the root. The automatic language processing systems represent these rules in the form of Finite State Automata. [5][8][[14]\nIn this paper we present supervised machine learning algorithms such as Decision Trees and Bayesian classifiers which learn the rules of morphophonemic changes from the training data. The data are collected from the Tamil corpus. The machine learning algorithms are applied for the classification of character sequences in to one of the predefined inflectional classes.\nThe rest of the paper is organised as follows. Section 2 provides an overview of prior works addressing the Morphological generation and the application of machine learning techniques in language processing. Section 3 introduces the Tamil language and the general morphophonemic concepts related to this topic. Description of the machine learning techniques used in this paper is given in Section 4. The implementation and the results of the machine learning models are discussed in Section 5.\n[2] RELATED WORKS\nOne of the earlier rule based morphological analyser was developed for Tamil at CIIL [12]. A generic architecture for morphological generators of agglutinative languages using paradigms and allomorph table has been proposed [45], in which corpus is used to extract fully inflected word forms. In [5][14], they have discussed the algorithm for developing a rule based tagger for Tamil. The rule based morphological analyser; morphological generator [14] is available for download, on Tamil Virtual University portal. RCILTS for Tamil has developed the morphological analyser \u2018Atcharam\u2019 and the generator \u2018Atchayam\u2019. Other rule based morphological analysers and generators for Tamil are discussed in [4][22][36][38][45][47]. In [3], authors have proposed Sequence Labeling Approach for morphological analysis. Machine learning approaches have been presented for for learning past tense of English verbs [40], Tamil document classification [32], Morphological analysis [8][46], Parts-of-speech tagger using Neural networks [2][10][30][33][42] and Decisoin trees[20][41].\nThe existing morphological analyzers and generators for Tamil divide the verbs and nouns into various paradigms, and input word stems are compared with the paradigm tables. The major components of those systems are: i) A lexicon of roots with category information. Ii) A list of inflections for each category. Iii) A set of morphophonemic rules and iv) A set of tables for projecting allomorphic variations.\nDecision trees have been applied to a wide range of NLP problems including grapheme-tophoneme conversion [17], part-of-speech tagging [41], tokenization [Palmer & Hearst 1997], parsing [19][20], morphological analysis [46] and language modelling [15]. Many of these methods directly apply decision trees as classifiers [4].\n[3] TAMIL LANGUAGE\n60"}, {"heading": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "text": "Tamil is an agglutinative and concatenative language, where morphemes are strung together to form long words. Tamil is a verb final language with SOV (Subject Object Verb) pattern. The verbs can have a long sequence of morphemes that express tense, mood and aspects as well as sense of assertion, negation, interrogation, reflection, emphasis, etc. Nouns take plural marker to make plural forms, and they decline to different inflected forms by taking case markers [1][16].\nIn modern Tamil, all lexical or root morphemes can be distinguished into four groups: two major groups of nominal and verbal roots, which comprise almost all roots occurring in modern Tamil, and two minor groups of adjectival roots, and adverbial roots [18]. The verbs and nouns are more productive in the sense that they can produce more word forms. Nouns can also be derived from verbal roots. In the Tamil corpus, the total number of nouns is very much higher than the verbs.\n[3.1] Morphophonemics\nMorphophonemics is the study which deals with the phonemic variations of a single morpheme in the given environment. It deals with all kinds of changes like addition, deletion or change etc., when two or more morphemes occur together when they stand in conjunction. It is undeniable that the morphological aspect is indispensable for making sandhi rules. Internal sandhi occurs when two morphemes are added with one another and external sandhi occurs between two free-forms or two grammatical forms. The internal sandhi occurs in the morphological structure, that is, it relates to the sandhi of the morphemes within a word. So it is called \u201cmorphological sandhi\u201d. The latter one occurs in the syntactic structure of a language. So, it is called compound or phrase or \u201csyntactical sandhi\u201d. A morphophonemic rule has the form of a phonological rule, but is restricted to a particular morphological environment [39].\nAn example of a morphophonological alternation in English is provided by the plural morpheme, written as \"-s\" or \"-es\". Its pronunciation alternates between [s], [z], and [\u026az], as in cats, dogs, and horses respectively. A purely phonological analysis would likely assign to these three endings the phonemic representations /s/, /z/, /\u026az/. On a morphophonological level, however, they may all be considered to be forms of the underlying object //z//, which is a morphophoneme [6].\nAffixes can be realized in many ways. For example, past tense is realized with \u00ee\u00a2, \u00ee\u00a2\u00ee\u00a2, \u00ef\u00a2\u00ee \u00a2, \u00f8\u00a2, and \u00ec\u00a2 and plural is realized with \u00e8\u00f7\u00a2, \u00e8\u00a2\u00e8\u00f7\u00a2, \u00e9\u00a2\u00e8\u00f7\u00a2. These alternations are conditioned by the phonological properties of the surrounding sound segments of the affixes. It is quite common for the same morpheme to be realized in different ways. This variation in form is known as allomorphy, and the variants of one morpheme are called allomorphs. Variation is conditioned by the environment in which the morpheme occurs; it can be phonologically, or grammatically or lexically conditioned.\nWhen adding case suffixes to nouns, nouns undergo sandhi changes. For example, when a word that ends in a vowel and a suffix that begins in a vowel are added together, a glide - either \u00f2\u00a2 or \u00f5\u00a2 - is inserted in between. Selection of either \u00f2\u00a2 or \u00f5\u00a2 is determined based upon whether the final vowel is\n1) One of the \u2018front\u2019 vowels \u00de, \u00df, \u00e2, \u00e3, \u00e4 or 2) One of the 'back' vowels \u00dc, \u00dd, \u00e5, \u00e6, \u00e0, \u00e1 respectively."}, {"heading": "International Journal of Computer Engineering and Applications, Volume IV, Issue III, Oct-Dec,13", "text": "Front vowels take the glide \u00f2\u00a2 and back vowels take the glide \u00f5\u00a2. Some nouns ending with consonants, with a syllable structure CVC where the vowel is short is added with any suffix, the final consonant is doubled. The morphophonemic processes that are involved in Tamil morphology are assimilation, insertion, deletion and germination. Words with the syllable structure CVC, nouns\nending in \u00dc\u00f1\u00a2, \u00b4 and \u00c1 undergo a number of different changes when a case suffix is added [27] [39].\n[3.2] Noun declension\nIn Tamil, nouns can be inflected for both number and case, the plural suffix is first added to the noun stem, optionally followed by the euphonic increment \u2013in/-an, and then the case suffix is added. An inflected noun form may be the realisation of three morphemes, as given in the following representation\nNoun stem + [ Plural suffix ] + [Euphonic increment] + [Case suffix] When a noun is inflected for case only, a case suffix is added either directly to the stem or\nto the oblique stem in case the respective noun has such a stem. When a noun is inflected for both number and case, the plural suffix is first added to the noun stem, optionally followed by the euphonic increment \u2013in, and then the case suffix is added. When different types of suffixes are added to the noun, various morphophonemic rules operate [18]. The list of suffixes for plural and various cases are shown in Table 1.\n[3.3] Case Marking\nCase is essentially a system of marking dependent nouns for the type of relationship they bear to their heads. Traditionally, the term refers to inflectional marking, and, typically, case marks the relationship of a noun to a verb at the clause level or of a noun to a postposition, or another noun at the phrase level. The nominative is the citation form and is used for the subject of a clause. The accusative is used for the direct object and the dative for the indirect object (the recipient of a verb\n62"}, {"heading": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "text": "of giving). The genitive expresses the possessor, and the sociative expresses the notion of \u2018being in the company of\u2019. The locative expresses location, and the instrumental expresses the instrument, as in \u2018cut with a knife\u2019 and the agent of the passive. The ablative expresses \u2018from\u2019.\nThe following table 2. shows the types of sandhi changes for the given noun stems when case suffixes and plural suffixes are added.\n[4] MACHINE LEARNING\nMachine learning is one of the important research and application areas of artificial intelligence (AI). Machine learning is concerned with acquiring knowledge from an environment in a computational manner. Machine learning is the capability of a computer to learn from experience (training data) and to extract knowledge from examples. A successful learner should be able to make general conclusions about the data it is trained on. This allows it to act appropriately in new situations. Many machine learning techniques have been applied to NLP tasks.\nIn the recent years, the application of machine learning based techniques to language learning and acquisition problems has been the focus of increasing attention in the NLP community. The problems in the natural language understanding can be recast as classification problems, a generic type of problem in the AI area. Machine learning methods include several symbolic inductive learning paradigms such as instance based learning, decision trees, threshold linear separators, inductive logic, unsupervised clustering, etc.; and also a number of sub-symbolic and connectionist approaches, such as neural networks and genetic algorithms [2][7][10][19].\nMost natural language processing (NLP) tasks require the mapping of one level of representation to another. For example, in text to speech systems, the spelling representation of"}, {"heading": "International Journal of Computer Engineering and Applications, Volume IV, Issue III, Oct-Dec,13", "text": "words is translated to a corresponding phonetic representation; in part-of-speech (POS) tagging, the words of a sentence are translated into their contextually appropriate POS tags. All these types of NLP tasks can be formulated as a classification task, and are therefore appropriate problems for machine learning methods. Classification-based learning starts from a set of instances (examples), each consisting of a set of input features (a feature vector) and an output class. In general, machine learning algorithms can be classified as supervised learning and unsupervised learning. Supervised learning uses a set of inputs for which the appropriate (i.e., desired) outputs are known [11][24].\n[4.1] Decision Trees\nDecision tree classifier is one of the techniques for solving classification problems [24][25]. Decision trees are easy to create, to understand, and to apply, and they are quite accurate. They are easy to interpret and can be re-represented as if-then-else-rules. Decision trees are learned from training data. Each data item consists of a set of features describing an object and the class of the object. Decision trees are recursively built beginning with the top most node by (i) computing the best test for the current node according to some splitting criterion, (ii) creating a sub node for each possible outcome of the test, and (iii) recursively expanding each sub node in the same way until a given stopping criterion is satisfied. Usually, the decision tree is simplified (pruned) in order to avoid over-fitting of the training data.\nQuinlan\u2019s ID3 decision tree building algorithm and its variations such as C4.5 have become one of the most widely used symbolic learning techniques. Given a set of objects, ID3 produces a decision tree that attempts to classify all the given objects correctly. At each step, the algorithm finds the attribute that best divides the objects into the different classes by minimizing entropy. After all objects have been classified or all attributes have been used, the results can be represented by a decision tree or a set of production rules [28][29].\n[4.2] Bayesian Model\nBayesian model is one of the popular probabilistic models in pattern recognition research. This model is often used to classify different objects into predefined classes based on a set of features. A Bayesian model stores the probability of each class, the probability of each feature, and the probability of each feature given each class, based on the training data. When a new instance is encountered, it can be classified according to these probabilities. A Na\u00efve Bayesian model, variation of the Bayesian model, assumes that all features are mutually independent within each class [21][48].\n[5] IMPLEMENTATION\n[5.1] Methodology\n64"}, {"heading": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "text": "Input to the machine learning algorithm consists of a collection of training data, each having a tuple of values for a fixed set of attributes (or independent variables) and a class attribute (or dependent variable). An attribute is described as continuous or discrete according to whether its values are numeric or nominal. The class attribute is discrete.\nIn this paper, we present the training data as a sequence of nominal (character) values. The words of the corpus are converted into consonant and vowel sequence. The morphophonemic rules can be learned automatically from the examples given to the system. The characters to the left of the focus point (here, the sandhi position), and the characters to the right are given as input features. For modeling inflections, the stem and suffixes are the two components and are used as the left and right context of the sandhi position.\nThe experiment is conducted using the sample data collected from the Tamil corpus. The total of 35000 noun forms which are inflected with various case markers and plural forms. From which 4047 distinct noun stems are selected as training data. Different types of sandhi changes are assigned unique class numbers as shown in the Table 3. The class numbers indicate the type of change occurs when the case and plural markers are added with the noun stem.\n[5.2] Feature representation\nDifferent types of sandhi changes take place on different stem and suffix combinations. Training data is collected from the corpus for the above classes. The class numbers represent the type of sandhi changes. Maximum of 10 characters from the end of stem and 5 characters from suffix are used as nominal (symbolic) features. The symbol X in the feature value indicates a blank character. The class number is given as the output during training. The table 4, shows the feature vector for \u00e8\u00a3\u00b4 + \u00e4 and \u00f0\u00ec\u00f1\u00a2 + \u00e8\u00f7\u00a2 which belongs to output categories 6 and 8 respectively.\nStem features (10) Suffix Features Class"}, {"heading": "International Journal of Computer Engineering and Applications, Volume IV, Issue III, Oct-Dec,13", "text": "[5.3] Data sets\nThe morphophonemic variations due to phonological conditioning can be captured from few characters near the boundary (Sandhi position). To test this hypothesis, we changed the length of the context and prepared two different data sets. For the first data set (Model I), 10 character of the stem are used as left context. For the second experiment (Model II), only the right most 5 characters of the stem are used as left context. The learning algorithms are independently tested on these two sets of data. [5.4] Experimental Results\nThe training data of Model-I and Model-II in the specified format with different input attributes and single output attribute are supplied to the decision tree and Bayes classifiers. The classifiers generalize from the training data. The machine learning algorithms were tested on a Java based WEKA open source machine learning tool. The Weka machine learning tool [48] which has become a standard benchmarking tool in the machine learning community in recent years, was used to build models. The classifier models in this environment accept nominal values for the features. The classification is performed on various tree classifiers and Bayes classifiers with default parameter settings and a 10 fold cross validation. The algorithms used are listed below.\n1. BayesNet (B_Net) 2. NaiveBayes (N_B) 3. Bayes Averaged, one-dependence estimators (B_AODE) 4. Basic divide-and-conquer decision tree algorithm (ID3) 5. C4.5 decision tree learner ( J48) 6. Random Tree (R_Tree) 7. RandomForest (R_Forest)\n66"}, {"heading": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "text": "The performance measures for these algorithms are : Correctly classified Instances (CCI), Incorrectly classified instances (ICI), Kappa Statistics (KS), mean absolute error (MAE), relative squared error (RAE), root mean-squared error (RMSE) and root relative squared error (RRSE)."}, {"heading": "KS 0.9787 0.9761 0.9688 0.9874 0.9849 0.9613 0.984", "text": "This shows that, phonological conditioning of sandhi rules can be captured from fewer characters at the boundary without performance degradation. The lower performance of the learning algorithms on data set having more features (10 stem features) is due to more empty characters on the stems. The overall performance of the machine learning algorithms on learning inflections from the phonologically conditioned input features shows that the grammar rules of sandhi changes can be captured easily from the training data.\n[6] CONCLUSION\nThe sandhi rules are important in word formation. An automatic sandhi checker or sandhi generator can be used as a critical component in morphological analyser, morphological generator and text-to-speech synthesizer. In this paper we studied the performance of machine learning"}, {"heading": "International Journal of Computer Engineering and Applications, Volume IV, Issue III, Oct-Dec,13", "text": "models which classify sandhi changes on noun inflections. Tamil grammar recognizes different kinds of conditioning for the sandhi changes like phonological, grammatical and syntactic relations. Even within the grammatical relation and syntactic relation, the phonological condition may operate. In this paper only the characters present in the noun stem and the suffixes are used as features, without considering any grammatical or syntactic relations between the two components. Additional syntactic information can be used as features for a generalised word formation tasks. These models can also be applied for verb conjugations and other morphological processing applications for agglutinative languages. Machine learning techniques capture the inherent patterns in the language and are suitable for language learning applications.\n68"}, {"heading": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "text": ""}, {"heading": "International Journal of Computer Engineering and Applications, Volume IV, Issue III, Oct-Dec,13", "text": "[22] Menaka .S, Vijay Sundar Ram and Sobha Lalitha Devi, Morphological Generator for Tamil, In \u201cMorphological Analysers and Generators\u201d, (ed.) Mona Parakh, LDC-IL, Mysore, pp. 82 \u201396, 2010. [23] Michael C. Frank, Ichinco.D, and Tenenbaum.J.B., Principles of generalization for learning sequential structure in language. In Proceedings of the 30th Annual Meeting of the Cognitive Science Society, page 763-768. 2008. [24] Mitchell.T, Decision Tree Learning, in Machine Learning, The McGraw-Hill Companies, Inc., pp. 52-78. 1997. [25] Murthy S.K., Automatic construction of decision trees from data: A multi disciplinary survey, Data Mining and Knowledge Discovery, Vol.2, pp 345-389,1998 [26] Nuhman.M.A, Basic Tamil Grammar, University of Peradeniya ,Sri Lanka. (1999). [27] Pon Kothandaraman , A Grammar of contemporary Literary Tamil, International Institute of Tamil Studies, Chennai.(1997). [28] Quinlan, Ross.J, C4.5: Programs for machine learning. San Francisco:Morgan Kaufmann. (1993). [29] Quinlan, Ross.J, , Induction of decision trees. Machine Learning 1:81\u2013106. [30] Rajan .K, et.al., Applications of Neural Networks for Tamil Studies, International seminar on Tamil Computing, Madras University, Chennai. (2002), [31] Rajan .K, et.al., Corpus Analysis and Tagging for Tamil, Symposium on Translation Support Systems, I.I.T. Kanpur. ,(2002) [32] Rajan.K, Ramalingam.V, Ganesan.M, Palanivel.S, Automatic classification of Tamil\ndocuments using vector space model and artificial neural network, In Elsevier,Expert Systems with Applications, 36, 10914\u201310918. (2009).\n[33] Rajan.K, Ramalingam.V, Ganesan.M, Computational approaches for learning inflections in Tamil, Tamil Internet Conference, pg.183-189.(2010). [34] Rajan.K, Ramalingam.V, Ganesan.M, Application of Genetic Algorithm for morphological segmentation, In Proceedings of National Seminar on \u2018New Perspectives in Applied Linguistics\u2019, CAS Linguistics, Annamalai University, 192- 195, December 2011. [35] Rajan.K, Ramalingam.V, Ganesan.M, Computational models for Morphotactics, In Proceedings of National Seminar on Computational Linguistics and Language Technology,45-49, CAS Linguistics, Annamalai University. (2011). [36] Rajan.K.,et.al, Corpus analysis tools for Tamil, Tamil Internet 2003, Chennai. [37] Raymond J. Mooney and Mary Elaine Califf, Learning the Past Tense of English\nVerbs Using Inductive Logic Programming, in Symbolic, Connectionist, and Statistical Approaches to Learning for Natural Language Processing, Springer Verilag, ,(1996)\n[38] Rekha R U, Anand kumar M, Dhanalakshmi V Soman K P , Morphological Generator for Tamil A new data driven approach , pg-141-145. [39] Renganathan.D, Sandhi in Modern Tamil, Unpublished Ph.D Thesis, Annamalai University, ( 1983). [40] Rumelhart, D. E., & McClelland, J. L. On learning the past tense of English verbs. In Parallel distributed processing: Explorations in the microstructure of cognition (Vol. 2). Cambridge,MA: MIT Press. (1986). [41] Schmid.H, Probabilistic part-of-speech tagging using decision trees, In New Methods in Language Processing, Jones D.B.(Ed.), UCL Press. (1997).\n70"}, {"heading": "MACHINE LEARNING OF PHONOLOGICALLY CONDITIONED NOUN DECLENSIONS FOR TAMIL MORPHOLOGICAL GENERATORS", "text": "[42] Schmid.H, Parts-of-speech tagging with neural network, In COLING 94: The 15th International conference in Computational Linguistics, Kyoto, Japan. (1994). [43] Sproat, Richard, Morphology and Computation. Cambridge, MA: MIT Press.1992. [44] Thomas Lehman, A grammar of modern Tamil, Pondicherry Institute of Linguistices and culture. 1989. [45] Uma Maheshwar Rao G, Parameshwari K: CALTS, University of Hyderabad, \u2018On the\ndescription of morphological data for morphological analyzers and generators: A case of Telugu, Tamil and Kannada\u2019.\n[46] Van den Bosch, A., Walter Daelemans, & T.Weijters, Morphological analysis as classification: an inductive learning approach. Proceedings of NEML. (1996). [47] Viswanathan.S, Ramesh Kumar.S, Kumara Shanmugham.B, Arulmozi.B and Vijay Shanker.K, A Tamil Morphological Analyzer, ICON-2003, pp. 31-39.2003 [48] Witten .I.H & Frank.E,Data Mining: Practical machine learning tools and techniques, Morgan Kaufmann. 2005."}], "references": [{"title": "Application of Multilayer Perceptron Network for Tagging Parts-of-Speech", "author": ["Ahmed", "S. Bapi Raju", "P.V.S. Chandrasekhar", "M. Krishna Prasad"], "venue": "Proceedings of the Language Engineering Conference", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2002}, {"title": "A Sequence Labeling Approach to Morphological Analyzer for Tamil Language, (IJCSE", "author": ["M Anand Kumar", "V Dhanalakshmi", "K.P Soman", "S Rajendran"], "venue": "International Journal on Computer Science and Engineering", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Morphological Generator for Tamil, in Tamil Internet", "author": ["Anandan.P", "Rajani Parthasarathy", "Geetha", "T.V"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2001}, {"title": "Parts of Speech Tagger for Tamil", "author": ["Arulmozhi.P", "Sobha.L", "Kumara Shanmugam. B"], "venue": "Symposium on Indian Morphology. Phonology & Language Engineering,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Bosch.A, Memory-Based Language Processing", "author": ["Daelemans.W", "van den"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "Morphological Analyzer for Agglutinative Languages Using Machine Learning Approaches", "author": ["Dhanalakshmi V. et.al"], "venue": "Proceedings of International Conference on Advances in Recent Technologies in Communication", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "Machine learning research: Four Current Directions", "author": ["Dietterich T.G"], "venue": "AI Magazine,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1997}, {"title": "Introduction to Machine Learning, The MIT", "author": ["Etham Alpaydin"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2004}, {"title": "A grammar of Modern Tamil. Pondicherry: Pondicherry Institute of Linguistics and Culture.1993", "author": ["T Lehman"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1993}, {"title": "A Bayesian Model for Morpheme and Paradigm Identification, In Proceedings of the 39th Annual Meeting of the ACL, pages:482-490", "author": ["G Matthew"], "venue": "International Journal of Computer Engineering and Applications,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2001}, {"title": "Morphological Generator for Tamil, In \u201cMorphological Analysers and Generators\u201d, (ed.) Mona Parakh, LDC-IL", "author": ["Menaka .S", "Vijay Sundar Ram", "Sobha Lalitha Devi"], "venue": "Mysore, pp", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2010}, {"title": "Automatic construction of decision trees from data: A multi disciplinary survey, Data", "author": ["S.K. Murthy"], "venue": "Mining and Knowledge Discovery,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1998}, {"title": "Programs for machine learning", "author": ["Quinlan", "Ross.J"], "venue": "San Francisco:Morgan Kaufmann", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1993}, {"title": "Applications of Neural Networks for Tamil Studies, International seminar on Tamil Computing, Madras University, Chennai", "author": ["Rajan .K", "et.al"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2002}, {"title": "et.al., Corpus Analysis and Tagging for Tamil, Symposium on Translation Support Systems, I.I.T. Kanpur", "author": ["Rajan .K"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2002}, {"title": "Learning the Past Tense of English Verbs Using Inductive Logic Programming, in Symbolic, Connectionist, and Statistical Approaches to Learning for Natural Language Processing", "author": ["Raymond J. Mooney", "Mary Elaine Califf"], "venue": null, "citeRegEx": "37", "shortCiteRegEx": "37", "year": 1996}, {"title": "On learning the past tense of English verbs. In Parallel distributed processing: Explorations in the microstructure of cognition (Vol", "author": ["D.E. Rumelhart", "J.L. McClelland"], "venue": null, "citeRegEx": "40", "shortCiteRegEx": "40", "year": 1986}, {"title": "Morphology and Computation", "author": ["Sproat", "Richard"], "venue": null, "citeRegEx": "43", "shortCiteRegEx": "43", "year": 1992}, {"title": "A grammar of modern Tamil", "author": ["Thomas Lehman"], "venue": "Pondicherry Institute of Linguistices and culture", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1989}, {"title": "Shanmugham.B, Arulmozi.B and Vijay Shanker.K, A Tamil", "author": ["Viswanathan.S", "Ramesh Kumar.S", "Kumara"], "venue": "Morphological Analyzer,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2003}], "referenceMentions": [{"referenceID": 8, "context": "[1][13][18].", "startOffset": 7, "endOffset": 11}, {"referenceID": 3, "context": "[5][8][[14]", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[5][8][[14]", "startOffset": 3, "endOffset": 6}, {"referenceID": 0, "context": "[2] RELATED WORKS", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "In [5][14], they have discussed the algorithm for developing a rule based tagger for Tamil.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "Other rule based morphological analysers and generators for Tamil are discussed in [4][22][36][38][45][47].", "startOffset": 83, "endOffset": 86}, {"referenceID": 10, "context": "Other rule based morphological analysers and generators for Tamil are discussed in [4][22][36][38][45][47].", "startOffset": 86, "endOffset": 90}, {"referenceID": 19, "context": "Other rule based morphological analysers and generators for Tamil are discussed in [4][22][36][38][45][47].", "startOffset": 102, "endOffset": 106}, {"referenceID": 1, "context": "In [3], authors have proposed Sequence Labeling Approach for morphological analysis.", "startOffset": 3, "endOffset": 6}, {"referenceID": 16, "context": "Machine learning approaches have been presented for for learning past tense of English verbs [40], Tamil document classification [32], Morphological analysis [8][46], Parts-of-speech tagger using Neural networks [2][10][30][33][42] and Decisoin trees[20][41].", "startOffset": 93, "endOffset": 97}, {"referenceID": 5, "context": "Machine learning approaches have been presented for for learning past tense of English verbs [40], Tamil document classification [32], Morphological analysis [8][46], Parts-of-speech tagger using Neural networks [2][10][30][33][42] and Decisoin trees[20][41].", "startOffset": 158, "endOffset": 161}, {"referenceID": 0, "context": "Machine learning approaches have been presented for for learning past tense of English verbs [40], Tamil document classification [32], Morphological analysis [8][46], Parts-of-speech tagger using Neural networks [2][10][30][33][42] and Decisoin trees[20][41].", "startOffset": 212, "endOffset": 215}, {"referenceID": 13, "context": "Machine learning approaches have been presented for for learning past tense of English verbs [40], Tamil document classification [32], Morphological analysis [8][46], Parts-of-speech tagger using Neural networks [2][10][30][33][42] and Decisoin trees[20][41].", "startOffset": 219, "endOffset": 223}, {"referenceID": 2, "context": "Many of these methods directly apply decision trees as classifiers [4].", "startOffset": 67, "endOffset": 70}, {"referenceID": 1, "context": "[3] TAMIL LANGUAGE", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "In modern Tamil, all lexical or root morphemes can be distinguished into four groups: two major groups of nominal and verbal roots, which comprise almost all roots occurring in modern Tamil, and two minor groups of adjectival roots, and adverbial roots [18].", "startOffset": 253, "endOffset": 257}, {"referenceID": 8, "context": "When different types of suffixes are added to the noun, various morphophonemic rules operate [18].", "startOffset": 93, "endOffset": 97}, {"referenceID": 2, "context": "[4] MACHINE LEARNING", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "; and also a number of sub-symbolic and connectionist approaches, such as neural networks and genetic algorithms [2][7][10][19].", "startOffset": 113, "endOffset": 116}, {"referenceID": 4, "context": "; and also a number of sub-symbolic and connectionist approaches, such as neural networks and genetic algorithms [2][7][10][19].", "startOffset": 116, "endOffset": 119}, {"referenceID": 7, "context": ", desired) outputs are known [11][24].", "startOffset": 29, "endOffset": 33}, {"referenceID": 11, "context": "Decision tree classifier is one of the techniques for solving classification problems [24][25].", "startOffset": 90, "endOffset": 94}, {"referenceID": 12, "context": "After all objects have been classified or all attributes have been used, the results can be represented by a decision tree or a set of production rules [28][29].", "startOffset": 152, "endOffset": 156}, {"referenceID": 9, "context": "A Na\u00efve Bayesian model, variation of the Bayesian model, assumes that all features are mutually independent within each class [21][48].", "startOffset": 126, "endOffset": 130}, {"referenceID": 3, "context": "[5] IMPLEMENTATION", "startOffset": 0, "endOffset": 3}], "year": 2014, "abstractText": "This paper presents machine learning solutions to a practical problem of Natural Language Generation (NLG), particularly the word formation in agglutinative languages like Tamil, in a supervised manner. The morphological generator is an important component of Natural Language Processing in Artificial Intelligence. It generates word forms given a root and affixes. The morphophonemic changes like addition, deletion, alternation etc., occur when two or more morphemes or words joined together. The Sandhi rules should be explicitly specified in the rule based morphological analyzers and generators. In machine learning framework, these rules can be learned automatically by the system from the training samples and subsequently be applied for new inputs. In this paper we proposed the machine learning models which learn the morphophonemic rules for noun declensions from the given training data. These models are trained to learn sandhi rules using various learning algorithms and the performance of those algorithms are presented. From this we conclude that machine learning of morphological processing such as word form generation can be successfully learned in a supervised manner, without explicit description of rules. The performance of Decision trees and Bayesian machine learning algorithms on noun declensions are discussed.", "creator": "Writer"}}}