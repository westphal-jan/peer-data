{"id": "1503.03562", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Mar-2015", "title": "Training Binary Multilayer Neural Networks for Image Classification using Expectation Backpropagation", "abstract": "compared to multilayer neural networks featuring real weights, binary multilayer neural networks ( pots ) can be implemented remarkably efficiently where dedicated hardware. bmnns have far demonstrated to be effective on binary classification tasks with expectation backpropagation ( ebp ) algorithm on high range text analysis. in this section, we investigate the capability of bmnns using noisy ebp algorithm on multiclass image classification tasks. the performances of these neural sets with multiple hidden layers featuring different numbers of hidden units are examined investigating mnist. subjects also explore the effectiveness of image spatial filters and the dropout strategy in bmnns. experimental results on mnist dataset show that ebp can prevent 2. 12 % test error comparing binary weights and 1. 66 % test error with real distances, which is comparable to the results of standard backpropagation algorithm on fully connected mnns.", "histories": [["v1", "Thu, 12 Mar 2015 02:24:31 GMT  (65kb)", "http://arxiv.org/abs/1503.03562v1", "8 pages with 1 figures and 4 tables"], ["v2", "Fri, 13 Mar 2015 01:32:15 GMT  (65kb)", "http://arxiv.org/abs/1503.03562v2", "8 pages with 1 figures and 4 tables"], ["v3", "Sun, 22 Mar 2015 21:47:56 GMT  (65kb)", "http://arxiv.org/abs/1503.03562v3", "8 pages with 1 figures and 4 tables"]], "COMMENTS": "8 pages with 1 figures and 4 tables", "reviews": [], "SUBJECTS": "cs.NE cs.CV cs.LG", "authors": ["zhiyong cheng", "daniel soudry", "zexi mao", "zhenzhong lan"], "accepted": false, "id": "1503.03562"}, "pdf": {"name": "1503.03562.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Zhiyong Cheng"], "emails": ["zy.cheng.2011@smu.edu.sg", "daniel.soudry@gmail.com", "lanzhzh}@cs.cmu.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n50 3.\n03 56\n2v 1\n[ cs"}, {"heading": "1 INTRODUCTION", "text": "In recent years, deep neural networks (DNNs) have attracts tremendous attentions from a wide range of research areas related to signal and information processing. State-of-the-art performances have been achieved with DNN techniques on various challenging tasks and applications, such as speech recognition (Hinton et al., 2012), object recognition (Krizhevsky et al., 2012; Szegedy et al., 2014), multimedia event detection (Lan et al., 2013), etc. Almost all the current DNNs are real-valuedweight Mutlilayer Neural Networks (RMNNs). However, an effective RMNNs are often massive and require large computational and energetic resources. For example, GoogLeNet has 22 layers with tens of thousands of hidden units (Szegedy et al., 2014). MNNs with binary weights (BMNNs) have the advantage that they can be implemented efficiently on dedicated hardware. For example, Karakiewicz et al. (2012) have presented a chip which enable 1012 multiply accumulates per second per mW power efficiency with binary weights. Thus, it is attractive to develop effective algorithms for BMNNs to achieve comparable performances with RMNNs.\nTraditional MNNs are trained with BackPropagation (BP) or similar gradient descent methods. However, BP or gradient descent methods cannot be directly used for training binary neural networks. A straightforward method for this problem is to binarize the real-valued weights, while this approach will decrease the performance significantly. Recently, Soudry et al. (2014) presented an\nExpectation BackPropagation (EBP) algorithm, which can support online training of MNNs with either continuous or discrete weight values. Experiments on several large text datasets show promising performances on binary classification tasks with binary-weighted MNNs (Soudry et al., 2014). As an extension of the previous work by Soudry et al. (2014), in this work, we study the performance of EBP algorithm on image classification tasks with binary and real weights MNNs. Besides, we investigate the effects of different factors, such as network depth, layer size and dropout strategies, on the performance of EBP algorithm in image classification. This study explores the possibility of using BMNNs for the multimedia supervised classification tasks."}, {"heading": "2 EXPECTATION BACKPROPAGATION", "text": "In this section, we review the expectation backpropagation (EBP) and introduce how to implement the EBP algorithm for binary weights in detail. Before introducing the EBP algorithm, we first describe the general notations.\nA blodfaced capital letter X denotes a matrix with components Xij . A blodfaced non-capital letter x denotes a column vector with components xi. Besides, xl denotes xi,l and Xl denotes Xij,l. The indicator function I(A) denotes that I(A) = 1 if condition A holds, and 0 otherwise. We consider a general feedforward Multilayer Neural Networks (MNN) with connections only between adjacent layers. Suppose the MNN has L layers, Vl is the number of hidden units in the l-th layer, and W = {Wl}Ll=1 is weight matrices Vl \u00d7 Vl\u22121 between the (l \u2212 1)-th layer and l-th layer. For simplicity, the activation function is vl = sign(Wlvl\u22121) function in this study. The output of the network is therefore\nvL = g(v0,W) = sign(WLsign(WL\u22121)sign(...W1v0)) (1)\nSimilar to supervised learning with MNNs, the task is to learn W for a MNN with known architecture given a set of labeled data pairs DN = {x(n), y(n)}Nn=1 (note D0 = \u2205), where each x(n) \u2208 RV0 is a data point, and each y(n) \u2208 {\u22121,+1}VL is a label. The EBP algorithm is derived within Bayesian framework. Given the labeled dataset, the aim is to find the weights W to maximize the posterior probability P (W|DN ). With the posterior, one can obtain the most probable weight configuration to minimize the expected zero-one loss over the outputs using the Maximum A Posteriori (MAP) estimation.\ny\u2217 = argmaxy\u2208Y \u2211\nW\nI{g(x,W) = y}P (W|DN) (2)\nThe posterior P (W|DN ) is updated in an online setting, where samples arrive sequentially. According to the Bayes rule, when the n-th sample is arrived, the posterior is updated as follows. For n = 1, ..., N , P (W|Dn) \u221d P (y(n)|x(n),W)P (W|Dn\u22121) (3) However, this update is generally intractable for large networks, as there is an exponential number of values for P (W|Dn) to be stored and updated. To solve this problem, the mean-field approximation is used to approximateP (W|Dn). Specifically,P (W|Dn) is approximated by P\u0302 (W|Dn), for which\nP\u0302 (W|Dn) = \u220f\ni,j,l\nP\u0302 (Wij,l|Dn) (4)\nwhere each factor is normalized. Based on the equation, performing a marginal of the posterior (see appendix A in Soudry et al. (2014) for details) of the Bayes update and re-arrange terms, we can obtain a Bayes-like update to the marginal\nP\u0302 (W|Dn) \u221d P\u0302 (y(n)|x(n),Wij,l, Dn\u22121)P\u0302 (Wij,l|Dn\u22121) (5) where\nP\u0302 (y(n)|x(n),Wij,l, Dn\u22121) = \u2211\nW\u2032:W \u2032 ij,l =Wij,l\nP (y(n)|x(n),W) \u220f\n{k,r,m}6={i,j,l}\nP\u0302 (W \u2032kr,m|Dn\u22121) (6)\nis the marginal likelihood. Accordingly, the P\u0302 (W|Dn) can be directly updated in a single step. The problem is that Eq. 6 contains a generally intractable summation over an exponential number of values.\nTo simplify the summation, another approximation is performed by assuming that the neuronal fanin is \u201clarge\u201d, namely, a large number of units in the previous layer is connected to each unit in the next layer. Since all the other weights besides Wij,l are independent (based on the mean field approximation), together with the large fan-in assumption, we can assume that the normalized input to each neural layer is a Gaussian distribution based on the Central Limit Theorem (CLT), thus\n\u2200m : um = Wmvm\u22121/ \u221a Km \u223c N (\u00b5m,\u03a3m) (7) This is a quite common and effective one (Ribeiro & Opper, 2011) approximation. Using this approximation (Eq. 7) and the activation function vm = sign(um), the distribution of um and vm can be calculated sequentially for all the layers m \u2208 {1, ..., L} (\u201cforward pass\u201d), for any given value of v0 (i.e., the input) and Wij,l. At the end of the forward pass, we can obtain P (y|Wij,l) = P (vL = y|Wij,l), \u2200i, j, l. With the obtained P (y|Wij,l), we can use Eq. 5 to update Wij,l, \u2200i, j, l. Because it is very computational to directly calculate P (vL = y|Wij,l) for every i, j, l, Taylor expansion of Wij,l (around its mean, \u3008Wij,l\u3009 to first order) is used to approximate P (vL = y|Wij,l). The first order terms in this expansion can be calculated using backward propagation of derivative terms\n\u2206k,m = \u2202lnP (vL = y)/\u2202\u00b5k,m (8)\nThus, after a forward pass for um and vm, m \u2208 {1, ..., L}, and a backward pass for P (vL = y|Wij,l), l \u2208 {L, ..., 1} for all Wij,l, we can update P (Wij,l) in each training epoch. In the next, we will summarize the general Expectation BackPropagation algorithm and introduce the implementation of EBP algorithm using binary weights and real bias. More detailed information about the implementation for real weights is described in Soudry et al. (2014)."}, {"heading": "2.1 THE EXPECTATION BACKPROPAGATION ALGORITHM", "text": "Given input x and desire output y, a forward pass is first performed to calculate the mean output \u3008vl\u3009 for each layer; then a backward pass is conducted to update P (Wij,l|Dn) for all the weights. Forward pass First, we initialize the MNN input \u3008vk,0\u3009 = xk for all k, and then calculate recursively the following values for m = 1, ..., L and all k\n\u00b5k,m = 1\u221a Km\nVm\u22121 \u2211\nr=1\n\u3008Wkr,m\u3009\u3008vr,m\u22121\u3009; \u3008vk,m\u3009 = 2\u03c6(\u00b5k,m/\u03c3k,m)\u2212 1 (9)\n\u03c32k,m = 1\nKm\nVm\u22121 \u2211\nr=1\n\u3008W 2kr,m\u3009(\u03b4m,1(\u3008vr,m\u22121\u30092 \u2212 1) + 1)\u2212 \u3008Wkr,m\u30092\u3008vr,m\u22121\u30092 (10)\nwhere \u3008Wkr,m\u3009 is the mean of the posterior distribution P (Wij,l|Dn). \u00b5m and \u03c32m are the mean and variance of um of the input of layer m, and \u3008vm\u3009 is the resulting mean of the output of layer m Backward pass The backward pass performs the Bayes update of the posterior (Eq. 5) using a Taylor expansion. Based on Eq. 8, we first initialize \u2206i,L for all i (refer to the Eq. C.9 in (Soudry et al., 2014)) as:\n\u2206i,L = yi N (0|\u00b5i,L, \u03c32i,L) \u03c6(yi\u00b5i,L/\u03c3i,L)\n(11)\nThen, for l = L, ..., 1 and \u2200i, j, we calculate\n\u2206i,l\u22121 = 2\u221a Kl\nN (0|\u00b5i,l\u22121, \u03c32i,l\u22121) Vm \u2211\nj=1\n\u3008Wji,l\u3009\u2206j,l (12)\nlnP (Wij,l)|Dn = lnP (Wij,l|Dn\u22121) + 1\u221a Kl Wij,l\u2206i,l\u3008vj,l\u22121\u3009+ C (13)\nwhere C is an unimportant constant, which is not dependent on Wij,l.\nOutput Based on the learnt weight configuration W\u2217, the output can be obtained by g(x,W) by Eq. 1, which is defined as the Deterministic EBP output (EBP-D) (Soudry et al., 2014). Alternatively, the MAP output (Eq. 2) can be calculated directly\ny\u2217 = argmaxy\u2208Y lnP (vL = y) = argmaxy\u2208Y [ \u2211\nk\nln( 1 + \u3008vk,L\u3009 1\u2212 \u3008vk,L\u3009 )yk ] (14)\nusing \u3008vk,L\u3009 from Eq. 9. The output of Eq. 14 is defined to be the Probabilistic EBP output (EBP-P)."}, {"heading": "2.2 IMPLEMENTATION FOR BINARY WEIGHTS", "text": "In the implementation of binary weights, the weight wij,l can only take value {\u22121,+1}. In Soudry et al. (2014), the distribution of Wij,l is parameterized in the way so that\nP (Wij,l|Dn) = eh\n(n) ij,l Wij,l\neh (n) ij,l + e\u2212h (n) ij,l\n(15)\nAccording to the forward process (Eq. 9 and Eq. 10), the parametrization can be used to compute \u3008Wij,l\u3009 = tanh(hij,l), \u3008W 2ij,l\u3009 = 1 and V ar(Wij,l) = sech2(hij, l). In the backward processing, substituting Eq. 15 into Eq. 13, the parameter h(n)ij,l is updated in each iteration as\nh (n) ij,l = h (n\u22121) ij,l + 1\u221a Kl \u2206i,l\u3008vj,l\u22121\u3009 (16)\nAlgorithm 1 shows the update steps of the EBP algorithm for BMNN. The weight configuration for the BMNN is obtained by simply clipping\nW \u2217ij,l = sign(hij,l) (17)"}, {"heading": "3 IMPLEMENTATION OF EBP ON IMAGE CLASSIFICATION", "text": "The performance of EBP algorithm has been evaluated in Soudry et al. (2014). However, those experiments are limited to high dimensional text datasets (the dimensions of the input feature vectors are from 11,463 to 238,739), and all the tasks are binary classification tasks. In this study, we will examine the performance of the EBP algorithm on image datasets for multiclass classification. To check the performance of EBP algorithm on deeper and small \u201cfan-in\u201d architectures on image classification, we use architectures with multiple layers and different hidden unites in experiments. Besides, we also explore the effectiveness of dropout techniques (Srivastava et al., 2014) in EBP algorithms.\nTwo methods are used to input the image into the MNNs. The first method is to directly convert the 2D image into 1D vector by concatenating the pixels in the image in certain order, such as concatenating each row from top to bottom. For example, for the standard MNIST handwritten digits database, the input of each image is 28 \u00d7 28 vector. In the second method (spatial filtering method), we consider the spatial configuration of the images. The spatial configuration is considered in a similar way as Convolutional Neural Networks (CNN) (LeCun et al., 1998). Each unit in a layer receives inputs from a set of units located in a small neighborhood in the previous layer. As shown in Fig. 1, a unit in the feature map has 100 inputs connected to a 10\u00d7 10 area in the input. Each unit has 100 inputs and therefore 100 trainable coefficients plus a trainable bias. Different from CNN, we only use one feature map in each hidden layer in this study.1 Since there is only one feature map, the network does not have the constraint that the connection weights for each unit in the feature map are the same. In the example shown in Fig. 1, there are 19\u00d7 19 = 361 units in the second layer and each unit have (100 + 1) trainable weights. In implementation, the weight matrix between the first and second layer is set to 361\u00d7784. The weight matrix is initialized in the way that only the weights for connected units are nonzero, namely, 361\u00d7 100 nonzero elements in the weight matrix. And the zero elements are kept zero during the whole training process. Because the EBP algorithm have the assumption of large fan-in, each unit in the hidden layers (feature maps) should be connected to a relative large neighborhood (such as \u201c10\u00d7 10\u201d or larger) in the input layer.\n1The performance of EBP algorithm on standard CNN architectures will be studied in further work.\nAlgorithm 1 Expectation BackPropagation (EBP) algorithm for fully connected binary MNNs - with binary synaptic weights and real bias (Soudry et al., 2014) .\n% \u03bdk,l = \u3008vk,l\u3009, tanh(hij,l) = \u3008Wij,l\u3009, and H is the set of all hij,l. Function [\u03bdL, Hnext] = UpdateStepBinaryMNN(x, y, H) \u22b2 Forward pass Initialize: \u2200k : \u03bdk,0 = xk, \u2200l : \u03bd0,l = 1 for m = 1 \u2192 L do \u2200k :\n\u00b5k,m = 1\u221a\nKm\u22121 [hk0,m +\n\u2211Vm\u22121 r=1 tanh(hkr,m)\u03bdr,m\u22121]\n\u03c32k,m = 1 Km\u22121 [1 + \u2211Vm\u22121 r=1 [(1\u2212 \u03bd2r,m\u22121)(1 \u2212 \u03b41m) + \u03bd2r,m\u22121sech2(hkr,m)]] \u03bdk,m = 2\u03c6(\u00b5k,m/\u03c3k,m)\u2212 1\nend for \u22b2 Backward pass Initialize:\n\u2206i,L = yi N (0|\u00b5i,L,\u03c3\n2 i,L)\n\u03c6(yi\u00b5i,L)/\u03c3i,L\nfor l = L \u2192 1 do\n\u2200i : \u2206i,l\u22121 = 1\u221a Kl\u22121 N (0|\u00b5i,l\u22121, \u03c32i,l\u22121) \u2211Vm j=1 tanh(hji,l)\u2206j,l \u2200i, j : hnextij,l = hij,l + 1\u221aKl\u22121\u2206i,l\u00b5j,l\u22121"}, {"heading": "4 EXPERIMENTS", "text": "In this section, we report the experiments of the EBP algorithm with MNNs with different architecture configurations in the standard MNIST handwritten digits database (LeCun et al., 1998)."}, {"heading": "4.1 EXPERIMENT SETUP", "text": "The MNIST database contains 60,000 images (28 \u00d7 28 pixels) and the test set has other 10,000 images. During the training process, all the images in the training set were presented sequentially in each epoch with a randomized order. The task was to identify the label {0, 1, ..., 9}, using a BMNN classifier trained by EBP algorithm. The label is set to be yk = 2\u03b4k,label+1 + 1. We pre-process the training data by centralizing (mean = 0) and normalizing (std = 1) the pixels as recommended for BackPropagation (LeCun et al., 2012). As standard for classification with real values of MNNs. The output neuron with highest value indicates predicted label of the input pattern.\nWhen treating the image as 1D vector, a constant 1 is added to each input vector to allow some bias to the neurons in the hidden layer (so v0 = 785). For the spatial filtering method, a bias is added to each convolving block. Two neural network architectures are used: one hidden layer and two hidden layers. For each type of architecture, we vary the number of neurons in the hidden layers. The detailed configurations for the network architectures for both methods are shown in Table 1. In the spatial filtering method, different filtering block sizes are used in the one hidden layer architecture: 12\u00d712, 13\u00d713, 14\u00d714, 15\u00d715, 16\u00d716 and 17\u00d717. Thus, the corresponding hidden units are 289, 256, 255, 196, 169 and 144, which are the feature map size in the hidden layer. Taking block size 12\u00d712 as an example, the feature map size becomes (28\u221212+1)\u00d7(28\u221212+1) = 17\u00d717 = 289 hidden units. Accordingly, there are 12\u00d7 12 = 144 inputs to each unit in the hidden layer, and 289 inputs to each unit in the output layer. We selected such configurations because of the large \u201cfanin\u201d assumption of the EBP algorithm. These configurations can also be used to learn whether it is better to set larger fan-in in the first layer or second layer. In the case of two-hidden-layer network, we only select one configuration because other configuration will lead to smaller fan-in (the hidden units [361, 100] correspond to 100 inputs to each unit in the first layer (10 \u00d7 10 block size in the input layer) and also 100 inputs (10 \u00d7 10 block size in the second layer) to each unit in the second hidden layer).\nWe also employ dropout technique on all the architectures. Dropout is a technique for preventing overfitting and provides a way of approximately combining exponentially many different network architectures efficiently to improve performance (Srivastava et al., 2014). The effectiveness of dropout has been demonstrated on neural networks, DBN and DBM with traditional error backpropagation with stochastic gradient decent method (Srivastava et al., 2014). In this study, we investigate its effectiveness in the EBP algorithm. In the experiments, we fixed p = 0.8 for both hidden units and input units in all dropout nets."}, {"heading": "4.2 EXPERIMENTAL RESULTS", "text": "In the result presentation, we use four abbreviations for presentation simplicity: (1) B-EBP-D: Deterministic EBP (EBP-D, see Sect. 2.1) with binary weights; (2) B-EBP-P: Probabilistic EBP (EBP-P, see Sect. 2.1) with binary weights; (3) R-EBP-D: Deterministic EBP with real weights; and (4) R-EBP-P: Probabilistic EBP with real weights. All the results reported below are based on the networks trained by 120 epochs. Training with more epochs may improve the performances of some network architectures. For weight initialization, we used the same method as Soudry et al. (2014).\nEffects of Hidden Unite Number and Hidden Layer Number Table 2 shows the results of MNNs on MNIST dataset using EBP algorithms on different network structures without dropout. From the results, we can observe that for networks with one hidden layer, the increase of hidden units clearly improves the performance and the best performance is obtained with 800 units. Two-hidden-layer structure with EBP-P outperforms the one-hidden-layer structure significantly, even with only 200 hidden units in each layer. The results demonstrate the EBP works well on MNNs. Another observation is that EBP-P outperforms EBP-D, which is consistent with the results shown in Soudry et al. (2014). Particularly, the performance of B-EBP-D in the two-hidden-layer structure is worse than that of in the one-hidden-layer structure. With growing size of hidden units, performance of B-EBPD decreases quickly in two-hidden-layer models. We also use the EBP algorithm with real weights for all the configurations. The performances of EBP with real weights are better than the performance of EBP with binary weights in all structures. R-EBP-P in two-hidden-layer is only slightly better than in one-hidden-layer. Although R-EBP-D in two-hidden-layer performs worse than in one-hidden-layer as B-EBP-D, its performance increase when the number of hidden units increases. The standard BackProp algorithm (using tanh activation function and optimized learning rate) on\nthe one-hidden-layer model with 800 units can obtain 2.13%2, which is comparable for the best results obtained by R-EBP-P. Using binary weight will hurt the performance, while from the table, we can see that binary weights with optimal neural networks do not hurt the performance much (best performance of B-EBP-P is 2.37%, comparing to 2.10% of R-EBP-P).\nEffects of Dropout The results of EBP algorithms on different network structures with dropout are shown in Table 3. The results show the same observations as those of without dropout. Comparing the results between Table 2 and Table 3, we can see that using dropout can improve the performance in all configurations, which demonstrates that the dropout also works in the EBP algorithms. From the results of using 1000 units and 800 units in one-hidden-layer structure, we can see that without dropout, the result of 1000 hidden units is worse that that of 800 hidden units, while with dropout, the performance is continuously increasing when increase the hidden unit number from 800 to 1000. Besides, with dropout, the performance of B-EBP-D becomes reasonable. The results validate that dropout can effectively prevent overfitting in BMNNs with the EBP algorithm.\nEffects of Spatial Filtering Table 4 shows the results of MNNs using the EBP algorithm with the consideration of image spatial configuration. The best performance of spatial filtering method using binary weights is 3.56% (obtained by 225 hidden units in one-layer structure), which is worse than the results of using \u201c1D Input Vector\u201d method as shown in Table 2. On the contrary, the performances of using real weights can be improved by the spatial filtering method, as the performance is better than all the network structures using \u201c1D Vector Input\u201d method without dropout (the results in Table 2). The best results are obtained in the configuration of 256 hidden units (13 \u00d7 13 inputs to each unit in the hidden layer, and 256 inputs to each unit in the output layer). The results of this method shed light on the extension of the EBP method on Convolutional Neural Networks, such as the block size connecting to each unit in the feature map in each convolutional layer.\nSummary The analysis of experimental results gives us a few interesting findings. They include: (1) BMNNs with the EBP algorithm work well for image classification task, although the performance is not as good as real MNNs3; (2) even if the fan-in size is only few hundreds (e.g., [784, 200, 10]), the EBP algorithm still works well on BMNNs; (3) BMNNs with EBP-D algorithms on networks\n2Note that using error regularization and proper weight initialization, standard backpropagation can achieve better performance. For example, we can achieve 1.65% error rate by using L1 and L2 error regularization and initializing the weight uniformly in [\u2212 \u221a 6\nfanin+fanout ,\n\u221a\n6\nfanin+fanout ] with 500 hidden units.\n3Note that the EBP algorithm on MNNs with real weight can obtain comparable results with respect to the standard BackPropagation method.\nwith two-hidden-layer (more layers) outperform the networks with one-hidden-layer; (4) dropout can significantly improve the performance of BMNNs with the EBP algorithm; and (5) BMNNs with the consideration of spatial filtering does not improve the classification performance, based on the results on MNIST."}, {"heading": "5 CONCLUSIONS", "text": "In this paper, we report the performance of binary multilayer neural networks (BMNNs) on image classification tasks. Expectation BackPropagation (EBP) algorithm is used to train BMNNs with different network architectures and the performance is evaluated on the standard MNIST digits dataset. Experimental results demonstrate that BMNNs with the EBP algorithm can achieve good performance on the MNIST classification tasks. The results also show that the dropout techniques can significant improve BMNNs with the EBP algorithm. Image spatial configuration improves the performance of networks with real weights but not that of BMNNs. In this study, we only conduct experiments on the MNIST dataset. The performance of BMNNs with EBP algorithm on image classification tasks needs to be further validated on other image datasets (e.g., CIFAR10). In the future, we would like to study the performance of standard Convolutional Neural Networks with the use of EBP algorithm and to explore different weight initialization methods."}, {"heading": "ACKNOWLEDGMENTS", "text": "This is a course project for \u201cLab Course on Deep Learning (11-875)\u201d, during Zhiyong Cheng\u2019s visit to Carnegie Mellon University."}], "references": [{"title": "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups", "author": ["Hinton", "Geoffrey", "Deng", "Li", "Yu", "Dong", "Dahl", "George E", "Mohamed", "Abdel-rahman", "Jaitly", "Navdeep", "Senior", "Andrew", "Vanhoucke", "Vincent", "Nguyen", "Patrick", "Sainath", "Tara N"], "venue": "Signal Processing Magazine, IEEE,", "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "tmacs/mw fine-grained stochastic resonant charge-recycling array processor", "author": ["Karakiewicz", "Rafal", "Genov", "Roman", "Cauwenberghs", "Gert"], "venue": "Sensors Journal, IEEE,", "citeRegEx": "Karakiewicz et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Karakiewicz et al\\.", "year": 2012}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Cmu-informedia at TRECVID 2013 multimedia event detection", "author": ["Lan", "Zhen-Zhong", "Jiang", "Lu", "Yu", "Shoou-I", "Rawat", "Shourabh", "Cai", "Yang", "Gao", "Chenqiang", "Xu", "Shicheng", "Shen", "Haoquan", "Li", "Xuanchong", "Wang", "Yipei"], "venue": "In TRECVID 2013 Workshop,", "citeRegEx": "Lan et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Lan et al\\.", "year": 2013}, {"title": "Gradient-based learning applied to document recognition", "author": ["LeCun", "Yann", "Bottou", "L\u00e9on", "Bengio", "Yoshua", "Haffner", "Patrick"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Efficient backprop", "author": ["LeCun", "Yann A", "Bottou", "L\u00e9on", "Orr", "Genevieve B", "M\u00fcller", "Klaus-Robert"], "venue": "In Neural networks: Tricks of the trade,", "citeRegEx": "LeCun et al\\.,? \\Q2012\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 2012}, {"title": "Expectation propagation with factorizing distributions: A gaussian approximation and performance results for simple models", "author": ["Ribeiro", "Fabiano", "Opper", "Manfred"], "venue": "Neural computation,", "citeRegEx": "Ribeiro et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Ribeiro et al\\.", "year": 2011}, {"title": "Expectation backpropagation: parameter-free training of multilayer neural networks with continuous or discrete weights", "author": ["Soudry", "Daniel", "Hubara", "Itay", "Meir", "Ron"], "venue": "In Proc. of NIPS,", "citeRegEx": "Soudry et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Soudry et al\\.", "year": 2014}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Srivastava", "Nitish", "Hinton", "Geoffrey", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Srivastava et al\\.,? \\Q1929\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 1929}, {"title": "Going deeper with convolutions", "author": ["Szegedy", "Christian", "Liu", "Wei", "Jia", "Yangqing", "Sermanet", "Pierre", "Reed", "Scott", "Anguelov", "Dragomir", "Erhan", "Dumitru", "Vanhoucke", "Vincent", "Rabinovich", "Andrew"], "venue": "arXiv preprint arXiv:1409.4842,", "citeRegEx": "Szegedy et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Szegedy et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "State-of-the-art performances have been achieved with DNN techniques on various challenging tasks and applications, such as speech recognition (Hinton et al., 2012), object recognition (Krizhevsky et al.", "startOffset": 143, "endOffset": 164}, {"referenceID": 2, "context": ", 2012), object recognition (Krizhevsky et al., 2012; Szegedy et al., 2014), multimedia event detection (Lan et al.", "startOffset": 28, "endOffset": 75}, {"referenceID": 9, "context": ", 2012), object recognition (Krizhevsky et al., 2012; Szegedy et al., 2014), multimedia event detection (Lan et al.", "startOffset": 28, "endOffset": 75}, {"referenceID": 3, "context": ", 2014), multimedia event detection (Lan et al., 2013), etc.", "startOffset": 36, "endOffset": 54}, {"referenceID": 9, "context": "For example, GoogLeNet has 22 layers with tens of thousands of hidden units (Szegedy et al., 2014).", "startOffset": 76, "endOffset": 98}, {"referenceID": 0, "context": "State-of-the-art performances have been achieved with DNN techniques on various challenging tasks and applications, such as speech recognition (Hinton et al., 2012), object recognition (Krizhevsky et al., 2012; Szegedy et al., 2014), multimedia event detection (Lan et al., 2013), etc. Almost all the current DNNs are real-valuedweight Mutlilayer Neural Networks (RMNNs). However, an effective RMNNs are often massive and require large computational and energetic resources. For example, GoogLeNet has 22 layers with tens of thousands of hidden units (Szegedy et al., 2014). MNNs with binary weights (BMNNs) have the advantage that they can be implemented efficiently on dedicated hardware. For example, Karakiewicz et al. (2012) have presented a chip which enable 10 multiply accumulates per second per mW power efficiency with binary weights.", "startOffset": 144, "endOffset": 730}, {"referenceID": 0, "context": "State-of-the-art performances have been achieved with DNN techniques on various challenging tasks and applications, such as speech recognition (Hinton et al., 2012), object recognition (Krizhevsky et al., 2012; Szegedy et al., 2014), multimedia event detection (Lan et al., 2013), etc. Almost all the current DNNs are real-valuedweight Mutlilayer Neural Networks (RMNNs). However, an effective RMNNs are often massive and require large computational and energetic resources. For example, GoogLeNet has 22 layers with tens of thousands of hidden units (Szegedy et al., 2014). MNNs with binary weights (BMNNs) have the advantage that they can be implemented efficiently on dedicated hardware. For example, Karakiewicz et al. (2012) have presented a chip which enable 10 multiply accumulates per second per mW power efficiency with binary weights. Thus, it is attractive to develop effective algorithms for BMNNs to achieve comparable performances with RMNNs. Traditional MNNs are trained with BackPropagation (BP) or similar gradient descent methods. However, BP or gradient descent methods cannot be directly used for training binary neural networks. A straightforward method for this problem is to binarize the real-valued weights, while this approach will decrease the performance significantly. Recently, Soudry et al. (2014) presented an", "startOffset": 144, "endOffset": 1328}, {"referenceID": 7, "context": "Experiments on several large text datasets show promising performances on binary classification tasks with binary-weighted MNNs (Soudry et al., 2014).", "startOffset": 128, "endOffset": 149}, {"referenceID": 7, "context": "Experiments on several large text datasets show promising performances on binary classification tasks with binary-weighted MNNs (Soudry et al., 2014). As an extension of the previous work by Soudry et al. (2014), in this work, we study the performance of EBP algorithm on image classification tasks with binary and real weights MNNs.", "startOffset": 129, "endOffset": 212}, {"referenceID": 7, "context": "Based on the equation, performing a marginal of the posterior (see appendix A in Soudry et al. (2014) for details) of the Bayes update and re-arrange terms, we can obtain a Bayes-like update to the marginal", "startOffset": 81, "endOffset": 102}, {"referenceID": 7, "context": "More detailed information about the implementation for real weights is described in Soudry et al. (2014).", "startOffset": 84, "endOffset": 105}, {"referenceID": 7, "context": "9 in (Soudry et al., 2014)) as:", "startOffset": 5, "endOffset": 26}, {"referenceID": 7, "context": "1, which is defined as the Deterministic EBP output (EBP-D) (Soudry et al., 2014).", "startOffset": 60, "endOffset": 81}, {"referenceID": 7, "context": "In Soudry et al. (2014), the distribution of Wij,l is parameterized in the way so that", "startOffset": 3, "endOffset": 24}, {"referenceID": 4, "context": "The spatial configuration is considered in a similar way as Convolutional Neural Networks (CNN) (LeCun et al., 1998).", "startOffset": 96, "endOffset": 116}, {"referenceID": 5, "context": "The performance of EBP algorithm has been evaluated in Soudry et al. (2014). However, those experiments are limited to high dimensional text datasets (the dimensions of the input feature vectors are from 11,463 to 238,739), and all the tasks are binary classification tasks.", "startOffset": 55, "endOffset": 76}, {"referenceID": 7, "context": "Algorithm 1 Expectation BackPropagation (EBP) algorithm for fully connected binary MNNs with binary synaptic weights and real bias (Soudry et al., 2014) .", "startOffset": 131, "endOffset": 152}, {"referenceID": 4, "context": "In this section, we report the experiments of the EBP algorithm with MNNs with different architecture configurations in the standard MNIST handwritten digits database (LeCun et al., 1998).", "startOffset": 167, "endOffset": 187}, {"referenceID": 5, "context": "We pre-process the training data by centralizing (mean = 0) and normalizing (std = 1) the pixels as recommended for BackPropagation (LeCun et al., 2012).", "startOffset": 132, "endOffset": 152}, {"referenceID": 7, "context": "For weight initialization, we used the same method as Soudry et al. (2014). Effects of Hidden Unite Number and Hidden Layer Number Table 2 shows the results of MNNs on MNIST dataset using EBP algorithms on different network structures without dropout.", "startOffset": 54, "endOffset": 75}, {"referenceID": 7, "context": "For weight initialization, we used the same method as Soudry et al. (2014). Effects of Hidden Unite Number and Hidden Layer Number Table 2 shows the results of MNNs on MNIST dataset using EBP algorithms on different network structures without dropout. From the results, we can observe that for networks with one hidden layer, the increase of hidden units clearly improves the performance and the best performance is obtained with 800 units. Two-hidden-layer structure with EBP-P outperforms the one-hidden-layer structure significantly, even with only 200 hidden units in each layer. The results demonstrate the EBP works well on MNNs. Another observation is that EBP-P outperforms EBP-D, which is consistent with the results shown in Soudry et al. (2014). Particularly, the performance of B-EBP-D in the two-hidden-layer structure is worse than that of in the one-hidden-layer structure.", "startOffset": 54, "endOffset": 756}], "year": 2017, "abstractText": "Compared to Multilayer Neural Networks with real weights, Binary Multilayer Neural Networks (BMNNs) can be implemented more efficiently on dedicated hardware. BMNNs have been demonstrated to be effective on binary classification tasks with Expectation BackPropagation (EBP) algorithm on high dimensional text datasets. In this paper, we investigate the capability of BMNNs using the EBP algorithm on multiclass image classification tasks. The performances of binary neural networks with multiple hidden layers and different numbers of hidden units are examined on MNIST. We also explore the effectiveness of image spatial filters and the dropout technique in BMNNs. Experimental results on MNIST dataset show that EBP can obtain 2.12% test error with binary weights and 1.66% test error with real weights, which is comparable to the results of standard BackPropagation algorithm on fully connected MNNs.", "creator": "LaTeX with hyperref package"}}}