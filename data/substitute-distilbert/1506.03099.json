{"id": "1506.03099", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2015", "title": "Scheduled Sampling for Sequence Prediction with Recurrent Neural Networks", "abstract": "such neural networks can usually set to produce sequences of tokens given some input, as exemplified by recent results in machine sorting and image captioning. the current approach which training them corresponds in maximizing the likelihood of each token recognizing the sequence given the current ( recurrent ) td and the previous token. at inference, the unknown previous token is then replaced by a token generated by the model itself. this discrepancy between training an inference can yield errors that can accumulate quickly along accurately generated sequence. we propose a curriculum learning strategy to gently change the training process from a fully guided scheme using the true previous token, towards a less guided scheme which mostly uses completely generated token instead. experiments on several sequence prediction tasks show that inconsistent approach yields significant improvements.", "histories": [["v1", "Tue, 9 Jun 2015 20:33:47 GMT  (117kb,D)", "http://arxiv.org/abs/1506.03099v1", null], ["v2", "Mon, 15 Jun 2015 15:29:22 GMT  (117kb,D)", "http://arxiv.org/abs/1506.03099v2", null], ["v3", "Wed, 23 Sep 2015 16:35:42 GMT  (117kb,D)", "http://arxiv.org/abs/1506.03099v3", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CL cs.CV", "authors": ["samy bengio", "oriol vinyals", "navdeep jaitly", "noam shazeer"], "accepted": true, "id": "1506.03099"}, "pdf": {"name": "1506.03099.pdf", "metadata": {"source": "CRF", "title": "Scheduled Sampling for Sequence Prediction with Recurrent Neural Networks", "authors": ["Samy Bengio", "Oriol Vinyals", "Navdeep Jaitly", "Noam Shazeer"], "emails": ["bengio@google.com", "vinyals@google.com", "ndjaitly@google.com", "noam@google.com"], "sections": [{"heading": null, "text": "Recurrent Neural Networks can be trained to produce sequences of tokens given some input, as exemplified by recent results in machine translation and image captioning. The current approach to training them consists in maximizing the likelihood of each token in the sequence given the current (recurrent) state and the previous token. At inference, the unknown previous token is then replaced by a token generated by the model itself. This discrepancy between training and inference can yield errors that can accumulate quickly along the generated sequence. We propose a curriculum learning strategy to gently change the training process from a fully guided scheme using the true previous token, towards a less guided scheme which mostly uses the generated token instead. Experiments on several sequence prediction tasks show that this approach yields significant improvements."}, {"heading": "1 Introduction", "text": "Recurrent neural networks can be used to process sequences, either as input, output or both. While they are known to be hard to train when there are long term dependencies in the data [1], some versions like the Long Short-Term Memory (LSTM) [2] are better suited for this. In fact, they have recently shown impressive performance in several sequence prediction problems including machine translation [3], contextual parsing [4], image captioning [5] or even video description [6].\nIn this paper, we consider the set of problems that attempt at generating a sequence of tokens of variable size, such as the problem of machine translation, where the goal is to translate a given sentence from a source language to a target language, but also problems where the input is not necessarily a sequence, like the image captioning problem, where the goal is to generate a textual description of a given image.\nIn both cases, recurrent neural networks (or their variants like LSTMs) are generally trained to maximize the likelihood of generating the target sequence of tokens given the input. In practice, this is done by maximizing the likelihood of each target token given the current state of the model (which summarizes the input and the past output tokens) and the previous target token, which helps the model learn a kind of language model over target tokens. However, at inference time, true previous target tokens are not available, and are thus replaced by tokens generated by the model itself, yielding a discrepancy between how the model is used at training and inference time. This discrepancy can be mitigated by the use of a beam search heuristic maintaining several generated target sequences, but for continuous state space models like recurrent neural networks, the beam size is usually very small compared to the actual state space.\nThe main problem is that mistakes made early in the sequence generation process are fed as input to the model and can be quickly amplified because the model might be in a part of the state space it has never seen at training time.\nar X\niv :1\n50 6.\n03 09\n9v 1\n[ cs\n.L G\n] 9\nJ un\nHere, we propose a curriculum learning approach [7] to gently bridge the gap between training and inference for sequence prediction tasks using recurrent neural networks. We propose to change the training process in order to gradually force the model to account for its own mistakes, as it would have to do anyway during inference. Doing so, the model explores more during training and is thus more robust to correct its own mistakes at inference time as it has learned to do so at training time. We will show experimentally that this approach yields better performance on several sequence prediction tasks.\nThe paper is organized as follows: in Section 2, we present our proposed approach to better train sequence prediction tasks with recurrent neural networks; this is followed by Section 3 which draws links to some related approaches. We then present some experimental results in Section 4 and conclude in Section 5."}, {"heading": "2 Proposed Approach", "text": "We are considering supervised tasks where the training set is given in terms of N input/output pairs {Xi, Y i}Ni=1, where Xi is the input and can be either static (like an image) or dynamic (like a sequence) while the target output Y i is a sequence yi1, y i 2, . . . , y i Ti\nof a variable number of tokens that belong to a fixed known dictionary."}, {"heading": "2.1 Model", "text": "Given a single input/output pair (X,Y ), the log probability P (Y |X) can be computed as:\nlogP (Y |X) = logP (yT1 |X)\n= T\u2211 t=1 logP (yt|yt\u221211 , X)\n(1)\nwhere Y is a sequence of length T represented by tokens y1, y2, . . . , yT . The latter term in the above equation is estimated by a recurrent neural network with parameters \u03b8 by introducing a state vector, ht, that is a function of the previous state, ht\u22121, and the previous output token, yt\u22121, i.e.\nlogP (yt|yt\u221211 , X; \u03b8) = logP (yt|ht; \u03b8) (2)\nwhere ht is computed by a recurrent neural network as follows:\nht = { f(X; \u03b8) if t = 1, f(ht\u22121, yt\u22121; \u03b8) otherwise.\n(3)\nP (yt|ht; \u03b8) is often implemented as a linear projection1 of the state vector ht into a vector of scores, one for each token of the output dictionary, followed by a softmax transformation to ensure the scores are properly normalized (positive and sum to 1). f(h, y) is usually a non-linear function that combines the previous state and the previous output in order to produce the current state.\nThis means that the model focuses on learning to output the next token given the current state of the model AND the previous token. Thus, the model represents the probability distribution of sequences in the most general form - unlike Conditional Random Fields [8] and other models that assume independence between between outputs at different time steps, given latent variable states. The capacity of the model is only limited by the representational capacity of the recurrent and feedforward layers. LSTMs, with their ability to learn long range structure are especially well suited to this task and make it possible to learn rich distributions over sequences.\nIn order to learn variable length sequences, a special token, <EOS>, that signifies the end of a sequence is added to the dictionary and the model. During training, <EOS> is concatenated to the end of each sequence. During inference, the model generates tokens until it generates <EOS>.\n1 Although one could also use a multi-layered non-linear projection."}, {"heading": "2.2 Training", "text": "Training recurrent neural networks to solve such tasks is usually accomplished by using mini-batch stochastic gradient descent to look for a set of parameters \u03b8? that maximizes the log likelihood of producing the correct target sequence Y i given the input data Xi for all training pairs (Xi, Y i):\n\u03b8? = argmax \u03b8 \u2211 (Xi,Y i) logP (Y i|Xi; \u03b8) . (4)"}, {"heading": "2.3 Inference", "text": "During inference the model can generate the full sequence yT1 given X by generating one token at a time, and advancing time by one step. When an <EOS> token is generated, it signifies the end of the sequence. For this process, at time t, the model needs as input the output token yt\u22121 from the last time step in order to produce yt. Since we do not have access to the true previous token, we can instead either select the most likely one given our model, or sample according to it.\nSearching for the sequence Y with the highest probability given X is too expensive because of the combinatorial growth in the number of sequences. Instead we use a beam searching procedure to generate k \u201cbest\u201d sequences. We do this by maintaining a heap of m best candidate sequences. At each time step new candidates are generated by extending each candidate by one token and adding them to the heap. At the end of the step, the heap is re-pruned to only keep m candidates. The beam searching is truncated when no new sequences are added, and k best sequences are returned.\nWhile beam search is often used for discrete state based models like Hidden Markov Models where dynamic programming can be used, it is harder to use efficiently for continuous state based models like recurrent neural networks, since there is no way to factor the followed state paths in a continuous space, and hence the actual number of candidates that can be kept during beach search decoding is very small.\nIn all these cases, if a wrong decision is taken at time t \u2212 1, the model can be in a part of the state space that is very different from those visited from the training distribution and for which it doesn\u2019t know what to do. Worse, it can easily lead to cumulative bad decisions - a classic problem in sequential Gibbs sampling type approaches to sampling, where future samples can have no influence on the past."}, {"heading": "2.4 Bridging the Gap with Scheduled Sampling", "text": "The main difference between training and inference for sequence prediction tasks when predicting token yt is whether we use the true previous token yt\u22121 or an estimate y\u0302t\u22121 coming from the model itself.\nWe propose here a sampling mechanism that will randomly decide, during training, whether we use yt\u22121 or y\u0302t\u22121. Assuming we use a mini-batch based stochastic gradient descent approach, for every token to predict yt \u2208 Y of the ith mini-batch of the training algorithm, we propose to flip a coin and use the true previous token with probability i, or an estimate coming from the model itself with probability (1 \u2212 i)2. The estimate of the model can be obtained by sampling a token according to the probability distribution modeled by P (yt\u22121|ht\u22121), or can be taken as the argmaxs P (yt\u22121 = s|ht\u22121). This process is illustrated in Figure 1. When i = 1, the model is trained exactly as before, while when i = 0 the model is trained in the same setting as inference. We propose here a curriculum learning strategy to go from one to the other: intuitively, at the beginning of training, sampling from the model would yield a random token since the model is not well trained, which could lead to very slow convergence, so selecting more often the true previous token should help; on the other hand, at the end of training, i should favor sampling from the model more often, as this corresponds to the true inference situation, and one expects the model to already be good enough to handle it and sample reasonable tokens.\n2Note that in the experiments, we flipped the coin for every token, but we could alternatively flip the coin only once per example.\nWe thus propose to use a schedule to decrease i as a function of i itself, in a similar manner used to decrease the learning rate in most modern stochastic gradient descent approaches. Examples of such schedules can be seen in Figure 2 as follows:\n\u2022 Linear decay: i = max( , k \u2212 ci) where 0 \u2264 < 1 is the minimum amount of truth to be given to the model and k and c provide the offset and slope of the decay, which depend on the expected speed of convergence.\n\u2022 Exponential decay: i = ki where k < 1 is a constant that depends on the expected speed of convergence.\n\u2022 Inverse sigmoid decay: i = k/(k+exp(i/k)) where k \u2265 1 depends on the expected speed of convergence.\nWe call our approach Scheduled Sampling. Note that when we sample the previous token y\u0302t\u22121 from the model itself while training, we could back-propagate the gradient of the losses at times t \u2192 T through that decision. This was not done in the experiments described in this paper and is left for future work."}, {"heading": "3 Related Work", "text": "The discrepancy between the training and inference distributions has already been noticed in the literature, in particular for control and reinforcement learning tasks.\nSEARN [9] was proposed to tackle problems where supervised training examples might be different from actual test examples when each example is made of a sequence of decisions, like acting in a complex environment where a few mistakes of the model early in the sequential decision process might compound and yield a very poor global performance. Their proposed approach involves a meta-algorithm where at each meta-iteration one trains a new model according to the current policy (essentially the expected decisions for each situation), applies it on a test set and modifies the next iteration policy in order to account for the previous decisions and errors. The new policy is thus a combination of the previous one and the actual behavior of the model.\nIn comparison to SEARN, our proposed approach is completely online: a single model is trained and the policy slowly evolves during training, instead of a batch approach, which makes it much faster to train3 Furthermore, SEARN, as well as similar approaches like [10], have been proposed in the context of reinforcement learning, while we consider the supervised learning setting trained using stochastic gradient descent on the overall objective.\nOther approaches have considered the problem from a ranking perspective, in particular for parsing tasks [11] where the target output is a tree. In this case, the authors proposed to use a beam search both at training and inference time, so that both phases are aligned. The training beam is used to find\n3In fact, in the experiments we report in this paper, our proposed approach was not meaningfully slower (nor faster) to train than the baseline.\nthe best current estimate of the model, which is compared to the guided solution (the truth) using a ranking loss. Unfortunately, this is not feasible when using a model like a recurrent neural network (which is now the state-of-the-art technique in many sequential tasks), as the state sequence cannot be factored easily (because it is a multi-dimensional continuous state) and thus beam search is hard to use efficiently at training time (as well as inference time, in fact)."}, {"heading": "4 Experiments", "text": "We describe in this section experiments on three different tasks, in order to show that scheduled sampling can be helpful in different settings. We report results on image captioning, constituency parsing and speech recognition."}, {"heading": "4.1 Image Captioning", "text": "Image captioning has attracted a lot of attention in the past year. The task can be formulated as a mapping of an image onto a sequence of words describing its content in some natural language, and most proposed approaches employ some form of recurrent network structure with simple decoding schemes [5, 6, 12, 13, 14]. A notable exception is the system proposed in [15], which does not directly optimize the log likelihood of the caption given the image, and instead proposes a pipelined approach.\nSince an image can have many valid captions, the evaluation of this task is still an open problem. Some attempts have been made to design metrics that positively correlate with human evaluation [16], and a common set of tools have been published by the MSCOCO team [17].\nWe used the MSCOCO dataset from [17] to train our model. We trained on 75k images and report results on a separate development set of 5k additional images. Each image in the corpus has 5 different captions, so the training procedure picks one at random, creates a mini-batch of examples, and optimizes the objective function defined in (4). The image is preprocessed by a pretrained convolutional neural network (without the last classification layer) similar to the one described in [18], and the resulting image embedding is treated as if it was the first word from which the model starts generating language. The recurrent neural network generating words is an LSTM with one layer of 512 hidden units, and the input words are represented by embedding vectors of size 512. The number of words in the dictionary is 8857. We used an inverse sigmoid decay schedule for i for the scheduled sampling approach.\nTable 1 shows the results on various metrics on the development set. Each of these metrics is a variant of estimating the overlap between the obtained sequence of words and the target one. Since there were 5 target captions per image, the best result is always chosen. To the best of our knowledge, the baseline results are consistent (slightly better) with the current state-of-the-art on that task. While dropout helped in terms of log likelihood (as expected but not shown), it had a negative impact on the real metrics. On the other hand, scheduled sampling successfully trained a model more resilient to failures due to training and inference mismatch, which likely yielded higher quality captions according to all the metrics. Ensembling models also yielded better performance, both for the baseline and the schedule sampling approach. It is also interesting to note that a model trained while always sampling from itself (hence in a regime similar to inference), dubbed Always Sampling in the table, yielded very poor performance, as expected because the model has a hard time learning the task in that case."}, {"heading": "4.2 Constituency Parsing", "text": "Another less obvious connection with the any-to-sequence paradigm is constituency parsing. Recent work [4] has proposed an interpretation of a parse tree as a sequence of linear \u201coperations\u201d that build up the tree. This linearization procedure allowed them to train a model that can map a sentence onto its parse tree without any modification to the any-to-sequence formulation.\nThe trained model has one layer of 512 LSTM cells and words are represented by embedding vectors of size 512. We used an attention mechanism similar to the one described in [19] which helps, when considering the next output token to produce yt, to focus on part of the input sequence only by applying a softmax over the LSTM state vectors corresponding to the input sequence. The input word dictionary contained around 90k words, while the target dictionary contained 128 symbols used to describe the tree. We used an inverse sigmoid decay schedule for i in the scheduled sampling approach.\nParsing is quite different from image captioning as the function that one has to learn is almost deterministic. In contrast to an image having a large number of valid captions, most sentences have a unique parse tree (although some very difficult cases exist). Thus, the model operates almost deterministically, which can be seen by observing that the train and test perplexities are extremely low compared to image captioning (1.1 vs. 7).\nThis different operating regime makes for an interesting comparison, as one would not expect the baseline algorithm to make many mistakes. However, and as can be seen in Table 2, scheduled sampling has a positive effect which is additive to dropout. In this table we report the F1 score on the WSJ 22 development set [20]. We should also emphasize that there are only 40k training instances, so overfitting contributes largely to the performance of our system. Whether the effect of sampling during training helps with regard to overfitting or the training/inference mismatch is unclear, but the result is positive and additive with dropout. Once again, a model trained by always sampling from itself instead of using the groundtruth previous token as input yielded very bad results, in fact so bad that the resulting trees were often not valid trees (hence the \u201c-\u201d in the corresponding F1 metric)."}, {"heading": "4.3 Speech Recognition", "text": "For the speech recognition experiments, we used a slightly different setting from the rest of the paper. Each training example is an input/output pair (X,Y ), where X is a sequence of T input vectors x1, x2, \u00b7 \u00b7 \u00b7xT and Y is a sequence of T tokens y1, y2, \u00b7 \u00b7 \u00b7 yT so each yt is aligned with the corresponding xt. Here, xt are the acoustic features represented by log Mel filter bank spectra at frame t, and yt is the corresponding target. The targets used were HMM-state labels generated from a GMM-HMM recipe, using the Kaldi toolkit [21] but could very well have been phoneme labels. This setting is different from the other experiments in that the model we used is the following:\nlogP (Y |X; \u03b8) = logP (yT1 |xT1 ; \u03b8)\n= T\u2211 t=1 logP (yt|yt\u221211 , xt1; \u03b8)\n= T\u2211 t=1 logP (yt|ht; \u03b8) (5)\nwhere ht is computed by a recurrent neural network as follows:\nht = { f(oh, S, x1; \u03b8) if t = 1, f(ht\u22121, yt\u22121, xt; \u03b8) otherwise.\n(6)\nwhere oh is a vector of 0\u2019s with same dimensionality as ht\u2019s and S is an extra token added to the dictionary to represent the start of each sequence.\nWe generated data for these experiments using the TIMIT4 corpus and the KALDI toolkit as described in [22]. Standard configurations were used for the experiments - 40 dimensional log Mel filter banks and their first and second order temporal derivatives were used as inputs to each frame. 180 dimensional targets were generated for each time frame using forced alignment to transcripts using a trained GMM-HMM system. The training, validation and test sets have 3696, 400 and 192 sequences respectively, and their average length was 304 frames. The validation set was used to choose the best epoch in training, and the model parameters from that epoch were used to evaluate the test set.\nThe trained models had two layers of 250 LSTM cells and a softmax layer, for each of five configurations - a baseline configuration where the ground truth was always fed to the model, a configuration (Always Sampling) where the model was only fed in its own predictions from the last time step, and three scheduled sampling configurations (Scheduled Sampling 1-3), where i was ramped linearly from a maximum value to a minimum value over ten epochs and then kept constant at the final value. For each configuration, we trained 3 models and report average performance over them. Training of each model was done over frame targets from the GMM. The baseline configurations typically reached the best validation accuracy after approximately 14 epochs whereas the sampling models reached the best accuracy after approximately 9 epochs, after which the validation accuracy decreased. This is probably because the way we trained our models is not exact - it does not account for the gradient of the sampling probabilities from which we sampled our targets. Future effort at tackling this problem may further improve results.\nTesting was done by finding the best sequence from beam search decoding (using a beam size of 10 beams) and computing the error rate over the sequences. We also report the next step error rate (where the model was fed in the ground truth to predict the class of the next frame) for each of the models on the validation set to summarize the performance of the models on the training objective. Table 3 shows a summary of the results\nIt can be seen that the baseline performs better next step prediction than the models that sample the tokens for input. This is to be expected, since the former has access to the groundtruth. However, it can be seen that the models that were trained with sampling perform better than the baseline during decoding. It can also be seen that for this problem, the \u201cAlways Sampling\u201d model performs quite well. We hypothesize that this has to do with the nature of the dataset. The HMM-aligned states have a lot of correlation - the same state appears as the target for several frames, and most of the states are constrained only to go to a subset of other states. Next step prediction with groundtruth labels on this task ends up paying disproportionate attention to the structure of the labels (yt\u221211 ) and not enough to the acoustics input (xt1). Thus it achieves very good next step prediction error when the groundtruth sequence is fed in with the acoustic information, but is not able to exploit the acoustic information sufficiently when the groundtruth sequence is not fed in. For this model the testing conditions are too far from the training condition for it to make good predictions. The model that is only fed its own prediction (Always Sampling) ends up exploiting all the information it can find in the acoustic signal, and effectively ignores its own predictions to influence the next step prediction. Thus at test time, it performs just as well as it does during training. A model such as the attention model of [23] which predicts phone sequences directly, instead of the highly redundant HMM state sequences, would not suffer from this problem because it would need to exploit both the acoustic signal and the language model sufficiently to make predictions. Nevertheless, even in this setting, adding scheduled sampling still helped to improve the decoding frame error rate.\nNote that typically speech recognition experiments use HMMs to decode predictions from neural networks in a hybrid model. Here we avoid using an HMM altogether and hence we do not have the advantage of the smoothing that results from the HMM architecture and the language models. Thus the results are not directly comparable to the typical hybrid model results.\n4https://catalog.ldc.upenn.edu/LDC93S1."}, {"heading": "5 Conclusion", "text": "Using recurrent neural networks to predict sequences of tokens has many useful applications like machine translation and image description. However, the current approach to training them, predicting one token at a time, conditioned on the state and the previous correct token, is different from how we actually use them and thus is prone to the accumulation of errors along the decision paths. In this paper, we proposed a curriculum learning approach to slowly change the training objective from an easy task, where the previous token is known, to a realistic one, where it is provided by the model itself. Experiments on several sequence prediction tasks yield performance improvements, while not incurring longer training times. Future work includes back-propagating the errors through the sampling decisions, as well as exploring better sampling strategies including conditioning on some confidence measure from the model itself."}], "references": [{"title": "Learning long term dependencies is hard", "author": ["Y. Bengio", "P. Simard", "P. Frasconi"], "venue": "IEEE Transactions on Neural Networks, 5(2):157\u2013166", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1994}, {"title": "Long short-term memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural Computation, 9(8)", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1997}, {"title": "Sequence to sequence learning with neural networks", "author": ["I. Sutskever", "O. Vinyals", "Q. Le"], "venue": "Advances in Neural Information Processing Systems, NIPS", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Grammar as a foreign language", "author": ["O. Vinyals", "L. Kaiser", "T. Koo", "S. Petrov", "I. Sutskever", "G. Hinton"], "venue": "arXiv:1412.7449", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Show and tell: A neural image caption generator", "author": ["O. Vinyals", "A. Toshev", "S. Bengio", "D. Erhan"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition, CVPR", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Long-term recurrent convolutional networks for visual recognition and description", "author": ["J. Donahue", "L.A. Hendricks", "S. Guadarrama", "M. Rohrbach", "S. Venugopalan", "K. Saenko", "T. Darrell"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition, CVPR", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Curriculum learning", "author": ["Y. Bengio", "J. Louradour", "R. Collobert", "J. Weston"], "venue": "Proceedings of the International Conference on Machine Learning, ICML", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2009}, {"title": "Conditional random fields: Probabilistic models for segmenting and labeling sequence data", "author": ["J.D. Lafferty", "A. McCallum", "F.C.N. Pereira"], "venue": "Proceedings of the Eighteenth International Conference on Machine Learning, ICML, pages 282\u2013289, San Francisco, CA, USA", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2001}, {"title": "Search-based structured prediction as classification", "author": ["H. Daum\u00e9 III", "J. Langford", "D. Marcu"], "venue": "Machine Learning Journal", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2009}, {"title": "A reduction of imitation learning and structured prediction to no-regret online learning", "author": ["S. Ross", "G.J. Gordon", "J.A. Bagnell"], "venue": "Proceedings of the Workshop on Artificial Intelligence and Statistics, AISTATS", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Incremental parsing with the perceptron algorithm", "author": ["M. Collins", "B. Roark"], "venue": "Proceedings of the Association for Computational Linguistics, ACL", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2004}, {"title": "Deep captioning with multimodal recurrent neural networks (m-rnn)", "author": ["J. Mao", "W. Xu", "Y. Yang", "J. Wang", "H. Huangzhi", "A. Yuille"], "venue": "International Conference on Learning Representations, ICLR", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Unifying visual-semantic embeddings with multimodal neural language models", "author": ["R. Kiros", "R. Salakhutdinov", "R. Zemel"], "venue": "TACL", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep visual-semantic alignments for generating image descriptions", "author": ["A. Karpathy", "F.-F. Li"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition, CVPR", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2015}, {"title": "From captions to visual concepts and back", "author": ["H. Fang", "S. Gupta", "F. Iandola", "R.K. Srivastava", "L. Deng", "P. Dollar", "J. Gao", "X. He", "M. Mitchell", "J.C. Platt", "C.L. Zitnick", "G. Zweig"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition, CVPR", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "CIDEr: Consensus-based image description evaluation", "author": ["R. Vedantam", "C.L. Zitnick", "D. Parikh"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition, CVPR", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Microsoft coco: Common objects in context", "author": ["T.-Y. Lin", "M. Maire", "S. Belongie", "J. Hays", "P. Perona", "D. Ramanan", "P. Doll\u00e1r", "C.L. Zitnick"], "venue": "arXiv:1405.0312", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "Proceedings of the International Conference on Machine Learning, ICML", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["D. Bahdanau", "K. Cho", "Y. Bengio"], "venue": "International Conference on Learning Representations, ICLR", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Ontonotes: The 90% solution", "author": ["E. Hovy", "M. Marcus", "M. Palmer", "L. Ramshaw", "R. Weischedel"], "venue": "In Proceedings of the Human Language Technology Conference of the NAACL, Short Papers,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2006}, {"title": "The kaldi speech recognition toolkit", "author": ["D. Povey", "A. Ghoshal", "G. Boulianne", "L. Burget", "O. Glembek", "N. Goel", "M. Hannemann", "P. Motlicek", "Y. Qian", "P. Schwarz", "J. Silovsky", "G. Stemmer", "K. Vesely"], "venue": "In IEEE 2011 Workshop on Automatic Speech Recognition and Understanding. IEEE Signal Processing Society,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2011}, {"title": "Exploring Deep Learning Methods for discovering features in speech signals", "author": ["N. Jaitly"], "venue": "PhD thesis, University of Toronto", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2014}, {"title": "End-to-end continuous speech recognition using attention-based recurrent nn: First results", "author": ["Jan Chorowski", "Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1412.1602,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "While they are known to be hard to train when there are long term dependencies in the data [1], some versions like the Long Short-Term Memory (LSTM) [2] are better suited for this.", "startOffset": 91, "endOffset": 94}, {"referenceID": 1, "context": "While they are known to be hard to train when there are long term dependencies in the data [1], some versions like the Long Short-Term Memory (LSTM) [2] are better suited for this.", "startOffset": 149, "endOffset": 152}, {"referenceID": 2, "context": "In fact, they have recently shown impressive performance in several sequence prediction problems including machine translation [3], contextual parsing [4], image captioning [5] or even video description [6].", "startOffset": 127, "endOffset": 130}, {"referenceID": 3, "context": "In fact, they have recently shown impressive performance in several sequence prediction problems including machine translation [3], contextual parsing [4], image captioning [5] or even video description [6].", "startOffset": 151, "endOffset": 154}, {"referenceID": 4, "context": "In fact, they have recently shown impressive performance in several sequence prediction problems including machine translation [3], contextual parsing [4], image captioning [5] or even video description [6].", "startOffset": 173, "endOffset": 176}, {"referenceID": 5, "context": "In fact, they have recently shown impressive performance in several sequence prediction problems including machine translation [3], contextual parsing [4], image captioning [5] or even video description [6].", "startOffset": 203, "endOffset": 206}, {"referenceID": 6, "context": "Here, we propose a curriculum learning approach [7] to gently bridge the gap between training and inference for sequence prediction tasks using recurrent neural networks.", "startOffset": 48, "endOffset": 51}, {"referenceID": 7, "context": "Thus, the model represents the probability distribution of sequences in the most general form - unlike Conditional Random Fields [8] and other models that assume independence between between outputs at different time steps, given latent variable states.", "startOffset": 129, "endOffset": 132}, {"referenceID": 8, "context": "SEARN [9] was proposed to tackle problems where supervised training examples might be different from actual test examples when each example is made of a sequence of decisions, like acting in a complex environment where a few mistakes of the model early in the sequential decision process might compound and yield a very poor global performance.", "startOffset": 6, "endOffset": 9}, {"referenceID": 9, "context": "In comparison to SEARN, our proposed approach is completely online: a single model is trained and the policy slowly evolves during training, instead of a batch approach, which makes it much faster to train3 Furthermore, SEARN, as well as similar approaches like [10], have been proposed in the context of reinforcement learning, while we consider the supervised learning setting trained using stochastic gradient descent on the overall objective.", "startOffset": 262, "endOffset": 266}, {"referenceID": 10, "context": "Other approaches have considered the problem from a ranking perspective, in particular for parsing tasks [11] where the target output is a tree.", "startOffset": 105, "endOffset": 109}, {"referenceID": 4, "context": "The task can be formulated as a mapping of an image onto a sequence of words describing its content in some natural language, and most proposed approaches employ some form of recurrent network structure with simple decoding schemes [5, 6, 12, 13, 14].", "startOffset": 232, "endOffset": 250}, {"referenceID": 5, "context": "The task can be formulated as a mapping of an image onto a sequence of words describing its content in some natural language, and most proposed approaches employ some form of recurrent network structure with simple decoding schemes [5, 6, 12, 13, 14].", "startOffset": 232, "endOffset": 250}, {"referenceID": 11, "context": "The task can be formulated as a mapping of an image onto a sequence of words describing its content in some natural language, and most proposed approaches employ some form of recurrent network structure with simple decoding schemes [5, 6, 12, 13, 14].", "startOffset": 232, "endOffset": 250}, {"referenceID": 12, "context": "The task can be formulated as a mapping of an image onto a sequence of words describing its content in some natural language, and most proposed approaches employ some form of recurrent network structure with simple decoding schemes [5, 6, 12, 13, 14].", "startOffset": 232, "endOffset": 250}, {"referenceID": 13, "context": "The task can be formulated as a mapping of an image onto a sequence of words describing its content in some natural language, and most proposed approaches employ some form of recurrent network structure with simple decoding schemes [5, 6, 12, 13, 14].", "startOffset": 232, "endOffset": 250}, {"referenceID": 14, "context": "A notable exception is the system proposed in [15], which does not directly optimize the log likelihood of the caption given the image, and instead proposes a pipelined approach.", "startOffset": 46, "endOffset": 50}, {"referenceID": 15, "context": "Some attempts have been made to design metrics that positively correlate with human evaluation [16], and a common set of tools have been published by the MSCOCO team [17].", "startOffset": 95, "endOffset": 99}, {"referenceID": 16, "context": "Some attempts have been made to design metrics that positively correlate with human evaluation [16], and a common set of tools have been published by the MSCOCO team [17].", "startOffset": 166, "endOffset": 170}, {"referenceID": 16, "context": "We used the MSCOCO dataset from [17] to train our model.", "startOffset": 32, "endOffset": 36}, {"referenceID": 17, "context": "The image is preprocessed by a pretrained convolutional neural network (without the last classification layer) similar to the one described in [18], and the resulting image embedding is treated as if it was the first word from which the model starts generating language.", "startOffset": 143, "endOffset": 147}, {"referenceID": 3, "context": "Recent work [4] has proposed an interpretation of a parse tree as a sequence of linear \u201coperations\u201d that build up the tree.", "startOffset": 12, "endOffset": 15}, {"referenceID": 18, "context": "We used an attention mechanism similar to the one described in [19] which helps, when considering the next output token to produce yt, to focus on part of the input sequence only by applying a softmax over the LSTM state vectors corresponding to the input sequence.", "startOffset": 63, "endOffset": 67}, {"referenceID": 19, "context": "In this table we report the F1 score on the WSJ 22 development set [20].", "startOffset": 67, "endOffset": 71}, {"referenceID": 20, "context": "The targets used were HMM-state labels generated from a GMM-HMM recipe, using the Kaldi toolkit [21] but could very well have been phoneme labels.", "startOffset": 96, "endOffset": 100}, {"referenceID": 21, "context": "We generated data for these experiments using the TIMIT4 corpus and the KALDI toolkit as described in [22].", "startOffset": 102, "endOffset": 106}, {"referenceID": 22, "context": "A model such as the attention model of [23] which predicts phone sequences directly, instead of the highly redundant HMM state sequences, would not suffer from this problem because it would need to exploit both the acoustic signal and the language model sufficiently to make predictions.", "startOffset": 39, "endOffset": 43}], "year": 2015, "abstractText": "Recurrent Neural Networks can be trained to produce sequences of tokens given some input, as exemplified by recent results in machine translation and image captioning. The current approach to training them consists in maximizing the likelihood of each token in the sequence given the current (recurrent) state and the previous token. At inference, the unknown previous token is then replaced by a token generated by the model itself. This discrepancy between training and inference can yield errors that can accumulate quickly along the generated sequence. We propose a curriculum learning strategy to gently change the training process from a fully guided scheme using the true previous token, towards a less guided scheme which mostly uses the generated token instead. Experiments on several sequence prediction tasks show that this approach yields significant improvements.", "creator": "LaTeX with hyperref package"}}}