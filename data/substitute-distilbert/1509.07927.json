{"id": "1509.07927", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Sep-2015", "title": "Algorithms for Linear Bandits on Polyhedral Sets", "abstract": "recently study stochastic linear processing problem with bandit feedback. either set of arms take values in an $ 000 $ - dimensional space and belong to a specific algorithm described by finitely many linear inequalities. we provide smooth lower bound for the expected regret that scales as $ \\ omega ( n \\ log t ) $. we then provide a nearly optimal algorithm. show that its expected regret scales as $ o ( n \\ log ^ { 1 + \\ r } ( t ) ) $ for an arbitrary small $ \\ epsilon & gt ; db $. the algorithm alternates between exploration and exploitation intervals sequentially where deterministic sacrifices or arms are played in the exploration circuit and greedily selected arm algorithms padded into the exploitation intervals. we also develop an algorithm that achieves the immediate regret when marko - gaussianity parameter of the noise term well known. our key insight is surely for a polyhedron the optimal arm is robust to small perturbations in incomplete reward function. consequently, a greedily selected arm is guaranteed to be optimal when the estimation tool falls below turing suitable threshold. our solution resolves a question posed ; schmidt and tsitsiklis ( 2011 ) that left open the query satisfying efficient algorithms with simple logarithmic regret bounds. we also learn that the regret upper bounds hold with just $ 1 $. our numerical investigations show that while theoretical results are asymptotic the performance of our algorithms compares favorably to university - of - the - art algorithms in finite time as well.", "histories": [["v1", "Sat, 26 Sep 2015 00:17:38 GMT  (427kb,D)", "http://arxiv.org/abs/1509.07927v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["manjesh k hanawal", "amir leshem", "venkatesh saligrama"], "accepted": false, "id": "1509.07927"}, "pdf": {"name": "1509.07927.pdf", "metadata": {"source": "CRF", "title": "Algorithms for Linear Bandits on Polyhedral Sets", "authors": ["Manjesh K Hanawal", "Amir Leshem"], "emails": ["mhanawal@bu.edu", "leshema@eng.biu.ac.il", "srv@bu.edu"], "sections": [{"heading": null, "text": "We study stochastic linear optimization problem with bandit feedback. The set of arms take values in an N -dimensional space and belong to a bounded polyhedron described by finitely many linear inequalities. We provide a lower bound for the expected regret that scales as \u2126(N log T ). We then provide a nearly optimal algorithm that alternates between exploration and exploitation intervals and show that its expected regret scales as O(N log1+ (T )) for an arbitrary small > 0. We also present an algorithm than achieves the optimal regret when sub-Gaussian parameter of the noise is known. Our key insight is that for a polyhedron the optimal arm is robust to small perturbations in the reward function. Consequently, a greedily selected arm is guaranteed to be optimal when the estimation error falls below some suitable threshold. Our solution resolves a question posed by [1] that left open the possibility of efficient algorithms with asymptotic logarithmic regret bounds. We also show that the regret upper bounds hold with probability 1. Our numerical investigations show that while theoretical results are asymptotic the performance of our algorithms compares favorably to state-of-the-art algorithms in finite time as well."}, {"heading": "1 Introduction", "text": "Stochastic bandits are sequential decision making problems where a learner plays an action in each round and observes the corresponding reward. The goal of the learner is to collect as much reward as possible or, alternatively minimize regret over a period of T rounds. Stochastic linear bandits are a class of structured bandit problems where the rewards from different actions are correlated. In particular, the expected reward of each action or arm is expressed as an inner product of a feature vector associated with the action and an unknown parameter which is identical for all the arms. With this structure, one can infer reward of arms that are not yet played from the observed rewards of other arms. This allows for considering cases where number of arms can be unbounded and playing each arm is infeasible.\nStochastic linear bandits have found rich applications in many fields including web advertisements [2], recommendation systems [3], packet routing, revenue management, etc. In many applications the set of actions are often defined by a finite set of constraints. For example, in packet routing, the amount of traffic to be routed on a link is constrained by its capacity. In web-advertisements\nar X\niv :1\n50 9.\n07 92\n7v 1\n[ cs\n.L G\n] 2\nproblems, the budget constraints determine the set of available advertisements. It follows that the each arm in these applications belongs to a polyhedron.\nBandit algorithms are evaluated by comparing their cumulative reward against the optimal achievable cumulative reward and the difference is referred to as regret. The focus of this paper is on characterizing asymptotic bounds for regret for fixed but unknown reward distributions, which are commonly referred to as problem dependent bounds [4].\nWe consider linear bandits where the arms take values in an N -dimensional space and belong to a bounded polyhedron described by finitely many linear inequalities. We derive an asymptotic lower bound of \u2126(N log T ) for this problem and present an algorithm that is (almost) asymptotically optimal. Our solution resolves a question posed by [1] that left open the possibility of efficient algorithms with asymptotic logarithmic regret bounds. Our algorithm alternates between exploration and exploitation phases, where a set of arms on the boundary of the polyhedron is played in exploration phases and a greedily selected arm is played super-exponentially many times in the exploitation phase. Due to the simple nature of the strategy we are able to provide upper bounds which hold almost surely. We show that our regret concentrates around its expected value with probability one for all T . In contrast regret for upper confidence bound based algorithms concentrates only at a polynomial rate [5]. Thus, our algorithms are more suitable for risk-averse decision making. A summary of our results and comparison of regrets bounds is given in Table 1. Numerical experiments show that its regret performance compares well against state-of-the-art linear bandit algorithms even for reasonably small rounds while being significantly better asymptotically.\nRelated Work: Our regret bounds are related to those described in [4], who describe an algorithm (ConfidenceBall2) with regret bounds that scale as O((N2/\u2206) log3 T ), where \u2206 is the reward gap defined over extremal points. These algorithms belong to the class of so called OFU algorithms (optimism in the face of uncertainty). Since OFU algorithms play only extremal points (arms), one may think that log T regret bounds can be attained for linear bandits by treating them as K-armed bandits, were K denotes the number of extremal points of the set of actions. This possibility arises from the classical results on the K-armed bandit problem due to Lai and Robbins [8] who provided a complete characterization of expected regret by establishing a problem dependent lower bound of \u2126(K log T ) and then providing an asymptotically (optimal) algorithm with a matching upper bound. But, as noted in [1][Sec 4.1, Example 4.5], the number of extremal points can be exponential in N , and this renders such adaptation of multi-armed bandits algorithm inefficient. In the same paper, the authors pose it as an open problem to develop efficient algorithms for linear bandits over polyhedral set of arms that have logarithmic regret. They also remark that since convex hull of a polyhedron is not strongly convex, regret guarantees of their PEGE (Phased Exploration Greedy Exploitation) algorithm does not hold.\nOur work is close to FEL (Forced Exploration for Linear bandits) algorithm developed in [17]. FEL separates the exploration and exploitation phases by comparing the current round number against a predetermined sequence. FEL plays randomly selected arms in the exploration intervals and greedily selected arms in the exploitation intervals. However, our policy differs from FEL as follows\u2013 1) we always play fixed set of arms (deterministic) in the exploration phases. 2) noise is assumed to be bounded in [17], whereas we consider more general sub-Gaussian noise model 3) unlike FEL, our policy does not require computationally costly matrix inversions. FEL provides expected regret guarantee of onlyO(c log2 T ) whereas our policy PolyLin has optimalO(N log T ) regret guarantee. Moreover, the authors in [17] remark that the leading constant c in their regret bound can be set proportional to \u221a N (see discussion following Th 2.4 in [17]), but this seems incorrect in light of the lower bound of \u2126(N log T ) we establish in this paper.\nIn contrast to the asymptotic setting considered here, much of the machine learning literature deals with problem independent bounds. These bounds on regret apply in finite time and for the minimax case, namely, for the worst-case over all reward (probability) distributions. [9] established a problem independent lower bound of \u2126( \u221a KT ) for multi-armed bandits, and was shown to be achievable in [7]. For linear bandits, problem dependent bounds and well studied and stated in terms of dimension of the set of arms rather than its size. In [10], for the case of finite number of arms, a lower bound of \u2126( \u221a NT ) with matching upperbounds is established, where N denotes the dimension of the set of arms. For the case when the number of arms is infinite or form a bounded subset of aN -dimensional space, a lower bound of \u2126(N \u221a T ) is established in [4, 1] with matching achievable bounds.\nSeveral variants and special cases of stochastic linear bandits are available depending on what forms the set of arms. The classical stochastic multi-armed bandits introduced by Robbins [11] and later studied by Lai and Robbins [8] is a special case of linear bandits where the set of actions available in each round is the standard orthonormal basis. Auer [12] first studied stochastic linear bandits as an extension of \u201cassociated reinforcement learning\u201d introduced in [13]. Since then several variants of the problems have been studied motivated by various applications. In [2, 14], the linear bandit setting is adopted to study content-based recommendation systems where the set of actions can change at each round (contextual), but their number is fixed. Another variant of linear bandits with finite action set are spectral bandits [15, 16], where the graph structure defines the set of actions and its size. Several authors [4, 1, 17] have considered linear bandits with arms constituting a (bounded) subset of a finite-dimensional vector space and remains fixed over the learning period. [18] considers cases where the set of arms can change between the rounds but must belong to a bounded subset of a fixed finite-dimensional vector space.\nThe paper is organized as follows: In Section 2, we describe the problem and setup notations. In Section 3, we derive a lower bound on expected regret and describe our main algorithm SEE and its variant SEE2. In Section 5, we analyze the performance of SEE, and its adaptation for general polyhedron is discussed in Section6. In Section 7 we provide probability 1 bounds on the regret of SEE. Finally, we numerically compare performance of our algorithm against sate-of-the-art in 8."}, {"heading": "2 Problem formulation", "text": "We consider a stochastic linear optimization problem with bandit feedback over a set of arms defined by a polyhedron. Let C \u2282 RN denote a bounded polyhedral set of arms given by\nC = { x \u2208 RN : Ax \u2264 b } (1)\nwhere A \u2208 RM\u00d7N ,b \u2208 RM . At each round t, selecting an arm xt \u2208 C results in reward rt(xt). We investigate the case where the expected reward for each arm is a linear function regardless of the history. I.e., for any historyHt, there is a parameter \u03b8 \u2208 [\u22121, 1]N , fixed but unknown, such that E[rt(x)|Ht] = \u03b8\u2032x for all t and x \u2208 C. Under these setting the noise sequence {\u03bdt}\u221et=1, where \u03bdt = rt(x)\u2212 x\u2032\u03b8 forms a martingale difference sequence. Let Ft = \u03c3{\u03bd1, \u03bd2, \u00b7 \u00b7 \u00b7 , \u03bdt,x1, \u00b7 \u00b7 \u00b7 ,xt+1} denote the \u03c3-algebra generated by noise events and arms selections till time t. Then \u03bdt is Ft-measurable and we assume that it satisfies for all b \u2208 R1 E[eb\u03bdt |Ft\u22121] \u2264 exp{b2R2/2}, (2) i.e., noise is conditionally R- sub-Gaussian which automatically implies E[\u03bdt|Ft] = 0 and Var(\u03bdt) \u2264 R2. We can think of R2 as the conditional variance of noise. An example of Rsub-Gaussian noise isN (0, R2), or any bounded distribution over an interval of length 2R and zero mean. In our work, R is fixed but unknown.\nA policy \u03c6 := (\u03c61, \u03c62, \u00b7 \u00b7 \u00b7 ) is a sequence of functions \u03c6t : Ht\u22121 \u2192 C such that an arm is selected in round t based on the historyHt\u22121. Define expected (pseudo) regret of policy \u03c6 over T -rounds as:\nRT (\u03c6) = T\u03b8 \u2032x\u2217 \u2212 E [ T\u2211 t=1 \u03b8\u2032\u03c6(t) ] (3)\nwhere x\u2217 = arg maxx\u2208C \u03b8\u2032x denotes the optimal arm in C, which exists and is an extremal point1 of the polyhedron C [19]. The expectation is over the random realization of the arm selections induced\n1Extremal point of a set is a point that is not a proper convex combination of points in the set.\nby the noise process. The goal is to learn a policy that keeps the regret as small as possible. We will be also interested in regret of the policy defined as\nRT (\u03c6) = T\u03b8 \u2032x\u2217 \u2212 T\u2211 t=1 \u03b8\u2032\u03c6(t). (4)\nFor the above setting, we can useConfidenceBall2 [4] or UncertainityEllipsoid [1] and achieve optimal regret of order N \u221a T . For linear bandits over a set with finite number of extremal points, one can also achieve regret that scales more gracefully, growing logarithmically in time T , using algorithms for the standard multi-armed bandits. Indeed, from fundamentals of linear programming\narg max x\u2208C \u03b8\u2032x = arg max x\u2208E(C) \u03b8\u2032x,\nwhere E := E(C) denotes the set of extremal points of C. Since the set of extremal points is finite for a polyhedron, we can use the standard Lai and Robbin\u2019s algorithm [8] or UCB1 in [6] treating each extremal point as an arm and obtain regret bound (problem dependent) of order |E|\u2206 log T , where \u2206 := \u03b8\u2032x\u2217 \u2212 maxE\\x\u2217 \u03b8\u2032x denotes the gap between the best and the next best extremal point. However, the leading term in these bounds can be exponential in N , rendering these algorithm ineffective. For example, the number of extremal points of C can be of the order ( M+N M ) = O((2N)M ). Nevertheless, in analogy with the problem independent regret bounds in linear bandits, one wishes to derive problem dependent logarithmic regret where the dependence on set of arms is only linear in its dimension. Hence we seek an algorithm with regret of order N log T .\nIn the following, we first derive a lower bound on the expected regret and develop an algorithm that is (almost) asymptotically optimal."}, {"heading": "3 Main results", "text": "In this section we provide a lower bound on the expected regret and present our proposed policy and prove the main results regarding its complexity."}, {"heading": "3.1 Lower Bound", "text": "We establish through a simple example that regret of any asymptotically optimal linear bandit algorithm is lower bounded as \u2126(N log T ). Recall the fundamental property of the linear optimization that an optimal point is always an extremal point. Then any linear bandit algorithm on a polyhedral set of arms always play the extremal points. We exploit this fact, and mapping the problem to a standard multi-armed bandits we obtain the lower bound.\nWe need the following notations to prove the result. Let {\u03b7(\u03b2)}\u03b2\u2208[0,1] denote a set of distributions parametrized by \u03b2 \u2208 [0, 1] and such that each \u03b7(\u03b2) is absolutely continuous with respect to a positive measure m on R. Let p(x;\u03b2) denote the probability density function associated with distribution \u03b7(\u03b2), and let KL(\u03b21, \u03b22) denote the Kullback-Leibler (KL) divergence between distributions \u03b7(\u03b21) and \u03b7(\u03b22) defined as KL(\u03b21, \u03b22) = \u222b x p(x;\u03b21) log p(x;\u03b21) p(x;\u03b22)\nm(dx). Consider a set of K arms. We say that arm k is parametrized by \u03b2k if its reward is distributed according to \u03b7(\u03b2k).\nWe are now ready to state asymptotic lower bound for the linear bandit problem over any bounded polyhedron with positive measure . Without loss of generality, we restrict our attention to uniformly good policies as defined in [8]. We say that a policy \u03c6 is uniformly optimal if for all \u03b8 \u2208 \u0398, R(T, \u03c6) = o(T\u03b1) for all \u03b1 > 0.\nTheorem 1 Let \u03c6 any uniformly good policy on a bounded polyhedron with positive measure. For any \u03b8 \u2208 [0, 1]N , let E[\u03b7(\u03b8k)] = \u03b8k for all k = 1, 2, \u00b7 \u00b7 \u00b7 , N . Then,\nlim inf T\u2192\u221e\nRT (\u03c6) log T \u2265 (N \u2212 1)\u2206\nmax k:\u03b8k<\u03b8\u2217\nKL(\u03b8\u2217, \u03b8k) where \u03b8\u2217 = arg max n \u03b8n (5)\nProof sketch: First, note that number of extremal points of any bounded polyhedron with positive measure is atleast (N + 1). We can then restrict to a bounded polyhedron with N + 1 extremal\npoints. Let C\u0303 = {x \u2208 RN : 0 \u2264 xi \u2264 1 \u2200 i = 1, 2 \u00b7 \u00b7 \u00b7 , N}. The (N + 1) extremal points of C\u0303 are {en : n = 1, 2, \u00b7 \u00b7 \u00b7 , N} \u222a {0}. In the linear bandit problem with unknown parameter \u03b8, playing the extremal point en gives mean reward \u03b8n. Also, by the property of linear optimization, any OFU policy will only play extremal points in every round. Then, the linear bandit over polyhedron C\u0303 is the same as N + 1-armed bandit where reward of kth arm k = 1, 2 \u00b7 \u00b7 \u00b7 , N is distributed as \u03b7(\u03b8k) with mean \u03b8k, and the reward of N + 1th arm is distributed as \u03b7(0) with mean 0.\nThe result follows from Lai-Robbin\u2019s lower bound for stochastic multi-armed bandits proved in [8] after verifying that the mean values of the parametrized distribution satisfy the required conditions."}, {"heading": "3.2 Algorithms", "text": "The basic idea underlying our proposed technique is based on the following observations for linear optimization over a polyhedron. 1) The set of extremal points of polyhedron is finite and hence \u2206 > 0. 2) When \u03b8\u0302 is sufficiently close to \u03b8, then over the set C both arg max\u03b8\u2032x and arg max \u03b8\u0302 \u2032 x give the same value. We exploit these observations and propose a two stage technique, where we first estimate \u03b8 based on a block of samples and then exploit it for much longer block. This is repeated with increasing block lengths so that at each point the regret is logarithmic. For ease of exposition, we first consider the polyhedron that contains origin and postpone the general case to Section 6.\nAssume that the polyhedron C = { x \u2208 RN : Ax \u2264 b } contains origin as an interior point. Let en denote nth standard unit vector of dimension N . For all 1 \u2264 n \u2264 N , let zn = max {z \u2265 0, zen \u2208 C}. The subset of arms B := {znen : n = 1, 2 \u00b7 \u00b7 \u00b7 , N} are the vertices of the largest simplex bounded in C. Since \u03b8n = \u03b8\u2032en we can estimate \u03b8n by repeatedly playing the arm znen. One can also estimate \u03b8n by playing an interior point zen \u2208 C for some z > 0. But as will see later selecting the maximum possible z improves the probability of estimation error."}, {"heading": "Algorithm-SEE", "text": "In our policy- which we refer as SequentialEstimation-Exploitation (SEE)- we split the time horizon into cycles and each cycle consists of an exploration interval followed by an exploitation interval. We index the cycles by c and denote the exploration and exploitation intervals in cycle c as Ec and Rc, respectively. In the exploration intervalEc, we play each arm in B repeatedly for (2c + 1) times. At the end of Ec, using the rewards observed for each arm in B in the past c- cycles we compute ordinary least square (OLS) to estimate each component \u03b8n, n = 1, 2, \u00b7 \u00b7 \u00b7 , N separately and obtain the estimate \u03b8\u0302(c). Using \u03b8\u0302(c) as a proxy for \u03b8, we compute a greedy arm x(c) by solving a linear program and play it repeatedly for 2c 2/(1+ ) times in the exploitation interval Rc, where > 0 in an input parameter. We repeat the process for each cycle. A formal description of SEE is given in the adjacent figure. The estimation in line 13 is computed for all n = 1, 2, \u00b7 \u00b7 \u00b7 , N as follows:\n\u03b8\u0302n(c) = 1\nc2 c\u2211 i=0 2i+1\u2211 j=1 rti,n,j/zn, (6)\nAlgorithm 1 SEE 1: Input: 2: C: The polyhedron 3: : Algorithm parameter 4: Initialization: 5: Compute the set B 6: for c = 0, 1, 2, \u00b7 \u00b7 \u00b7 do 7: Exploration: 8: for n = 1\u2192 N do 9: for j = 1\u2192 2c+ 1 do 10: Play arm znen \u2208 B, observe reward rtc,n,j 11: end for 12: Compute \u03b8\u0302n(c) 13: end for 14: \u03b8\u0302(c)\u2190 (\u03b8\u03021(c), \u03b8\u03022(c) \u00b7 \u00b7 \u00b7 , \u03b8\u0302N (c)) 15: x(c)\u2190 arg max\nx\u2208C x\u2032\u03b8\u0302(c)\n16: Exploitation: 17: for j = 1\u2192 b2c2/1+ c do 18: Play arm x(c), observe reward 19: end for 20: end for\nNote that in the exploration intervals, SEE plays a fixed set of arms and no adaption happens, adding positive regret in each cycle. The regret incurred in the exploitation intervals starts reducing as the estimation error gets small, and when it falls below \u2206/2 the step (line-16) selects the optimal arm and no regret is incurred in the exploitation intervals (Lemma 2). As we will show later, the probability of estimation error decays super-exponentially across the cycles, and hence the probability of playing a sub-optimal arm in the exploitation interval also decays super-exponentially.\nTheorem 2 Let the noise be R-sub-Gaussian and without loss of generality2 assume \u03b8 \u2208 [\u22121, 1]N . Then, the expected regret of SEE, with parameter > 0 is bounded as follows:\nRT (SEE) \u2264 2RmN log1+ T + 4RmN\u03b31, (7)\nwhere Rm denotes the maximum reward. \u03b31 is a constant that depends on noise parameter R and the sub-optimality gap \u2206.\nThe parameter determines the length of the exploitation intervals, and larger implies that SEE spends less time in exploitation and more time in exploration. Increasing will make SEE spend more time in explorations resulting in improved estimations and reduces the probability of playing sub-optimal arm in the exploitation intervals. Hence parameter determines how fast the regret concentrates, and larger its value more \u2019risk-averse\u2019 is the algorithm. This motivates us to consider a variant of SEE that is more risk averse but at the cost of increased expected regret."}, {"heading": "3.3 Risk Averse Variant", "text": "Our second algorithm-which we refer to as SEE2- is essentially same as SEE, except for the length of the exploration intervals which is exponential instead of super-exponential and does not depend on . Specifically, we play the greedy arm 2c times in cycle c. Compared to SEE, SEE2 spends significantly more time in the exploration intervals, and hence the probability that it makes error in the exploitation intervals is also significantly smaller and thus its regret concentrates around the expected regret faster.\nTheorem 3 Let the noise be R-sub-Gaussian and \u03b8 \u2208 [\u22121, 1]N . Then, the expected regret of SEE2 is bounded as follows:\nRT (SEE2) \u2264 2RmN log2 T + 4NRm\u03b32 (8)\nwhere \u03b32 is a constant that depends on noise parameter R and the sub-optimality gap \u2206."}, {"heading": "4 Optimal Algorithm.", "text": "We next obtain an optimal algorithm that achieves the lower bound in (5) within a constant factor when the sub-Gaussian parameter R is known.\n2For general \u03b8, we replace it by \u03b8 \u2016\u03b8\u2016\u221e and the same method works. Only Rm is scaled by a constant factor."}, {"heading": "Algorithm-PolyLin:", "text": "In our next policy- which we refer as PolyhedralLinear-bandits we again split the time horizon into cycles consisting of an exploration interval followed by an exploitation interval as in SEE. As earlier, we index the cycles by i and denote the exploration and exploitation intervals in cycle i as Ei and Ri, respectively. In the exploration interval Ei, we play each arm in B once. After c-cycles, using the rewards observed for each arm in B in the past {Ei, i = 12, \u00b7 \u00b7 \u00b7 , c} exploration intervals we compute ordinary least square (OLS) to estimate each component \u03b8n, n = 1, 2, \u00b7 \u00b7 \u00b7 , N separately, and obtain the estimate \u03b8\u0302(c) as follows.\n\u03b8\u0302n(c) = 1\nc c\u2211 i=1 rti,n/zn, (9)\nUsing \u03b8\u0302(c) as a proxy for \u03b8 we compute a greedy arm x(c) and the sub-optimality gap \u2206\u0302(c) as follows.\n\u2206\u0302(c) = x\u2032(c)\u03b8(c)\u2212 max x\u2208C\\x(c) x\u2032\u03b8(c).\nIn the exploitation interval Rc, we play x(c) repeatedly for 2\u03ba(c)c times where \u03ba(c) is set to a\u2206\u0302(c)/2, where a = minn zn/R2. We repeat the process for each cycle. A formal description of PolyLin is given in the adjacent figure.\nAlgorithm 2 PolyLin 1: Input: 2: C: The polyhedron 3: R: Noise parameter 4: Initialization 5: Compute the set B 6: a := minn z2n/R 2\n7: for i = 1, 2, \u00b7 \u00b7 \u00b7 do 8: Exploration: 9: for n = 1\u2192 N do\n10: Play arm znen \u2208 B observe reward rti,n\n11: c = i, Compute \u03b8\u0302n(c) as in (9) 12: end for 13: \u03b8\u0302(c)\u2190 (\u03b8\u03021(c), \u03b8\u03022(c) \u00b7 \u00b7 \u00b7 , \u03b8\u0302N (c)) 14: x(c)\u2190 arg max\nx\u2208C x\u2032\u03b8\u0302(c)\n15: \u03ba(c)\u2190 a\u2206\u0302(c)/2 16: Exploitation: 17: for j = 1\u2192 b2\u03ba(c)cc do 18: Play arm x(c), observe reward 19: end for 20: end for\nNote that the exploration intervals of PolyLin are fixed length, whereas in SEE they are increasing as the the time progresses. Also, exploitation intervals in PolyLin are adaptive, whereas it is nonadaptive in SEE.\nTheorem 4 Let the noise be R-sub-Gaussian and without loss of generality assume \u03b8 \u2208 [\u22121, 1]N . Then, the expected regret of PloyLin is bounded as follows:\nRT (PolyLin) \u2264 2RmN log T\n\u03ba + 4RmN\u03b33, (10)\nwhere Rm denotes the maximum reward. \u03b33 and \u03ba are constants that depends on noise parameter R and the sub-optimality gap \u2206."}, {"heading": "5 Regret Analysis", "text": "In this section we prove Theorem 2, the proof of Theorem 3 follows similarly and omitted. We first derive the probability of error in estimating each component of \u03b8 in each cycle. Note that in the exploration stage of each cycle cwe sample each arm znen \u2208 B, i = 1, 2, \u00b7 \u00b7 \u00b7 , N , 2 times more than that in the exploration stage of the previous cycle. Thus, we have c2 plays of each arm znen \u2208 B at the end of cycle c. The estimation error of component \u03b8n after c-cycles is given as follows:\nLemma 1 Let the noise be R-sub-Gaussian and \u03b4 > 0. In any cycle c of both SEE and SEE2, for all n = 1, 2, \u00b7 \u00b7 \u00b7 , N we have\nP (\u2223\u2223\u2223\u03b8\u0302n(c)\u2212 \u03b8n\u2223\u2223\u2223 > \u03b4) \u2264 2 exp{\u2212c2\u03b42z2n/2R2}. (11)\nNote that larger the value of zn, the smaller the probability of estimation error is. The next lemma gives the probability that we play a suboptimal arm in the exploitation intervals of a cycle.\nLemma 2 For every cycle c, we have\na. Let a := minn z2n/R 2. The estimation error is bounded as\nPr{\u2016\u03b8\u0302(c)\u2212 \u03b8\u2016\u221e > \u03b7} \u2264 2N exp{\u2212c2\u03b72a}., (12)\nb. Let h = supx\u2208C \u2016x\u20161. The error in reward estimation is bounded as\nPr ( \u2203 x \u2208 C such that \u2223\u2223\u2223\u03b8\u0302\u2032(c)x\u2212 \u03b8\u2032x\u2223\u2223\u2223 > \u03b7) \u2264 2Ne\u2212 c2\u03b72ah2 . (13) c. Probability that we play a sub-optimal arm is bounded as\nPr ( arg max\nx\u2208C \u03b8\u0302(c)\u2032x 6= arg max x\u2208C \u03b8\u2032x.\n) \u2264 2Ne\u2212 ac2\u22062/4 h2 . (14)\nThe proofs of Lemmas 1 and 2 are given in appendix. Recall that the number of extremal points is finite for the polyhedron C and \u2206 > 0. We use this fact to argue that whenever \u2016\u03b8\u0302(c)\u2212\u03b8\u2016\u221e < \u2206/2, the greedy stage of the algorithm selects the optimal arm. This in an importation observation and follows from continuity property of optimal point in linear optimization theory [19]. Further, the probability of this event decays super-exponentially fast in our policy implying that the probability that we incur a positive regret in the exploitation intervals is gets negligibly small over the cycles. We compute the expected regret incurred in the exploration and exploitation intervals separately."}, {"heading": "5.1 Regret of SEE.", "text": "We analyze the regret in the Exploration and Exploitation phases separately as follows. Exploration regret: At the end of cycle c, each arm in B is played \u2211c i=1(2i+ 1) = c\n2 times. The total expected regret from the exploration intervals after c cycles is at most Nc2Rm. Exploitation regret: Total expected regret from the exploration intervals after c cycle is\n4NRm c\u2211 i=1 2i 2/(1+ ) 2\u2212i 2a\u22062 = 4NRm c\u2211 i=1 2i 2/(1+ )\u2212i2a\u22062 \u2264 4NRm\u03b32 (15)\nwhere \u03b32 := \u2211\u221e i=1 2 i(i(1\u2212 )/(1+ )\u2212c1i\u22062/4) is a convergent series. After c cycles, the total number of\nplays is T = \u2211c i=1 e i 2 1+ +Nc2 \u2265 ec 2 1+ and we get c2 \u2264 log1+ T . Finally, expected regret form T -rounds is bounded as\nRT (SEE) \u2264 2RmN log1+ T + 4NRm\u03b32 = O(N log1+ T )."}, {"heading": "5.2 Regret of PolyLin.", "text": "We analyze the regret in the Exploration and Exploitation phases separately as follows. Exploration regret: After c cycles, each arm in B is played c times. The total expected regret from the exploration intervals after c cycles is at most NcRm. Exploitation regret: Total expected regret from the explorations interval after c cycles is\n4NRm c\u2211 i=1 2\u03ba(i)i2\u2212ia\u2206 2 = 4NRm c\u2211 i=1 2i\u03ba(i)\u2212ia\u2206 2 \u2264 4NRm \u221e\u2211 i=1 2ia{\u2206\u0302 2(i)/2\u2212\u22062}. (16)\nNow consider the series \u03b33 := \u2211\u221e i=1 2 ia{\u2206\u03022(i)/2\u2212\u22062}.\n\u2022 From Lemma 2(a), \u03b8(c) \u2192 \u03b8 as c \u2192 \u221ealmost surely, we get x\u0302(c) \u2192 x\u2217 almost surely and which in turn implies \u2206\u0302(c)\u2192 \u2206 almost surely.\n\u2022 Then, for 0 < < \u22062/4, the difference \u2206\u0302(c)2/2 \u2212 \u22062 \u2264 \u2212\u22062/2 + < 0 for all but finitely many c. Hence, \u03b33 is finite.\nAfter c cycles the total number of plays is T = \u2211c i=1 2\ni\u03ba(i) + Nc \u2265 2c\u03ba(c), and we get c \u2264 log T\u03ba(c) . Finally, expected regret form T -rounds, as T \u2192\u221e, is bounded as\nRT (PolyLin) \u2264 2RmN log T\n\u03ba(c) + 4NRm\u03b33.\nNote that \u2206\u0302(c)2/2\u2212\u22062 \u2265 \u2212\u22062/2\u2212 for all but finitely many c. Then for sufficiently large c we get k(c)/a \u2265 \u22062/2\u2212 \u2265 \u22062/4. Substituting in the last inequality we get\nRT (PolyLin) \u2264 8RmN log T\na\u2206 + 4NRm\u03b33 = O(N log T )."}, {"heading": "6 General Polyhedron", "text": "In this section we extend the analysis of the previous section to the case where origin is not an interior point of C. Analogous to set B, we first define a set of arms that lie on the boundary of the polyhedron and these points are computed with respected to an interior point x of C that we use as a proxy for origin. We use OPT-1 to find an interior point, whose smallest distance to boundaries along all the directions {e1, e2, \u00b7 \u00b7 \u00b7 eN} is the largest. The motivation to maximize the minimal distances to the boundaries comes from lemma 2, where larger value of a imply smaller probability of estimation error."}, {"heading": "OPT-1:", "text": "(x,y) = arg max\nx min i yi\nsubjected to: Ax \u2264 b yi \u2265 0 \u2200i = 1, 2, \u00b7 \u00b7 \u00b7 , N A(x + yiei) \u2264 b \u2200i = 1, 2, \u00b7 \u00b7 \u00b7 , N A(x\u2212 yiei) \u2264 b \u2200i = 1, 2, \u00b7 \u00b7 \u00b7 , N\nOPT-2: (x,y) = arg max\nx,y,\u03b1 \u03b1\nsubjected to: \u03b1 > 0; Ax \u2264 b yi \u2212 \u03b1 > 0 \u2200i = 1, 2, \u00b7 \u00b7 \u00b7 , N A(x + yiei) \u2264 b \u2200i = 1, 2, \u00b7 \u00b7 \u00b7 , N A(x\u2212 yiei) \u2264 b \u2200i = 1, 2, \u00b7 \u00b7 \u00b7 , N\nOPT-1 can be translated into an equivalent linear progamme given in OPT-2 and hence the point x can be efficiently computed. We note that the set of points {x + ynen : n = 1, 2, \u00b7 \u00b7 \u00b7 , N} need not all necessarily lie on the boundary. To see this, let the point x returned by OPT-1 is such that it is closer to the boundary along ith direction. Then the vector with all its component equal to yi is a solution of OPT-1. To overcome this, we further stretch each point x + ynen along the direction en such that it hits the boundary. Let zn = arg maxz{|z| : zen \u2208 C}. Finally, we fix the set of arms we use for explorations as B = {znen + x : n = 1, 2, \u00b7 \u00b7 \u00b7 , N}. We are now ready to present an algorithm for linear bandits over for any polyhedra. For the general polyhedron, we use the SEE with the exploration strategy modified as follows. In cycle c, we first play the arm x for 2c + 1 and then play each arm in B 2c + 1 times as earlier. To estimate the component \u03b8n, we average the difference in rewards observed from arms x + znen and x so far. From a straightforward modification of regret analysis of SEE, we can show that the expected regret of modified algorithm is upper bounded as O(N log1+ T ) for all > 0.\nThe new algorithm required that we play the arm x along with the arms in B in the exploration intervals to obtain estimate of \u03b8, and it increases the length of exploration intervals. However, it is possible that one can obtain estimates only by playing arms in B provided we suitably modify the estimation method. More details are given in the appendix."}, {"heading": "7 Probability 1 Regret Bounds", "text": "Recall the definiton of expected regret and regret in (3) and (4). In this section we show that with probability 1, the regret of our algorithms are within a constant factor from the their expected regret.\nTheorem 5 With probability 1, RT (SEE) is O(N log1+ T ) and RT (SEE2) is O(N log2 T ).\nProof: Let Cn denote an event that we select sub-optimal arm in the nth cycle. From Lemma 2, this event is bounded as Pr{Cn} \u2264 N exp{\u2212O(n2)}. Hence \u2211\u221e n=1 Pr{Cn} < \u221e. Now, from application of Borel-Cantelli lemma, we get Pr{lim supn\u2192\u221eCn} = 0, which implies that almost surely SEE and SEE2 play optimal arm in all but finitely many cycles. Hence the exploitation intervals contribute only a bounded regret. Since the regret due to exploration intervals is deterministic, the regret of SEE and SEE2 are within a constant factor from their expected regret with probability 1, i.e., Pr{\u2203 C1 such that RT (SEE) \u2264 RT (SEE) + C1} and Pr{\u2203 C2 such that RT (SEE2) \u2264 RT (SEE2) + C2}. This completes the claim. We note that the regret bounds proved in [4] hold with high confidence, where as ours hold with probability 1 and hence provides a stronger performance guarantee."}, {"heading": "8 Experiments", "text": "In this section we investigate numerical performance of our algorithms against the known algorithms. We run the algorithms on a hypercube with dimension N = 10. We generated \u03b8 \u2208 [0, 1]N randomly and noise is zero mean Gaussian random variable with variance 1 in each round. The experiments are averaged over 10 runs. In Fig. 1 we compare SEE ( = 0.3) and SEE2 against UCB-Normal [20], where we treated each extremal point as an arm of an 2N -armed bandit problem. As expected, our algorithms perform much better. UCB-Normal need to sample each of the 2N atleast once before it could start learning the right arm. Whereas, our algorithm starts playing the right arm after a few cycles of exploration intervals. In Fig. 2, we compare our algorithms against the linear bandits algorithm LinUCB and self-normalization based algorithm in [18], which is labeled SelfNormalized in the figure. For these we set confidence parameter to 0.001. We see that SEE beats LinUCB by a huge margin, but its performance comes close to that of SelfNormalized algorithm. Note that SelfNormalzed algorithm requires knowledge of sub-Gaussianity parameter R of noises super. Whereas, our algorithms are agnostic to this parameter. Though, SEE2 seems to play the right arm in exploitation intervals, its regret performance is poor. This is due to increased number of exploration intervals, where no adaptation happens and a positive regret is always incurred.\nThe numerical performance of SEE2 can be improved by adaptively playing the arms in the exploration plays as follows, but at the increase cost of computations complexity. In each cycle c+ 1, we find a new set B computed by setting x to x(c), the greedy arm selected in the previous cycle, and play the new set arms as in the explorations intervals of the algorithm given for the general polyhedron. However, since x(c) is an extremal points some of the zn\u2019s are zero. To overcome this, we slightly shift the point x(c) into the interior of the polyhedron along the direction x(c)\u2212 x and find a new set B with respect to the new interior point. The regret of the algortihm based on this adaptive exploitation strategy is shown is Fig. 2 with label \u2019Improved-SEE2\u2019. As shown, the modification improves performance of SEE2 significantly. In all the numerical plots, we initialized the algorithm to run from cycle number 5."}, {"heading": "9 Conclusion", "text": "We studied stochastic linear optimization over polyhedral set of arms with bandit feedback. We provided asymptotic lower bound for any policy and developed algorithms that are near asymptotically optimal. The regret of the algorithms grow (near) logarithmically in T and its growth rate is linear\nin the dimension of the polyhedron. We showed that the regret upper bounds hold almost surely. The regret growth rate of our algorithms is log1+ T for some > 0. It is interesting to develop strategies that work for = 0, while still maintain linear growth rate in N ."}, {"heading": "Proof of Lemma 1", "text": "Let ti,n,j denote the noise in reward from playing znen in phase i for the jth time. We bound the estimation error as follows:\nP (\u2223\u2223\u2223\u03b8\u0302n(c)\u2212 \u03b8n\u2223\u2223\u2223 > \u03b4) (17) = P\n\u2223\u2223\u2223\u2223\u2223\u2223 c2\u2211 i=1 ti,n,j / c2zn| > \u03b4  (18) = P\ns \u2223\u2223\u2223\u2223\u2223\u2223 c2\u2211 i=1 ti,n,j \u2223\u2223\u2223\u2223\u2223\u2223 > sc2zn\u03b4  (19)\n= P exp s \u2223\u2223\u2223\u2223\u2223\u2223 c2\u2211 i=1 ti,n,j \u2223\u2223\u2223\u2223\u2223\u2223  > exp{sc2zn\u03b4}  (20) \u2264 2P exp s c2\u2211 i=1 ti,n,j  > exp{sc2zn\u03b4}  (21)\n\u2264 2E exp s c2\u2211 i=1 ti,n,j   exp{\u2212sc2zn\u03b4}} (22) \u2264 2 c2\u220f i=1 E [ exp { s ti,n,j } |Ft\u22121 ] exp{\u2212sc2zn\u03b4}} (23) \u2264 2 c2\u220f i= exp{s2\u03b22/2} exp{\u2212sc2zn\u03b4}} (24)\n= 2 exp{c2(s2\u03b22/2\u2212 szn\u03b4)}}, (25)\nwhere (18) follows from estimation step given in (6). In (19) and (20) we exponentiated both sides within the probability functions after multiplying them by s > 0. (21) follows by applying union bound and using the symmetric property of the noise terms. In (22) we applied the Markov inequality. In (23) we aplied conditional independence property of the noise. (24) follows by applying the definition of sub-Gaussian property.\nNote that upper bound in (25) holds for all s > 0 and is minimized at s\u2217 = \u03b4zn\u03b22 > 0. Finally, the lemma by substituting s\u2217 in (25)."}, {"heading": "Proof of Lemma 2", "text": ""}, {"heading": "Part a:", "text": "We bound the estimation error as follows: Pr (\u2225\u2225\u2225\u03b8\u0302(c)\u2212 \u03b8\u2225\u2225\u2225\n\u221e > \u03b7\n) (26)\n\u2264 Pr ( \u2203n : \u2223\u2223\u2223\u03b8\u0302n(c)\u2212 \u03b8n\u2223\u2223\u2223 > \u03b7) (27) \u2264\nN\u2211 n=1 Pr (\u2223\u2223\u2223\u03b8\u0302n(c)\u2212 \u03b8n\u2223\u2223\u2223 > \u03b7) (28)\n\u2264 2Nc1e\u2212ac 2\u03b72 . (29)\nIn (28) we applied the union bound result and in (29) we applied (11)."}, {"heading": "Part b:", "text": "For all x \u2208 C, we have |x\u2032\u03b8(c)\u2212 x\u2032\u03b8| \u2264 \u2016\u03b8(c)\u2212 \u03b8\u2016\u221e\u2016x\u20161. (30) Define events A = {\u2203 x such that|x\u2032\u03b8(c) \u2212 x\u2032\u03b8| > \u03b7} and B = {\u2016\u03b8(c) \u2212 \u03b8\u2016\u221eh > \u03b7}. The last inequality implies Pr{A} \u2264 Pr{B}. The claim follows from part-a of the lemma."}, {"heading": "Part c:", "text": "Suppose y 6= x\u2217, where x\u2217 is the optimal arm, such that \u03b8\u2032(c)y > \u03b8\u2032(c)x\u2217. Then, since \u03b8\u2032x\u2217 \u2212 \u03b8\u2032y \u2265 \u2206 we must have that either |\u03b8\u2032x\u2217 \u2212 \u03b8\u2032(c)x\u2217| \u2265 \u2206/2 or |\u03b8\u2032(c)y \u2212 \u03b8\u2032y| \u2265 \u2206/2, otherwise we cannot close the gap. Hence, if the greedy selection in cycle c is not x\u2217, it implies that there exists a x \u2208 C such that |\u03b8\u2032(c)x \u2212 \u03b8x| > \u2206/2. From part-b this probability is bounded as 2N exp{\u2212ac2\u03b72/h}, where \u03b7 = \u2206/2. This completes the proof.\nEstimation in the case general polyhedron Let xi = x + \u03b1iei. Let r\u0302i(c) := 1c2 \u2211c i=1 \u22112c+1 j=1 rti,n,j denote the average of the reward obtained from arm xi till end of phase m. At the end of phase m, we estimate \u03b8 as follows:\n\u03b8\u0302(c) = (1x\u2032 +D(\u03b1)) \u22121 r\u0302(c),\nwhere \u03b1 denote the diagonal matrix with diagonal elements as \u03b1 and r\u0302(c) is the vector with ith component as r\u0302i(m). By applying matrix inversion lemma we get\n\u03b8\u0302(c) = ( D\u22121(\u03b1)\u2212 D \u22121(\u03b1)1x\u2032D\u22121(\u03b1)\nx\u2032D\u22121(\u03b1)1 ) After simplification, for each i = 1, 2, , \u00b7 \u00b7 \u00b7 , N we have\n\u03b8\u0302i(c) = 1\n\u03b1i\n( r\u0302i(c)\u2212 \u2211N j=1(xj/\u03b1j)r\u0302j(c)\u2211N\nl=1 xl/\u03b1l ) Substituting the reward from arm xi, i.e.,\nrxi = x \u2032\u03b8 + \u03b1i\u03b8i +\nand further simplifying we get\n\u03b8\u0302i(c) = 1\n\u03b1i \u03b1i\u03b8i \u2212 x\u2032\u03b8 + N\u2211 j=1 \u03b2j \u0302j(c)  where \u03b2j =\nxj \u03b1j and \u0302j(m) is the noise average from playing arm xi."}], "references": [], "referenceMentions": [], "year": 2015, "abstractText": "We study stochastic linear optimization problem with bandit feedback. The set of<lb>arms take values in an N -dimensional space and belong to a bounded polyhedron<lb>described by finitely many linear inequalities. We provide a lower bound for the<lb>expected regret that scales as \u03a9(N log T ). We then provide a nearly optimal al-<lb>gorithm that alternates between exploration and exploitation intervals and show<lb>that its expected regret scales as O(N log (T )) for an arbitrary small > 0.<lb>We also present an algorithm than achieves the optimal regret when sub-Gaussian<lb>parameter of the noise is known. Our key insight is that for a polyhedron the op-<lb>timal arm is robust to small perturbations in the reward function. Consequently, a<lb>greedily selected arm is guaranteed to be optimal when the estimation error falls<lb>below some suitable threshold. Our solution resolves a question posed by [1] that<lb>left open the possibility of efficient algorithms with asymptotic logarithmic re-<lb>gret bounds. We also show that the regret upper bounds hold with probability 1.<lb>Our numerical investigations show that while theoretical results are asymptotic the<lb>performance of our algorithms compares favorably to state-of-the-art algorithms<lb>in finite time as well.", "creator": "LaTeX with hyperref package"}}}