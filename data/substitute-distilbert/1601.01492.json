{"id": "1601.01492", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jan-2016", "title": "Complexity of Shift Bribery in Committee Elections", "abstract": "we study the ( parameterized ) results of shift bribery for multiwinner voting rules. we research on sigma, zeta, k - borda, and theta - courant, as well as on approximate extensions onto \u03c0 - courant, since the original rule goes np - hard to compute. we show computational shift bribery seemed to be significantly harder in the multiwinner setting than in the additive - winner applications by showing settings where shift bribery is easy in the auto - winner cases, but is hard ( and hard to approximate ) in the multiwinner ones. moreover, we show that the non - monotonicity of those rules which are tested on approximation algorithms for the chamberlin - courant rule sometimes affects the complexity of shift bribery.", "histories": [["v1", "Thu, 7 Jan 2016 11:35:43 GMT  (39kb)", "http://arxiv.org/abs/1601.01492v1", "27 Pages. An extended abstract of this paper appears in the Proceedings of the 30th AAAI Conference on Artificial Intelligence (AAAI 16)"]], "COMMENTS": "27 Pages. An extended abstract of this paper appears in the Proceedings of the 30th AAAI Conference on Artificial Intelligence (AAAI 16)", "reviews": [], "SUBJECTS": "cs.AI cs.GT", "authors": ["robert bredereck", "piotr faliszewski", "rolf niedermeier", "nimrod talmon"], "accepted": true, "id": "1601.01492"}, "pdf": {"name": "1601.01492.pdf", "metadata": {"source": "CRF", "title": "Complexity of Shift Bribery in Committee Elections", "authors": ["Robert Bredereck", "Piotr Faliszewski", "Rolf Niedermeier", "Nimrod Talmon"], "emails": ["rolf.niedermeier}@tu-berlin.de,", "nimrodtalmon77@gmail.com", "faliszew@agh.edu.pl"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 1.\n01 49\n2v 1\n[ cs"}, {"heading": "1 Introduction", "text": "We study the complexity of campaign management\u2014modeled as the SHIFT BRIBERY problem\u2014 for the case of multiwinner elections. In the SHIFT BRIBERY problem we want to ensure that our candidate is in a winning committee by convincing some of the voters\u2014at a given price\u2014to rank him or her more favorably. In particular, this models campaigns based on direct meetings with voters, in which the campaigner presents positive features of the candidate he or she works for. While the complexity of campaign management is relatively well-studied for single-winner elections, it has not been studied for the multiwinner setting yet (there are, however, studies of manipulation and control for multiwinner elections [2, 29]).\nBased on the preferences of the voters, the goal of a multiwinner election is to pick a committee of k candidates. These k candidates might, for example, form the country\u2019s next parliament, be a\n\u2217An extended abstract of this paper appears in the Proceedings of the 30th AAAI Conference on Artificial Intelligence (AAAI 16).\n\u2020Currently at Weizmann Institute of Science.\ngroup of people short-listed for a job opening, or be a set of items a company offers to its customers (see the papers of Lu and Boutilier [25], Skowron et al. [34], and Elkind et al. [17] for a varied description of applications of multiwinner voting). Since the election results can affect the voters and the candidates quite significantly, we expect that they will run campaigns to achieve the most desirable results: a person running for parliament would want to promote her or his political platform; a job candidate would want to convince the HR department of her or his qualities.\nWe study the standard, ordinal model of voting, where each voter ranks the candidates from the one he or she likes best to the one he or she likes least. We focus on rules that are based either on the Borda scores of the candidates or on their t-Approval scores. Briefly put, if we have m candidates, then a voter gives Borda score m\u2212 1 to his or her most preferred candidate, score m\u2212 2 to the next one, and so on; a voter gives t-Approval score 1 to each of his or her top-t candidates and score 0 to the other ones.\nThe most basic multiwinner rules simply pick k candidates with the highest scores (for example, SNTV uses 1-Approval scores, Bloc uses k-Approval scores, and k-Borda uses Borda scores). While such rules may be good for short-listing tasks, they do not seem to perform well for cases where the committee needs to be varied (or represent the voters proportionally; see the work of Elkind et al. [17]). In this case, we may prefer other rules, such as the Chamberlin-Courant family of rules [11], which try to ensure that every voter is represented well by some member of the committee (see the Preliminaries section for an exact definition).\nUnfortunately, while the winners of SNTV, Bloc, and k-Borda rules are polynomial-time computable, this is not the case for the Chamberlin-Courant rules (Procaccia et al. [32] and Lu and Boutilier [25] show NP-hardness). We deal with this problem in two ways. First, there are FPT algorithms for computing Chamberlin-Courant winners (for example, for the case of few voters). Second, there are good approximation algorithms (due to Lu and Boutilier [25] and Skowron et al. [35]). Following Caragiannis et al. [10] and Elkind et al. [17], we consider these approximation algorithms as voting rules in their own right (societies may use them in place of the original, hard-to-compute ones).\nThe idea of the SHIFT BRIBERY problem is as follows. We are given an election and a preferred candidate p, and we want to ensure that p is a winner (in our case, is a member of a winning committee) by shifting him or her forward in some of the votes, at an appropriate cost, without exceeding a given budget. The costs of shifting p correspond to investing resources into convincing the voters that our candidate is of high quality. For example, if a company is choosing which of its products to continue selling, the manager responsible for a given product may wish to prepare a demonstration for the company\u2019s higher management. Similarly, a person running for parliament would invest money into meetings with the voters, appropriate leaflets, and so on. Thus, we view SHIFT BRIBERY as a model of (a type of) campaign management.\nSHIFT BRIBERY was introduced by Elkind et al. [15, 16], and since then a number of other researchers studied both SHIFT BRIBERY (e.g. Schlotter et al. [33] and Bredereck et al. [7, 9]), and related campaign management problems (e.g. Dorn and Schlotter [13], Baumeister et al. [3], and Faliszewski et al. [20]). Naturally, the problem also resembles other bribery problems, such as the original bribery problem of Faliszewski et al. [19] or those studied by Mattei et al. [28] and Mattei,\nGoldsmith, and Klapper [27]. We point the reader to the overview of Faliszewski and Rothe [18] for more details and references.\nFor single-winner elections, SHIFT BRIBERY is a relatively easy problem. Specifically, it is polynomial-time solvable for the t-Approval rules. For the Borda rule, for which it is NP-hard, there are a good polynomial-time approximation algorithm [15] and exact FPT algorithms [7]. In the multiwinner setting the situation is quite different. The main findings of our research are as follows (see also Table 1 in Section 3):\n1. The computational complexity of SHIFT BRIBERY for multiwinner rules strongly depends on the setting. In general, for the cases of few candidates we find FPT algorithms while for the cases where the preferred candidate is shifted by few positions only we find hardness results (even though these cases are often easy in the single-winner setting).\n2. The computational complexity for the case of few voters most strongly depends on the underlying scoring rule. Generally, for the rules based on t-Approval scores the complexity of SHIFT BRIBERY tends to be lower than for analogous rules based on Borda scores.\nWe did not study such multiwinner rules as the STV rule, the Monroe rule [30], or other Approvalbased rules (see, e.g., the works of Brams and Kilgour [5] and Aziz et al. [1, 2]), in order to compare our results to those for the single-winner setting, while keeping the considered set of rules small."}, {"heading": "2 Preliminaries", "text": "Elections and Voting Rules. For each integer n, we set [n] := {1, . . . , n}. An election E = (C, V ) consists of a set of candidates C = {c1, . . . , cm} and a collection of voters V = (v1, . . . , vn). Each voter v is associated with a preference order, i.e., with a ranking of the candidates in decreasing order of appreciation by the voter. For example, if C = {c1, c2, c3}, then by writing v : c1 \u227b c2 \u227b c3 we mean that v likes c1 best, then c2, and then c3. We write posv(c) to denote the position of candidate c in voter v\u2019s preference order (e.g., in the preceding example we would have posv(c1) = 1). When we write a subset A \u2286 C of candidates in a description of a preference order, we mean listing all members of A in some fixed, easily computable order. If we put \u2190\u2212 A in a preference order, then we mean listing members of A in the reverse of this fixed order. Let E = (C, V ) be an election with m candidates and n voters. The Borda score of candidate c in the vote of v, v \u2208 V , is \u03b2v(c) = m \u2212 posv(c). The Borda score of c in the election E is \u03b2E(c) = \u2211\nv\u2208V \u03b2v(c). The single-winner Borda rule elects the candidate with the highest Borda score (if there are several such candidates, they tie as winners). For each t \u2208 [m], we define the t-Approval score as follows: for a candidate c and voter v, \u03b1tv(c) = 1 if v ranks c among the top t positions and otherwise it is 0; we set \u03b1tE(c) = \u2211 v\u2208V \u03b1 t v(c). We define the single-winner t-Approval rule analogously to the Borda rule. A multiwinner voting rule R is a function that, given an election E = (C, V ) and an integer k \u2208 [|C|], outputs a set R(E, k) of k-element subsets of C . Each size-k subset of C is called a committee and each member of R(E, k) is called a winning committee.\nThe most natural task that arises when considering (multiwinner) voting rules is the task of deciding whether a given candidate is among the winners (resp. is part of some winning committee). We will refer to this task as the WINNER DETERMINATION problem. Sometimes, winner determination procedures considered in the literature consider slightly different goals (e.g. computing the score of a winning committee). However, all polynomial-time, FPT, and XP winner determination procedures for the rules we study in this paper can be modified to solve WINNER DETERMINATION.\nWe consider the following rules (below, E = (C, V ) is an election and k is the committee size): SNTV, Bloc, and k-Borda compute the score of each candidate and output the committee of k candidates with the highest scores (or all such committees, if there are several). SNTV and Bloc use, respectively, 1-Approval and k-Approval scores, while k-Borda uses Borda scores. For these rules winners can be computed in polynomial time.1\nUnder the Chamberlin-Courant rules (the CC rules), for a committee S, a candidate c \u2208 S is a representative of those voters that rank c highest among the members of S. The score of a committee is the sum of the scores that the voters give to their representatives (highest-scoring committees win); Borda-CC uses Borda scores, t-Approval-CC uses t-Approval scores. WINNER DETERMINATION for CC rules is NP-hard [25, 32], but is in FPT when parameterized by the number of voters or candidates [4].\nGreedy-Borda-CC is a (1 \u2212 1 e )-approximation algorithm for the Borda-CC rule, due to Lu and Boutilier [25]. (The approximation is in the sense that the score of the committee output by the algorithm is at least a 1 \u2212 1\ne fraction of the score of the winning committee under Borda-CC.)\nThe algorithm starts with an empty set W and executes k iterations, in each one adding to W the candidate c that maximizes the Borda-CC score of (W \u222a{c}).2 For example, it always picks a Borda winner in the first iteration. Greedy-Borda-CC always outputs a unique winning committee.\nGreedy-Approval-CC works in the same way, but uses t-Approval scores instead of Borda scores. It is a (1\u2212 1\ne )-approximation algorithm for t-Approval-CC. We refer to t-Approval-Greedy-\nCC for t = \u2308m\u00b7w(k) k\n\u2309 (where w is Lambert\u2019s W function; w(k) is O(log k)) as PTAS-CC; it is the main part of Skowron et al.\u2019s [35] polynomial-time approximation scheme for Borda-CC.\nParameterized Complexity. In a parameterized problem, we declare some part of the input as the parameter (e.g., the number of voters). A parameterized problem is fixed-parameter tractable (is in FPT) if there is an algorithm that solves it in f(\u03c1) \u00b7 |I|O(1) time, where |I| is the size of a given instance encoding, \u03c1 is the value of the parameter, and f is some computable function. There is a hierarchy of classes of hard parameterized problems, FPT \u2286 W[1] \u2286 W[2] \u2286 \u00b7 \u00b7 \u00b7 \u2286 XP. It is widely believed that if a problem is hard for one of the W[\u00b7] classes, then it is not in FPT. The notions of hardness and completeness for parameterized classes are defined through parameterized reductions. For this paper, it suffices to use standard polynomial-time many-one reductions that guarantee that the value of the parameter in the problem we reduce to exclusively depends on the value of the parameter of the problem we reduce from. The following problems will be used in our reductions.\n1There may be exponentially many winning committees, but it is easy to compute their score and to check for a subset of candidates if it can be extended to a winning committee.\n2If there is a tie between several candidates, then we assume that the algorithm breaks it according to a prespecified order.\nDefinition 1. An instance of CLIQUE consists of a graph G = (V (G), E(G)) and an integer h. We ask whether there is a set of h vertices such that there is an edge between each two vertices from the set.\nDefinition 2. An instance of MULTICOLORED INDEPENDENT SET consists of a graph G = (V (G), E(G)), where each vertex has one of h colors. We ask whether there are h vertices of pairwise-distinct colors such that no two of them are connected by an edge.\nDefinition 3. An instance of SET COVER consists of a set U of elements, a family S of subsets of U , and and integer h. We ask whether there is a subset of h sets from S whose union is U .\nCLIQUE and MULTICOLORED INDEPENDENT SET are both W[1]-complete while SET COVER is W[2]-complete (in all cases, the solutions size h is the parameter).\nIf a parameterized problem can be solved in polynomial time under the assumption that the parameter is constant, then we say that it is in XP. Recall that membership in FPT additionally requires that the degree of the polynomial is a constant independent from the parameter. If a problem is NP-hard even for some constant value of the parameter, then we say that it is para-NP-hard.\nFor details on parameterized complexity, we point to the books of Cygan et al. [12], Downey and Fellows [14], Flum and Grohe [21], and Niedermeier [31]."}, {"heading": "3 Shift Bribery", "text": "Let R be a multiwinner rule. In the R-SHIFT BRIBERY problem we are given an election E = (C, V ) with m candidates and n voters, a preferred candidate p, a committee size k, voter price functions (see below), and an integer B, the budget. The goal is to ensure that p belongs to at least one winning committee (according to the rule R),3 and to achieve this goal we are allowed to shift p forward in the preference orders of the voters. However, each voter v has a price function \u03c0v : [m] \u2192 N, and if we shift p by i positions forward in the vote of v, then we have to pay \u03c0v(i). We assume that the price functions are nondecreasing (i.e., it cannot cost less to shift our candidate farther than to shift her or him nearer) and that the cost of not shifting p is zero (i.e., \u03c0v(0) = 0 for each v). Bredereck et al. [7] have considered several different families of price functions. In this paper we focus on two of them: unit price functions, where for each voter v it holds that \u03c0v(i) = i, and all-or-nothing price functions, where for each voter v it holds that \u03c0v(i) = qv for each i > 0 (where qv is some voter-dependent value) and \u03c0v(0) = 0.\nA shift action is a vector (s1, . . . , sn) of natural numbers, that for each voter specifies by how many positions to shift p. If ~s = (s1, . . . , sn) is a shift action, then we write shift(E,~s) to denote the election obtained from E by shifting p an appropriate number of positions forward in each vote. If \u03a0 = (\u03c01, . . . , \u03c0n) are the price functions of the n voters, then we write \u03a0(~s) = \u2211n i=1 \u03c0i(si) to denote the total cost of applying ~s. For a shift action ~s, we define #~s = \u2211n\ni=1 si and we call it the number of unit shifts in ~s.\nFormally, we define R-SHIFT BRIBERY as follows.\n3Our approach is a natural extension of the non-unique winner model from the world of single-winner rules. Naturally, one might alternatively require that p is a member of all winning committees or put an even more demanding goal that would involve other candidates. We refer to a brief discussion in the Conclusion section.\nDefinition 4. Let R be a multiwinner voting rule. An instance I of R-SHIFT BRIBERY consists of an election E = (C, V ), a preferred candidate p \u2208 C , a committee size k, a collection \u03a0 = (\u03c01, . . . , \u03c0n) of price functions for the voters, and an integer B, the budget. We ask whether there is a shift action ~s = (s1, . . . , sn) such that:\n1. \u03a0(~s) \u2264 B, and\n2. there is a committee W \u2208 R(shift(E,~s), k) such that p \u2208 W .\nWe refer to such a shift action as a successful shift action; we write OPT(I) to denote the cost of the least expensive successful shift action.\nFollowing Bredereck et al. [7], we consider the most natural parameterizations by the number n of voters, by the number m of candidates, and by the minimum number s of unit shifts in a successful shift action.\nNow, we formally defined all central concepts and problems studied in this work, using this, Table 1 summarizes our and some previous results. The reminder of this paper is structured as follows. In Section 4, we present findings applying to the multiwinner context as a whole. In Section 5,\nwe present specific results for the voting rules SNTV, Bloc, and k-Borda. In Section 6, we present our results for Chamberlin-Courant rules and their approximate variants. We conclude with a final discussion and an outlook in Section 7."}, {"heading": "4 General Results", "text": "We start our discussion by providing several results that either apply to whole classes of multiwinner rules (including many of those that we focus on) or that are proven using general, easily adaptable techniques. These results form a baseline for our research regarding specific rules.\nFirst, we note that for each of the rules that we study, SHIFT BRIBERY with unit price functions is in FPT when parameterized by the number of candidates. This result follows by applying the standard technique of modeling the problem through an integer linear program and invoking Lenstra\u2019s theorem [24]. We believe that, using the MILP technique of Bredereck et al. [8], it is also possible to generalize this result to all-or-nothing price functions.\nNote that the following theorem does not mention SNTV and Bloc since, as we will see in the next section, for them the problem is even in P.\nTheorem 1. Parameterized by the number of candidates, SHIFT BRIBERY with unit prices is in FPT for k-Borda, Approval-CC, Borda-CC, Greedy-Approval-CC, PTAS-CC, and Greedy-BordaCC.\nIn order to prove Theorem 1, we introduce an algorithmic scheme similar to that of Dorn and Schlotter [13] for single-winner SWAP BRIBERY. We will make use of the fact that integer linear programs (ILPs) can be solved in FPT time with respect to the number of (integer) variables (following a famous result by Lenstra [24] which was later improved by Kannan [23] and by Fredman and Tarjan [22]). We first introduce the algorithmic scheme and the basic ILP formulation. Then, we show how to extend the ILP such that the algorithmic scheme works for k-Borda (by proving Lemma 1), for Approval-CC and Borda-CC (by proving Lemma 2), and for Greedy-Approval-CC, PTAS-CC, and Greedy-Borda-CC (by proving Lemma 3).\nThe idea of the algorithmic scheme is to guess the members of the winning committee W \u2286 C , |W | = k, p \u2208 W , and to verify the guess by an ILP. More precisely, we try all possible winning committees in the outer loop of our algorithm and call the corresponding ILP for each of the (less than 2m) potential winning committees that contain p. For the round-based rules (Greedy-ApprovalCC, PTAS-CC, and Greedy-Borda-CC) we furthermore guess a function w : [k] \u2192 W mapping each \u201cposition\u201d in the committee to a specific candidate from W . This allows to specify when each member joined the committee according to the round-based rules and can be realized with an additional factor of k! \u2264 m! to the running time. For the ease of presentation let W j denote the set containing the first j members according to the function w, that is, W j = {w(j\u2032) | 1 \u2264 j\u2032 \u2264 j}.\nObserve that there are m! different preference orders, and, by ordering them arbitrarily, we can consider the ith preference order (for i \u2208 [m!]).\nFor each i \u2208 [m!] and j \u2208 [m!] we create an integer variable Si,j which represents the number of voters which vote as the ith preference order in the original election and vote as the jth preference\norder in the bribed election. Based on these variables we add the following constraints for each i \u2208 [m!], ensuring that each original vote is turned into exactly one bribed vote:\n\u2211\nj\u2208[m!]\nSi,j = #(i),\nwhere #(i) denotes the number of voters which vote as the ith preference order in the original election. Then, we add the following constraint, ensuring that the cost of our bribery action does not exceed the budget:\n\u2211\ni\u2208[m!],j\u2208[m!]\nSi,j \u00b7 cost(i, j) \u2264 B,\nwhere cost(i, j) is the budget needed to transform the ith preference order to the jth preference order (and, for formal correctness, equals B + 1 if it is not possible at all by shifting only p).\nFor each i \u2208 [m!] we create an integer variable Ni which represents the number of voters which vote as the ith preference order in the bribed election. Based on the Si,j variables, we make sure that the Ni variables are correct, by adding, for each i \u2208 [m!], the following constraint:\nNi = \u2211\nj\u2208[m!]\nSj,i.\nThis describes the basic ILP which will be extended in the proofs of the following lemmas.\nLemma 1. Parameterized by the number m of candidates, k-Borda SHIFT BRIBERY is in FPT.\nProof. To make p a member of the winning committee for k-Borda we have to ensure that only the other members of the winner committee may have a larger Borda score than p. Hence, for each c /\u2208 W , we add the following constraint to the basic ILP, ensuring that, in the bribed election, p has at least as much Borda score (based on the Ni variables) as all candidates that are not in the winning committee: \u2211\ni\u2208[m!]\nNi \u00b7 \u03b2i(p) \u2265 \u2211\ni\u2208[m!]\nNi \u00b7 \u03b2i(c),\nwhere \u03b2i(c) is the Borda score of candidate c in the ith preference order. This finishes the description of the extended ILP.\nLemma 2. Parameterized by the number m of candidates, both Approval-CC SHIFT BRIBERY and Borda-CC SHIFT BRIBERY are in FPT.\nProof. To make p a member of the winning committee W for Approval-CC (respectively, BordaCC) we have to ensure that no other committee has a larger Approval score (respectively, Borda score) than our guessed committee W . Hence, for each other committee W \u2032, we add the following constraint to the basic ILP, ensuring that, in the bribed election, the score of W (based on the Ni variables) is at least as high as the score of W \u2032:\n\u2211\ni\u2208[m!]\n\u03c6(i,W ) \u00b7Ni \u2265 \u2211\ni\u2208[m!]\n\u03c6(i,W \u2032) \u00b7Ni,\nwhere \u03c6(i,X) is the score given by a voter voting as the ith preference order to the committee X. Note that this can be computed in polynomial-time by selecting the right representative and taking the underlying scoring rule, that is, either Approval or Borda, into account.\nThis finishes the description of the extended ILP.\nLemma 3. Parameterized by the number m of candidates, SHIFT BRIBERY is in FPT for GreedyApproval-CC, PTAS-CC, and Greedy-Borda-CC.\nProof. Since PTAS-CC is a special case of Greedy-Approval-CC it suffices to describe the extension of the ILP for Greedy-Approval-CC and Greedy-Borda-CC.\nTo make p a member of the winning committee W for Greedy-Approval-CC (respectively, Greedy-Borda-CC) we have to ensure that the candidate w(j) (which joined to the committee in the jth round) maximizes the Approval score (respectively, Borda score) among all possible extensions. Hence, for each round j and each c \u2208 C\\W j we add the following constraint to the basic ILP, ensuring that, in the bribed election, the score of W j is at least as large as the score of W j\u22121 \u222a {c}:\n\u2211\ni\u2208[m!]\n\u03c6(i,W j) \u00b7Ni \u2265 \u2211\ni\u2208[m!]\n\u03c6(i,W j\u22121 \u222a {c}) \u00b7Ni,\nwhere \u03c6(i,X) is the score given by a voter voting as the ith preference order to the committee X. This finishes the description of the extended ILP.\nAs second general result, we note that for the parameterization by the number of voters we can provide a strong, general FPT approximation scheme for candidate-monotone rules. Candidate monotonicity, a notion introduced by Elkind et al. [17], requires that if a member of a winning committee is shifted forward in some vote, then this candidate still belongs to some (possibly different) winning committee.\nTheorem 2. Consider parameterization by the number of voters. Let R be a candidate-monotone multiwinner rule with an FPT algorithm for WINNER DETERMINATION. Then, for every positive constant number \u03b5 there is an FPT algorithm that, given an instance I of R-SHIFT BRIBERY (for arbitrary price functions), outputs a successful shift action ~s with cost at most (1 + \u03b5)OPT(I).\nProof. Bredereck et al. [7] show an FPT algorithm (parameterized by the number of voters) that, given an instance I of SHIFT BRIBERY and a positive value \u03b5, for each possible shift action ~s = (s1, . . . , sn) tries a shift action ~s\u2032 = (s\u20321, . . . , s \u2032 n) such that for each i \u2208 [n] we have s \u2032 i \u2265 si, and the cost of ~s\u2032 is at most (1 + \u03b5) greater than that of ~s. This algorithm also works for multiwinner rules.\nAmong the rules considered in this work, only Greedy-Borda-CC, Greedy-Approval-CC, and PTAS-CC are not candidate-monotone (see the work of Elkind et al. [17] for the argument regarding Greedy-Borda-CC). Thus, the above result applies to all the remaining rules.\nFor the case of all-or-nothing prices, we can strengthen the above result to an exact FPT algorithm.\nProposition 1. Consider parameterization by the number of voters. Let R be a candidate-monotone multiwinner rule with an FPT algorithm for WINNER DETERMINATION. Then, there is an FPT algorithm for R-SHIFT BRIBERY with all-or-nothing price functions.\nProof. Since R is candidate-monotone and we have all-or-nothing prices, for every vote where we shift the candidate p forward, we can shift p to the top. In effect, it suffices to try all subsets of voters: For each subset check whether shifting p forward in each vote from the subset ensures the victory of p without exceeding the budget.\nUsing a very similar approach, we can solve SHIFT BRIBERY for those of our rules which are based on approval scores, even for arbitrary price functions (even the round-based ones). The trick is that, with approval scores, for each voter we either shift our candidate right to the first approved position or we do not shift him or her at all. Thus, again, trying all subsets of voters suffices.\nProposition 2. There is an FPT algorithm for SHIFT BRIBERY under Approval-CC, GreedyApproval-CC, and PTAS-CC, for the parameterization by the number of voters and for arbitrary price functions.\nFinally, using smart brute-force, we provide XP algorithms for SHIFT BRIBERY parameterized either by the number of voters or the number of unit shifts (for rules that can be efficiently computed in the given setting).\nProposition 3. Consider parameterization by the number of voters. Then, for every multiwinner rule with an XP algorithm for WINNER DETERMINATION, there is an XP algorithm for SHIFT BRIBERY and arbitrary price functions.\nProof. For each voter, we guess the amount which the preferred candidate is shifted by. Since the maximum amount is m, and we have n voters, we have O(mn) possibilities to check. For each possibility we check if the preferred candidate is a member of a winning committee in XP time.\nProposition 4. Consider parameterization by the number of unit shifts. Then, for every multiwinner rule with a polynomial-time algorithm for WINNER DETERMINATION, there is an XP algorithm for SHIFT BRIBERY and arbitrary price functions.\nProof. The idea of the proof is similar to that behind Proposition 3. Let s be the number of unit shifts that we can perform and let n be the number of voters. We can view a solution as a vector of length at most s, where an entry in the ith position specifies the number of voters in whose preference order we perform the ith unit shifts. We try all O(ns) such vectors and for each we test if the shift action it defines is within budget and ensures that the preferred candidate is in the winning committee.\n5 SNTV, Bloc, and k-Borda\nWe now move on to results specific to the voting rules SNTV, Bloc, and k-Borda. These rules pick k candidates with the highest 1-Approval, k-Approval, and Borda scores, respectively, and, so, one\nmight suspect that the efficient algorithms for corresponding single-winner rules would translate to the multiwinner setting. While this is the case for SNTV and Bloc, for k-Borda the situation is more intricate. As a side effect of our research, we resolve the parameterized complexity of Borda-SHIFT BRIBERY, left open by Bredereck et al. [7].\nWe first show that SHIFT BRIBERY is polynomial-time solvable for SNTV and Bloc. We use the same algorithm for both SNTV and Bloc. Briefly put, the idea is to guess the final score of the preferred candidate and to compute the set of candidates that have higher scores. Then, it is easy to compute the cheapest way to ensure that all but k \u2212 1 of them, where k is the committee size, have smaller score than the guessed score of p, while ensuring that p indeed obtains this guessed score.\nTheorem 3. SNTV-SHIFT BRIBERY and Bloc-SHIFT BRIBERY are both in P (for arbitrary price functions).\nProof. We use the same algorithm for both SNTV and Bloc. Consider an input instance I with an election E = (C, V ), where p is the preferred candidate, and where the committee size is k. Our algorithm proceeds as follows.\nAs first step, we guess the final score that p would have after a successful bribery, denoted by endscore(p). Since there are only polynomially many possibilities, we can simply branch into all possible values of endscore(p) to realize the first step. Then, we consider the set C \u2032 \u2286 C of those candidates whose score is greater than endscore(p). It is clear that to ensure that p is in some winning committee, we need to decrease the score of all but k\u22121 candidates from C \u2032. If C \u2032 contains at most k \u2212 1 candidates, we do not need to decrease the scores of any candidates.\nTo this end, we sort the candidates in C \u2032 by the cost of decreasing their score (by appropriate shifts of p) to be equal to endscore(p), and pick all of the candidates in C \u2032, besides the k \u2212 1 most expensive ones. Since for each bribed vote one can decrease the score of exactly one candidate, this defines a shift action. If this shift action does not guarantee that p has score endscore(p), then we complement it by shifting p to the first approved position in sufficiently many cheapest votes, to ensure that p has score endscore(p).\nIf the thus computed shift action is within budget, we accept. Otherwise, we try another guess of endscore(p). If we try all possibilities without accepting, then we reject.\nThe situation for k-Borda is different. SHIFT BRIBERY is NP-hard for Borda due to Elkind et al. [16], so the same holds for k-Borda. We show that Borda-SHIFT BRIBERY is W[1]-hard for parameterization by the number of voters, resolving a previously open case [7]. This result immediately implies the same hardness for all our Borda-based rules.\nTheorem 4. Parameterized by the number of voters, Borda SHIFT BRIBERY is W[1]-hard (even for unit price functions).\nProof. We give a parameterized reduction from the MULTICOLORED INDEPENDENT SET problem. Let (G,h) be our input instance. Without loss of generality, we assume that the number of vertices of each color is the same and that there are no edges between vertices of the same color. We write V (G) to denote the set of G\u2019s vertices, and E(G) to denote the set of G\u2019s edges. Further, for every color i \u2208 [h], we write V (i) = {v(i)1 , . . . , v (i) q } to denote the set of vertices of color i. For each\nvertex v, we write E(v) to denote the set of edges incident to v. For each vertex v, we write \u03b4(v) to denote its degree, i.e., \u03b4(v) = |E(v)| and we let \u2206 = maxu\u2208V (G) \u03b4(u) be the highest degree of a vertex G.\nWe form an instance of Borda-SHIFT-BRIBERY as follows. We let the candidate set be\nC = {p} \u222a V (G) \u222a E(G) \u222a F (G) \u222aD\u2032 \u222aD\u2032\u2032,\nwhere F (G), D\u2032, and D\u2032\u2032 are sets of special dummy candidates. For each vertex v, we let F (v) be a set of \u2206 \u2212 \u03b4(v) dummy candidates, and we let F (G) = \u22c3\nv\u2208V (G) F (v) and F (V,\u2212i) =\u22c3 v\u2208V (i \u2032),i\u2032 6=i F (v). We will specify D \u2032 and D\u2032\u2032 later. For each vertex v, we define the partial preference order S(v) to be v \u227b E(v) \u227b F (v). For each color i, we define R(i) to be a partial preference order that ranks first all members of D\u2032, then all vertex candidates of colors other than i, then all edge candidates corresponding to edges that are not incident to a vertex of color i, then all dummy vertices from F (V,\u2212i), and finally all candidates from D\u2032\u2032.\nWe use unit price functions and we set the budget to be B = h(q+(q\u22121)\u2206). We set D\u2032 and D\u2032\u2032\nto consist of 2B dummy candidates each. We create the following voters:\n1. For each color i \u2208 [h], we introduce four voters: voters xi and x\u2032i with the following preference orders:\nxi : S(v (i) 1 ) \u227b S(v (i) 2 ) \u227b \u00b7 \u00b7 \u00b7 \u227b S(v (i) q ) \u227b p \u227b R(i), x\u2032i : \u2190\u2212\u2212\u2212\u2212 S(v(i)q ) \u227b \u2190\u2212\u2212\u2212\u2212\u2212 S(v (i) q\u22121) \u227b \u00b7 \u00b7 \u00b7 \u227b \u2190\u2212\u2212\u2212\u2212 S(v (i) 1 ) \u227b p \u227b R(i),\nand voters yi and y\u2032i whose preference orders are reverses of those of xi and x \u2032 i, respectively, except that candidates from D\u2032\u2032 are ranked last in their votes as well.\n2. We create a voter z with the preference order\nz : F (G) \u227b V (G) \u227b E(G) \u227b D\u2032 \u227b p \u227b D\u2032\u2032,\nand a voter z\u2032 with the preference order that is obtained from that of z by first reversing it, and then shifting each member of V (G) \u222a E(G) by one position forward, and shifting p by B positions back.\nLet L be the score of p prior to executing any shift actions. The scores of the candidates in our election are as follows: each candidate in V (G) \u222a E(G) has score L+ B + 1, and each candidate in F (G) \u222aD\u2032 \u222aD\u2032\u2032 has score at most L+B.\nWe show that it is possible to ensure the victory of p in our election by a bribery of cost at most B if and only if there is a multicolored independent set for G of size h.\nFor the \u201cif\u201d case, we show that if G has a multicolored independent set, then there is a successful shift action of cost B in our election. Let us fix a multicolored independent set for G and, for each color i \u2208 [h], let v(i)si be the vertex of color i from this set. For each pair of voters xi, x \u2032 i, we shift p so that in xi he or she ends up right in front of v (i) si+1 (or p does not move if si = q), and in x\u2032i he\nor she ends up right in front of v(i)si . This way, p passes every vertex candidate from V (i) and every edge candidate from ( \u22c3\nt\u2208[q]E(v (i) t )\n)\n\\E(v (i) si ). This shift action costs B/h for every pair of voters\nxi, x \u2032 i, so, in total, costs exactly B. Further, clearly, it ensures that p passes every vertex candidate so each of them has score L + B. Finally, since we chose vertices from an independent set, every edge candidate also has score at most L + B: If p does not pass some edge e between vertices of colors i and j for a pair of voters xi, x\u2032i, then p certainly passes e in the pair of votes xj , x \u2032 j because visi and v j sj are not adjacent.\nFor the \u201conly if\u201d case, we show that if there is a successful shift action for our instance, then there is a multicolored independent set for G. We note that a shift action of cost B gives p score L + B. Thus, for the shift action to be successful, it has to cause all candidates in V (G) \u222a E(G) to lose a point. We claim that a successful shift bribery has to use exactly B/h = (q + (q \u2212 1)\u2206) unit shifts for every pair of voters xi, x\u2032i. Why is this so? Let us fix some color i \u2208 [h]. Every successful shift action has to decrease the score of every vertex candidate and xi, x\u2032i are the only votes where p can pass the vertex candidates from V (i) without exceeding the budget. If we spend less than B/h units of budget on xi, x\u2032i, then there will be some vertex candidates corresponding to a vertex from V (i) that p did not pass (and, in effect, which does not lose a point), and so p will not be a winner. Thus, we know that a successful shift action spends B/h units of budget on every pair of voters xi, x\u2032i. Further, we can assume that for each color i there is a vertex v (i) si \u2208 V (i) such that in xi candidate p is shifted to be right in front of v (i) si+1 and in x\u2032i candidate p is shifted to be right in front of v(i)si . We call such a vertex v (i) si selected. If for a given pair of voters xi, x \u2032 i neither of the vertices from V (i) was selected, then there would be some vertex candidate in V (i) that p does not pass. If for some pair of voters xi, x\u2032i vertex v (i) si is selected, then in this pair of votes p does not pass the edge candidates from E(v(i)si ). However, this means that in a successful shift action the selected vertices form an independent set of G. If two vertices v(i)si and v (j) sj were selected, i 6= j, and if there were an edge e connecting them, then p would not pass the candidate e in either of the pairs of votes xi, x \u2032 i or xj , x \u2032 j . Since these are the only votes where p can pass e without exceeding the budget, in this case e would have L+B + 1 points, p would have L+B points and would lose.\nIn effect, we have the following corollary (we discuss other Borda-based rules later).\nCorollary 1. Parameterized by the number of voters, k-Borda-SHIFT BRIBERY is W[1]-hard.\nCorollary 1 shows that the FPT approximation scheme from Theorem 2 can presumably not be replaced by an FPT algorithm. By Proposition 1, we also know that k-Borda-SHIFT BRIBERY is in FPT for all-or-nothing prices and the parameterization by the number of voters.\nThe next result is, perhaps, even more surprising than Theorem 4: It turns out that k-BordaSHIFT BRIBERY is W[1]-hard also for the parameterization by the number of unit shifts, whereas Borda-SHIFT BRIBERY is in FPT. To this end, we describe a parameterized reduction from CLIQUE.\nTheorem 5. Parameterized by the number s of unit shifts, k-Borda SHIFT BRIBERY is W[1]-hard.\nProof. We provide a parameterized reduction from the W[1]-complete CLIQUE problem in which we are given a graph G with V (G) = {v1, . . . , vn} and E(G) = {e1, . . . , em} and we ask whether there is a set of h pairwise adjacent vertices in G.\nGiven an instance for the CLIQUE problem, create an instance for k-Borda SHIFT BRIBERY as follows. Set the budget B :=\n( h 2 ) \u00b7(2+h3), use unit price functions, and set the size of the committee\nk := n\u2212h+1. The candidate set is C = {p}\u222aV (G)\u222aD(G)\u222aF , where the sets D(G) and F are defined as follows. Let H be a set of B dummy candidates and for each edge e from the graph let D(e) be a set of h3 dummy candidates. Set D(G) := ( \u22c3 e\u2208E(G)D(e) ) \u222aH . Define F to contain B + (h\u2212 1) dummy candidates. We form the set of voters as follows:\n1. For each edge e = {u, v} from G we introduce voter xe with preference order: u \u227b v \u227b D(e) \u227b p \u227b D(G) \\D(e) \u227b V (G) \\ {u, v} \u227b F, and voter ye whose preference order is the reverse of that of xe with candidates from F shifted to the bottom positions.\n2. We introduce two voters, z and z\u2032, where z has preference order V (G) \u227b F \u227b p \u227b D(G)\nand z\u2032 has preference order F \u227b p \u227b \u2190\u2212\u2212\u2212 V (G) \u227b D(G).\nAll vertex candidates have the same score in this election, and we denote it by L. Candidate p has score L\u2212 (h\u2212 1)\u2212B, and all remaining candidates have score lower than L (note that we can assume that G has more than\n( h 2 ) edges as otherwise it certainly does not contain a size-h clique).\nIntuitively, shifting p to the top positions in votes xe corresponding to a size-h clique is the only way to ensure p\u2019s victory\nIt remains to show the correctness of the construction. More precisely, we show that G contains a clique of size h if and only if there is a successful shift action for our instance of k-Borda-SHIFT BRIBERY.\nFor the \u201conly if\u201d case, assume that there is a clique if size h in G. Then, a successful bribery can shift p to the front of all xe voters corresponding to the edges inside this clique. This gives p additional B points and causes each vertex from the clique to lose h \u2212 1 points. In effect, there are n \u2212 h vertex candidates with score higher than that of p and h vertex candidates with the same score as p. Since all other candidates already had lower scores, p belongs to at least one winning committee.\nFor the \u201cif\u201d case, note that p can join some winning committee only if at least h vertex candidates lose h\u2212 1 points each. Without exceeding the budget, p can pass vertex candidates only in xe votes. Through simple arithmetic, we see that within a given budget we can shift p to pass some vertex candidates in at most\n( h 2 ) of these votes and, so, in each of them we can shift p to the top position.\nThat is, a successful shift action passes vertices corresponding to ( h 2 ) edges. This can lead to h candidates losing at least h\u22121 points each (or, in fact, exactly h\u22121 points each) only if these edges form a size-h clique."}, {"heading": "6 Chamberlin-Courant and Its Variants", "text": "We now move on to the Chamberlin-Courant (CC) rules and their approximate variants. These rules try to find a committee such that every voter is represented well by some member of the committee. Recall that WINNER DETERMINATION for Borda-CC and Approval-CC is NP-hard but can be\nsolved efficiently for the approximate variants. To some extend, this difference in the computational complexity is also reflected by our finding for SHIFT BRIBERY.\nNote that many results for the CC-based rules (see also Table 1) follow from our results from previous sections. For the parameterizations by the number of candidates, Theorem 1 gives FPT results for all CC-based rules. For the parameterization by the number of voters, by Proposition 2 we have FPT results for Approval-CC, Greedy-Approval-CC, and PTAS-CC. We inherit W[1]hardness for Borda-CC and Greedy-Borda-CC from Theorem 4, since both rules coincide with the single-winner Borda rule in case of committee size k = 1.\nCorollary 2. SHIFT BRIBERY parameterized by the number of voters is W[1]-hard for Borda-CC and for Greedy-Borda-CC even for unit price functions.\nBy Theorem 2, we have that there is an FPT approximation scheme for Borda-CC. However, since Theorem 2 strongly relies on candidate monotonicity of the rule, it does not apply to GreedyBorda-CC. Indeed, we believe that there is no constant-factor FPT approximation algorithm for Greedy-Borda-CC-SHIFT BRIBERY (parameterized by the number of voters). So far we could prove this only for the case of weighted elections, i.e., for the case where each voter v has an integer weight wv and counts as wv separate voters for computing the result of the election (but not for the computation of the parameter). On the one hand, one could say that using weighted votes goes against the spirit of parameterization by the number of voters and, to some extent, we agree. On the other hand, however, all our FPT results for parameterization by the number of voters (including the FPT approximation scheme) do hold for the weighted case. By a parameterized reduction from the MULTICOLORED CLIQUE problem, we obtain the following.\nTheorem 6. Unless W[1] = FPT, Greedy-Borda-CC-SHIFT BRIBERY with weighted votes is not \u03b1-approximable for any constant \u03b1, even in FPT time with respect to the number of voters and even for unit price functions.\nProof. We first prove W[1]-hardness of the problem and then argue that this proof implies the claimed inapproximability result.\nWe give a reduction from the MULTICOLORED CLIQUE problem for the case of regular graphs which is W[1]-complete for the parameter solution size h (e.g. [26, Lemma 3.2]). To this end, let G = (V (G), E(G)) be our input graph and let h be the size of the desired clique (and the number of vertex colors). We use the following notation. For each color i \u2208 [h], we let V (i) = {v(i)1 , . . . , v (i) n } be the set of vertices from G with color i. For each vertex v \u2208 V (G), we write E(v) to denote the set of edges incident to v. Since G is regular, we let d be the common degree of all the vertices (i.e., for each vertex v, |E(v)| = d). For each pair of distinct colors i, j \u2208 [h], i < j, we write E(i, j) to denote the set of edges between vertices of color i and vertices of color j.\nWe make the following observation regarding Greedy-Borda-CC. In each iteration it picks a candidate with the highest score, where this score is computed as follows: Let W be the set of candidates already selected by Greedy-Borda-CC at this point. Consider candidate c and voter v, and let d be the candidate from W that v ranks highest. Voter v gives max(0,posv(c) \u2212 posv(d)) points to c (i.e., the number of points by which adding c to W would increase the score of v\u2019s\nrepresentative). The score of a candidate in a given iteration is the sum of the scores it receives from all the voters.\nWe form an instance of Greedy-Borda-CC-SHIFT BRIBERY as follows.\nThe candidates. We let the candidate set be C = {b, p, p\u2032}\u222aV (G)\u222aE(G)\u222aD, where p is the preferred candidate, p\u2032 is p\u2019s direct competitor in the sense that either p or p\u2032 will be the committee, b is the \u201cbar\u201d candidate (see explanation below), and D is a set of dummy candidates. Throughout the construction we will introduce many dummy candidates and we do not give them special names; at the end of the construction it will be clear that we add only polynomially many of them. We will ensure that b, the bar candidate, is always chosen first into the committee, so\u2014in essence\u2014the scores of all other candidates can be computed relative to b. So when we describe a preference order, we list only top parts of the voters\u2019 preference orders, until candidate b. Candidate p is ranked last in every vote in which we do not explicitly require otherwise.\nWe also use the following notation in the descriptions of the preference orders. For a number L, by writing [L] in a preference order we mean introducing L new dummy candidates that are put in the following positions in this preference order, but that in every other preference order are ranked below b (and, thus, after b is selected receive no points from these voters).\nThe voters. We introduce the following voters, where N , Tv, Te, and Tp are four large numbers such that N is much bigger than Tv, Tv is much bigger than Te, and Te is much bigger than Tp; we will provide their exact values later. Each voter has weight one unless specified otherwise.\n1. For each color i \u2208 [h], we introduce two vertex-score voters with the following preference orders:\nV (i) \u227b [N \u00b7 (Tv \u2212 i)] \u227b b, \u2190\u2212\u2212 V (i) \u227b [N \u00b7 (Tv \u2212 i)] \u227b b,\nand two vertex-selection voters with the following preference orders:\nV (i) \u227b p \u227b b, \u2190\u2212\u2212 V (i) \u227b p \u227b b.\n2. For each pair of distinct colors i, j \u2208 [h], i < j, we introduce two edge-score voters with the following preference orders:\nE(i, j) \u227b [N \u00b7 (Te \u2212 (i \u00b7 h+ j))] \u227b b, \u2190\u2212\u2212\u2212\u2212 E(i, j) \u227b [N \u00b7 (Te \u2212 (i \u00b7 h+ j))] \u227b b,\nand two edge-selection voters with the following preference orders:\nE(i, j) \u227b p \u227b b, \u2190\u2212\u2212\u2212\u2212 E(i, j) \u227b p \u227b b.\nEach of the edge-selection voters has weight \u03c9 = 4 ( h 2 ) n(d+1) (and these are the only voters with non-unit weights).\n3. For each color i \u2208 [h] we introduce two verification voters with the following preference orders:\np \u227b v (i) 1 \u227b E(v (i) 1 ) \u227b \u00b7 \u00b7 \u00b7 \u227b v (i) n \u227b E(v (i) n ) \u227b b, p \u227b v(i)n \u227b \u2190\u2212\u2212\u2212\u2212 E(v(i)n ) \u227b \u00b7 \u00b7 \u00b7 \u227b v (i) 1 \u227b \u2190\u2212\u2212\u2212\u2212 E(v (i) 1 ) \u227b b.\n4. We introduce the following two voters, the p/p\u2032-score voters, with the following preference orders:\np\u2032 \u227b [N \u00b7 Tp] \u227b b,\np \u227b [N \u00b7 Tp + h(n + 1)(d+ 1)] \u227b b.\n5. Let H be the total weight of voters introduced so far (clearly, H is polynomially upperbounded in the input size of the MULTICOLORED CLIQUE instance (G,h)). We introduce\nH + 1 pairs of voters with preference orders b \u227b C \\ {b} and b \u227b \u2190\u2212\u2212\u2212\u2212 C \\ {b}. We refer to these voters as the bar-score voters.\nWe assume that the internal tie-breaking prefers p to p\u2032\u2014we could modify the construction slightly if it were the other way round.\nCommittee size and budget. We set the committee size to be k = 1+h+ ( h 2 ) +1. We use unit\nprices for the voters and we set the budget B = |V | \u2212 h+ |E| \u2212 ( h 2 ) .\nWe claim that for an appropriate choice of N , Tv, Te, and Tp it is possible to ensure that p is in a winning committee if and only if there is multicolored size-h clique for G. We now argue why this is the case.\nThe idea. The general idea is to show that every shift action (even the zero-vector, that means not bribing the voters) of costs at most B leads to a committee that contains\n1. the bar vertex b,\n2. for each color i one candidate corresponding to a vertex of color i,\n3. for each color pair {i, j}, i 6= j one candidate corresponding to an edge incident to a vertex of color i and to a vertex of color j\n4. candidate p if the selected vertices and edges encode a multicolored clique; otherwise the committee contains p\u2032.\nFurthermore, any such combination of vertices and edges can be selected within the given budget, that is, there is a successful shift action if a multicolored clique of size h exists.\nCorrectness. Observe that due to the bar-score voters, irrespective how we shift p within the budget, Greedy-Borda-CC will first choose b. Thus, from this point on, we compute the score of all candidates relative to b (and, in later rounds, the other selected members of the committee, but there is a limited number of such interactions).\nWe now describe the next h + ( h 2 ) + 1 rounds, first describing the situation as if p were not shifted, and then indicate how it could be changed with appropriate shifts. After the first iteration, when b is selected, for each color i \u2208 [h], every vertex in V (i) has score:\n(2N \u00b7 (Tv \u2212 i) + (n+ 1)) \ufe38 \ufe37\ufe37 \ufe38\nvertex score voters\n+ (2n + 3) \ufe38 \ufe37\ufe37 \ufe38\nvertex-selection voters\n+((n+ 1)(d + 1)) \ufe38 \ufe37\ufe37 \ufe38\nverification voters\n.\nThe points in the first bracket come from the vertex-score voters, in the second bracket from the vertex-selection voters, and in the last bracket from the verification voters. Further, since Tv is much larger than Te and Tp, every non-vertex candidate has significantly lower score.\nThus, in the next h rounds, for each color i \u2208 [h], Greedy-Borda-CC adds into the committee one vertex candidate of color i. Note that as soon as it picks some vertex candidate of color i, the score of all the other vertex candidates of this color immediately drops by at least 2N \u00b7 (Tv \u2212 i) and, so, their score is much too low to be selected.\nBy shifting candidate p in the vertex-selection votes, for each color i \u2208 [h] and each vertex in V (i) it is possible to ensure that exactly this vertex is selected (it suffices to ensure that every other vertex candidate of this color loses one point due to p passing him or her). The costs of such shifts are at most |V | \u2212 h in total.\nIn other words, we can assume that after these h iterations Greedy-Borda-CC picks one vertex candidate of each color, and that by shift action of cost at most |V | \u2212 h it is possible to choose precisely which ones.\nIn the next ( h 2 ) iterations, Greedy-Borda-CC picks one edge candidate for each pair of colors. Not counting the verification voters, for each pair of colors i, j \u2208 [h], i < j, every edge candidate connecting vertices of colors i and j has score:\n(N(Te \u2212 (i \u00b7 h+ j)) + |E(i, j)| + 1) \ufe38 \ufe37\ufe37 \ufe38\nedge-score voters\n+(\u03c9(|E(i, j)| + 2)) \ufe38 \ufe37\ufe37 \ufe38\nedge-selection voters\n,\nwhere the points from the first bracket come from the edge-score voters and the points in the second bracket come from the edge-selection voters. Further, every such candidate receives less than \u03c92 points from the verification voters.\nSince Te is much larger than Tp, and since by shifting p forward in the votes of edge-selection voters it is possible to remove \u03c9 points from the scores of all but one edge candidate in each E(i, j). Moreover, it is possible to precisely select for each E(i, j) which of its members is added to the committee with a shift action of total cost |E| \u2212\n( h 2 ) . Analogously to the case of vertices, note that\nwhenever some candidate from E(i, j) is selected, the other ones lose so many points that they have no chance of being selected in any of the following iterations.\nIn the final iteration, the algorithm either selects p\u2032 or p. Candidate p\u2032 has score N \u00b7 Tp, whereas the score of p depends on the vertex and edge candidates that were so far introduced into the committee. If we disregarded all committee members selected after b, p would have score:\nN \u00b7 Tp + h(n + 1)(d+ 1).\nFor each color i \u2208 [h], however, p loses (n + 1)(d + 1) points from the verification voters. This is true since some candidate from V (i) is in the committee, we compute p\u2019s score relative to this\nvertex candidate and not relative to b. If these were the only points that p loses due to the committee members already selected, then\u2014by tie-breaking\u2014 p would win against p\u2032. However, if for some pair of colors i, j \u2208 [h], i < j, the committee contains some edge e that connects vertices that are not both in the committee, then p loses at least one more point from the verification voters (either for color i or for color j or for both) because at least one of these verification voters ranks e ahead of all the vertex candidates from the committee. Then p\u2032 is selected. This means that p ends up in the committee if and only if due to an appropriate shift action we select vertices and edges corresponding to a multicolored clique. This proves the correctness of the reduction for an appropriate choice of N , Tv, Te, and Tp, which is discussed next.\nThe values of N , Tv, Te, and Tp. While one could pick tight precise values, for the correctness of the proof it suffices to take, say, Tp = ( ( h 2 ) \u00b7 |V | \u00b7 |E|)3, Te = T 3p , Tv = T 3 e , and N = T 3 v .\nFinally, we finally discuss the inapproximability result that is implied by our reduction.\nInapproximability. Observe that, in fact, the above proof gives our inapproximability result. The reason is that for a given constant factor \u03b1, we could increase N by the same factor and it would be impossible for p to pass the bar candidate in any of the votes, even if we were to spend \u03b1 times the necessary budget. In effect, for p to succeed we would still have to find a multicolored clique.\nFor the parameterization by the number of unit shift actions, both Borda-CC and Approval-CC are para-NP-hard due to the hardness of WINNER DETERMINATION.4 For Greedy-Approval-CC, PTAS-CC, and Greedy-Borda-CC we obtain W[2]-hardness results and inapproximability results.\nTheorem 7. Parameterized by the total number s of unit shifts, SHIFT BRIBERY is W[2]-hard even in case of unit prices for Greedy-Borda-CC, Greedy-Approval-CC, and PTAS-CC. Further, unless W[2] = FPT, in these cases the problem is not \u03b1-approximable for any constant \u03b1.\nProof. First, we show the result for Greedy-Approval-CC for t-Approval satisfaction function with t \u2265 3 (which includes PTAS-CC). Second, we show how the proof ideas can be adapted to obtain the same result for Greedy-Borda-CC.\nGreedy-Approcal-CC. We reduce from the SET COVER problem which is W[2]-hard parameterized by the set cover size h. Given an instance (S, U, h) of SET COVER with S = (S1, . . . , Ss) denoting the given sets over the universe U = {u1, . . . , ur}, we construct a Greedy-Approval-CC SHIFT BRIBERY instance as follows.\nImportant candidates. Our election will consist of 2|U |+ 2|S|+ 2 important candidates: For each element u \u2208 U we create two element candidates c\u2212(u) and c+(u). Analogously, we create two set candidates c\u2212(S) and c+(S) for each set S \u2208 S . Furthermore, we create the preferred candidate p and a candidate p\u2032.\nDummy candidate. For each voter (to be specified later), we introduce up to (t \u2212 1) further dummy candidates. The dummy candidates will not have any chance to be part of the committee,\n4The literature [25, 32] speaks of hardness of computing the score of a winning committee, but one can show that deciding whether a given candidate is in some winning committee is NP-hard as well.\nbecause each of them will only be approved once and there are enough important candidates that have at least two approvals no matter how one bribes the election. However, the dummy candidates intuitively allow some voter to approve any number t\u2032, 1 \u2264 t\u2032 \u2264 t, of important candidates by approving the desired set of important candidates and some further dummy candidates which are exclusively approved by this voter.\nWe have basically everything needed to explain the rough idea of the construction.\nThe idea. In the unbribed election the candidates c\u2212(u) and c\u2212(S) for each u \u2208 U and S \u2208 S together with the candidate p\u2032 are elected as committee. The decisive direct effect of successfully bribing the voters will be to decrease the score of at most h candidates c\u2212(S). Doing this will replace the corresponding c\u2212(S) with c+(S) in the committee. Furthermore, each c\u2212(u) with u \u2208 S for some replaced candidate c(S) will then be replaced by c+(u). Finally our preferred candidate p will replace candidate p\u2032 in the committee if and only if c\u2212(u) is replaced by the corresponding c+(u) for each u \u2208 U .\nCommittee size and budget. As already indicated in the description of the idea, we set the budget equal to the size h of the set cover and the committee size to |S|+ |U |+ 1.\nNext, we discuss the voters of the election that allow us to implement the above idea.\nSpecifying the voters. Observe that for Greedy-Approval-CC SHIFT BRIBERY, specifying the set of approved candidates, the last-ranked approved candidate, that is, the candidate at position t, and the price for shifting the preferred candidate p to position t completely describes the influence of a voter to the unbribed and bribed election: Shifting p to any position greater than t will not change the score of any candidate in any step of Greedy-Approval-CC. Shifting p to some position \u2264 t will increase the score of p by one and decrease the score of the last-ranked approved candidate by one\u2014independently how far beyond position t we shift p. Hence, for each voter we simply say which important candidates this voter approves, which candidate among the approved candidates is ranked last, and the price of moving p the the first approved position.\nThe voters. The set of voters contains |S| many S-voters, |S| \u00b7 |U | many S-U -voters, and |U | many U -voters:\n\u2022 For each set S \u2208 S there is one S-voter that approves c\u2212(S) (and some dummy candidates) such that it costs one to disapprove c\u2212(S) but approve p instead.\n\u2022 For each set S \u2208 S and element u \u2208 U there is one S-u-voter that approves c\u2212(u) only if u \u2208 S and that approves approves c+(S) (and some dummy candidates) in any case.\n\u2022 For each element u \u2208 U there is one u-voter that approves p\u2032 and c+(u).\nThere are further auxiliary voters that allow us to appropriately set the number of approvals for each candidate:\n\u2022 For each Sj \u2208 S there are |S|5 \u00b7 |U |5 \u2212 j voters that approve c\u2212(S) and c+(S) (and some dummy candidates) and |U | \u2212 1 voters that only approve c\u2212(S) (and some dummy candidates).\n\u2022 For each ui \u2208 U there are |S|4 \u00b7 |U |4 \u2212 i voters that approve c\u2212(u) and c+(u) (and some dummy candidates) and |{S \u2208 S | ui \u2208 S}| \u2212 1 voters that only approve c+(u) (and some dummy candidates).\n\u2022 There are |S|2 \u00b7 |U |2 voters that approve p and p\u2032 (and some dummy candidates) and h \u2212 1 voters that only approve p\u2032 (and some dummy candidates).\nExcept for the S-voters, it is too expensive to bribe some voter with the effect that p is approved instead of some other candidate. This can be easily implemented by putting p more than budget many positions behind the last approved candidate.\nThis construction can clearly be computed in polynomial time and our parameter, the number of unit shifts, which is upper bounded by the budget, is identical to the set cover size h. Before we prove the correctness of the reduction, let us briefly discuss (properties of) the unbribed election.\nScores, ties, and the unbribed election. First, consider the scores of the candidates in the very first round of the voting rule which are as follows.\n\u2022 Both, candidate c\u2212(Sj) and candidate c+(Sj) have |S|5 \u00b7 |U |5 \u2212 j + |U | approvals.\n\u2022 Both candidate c\u2212(ui) and candidate c+(ui) have |S|4 \u00b7 |U |4 \u2212 i + |{S \u2208 S | ui \u2208 S}| approvals.\n\u2022 Candidate p\u2032 has |S|2 \u00b7 |U |2 + |U |+ h\u2212 1 approvals.\n\u2022 Candidate p has |S|2 \u00b7 |U |2 approvals.\nWe assume that candidate c\u2212(\u00b7) is always preferred to candidate c+(\u00b7) and candidate p\u2032 to candidate p by the tie-breaking of Greedy-Approval-CC.5\nIt is easy to verify that in the unbribed election the candidates will join the committee in the following order: c\u2212(S1), c\u2212(S2), . . . , c\u2212(Ss), c\u2212(u1), c\u2212(u2), . . . , c\u2212(ur) and finally p\u2032. To see this, observe that each pair of candidates c\u2212(\u00b7) and c+(\u00b7) is approved by almost the same set of candidates. As soon as one of c\u2212(\u00b7) and c+(\u00b7) joins the committee, the other loses nearly all approvals and has no chance to join into the committee.\nThe possible impact of shift actions. The only shift actions with any effect that can be performed within the given budget B = h are to shift p forward in the preference lists of up to h set voters. Let c\u2212(Sj1), . . . , c\n\u2212(Sjh) be the candidates that were originally approved by the bribed voters instead of approving p. We call S\u2217 := {Sj1 , Sj2 , . . . , Sjh} the selected sets. Applying the corresponding shift actions will decrease the score of each candidate c\u2212(Sj\u2113), 1 \u2264 \u2113 \u2264 h, by one and increase the score of p by h. It is easy to verify that, in effect, for each 1 \u2264 \u2113 \u2264 h, GreedyApproval-CC will select c+(Sj\u2113) instead of c\n\u2212(Sj\u2113) to join the committee. Now, observe that for each u \u2208 Sj\u2113 , there is one voter that approves c +(Sj\u2113) and c \u2212(u). This means that the score of each c\u2212(u) for u \u2208 \u22c3\nS\u2208S\u2217 S is decreased by at least one after the first |S| candidates joined the committee. Hence, if c+(Sj\u2113) joins the committee instead of c +(Sj\u2113), then also c +(u) joins instead of c\u2212(u). Finally, observe that, after s+ r candidates joined the committee, the score of p\u2032 is decreased by the number of candidates c+(u) that joined the committee instead of c\u2212(u).\n5The reduction can be adapted to work for any tie-breaking.\nCorrectness. We show that there is a subset of h sets from S whose union is U if and only if there is a successful set of shift actions of cost h.\nFor the \u201conly if\u201d case, assume that there is a set S \u2032 \u2286 S of h sets whose union is U . Then, bribing the S-voter for each S \u2208 S \u2032 to approve p instead of c\u2212(S) costs h and successfully makes p a winner: From the above discussion about the impact of shift actions, we can immediately infer that the score of each candidate c\u2212(u), u \u2208 U , is decreased by one and, hence, the score of p\u2032 is decreased by |U |. Furthermore, the score of p was increased by h. Thus, p has score |S|2 \u00b7 |U |2 + h whereas p\u2032 has score |S|2 \u00b7 |U |2 + h\u2212 1. This means that p joins the committee in the last round of Greedy-Approval-CC.\nFor the \u201cif\u201d case, assume that there is a set of shift actions with costs h that makes p join the committee. Since p can gain at most h points, p\u2032 has to lose at least |U | points. However, the only (important) candidates that are approved together with p\u2032 by some voters are the element candidates c+(u), u \u2208 U . To decrease the score of p\u2032 by |U |, all these candidates c+(u), u \u2208 U , must join the committee instead of c\u2212(u), u \u2208 U . From the above discussion about the impact of shift actions, we can infer that the union of the selected set is U .\nInapproximability. By a slight adaption of the above construction we can conclude (fixedparameter) inapproximability: First, ensure that even within a budget of \u03b1 \u00b7 B, one can only afford to bribe the set voters. This can be reached by putting (\u03b1 + 1) \u00b7 B dummy candidates between p and the first approved candidate for all but the set voters. Second, introduce another pair of important candidates d and d\u2032 and let the set voters additionally approve d. Introduce |S|3 \u00b7 |U |3 voters that approve d and d\u2032 (and some dummy candidates) and |S| \u2212 h voters that only approve d\u2032 (and some dummy candidates). Introduce |S| \u00b7 |U | voters that approve p\u2032 and d (and some dummy candidates) and further |S| \u00b7 |U | voters that only approve d\u2032 (and some dummy candidates). Increase the committee size by one.\nThe first |S| + |U | rounds of the Greedy-Approval-CC procedure clearly work analogously to the original construction. As long as less than h set voters are bribed, candidate d will join the committee in round |S|+ |U |+1. (We assume that Greedy-Approval-CC prefers d to d\u2032 when there is a tie.) Then, candidate d\u2032 loses almost all points and has no chance to join the committee and candidate p\u2032 loses all additional approvals (introduced by the extension of the construction). That is, the last round works analogously to the original construction. However, if one bribes more than h set voters, then candidate d\u2032 will join the committee in round |S|+ |U |+1, p\u2032 keeps the additionally introduced approvals, and p has no chance to join the committee in the last round.\nIt follows that, even with a budget of \u03b1 \u00b7B, one can only make p become member of a winning committee if one selects a subset of at most h sets from S whose union is U .\nGreedy-Borda-CC. We give a reduction from the SET COVER problem. The basic idea of the construction is very similar to that in the proof for Greedy-Approval-CC. However, to implement this idea, we also use some concepts from the proof of Theorem 6. To this and, we use the same notational conventions as in the proof of Theorem 6, and we use the bar candidate in the same way.\nGiven an instance (S, U, h) of SET COVER with S = (S1, . . . , Ss) denoting the given sets over the universe U = {u1, . . . , ur}, we construct a Greedy-Borda-CC SHIFT BRIBERY instance as follows.\nWe form the following set of candidates:\n1. We introduce the preferred candidate p, his or her opponent p\u2032, and the bar candidate.\n2. For each set Si \u2208 S , we introduce two candidates c\u2212(Si) and c+(Si).\n3. For each element uj \u2208 U , we introduce candidates c\u2212(uj) and c+(uj).\n4. We introduce sufficiently many dummy candidates.\nLet N , Ts, Tu, and Tp be some sufficiently large numbers such that N is much larger than Ts, Ts is much larger than Tu, and Tu is much larger than Tp (we will specify their values later). We introduce the following voters:\n1. For each set Si \u2208 S , we introduce two set-score voters with preference orders\nc\u2212(Si) \u227b c +(Si) \u227b [N \u00b7 (Ts \u2212 i)] \u227b b, c+(Si) \u227b c \u2212(Si) \u227b [N \u00b7 (Ts \u2212 i)] \u227b b.\nFurther, for each set we introduce two set-selection voters with preference orders\nc\u2212(Si) \u227b p \u227b b, c+(Si) \u227b [1] \u227b b.\n2. For each element uj \u2208 U , we introduce two element-score voters with preference orders:\nc\u2212(uj) \u227b c +(uj) \u227b [N \u00b7 (Tu \u2212 j)] \u227b b, c+(uj) \u227b c \u2212(uj) \u227b [N \u00b7 (Tu \u2212 j)] \u227b b.\n3. For each uj \u2208 U , we introduce a verification voter c+(uj) \u227b p\u2032 \u227b b.\n4. For each element uj \u2208 U , and each set Si \u2208 S such that uj \u2208 Si, we introduce a covering voter with preference order:\nc+(Si) \u227b c \u2212(uj) \u227b b.\nFurther, for each candidate c \u2208 U \u222a {c\u2212(S1), c+(S1), . . . , c\u2212(Ss), c+(Ss)}, we introduce exactly so many filler voters with preference orders of the form c \u227b b, so that, relative to b, all these candidates receive the same score from the verification, covering, and filler voters (taken together).\n5. We introduce two p/p\u2032-score voters with preference orders p\u2032 \u227b [N \u00b7 (Tp) + h] \u227b b and p \u227b [N \u00b7 (Tp)] \u227b b.\n6. Let H be the number of voters introduced so far (clearly, H is polynomially upper-bounded in the size of the input instance). We introduce H + 1 pairs of voters with preference orders\nb \u227b C \\ {b} and b \u227b \u2190\u2212\u2212\u2212\u2212 C \\ {b}. We refer to these voters as the bar-score voters.\nWe set the committee size to be 1 + s + r + 1, and we set the budget B = h. We use unit price functions. The internal tie-breaking is such that p precedes p\u2032, for each Si \u2208 S , c\u2212(Si) precedes c+(Si), and for each uj \u2208 U , c\u2212(uj) precedes c+(uj).\nThe correctness proof works analogous to that for Greedy-Approval-CC. To see this, let us now analyze how Greedy-Borda-CC proceeds on the just-constructed election. As in the proof of Theorem 6, it is clear that in the first iteration it picks b. Due to the values of N and Ts, in the next s iterations, for each Si \u2208 S , Greedy-Borda-CC either adds c\u2212(Si) to the committee or it adds c+(Si) to the committee. With a shift action of cost h\u2014by shifting p forward in the votes of the setselection voters\u2014we can select which h of the c+(Si) candidates are introduced into the committee (indeed, we need to introduce h for them to increase p\u2019s score\u2014in the final iteration\u2014by h).\nIn the next r iterations, for each j Greedy-Borda-CC picks either c\u2212(uj) or c+(uj). It is easy to verify that it picks exactly those c+(uj) candidates for which in the preceding iterations it has picked at least one candidate c+(Si) such that uj \u2208 Si.\nIn the final iteration, Greedy-Borda-CC either picks p or p\u2032. It picks the former one exactly if it managed to pick h candidates from S \u2032 := {c+(Sj1), . . . , c +(Sjh)} and all candidates c +(uj) (since then p gains additional h points and p\u2032 loses all points from the verification voters; p wins due to tie-breaking). This happens if and only if we applied a shift action that ensured selection of those h of the c+(Si) candidates that correspond to a set cover, that is, \u22c3\nS\u2208S\u2032 S = U . To complete the proof for the Greedy-Borda-CC case, we need to pick the values of N , Ts, Tu,\nand Tp. It is easy to see that the values Tp = (r \u00b7 s \u00b7 h)3, Tu = T 3p , Ts = T 3 u , and N = T 3 s suffice.\nThis proves W[2]-hardness of SHIFT-BRIBERY for Greedy-Borda-CC. To see the inapproximability result, one can use an extension to the construction that works analogously to the extension in the proof for Greedy-Approval-CC."}, {"heading": "7 Conclusion", "text": "We studied the complexity of SHIFT BRIBERY for two families of multiwinner rules: SNTV, Bloc, and k-Borda, which pick k best candidates according to appropriate single-winner scoring rules, and the Chamberlin-Courant family of rules and their approximate variants, which focus on providing good representatives. While we have shown low complexity for SNTV and Bloc (just like for the single-winner rules on which they are based), we have shown that SHIFT BRIBERY is significantly harder to solve for k-Borda than for its single-winner variant, Borda. The situation is even more dramatic for the Chamberlin-Courant family of rules, where in addition to W[1]- and W[2]-hardness results, we also obtain inapproximability results.\nWe focused on the case where we want to ensure a candidate\u2019s membership in some winning committee; it would also be natural to require membership in all winning committees. In fact, all our results hold in this model as well. Below we briefly explain why this is so for the tractability results (for the intractability ones, it requires minor tweaks).\nFor the tractability results with respect to the number of candidates this can be seen as follows.\n\u2022 For SNTV, Bloc, and k-Borda, we can ensure in our ILP formulations that the score of p is strictly greater than the score of the candidates which are not part of the committee.\n\u2022 For the round-based rules, the committee is always unique and, hence, our results already apply.\n\u2022 For the CC rules, we can build upon the maximum matching algorithm of Betzler et al. [4] (trying matchings where p is already matched to one part of the voters, and other ones, where p is not matched at all).\nFor the tractability results with respect to the number of voters or number of shifts, our algorithms basically try all bribed elections where p is in at least one winning committee (except for the FPT-AS, where we overshoot; due to monotonicity, this does not hurt). Then, for each bribed election we can adopt the WINNER DETERMINATION algorithm of Betzler et al. [4, Proposition 1] that partitions the voters into groups of voters with the same representative and checks whether p is part of all cheapest matchings of representatives to candidates (basically checking all possible partitions).\nPutting an even more demanding bribery goal of involving more than one candidate to become part of the winning committee(s) is left to future studies. Areas of future research also include studying bribery problems for multiwinner settings with partial preference orders and studying multiwinner rules based on the Condorcet criterion. Furthermore, our fixed-parameter algorithms with respect to the parameter number of candidates rely on integer linear programming formulations. It seems challenging to replace these algorithms by direct combinatorial algorithms that give us a better understanding of the problems and potentially better running times. This refers to a general challenge in context of parameterized algorithms for Computation Social Choice problem [6, Key question 1]."}, {"heading": "8 Acknowledgments", "text": "The authors were supported in part by the DFG project PAWS (NI 369/10), the NCN project DEC2012/06/M/ST1/00358. Nimrod Talmon was supported by the DFG Research Training Group MDS (GRK 1408). Piotr Faliszewski\u2019s visit to TU Berlin was supported by the COST action IC1205."}], "references": [{"title": "Justified representation in approval-based committee voting", "author": ["H. Aziz", "M. Brill", "V. Conitzer", "E. Elkind", "R. Freeman", "T. Walsh"], "venue": "Proceedings of the 29th AAAI Conference on Artificial Intelligence (AAAI \u201915), pages 784\u2013790. AAAI Press,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Computational aspects of multi-winner approval voting", "author": ["H. Aziz", "S. Gaspers", "J. Gudmundsson", "S. Mackenzie", "N. Mattei", "T. Walsh"], "venue": "Proceedings of the 14th International Conference on Autonomous Agents and Multiagent Systems (AAMAS \u201915), pages 107\u2013115. ACM,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Campaigns for lazy voters: Truncated ballots", "author": ["D. Baumeister", "P. Faliszewski", "J. Lang", "J. Rothe"], "venue": "Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems (AAMAS \u201912), pages 577\u2013584. IFAAMAS,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "On the computation of fully proportional representation", "author": ["N. Betzler", "A. Slinko", "J. Uhlmann"], "venue": "Journal of Artificial Intelligence Research, 47:475\u2013519,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Satsifaction approval voting", "author": ["S. Brams", "M. Kilgour"], "venue": "R. Fara, D. Leech, and M. Salles, editors, Voting Power and Procedures: Essays in Honour of Dan Felsenthal and Mosh\u00e9 Machover, pages 323\u2013 346. Springer,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Parameterized algorithmics for computational social choice: Nine research challenges", "author": ["R. Bredereck", "J. Chen", "P. Faliszewski", "J. Guo", "R. Niedermeier", "G.J. Woeginger"], "venue": "Tsinghua Science and Technology, 19(4):358\u2013373,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Prices matter for the parameterized complexity of shift bribery", "author": ["R. Bredereck", "J. Chen", "P. Faliszewski", "A. Nichterlein", "R. Niedermeier"], "venue": "Proceedings of the 28th AAAI Conference on Artificial Intelligence (AAAI \u201914), pages 1398\u20131404. AAAI Press,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Elections with few candidates: Prices, weights, and covering problems", "author": ["R. Bredereck", "P. Faliszewski", "R. Niedermeier", "P. Skowron", "N. Talmon"], "venue": "Proceedings of the 4th International Conference on Algorithmic Decision Theory (ADT \u201915), volume 9346 of LNCS, pages 414\u2013431,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Large-scale election campaigns: Combinatorial shift bribery", "author": ["R. Bredereck", "P. Faliszewski", "R. Niedermeier", "N. Talmon"], "venue": "Proceedings of the 14th International Conference on Autonomous Agents and Multiagent Systems (AAMAS \u201915), pages 67\u201375. ACM,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Socially desirable approximations for Dodgson\u2019s voting rule", "author": ["I. Caragiannis", "C. Kaklamanis", "N. Karanikolas", "A. Procaccia"], "venue": "ACM Transactions on Algorithms, 10(2):Article No. 6,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2014}, {"title": "Representative deliberations and representative decisions: Proportional representation and the Borda rule", "author": ["B. Chamberlin", "P. Courant"], "venue": "American Political Science Review, 77(3):718\u2013733,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1983}, {"title": "Parameterized Algorithms", "author": ["M. Cygan", "F.V. Fomin", "L. Kowalik", "D. Lokshtanov", "D. Marx", "M. Pilipczuk", "M. Pilipczuk", "S. Saurabh"], "venue": "Springer,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Multivariate complexity analysis of swap bribery", "author": ["B. Dorn", "I. Schlotter"], "venue": "Algorithmica, 64(1):126\u2013 151,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Fundamentals of Parameterized Complexity", "author": ["R.G. Downey", "M.R. Fellows"], "venue": "Springer,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2013}, {"title": "Approximation algorithms for campaign management", "author": ["E. Elkind", "P. Faliszewski"], "venue": "Proceedings of the 6th International Workshop On Internet And Network Economics (WINE \u201910), volume 6484 of LNCS, pages 473\u2013482. Springer,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Swap bribery", "author": ["E. Elkind", "P. Faliszewski", "A. Slinko"], "venue": "Proceedings of the 2nd International Symposium on Algorithmic Game Theory (SAGT \u201909), volume 5814 of LNCS, pages 299\u2013310. Springer,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2009}, {"title": "Properties of multiwinner voting rules", "author": ["E. Elkind", "P. Faliszewski", "P. Skowron", "A. Slinko"], "venue": "Proceedings of the 13th International Conference on Autonomous Agents and Multiagent Systems (AAMAS \u201914), pages 53\u201360. IFAAMAS, May", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "Control and bribery in voting", "author": ["P. Faliszewski", "J. Rothe"], "venue": "F. Brandt, V. Conitzer, U. Endriss, J. Lang, and A. D. Procaccia, editors, Handbook of Computational Social Choice, chapter 7. Cambridge University Press,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "How hard is bribery in elections", "author": ["P. Faliszewski", "E. Hemaspaandra", "L.A. Hemaspaandra"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2009}, {"title": "Complexity of manipulation, bribery, and campaign management in Bucklin and fallback voting", "author": ["P. Faliszewski", "Y. Reisch", "J. Rothe", "L. Schend"], "venue": "Proceedings of the 13th International Conference on Autonomous Agents and Multiagent Systems (AAMAS \u201914), pages 1357\u20131358. IFAAMAS,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2014}, {"title": "Parameterized Complexity Theory", "author": ["J. Flum", "M. Grohe"], "venue": "Springer,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2006}, {"title": "Fibonacci heaps and their uses in improved network optimization algorithms", "author": ["M.L. Fredman", "R.E. Tarjan"], "venue": "Journal of the ACM, 34(3):596\u2013615,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1987}, {"title": "Minkowski\u2019s convex body theorem and integer programming", "author": ["R. Kannan"], "venue": "Mathematics of Operations Research, 12(3):415\u2013440,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 1987}, {"title": "Integer programming with a fixed number of variables", "author": ["H.W. Lenstra"], "venue": "Mathematics of Operations Research, 8(4):538\u2013548,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1983}, {"title": "Budgeted social choice: From consensus to personalized decision making", "author": ["T. Lu", "C. Boutilier"], "venue": "Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI \u201911), pages 280\u2013286. AAAI Press,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "Editing graphs to satisfy degree constraints: A parameterized approach", "author": ["L. Mathieson", "S. Szeider"], "venue": "Journal of Computer and System Sciences, 78(1):179\u2013191,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2012}, {"title": "On the complexity of bribery and manipulation in tournaments with uncertain information", "author": ["N. Mattei", "J. Goldsmith", "A. Klapper"], "venue": "Proceedings of the 25th International Florida Artificial Intelligence Research Society Conference (FLAIRS \u201912), pages 549\u2013554. AAAI Press,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2012}, {"title": "Bribery in voting over combinatorial domains is easy", "author": ["N. Mattei", "M. Pini", "F. Rossi", "K. Venable"], "venue": "Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems (AAMAS \u201912), pages 1407\u20131408. IFAAMAS,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2012}, {"title": "The complexity of strategic behavior in multiwinner elections", "author": ["R. Meir", "A. Procaccia", "J. Rosenschein", "A. Zohar"], "venue": "Journal of Artificial Intelligence Research, 33:149\u2013178,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}, {"title": "Fully proportional representation", "author": ["B. Monroe"], "venue": "American Political Science Review, 89(4):925\u2013940,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 1995}, {"title": "Invitation to Fixed-Parameter Algorithms", "author": ["R. Niedermeier"], "venue": "Oxford University Press,", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2006}, {"title": "On the complexity of achieving proportional representation", "author": ["A. Procaccia", "J. Rosenschein", "A. Zohar"], "venue": "Social Choice and Welfare, 30(3):353\u2013362,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2008}, {"title": "Campaign management under approval-driven voting rules", "author": ["I. Schlotter", "P. Faliszewski", "E. Elkind"], "venue": "Proceedings of the 25th AAAI Conference on Artificial Intelligence (AAAI \u201911), pages 726\u2013731. AAAI Press,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2011}, {"title": "Finding a collective set of items: From proportional multirepresentation to group recommendation", "author": ["P. Skowron", "P. Faliszewski", "J. Lang"], "venue": "Proceedings of the 29th AAAI Conference on Artificial Intelligence (AAAI \u201915), pages 2131\u20132137. AAAI Press,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2015}, {"title": "Achieving fully proportional representation: Approximability results", "author": ["P. Skowron", "P. Faliszewski", "A. Slinko"], "venue": "Artificial Intelligence, 222:67\u2013103,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 1, "context": "While the complexity of campaign management is relatively well-studied for single-winner elections, it has not been studied for the multiwinner setting yet (there are, however, studies of manipulation and control for multiwinner elections [2, 29]).", "startOffset": 239, "endOffset": 246}, {"referenceID": 28, "context": "While the complexity of campaign management is relatively well-studied for single-winner elections, it has not been studied for the multiwinner setting yet (there are, however, studies of manipulation and control for multiwinner elections [2, 29]).", "startOffset": 239, "endOffset": 246}, {"referenceID": 24, "context": "group of people short-listed for a job opening, or be a set of items a company offers to its customers (see the papers of Lu and Boutilier [25], Skowron et al.", "startOffset": 139, "endOffset": 143}, {"referenceID": 33, "context": "[34], and Elkind et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17] for a varied description of applications of multiwinner voting).", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "In this case, we may prefer other rules, such as the Chamberlin-Courant family of rules [11], which try to ensure that every voter is represented well by some member of the committee (see the Preliminaries section for an exact definition).", "startOffset": 88, "endOffset": 92}, {"referenceID": 31, "context": "[32] and Lu and Boutilier [25] show NP-hardness).", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[32] and Lu and Boutilier [25] show NP-hardness).", "startOffset": 26, "endOffset": 30}, {"referenceID": 24, "context": "Second, there are good approximation algorithms (due to Lu and Boutilier [25] and Skowron et al.", "startOffset": 73, "endOffset": 77}, {"referenceID": 34, "context": "[35]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "[10] and Elkind et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17], we consider these approximation algorithms as voting rules in their own right (societies may use them in place of the original, hard-to-compute ones).", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15, 16], and since then a number of other researchers studied both SHIFT BRIBERY (e.", "startOffset": 0, "endOffset": 8}, {"referenceID": 15, "context": "[15, 16], and since then a number of other researchers studied both SHIFT BRIBERY (e.", "startOffset": 0, "endOffset": 8}, {"referenceID": 32, "context": "[33] and Bredereck et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "[7, 9]), and related campaign management problems (e.", "startOffset": 0, "endOffset": 6}, {"referenceID": 8, "context": "[7, 9]), and related campaign management problems (e.", "startOffset": 0, "endOffset": 6}, {"referenceID": 12, "context": "Dorn and Schlotter [13], Baumeister et al.", "startOffset": 19, "endOffset": 23}, {"referenceID": 2, "context": "[3], and Faliszewski et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 19, "context": "[20]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[19] or those studied by Mattei et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "[28] and Mattei,", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "Goldsmith, and Klapper [27].", "startOffset": 23, "endOffset": 27}, {"referenceID": 17, "context": "We point the reader to the overview of Faliszewski and Rothe [18] for more details and references.", "startOffset": 61, "endOffset": 65}, {"referenceID": 14, "context": "For the Borda rule, for which it is NP-hard, there are a good polynomial-time approximation algorithm [15] and exact FPT algorithms [7].", "startOffset": 102, "endOffset": 106}, {"referenceID": 6, "context": "For the Borda rule, for which it is NP-hard, there are a good polynomial-time approximation algorithm [15] and exact FPT algorithms [7].", "startOffset": 132, "endOffset": 135}, {"referenceID": 29, "context": "We did not study such multiwinner rules as the STV rule, the Monroe rule [30], or other Approvalbased rules (see, e.", "startOffset": 73, "endOffset": 77}, {"referenceID": 4, "context": ", the works of Brams and Kilgour [5] and Aziz et al.", "startOffset": 33, "endOffset": 36}, {"referenceID": 0, "context": "[1, 2]), in order to compare our results to those for the single-winner setting, while keeping the considered set of rules small.", "startOffset": 0, "endOffset": 6}, {"referenceID": 1, "context": "[1, 2]), in order to compare our results to those for the single-winner setting, while keeping the considered set of rules small.", "startOffset": 0, "endOffset": 6}, {"referenceID": 24, "context": "WINNER DETERMINATION for CC rules is NP-hard [25, 32], but is in FPT when parameterized by the number of voters or candidates [4].", "startOffset": 45, "endOffset": 53}, {"referenceID": 31, "context": "WINNER DETERMINATION for CC rules is NP-hard [25, 32], but is in FPT when parameterized by the number of voters or candidates [4].", "startOffset": 45, "endOffset": 53}, {"referenceID": 3, "context": "WINNER DETERMINATION for CC rules is NP-hard [25, 32], but is in FPT when parameterized by the number of voters or candidates [4].", "startOffset": 126, "endOffset": 129}, {"referenceID": 24, "context": "Greedy-Borda-CC is a (1 \u2212 1 e )-approximation algorithm for the Borda-CC rule, due to Lu and Boutilier [25].", "startOffset": 103, "endOffset": 107}, {"referenceID": 34, "context": "\u2019s [35] polynomial-time approximation scheme for Borda-CC.", "startOffset": 3, "endOffset": 7}, {"referenceID": 0, "context": "There is a hierarchy of classes of hard parameterized problems, FPT \u2286 W[1] \u2286 W[2] \u2286 \u00b7 \u00b7 \u00b7 \u2286 XP.", "startOffset": 71, "endOffset": 74}, {"referenceID": 1, "context": "There is a hierarchy of classes of hard parameterized problems, FPT \u2286 W[1] \u2286 W[2] \u2286 \u00b7 \u00b7 \u00b7 \u2286 XP.", "startOffset": 78, "endOffset": 81}, {"referenceID": 0, "context": "CLIQUE and MULTICOLORED INDEPENDENT SET are both W[1]-complete while SET COVER is W[2]-complete (in all cases, the solutions size h is the parameter).", "startOffset": 50, "endOffset": 53}, {"referenceID": 1, "context": "CLIQUE and MULTICOLORED INDEPENDENT SET are both W[1]-complete while SET COVER is W[2]-complete (in all cases, the solutions size h is the parameter).", "startOffset": 83, "endOffset": 86}, {"referenceID": 11, "context": "[12], Downey and Fellows [14], Flum and Grohe [21], and Niedermeier [31].", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[12], Downey and Fellows [14], Flum and Grohe [21], and Niedermeier [31].", "startOffset": 25, "endOffset": 29}, {"referenceID": 20, "context": "[12], Downey and Fellows [14], Flum and Grohe [21], and Niedermeier [31].", "startOffset": 46, "endOffset": 50}, {"referenceID": 30, "context": "[12], Downey and Fellows [14], Flum and Grohe [21], and Niedermeier [31].", "startOffset": 68, "endOffset": 72}, {"referenceID": 6, "context": "[7] have considered several different families of price functions.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "), FPT-AS, FPT and W[1]-h (Thm.", "startOffset": 20, "endOffset": 23}, {"referenceID": 0, "context": "1), W[1]-h (Thm.", "startOffset": 5, "endOffset": 8}, {"referenceID": 0, "context": "2), and Para-NP-h FPT(n), and W[1]-h (Cor.", "startOffset": 31, "endOffset": 34}, {"referenceID": 1, "context": "2) Greedy-Approval-CC P W[2]-h (Thm.", "startOffset": 25, "endOffset": 28}, {"referenceID": 0, "context": "7) PTAS-CC Greedy-Borda-CC W[1]-h (Cor.", "startOffset": 28, "endOffset": 31}, {"referenceID": 15, "context": "[16], by \u2666 follow from the work of Bredereck et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "[7], by \u2660 follow from the works of Procaccia et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 31, "context": "[32] and Lu and Boutilier [25], by \u2665 follow from the work of Betzler et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[32] and Lu and Boutilier [25], by \u2665 follow from the work of Betzler et al.", "startOffset": 26, "endOffset": 30}, {"referenceID": 3, "context": "[4], and by \u22c6 are folk results.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[7], we consider the most natural parameterizations by the number n of voters, by the number m of candidates, and by the minimum number s of unit shifts in a successful shift action.", "startOffset": 0, "endOffset": 3}, {"referenceID": 23, "context": "This result follows by applying the standard technique of modeling the problem through an integer linear program and invoking Lenstra\u2019s theorem [24].", "startOffset": 144, "endOffset": 148}, {"referenceID": 7, "context": "[8], it is also possible to generalize this result to all-or-nothing price functions.", "startOffset": 0, "endOffset": 3}, {"referenceID": 12, "context": "In order to prove Theorem 1, we introduce an algorithmic scheme similar to that of Dorn and Schlotter [13] for single-winner SWAP BRIBERY.", "startOffset": 102, "endOffset": 106}, {"referenceID": 23, "context": "We will make use of the fact that integer linear programs (ILPs) can be solved in FPT time with respect to the number of (integer) variables (following a famous result by Lenstra [24] which was later improved by Kannan [23] and by Fredman and Tarjan [22]).", "startOffset": 179, "endOffset": 183}, {"referenceID": 22, "context": "We will make use of the fact that integer linear programs (ILPs) can be solved in FPT time with respect to the number of (integer) variables (following a famous result by Lenstra [24] which was later improved by Kannan [23] and by Fredman and Tarjan [22]).", "startOffset": 219, "endOffset": 223}, {"referenceID": 21, "context": "We will make use of the fact that integer linear programs (ILPs) can be solved in FPT time with respect to the number of (integer) variables (following a famous result by Lenstra [24] which was later improved by Kannan [23] and by Fredman and Tarjan [22]).", "startOffset": 250, "endOffset": 254}, {"referenceID": 16, "context": "[17], requires that if a member of a winning committee is shifted forward in some vote, then this candidate still belongs to some (possibly different) winning committee.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "[7] show an FPT algorithm (parameterized by the number of voters) that, given an instance I of SHIFT BRIBERY and a positive value \u03b5, for each possible shift action ~s = (s1, .", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "[17] for the argument regarding Greedy-Borda-CC).", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "[7].", "startOffset": 0, "endOffset": 3}, {"referenceID": 15, "context": "[16], so the same holds for k-Borda.", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "We show that Borda-SHIFT BRIBERY is W[1]-hard for parameterization by the number of voters, resolving a previously open case [7].", "startOffset": 37, "endOffset": 40}, {"referenceID": 6, "context": "We show that Borda-SHIFT BRIBERY is W[1]-hard for parameterization by the number of voters, resolving a previously open case [7].", "startOffset": 125, "endOffset": 128}, {"referenceID": 0, "context": "Parameterized by the number of voters, Borda SHIFT BRIBERY is W[1]-hard (even for unit price functions).", "startOffset": 63, "endOffset": 66}, {"referenceID": 0, "context": "Parameterized by the number of voters, k-Borda-SHIFT BRIBERY is W[1]-hard.", "startOffset": 65, "endOffset": 68}, {"referenceID": 0, "context": "The next result is, perhaps, even more surprising than Theorem 4: It turns out that k-BordaSHIFT BRIBERY is W[1]-hard also for the parameterization by the number of unit shifts, whereas Borda-SHIFT BRIBERY is in FPT.", "startOffset": 109, "endOffset": 112}, {"referenceID": 0, "context": "Parameterized by the number s of unit shifts, k-Borda SHIFT BRIBERY is W[1]-hard.", "startOffset": 72, "endOffset": 75}, {"referenceID": 0, "context": "We provide a parameterized reduction from the W[1]-complete CLIQUE problem in which we are given a graph G with V (G) = {v1, .", "startOffset": 47, "endOffset": 50}, {"referenceID": 0, "context": "We inherit W[1]hardness for Borda-CC and Greedy-Borda-CC from Theorem 4, since both rules coincide with the single-winner Borda rule in case of committee size k = 1.", "startOffset": 12, "endOffset": 15}, {"referenceID": 0, "context": "SHIFT BRIBERY parameterized by the number of voters is W[1]-hard for Borda-CC and for Greedy-Borda-CC even for unit price functions.", "startOffset": 56, "endOffset": 59}, {"referenceID": 0, "context": "Unless W[1] = FPT, Greedy-Borda-CC-SHIFT BRIBERY with weighted votes is not \u03b1-approximable for any constant \u03b1, even in FPT time with respect to the number of voters and even for unit price functions.", "startOffset": 8, "endOffset": 11}, {"referenceID": 0, "context": "We first prove W[1]-hardness of the problem and then argue that this proof implies the claimed inapproximability result.", "startOffset": 16, "endOffset": 19}, {"referenceID": 0, "context": "We give a reduction from the MULTICOLORED CLIQUE problem for the case of regular graphs which is W[1]-complete for the parameter solution size h (e.", "startOffset": 98, "endOffset": 101}, {"referenceID": 1, "context": "4 For Greedy-Approval-CC, PTAS-CC, and Greedy-Borda-CC we obtain W[2]-hardness results and inapproximability results.", "startOffset": 66, "endOffset": 69}, {"referenceID": 1, "context": "Parameterized by the total number s of unit shifts, SHIFT BRIBERY is W[2]-hard even in case of unit prices for Greedy-Borda-CC, Greedy-Approval-CC, and PTAS-CC.", "startOffset": 70, "endOffset": 73}, {"referenceID": 1, "context": "Further, unless W[2] = FPT, in these cases the problem is not \u03b1-approximable for any constant \u03b1.", "startOffset": 17, "endOffset": 20}, {"referenceID": 1, "context": "We reduce from the SET COVER problem which is W[2]-hard parameterized by the set cover size h.", "startOffset": 47, "endOffset": 50}, {"referenceID": 24, "context": "The literature [25, 32] speaks of hardness of computing the score of a winning committee, but one can show that deciding whether a given candidate is in some winning committee is NP-hard as well.", "startOffset": 15, "endOffset": 23}, {"referenceID": 31, "context": "The literature [25, 32] speaks of hardness of computing the score of a winning committee, but one can show that deciding whether a given candidate is in some winning committee is NP-hard as well.", "startOffset": 15, "endOffset": 23}, {"referenceID": 0, "context": "c(Si) \u227b p \u227b b, c(Si) \u227b [1] \u227b b.", "startOffset": 23, "endOffset": 26}, {"referenceID": 1, "context": "This proves W[2]-hardness of SHIFT-BRIBERY for Greedy-Borda-CC.", "startOffset": 13, "endOffset": 16}, {"referenceID": 0, "context": "The situation is even more dramatic for the Chamberlin-Courant family of rules, where in addition to W[1]- and W[2]-hardness results, we also obtain inapproximability results.", "startOffset": 102, "endOffset": 105}, {"referenceID": 1, "context": "The situation is even more dramatic for the Chamberlin-Courant family of rules, where in addition to W[1]- and W[2]-hardness results, we also obtain inapproximability results.", "startOffset": 112, "endOffset": 115}, {"referenceID": 3, "context": "[4] (trying matchings where p is already matched to one part of the voters, and other ones, where p is not matched at all).", "startOffset": 0, "endOffset": 3}], "year": 2016, "abstractText": "We study the (parameterized) complexity of SHIFT BRIBERY for multiwinner voting rules. We focus on the SNTV, Bloc, k-Borda, and Chamberlin-Courant, as well as on approximate variants of the Chamberlin-Courant rule, since the original rule is NP-hard to compute. We show that SHIFT BRIBERY tends to be significantly harder in the multiwinner setting than in the single-winner one by showing settings where SHIFT BRIBERY is easy in the singlewinner cases, but is hard (and hard to approximate) in the multiwinner ones. Moreover, we show that the non-monotonicity of those rules which are based on approximation algorithms for the Chamberlin-Courant rule sometimes affects the complexity of SHIFT BRIBERY.", "creator": "LaTeX with hyperref package"}}}