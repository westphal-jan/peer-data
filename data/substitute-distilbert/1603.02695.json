{"id": "1603.02695", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Mar-2016", "title": "Rank Aggregation for Course Sequence Discovery", "abstract": "in this package, we consider the rank aggregation framework for the discovery of optimal course sequences at national university level. each student provides various partial ranking of the courses taken throughout his or her undergraduate career. we compute pairwise rank comparisons in courses based on the order students typically take them, matching the results with the entire student population, and afterward obtain a proxy for the rank offset between pairs of courses. next extract a global ranking of the courses via several state - of - the art modes for ranking with pairwise noisy information, hierarchy aggregation, rank centrality, and the recent syncrank based on the group synchronization operator. we test this application of rank aggregation on 15 years of student work from the department of mathematics at the university of colorado, los'( ucla ). furthermore, all experiment with the above approach on different subsets of the student population conditioned on final gpa, and highlight several differences in the obtained rankings along uncover hidden pre - requisites in appropriate mathematics curriculum.", "histories": [["v1", "Thu, 3 Mar 2016 17:29:03 GMT  (432kb)", "http://arxiv.org/abs/1603.02695v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["mihai cucuringu", "charlie marshak", "dillon montag", "puck rombach"], "accepted": false, "id": "1603.02695"}, "pdf": {"name": "1603.02695.pdf", "metadata": {"source": "CRF", "title": "Rank Aggregation for Course Sequence Discovery", "authors": ["Mihai Cucuringu", "Charlie Marshak"], "emails": ["mihai@math.ucla.edu", "cmarshak@math.ucla.edu", "dmontag23@gmail.com", "rombach@math.ucla.edu"], "sections": [{"heading": null, "text": "Keywords Temporal rank aggregation, spectral methods, educational data, ranking algorithms."}, {"heading": "1. INTRODUCTION", "text": "College enrollment is at an all-time high at American universities [16], and this generation of college students is choosing to focus on science, technology, engineering, and mathematics (STEM) courses [3]. University faculty and administrators must create systems to effectively and efficiently train this burgeoning population of STEM students. The goal of this paper is to address one aspect of this broad issue through data mining, namely the design of course sequences that can benefit the student population.\nACM ISBN X-XXXXX-XX-X/XX/XX.\nDOI: http://dx.doi.org/00.00000/0000000.0000000\nFor STEM courses, there is often a carefully prescribed sequence of courses to help guide students to the completion of their degree. These prescribed course sequences are designed so that students\u2019 core understanding builds on the requisite knowledge and experience for each class they complete, preparing them for the next course. However, the recommended course sequence may not be strictly enforced due to the changing availability of particular courses and the diverse needs of a large, intelligent student population. As a result, students often choose the sequence in which to pursue their courses based on personal preference. This may be based on what course best meets their individual scheduling needs each quarter, or what classes may be more accessible to enroll in at a large university. Students may choose to take a certain course simply based on convenience or because it works toward meeting major requirements. However, they might not take the courses in a sequence that optimally builds their core competency in a subject area. In this work, we apply rank aggregation to obtain course sequences adhered to by UCLA mathematics students to infer hidden dependencies between mathematics courses and to better understand how different types of students navigate their coursework. By comparing the course sequences of A and C students, we are better able to understand optimal course sequences for the mathematics major. In general, we hope to encourage more applications of rank aggregation to order temporal events and discover patterns in sequences.\nThe remainder of this paper is organized as follows. In Section 2, we review related academic data mining techniques designed for course sequence discovery. In Section 3, we review the technical aspects of the rank aggregation methods that will be used. In Section 4, we apply these methods to analyze sequences of mathematics courses at UCLA. We use student data from the UCLA Department of Mathematics between 2000-2015, and interpret our findings to infer course sequences from these records and latent dependencies between them. We also compare the performance of each rank aggregation method to demonstrate the robustness of this particular framework. In our final Section 5, we review our findings and indicate future directions."}, {"heading": "2. RELATED WORK", "text": "Academic data mining has become a valuable tool for assisting university students in selecting their courses. A popular approach is to adapt eCommerce recommendation systems to the academic space [8, 18, 17]. Here, sequences are\ndetermined incrementally by comparing student\u2019s records to others with similar coursework and grades. In [19], the authors construct an intricate system that describes how students can move through the web of course dependencies. The authors use their model to extract sequences that minimize the expected time to graduation within their system. Our goal in this work, unlike those above, is to learn course sequences by studying the flow of students from course to course. Our approach adapts well-known rank aggregation techniques to extract a complete sequence of all courses based on the partial sequences of courses that students have pursued. In our approach, the extracted course sequence does not provide any indication on how many courses should be taken per quarter nor what courses can be taken simultaneously. However, the extracted sequences can in turn be used as inputs for more personalized recommendation later on. Moreover, these extracted course sequences can be used to understand how different types of students navigate through their major. By comparing high and low performing students, we infer hidden dependencies that might be missed in the probabilistic models.\nRank aggregation has been a powerful tool in web search [6], sport rankings [5, 4], and more recently, grading schemes [14]. However, it has not been used to infer trends in ordering temporal data, and we believe that the data mining of such temporal sequences [21, 13, 20] will benefit from this approach. We now review the state-of-the-art rank aggregation literature, and discuss their applicability to extracting global course sequences that are most consistent with the given data."}, {"heading": "3. METHODS FOR RANK AGGREGATION", "text": "Rank aggregation is the process of obtaining a global ranking from incomplete and noisy pairwise comparisons [6]. Broadly speaking, there are two important steps in such a ranking procedure. First, we translate a pool of inconsistent and incomplete pairwise comparisons into a directed network model, in which links quantify the strength and frequency of these comparisons. Second, we infer global rankings via a variety of spectral methods that consider the weighted adjacency matrix of the network. Such methods are used to rank professional sports teams based on their exhibitions, and in turn, predict the outcomes of elimination tournaments [5, 4]. We will use rankings here not to rank individual players, teams or students, but to determine a global ordering of the courses that is most consistent with the given data. Performing this analysis on students with high versus low GPA has the potential to uncover hidden pre-requisites that could explain and perhaps improve the overall performance of the students with a low final GPA.\nFor this academic application, we view each student as providing a set of pairwise comparisons between courses based on the order they finished their coursework. These comparisons are often incomplete (students usually do not take all available courses) and noisy (obstacles may force students to take classes out of order). We implicitly assume that there is an underlying, optimal course sequence. We extract this course sequence using rank aggregation methods, which we describe in detail in Section 3. A review of many of the methods used here can be found in [5]. We apply six different methods to extract course sequences: PageRank [12], Rank Centrality [11], SerialRank [7], SyncRank [5], SVD-Rank [5], and a Least-Squares based method. We\nfirst describe the network models that we use for all rank aggregation methods."}, {"heading": "3.1 Network Model and Ranking Constructions", "text": "For our academic application of rank aggregation, we wish to extract a global ranking of all courses that is most consistent with the order in which they are taken by students. Here, our comparisons stem from the frequency with which course i was taken before course j. The first step to extract course sequences will be to translate these comparisons into a network model. We present two network models, each quantifying the flow of students from course to course.\nIn the first network model, each node represents a course, and our edges represent the flow of students between two courses. Let k = 1, . . . , ns be our enumeration of students and similarly i, j be courses with i, j = 1, . . . , nc. We first define the variable Ikij as the indicator that student k took course i before course j\nIkij =\n{ 1 if student k took course i before j\n0 otherwise.\nThe count matrix C is defined as\nCij = ns\u2211 k=1 Ikij when i 6= j,\nand Cij = 0 when i = j. We define the nc \u00d7 nc transition matrix P to have entries representing the number of students that have taken course i before j, as a percentage of all students that have taken both course i and j,\nPij = Cij\nCij + Cji .\nIf Cij = Cji = 0, then we let Pij = Pji = 0. By construction, Pij +Pji = 1 when course i and course j are compared at least once. The matrix P defines a directed multigraph in which an edge weight Pij represents the flow of students moving from course i to course j. In Figure 1, we illustrate a portion of the network model on three courses: Discrete Structures, Linear Algebra I, and Real Analysis I. Here, we consider only Applied Mathematics students. We note that of those students that take Real Analysis I and Linear Algebra I in different quarters, very few take Real Analysis first.\nWe now define a second related network model in which we ensure the net flow of students between two courses is 0, which is necessary for some of the ranking methods. We define the skew-symmetric matrix F of size nc \u00d7 nc, with |Fij | \u2208 [0.5, 1], which encodes the frequency with which course i is taken before course j. We define Fij using Pij \u2019s above as\nFij = { Pij if Pij \u2265 0.5 Pij \u2212 1 if Pij < 0.5.\n(1)\nFor example, if 70% of the students (who took both courses i and j) took course i before j, then we set Fij = 0.7 and Fji = \u22120.7.\nIn larger scale applications, the measurement matrices F and P will most likely be sparse, with only a small subset of the possible pairwise comparisons present. Let G(V,E) be a graph, where the node set V represents the set of courses, with |V | = nc. We add an edge between course i and j, that\nis (i, j) \u2208 E whenever Pij 6= 0 (equivalently, Fij 6= 0), and let m = |E| be the number of edges in G."}, {"heading": "3.2 PageRank", "text": "PageRank was designed to \u201cbring order to the web\u201d, ranking sites according to the distribution of links between them [12]. In [4], the authors adapted PageRank to determine NCAA basketball team rankings based on the regular season matchups [4]. This in turn allowed the authors to forecast the outcome in the NCAA tournament based on the rankings they obtained. This adaptation is a form of rank aggregation using pairwise comparisons that are either incomplete (not all teams play each other) or noisy (teams may under or over perform). Using the network determined by P (section 3.1), PageRank defines a stochastic matrix S\u03b1 that describes the motion of a random student who is permitted to teleport to non-adjacent nodes [9]. This stochastic matrix S\u03b1 is given by\nSpr\u03b1 = (1\u2212 \u03b1)D\u22121P + \u03b1\nnc Inc ,\nwhere \u03b1 \u2208 (0, 1), Inc is the nc\u00d7nc identity matrix, and D is the diagonal matrix of out degrees with dii = \u2211 j Pij . The first term (1\u2212\u03b1)D\u22121P means that with probability (1\u2212\u03b1) the random walker travels to an adjacent node in the network. The second term \u03b1\nnc Inc means that with probability \u03b1\nthe random walker moves to any other node in the network. The teleportation in this setting can be interpreted as the need for a student to move randomly in the course sequence to fulfill a requirement.\nFormally, we associate the Markov chain with states qt at time t, and with the transition rule given by\n(qt+1) T = (qt) TSpr\u03b1 .\nThe PageRank vector q\u221e is defined to be the stationary distribution associated to the above Markov chain and given as limt\u2192\u221e qt. We determine the vector q\u221e via power iteration [9]. The ith component of q\u221e denotes the ranking of course i. The smaller the entry at i, the more likely students take this course early in their sequence. From this ordering we extract a global ranking for courses. Using this stationary distribution, we adapt personalized PageRank [9] replacing Inc with 1nc\u2212q\u221e, where 1nc is the vector of length nc of 1s.\nThe intuition is that students teleport to fulfill requirements early in their course sequence before moving on."}, {"heading": "3.3 Rank Centrality", "text": "Rank Centrality was conceived as a way to discover rankings generated by the Bradley-Terry model [11]. This model assumes players i and j have latent real-valued weights wi, wj assigned to them so that\nP(i beats j) = wi wi + wj .\nThe authors used this method to in turn rank NASCAR drivers and Indian cricket teams [11]. Again, for our application, we compare courses i and j, in which \u201cbeat\u201d means course i came before course j in sequence of courses. Let P be the matrix defined in the previous section whose entries Pij denote the number of students that took course i before j, amongst all those students that took i and j in different quarters. Rank Centrality defines a Markov chain on the nc courses with the following stochastic matrix\nSrc = 1\ndmax P +\n( Inc \u2212 1\ndmax D\n) ,\nwhere dmax is the maximum out degree in the network, Inc is the nc\u00d7nc identity matrix, and D is the diagonal matrix of out degrees with dii = \u2211 j Pij . This differs in two important ways from PageRank above. First, there is no teleportation term for Rank Centrality. Second, from the latter term in the sum, the random walker can remain at course i with probablity 1 \u2212 1/dmax \u2211 j Pij . It also means that courses with smaller total out-degree will have an added self-loop of nontrivial weight. This means less-popular courses tend to have higher marginal values in the stationary distribution.\nThe above construction has useful theoretical properties. For one, this stochastic process is reversible. Moreover, if we assume P is a realization of a Bradley-Terry model, the stationary distribution will be proportional to the weight vector wT = (w1, ..., wnc). We compute the stationary distribution q\u221e = lim\u2192\u221e qtS rc using power iteration."}, {"heading": "3.4 SerialRank", "text": "SerialRank [7] adapts the seriation problem proposed in [2] to determine a global ranking of players. In SerialRank, the authors define a similarity function determined by the outcomes two players have with common opponents. As such, they study the similarity graph rather than a Markov chain, as is done in the previous two rank aggregation methods. For our academic application, we interpret links as the likelihood two courses are taken at a similar time.\nTo construct the similarity matrix, we recall the matrix P from the previous sections whose entries Pij that counts the percentage of students taking course i before j. We proceed as in [7]. We construct the comparison matrix Ak for course k to be given component-wise by\n(Ak)ij = 1\u2212 |Pik \u2212 Pjk|\n2\nwhenever both course i and course j have been taken in a sequence with course k. If either course i or course j has not been taken in sequence k, we define (Ak)ij =\n1 2 . In other\nwords, if course i and course j have a similar percentage of students that are taking course k afterwards, then i and j must be more similar themselves. The similarity matrix\nSsr is then determined by summing over the comparison matrices\nSsr = nc\u2211 k=1 Ak.\nWe rescale Ssr by subtracting the minimum value of Ssr so that course i and j with the smallest similarity now have similarity of 0. To determine a ranking from Ssr, we form the combinatorial laplacian L and rank the courses using the components of the Fiedler vector [7], where L is given by\nL = D\u2212 Ssr.\nThe justification for using the Fiedler vector is proposed in [2] as a relaxation of an NP-hard problem. Specifically, let us assume that q is a vector with the ith component representing the ranking of the ith course. We can see that the following energy will be minimized for an optimal ranking\nq = arg min q\u2032 \u2211 i,j ssrij(q \u2032 i \u2212 q\u2032j)2.\nObservering that \u2211 i,j s sr ij(q \u2032 i\u2212q\u2032j)2 = (q\u2032)TLq\u2032, the problem can be relaxed into the well-studied eigenvector problem\nq = arg min q\u2032\n(q\u2032)TLq\u2032\nsuch that ||q\u2032||2 = 1 and 1Tncq \u2032 = 0,\nwhere 1nc is the vector of length nc comprised entirely of 1\u2019s. The minimum of the above optimization problem is attained by the eigenvector corresponding to the smallest non-trivial eigenvalue of L. After ordering the nc courses using the components of q, we obtain a global ranking. Theoretical results in [7, 2] give guarantees on the monotonicity of q for particular generative models."}, {"heading": "3.5 SyncRank: Synchronization based ranking", "text": "In [5], one of the authors formulates the problem of ranking with incomplete noisy information as an instance of the group synchronization problem over the special orthogonal group SO(2), which we briefly detail. Determining individual group elements from the measurement of their pairwise ratios is known as the group synchronization problem [15]. The seminal paper of Singer [15] considered the angular synchronization problem over SO(2), where the goal is to recover n unknown ground truth angles \u03b81, . . . , \u03b8n \u2208 [0, 2\u03c0), given m noisy pairwise angle offsets captured in a matrix \u0398 of size n\u00d7 n\n\u0398ij = (\u03b8i \u2212 \u03b8j + Noise) mod 2\u03c0.\nSinger [15] introduced and analyzed spectral and semidefinite programming (SDP) relaxations for this problem (followed by a rounding procedure). The difficulty of the problem is amplified on one hand by the amount of noise in the offset measurements, and on the other hand by the fact that m ( n 2 ) , i.e., only a very small subset of all possible pairwise offsets are measured. The connection between ranking and angular synchronization can be summarized as follows. Denote the true ranking of the nc courses by ri, assuming, without loss of generality, that ri = i, i.e., the rank of the i\nth course is i. Imagine the ranks to lie on a one-dimensional line, with the pairwise rank comparisons given, in the noiseless case, by Rij = ri \u2212 rj .\nNote that this matrix has a similar interpretation to the matrix F defined in (1), in the sense that both are skewsymmetric matrices that capture the outcome of the pairwise comparison between i and j.\nNext, we consider the angular embedding given by mapping the ranks of the courses to the unit circle, say fixing r1 to have a zero angle with the x-axis, and the last player rnc corresponding to an angle equal to \u03c0. We interpret the given pairwise measurements Fij as a proxy for the rank offsets, and map them to \u0398ij \u2208 [0, \u03c0) via the transformation\nRij 7\u2192 \u0398ij := \u03c0Fij . (2)\nIn other words, we imagine the nc courses wrapped around a fraction of the circle, interpret the available rank-offset measurements as angle-offsets in the angular space, and thus arrive at the setup of the angular synchronization problem. We then build the nc \u00d7 nc Hermitian matrix H with Hij = e\n\u0131\u03b8ij , if (i, j) \u2208 E, and Hij = 0 otherwise, with \u0131 = \u221a \u22121. We solve the angular synchronization problem via its spectral relaxation, which considers the top eigenvector v1 of H, and denote the recovered solution by r\u0302i = e \u0131\u03b8\u0302i =\nv1(i) |v1(i)| , i = 1, 2, . . . , nc. We extract the corresponding set of angles \u03b8\u03021, . . . , \u03b8\u0302nc from r\u03021, . . . , r\u0302nc , which induces the final ranking solution after modding out the best circular permutation. This last step is due to the fact that the estimation of the rotation angles is up to an additive phase, since e\u0131\u03b1v1 is also an eigenvector of H for any \u03b1 \u2208 R."}, {"heading": "3.6 Least Squares", "text": "Another method we consider for recovering the course orderings is one based on the traditional least-squares approach. Denote by m the number of edges in the measurement graph G, m = |E(G)|, which counts the number of available pairwise comparisons, and by B the edge-vertex incidence matrix of size m\u00d7 nc, with entries given by\nBij = { 1 if (i, j) \u2208 E(G), and i > j \u22121 if (i, j) \u2208 E(G), and i < j (3)\nWe let w the vector of length m \u00d7 1 which contains the pairwise rank measurements we = Fij , for all edges e = (i, j) \u2208 E(G). We consider the resulting over-determined system of linear equations, and compute the least-squares solution\nminimize x\u2208Rn\n||Bx\u2212w||22. (4)\nHirani et al [10] show that the problem of least-squares ranking on graphs has far-reaching rich connections with various other research areas, including spectral graph theory and multilevel methods for graph Laplacian systems, Hodge decomposition theory and random clique complexes in topology."}, {"heading": "3.7 Ranking via Singular Value Decomposition", "text": "The sixth and final ranking method we consider is the recent SVD-based approach proposed in recent work by one of the authors [5], and based on the traditional Singular Value Decomposition (SVD). Let r be the ranking vector with ri denote the rank of the ith player. The applicability of the SVD-Rank approach stems from the observation that, the noiseless matrix of rank offsets defined as before to be\nRij := ri \u2212 rj is a skew-symmetric matrix of rank 2 and\nR = reT \u2212 erT , (5)\nwhere e denotes the all-ones column vector. For a certain noise model, R can be shown to decompose into a low-rank (rank-2) perturbation of a random skewsymmetric matrix [5]. In practice, we are not given access to the clean matrix R of rank offsets, and use as a proxy the available matrix F given by (1). We consider the top two singular vectors of F, order their entries by size, extract the resulting rankings, and choose between the first and second singular vector based on whichever one yields a better consistency coefficient, which we will define formally in the next section (6). Note that since the singular vectors are obtained up to a global sign, we (again) choose the ordering which is most consistent with the given data, by comparing the resulting consistency coefficients (6)."}, {"heading": "4. COURSE SEQUENCE DISCOVERY", "text": "We now apply the six methods discussed in the previous section to data collected by the UCLA Department of Mathematics between Fall 2000 and Spring 2015. We first compare the output of each method on all of these student records and then demonstrate the applicability of this framework by quantifying the flow of students through an obtained sequence. After assessing each method, we analyze course sequences of particular student populations to highlight a few trends. In particular, by comparing the course sequences of high and low performing students, we infer that there are hidden prerequisites. This means that some courses should follow others, so that students are building on their core competency based on a specific sequence of courses. We now briefly discuss the data itself and the cleaning of it."}, {"heading": "4.1 Cleaning the Data", "text": "The data is comprised of individual student records indicating each student\u2019s quarter by quarter math coursework, the student\u2019s grade in the course, and the major declared each quarter. To apply the rank aggregation methods above, we must construct the matrix P or F defined in Section 3.1. We restrict our attention to a particular major, each major having their very own set of requirements and objectives. At UCLA, the Department of Mathematics has 7 unique majors ranging from Pure Mathematics to Mathematics & Economics to Mathematics of Computation. Since a student can change their major from quarter to quarter, we group students based on the major they declare in their last quarter. We also exclude all community college transfer students as they often exhibit very different trends compared to students that were admitted as Freshman. Moreover, if a student retook a class, we look only at the grade and the quarter the class was last taken. Lastly, once a suitable population of students is selected, we only consider those math classes that at least 10 percent of this population takes. In particular, if we consider only a particular major, we exclude classes that less than 10% of students in this major has taken."}, {"heading": "4.2 Assessing Rank Aggregation", "text": "We assess our rankings quantitatively by using a metric, and qualitatively by examining the output sequences. To the first end, we define an consistency coefficient that roughly\nmeasures both how well-ordered a course sequence is and how well the ranking captures this ordering. Clearly, there is no course sequence that all students follow perfectly, but we do expect certain courses in aggregate to follow a sequence. We assess our rankings measuring the flow of students from course to course when we follow a given sequence. We consider the matrix P defined in (3.1). If two courses i and j are independent and offered with similar frequency, we expect Pij \u2248 .5. However, when course i crucially depends on course j, we expect Pij > .5. Let r be a ranking of the nc courses. Without loss of generality, we assume ri = i. We define the consistency coefficient \u0393(r) as in [5]:\n\u0393(r) = 4 n2 \u2212 n \u2211 i<j (Pij \u2212 .5). (6)\nThe coefficient \u0393(r) is normalized so that \u0393(r) \u2208 [\u22121, 1]. Note that in the event that all the courses are taken in random order by students, we expect \u0393(r) \u2248 0 for any ranking r. On the other hand, if \u0393(r) is close to 1 for some ranking, we infer that r was suitable for discovering an underlying course sequence that many students followed. In other words, the closer \u0393(r) is to 1, the more consistent the given data is with the existence of a global ordering. There are other ways to assess the strength of rankings as in [5] and by no means do we claim \u0393(r) a definitive assessment. Certainly, this metric neither takes into account how many students took i and j, nor does it consider the distance typical between courses i and j. In Table 1, we provide values of \u0393(r) for all six methods and their corresponding rankings r for three different majors across four different performance categories. The majors considered are Applied Mathematics, Applied\nScience and Pure Mathematics. The first two majors are the largest in all of mathematics and we expect there to be the most noise. Within each major, we illustrate three GPA categories. From the table, we see that in general, \u0393(r) is maximal for A range students and minimized when we consider the entire major population. The large value of \u0393(r) for A students may be an artifact of this population being substantially smaller and perhaps more homogeneous in terms of the ordering in which classes were taken. We also note that Rank Centrality performs rather poorly relative to the other methods for Applied Mathematics majors, and offer below a possible explanation for this. Despite this one particular under performance of Rank Centrality, the coefficients for \u0393(r) are all within .015 of each other, an agreement which demonstrates that for the small data set at hand, all the ranking methods perform rather similarly.\nWe can also analyze the sequences obtained by rank aggregation. In Table 2, we compare the output sequences for all six methods on Applied Mathematics majors who have an A-range GPA. All methods were able to correctly order the calculus sequences (31AB, 32AB, 33AB) and are thus removed from the table. Moreover, all methods place Linear Algebra I and Real Analysis I fairly early in the sequence as these are courses required for all majors. All the methods consistently placed Real Analysis I before Real Analysis II and III and similarly for other courses taught in sequences. These basic dependencies were captured by rank aggregation across the board. We did notice that Rank Centrality had the greatest disagreement when compared to the rest of the methods. Rank Centrality placed Applied Algebra and Partial Differential Equations much earlier than the other methods. We suspect the defect in \u0393(r) seen in Table 1 and this particular disagreement with the other methods is due to the relatively low enrollment in these classes relative to those courses considered. Approximately 10% of students in the Applied Mathematics major took Partial Differential Equations and Applied Algebra, which was the minimum for a class to be considered in our course sequence. We suspect Rank Centrality to be affected in certain cases by the popularity of classes. We also display the heat-map corresponding to the matrix of P in Figure 2 to reflect a more granulated view of the flow of students. See Appendix A for a reference of all the course numbers and names that label the axes. Here, we only consider Pure Math students with A-range GPAs. Again, we can see from the same Figure 2 that the Calculus sequence (31A, 31B, 32A, 32B) is taken earliest in the expected sequence. We observe Pij + Pji = 1 when both i and j have been taken by at least one student and are taken in different quarts. There are some pairs of classes for which this is not the case. For instance, we can see from Figure 2 that no single student took Math 61 (Discrete Structures) and Math 133 (Fourier Series) in different quarters. Our assessments above indicate that indeed this approach to course sequence discovery produces reasonable results."}, {"heading": "4.3 Inferring Hidden Prerequisites", "text": "One of the original motivations for this work was to learn optimal course sequences through the math major. Even though our network model is not dependent on performance, we can still condition the students we consider in the network\u2019s construction by their overall GPA. Comparing the extracted sequences of high and low performing students, we\ncan infer hidden prerequisites and optimal course sequences. In Table 3, we do just this for three different majors using SyncRank [5]. We compare the first 11 non-Calculus courses for A-range students and C-range students. For pure mathematics students, we see that A students tend to take Discrete Structures before Linear Algebra I, the latter course being the first upper division proof-based course a math student takes at UCLA. As such, we might infer that Discrete Structures, which covers the basics of functions, sets, and combinatorics to be helpful to Pure Mathematics students entering a proof-based curriculum. Another interesting feature for Pure Mathematics students is that A students tend to take Real Analysis I and Real Analysis II fairly close to each other while C students do not. The Real Analysis coursework is known to be a conceptually challenging university course, both at UCLA and elsewhere. More statistical analysis is needed to ascertain whether strong performance is correlated to taking these course sequences in close succession, but rank aggregation allows us to quickly identify such trends.\nFor Applied Mathematics students, we see that Probability I is frequently taken after Real Analysis I for A students, but not for C students. As such, we infer that Real Analysis I is a prerequisite for Probability I when considering such students. Contrary to this ordering, Applied Science students take Probability I before Real Analysis I whether they are A or C students. One possible explanation for the differences between these applied majors is that many Applied Science students are pre-actuarial and are very familiar with the material in Probability I. As such, the ordering of Probability I and Real Analysis I is not as pertinent for Applied Science students.\nAssuming A students navigate through the major best, we can also use rank aggregations method to study differences\nTable 2: First 11 courses for A students in 5 different majors using SerialRank.\nApplied Mathematics Pure Mathematics\nApplied Sciences\nMathematics & Economics Mathematics for Computation\nns = 140 ns = 86 ns = 75 ns = 101 ns = 20\nLin. Algebra I Discr. Struct. Lin. Algebra I Lin. Algebra I Lin. Algebra I\nDiscr. Struct. Lin. Algebra I Probability I Discr. Struct. Probability I\nReal Analysis I Real Analysis I Discr. Struct. Probability I Real Analysis I\nProbability I Lin. Algebra II Act. Math Real Analysis I Discr. Struct.\nNonLin. Systems Real Analysis II Probability II Applied Algebra Probability II\nNum. Analysis I Algebra I Real Analysis I Optimization Act. Math\nGraph Theory Ord. Diff. Eqn.\u2019s Num. Analysis I Probability II Math Modeling\nComplex Analysis Complex Analysis Act. Models II Num. Analysis I Math Econ.\nReal Analysis II Probability I Graph Theory Real Analysis II Act. Models II\nMath Modeling Algebra II Optimization Game Theory Num. Analysis I\nAlgebra I Graph Theory Act. Models II Math Econ. Loss Models I\nin major course sequences as in Table 4. Here, we apply SerialRank to 6 different math majors, again only considering A-range students. We see that the Applied math disciplines (Applied Science, Mathematics & Economics, Mathematics for Computation, and Applied Mathematics) all take Probability I early, while Pure Mathematics students generally do not. We also noticed that Applied Science and Mathematics for Computation students take at least one pre-actuarial course, while other majors do not. Of course, these findings do not indicate the correlation of these course sequences with performance, but this methodology quickly illuminates possible trends."}, {"heading": "5. CONCLUSIONS AND FUTURE WORK", "text": "In this paper, we demonstrated that with an appropriate network model, rank aggregation techniques can extract course sequences and infer latent course dependencies. Our findings captured easily verifiable dependencies such as the completion of lower division calculus courses, and then proceeding to Linear Algebra I and Real Analysis I, two gateway classes central to the math curriculum across all majors. We were able to inspect the differences between the various math majors at UCLA and the differences between A, B, and C students within these majors. We applied six different methods of rank aggregation: PageRank, Rank Centrality, SerialRank, SyncRank, Least Squares, and SVD ranking. We then compared these methods using an consistency coefficient \u0393(r) determined by rankings defined in Eq. (6). We concluded that the output of all the ranking methods considered were in rather close agreement except for Rank Centrality, for which the ranking of a course was affected by low enrollment. Lastly, we were able to infer that there are some hidden prerequisites of courses that emerge based on the trends observed in high and low performing students.\nRank aggregation has typically been used to rank sports teams, athletes, or other competitive endeavors. The application in our present work adapts this methodology for temporal orderings of university course data. The crucial ingredient was an appropriate network model that captured how students navigate through courses, which rendered the problem suitable for existing state-of-the-art algorithms for ranking with incomplete and inconsistent pairwise measurements."}, {"heading": "6. ACKNOWLEDGEMENTS", "text": "This work was supported by NSF grant DMS-1045536, UC Lab Fees Research Grant 12-LR-236660, ARO MURI grant W911NF-11-1-0332, AFOSR MURI grant FA9550-101-0569,NSF grant DMS-1417674, and ONR grant N-00014121-0838. We were grateful to Andrea Bertozzi and Dimitri Shlyakhtenko for accruing this academic data for research and their careful oversight throughout the project. Many of the data mining experiments were performed during the 2015 UCLA summer Applied Mathematics Research Experience for Undergraduates (REU). As such, we would like to acknowledge the invaluable conversations with Juan Carlos Apitz, Jessica Tran, Ritvik Kharkar, and Milicia HadziTanovic, with whom we worked extensively on pre-processing the data and understanding student trends. Finally, we would also like to thank Fajwel Fogel for helpful discussions regarding SerialRank."}, {"heading": "7. REFERENCES", "text": "[1] UCLA General Catalog, Feb 2016.\n[2] J. E. Atkins, E. G. Boman, and B. Hendrickson. A spectral algorithm for seriation and the consecutive ones problem. SIAM Journal on Computing, 28(1):297\u2013310, 1998.\n[3] R. M. Bowen. Science and engineering indicators 2012. Online, Arlington VA: National Science Foundation, 2012.\n[4] T. Callaghan, P. J. Mucha, and M. A. Porter. Random walker ranking for NCAA division IA football. American Mathematical Monthly, 114(9):761\u2013777, 2007.\n[5] M. Cucuringu. Sync-rank: Robust ranking, constrained ranking and rank aggregation via eigenvector and semidefinite programming synchronization. arXiv preprint arXiv:1504.01070, 2015.\n[6] C. Dwork, R. Kumar, M. Naor, and D. Sivakumar. Rank aggregation methods for the web. In Proceedings of the 10th International Conference on World Wide Web, pages 613\u2013622. ACM, 2001.\n[7] F. Fogel, A. d\u2019Aspremont, and M. Vojnovic. Serialrank: Spectral ranking using seriation. In Advances in Neural Information Processing Systems, pages 900\u2013908, 2014.\n[8] K. I. Ghauth and N. A. Abdullah. Learning materials recommendation using good learners? ratings and content-based filtering. Educational Technology Research and Development, 58(6):711\u2013727, 2010.\n[9] D. F. Gleich. Pagerank beyond the web. SIAM Review, 57(3):321\u2013363, 2015.\n[10] A. N. Hirani, K. Kalyanaraman, and S. Watts. Least squares ranking on graphs. arXiv preprint arXiv:1011.1716, 2010.\n[11] S. Negahban, S. Oh, and D. Shah. Rank centrality: Ranking from pair-wise comparisons. arXiv preprint arXiv:1209.1688, 2012.\n[12] L. Page, S. Brin, R. Motwani, and T. Winograd. The pagerank citation ranking: bringing order to the web. 1999.\n[13] J. Pei, J. Han, and W. Wang. Mining sequential patterns with constraints in large databases. In Proceedings of the 11th International Conference on Information and Knowledge Management, pages 18\u201325. ACM, 2002.\n[14] K. Raman and T. Joachims. Methods for ordinal peer grading. In Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 1037\u20131046. ACM, 2014.\n[15] A. Singer. Angular synchronization by eigenvectors and semidefinite programming. Appl. Comput. Harmon. Anal., 30(1):20\u201336, 2011.\n[16] T. D. Snyder and S. A. Dillow. Digest of education statistics, 2012. National Center for Education Statistics, 2013.\n[17] N. Thai-Nghe, L. Drumond, A. Krohn-Grimberghe, and L. Schmidt-Thieme. Recommender system for predicting student performance. Procedia Computer Science, 1(2):2811\u20132819, 2010.\n[18] D. Wen-Shung Tai, H.-J. Wu, and P.-H. Li. Effective e-learning recommendation system based on\nself-organizing maps and association mining. The Electronic Library, 26(3):329\u2013344, 2008.\n[19] J. Xu, T. Xiang, and M. van der Schaar. Personalized course sequence recommendations. arXiv preprint arXiv:1512.09176, 2015.\n[20] J. Yang, W. Wang, and P. S. Yu. Mining asynchronous periodic patterns in time series data. IEEE Transactions on Knowledge and Data Engineering, 15(3):613\u2013628, 2003.\n[21] J. Yang, W. Wang, P. S. Yu, and J. Han. Mining long sequential patterns in a noisy environment. In Proceedings of the 2002 ACM SIGMOD International Conference on Management of Data, pages 406\u2013417. ACM, 2002.\nAPPENDIX"}, {"heading": "A. COURSE NUMBERS", "text": "Table 5 shows the official course numbers and the associated course names used throughout the paper. We shortened the official course names wherever possible, to make the tables more visually appealing. For example, \u201cIntroduction to Fourier Analysis\u201d is simply labelled\u201cFourier Analysis\u201d. Also, A, B, C are substituted with I, II, and III respectively. A short description of each course can be found in the UCLA general catalog [1]. A description of each major and its requirements can also be found at the same link. Lastly, in the general catalog, a list of official prerequisites can be found to validate that the sequences obtained by our rank aggregation methods are comparable with the official ones."}], "references": [{"title": "A spectral algorithm for seriation and the consecutive ones problem", "author": ["J.E. Atkins", "E.G. Boman", "B. Hendrickson"], "venue": "SIAM Journal on Computing, 28(1):297\u2013310", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1998}, {"title": "Science and engineering indicators 2012", "author": ["R.M. Bowen"], "venue": "Online, Arlington VA: National Science Foundation", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Random walker ranking for NCAA division IA football", "author": ["T. Callaghan", "P.J. Mucha", "M.A. Porter"], "venue": "American Mathematical Monthly, 114(9):761\u2013777", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2007}, {"title": "Sync-rank: Robust ranking", "author": ["M. Cucuringu"], "venue": "constrained ranking and rank aggregation via eigenvector and semidefinite programming synchronization. arXiv preprint arXiv:1504.01070", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Rank aggregation methods for the web", "author": ["C. Dwork", "R. Kumar", "M. Naor", "D. Sivakumar"], "venue": "Proceedings of the 10th International Conference on World Wide Web, pages 613\u2013622. ACM", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2001}, {"title": "A", "author": ["F. Fogel"], "venue": "d\u2019Aspremont, and M. Vojnovic. Serialrank: Spectral ranking using seriation. In Advances in Neural Information Processing Systems, pages 900\u2013908", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Learning materials recommendation using good learners? ratings and content-based filtering", "author": ["K.I. Ghauth", "N.A. Abdullah"], "venue": "Educational Technology Research and Development, 58(6):711\u2013727", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "Pagerank beyond the web", "author": ["D.F. Gleich"], "venue": "SIAM Review, 57(3):321\u2013363", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Least squares ranking on graphs", "author": ["A.N. Hirani", "K. Kalyanaraman", "S. Watts"], "venue": "arXiv preprint arXiv:1011.1716", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2010}, {"title": "Rank centrality: Ranking from pair-wise comparisons", "author": ["S. Negahban", "S. Oh", "D. Shah"], "venue": "arXiv preprint arXiv:1209.1688", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2012}, {"title": "The pagerank citation ranking: bringing order to the web", "author": ["L. Page", "S. Brin", "R. Motwani", "T. Winograd"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1999}, {"title": "Mining sequential patterns with constraints in large databases", "author": ["J. Pei", "J. Han", "W. Wang"], "venue": "Proceedings of the 11th International Conference on Information and Knowledge Management, pages 18\u201325. ACM", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2002}, {"title": "Methods for ordinal peer grading", "author": ["K. Raman", "T. Joachims"], "venue": "Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 1037\u20131046. ACM", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2014}, {"title": "Angular synchronization by eigenvectors and semidefinite programming", "author": ["A. Singer"], "venue": "Appl. Comput. Harmon. Anal., 30(1):20\u201336", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "Digest of education statistics", "author": ["T.D. Snyder", "S.A. Dillow"], "venue": "2012. National Center for Education Statistics", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2013}, {"title": "Recommender system for predicting student performance", "author": ["N. Thai-Nghe", "L. Drumond", "A. Krohn-Grimberghe", "L. Schmidt-Thieme"], "venue": "Procedia Computer Science, 1(2):2811\u20132819", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2010}, {"title": "and M", "author": ["J. Xu", "T. Xiang"], "venue": "van der Schaar. Personalized course sequence recommendations. arXiv preprint arXiv:1512.09176", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Mining asynchronous periodic patterns in time series data", "author": ["J. Yang", "W. Wang", "P.S. Yu"], "venue": "IEEE Transactions on Knowledge and Data Engineering, 15(3):613\u2013628", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2003}, {"title": "Mining long sequential patterns in a noisy environment", "author": ["J. Yang", "W. Wang", "P.S. Yu", "J. Han"], "venue": "Proceedings of the 2002 ACM SIGMOD International Conference on Management of Data, pages 406\u2013417. ACM", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2002}], "referenceMentions": [{"referenceID": 14, "context": "College enrollment is at an all-time high at American universities [16], and this generation of college students is choosing to focus on science, technology, engineering, and mathematics (STEM) courses [3].", "startOffset": 67, "endOffset": 71}, {"referenceID": 1, "context": "College enrollment is at an all-time high at American universities [16], and this generation of college students is choosing to focus on science, technology, engineering, and mathematics (STEM) courses [3].", "startOffset": 202, "endOffset": 205}, {"referenceID": 6, "context": "A popular approach is to adapt eCommerce recommendation systems to the academic space [8, 18, 17].", "startOffset": 86, "endOffset": 97}, {"referenceID": 15, "context": "A popular approach is to adapt eCommerce recommendation systems to the academic space [8, 18, 17].", "startOffset": 86, "endOffset": 97}, {"referenceID": 16, "context": "In [19], the authors construct an intricate system that describes how students can move through the web of course dependencies.", "startOffset": 3, "endOffset": 7}, {"referenceID": 4, "context": "Rank aggregation has been a powerful tool in web search [6], sport rankings [5, 4], and more recently, grading schemes [14].", "startOffset": 56, "endOffset": 59}, {"referenceID": 3, "context": "Rank aggregation has been a powerful tool in web search [6], sport rankings [5, 4], and more recently, grading schemes [14].", "startOffset": 76, "endOffset": 82}, {"referenceID": 2, "context": "Rank aggregation has been a powerful tool in web search [6], sport rankings [5, 4], and more recently, grading schemes [14].", "startOffset": 76, "endOffset": 82}, {"referenceID": 12, "context": "Rank aggregation has been a powerful tool in web search [6], sport rankings [5, 4], and more recently, grading schemes [14].", "startOffset": 119, "endOffset": 123}, {"referenceID": 18, "context": "However, it has not been used to infer trends in ordering temporal data, and we believe that the data mining of such temporal sequences [21, 13, 20] will benefit from this approach.", "startOffset": 136, "endOffset": 148}, {"referenceID": 11, "context": "However, it has not been used to infer trends in ordering temporal data, and we believe that the data mining of such temporal sequences [21, 13, 20] will benefit from this approach.", "startOffset": 136, "endOffset": 148}, {"referenceID": 17, "context": "However, it has not been used to infer trends in ordering temporal data, and we believe that the data mining of such temporal sequences [21, 13, 20] will benefit from this approach.", "startOffset": 136, "endOffset": 148}, {"referenceID": 4, "context": "Rank aggregation is the process of obtaining a global ranking from incomplete and noisy pairwise comparisons [6].", "startOffset": 109, "endOffset": 112}, {"referenceID": 3, "context": "Such methods are used to rank professional sports teams based on their exhibitions, and in turn, predict the outcomes of elimination tournaments [5, 4].", "startOffset": 145, "endOffset": 151}, {"referenceID": 2, "context": "Such methods are used to rank professional sports teams based on their exhibitions, and in turn, predict the outcomes of elimination tournaments [5, 4].", "startOffset": 145, "endOffset": 151}, {"referenceID": 3, "context": "A review of many of the methods used here can be found in [5].", "startOffset": 58, "endOffset": 61}, {"referenceID": 10, "context": "We apply six different methods to extract course sequences: PageRank [12], Rank Centrality [11], SerialRank [7], SyncRank [5], SVD-Rank [5], and a Least-Squares based method.", "startOffset": 69, "endOffset": 73}, {"referenceID": 9, "context": "We apply six different methods to extract course sequences: PageRank [12], Rank Centrality [11], SerialRank [7], SyncRank [5], SVD-Rank [5], and a Least-Squares based method.", "startOffset": 91, "endOffset": 95}, {"referenceID": 5, "context": "We apply six different methods to extract course sequences: PageRank [12], Rank Centrality [11], SerialRank [7], SyncRank [5], SVD-Rank [5], and a Least-Squares based method.", "startOffset": 108, "endOffset": 111}, {"referenceID": 3, "context": "We apply six different methods to extract course sequences: PageRank [12], Rank Centrality [11], SerialRank [7], SyncRank [5], SVD-Rank [5], and a Least-Squares based method.", "startOffset": 122, "endOffset": 125}, {"referenceID": 3, "context": "We apply six different methods to extract course sequences: PageRank [12], Rank Centrality [11], SerialRank [7], SyncRank [5], SVD-Rank [5], and a Least-Squares based method.", "startOffset": 136, "endOffset": 139}, {"referenceID": 10, "context": "PageRank was designed to \u201cbring order to the web\u201d, ranking sites according to the distribution of links between them [12].", "startOffset": 117, "endOffset": 121}, {"referenceID": 2, "context": "In [4], the authors adapted PageRank to determine NCAA basketball team rankings based on the regular season matchups [4].", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "In [4], the authors adapted PageRank to determine NCAA basketball team rankings based on the regular season matchups [4].", "startOffset": 117, "endOffset": 120}, {"referenceID": 7, "context": "1), PageRank defines a stochastic matrix S\u03b1 that describes the motion of a random student who is permitted to teleport to non-adjacent nodes [9].", "startOffset": 141, "endOffset": 144}, {"referenceID": 7, "context": "We determine the vector q\u221e via power iteration [9].", "startOffset": 47, "endOffset": 50}, {"referenceID": 7, "context": "Using this stationary distribution, we adapt personalized PageRank [9] replacing Inc with 1nc\u2212q\u221e, where 1nc is the vector of length nc of 1s.", "startOffset": 67, "endOffset": 70}, {"referenceID": 9, "context": "Rank Centrality was conceived as a way to discover rankings generated by the Bradley-Terry model [11].", "startOffset": 97, "endOffset": 101}, {"referenceID": 9, "context": "The authors used this method to in turn rank NASCAR drivers and Indian cricket teams [11].", "startOffset": 85, "endOffset": 89}, {"referenceID": 5, "context": "SerialRank [7] adapts the seriation problem proposed in [2] to determine a global ranking of players.", "startOffset": 11, "endOffset": 14}, {"referenceID": 0, "context": "SerialRank [7] adapts the seriation problem proposed in [2] to determine a global ranking of players.", "startOffset": 56, "endOffset": 59}, {"referenceID": 5, "context": "We proceed as in [7].", "startOffset": 17, "endOffset": 20}, {"referenceID": 5, "context": "To determine a ranking from S, we form the combinatorial laplacian L and rank the courses using the components of the Fiedler vector [7], where L is given by", "startOffset": 133, "endOffset": 136}, {"referenceID": 0, "context": "The justification for using the Fiedler vector is proposed in [2] as a relaxation of an NP-hard problem.", "startOffset": 62, "endOffset": 65}, {"referenceID": 5, "context": "Theoretical results in [7, 2] give guarantees on the monotonicity of q for particular generative models.", "startOffset": 23, "endOffset": 29}, {"referenceID": 0, "context": "Theoretical results in [7, 2] give guarantees on the monotonicity of q for particular generative models.", "startOffset": 23, "endOffset": 29}, {"referenceID": 3, "context": "In [5], one of the authors formulates the problem of ranking with incomplete noisy information as an instance of the group synchronization problem over the special orthogonal group SO(2), which we briefly detail.", "startOffset": 3, "endOffset": 6}, {"referenceID": 13, "context": "Determining individual group elements from the measurement of their pairwise ratios is known as the group synchronization problem [15].", "startOffset": 130, "endOffset": 134}, {"referenceID": 13, "context": "The seminal paper of Singer [15] considered the angular synchronization problem over SO(2), where the goal is to recover n unknown ground truth angles \u03b81, .", "startOffset": 28, "endOffset": 32}, {"referenceID": 13, "context": "Singer [15] introduced and analyzed spectral and semidefinite programming (SDP) relaxations for this problem (followed by a rounding procedure).", "startOffset": 7, "endOffset": 11}, {"referenceID": 8, "context": "Hirani et al [10] show that the problem of least-squares ranking on graphs has far-reaching rich connections with various other research areas, including spectral graph theory and multilevel methods for graph Laplacian systems, Hodge decomposition theory and random clique complexes in topology.", "startOffset": 13, "endOffset": 17}, {"referenceID": 3, "context": "The sixth and final ranking method we consider is the recent SVD-based approach proposed in recent work by one of the authors [5], and based on the traditional Singular Value Decomposition (SVD).", "startOffset": 126, "endOffset": 129}, {"referenceID": 3, "context": "For a certain noise model, R can be shown to decompose into a low-rank (rank-2) perturbation of a random skewsymmetric matrix [5].", "startOffset": 126, "endOffset": 129}, {"referenceID": 3, "context": "We define the consistency coefficient \u0393(r) as in [5]:", "startOffset": 49, "endOffset": 52}, {"referenceID": 3, "context": "There are other ways to assess the strength of rankings as in [5] and by no means do we claim \u0393(r) a definitive assessment.", "startOffset": 62, "endOffset": 65}, {"referenceID": 3, "context": "In Table 3, we do just this for three different majors using SyncRank [5].", "startOffset": 70, "endOffset": 73}], "year": 2016, "abstractText": "In this work, we adapt the rank aggregation framework for the discovery of optimal course sequences at the university level. Each student provides a partial ranking of the courses taken throughout his or her undergraduate career. We compute pairwise rank comparisons between courses based on the order students typically take them, aggregate the results over the entire student population, and then obtain a proxy for the rank offset between pairs of courses. We extract a global ranking of the courses via several state-of-the art algorithms for ranking with pairwise noisy information, including SerialRank, Rank Centrality, and the recent SyncRank based on the group synchronization problem. We test this application of rank aggregation on 15 years of student data from the Department of Mathematics at the University of California, Los Angeles (UCLA). Furthermore, we experiment with the above approach on different subsets of the student population conditioned on final GPA, and highlight several differences in the obtained rankings that uncover hidden pre-requisites in the Mathematics curriculum.", "creator": "LaTeX with hyperref package"}}}