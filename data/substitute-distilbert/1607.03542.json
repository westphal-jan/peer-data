{"id": "1607.03542", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Jul-2016", "title": "Open-Vocabulary Semantic Parsing with both Distributional Statistics and Formal Knowledge", "abstract": "semantic parsers define language onto executable statements behind a fixed schema. this mapping allows models to effectively leverage the information contained in large, formal knowledge representations ( e. g., freebase ) to convey questions, but it is also fundamentally limiting - - - semantic parsers can only abstract language that falls within their manually produced schema. recently proposed methods for open vocabulary semantic parsing overcome previously limitation by learning execution models for existing language. however, all prior approaches to open vocabulary semantic parsing are purely distributional, making no instances of any defined knowledge base. we show beginning to combine the benefits of examples of these approaches by incorporating knowledge base variables into open linguistic semantic parsing models, improving mean average precision on an open - domain natural language query specified by more than 120 %.", "histories": [["v1", "Tue, 12 Jul 2016 23:13:26 GMT  (29kb)", "http://arxiv.org/abs/1607.03542v1", null], ["v2", "Mon, 28 Nov 2016 21:44:30 GMT  (27kb)", "http://arxiv.org/abs/1607.03542v2", "Re-written abstract and intro, other minor changes throughout. This version published at AAAI 2017"]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["matt gardner", "jayant krishnamurthy"], "accepted": true, "id": "1607.03542"}, "pdf": {"name": "1607.03542.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["mattg@allenai.org", "jayantk@allenai.org"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 7.\n03 54\n2v 1\n[ cs\n.C L\n] 1\n2 Ju"}, {"heading": "1 Introduction", "text": "Semantic parsing is the task of mapping a phrase in natural language onto formal statements in some fixed schema, which can then be executed against a database (Zelle and Mooney, 1996; Zettlemoyer and Collins, 2005). For example, the phrase \u201cWho is the president of the United States?\u201d might be mapped onto the formal statement \u03bb(x)./GOVERNMENT/PRESIDENT OF(x, USA), which could then be executed against a knowledge base (KB) such as Freebase (Bollacker et al., 2008) to return BARACK OBAMA. By mapping phrases to executable statements, semantic parsers can leverage\nlarge, curated sources of knowledge to answer questions (Berant et al., 2013).\nThis benefit comes with an inherent limitation, however\u2014semantic parsers can only produce executable statements within their manually-produced schema. There is no query against Freebase that can answer questions such as \u201cWho are the Democratic front-runners in the US election?\u201d, as Freebase does not encode any information about frontrunners. Semantic parsers trained for Freebase fail on these kinds of questions.\nTo overcome this limitation, recent work has proposed methods for open vocabulary semantic parsing, where language is mapped onto semi-formal statements with predicates derived directly from the language itself (Lewis and Steedman, 2013; Krishnamurthy and Mitchell, 2015). For instance, the question above might be mapped to \u03bb(x).president of(x, USA). This query is not executable against any knowledge base, however, and so open vocabulary semantic parsers must learn execution models for the predicates found in the text. They do this with a distributional approach similar to word embedding methods, giving them broad coverage, but lacking access to the large, curated KBs available to traditional semantic parsers.\nPrior work in semantic parsing, then, has either had direct access to the information in a knowledge base, or broad coverage over all of natural language using distributional techniques, but not both.\nIn this work, we show how to combine these two approaches by incorporating KB information into open vocabulary semantic parsing models. Our key\ninsight is that the executable statements produced by traditional semantic parsers can be converted into features that can be added to the learned execution models of open vocabulary semantic parsers. This allows open vocabulary models to use the KB fact /GOVERNMENT/PRESIDENT OF(BARACKOBAMA, USA) when scoring president of(BARACKOBAMA, USA), without requiring the model to map the language onto a single formal statement. Crucially, this also allows the model to use these KB facts even when they only provide partial information about the language being modeled. Knowing that an entity is a politician, e.g., is very helpful information for deciding whether that entity is a front-runner. Our approach, outlined in Figure 1, effectively learns the meaning of a word as a distributional vector plus a weighted combination of Freebase queries, a considerably more expressive representation than both traditional and open vocabulary semantic parsers.\nAdditionally, to allow open vocabulary semantic parsing models to make better use of the KB information, we present improved logical forms com-\npared to those used in prior work, and a simple technique for generating candidate entities from the KB.\nWe demonstrate our approach on the task of answering open-domain fill-in-the-blank natural language queries. By giving open vocabulary semantic parsers direct access to KB information, we improve mean average precision on this task by over 120%."}, {"heading": "2 Open vocabulary semantic parsing", "text": "In this section, we briefly describe current models for open vocabulary semantic parsing, following Krishnamurthy and Mitchel (2015). That work introduced a technique for learning semantic parsers with open predicate vocabularies. Instead of mapping text to Freebase queries, their method parses text to a surface logical form whose predicates are derived directly from the words in the text (see Figure 1). Next, a distribution over denotations for each predicate is learned using a matrix factorization approach similar to that of Riedel et al. (2013). This distribution is concisely represented using a probabilistic database, which also enables efficient probabilistic\nexecution of logical form queries. The matrix factorization has has two sets of parameters: each category or relation has a learned kdimensional embedding \u03b8, and each entity or entity pair has a learned k-dimensional embedding \u03c6. The probability assigned to a category instance c(e) or relation instance r(e1, e2) is given by:\np(c(e)) = \u03c3(\u03b8Tc \u03c6e)\np(r(e1, e2)) = \u03c3(\u03b8 T r \u03c6(e1,e2))\nThe probability of a predicate instance is the sigmoided inner product of the corresponding predicate and entity embeddings. Thus, predicates with nearby embeddings will have similar distributions over the entities in their denotation. The parameters \u03b8 and \u03c6 are learned using a query ranking objective that optimizes them to rank entities observed in the denotation of a logical form above unobserved entities.1 Given the trained predicate and entity parameters, the system is capable of efficiently computing the marginal probability that an entity is an element of a logical form\u2019s denotation using approximate inference algorithms for probabilistic databases.\nThe model presented in this section is purely distributional, with predicate and entity models that draw only on co-occurrence information found in a corpus. In the following sections, we will show how to augment this model with the information contained in large, curated KBs such as Freebase."}, {"heading": "3 Converting Freebase queries to features", "text": "The key insight of this paper is that we can convert the executable queries used by traditional semantic parsers into features that provide KB information to the learned execution models of open vocabulary semantic parsers. Here we describe how this is done.\nTraditional semantic parsers map words onto distributions over executable queries, then select one to actually execute, returning sets of entities or entity pairs from a knowledge base as a result. Instead of executing a single query, we can simply execute all of the possible queries and use an entity\u2019s (or entity pair\u2019s) membership in each set as a feature in our predicate models.\n1Note that this is implicitly factorizing a co-occurrence matrix between predicates and entities (Levy and Goldberg, 2014).\nThere are two problems with this approach: (1) the set of all possible queries is intractably large, so we need a mechanism similar to a semantic parser\u2019s lexicon to select a small set of queries for each word; and (2) executing hundreds or thousands of queries at runtime for each predicate and entity is not computationally tractable. To solve these problems, we use a graph-based technique called subgraph feature extraction (SFE) (Gardner and Mitchell, 2015)."}, {"heading": "3.1 Subgraph feature extraction", "text": "SFE is a technique for generating feature matrices over node pairs in a graph with labeled edges. When the graph corresponds to a formal KB such as Freebase, the features generated by SFE are isomorphic to statements in the KB schema (Gardner, 2015). This means that we can use SFE to generate a feature vector for each entity (and entity pair) which succinctly captures the set of all statements2 in whose denotations the entity (or entity pair) appears. Using this feature vector as part of the semantic parser\u2019s entity models solves problem (2) above, and performing feature selection over these feature vectors for each predicate solves problem (1).\nSome example features extracted by SFE are shown in Figure 2. For entity pairs, these features include the sequence of edges (or paths) connecting the nodes corresponding to the entity pair. For entities, these features include the set of paths connected to the node, optionally including the node at the end of the path. Note the correspondence between these features and Freebase queries: the path \u3008DESIGNED\u2192LOCATED IN\u3009 can be executed as a query against Freebase, returning a set of (architect, location) entity pairs, where the architect designed a structure in the location. (PALLADIO, ITALY) is one such entity pair, so this pair has a feature value of 1 for this query."}, {"heading": "3.2 Feature selection", "text": "The feature vectors produced by SFE contain tens of millions of possible formal statements. Out of these tens of millions of formal statements, only a handful represent relevant Freebase queries for any particular predicate. We therefore select a small number of\n2In a restricted class, which contains horn clauses and a few other things; see Gardner (2015) for more details.\nPALLADIO ITALY\nARCHITECT COUNTRY\nVILLA CAPRA\nNATIONALITY\nT Y P E\nDESIGNED\nT Y P E\nLO CA\nTE D\nIN\nFeatures between PALLADIO and ITALY: \u3008NATIONALITY\u3009 \u3008DESIGNED\u2192LOCATED IN\u3009 Features for PALLADIO: \u3008NATIONALITY\u3009 \u3008NATIONALITY\u3009:ITALY \u3008TYPE\u3009:ARCHITECT \u3008DESIGNED\u2192LOCATED IN\u3009 \u3008DESIGNED\u2192LOCATED IN\u3009:ITALY\nFigure 2: A subset of the Freebase graph, and some example extracted features. The actual Freebase relations and entity identifiers used are modified here to aid readability.\nstatements to consider for each learned predicate in the open vocabulary semantic parser.\nWe select features by first summing the entity and entity pair feature vectors seen with each predicate in the training data. For example, the phrase \u201cItalian architect Andrea Palladio\u201d is considered a positive training example for the instantiated predicates architect(PALLADIO) and architect N/N(ITALY, PALLADIO). We then add the feature vectors for PALLADIO and (ITALY, PALLADIO) to the feature counts for the predicates architect and architect N/N, respectively. This gives a set of counts COUNT(\u03c0), COUNT(f ), and COUNT(\u03c0\u2227 f ), for each predicate \u03c0 and feature f . The features are then ranked by PMI for each predicate by computing COUNT(\u03c0\u2227f)\nCOUNT(\u03c0)COUNT(f) . After removing features with counts below a threshold, we pick the k = 100 features with the highest PMI values for each predicate to use in our model."}, {"heading": "4 Combined predicate models", "text": "Here we present our approach to incorporating knowledge base information into open vocabulary semantic parsers. Having described how we use SFE to generate features that correspond to statements in\na formal schema, adding these features to the models described in Section 2 is straightforward.\nWe saw in Section 2 that open vocabulary semantic parsers learn distributional vectors for each category, relation, entity and entity pair. We augment these vectors with the feature vectors described in Section 3. Each category and relation receives a weight \u03c9 for each selected Freebase query, and each entity and entity pair has an associated feature vector \u03c8. The truth probability of a category instance c(e) or relation instance r(e1, e2) is thus given by:\np(c(e)) = \u03c3(\u03b8Tc \u03c6e + \u03c9 T c \u03c8c(e))\np(r(e1, e2)) = \u03c3(\u03b8 T r \u03c6(e1,e2) + \u03c9 T r \u03c8r(e1, e2))\nIn the above equations, the \u03b8 and \u03c6 terms are learned predicate and entity embeddings, as described in Section 2. The second term in the sum represents our new features and their learned weights. \u03c8c(e) and \u03c8r(e1, e2) are SFE feature vectors for each entity and entity pair; a different set of features is chosen for each predicate c and r, as described in Section 3.2. The terms \u03c9c and \u03c9r represent learned weights for these features.\nIn our model, there are now three sets of parameters to be learned: (1) \u03b8, low-dimensional distributional vectors trained for each predicate; (2) \u03c6, lowdimensional distributional vectors trained for each entity and entity pair; and (3) \u03c9, weights associated with the selected formal SFE features for each predicate. All of these parameters are optimized jointly, using the same method described in Section 2.\nNote here that, as stated in Section 3, each SFE feature corresponds to a query over the formal schema, defining a set of entities (or entity pairs). The associated feature weight measures the likelihood that an entity in this set is also in the denotation of the surface predicate. Our models include many such features for each surface predicate, effectively mapping each surface predicate onto a weighted combination of Freebase queries."}, {"heading": "5 Making full use of KB information", "text": "In addition to improving predicate models, as just described, adding knowledge base information to open vocabulary semantic parsers suggests two other simple improvements: (1) using more specific\nlogical forms, and (2) generating candidate entities from the knowledge base."}, {"heading": "5.1 Logical form generation", "text": "Krishnamurthy and Mitchell (2015), whose work on open vocabulary semantic parsing we are following in this paper, generate logical forms from natural language statements by computing a syntactic CCG parse, then applying a collection of rules to produce logical forms. However, their logical form analyses do not model noun-mediated relations well. For example, given the phrase \u201cItalian architect Andrea Palladio,\u201d their system\u2019s logical form would include the relation N/N(ITALY, PALLADIO). Here, the N/N predicate represents a generic noun modifier relation; however, this relation is too vague for the predicate model to accurately learn its denotation. A similar problem occurs with prepositions and possessives, e.g., it is similarly hard to learn the denotation of the predicate of.\nOur system improves the analysis of nounmediated relations by simply including the noun in the predicate name. In the architect example above, our system produces the relation architect N/N. It does this by concatenating all intervening noun modifiers between two entity mentions and including them in the predicate name; for example, \u201cIllinois attorney general Lisa Madigan\u201d produces the predicate attorney general N/N). We similarly improve the analyses of prepositions and possessives to include the head noun. For example, \u201cBarack Obama, president of the U.S.\u201d produces the predicate instance president of(BARACK OBAMA,U.S.), and \u201cRome, Italy\u2019s capital\u201d produces the predicate \u2019s capital. This process generates more specific predicates that more closely align with the knowledge base facts that we make available to the predicate models."}, {"heading": "5.2 Candidate entity generation", "text": "A key benefit of our predicate models is that they are able to assign scores to entity pairs that were never seen in the training data. Distributional models have no basis for assigning these scores and therefore assume p(r(e1, e2)) = 0 for unseen entity pairs (e1, e2). This assumption limits the recall of these models when it is applied to question answering, as entity pairs will not have been observed for many\ncorrect, but rare entity answers. In contrast, because our models have access to a large knowledge base, the formal component of the model can always give a score to any entity pair in the knowledge base. This benefit allows our model to considerably improve question answering performance on rare entities.\nHowever, this benefit has an associated drawback: given a logical form query, it is computationally and statistically undesirable to consider all Freebase entities as answers. Scoring millions of entities is slow, and furthermore makes it more difficult to identify correct answers (as their relative frequency in the candidate set decreases). Therefore, when answering a query, we compute a set of candidate entities and only score these candidates. Our candidate set consists of all entities seen with the query entities in the training set as well as all entities directly connected to the query entities in Freebase, or connected by a mediator node.3\nUnfortunately, for some entities, such as the United States, the set of connected entities can be intractably large; we therefore limit this expansion to only those entities with fewer than 100 directly connected entities. Our motivation for this is that this candidate entity generation is most useful for rarely seen entities, for which we have few or no related entities seen during training. These entities also tend to have relatively few connected entities in Freebase."}, {"heading": "6 Evaluation", "text": "We evaluate our open-vocabulary semantic parser on a fill-in-the-blank natural language query task. Each test example is a natural language phrase containing at least two Freebase entities, one of which is held out. The system must propose a ranked list of Freebase entities to fill in the blank left by the held out entity, and the predicted entities are then judged manually for correctness. We compare our proposed models, which combine distributional and formal elements, with a purely distributional baseline from prior work. All of the data and code used in these experiments is available at [url withheld for review].\n3Mediators in Freebase are used to capture relations with more than two arguments, such as employment tenure, which has an employer, and employee, a start date, and an end date."}, {"heading": "6.1 Data", "text": "We use the dataset introduced by Krishnamurthy and Mitchell (2015), which consists of the ClueWeb09 web corpus4 along with Google\u2019s FACC entity linking of that corpus to Freebase (Gabrilovich et al., 2013). For training data, 3 million webpages from this corpus were processed with a CCG parser to produce logical forms (Krishnamurthy and Mitchell, 2014). This produced 2.1m predicate instances involving 142k entity pairs and 184k entities. After removing infrequently-seen predicates (seen fewer than 6 times), there were 25k categories and 4.2k relations.5\nWe also used the test set created by Krishnamurthy and Mitchell, which contains 220 queries generated in the same fashion as the training data from a separate section of ClueWeb. However, as they did not release a development set with their data, we used this set as a development set. For a final evaluation, we generated another, similar test set from a different held out section of ClueWeb, in the same fashion as done by Krishnamurthy and Mitchell. This final test set contains 307 queries. We report results on both of these sets below."}, {"heading": "6.2 Models", "text": "We compare three models in our experiments: (1) the distributional model described in Section 2; (2) a formal model (new to this work), where the distributional parameters \u03b8 and \u03c6 in Section 4 are fixed at zero; and (3) the combined model described in Section 4 (also new to this work). Except where noted, all experiments use our modified logical forms (Section 5.1) and our entity proposal mechanism (Section 5.2)."}, {"heading": "6.3 Methodology", "text": "Given a fill-in-the-blank query such as \u201cItalian architect \u201d, each system produces a ranked list of 100 candidate entities. To compare the output of the systems, we follow a pooled evaluation protocol commonly used in relation extraction and information retrieval (West et al., 2014; Riedel et al., 2013).\n4http://www.lemuproject.org/clueweb09.php 5The differences in numbers reported here versus those reported by Krishnamurthy and Mitchell (2015) are due to our improved logical form generation, discussed in Section 5.1.\nWe take the top 30 predictions from each system and manually annotate whether they are correct, and use those annotations to compute the average precision (AP) and reciprocal rank (RR) of each system on the query. Average precision is defined as 1 m \u2211m k=1 Prec(k) \u00d7 Correct(k), where Prec(k) is the precision at rank k, Correct(k) is an indicator function for whether the kth answer is correct, and m is number of returned answers (up to 100 in this evaluation). AP is equivalent to calculating the area under a precision-recall curve. Reciprocal rank is computed by first finding the rank r of the first correct prediction made by a system. Reciprocal rank is then 1\nr , ranging from 1 (if the first prediction is cor-\nrect) to 0 (if there is no correct answer returned). In the tables below we report mean average precision (MAP) and mean reciprocal rank (MRR), averaged over all of the queries in the test set. We also report a weighted version of MAP, where the AP of each query is scaled by the number of annotated correct answers to the query (shown as W-MAP in the tables for space considerations)."}, {"heading": "6.4 Results", "text": "We first show the effect of using the new logical forms introduced in Section 5.1. As can be seen in Table 1, with our improved logical forms, all models are better able to capture the semantics of language. This improvement is most pronounced in the formal models, which have more capacity to get specific features from Freebase with the new logical forms. As our logical forms are able to give all models better performance, the remaining experiments we present all use these logical forms.\nWe next show the improvement gained by using\nthe simple candidate entity generation outlined in Section 5.2. By simply appending the list of connected entities in Freebase to the end of the rankings returned by the distributional model, MAP improves by 40% (see Table 2). The connectedness of an entity pair in Freebase is very informative, especially for rare entities that are not seen together during training.\nTable 3 shows a comparison between the semantic parsing models we have discussed on the development set. As can be seen, the combined model significantly improves performance over prior work, giving a relative gain in weighted MAP of 29%.\nTable 4 shows that these improvements are consistent on the final test set, as well. The performance improvement seen by the combined model is actually larger on this set, with gains on our metrics ranging from 50% to 87%.\nOn both of these datasets, the difference in MAP between the combined model and the distributional model is statistically significant (by a paired permutation test, p < 0.05). The differences between the combined model and the formal model, and between the formal model and the distributional model, are not statistically significant, as each method has certain kinds of queries that it performs well on. Only\nthe combined model is able to consistently outperform the distributional model on all kinds of queries."}, {"heading": "6.5 Discussion", "text": "Our model tends to outperform the distributional model on queries containing predicates with exact or partial correlates in Freebase. For example, our model obtains nearly perfect average precision on the queries \u201cFrench newspaper \u201d and \u201cIsraeli prime minister ,\u201d both of which can be exactly expressed in Freebase. The top features for newspaper(x) all indicate that x has type NEWSPAPER in Freebase, and the top features for newspaper N/N(x, y) indicate that y is a newspaper, and that x is either the circulation area of y or the language of y.\nThe model also performs well on queries with partial Freebase correlates, such as \u201cMicrosoft head honcho \u201d, \u201cThe United States, \u2019s closest ally\u201d, and \u201cPatriots linebacker ,\u201d although with somewhat lower average precision. The high weight features in these cases tend to provide useful hints, even though there is no direct correlate; for example, the model learns that \u201chonchos\u201d are people, and that they tend to be CEOs and film producers.\nThere are also some areas where our model can be improved. First, in some cases, the edge sequence features used by the model are not expressive enough to identify the correct relation in Freebase. An example of this problem is the \u201clinebacker\u201d example above, where the features for linebacker N/N\ncan capture which athletes play for which teams, but not the positions of those athletes. Second, our model can under-perform on predicates with no close mapping to Freebase. An example where this problem occurs is the query \u201c is a NASA mission.\u201d Third, there remains room to further improve the logical forms produced by the semantic parser, specifically for multi-word expressions. One problem occurs with multi-word noun modifiers, e.g., \u201cVice president Al Gore\u201d is mapped to vice(AL GORE) \u2227 president(AL GORE). Another problem is that there is no back-off with multi-word relations. For example, the predicate head honcho N/N was never seen in the training data, so it is replaced with unknown; however, it would be better to replace it with honcho N/N, which was seen in the training data. Finally, although using connected entities in Freebase as additional candidates during inference is helpful, it often over- or under-generates candidates. A more tailored, per-query search process could improve performance."}, {"heading": "7 Related work", "text": "In addition to work on traditional and open vocabulary semantic parsing, which we have already discussed, there are two other classes of work that are related to what we have presented in this paper.\nFirst, the task of learning a probabilistic database in an open vocabulary semantic parser has a strong connection with the task of knowledge base completion. In addition to SFE (Gardner and Mitchell, 2015), our work draws inspiration from work on embedding the entities and relations in a knowledge base (Riedel et al., 2013; Nickel et al., 2011; Bordes et al., 2013; Nickel et al., 2014; Toutanova et al., 2015), as well as work on graph-based methods for reasoning with knowledge bases (Lao and Cohen, 2010; Gardner et al., 2014; Neelakantan et al., 2015). Indeed, our combination of embedding methods with graph-based methods in this paper is suggestive of how one could proceed to combine the two in methods for knowledge base completion. Preliminary work exploring this direction has already been done by Toutanova and Chen (2015).\nSecond, our work is conceptually related to many\nmethods that aim to learn word embeddings that are informed by some kind of external knowledge (Faruqui et al., 2015; Rockta\u0308schel et al., 2015; Schwartz et al., 2015; Yu and Dredze, 2014). A key difference between these approaches and ours is that they use the structured information only to modify distributional representations, while we include the structured information directly in our models, training feature weights jointly with distributional representations."}, {"heading": "8 Conclusion", "text": "Prior work in semantic parsing has either been able to leverage large knowledge bases to answer questions, or used distributional techniques to gain broad coverage over all of natural language. In this paper, we have shown how to gain both of these benefits by converting the queries generated by traditional semantic parsers into features which are then used in open vocabulary semantic parsing models. We presented a technique to do this conversion in a way that is scalable using graph-based feature extraction methods. Our combined model achieved relative gains of over 50% in mean average precision and mean reciprocal rank versus a purely distributional approach. We also introduced a better mapping from surface text to logical forms, and a simple method for using a knowledge base to find candidate entities during inference. Taken together, the methods introduced in this paper improved mean average precision on our task from .163 to .370, a 127% relative improvement over prior work.\nA consequence of this work is that it suggests a new direction for semantic parsing research. Existing semantic parsers map language to a single knowledge base query, an approach that successfully leverages a knowledge base\u2019s predicate instances, but is fundamentally limited by its schema. In contrast, our approach maps language to a weighted combination of queries plus a distributional component; this approach is capable of representing a much broader class of concepts while still using the knowledge base when it is helpful. Furthermore, it is capable of using the knowledge base even when the meaning of the language cannot be exactly represented by a knowledge base predicate, which is a common occurrence. We believe that this kind of\napproach could significantly expand the applicability of semantic parsing techniques to more complex domains where the assumptions of traditional techniques are too limiting."}], "references": [{"title": "Retrofitting word vectors to", "author": ["Noah A. Smith"], "venue": null, "citeRegEx": "Smith.,? \\Q2015\\E", "shortCiteRegEx": "Smith.", "year": 2015}, {"title": "Fast query execution for retrieval models based on path-constrained random walks", "author": ["Lao", "Cohen2010] Ni Lao", "William W Cohen"], "venue": "In Proceedings of the 16th ACM SIGKDD international conference on Knowledge discovery and data mining,", "citeRegEx": "Lao et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Lao et al\\.", "year": 2010}, {"title": "Neural word embedding as implicit matrix factorization", "author": ["Levy", "Goldberg2014] Omer Levy", "Yoav Goldberg"], "venue": null, "citeRegEx": "Levy et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Levy et al\\.", "year": 2014}, {"title": "Combined distributional and logical semantics", "author": ["Lewis", "Steedman2013] Mike Lewis", "Mark Steedman"], "venue": null, "citeRegEx": "Lewis et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Lewis et al\\.", "year": 2013}, {"title": "Compositional vector space models for knowledge base completion", "author": ["Benjamin Roth", "Andrew McCallum"], "venue": "ACL", "citeRegEx": "Neelakantan et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Neelakantan et al\\.", "year": 2015}, {"title": "A three-way model for collective learning on multi-relational data", "author": ["Volker Tresp", "Hans-Peter Kriegel"], "venue": "In Proceedings of the 28th international conference on machine learning", "citeRegEx": "Nickel et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Nickel et al\\.", "year": 2011}, {"title": "Reducing the rank in relational factorization models by including observable patterns", "author": ["Xueyan Jiang", "Volker Tresp"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Nickel et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Nickel et al\\.", "year": 2014}, {"title": "Relation extraction with matrix factorization and universal schemas", "author": ["Limin Yao", "Andrew McCallum", "Benjamin M Marlin"], "venue": "In Proceedings of NAACL-HLT", "citeRegEx": "Riedel et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Riedel et al\\.", "year": 2013}, {"title": "Injecting logical background knowledge into embeddings for relation extraction", "author": ["Sameer Singh", "Sebastian Riedel"], "venue": null, "citeRegEx": "Rockt\u00e4schel et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Rockt\u00e4schel et al\\.", "year": 2015}, {"title": "Symmetric patterns and coordinations: Fast and enhanced representations of verbs and adjectives", "author": ["Roi Reichart", "Ari Rappoport"], "venue": null, "citeRegEx": "Schwartz et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schwartz et al\\.", "year": 2015}, {"title": "Observed versus latent features for knowledge base and text inference", "author": ["Toutanova", "Chen2015] Kristina Toutanova", "Danqi Chen"], "venue": "In ACL workshop on on Continuous Vector Space Models and Their Compositionality", "citeRegEx": "Toutanova et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Toutanova et al\\.", "year": 2015}, {"title": "Representing text for joint embedding of text and knowledge bases", "author": ["Danqi Chen", "Patrick Pantel", "Hoifung Poon", "Pallavi Choudhury", "Michael Gamon"], "venue": null, "citeRegEx": "Toutanova et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Toutanova et al\\.", "year": 2015}, {"title": "Knowledge base completion via search-based question answering", "author": ["West et al.2014] Robert West", "Evgeniy Gabrilovich", "Kevin Murphy", "Shaohua Sun", "Rahul Gupta", "Dekang Lin"], "venue": null, "citeRegEx": "West et al\\.,? \\Q2014\\E", "shortCiteRegEx": "West et al\\.", "year": 2014}, {"title": "Improving lexical embeddings with semantic knowledge", "author": ["Yu", "Dredze2014] Mo Yu", "Mark Dredze"], "venue": null, "citeRegEx": "Yu et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2014}, {"title": "Learning to parse database queries using inductive logic programming", "author": ["Zelle", "Mooney1996] John M. Zelle", "Raymond J. Mooney"], "venue": null, "citeRegEx": "Zelle et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Zelle et al\\.", "year": 1996}, {"title": "Learning to map sentences to logical form: Structured classification with probabilistic categorial grammars", "author": ["Zettlemoyer", "Collins2005] Luke S. Zettlemoyer", "Michael Collins"], "venue": "In UAI", "citeRegEx": "Zettlemoyer et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Zettlemoyer et al\\.", "year": 2005}], "referenceMentions": [{"referenceID": 7, "context": "Next, a distribution over denotations for each predicate is learned using a matrix factorization approach similar to that of Riedel et al. (2013). This distribution is concisely represented using a probabilistic database, which also enables efficient probabilistic", "startOffset": 125, "endOffset": 146}, {"referenceID": 12, "context": "commonly used in relation extraction and information retrieval (West et al., 2014; Riedel et al., 2013).", "startOffset": 63, "endOffset": 103}, {"referenceID": 7, "context": "commonly used in relation extraction and information retrieval (West et al., 2014; Riedel et al., 2013).", "startOffset": 63, "endOffset": 103}, {"referenceID": 7, "context": "In addition to SFE (Gardner and Mitchell, 2015), our work draws inspiration from work on embedding the entities and relations in a knowledge base (Riedel et al., 2013; Nickel et al., 2011; Bordes et al., 2013; Nickel et al., 2014; Toutanova et al., 2015), as well as work on graph-based methods for reasoning with knowledge bases (Lao and Cohen, 2010;", "startOffset": 146, "endOffset": 254}, {"referenceID": 5, "context": "In addition to SFE (Gardner and Mitchell, 2015), our work draws inspiration from work on embedding the entities and relations in a knowledge base (Riedel et al., 2013; Nickel et al., 2011; Bordes et al., 2013; Nickel et al., 2014; Toutanova et al., 2015), as well as work on graph-based methods for reasoning with knowledge bases (Lao and Cohen, 2010;", "startOffset": 146, "endOffset": 254}, {"referenceID": 6, "context": "In addition to SFE (Gardner and Mitchell, 2015), our work draws inspiration from work on embedding the entities and relations in a knowledge base (Riedel et al., 2013; Nickel et al., 2011; Bordes et al., 2013; Nickel et al., 2014; Toutanova et al., 2015), as well as work on graph-based methods for reasoning with knowledge bases (Lao and Cohen, 2010;", "startOffset": 146, "endOffset": 254}, {"referenceID": 10, "context": "In addition to SFE (Gardner and Mitchell, 2015), our work draws inspiration from work on embedding the entities and relations in a knowledge base (Riedel et al., 2013; Nickel et al., 2011; Bordes et al., 2013; Nickel et al., 2014; Toutanova et al., 2015), as well as work on graph-based methods for reasoning with knowledge bases (Lao and Cohen, 2010;", "startOffset": 146, "endOffset": 254}, {"referenceID": 8, "context": "Second, our work is conceptually related to many methods that aim to learn word embeddings that are informed by some kind of external knowledge (Faruqui et al., 2015; Rockt\u00e4schel et al., 2015; Schwartz et al., 2015; Yu and Dredze, 2014).", "startOffset": 144, "endOffset": 236}, {"referenceID": 9, "context": "Second, our work is conceptually related to many methods that aim to learn word embeddings that are informed by some kind of external knowledge (Faruqui et al., 2015; Rockt\u00e4schel et al., 2015; Schwartz et al., 2015; Yu and Dredze, 2014).", "startOffset": 144, "endOffset": 236}], "year": 2017, "abstractText": "Semantic parsers map language onto executable statements in a fixed schema. This mapping allows them to effectively leverage the information contained in large, formal knowledge bases (e.g., Freebase) to answer questions, but it is also fundamentally limiting\u2014semantic parsers can only represent language that falls within their manuallyproduced schema. Recently proposed methods for open vocabulary semantic parsing overcome this limitation by learning execution models for arbitrary language. However, all prior approaches to open vocabulary semantic parsing are purely distributional, making no use of any underlying knowledge base. We show how to combine the benefits of both of these approaches by incorporating knowledge base information into open vocabulary semantic parsing models, improving mean average precision on an open-domain natural language query task by more than 120%.", "creator": "LaTeX with hyperref package"}}}