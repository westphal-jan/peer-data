{"id": "1609.02010", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Sep-2016", "title": "Equilibrium Graphs", "abstract": "in this paper we present an extension of peirce's symbolic graphs to provide a diagrammatic representation of expressions in quantified equilibrium logic ( qel ). using this formalisation, generic knots are resolved by encircled identities ( circles and squares ) and quantified variables are represented as \" identity \" lines. although their expressive power is equivalent to that of words, the new representation can be useful between illustrative or satirical purposes.", "histories": [["v1", "Wed, 7 Sep 2016 15:07:21 GMT  (212kb,D)", "http://arxiv.org/abs/1609.02010v1", "Paper presented at the 9th Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP 2016), New York City, USA, 16 October 2016"]], "COMMENTS": "Paper presented at the 9th Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP 2016), New York City, USA, 16 October 2016", "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["pedro cabalar", "carlos p\\'erez", "gilberto p\\'erez"], "accepted": false, "id": "1609.02010"}, "pdf": {"name": "1609.02010.pdf", "metadata": {"source": "CRF", "title": "Equilibrium Graphs", "authors": ["Pedro Cabalar", "Carlos P\u00e9rez", "Gilberto P\u00e9rez"], "emails": ["cabalar@udc.es", "c.pramil@udc.es", "gperez@udc.es"], "sections": [{"heading": "1 Introduction", "text": "Most efforts in Knowledge Representation (KR) have been traditionally focused on symbolic manipulation and, in particular, on logical formulation. The use of a formal representation is surely convenient for automated reasoning, since computer languages provide nowadays excellent tools for symbolic representation and processing. Unfortunately, something that is simpler for computational treatment is not always necessarily better for human understanding. Educational experiences show that learning and understanding logical notation takes some time and effort to novel students. Even for an experienced student, reading a formula that nests different quantifiers, connectives or parentheses may become a difficult task and lead to errors in formal specification.\nOne alternative to formal languages that is probably closer to human\u2019s intuition is the use of graphical or diagrammatic representations. In fact, diagrammatic KR has also been explored and used in different fields of Artificial Intelligence \u2013 a prominent example is, for instance, Sowa\u2019s conceptual graphs [1, 2]. But the use of diagrams for logical representation is older than KR and AI, and actually comes from the very origins of modern philosophical logic. As commented by Sowa in [3], the use of diagrams in logic was something common before the introduction of the current notation, conceived by Peano1 in 1889 [4]. In fact, Frege\u2019s original formulation of Predicate Calculus already included some diagrammatic component. But it was Charles Sanders Peirce who first introduced2 a\n? This research was partially supported by MINECO project TIN2013-42149-P, Spain. 1 Peano\u2019s quantifiers \u2203,\u2200 correspond to the inverted letters E and A, whereas \u2228 comes\nfrom Latin vel (\u201cor\u201d) and conjunction \u2227 from its inversion. 2 Peirce\u2019s first proposals of existential graphs date back to 1882, even earlier than\nPeano\u2019s publication of the modern symbolic notation.\nar X\niv :1\n60 9.\n02 01\n0v 1\n[ cs\n.A I]\n7 S\nep 2\n01 6\nfull-blown non-symbolic system for first-order logic: existential graphs [5] (EGs). This graphical system allows a complete characterisation of First-Order Logic in diagrammatic terms, without using logical connectives. However, save few exceptions (like their influence in Sowa\u2019s conceptual graphs [3]), the truth is that EGs did not gain the same popularity as the symbolic notation for classical logic, even though they provide an elegant and simple representation that seems very suitable for educational purposes. Perhaps one of the difficulties for their consolidation has to do with their strong dependence on classical logic. Existential graphs take conjunction, negation and existential quantifiers as primitive constructors, building all the rest (disjunction, implication or universal quantification) as derived operations. This approach leaves no room for other non-classical logics such as intuitionistic or intermediate logics, where we may need keeping all these connectives independently.\nIn this paper we study an extension of existential graphs to be used as an alternative diagrammatic notation for Answer Set Programming [6\u20138] (ASP) and, in particular, for its logical formalisation in terms of Equilibrium Logic [9]. Proposed by David Pearce, Equilibrium Logic has allowed the application of the stable model semantics [10], originally defined for the syntax of logic programs, to the case of arbitrary propositional formulas. Moreover, the extension to the first-order case, known as Quantified Equilibrium Logic [11], provides nowadays a general logical notion of stable models for arbitrary theories expressed in the syntax of First-Order Logic. Equilibrium Logic is defined by imposing a model selection criterion on top of a monotonic intermediate logic known as the logic of Here-and-There [12] (HT). In this logic, implication is a primitive operation and, although disjunction can be defined in terms of the former plus conjunction, its representation as a derived operator is rather cumbersome. Something similar happens in Quantified HT [11] where, again, the existential quantifier is definable in terms of the universal one, but it is much more convenient to treat both of them as primitive connectives. In the paper, we extend EGs to allow dealing with all these operators independently by just adding a new graphical primitive (rectangles) to the closed curves and lines already existing in EGs.\nThis short note constitutes a preliminary proposal, providing several illustrative examples of the potential use, mostly for educational or visualisation purposes.\nThe rest of the paper is organised as follows. In the next section, we provide an overview of Existential Graphs, both alpha graphs corresponding to propositional logic, and beta graphs for first-order logic. In Section 3, we summarise the main definitions of Quantified Equilibrium Logic, assuming a static Herbrand domain, which is the most common case in ASP. The main contributions are presented in Sections 4 and 5 that respectively introduce the extensions of alpha and beta graphs for Equilibrium Logic, providing some examples of their use. Finally, Section 6 concludes the paper."}, {"heading": "2 Existential Graphs", "text": "We recall next the essential components of existential graphs. Peirce classified EGs into three types, alpha, beta and gamma, that respectively correspond to Propositional Calculus, First-Order Logic with equality and (a kind of) normal modal logic. We start defining alpha graphs as follows. A diagram in alpha graphs is recursively defined as one of the following:\n\u2013 the main page (when empty, it represents truth) \u2013 atomic propositions \u2013 a region encircled by a closed curve (called cut), which denotes the negation\nof the subdiagram inside the region. An empty cut represents falsity. \u2013 finally, although it is not a drawing in itself, the inclusion of several elements\ninside the same region or cut (including the full page) is implicitly understood as their conjunction\nAs an example, Fig. 1(a) explicitly represents the formula \u00ac(rains\u2227\u00acumbrella\u2227 \u00acwet) which can also be seen as the implications rains \u2227 \u00acumbrella \u2192 wet or rains\u2227\u00acwet\u2192 umbrella or the disjunction \u00acrains\u2228umbrella\u2228wet, since all these representations are equivalent in classical propositional logic. Using conjunction and negation as primitive operators, we can easily represent an implication p\u2192 q as \u00ac(p\u2227\u00acq) (Fig. 1(b)) and a disjunction p\u2228q as \u00ac(\u00acp\u2227\u00acq) (Fig. 1(c)). Another common feature shown in these examples is that areas encircled by an odd number of cuts (negative areas) are sometimes shaded to facilitate the visualisation.\nThe alpha system was accompanied by a set of inference and equivalence (diagram redrawing) rules that was proved to be sound and complete with respect to Propositional Calculus (note that, at the time, Tarskian model-based semantics had not been developed yet). In this preliminary proposal, we will focus on the representation itself, leaving graphical inference in the logic of HT or even in (non-monotonic) Equilibrium Logic for a future study.\nFor representing first-order expressions, Peirce extended alpha graphs to beta graphs by the inclusion of a new type of component in the diagram, lines of identity. A line of identity is an open line that connects one or more atom names. When it is used to connect more than two atom names, the identity\nline may bifurcate as many times as needed, getting the shape of a tree or a spider with several ramifications. The reading for an identity line is an existential quantifier: \u201cthere exists some individual such that . . . \u201d Figure 3 shows several examples. Fig. 2(a) asserts that there is a red car parked at a street: \u2203x\u2203y(car(x) \u2227 red(x) \u2227 parkedAt(x, y) \u2227 street(y)). Fig. 2(b) means that there is some person that loves herself, \u2203x(person(x)\u2227 loves(x, x)). Fig. 2(c) says that every man is mortal, \u00ac\u2203x(man(x)\u2227\u00acmortal(x)) or, if preferred, \u2200x(man(x)\u2192 mortal(x)). Finally, Fig. 2(d) specifies that there is a woman adored by every catholic: \u2203x(woman(x) \u2227 \u2200y(catholic(y)\u2192 adores(y, x))).\ncar red\nparkedAt\nstreet (a)\nperson\nloves (b)\nAs we can see, identity lines introduce a subtle difference in the role of atom names in beta graphs. Atoms represent now n-ary predicates whose arguments correspond to imaginary place holders surrounding the atom name that are used as endpoints of identity lines. In the case of unary predicates, such as man or car, the position of this place holder is irrelevant. However, when the predicate arity is greater than one, the argument location becomes relevant: for instance, in Fig. 3, predicate adores has a left argument that corresponds to the adorer and a right argument corresponding to the adored person.\nAnother important observation is that beta graphs do not provide a specific method for representing constants. For instance, there is no way for expressing that every catholic adores (Virgin) Mary other than using a unary predicate Mary to designate that specific person instead of some abstract woman.\nOne final remark on identity lines is that they can be actually seen as an implicit equality predicate. Some representations even introduce a label \u201cis\u201d for the identity line to emphasize this feature. Following this interpretation, when an identity runs through an empty cut we get a convenient way to represent an\ninequality of the form x 6= y. As an example, the diagram in Figure ?? represents the monotheist sentence \u201cthere is a God and only one God.\u201d"}, {"heading": "3 Quantified Equilibrium Logic", "text": "For the sake of completeness, we recall in this section the basic definitions of Quantified Equilibrium Logic for function-free theories and Herbrand domains, since this is the most frequent situation in ASP. We consider first-order languages L = \u3008D,P \u3009 built over a set of constant symbols, D (the Herbrand domain), and a set of predicate symbols, P . The sets of L-formulas, L-sentences and atomic L-sentences are defined in the usual way. If D is a non-empty set, we denote by At(D,P ) the set of ground atomic sentences of the language \u3008D,P \u3009. By an L-interpretation I over a set D we mean a subset of At(D,P ). A classical Herbrand L-structure can be regarded as a tuple M = \u3008D, I\u3009 where I is an L-interpretation over D.\nA here-and-there L-structure is a tuple M = \u3008D, Ih, It\u3009 where \u3008D, Ih\u3009 and \u3008D, It\u3009 are classical Herbrand L-structures such that Ih \u2286 It. We say that the structure is total when Ih = It. We can think of a here-and-there structure M as similar to a first-order classical model, but having two parts, or components, h and t, that correspond to two different points or \u201cworlds\u201d, \u2018here\u2019 and \u2018there\u2019, in the sense of Kripke semantics for intuitionistic logic, where the worlds are ordered by h \u2264 t.\nWe assume that L contains the constants > and \u22a5 and regard \u00ac\u03d5 as an abbreviation for \u03d5 \u2192 \u22a5. Satisfaction of formulas is defined as follows. Given some world w \u2208 {h, t}:\n\u2013 M, w |= >, M, w 6|= \u22a5 \u2013 M, w |= p iff p \u2208 Iw for any atom p \u2208 At(D,P ) \u2013 M, w |= c = d iff c and d denote the same constant from D \u2013 M, w |= \u03d5 \u2227 \u03c8 iff M, w |= \u03d5 and M, w |= \u03c8. \u2013 M, w |= \u03d5 \u2228 \u03c8 iff M, w |= \u03d5 or M, w |= \u03c8. \u2013 M, t |= \u03d5\u2192 \u03c8 iff M, t 6|= \u03d5 or M, t |= \u03c8. \u2013 M, h |= \u03d5\u2192 \u03c8 iff M, t |= \u03d5\u2192 \u03c8 and M, h 6|= \u03d5 or M, h |= \u03c8. \u2013 M, w |= \u2200x\u03d5(x) iff M, w |= \u03d5(d) for all d \u2208 D.\n\u2013 M, w |= \u2203x\u03d5(x) iff M, w |= \u03d5(d) for some d \u2208 D.\nWe say that M is a model of a sentence \u03d5 iff M, h |= \u03d5. The resulting logic is called Quantified Here-and-There Logic with static domains and decidable equality (QHT, for short).\nDefinition 1 (Equilibrium model). Let \u03d5 be an L-sentence. An equilibrium model of \u03d5 is a total model M = \u3008D, It, It\u3009 of \u03d5 such that there is no model of \u03d5 of the form \u3008D, Ih, It\u3009 where Ih is a proper subset of It.\nWhen \u3008D, It, It\u3009 is an equilibrium model of \u03d5 we say that the classical (Herbrand) interpretation \u3008D, It\u3009 is a stable model of \u03d5."}, {"heading": "4 Equilibrium Alpha Graphs", "text": "Let us begin considering the use of alpha graphs to represent Equilibrium Logic theories (or ASP logic programs). A first difficulty we face is that implication is a primitive operator in HT, and cannot be represented in terms of conjunction and disjunction (see Theorem 4 in [13]). This generates a conflict with the use of material implication in alpha graphs, defined in terms of negation and conjunction. To overcome this problem, we replace the cut component (negation) by a new diagrammatic construction we will simply call conditional. A conditional has the form of a closed curve (or ellipse) and may contain inside a number n \u2265 0 of rectangles we call consequents. Intuitively, when all the elements inside the ellipse (but not in the rectangles) hold then one of the rectangles must hold (that is, we implicitly have a disjunction of consequents). As an example, Fig. 4(a) represents the implication toss\u2192 head\u2228 tails. The case of 0 rectangles corresponds to an implication with \u22a5 (the empty disjunction) as a consequent. In other words, a conditional without consequents is just read as a negation, as happens in Peirce\u2019s alpha diagrams. As an example, Fig. 4(b) represents now the implication rains \u2227 \u00acumbrella \u2192 wet, that is, rains \u2227 (umbrella \u2192 \u22a5) \u2192 wet. It is perhaps worth to compare to Fig. 1(a) where, as we commented before, there was no way to differentiate between a negative condition in the antecedent and a positive condition in the consequent (wet and umbrella played the same role). This reflected the non-directional nature of material implication. Under our new notation, Fig. 4(b) allows now distinguishing the elements in the consequent (wet is inside a rectangle) from those in the antecedent, either negated (umbrella) or not (rains).\nAs we have seen, when the conditional has no consequents, it corresponds to a negation. In an analogous way, when the conditional has an an empty antecedent (it only contains rectangles) it obviously represents a disjunction. Fig. 4(c) represents the disjunction red \u2228 orange \u2228 green for the possible colors of a traffic light.\nA disjunction p \u2228 q in HT can be defined in terms of conjunction and implication, as it is equivalent to the expression\n((p\u2192 q)\u2192 q) \u2227 ((q \u2192 p)\u2192 p)\nwhose diagrammatic representation is shown in Figure 5. However, the only \u201cadvantage\u201d we would gain using this representation (as primitive for disjunction) is that we would not need more than one rectangle in each conditional, while we would clearly lose readability.\nAn interesting construction in ASP is the use of choice rules. The original way to build a choice that causes the non-deterministic addition of an atom p in ASP was using some auxiliary predicate q and building an even negative cycle as the one shown in Figure 6(a). A second possibility that does not require an auxiliary predicate is using the formula p\u2228\u00acp (which is not a tautology in HT) represented in Figure 6(b).\nTo conclude this section, we illustrate a typical example from Non-Monotonic Reasoning. Fig. 7 encodes a propositional program with two rules respectively asserting that a bird normally flies and that a penguin is an abnormal bird."}, {"heading": "5 Equilibrium Beta Graphs", "text": "As happened with implication in the propositional case, the universal quantifier is a primitive operator in QEL and cannot be represented in terms of existen-\ntial quantifiers and the other connectives3. Therefore, introducing identity lines would not suffice to cover the expressive power of QEL if they were always read as existential quantifiers. Fortunately, since we count with a new conditional connective, whose expressiveness is richer than the simple cut, we can use it to cover both existential and universal quantifiers as follows. Any identity line encircled by a conditional and with some portion outside any consequent (rectangle) of that conditional corresponds to a universal quantifier. Figure 8 shows some examples combining conditionals and identity lines. Fig. 8(a) corresponds to a universal quantifier, saying that all men are mortal:\n\u2200x(man(x)\u2192 mortal(x)) (1)\nNote the difference with respect to the version in Fig. 2(c), where we had a cut (negation) instead of the rectangle. This version is still a correct equilibrium beta graph, but its reading corresponds to:\n\u2200x(man(x) \u2227 \u00acmortal(x)\u2192 \u22a5) (2)\nwhich has a quite different meaning from (1): the latter is a rule that allows deriving mortal(x) from any man(x), whereas (2) acts as a constraint, forbidding stable models where some man is not known to be mortal. Another equivalent reading of a constraint like Fig. 2(c) (i.e. a conditional with existential lines but no consequents) is just as a negation of an existential quantifier:\n\u00ac\u2203x(man(x) \u2227 \u00acmortal(x))\n3 It is actually the other way around. Any existentially quantified formula \u2203xP (x) is QHT equivalent to \u2200x\u2200y((P (x) \u2192 P (y)) \u2192 P (y)).\nFig. 8(b) corresponds to an existential quantifier: it contains an identity line which is not encircled by the conditional (it \u201ccomes from outside\u201d). As for Fig. 8(c), it represents a universal quantifier: it is encircled by the conditional and (fully) outside the consequent, representing the formula \u2200x(man(x) \u2192 mortal). However, a case like this (the line does not cross any rectangle) can also be read as an existential quantifier in the antecedent, since the last formula is equivalent to (\u2203x man(x))\u2192 mortal.\nTo conclude this section, we provide an example encoding the well-known Hamiltonian cycle problem: given a graph G, find a cyclic path that visits each node in G exactly once. We assume that the graph G is provided in terms of facts for the binary predicate edge, related to node names. The Hamiltonian path is encoded using a binary predicate in, meaning that the corresponding edge is included in the path, for a given stable model.\nFigure 9 shows a possible diagrammatic representation of this problem. The corresponding formulas, reading all the conditionals from left to right and from up to down would respectively be:\n\u2200x\u2200y ( edge(x, y)\u2192 node(x) \u2227 node(y) ) (3)\n\u2200x\u2200y ( edge(x, y)\u2192 in(x, y) \u2228 \u00acin(x, y) ) (4)\n\u00ac\u2203x\u2203y\u2203z ( in(x, y) \u2227 in(x, z) \u2227 y 6= z ) (5)\n\u00ac\u2203x\u2203y\u2203z ( x 6= y \u2227 in(x, z) \u2227 in(y, z) ) (6)\n\u2200x\u2200y ( in(x, y)\u2192 reach(x, y) ) (7)\n\u2200x\u2200y\u2200z ( reach(x, y) \u2227 in(y, z)\u2192 reach(x, z) ) (8)\n\u00ac\u2203x\u2203y ( node(x) \u2227 node(y) \u2227 \u00acreach(x, y) ) (9)\nAll of them can be easily rewritten as program rules in standard ASP syntax. (3) asserts that the two arguments of predicate edge are nodes. (4) is a nondeterministic choice to include any edge in the stable model or not. (5) and (6)\nare constraints respectively forbidding that two edges in the path with the same origin go to two different targets, and vice versa, that two different origin nodes go to a common target. Formulas (7),(8) define the transitive closure reach of predicate in. Finally, (8) is a constraint forbidding that a node y cannot be reached from another node x.\nFigure 10 shows three diagrams respectively depicting a possible example of input graph (facts for predicate edge) plus the two corresponding stable models that represent the Hamiltonian paths of the input graph.\nGiven an Equilibrium Beta Graph G we define its corresponding Peirce\u2019s Beta Graph G\u2217 as the result of replacing all rectangles in G by ellipses4.\n4 We could alternatively say that G\u2217 is just \u201cPeirce\u2019s reading\u201d of G without need of any transformation, since a rectangle is also a case of closed curve, and Peirce\u2019s original approach would make no real distinction between ellipses and rectangles.\nProposition 1. Let \u03a6(G) denote the first-order formula associated to G under the interpretation in the current paper and \u03a6(G\u2217) the formula associated to G\u2217 under Peirce\u2019s beta graphs interpretation. Then \u03a6(G) and \u03a6(G\u2217) are equivalent in classical First-Order Logic. ut"}, {"heading": "6 Conclusions", "text": "By introducing a minimal variation on Peirce\u2019s existential graphs (the introduction of rectangles), we have presented a diagrammatic representation of Quantified Equilibrium Logic and ASP programs. In fact, the current formulation allows representing any intermediate logic, since it has just allowed defining implication, disjunction and universal quantification as primitive constructions, rather than derived operators in terms of conjunction, negation and existential quantifiers.\nThis note constitutes a preliminary proposal but, obviously, much work is left to do yet. First, it is unclear yet how to provide a fully visual semantic characterisation, especially for beta diagrams. Another desirable feature would be a set of inference and equivalence diagram-rewriting rules that covered QHT in a sound and complete way.\nUnder the ASP perspective, it is interesting to note that not every QEL formula has a direct correspondence to an ASP program: for instance, formulas beginning by existential quantifiers are not ASP representable. It would also be interesting to identify graphical features about the kind of diagrams that have a direct translation into ASP. This also includes the graphical characterisation of safety conditions, required for a suitable grounding. The introduction of complex ASP constructs such as aggregates or preferences, or even the diagrammatic representation for arithmetic expressions constitutes and important difficulty to be solved yet. Finally, regarding implementation, a promising line to explore would be the integration of this graphical notation into a visual tool for ASP like the one in [14]."}], "references": [{"title": "Conceptual graphs for a data base interface", "author": ["J.F. Sowa"], "venue": "IBM Journal of Research and Development 20(4)", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1976}, {"title": "Conceptual graphs", "author": ["J.F. Sowa"], "venue": "In van Harmelen, F., Lifschitz, V., Porter, B.W., eds.: Handbook of Knowledge Representation. Volume 3 of Foundations of Artificial Intelligence. Elsevier", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "From existential graphs to conceptual graphs", "author": ["J.F. Sowa"], "venue": "IJCSSA 1(1)", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "Manuscripts on existential graphs", "author": ["C.S. Peirce"], "venue": "Collected Papers of Charles Sanders Peirce. Volume 4. Harvard University Press, Cambridge, MA", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1906}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. Marek", "Truszczy\u0144ski", "M. In"], "venue": "Springer-Verlag", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1999}, {"title": "Logic Programs with Stable Model Semantics as a Constraint Programming Paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25(3-4)", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1999}, {"title": "Answer set programming at a glance", "author": ["G. Brewka", "T. Eiter", "M. Truszczy\u0144ski"], "venue": "Communications of the ACM 54(12)", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "A New Logical Characterisation of Stable Models and Answer Sets", "author": ["D. Pearce"], "venue": "Proc. of Non-Monotonic Extensions of Logic Programming (NMELP\u201996), Bad Honnef, Germany", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1996}, {"title": "The Stable Model Semantics For Logic Programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proc. of the 5th International Conference on Logic Programming (ICLP\u201988), Seattle, Washington", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1988}, {"title": "Quantified equilibrium logic and foundations for answer set programs", "author": ["D. Pearce", "A. Valverde"], "venue": "Proc. of the 24th Intl. Conf. on Logic Programming, ICLP 2008, (Udine, Italy, December 9-13). Volume 5366 of Lecture Notes in Computer Science. Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2008}, {"title": "Die formalen Regeln der intuitionistischen Logik", "author": ["A. Heyting"], "venue": "Sitzungsberichte der Preussischen Akademie der Wissenschaften. Physikalisch-mathematische Klasse", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1930}, {"title": "A denotational semantics for equilibrium logic", "author": ["F. Aguado", "P. Cabalar", "D. Pearce", "G. P\u00e9rez", "C. Vidal"], "venue": "Theory and Practice of Logic Programming 15(4-5)", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "A visual interface for drawing ASP programs", "author": ["O. Febbraro", "K. Reale", "F. Ricca"], "venue": "In Faber, W., Leone, N., eds.: Proceedings of the 25th Italian Conference on Computational Logic, Rende, Italy, July 7-9, 2010. CEUR Workshop Proceedings.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "In fact, diagrammatic KR has also been explored and used in different fields of Artificial Intelligence \u2013 a prominent example is, for instance, Sowa\u2019s conceptual graphs [1, 2].", "startOffset": 169, "endOffset": 175}, {"referenceID": 1, "context": "In fact, diagrammatic KR has also been explored and used in different fields of Artificial Intelligence \u2013 a prominent example is, for instance, Sowa\u2019s conceptual graphs [1, 2].", "startOffset": 169, "endOffset": 175}, {"referenceID": 2, "context": "As commented by Sowa in [3], the use of diagrams in logic was something common before the introduction of the current notation, conceived by Peano in 1889 [4].", "startOffset": 24, "endOffset": 27}, {"referenceID": 3, "context": "full-blown non-symbolic system for first-order logic: existential graphs [5] (EGs).", "startOffset": 73, "endOffset": 76}, {"referenceID": 2, "context": "However, save few exceptions (like their influence in Sowa\u2019s conceptual graphs [3]), the truth is that EGs did not gain the same popularity as the symbolic notation for classical logic, even though they provide an elegant and simple representation that seems very suitable for educational purposes.", "startOffset": 79, "endOffset": 82}, {"referenceID": 4, "context": "In this paper we study an extension of existential graphs to be used as an alternative diagrammatic notation for Answer Set Programming [6\u20138] (ASP) and, in particular, for its logical formalisation in terms of Equilibrium Logic [9].", "startOffset": 136, "endOffset": 141}, {"referenceID": 5, "context": "In this paper we study an extension of existential graphs to be used as an alternative diagrammatic notation for Answer Set Programming [6\u20138] (ASP) and, in particular, for its logical formalisation in terms of Equilibrium Logic [9].", "startOffset": 136, "endOffset": 141}, {"referenceID": 6, "context": "In this paper we study an extension of existential graphs to be used as an alternative diagrammatic notation for Answer Set Programming [6\u20138] (ASP) and, in particular, for its logical formalisation in terms of Equilibrium Logic [9].", "startOffset": 136, "endOffset": 141}, {"referenceID": 7, "context": "In this paper we study an extension of existential graphs to be used as an alternative diagrammatic notation for Answer Set Programming [6\u20138] (ASP) and, in particular, for its logical formalisation in terms of Equilibrium Logic [9].", "startOffset": 228, "endOffset": 231}, {"referenceID": 8, "context": "Proposed by David Pearce, Equilibrium Logic has allowed the application of the stable model semantics [10], originally defined for the syntax of logic programs, to the case of arbitrary propositional formulas.", "startOffset": 102, "endOffset": 106}, {"referenceID": 9, "context": "Moreover, the extension to the first-order case, known as Quantified Equilibrium Logic [11], provides nowadays a general logical notion of stable models for arbitrary theories expressed in the syntax of First-Order Logic.", "startOffset": 87, "endOffset": 91}, {"referenceID": 10, "context": "Equilibrium Logic is defined by imposing a model selection criterion on top of a monotonic intermediate logic known as the logic of Here-and-There [12] (HT).", "startOffset": 147, "endOffset": 151}, {"referenceID": 9, "context": "Something similar happens in Quantified HT [11] where, again, the existential quantifier is definable in terms of the universal one, but it is much more convenient to treat both of them as primitive connectives.", "startOffset": 43, "endOffset": 47}, {"referenceID": 11, "context": "A first difficulty we face is that implication is a primitive operator in HT, and cannot be represented in terms of conjunction and disjunction (see Theorem 4 in [13]).", "startOffset": 162, "endOffset": 166}, {"referenceID": 12, "context": "Finally, regarding implementation, a promising line to explore would be the integration of this graphical notation into a visual tool for ASP like the one in [14].", "startOffset": 158, "endOffset": 162}], "year": 2016, "abstractText": "In this paper we present an extension of Peirce\u2019s existential graphs to provide a diagrammatic representation of expressions in Quantified Equilibrium Logic (QEL). Using this formalisation, logical connectives are replaced by encircled regions (circles and squares) and quantified variables are represented as \u201cidentity\u201d lines. Although the expressive power is equivalent to that of QEL, the new representation can be useful for illustrative or educational purposes.", "creator": "TeX"}}}