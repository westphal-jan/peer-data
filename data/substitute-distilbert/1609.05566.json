{"id": "1609.05566", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Sep-2016", "title": "Label-Free Supervision of Neural Networks with Physics and Domain Knowledge", "abstract": "in many machine dependent applications, labeled data is scarce and obtaining more labels is imperative. we introduce a new approach to supervising complex networks by specifying combinations that should hold over the output space, rather than direct examples of input - output pairs. these constraints are derived from prior domain knowledge, e. g., from known laws of physics. we demonstrate the effectiveness of this approach on imaginary world and simulated robot vision simulations. we are first to train a convolutional neural network to detect and track objects without any labeled examples. our approach introduces significantly increasing bias problem for labeled training data, but introduces new challenges for encoding prior knowledge outside appropriate loss functions.", "histories": [["v1", "Sun, 18 Sep 2016 23:16:14 GMT  (824kb,D)", "http://arxiv.org/abs/1609.05566v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["russell stewart", "stefano ermon"], "accepted": true, "id": "1609.05566"}, "pdf": {"name": "1609.05566.pdf", "metadata": {"source": "CRF", "title": "Label-Free Supervision of Neural Networks with Physics and Domain Knowledge", "authors": ["Russell Stewart", "Stefano Ermon"], "emails": ["ermon}@cs.stanford.edu"], "sections": [{"heading": "Introduction", "text": "Applications of machine learning are often encumbered by the need for large amounts of labeled training data. Neural networks have made large amounts of labeled data even more crucial to success (Krizhevsky, Sutskever, and Hinton 2012; LeCun, Bengio, and Hinton 2015). Nonetheless, we observe that humans are often able to learn without direct examples, opting instead for high level instructions for how a task should be performed, or what it will look like when completed. In this work, we ask whether a similar principle can be applied to teaching machines; can we supervise networks without individual examples by instead describing only the structure of desired outputs?\nContemporary methods for learning without labels often fall under the category of unsupervised learning. Autoencoders, for example, aim to uncover hidden structure in the data without having access to any label. Such systems succeed in producing highly compressed, yet informative representations of the inputs (Kingma and Welling 2013; Le 2013). However, these representations differ from ours as they are not explicitly constrained to have a particular meaning or semantics.\nIn this paper, we explicitly provide the semantics of the hidden variables we hope to discover, but still train without labels by learning from constraints (see (Shcherbatyi and Andres 2016) for an introduction to this idea). Intuitively, algebraic and logical constraints are used to encode structures\nCopyright c\u00a9 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nand relationships that are known to hold because of prior domain knowledge. The process of providing these necessary constraints may still require large amounts of domain specific engineering.\nNevertheless, by training without direct examples of the values our hidden (output) variables take, we gain several advantages over traditional supervised learning, including 1) a reduction in the amount of work spent labeling, and 2) an increase in generality, as a single set of constraints can be applied to multiple data sets without relabeling. The primary contribution of this work is to demonstrate how constraint learning may be used to supervise neural networks across three practical computer vision tasks. We explore the challenge of simultaneously learning feature representations over raw data and avoiding trivial, low entropy solutions in the constraint space."}, {"heading": "Problem Setup", "text": "In a traditional supervised learning setting, we are given a training set D = {(x1, y1), \u00b7 \u00b7 \u00b7 , (xn, yn)} of n training examples. Each example is a pair (xi, yi) formed by an instance xi \u2208 X and the corresponding output (label) yi \u2208 Y . The goal is to learn a function f : X \u2192 Y mapping inputs to outputs. To quantify performance, a loss function ` : Y \u00d7 Y \u2192 R is provided, and a mapping is found via\nf\u2217 = arg min f\u2208F n\u2211 i=1 `(f(xi), yi) (1)\nwhere the optimization is over a pre-defined class of functions F (hypothesis class). In our case, F will be (convolu-\nar X\niv :1\n60 9.\n05 56\n6v 1\n[ cs\n.A I]\n1 8\nSe p\n20 16\ntional) neural networks parameterized by their weights. The loss could be for example `(f(xi), yi) = 1[f(xi) 6= yi].\nBy restricting the space of possible functions specifying the hypothesis class F , we are leveraging prior knowledge about the specific problem we are trying to solve. Informally, the so-called No Free Lunch Theorems state that every machine learning algorithm must make such assumptions in order to work (Wolpert 2002). Another common way in which a modeler incorporates prior knowledge is by specifying an a-priori preference for certain functions in F , incorporating a regularization term R : F \u2192 R, and solving for f\u2217 = arg minf\u2208F \u2211n i=1 `(f(xi), yi) + R(f). Typically, the regularization term R : F \u2192 R specifies a preference for \u201csimpler\u201d functions (Occam\u2019s razor). Regularization techniques such as dropout (Srivastava et al. 2014) are key to avoid overfitting when training functions with a massive number of parameters.\nIn many ML settings, the input space X is complex (images), while the output space Y is simple (e.g., a binary classification problem where Y = {0, 1}). Here, we are interested in structured prediction problems, where both X and Y are complex. For example, in our first experiment, X corresponds to image sequences (video) and Y to the height of an object as it is moving through the air. The goal is to identify a function f\u2217 that correctly maps frames to the corresponding height of the object. Clearly, the heights in each frame are not independent, and the sequence demonstrates a well-defined (algebraic) structure. In fact, we known from elementary physics that any correct sequence of outputs forms a parabola. In principle, one could incorporate this prior knowledge by considering only valid subsets of sequences Y parabola \u2282 Y , and restricting the hypothesis class F accordingly. This approach, however, would still require labels, and is difficult to combine with established and very successful regularization methods for neural networks.\nIn this paper, we model prior knowledge on the structure of the outputs by providing a weighted constraint function g : X \u00d7 Y \u2192 R, used to penalize \u201cstructures\u201d that are not consistent with our prior knowledge. When Y is a (multidimensional) discrete space (e.g., describing many potential binary attributes of an image) as in our third application, g can be specified compactly using a graphical model approach, as a sum of weighted potential or constraints that only depend on a small subsets of the variables (Richardson and Domingos 2006) (Lafferty, McCallum, and Pereira 2001).\nThe question we explore in this paper is whether this weak form of supervision is sufficient to learn interesting functions. While one clearly needs labels, y, to evaluate f\u2217, labels may not be necessary to discover f\u2217. If prior knowledge informs us that outputs of f\u2217 have other unique properties among functions in F , we may use these properties for training rather than direct examples y. Specifically, we consider an unsupervised approach where the labels yi are not provided to us, and optimize for a necessary property of the output, g instead. That is, we search for\nf\u0302\u2217 = arg min f\u2208F n\u2211 i=1 g(xi, f(xi)) +R(f) (2)\nIf we are fortunate, f \u2208 F optimizing (2) but not (1), will be either nonexistent or too strange to converge to in practice when combined with commonly used hypothesis classes (convolutional layers encoding translation invariance) and regularization terms R. When this is the case, we can use Stochastic Gradient Descent (SGD) to optimize (2) in place of (1), freeing us from the need for labels.\nWhen optimizing (2) is not sufficient to find f\u2217, we will add additional regularization terms to supervise the machine towards correct convergence. For example, as we will see in our person detection experiment, if g is undesirably satisfied by a f \u2261 C constant output, we can add a term to favor outputs with higher entropy. The process of designing the loss g and the regularization termR is a form of supervision, and can require a significant time investment. But unlike hand labeling, it does not increase proportional to the size of the data, |D|, and can be applied to new data sets often without modification."}, {"heading": "Experiments", "text": "The goal of our method is to train a network, f , mapping from inputs to outputs that we care about, without needing direct examples of those outputs. In our first two experiments, we construct a mapping from an image to the location of an object it contains. Learning is made possible by exploiting structure that holds in images over time. In our third experiment, we map an image to two boolean variables describing whether or not the image contains two special objects. Learning exploits the unique causal semantics existing between these objects. Across our experiments, we provide labels only for the purpose of evaluation.\nTracking an object in free fall In our first experiment, we record videos of an object being thrown across the field of view, and aim to learn the object\u2019s height in each frame. Our goal is to obtain a regression network mapping from Rheight\u00d7width\u00d73 \u2192 R, where height and width are the number of vertical and horizontal pixels per frame, and each pixel has 3 color channels. We will train this network as a structured prediction problem operating on a sequence ofN images to produce a sequence ofN heights,( Rheight\u00d7width\u00d73\n)N \u2192 RN , and each piece of data xi will be a vector of images, x. Rather than supervising our network with direct labels, y \u2208 RN , we instead supervise the network to find an object obeying the elementary physics of free falling objects. Because gravity acts equally on all objects, we need not encode the object\u2019s mass or volume.\nAn object acting under gravity will have a fixed acceleration of a = \u22129.8m/s2, and the plot of the object\u2019s height over time will form a parabola:\nyi = y0 + v0(i\u2206t) + a(i\u2206t) 2\nThis equation provides a necessary constraint, which the correct mapping f\u2217 must satisfy. We thus train f by making incremental improvements in the direction of better satisfying this equation.\nGiven any trajectory of N height predictions, f(x), we fit a parabola with fixed curvature to those predictions, and minimize the resulting residual. Formally, we specify a = [a\u2206t2, a(2\u2206t)2, . . . , a(N\u2206t)2] and set\ny\u0302 = a + A(ATA)\u22121AT (f(x)\u2212 a) (3) where\nA =  \u2206t 1 2\u2206t 1 3\u2206t 1\n... ...\nN\u2206t 1  The constraint loss is then defined as\ng(x, f(x)) = g(f(x)) = N\u2211 i=1 |y\u0302i \u2212 f(x)i|\nwhere we note that the vector y\u0302 from (3) is a function of the predictions f(x), rather than ground truth labels. Because g is differentiable almost everywhere, we can optimize equation (2) with SGD. Surprisingly, we find that when combined with existing regularization methods for neural networks, this optimization is sufficient to recover f\u2217 up to an additive constant C (specifying what object height corresponds to 0). Qualitative results from our network applied to fresh images after training are shown in Fig. (2)\nTraining details Our data set is collected on a laptop webcam running at 10 frames per second (\u2206t = 0.1s). We fix the camera position and record 65 diverse trajectories of the object in flight, totalling 602 images. For each trajectory, we\ntrain on randomly selected intervals of N = 5 contiguous frames. Our data will be made public upon publication.\nImages are resized to 56 \u00d7 56 pixels before going into a small, randomly initialized neural network with no pretraining. We use 3 Conv/ReLU/MaxPool blocks followed by 2 Fully Connected/ReLU layers with probability 0.5 dropout and a single regression output. We group trajectories into batches of size 16, for a total of 80 images on each iteration of training. We use the Adam optimizer (Kingma and Ba 2014) in TensorFlow (Abadi et al. 2016) with a learning rate of 0.0001 and train for 4,000 iterations.\nEvaluation For evaluation, we manually labeled the height of our falling objects in pixel space. Note that labeling the true height in meters requires knowing the object\u2019s distance from the camera, so we instead evaluate by measuring the correlation of predicted heights with ground truth pixel measurements. All results are evaluated on test images not seen during training. Note that a uniform random output would have an expected correlation of 12.1%. Our network results in a correlation of 90.1%. For comparison, we also trained a supervised network on the labels to directly predict the height of the object in pixels. This network achieved a correlation of 94.5%, although this task is somewhat easier as it does not require the network to compensate for the object\u2019s distance from the camera.\nThis experiment demonstrates that one can teach a neural network to extract object information from real images by writing down only the equations of physics that the object obeys."}, {"heading": "Tracking the position of a walking man", "text": "In our second experiment, we now seek to extend the detection of free falling objects to other types of motion. We will aim to detect the horizontal position of a person walking across a frame without providing direct labels y \u2208 R. To this end, we exploit structure that holds over time by assuming the person will be walking at a constant velocity over short periods of time. We thus formulate a structured prediction problem f : ( Rheight\u00d7width\u00d73\n)N \u2192 RN , and treat each training instances xi as a vector of images, x, being mapped to a sequence of predictions, y.\nWe work with a previously collected data set where we observed that the constant velocity assumption approximately holds. Given the similarities to our first experiment with free falling objects, we might hope to simply remove the gravity term from equation (3) and retrain. However, in this case, that is not possible, as the constraint provides a necessary, but not sufficient, condition for convergence.\nGiven any sequence of correct outputs, (y1, . . . ,yN ), the modified sequence, (\u03bb\u2217y1+C, . . . , \u03bb\u2217yN +C) (\u03bb,C \u2208 R) will also satisfy the constant velocity constraint. In the worst case, when \u03bb = 0, f \u2261 C, and the network can satisfy the constraint while having no dependence on the image. Empirically, we observe that f \u2261 C is very easy to learn, and if we do not explicitly guard against this trivial solution, the\nnetwork will always converge to it. We encode the desire for a nontrivial output by adding two additional loss terms. First, we reward the network for outputting a greater standard deviation of values across the sequence:\nh1(x) = \u2212std(f(x)) However, this objective introduces a problem by providing infinite reward as \u03bb \u2192 \u221e. We counterbalance this effect by requiring that the output across the image sequence to lie within a fixed range, [0, 10]:\nh2(x) = max(ReLU(f(x)\u2212 10)) + max(ReLU(0\u2212 f(x)))\nThe final loss is thus:\ng(x) = ||(A(ATA)\u22121AT \u2212 I) \u2217 f(x)||1 + \u03b31 \u2217 h1(x) + \u03b32 \u2217 h2(x)\nWe alternatively might have measured the constraint loss in a scale-invariant manner (e.g. by whitening outputs before measuring the inertial loss). This is consistent with the principle that there are multiple options for sufficiency terms to guide convergence.\nTraining Details As shown in Fig (3), our network is indeed able to discover the horizontal position of person walking in front of the camera. Our data set contains 11 trajectories across 6 distinct scenes, totalling 507 images resized to 56 \u00d7 56. We train our network to output linearly consistent positions on 5 strided frames from the first half of each trajectory, and evaluate on the second half. We set the boundary violation penalty, \u03b32 = 0.8, to be greater than the standard deviation bonus, \u03b31 = 0.6, leading the network to find the solution with maximal \u03bb not violating the boundary constraint. We choose exactly the same hyperparameters (dropout ratio, number of iterations, number of hidden units, etc.) on both this experiment and the free fall experiment, demonstrating some degree of robustness to these parameters.\nEvaluation Our test labels are measured in pixels, whereas our predictions are in arbitrary units up to affine transformation. Thus, we find the best affine transformation (\u03b1, \u03b2) mapping our predictions onto pixel space for each trajectory, and measure the correlation. Note that \u03b1 and \u03b2 can differ between scenes, and thus this metric does not demonstrate a complete solution to the object detection problem. Nonetheless, we find that our predictions are 95.4% correlated with the ground truth. Surprisingly, the same network trained with direct supervision struggled more with generalization, and scored a correlation of 80.5% on the test set (99.8% on training). We attribute this decreased performance to overfitting on the small amount of training data available (11 trajectories), and would expect a near perfect correlation for a well trained supervised classifier.\nThis experiment demonstrates the possibility of learning to detect an inertial object without labels. Importantly, it also shows that even when the primary structural constraint is not sufficient to guide learning, we may impose additional terms to encourage a correct, nontrivial solution.\nDetecting objects with causal relationships In the previous experiments, we explored options for incorporating constraints pertaining to dynamics equations in real world phenomena, i.e., prior knowledge derived from elementary physics. Other sources of domain knowledge can in principle be used to provide supervision in the learning process. For example, significant efforts have been devoted in the past few decades to construct large knowledge bases (Lenat 1995; Bollacker et al. 2008). This knowledge is typically encoded using logical and constraint based formalisms. Thus, in this third experiment, we explore the possibilities of learning from logical constraints imposed on single images. More specifically, we ask whether it is possible to learn from causal phenomena.\nWe provide images containing a stochastic collection of up to four characters: Peach, Mario, Yoshi, and Bowser, with each character having small appearance changes across frames due to rotation and reflection. Example images can be seen in Fig. (4). While the existence of objects in each frame is non-deterministic, the generating distribution encodes the underlying phenomenon that Mario will always appear whenever Peach appears. Our aim is to create a pair\nof neural networks f1, f2 for identifying Peach and Mario, respectively. The networks, fk : Rheight\u00d7width\u00d73 \u2192 {0, 1}, map the image to the discrete boolean variables, y1 and y2. Rather than supervising with direct labels, we train the networks by constraining their outputs to have the logical relationship y1 \u21d2 y2. This problem is challenging because the networks must simultaneously learn to recognize the characters and select them according to logical relationships.\nMerely satisfying the constraint y1 \u21d2 y2 is not sufficient to certify learning. For example, the system might falsely report the constant output, y1 \u2261 1, y2 \u2261 1 on every image. Such a solution would satisfy the constraint, but say nothing about the presence of characters in the image.\nTo avoid such trivial solutions, we add three loss terms: h1, h2, and h3. h1 forces rotational independence of the output by applying a random horizontal and vertical reflection \u03c1, to images. This encourages the network to focus on existence of objects, rather than location. h2 and h3 allows us to avoid trivial solutions by encouraging high standard deviation and high entropy outputs, respectively. Given a batch of M = 16 images which we denote x, we define\nh1(x, k) = 1\nM M\u2211 i |Pr[fk(x) = 1]\u2212 Pr[fk(\u03c1(x)) = 1]|\nh2(x, k) = \u2212 std i\u2208[1...M ] (Pr[fk(xi) = 1])\nh3(x, v) = 1\nM M\u2211 i (Pr[f(xi) = v]\u2212 1 3 + ( 1 3 \u2212 \u00b5v))2\n\u00b5v = 1\nM M\u2211 i 1{v = arg max v\u2032\u2208{0,1}2 Pr[f(x) = v\u2032]}\nAfter applying these constraints, one problem remains. The constraints are invariant to logical permutations (e.g. given a correct solution, y\u22171 , y \u2217 2 , the false solution y\u03021 = y \u2217 1 , y\u03022 = (y\u22171 \u2227y\u22172)\u2228 (\u00acy\u22171 \u2227\u00acy\u22172) would satisfy the equations equally well). We address this by forcing each boolean variable to derive it\u2019s value from a single region of the image (each character can be identified from a small region in the image.) The Peach network, f1, runs a series of convolution and pooling layers to reduce the original input image to a 7 \u00d7 7 \u00d7 64 grid. We find the 64-dimensional spatial vector with the greatest mean and use the information contained in it to predict the first binary variable. Examples of channel means for the Mario and Peach networks can be seen in Fig. (4). The Mario network f2 performs the same process. But if the Peach networks claims to have found an object, f2 is prevented from picking any vector within 2 spaces of the location used by the first vector.\nThe final loss function is given by:\ng(x) = 1{f1(x) 6=\u21d2 f2(x)} +\u2211 k\u2208{1,2} \u03b31h1(x, k) + \u03b32h2(x, k) + \u2211 v 6={1,0} \u03b33 \u2217 h3(x, v)\nWe construct both f1 and f2 as neural networks with 3 Conv/ReLU/MaxPool blocks as in our first two experiments. These blocks are followed by 2 Fully Connected/ReLU units, although the first fully connected layer receives input from only one spatial vector as described above.\nEvaluation Our input images, shown in Fig. (4), are 56\u00d7 56 pixels. We set \u03b31 = 0.65, \u03b32 = 0.65, \u03b33 = 0.95, and training converges after 4,000 iterations. On a test set of 128 images, the network learns to map each image to a correct description of whether the image contains Peach and Mario.\nThis experiment demonstrates that networks can learn from constraints that operate over discrete sets with potentially complex logical rules. Removing constraints h1, h2, or h3 will cause learning to fail. Thus, the experiment also shows that sophisticated sufficiency conditions can be key to success when learning from constraints."}, {"heading": "Related Work", "text": "In this work, we have presented a new strategy for incorporating domain knowledge in three computer vision tasks. The networks in our experiments learn without labels by exploiting high level instructions in the form of constraints.\nConstraint learning is a generalization of supervised learning that allows for more creative methods of supervision. For example, multiple-instance learning as proposed by (Dietterich, Lathrop, and Lozano-Pe\u0301rez 1997; Zhou and Xu 2007) allows for more efficient labeling by providing annotations over groups of images and learning to predict properties that hold over at least one input in a group, rather than providing individual labels. In rank learning, labels may given as orderings between inputs with the objective being to find an embedding of inputs that respects the ordering relation (Joachims 2002). Inductive logic programming approaches rely on logical formalisms and constraints\nto represent background knowledge and learn hypotheses from data (Muggleton and De Raedt 1994; De Raedt 2008; De Raedt and Kersting 2003). Various types of constraints have also been used extensively to guide unsupervised learning algorithms, such as clustering and dimensionality reduction techniques (Lee and Seung 2001; Basu, Davidson, and Wagstaff 2008; Zhi et al. 2013; Ermon et al. 2015).\nEach of our experiments differs from such classical examples of constraint learning by jointly 1) leveraging the representation learning abilities of modern neural networks, and 2) adding sufficiency terms when the primary constraint is merely necessary. But the use of constraint learning for neural networks has also suggested by several other recent works.\n(Kotzias et al. 2015) used constraint learning to train deep networks in a natural language setting. Sentiment labels on reviews were used to analyze the sentiment of individual sentences comprising those reviews. (Lin et al. ) and (Zhuang et al. 2016) trained deep convolutional neural networks to construct high level compressed embeddings of images without using labels. (Lin et al. ) encoded constraints such as invariance of embeddings to image rotations, high entropy outputs, and high standard deviation outputs to learn these embeddings. Our experiments build on these ideas in a context where we can use prior knowledge such as physical dynamics to further constrain the output\u2019s semantics.\nThe Deep Q-Network (DQN) of (Mnih et al. 2015) provides another inspirational example for training neural networks with constraints rather than direct labels. The DQN may be described as an optimization of equation 2 by:\n\u2022 X: (xt, xt+1) \u2208 (Rheight\u00d7width\u00d73)2 (a pair of sequential states)\n\u2022 Y : (R|a|)2 (the expected future rewards from each state) \u2022 f : (convolutional) neural net with |a| outputs \u2022 g: f(xt)a \u2212 (\u03b3 \u2217 arg maxa\u2032 f(xt+1)a\u2032 + r(xt))\n(the Bellman equation)\nDQN\u2019s demonstrate that by imposing the right constraint g, one can transform weak labels of the form r(xt) into a rich planning algorithm over raw images.\nThus, a growing volume of work proposes the use of nontraditional loss functions for neural networks. The strategies outlined in the diverse set of references above each fall under the generic method of constraint learning. Our experiments encourage an even broader range of future applications where the primary constraint is necessary, but not sufficient for learning."}, {"heading": "Conclusion", "text": "We have introduced a new method for using physics and other domain constraints to supervise neural networks. Future challenges include extending these results to larger data sets with multiple objects per image, and simplifying the process of picking sufficiency terms for new and interesting problems. By freeing the operator from collecting labels, our small scale experiments show promise for the future of training neural networks with weak supervision."}, {"heading": "Acknowledgments", "text": "This work was supported by a grant from the SAIL-Toyota Center for AI Research. The authors would like to thank Aditya Grover and Tudor Achim for helpful discussions."}], "references": [{"title": "G", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "Corrado"], "venue": "S.; Davis, A.; Dean, J.; Devin, M.; et al.", "citeRegEx": "Abadi et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Constrained clustering: Advances in algorithms, theory, and applications", "author": ["Davidson Basu", "S. Wagstaff 2008] Basu", "I. Davidson", "K. Wagstaff"], "venue": null, "citeRegEx": "Basu et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Basu et al\\.", "year": 2008}, {"title": "Freebase: a collaboratively created graph database for structuring human knowledge", "author": ["Bollacker"], "venue": "In Proceedings of the 2008 ACM SIGMOD international conference on Management of data,", "citeRegEx": "Bollacker,? \\Q2008\\E", "shortCiteRegEx": "Bollacker", "year": 2008}, {"title": "and Kersting", "author": ["L. De Raedt"], "venue": "K.", "citeRegEx": "De Raedt and Kersting 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "R", "author": ["Dietterich, T.G.", "Lathrop"], "venue": "H.; and Lozano-P\u00e9rez, T.", "citeRegEx": "Dietterich. Lathrop. and Lozano.P\u00e9rez 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "C", "author": ["S. Ermon", "R. Le Bras", "S.K. Suram", "J.M. Gregoire", "Gomes"], "venue": "P.; Selman, B.; and van Dover, R. B.", "citeRegEx": "Ermon et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Ba", "author": ["D. Kingma"], "venue": "J.", "citeRegEx": "Kingma and Ba 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "and Welling", "author": ["D.P. Kingma"], "venue": "M.", "citeRegEx": "Kingma and Welling 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "From group to individual labels using deep features", "author": ["Kotzias"], "venue": "In ACM SIGKDD", "citeRegEx": "Kotzias,? \\Q2015\\E", "shortCiteRegEx": "Kotzias", "year": 2015}, {"title": "G", "author": ["A. Krizhevsky", "I. Sutskever", "Hinton"], "venue": "E.", "citeRegEx": "Krizhevsky. Sutskever. and Hinton 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Conditional random fields: Probabilistic models for segmenting and labeling sequence data", "author": ["McCallum Lafferty", "J. Pereira 2001] Lafferty", "A. McCallum", "F. Pereira"], "venue": "In Proceedings of the eighteenth international conference on machine learning, ICML,", "citeRegEx": "Lafferty et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Lafferty et al\\.", "year": 2001}, {"title": "Q", "author": ["Le"], "venue": "V.", "citeRegEx": "Le 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "H", "author": ["D.D. Lee", "Seung"], "venue": "S.", "citeRegEx": "Lee and Seung 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "D", "author": ["Lenat"], "venue": "B.", "citeRegEx": "Lenat 1995", "shortCiteRegEx": null, "year": 1995}, {"title": "A", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "Fidjeland"], "venue": "K.; Ostrovski, G.; Petersen, S.; Beattie, C.; Sadik, A.; Antonoglou, I.; King, H.; Kumaran, D.; Wierstra, D.; Legg, S.; and Hassabis, D.", "citeRegEx": "Mnih et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and De Raedt", "author": ["S. Muggleton"], "venue": "L.", "citeRegEx": "Muggleton and De Raedt 1994", "shortCiteRegEx": null, "year": 1994}, {"title": "and Domingos", "author": ["M. Richardson"], "venue": "P.", "citeRegEx": "Richardson and Domingos 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Andres", "author": ["I. Shcherbatyi"], "venue": "B.", "citeRegEx": "Shcherbatyi and Andres 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "G", "author": ["Srivastava, N.", "Hinton"], "venue": "E.; Krizhevsky, A.; Sutskever, I.; and Salakhutdinov, R.", "citeRegEx": "Srivastava et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "D", "author": ["Wolpert"], "venue": "H.", "citeRegEx": "Wolpert 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "Clustering with complex constraints-algorithms and applications", "author": ["Zhi"], "venue": null, "citeRegEx": "Zhi,? \\Q2013\\E", "shortCiteRegEx": "Zhi", "year": 2013}, {"title": "and Xu", "author": ["Zhou", "Z.-H."], "venue": "J.-M.", "citeRegEx": "Zhou and Xu 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "Fast training of triplet-based deep binary embedding networks. arXiv preprint arXiv:1603.02844", "author": ["Zhuang"], "venue": null, "citeRegEx": "Zhuang,? \\Q2016\\E", "shortCiteRegEx": "Zhuang", "year": 2016}], "referenceMentions": [], "year": 2016, "abstractText": "In many machine learning applications, labeled data is scarce and obtaining more labels is expensive. We introduce a new approach to supervising neural networks by specifying constraints that should hold over the output space, rather than direct examples of input-output pairs. These constraints are derived from prior domain knowledge, e.g., from known laws of physics. We demonstrate the effectiveness of this approach on real world and simulated computer vision tasks. We are able to train a convolutional neural network to detect and track objects without any labeled examples. Our approach can significantly reduce the need for labeled training data, but introduces new challenges for encoding prior knowledge into appropriate loss functions.", "creator": "LaTeX with hyperref package"}}}