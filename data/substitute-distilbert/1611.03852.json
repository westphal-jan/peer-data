{"id": "1611.03852", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Nov-2016", "title": "A Connection between Generative Adversarial Networks, Inverse Reinforcement Learning, and Energy-Based Models", "abstract": "generative adversarial networks ( gans ) are a recently proposed class of generative models in which a generator is trained to optimize a cost function that is being simultaneously learned by a discriminator. while the idea of learning cost functions is presently new to the field of generative modeling, learning planning has long been demonstrated in control and reinforcement learning ( rl ) domains, typically for imitation learning from demonstrations. in these fields, learning cost function underlying innate behavior is known as inverse reinforcement estimation ( irl ) \u2192 quantum optimal enrichment. while at first the connection between cost learning in rl and cost learning in generative modeling may appear nor assume a superficial flaw, we show in this paper fact certain irl methods are in fact mathematically equivalent between gans. in return, we demonstrate an equivalence between one fourier - based algorithm for maximum entropy irl and a gan in which the generator'm density can be evaluated and is provided as an additional input to the discriminator. now, maximum entropy irl remains a special type of an energy - based model. we discuss the interpretation of gans as an algorithm using training energy - based models, and relate this interpretation to other pioneering work that seeks to connect gans and ebms. by formally discovering the connection comprising gans, irl, and ebms, we hope that researchers comfortable considering three communities can better identify and apply contradictory ideas from analysis domain to further, particularly for developing more stable and feasible algorithms : a major challenge in exploring three domains.", "histories": [["v1", "Fri, 11 Nov 2016 20:53:45 GMT  (20kb)", "http://arxiv.org/abs/1611.03852v1", "Submitted to the NIPS 2016 Workshop on Adversarial Training. First two authors contributed equally"], ["v2", "Wed, 16 Nov 2016 18:11:26 GMT  (20kb)", "http://arxiv.org/abs/1611.03852v2", "NIPS 2016 Workshop on Adversarial Training. First two authors contributed equally"], ["v3", "Fri, 25 Nov 2016 08:09:55 GMT  (20kb)", "http://arxiv.org/abs/1611.03852v3", "NIPS 2016 Workshop on Adversarial Training. First two authors contributed equally"]], "COMMENTS": "Submitted to the NIPS 2016 Workshop on Adversarial Training. First two authors contributed equally", "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["chelsea finn", "paul christiano", "pieter abbeel", "sergey levine"], "accepted": false, "id": "1611.03852"}, "pdf": {"name": "1611.03852.pdf", "metadata": {"source": "CRF", "title": "A Connection Between Generative Adversarial Networks, Inverse Reinforcement Learning, and Energy-Based Models", "authors": ["Chelsea Finn", "Paul Christiano", "Pieter Abbeel", "Sergey Levine"], "emails": ["cbfinn@eecs.berkeley.edu", "paulfchristiano@eecs.berkeley.edu", "pabbeel@eecs.berkeley.edu", "svlevine@eecs.berkeley.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n03 85\n2v 1\n[ cs\n.L G\n] 1\n1 N"}, {"heading": "1 Introduction", "text": "Generative adversarial networks (GANs) are a recently proposed class of generative models in which a generator is trained to optimize a cost function that is being simultaneously learned by a discriminator [8]. While the idea of learning objectives is relatively new to the field of generative modeling, learning cost or reward functions has long been studied in control [5] and was popularized in 2000 for reinforcement learning problems [15]. In these fields, learning the cost function underlying demonstrated behavior is referred to as inverse reinforcement learning (IRL) or inverse optimal control (IOC). At first glance, the connection between cost learning in RL and cost learning for generative models may appear to be superficial; however, if we apply GANs to a setting where the generator density can be efficiently evaluated, the result is exactly equivalent to a sample-based algorithm for maximum entropy (MaxEnt) IRL. Interestingly, as MaxEnt IRL is an energy-based model, this connection suggests a method for using GANs to train a broader class of energy-based models.\nMaxEnt IRL is a widely-used objective for IRL, proposed by Ziebart et al. [26]. Sample-based algorithms for performing maximum entropy (MaxEnt) IRL have scaled cost learning to scenarios\n\u2217 Indicates equal contribution.\nwith unknown dynamics, using nonlinear function classes, such as neural networks [4, 11, 7]. We show that the gradient updates for the cost and the policy in these methods can be viewed as the updates for the discriminator and generator in GANs, under a specific form of the discriminator. The key difference to a generic discriminator is that we need to be able evaluate the density of the generator, which we integrate into the discriminator in a natural way.\nTraditionally, GANs are used to train generative models for which it is not possible to evaluate the density. When it is possible to evaluate the density, for example in an autoregressive model, it is typical to maximize the likelihood of the data directly. By considering the connection to IRL, we find that GAN training may be appropriate even when density values are available. For example, suppose we are interested in modeling a complex multimodal distribution, but our model does not have enough capacity to represent the distribution. Then maximizing likelihood will lead to a distribution which \u201ccovers\u201d all of the modes, but puts most of its mass in parts of the space that have negligible density under the data distribution. These might be images that look extremely unrealistic, nonsensical sentences, or suboptimal robot behavior. A generator trained adversarially will instead try to \u201cfill in\u201d as many of modes as it can, without putting much mass in the space between modes. This results in lower diversity, but ensures that samples \u201clook like\u201d they could have been from the original data.\nBy drawing an exact correspondence between adaptive, sample-based algorithms for MaxEnt IRL and GAN training, we show that this phenomenon occurs and is practically important: GAN training can significantly improve the quality of samples even when the generator density can be exactly evaluated. This is precisely analogous to the observed ability of inverse reinforcement learning to imitate behaviors that cannot be successfully learned through behavioral cloning [20], direct maximum likelihood regression to the demonstrated behavior.\nInterestingly, the maximum entropy formulation of IRL is a special case of an energy-based model (EBM) [25]. The learned cost in MaxEnt IRL corresponds to the energy function, and is trained via maximum likelihood. Hence, we can also show how a particular form of GANs can be used to train EBMs. Recent works have recognized a connection between EBMs and GANs [12, 24]. In this work, we particularly focus on EBMs trained with maximum likelihood, and expand upon the connection recognized by Kim & Bengio [12] for the case where the generator\u2019s density can be computed. By formally highlighting the connection between GANs, IRL, and EBMs, we hope that researchers in all three areas can better identify and apply transferable ideas from one domain to another."}, {"heading": "2 Background", "text": "In this section, we formally define generative adversarial networks (GANs), energy-based models (EBMs), and inverse reinforcement learning (IRL), and introduce notation."}, {"heading": "2.1 Generative Adversarial Networks", "text": "Generative adversarial networks are an approach to generative modeling where two models are trained simultaneously: a generator G and a discriminator D. The discriminator is tasked with classifying its inputs as either the output of the generator, or actual samples from the underlying data distribution p(x). The goal of the generator is to produce outputs that are classified by the discriminator as coming from the underlying data distribution [8].\nFormally, the generator takes noise as input and outputs a sample x \u223c G, while the discriminator takes as input a sample x and outputs the probability D(x) that the sample was from the data distribution. The discriminator\u2019s loss is the average log probability it assigns to the correct classification, evaluated on an equal mixture of real samples and outputs from the generator:\nLdiscriminator(D) = Ex\u223cp[\u2212 logD(x)]+Ex\u223cG[\u2212 log(1\u2212D(x))].\nThe generator\u2019s loss can be defined one of several similar ways. The simplest definition, originally proposed in [8], is simply the opposite of the discriminator\u2019s loss. However, this provides very little training signal if the generator\u2019s output can be easily distinguished from the real samples. It is common to instead use the log of the discriminator\u2019s confusion [8]. We will define the generator\u2019s loss as the sum of these two variants:\nLgenerator(G) = Ex\u223cG[\u2212 logD(x)]+Ex\u223cG[log(1\u2212D(x))]."}, {"heading": "2.2 Energy-Based Models", "text": "Energy-based models [14] associate an energy value E\u03b8 (x) with a sample x, modeling the data as a Boltzmann distribution:\np\u03b8 (x) = 1 Z exp(\u2212E\u03b8 (x)) (1)\nThe energy function parameters \u03b8 are often chosen to maximize the likelihood of the data; the main challenge in this optimization is evaluating the partition function Z, which is an intractable sum or integral for most high-dimensional problems. A common approach to estimating Z requires sampling from the Boltzmann distribution p\u03b8 (x) within the inner loop of learning.\nSampling from p\u03b8 (x) can be approximated by using Markov chain Monte Carlo (MCMC) methods; however, these methods face issues when there are several distinct modes of the distribution and, as a result, can take arbitrarily large amounts of time to produce a diverse set of samples. Approximate inference methods can also be used during training, though the energy function may incorrectly assign low energy to some modes if the approximate inference method cannot find them [14]."}, {"heading": "2.3 Inverse Reinforcement Learning", "text": "The goal of inverse reinforcement learning is to infer the cost function underlying demonstrated behavior [15]. It is typically assumed that the demonstrations come from an expert who is behaving near-optimally under some unknown cost. In this section, we discuss MaxEnt IRL and guided cost learning, an algorithm for MaxEnt IRL."}, {"heading": "2.3.1 Maximum entropy inverse reinforcement learning", "text": "Maximum entropy inverse reinforcement learning models the demonstrations using a Boltzmann distribution, where the energy is given by the cost function c\u03b8 :\np\u03b8 (\u03c4) = 1 Z exp(\u2212c\u03b8 (\u03c4)),\nHere, \u03c4 = {x1,u1, . . . ,xT ,uT } is a trajectory; c\u03b8 (\u03c4) = \u2211t c\u03b8 (xt ,ut) is a learned cost function parametrized by \u03b8 ; xt and ut are the state and action at time step t; and the partition function Z is the integral of exp(\u2212c\u03b8 (\u03c4)) over all trajectories that are consistent with the environment dynamics.2\nUnder this model, the optimal trajectories have the highest likelihood, and the expert can generate suboptimal trajectories with a probability that decreases exponentially as the trajectories become more costly. As in other energy-based models, the parameters \u03b8 are optimized to maximize the likelihood of the demonstrations. Estimating the partition function Z is difficult for large or continuous domains, and presents the main computational challenge. The first applications of this model computed Z exactly with dynamic programming [26]. However, this is only practical in small, discrete domains, and is impossible in domains where the system dynamics p(xt+1|xt ,ut) are unknown."}, {"heading": "2.3.2 Guided cost learning", "text": "Guided cost learning introduces an iterative sample-based method for estimating Z in the MaxEnt IRL formulation, and can scale to high-dimensional state and action spaces and nonlinear cost functions [7]. The algorithm estimates Z by training a new sampling distribution q(\u03c4) and using importance sampling:\nLcost(\u03b8 ) = E\u03c4\u223cp[\u2212 log p\u03b8 (\u03c4)] = E\u03c4\u223cp[c\u03b8 (\u03c4)]+ logZ\n= E\u03c4\u223cp[c\u03b8 (\u03c4)]+ log ( E\u03c4\u223cq [ exp(\u2212c\u03b8 (\u03c4))\nq(\u03c4)\n]) .\nGuided cost learning alternates between optimizing c\u03b8 using this estimate, and optimizing q(\u03c4) to minimize the variance of the importance sampling estimate.\n2This formula assumes that xt+1 is a deterministic function of the previous history. A more general form of this equation can be derived for stochastic dynamics [25]. However, the analysis largely remains the same: the probability of a trajectory can be written as the product of conditional probabilities, but the conditional probabilities of the states xt are not affected by \u03b8 and so factor out of all likelihood ratios.\nThe optimal importance sampling distribution for estimating the partition function \u222b\nexp(\u2212c\u03b8 (\u03c4))d\u03c4 is q(\u03c4) \u221d |exp(\u2212c\u03b8 (\u03c4))| = exp(\u2212c\u03b8 (\u03c4)). During guided cost learning, the sampling policy q(\u03c4) is updated to match this distribution by minimizing the KL divergence between q(\u03c4) and 1 Z exp(\u2212c\u03b8 (\u03c4)), or equivalently minimizing the learned cost and maximizing entropy.\nLsampler(q) = E\u03c4\u223cq[c\u03b8 (\u03c4)]\u2212E\u03c4\u223cq[logq(\u03c4)] (2)\nConveniently, this optimal sampling distribution is the demonstration distribution for the true cost function. Thus, this training procedure results in both a learned cost function, characterizing the demonstration distribution, and a learned policy q(\u03c4), capable of generating samples from the demonstration distribution.\nThis importance sampling estimate can have very high variance if the sampling distribution q fails to cover some trajectories \u03c4 with high values of exp(\u2212c\u03b8 (\u03c4)). Since the demonstrations will have low cost (as a result of the IRL objective), we can address this coverage problem by mixing the demonstration data samples with the generated samples. Let \u00b5 = 12 p+ 1 2 q be the mixture distribution over trajectory roll-outs. Let p\u0303(\u03c4) be a rough estimate for the density of the demonstrations; for example we could use the current model p\u03b8 , or we could use a simpler density model trained using another method. Guided cost learning uses \u00b5 for importance sampling3, with 12 p\u0303(\u03c4)+ 1 2 q(\u03c4) as the importance weights:\nLcost(\u03b8 ) = E\u03c4\u223cp[c\u03b8 (\u03c4)]+ log ( E\u03c4\u223c\u00b5 [ exp(\u2212c\u03b8 (\u03c4))\n1 2 p\u0303(\u03c4)+ 1 2 q(\u03c4)\n]) ,"}, {"heading": "2.4 Direct Maximum Likelihood and Behavioral Cloning", "text": "A simple approach to imitation learning and generative modeling is to train a generator or policy to output a distribution over the data, without learning a discriminator or energy function. For tractability, the data distribution is typically factorized using a directed graphical model or Bayesian network. In the field of generative modeling, this approach has most commonly been applied to speech and language generation tasks [22, 18], but has also been applied to image generation [21]. Like most EBMs, these models are trained by maximizing the likelihood of the observed data points.\nWhen a generative model does not have the capacity to represent the entire data distribution, maximizing likelihood directly will lead to a moment-matching distribution that tries to \u201ccover\u201d all of the modes, leading to a solution that puts much of its mass in parts of the space that have negligible probability under the true distribution. In many scenarios, it is preferable to instead produce only realistic, highly probable samples, by \u201cfilling in\u201d as many modes as possible, at the trade-off of lower diversity. Since EBMs are also trained with maximum likelihood, the energy function in an EBM will exhibit the same moment-matching behavior when it has limited capacity. However, designing a flexible energy function to represent a distribution\u2019s density function is generally much easier than designing a tractable generator with the same flexibility, that can to generate samples without a complex iterative inference procedure. Moreover, once we have a trained energy function, the generator is trained to be mode-seeking, by minimizing the KL divergence between the generator\u2019s distribution and the distribution induced by the energy function. As a result, even if the generator has the same capacity as a generative model trained with direct maximum likelihood, the generator trained with an EBM will exhibit mode-seeking behavior as long as the energy function is more flexible than the generator. Of course, this phenomenon is often achieved at the cost of tractability, as generating samples from an energy function requires training a generator which, in the case of IRL, is forward policy optimization.\nIn sequential decision-making domains, using direct maximum likelihood is known as behavioral cloning, where the policy is trained with supervised learning to match the actions of the demonstrating agent, conditioned on the corresponding observations. While this approach is simple and often effective for small problems, the moment-matching behavior of direct maximum likelihood can produce particularly ineffective trajectories because of compounding errors. When the policy makes a small mistake, it deviates from the state distribution seen during training, making it more likely to make a mistake again. This issue compounds and eventually, the agent reaches a state far from the\n3In RL settings, where generating samples requires executing a policy in the real world, such as in robotics, old samples from old generators are typically retained for efficiency. In this case, the density q can be computed using a fusion distribution over the past generator densities.\ntraining distribution and makes a catastrophic error [20]. Generative modeling also faces this issue when generating variables sequentially. A popular approach for handling this involves incrementally sampling more from the model and drawing less from the data distribution during training [20]. This requires that the true data distribution can be sampled from during training, corresponding to a human or algorithmic expert. Bengio et al. proposed an approximate solution, termed scheduled sampling, that does not require querying the data distribution [3]. However, while these approaches alleviate the issue, they do not solve it completely."}, {"heading": "3 GANs and IRL", "text": "We now show how generative adversarial modeling has implicitly been applied to the setting of inverse reinforcement learning, where the data-to-be-modeled is a set of expert demonstrations. The derivation requires a particular form of discriminator, which we discuss first in Section 3.1. After making this modification to the discriminator, we obtain an algorithm for IRL, as we show in Section 3.2, where the discriminator involves the learned cost and the generator represents the policy."}, {"heading": "3.1 A special form of discriminator", "text": "For a fixed generator with a [typically unknown] density q(\u03c4), the optimal discriminator is the following [8]:\nD\u2217(\u03c4) = p(\u03c4)\np(\u03c4)+ q(\u03c4) , (3)\nwhere p(\u03c4) is the actual distribution of the data. In the traditional GAN algorithm, the discriminator is trained to directly output this value. When the generator density q(\u03c4) can be evaluated, the traditional GAN discriminator can be modified to incorporate this density information. Instead of having the discriminator estimate the value of Equation 3 directly, it can be used to estimate p(\u03c4), filling in the value of q(\u03c4) with its known value. In this case, the new form of the discriminator D\u03b8 with parameters \u03b8 is\nD\u03b8 (\u03c4) = p\u0303\u03b8 (\u03c4)\np\u0303\u03b8 (\u03c4)+ q(\u03c4) .\nIn order to make the connection to MaxEnt IRL, we also replace the estimated data density with the Boltzmann distribution. As in MaxEnt IRL, we write the energy function as c\u03b8 to designate the learned cost. Now the discriminator\u2019s output is:\nD\u03b8 (\u03c4) = 1 Z exp(\u2212c\u03b8 (\u03c4))\n1 Z exp(\u2212c\u03b8 (\u03c4))+ q(\u03c4)\n.\nThe resulting architecture for the discriminator is very similar to a typical model for binary classification, with a sigmoid as the final layer and logZ as the bias of the sigmoid. We have adjusted the architecture only by subtracting logq(\u03c4) from the input to the sigmoid. This modest change allows the optimal discriminator to be completely independent of the generator: the discriminator is optimal when 1Z exp(\u2212c\u03b8 (\u03c4)) = p(\u03c4). Independence between the generator and the optimal discriminator may significantly improve the stability of training.\nThis change is very simple to implement and is applicable in any setting where the density q(\u03c4) can be cheaply evaluated. Of course this is precisely the case where we could directly maximize likelihood, and we might wonder whether it is worth the additional complexity of GAN training. But the experience of researchers in IRL has shown that maximizing log likelihood directly is not always the most effective way to learn complex behaviors, even when it is possible to implement. As we will show, there is a precise equivalence between MaxEnt IRL and this type of GAN, suggesting that the same phenomenon may occur in other domains: GAN training may provide advantages even when it would be possible to maximize likelihood directly."}, {"heading": "3.2 Equivalence between generative adversarial networks and guided cost learning", "text": "In this section, we show that GANs, when applied to IRL problems, optimize the same objective as MaxEnt IRL, and in fact the variant of GANs described in the previous section is precisely equivalent to guided cost learning.\nRecall that the discriminator\u2019s loss is equal to\nLdiscriminator(D\u03b8 ) = E\u03c4\u223cp[\u2212 logD\u03b8 (\u03c4)]+E\u03c4\u223cq[\u2212 log(1\u2212D\u03b8(\u03c4))]\n= E\u03c4\u223cp\n[ \u2212 log\n1 Z exp(\u2212c\u03b8 (\u03c4))\n1 Z exp(\u2212c\u03b8 (\u03c4))+ q(\u03c4)\n] +E\u03c4\u223cq [ \u2212 log\nq(\u03c4) 1 Z exp(\u2212c\u03b8 (\u03c4))+ q(\u03c4)\n]\nIn maximum entropy IRL, the log-likelihood objective is:\nLcost(\u03b8 ) = E\u03c4\u223cp[c\u03b8 (\u03c4)]+ log ( E\u03c4\u223c 12 p+ 1 2 q [ exp(\u2212c\u03b8 (\u03c4))\n1 2 p\u0303(\u03c4)+ 1 2 q(\u03c4)\n]) (4)\n= E\u03c4\u223cp[c\u03b8 (\u03c4)]+ log ( E\u03c4\u223c\u00b5 [ exp(\u2212c\u03b8 (\u03c4))\n1 2Z exp(\u2212c\u03b8 (\u03c4))+ 1 2 q(\u03c4)\n]) , (5)\nwhere we have substituted p\u0303(\u03c4) = p\u03b8 (\u03c4) = 1Z exp(\u2212c\u03b8 (\u03c4)), i.e. we are using the current model to estimate the importance weights.\nWe will establish the following facts, which together imply that GANs optimize precisely the MaxEnt IRL problem:\n1. The value of Z which minimizes the discriminator\u2019s loss is an importance-sampling estimator for the partition function, as described in Section 2.3.2.\n2. For this value of Z, the derivative of the discriminator\u2019s loss with respect to \u03b8 is equal to the derivative of the MaxEnt IRL objective.\n3. The generator\u2019s loss is exactly equal to the cost c\u03b8 minus the entropy of q(\u03c4), i.e. the MaxEnt policy loss defined in Equation 2 in Section 2.3.2.\nRecall that \u00b5 is the mixture distribution between p and q. Write \u00b5\u0303(\u03c4) = 12Z exp(\u2212c\u03b8 (\u03c4))+ 1 2 q(\u03c4). Note that when \u03b8 and Z are optimized, 1Z exp(\u2212c\u03b8 (\u03c4)) is an estimate for the density of p(\u03c4), and hence \u00b5\u0303(\u03c4) is an estimate for the density of \u00b5 ."}, {"heading": "3.2.1 Z estimates the partition function", "text": "We can compute the discriminator\u2019s loss:\nLdiscriminator(D\u03b8 ) =E\u03c4\u223cp\n[ \u2212 log 1 Z exp(\u2212c\u03b8 (\u03c4))\n\u00b5\u0303(\u03c4)\n] +E\u03c4\u223cq [ \u2212 log\nq(\u03c4) \u00b5\u0303(\u03c4)\n] (6)\n= logZ+E\u03c4\u223cp[c\u03b8 (\u03c4)]+E\u03c4\u223cp[log \u00b5\u0303(\u03c4)]\u2212E\u03c4\u223cq[logq(\u03c4)]+E\u03c4\u223cq[log \u00b5\u0303(\u03c4)] (7) = logZ+E\u03c4\u223cp[c\u03b8 (\u03c4)]\u2212E\u03c4\u223cq[logq(\u03c4)]+ 2E\u03c4\u223c\u00b5 [log \u00b5\u0303(\u03c4)]. (8)\nOnly the first and last terms depend on Z. At the minimizing value of Z, the derivative of these term with respect to Z will be zero:\n\u2202ZLdiscriminator(D\u03b8 ) = 0\n1 Z = E\u03c4\u223c\u00b5\n[ 1\nZ2 exp(\u2212c\u03b8 (\u03c4))\n\u00b5\u0303(\u03c4)\n]\nZ = E\u03c4\u223c\u00b5\n[ exp(\u2212c\u03b8 (\u03c4))\n\u00b5\u0303(\u03c4)\n] .\nThus the minimizing Z is precisely the importance sampling estimate of the partition function in Equation 4."}, {"heading": "3.2.2 c\u03b8 optimizes the IRL objective", "text": "We return to the discriminator\u2019s loss as computed in Equation 8, and consider the derivative with respect to the parameters \u03b8 . We will show that this is exactly the same as the derivative of the IRL objective.\nOnly the second and fourth terms in the sum depend on \u03b8 . When we differentiate those terms we obtain:\n\u2202\u03b8Ldiscriminator(D\u03b8 ) = E\u03c4\u223cp[\u2202\u03b8 c\u03b8 (\u03c4)]\u2212E\u03c4\u223c\u00b5\n[ 1 Z exp(\u2212c\u03b8 (\u03c4))\u2202\u03b8 c\u03b8 (\u03c4)\n\u00b5\u0303(\u03c4)\n]\nOn the other hand, when we differentiate the MaxEnt IRL objective, we obtain:\n\u2202\u03b8Lcost(\u03b8 ) = E\u03c4\u223cp[\u2202\u03b8 c\u03b8 (\u03c4)]+ \u2202\u03b8 log ( E\u03c4\u223c\u00b5 [ exp(\u2212c\u03b8 (\u03c4))\n\u00b5\u0303(\u03c4)\n])\n= E\u03c4\u223cp[\u2202\u03b8 c\u03b8 (\u03c4)]+ ( E\u03c4\u223c\u00b5 [ \u2212exp(\u2212c\u03b8 (\u03c4))\u2202\u03b8 c\u03b8 (\u03c4)\n\u00b5\u0303(\u03c4)\n]/ E\u03c4\u223c\u00b5 [ exp(\u2212c\u03b8 (\u03c4))\n\u00b5\u0303(\u03c4)\n])\n= E\u03c4\u223cp[\u2202\u03b8 c\u03b8 (\u03c4)]\u2212E\u03c4\u223c\u00b5\n[ 1 Z exp(\u2212c\u03b8 (\u03c4))\u2202\u03b8 c\u03b8 (\u03c4)\n\u00b5\u0303(\u03c4)\n]\n= \u2202\u03b8Ldiscriminator(D\u03b8 ).\nIn the third equality, we used the definition of Z as an importance sampling estimate. Note that in the second equality, we have treated \u00b5\u0303(\u03c4) as a constant rather than as a quantity that depends on \u03b8 . This is because the IRL optimization is minimizing logZ = log\u2211\u03c4 exp(\u2212c\u03b8 (\u03c4)) and using \u00b5\u0303(\u03c4) as the weights for an importance sampling estimator of Z. For this purpose we do not want to differentiate through the importance weights."}, {"heading": "3.3 The generator optimizes the MaxEnt IRL objective", "text": "Finally, we compute the generator\u2019s loss:\nLgenerator(q) = E\u03c4\u223cq[log(1\u2212D(\u03c4))\u2212 log(D(\u03c4))]\n= E\u03c4\u223cq\n[ log\nq(\u03c4) \u00b5\u0303(\u03c4) \u2212 log 1 Z exp(\u2212c\u03b8 (\u03c4)) \u00b5\u0303(\u03c4)\n]\n= E\u03c4\u223cq[logq(\u03c4)+ logZ+ c\u03b8 (\u03c4)] = logZ +E\u03c4\u223cq[c\u03b8 (\u03c4)]\u2212E\u03c4\u223cq[logq(\u03c4)] = logZ +Lsampler(q).\nThe term logZ is a parameter of the discriminator that is held fixed while optimizing the generator, this loss is exactly equivalent the sampler loss from MaxEnt IRL, defined in Equation 2."}, {"heading": "3.4 Discussion", "text": "There are many apparent differences between MaxEnt IRL and the GAN optimization problem. But, we have shown that after making a single key change\u2014using a generator q(\u03c4) for which densities can be evaluated efficiently, and incorporating this information into the discriminator in a natural way\u2014generative adversarial networks can be viewed as a sample-based algorithm for the MaxEnt IRL problem. By connecting GANs to the empirical literature on inverse reinforcement learning [7], this demonstrates that GAN training can improve the quality of samples even when the generator\u2019s density can be evaluated exactly. By generalizing this connection, we can derive a new adversarial training strategy for energy-based models, which we discuss in the next section."}, {"heading": "4 GANs for training EBMs", "text": "Now that we have highlighted the connection between GANs and guided cost learning, the application of GANs to EBMs follows directly. As discussed in Section 2.2, the primary challenge in training EBMs is estimating the partition function, which is done by approximately sampling from the distribution induced by the energy E\u03b8 . Two recent papers have proposed to use adversarial training to derive fast estimates of the partition function [12, 24]. In particular, these methods alternate between training a generator to produce samples with minimal energy E\u03b8 (x), and optimizing the parameters of the energy function using the samples to estimate the partition function.\nWhen the density of the generator is available, however, we can derive an unbiased estimate of the partition function as\nZ = Ex\u223c\u00b5 [ exp(\u2212E\u03b8 (x)) 1 2 p\u0303(x)+ 1 2 q(x) ]\nwhere \u00b5 denotes an equal mixture of generated and real data points, q(x) denotes the density under the generator, and p\u0303(x) denotes an estimate for the data density.\nThis gives a loss function\nLenergy(\u03b8 ) = Ex\u223cp[\u2212 log p\u03b8 (x)]\n= Ex\u223cp[\u2212E\u03b8 (x)]\u2212 log ( Ex\u223c\u00b5 [ exp(\u2212E\u03b8 (x)) 1 2 p\u0303(x)+ 1 2 q(x) ]) .\nAs before, the generator is updated to minimize energy and maximize entropy:\nLgenerator(q) = Ex\u223cq[E\u03b8 (x)]\u2212Ex\u223cq[logq(x)]\nIf we set p\u0303(x) = p\u03b8 (x), the resulting model is a special case of a GAN which is straightforward to implement. The discriminator\u2019s output is \u03c3(E\u03b8 (x)\u2212 logq(x)), where \u03c3 is a sigmoid with a trainable bias. The discriminator\u2019s loss is the log probability and the generator\u2019s loss is the discriminator\u2019s log odds, as defined in Section 2.1.\nKim & Bengio proposed a similar energy-based model for generative image modeling, but did not assume they could compute the generator\u2019s density [12]. As a result, they do not use importance weights, and work with a biased estimator of the partition function which converges to the true partition function when the generator correctly samples from the energy-based model. In contrast, by using the generator density, we can get an unbiased estimate of the partition function that does not rely on any assumptions about the generator. Thus, even if the generator cannot learn to sample exactly from the data distribution, our training procedure is consistent.\nZhao et al. also proposed an energy-based GAN model with an autoencoder discriminator where the energy is given by the mean-squared error between the data example (generated or real) and the discriminator\u2019s reconstruction [24]. The energy function is optimized with a margin loss, and the generator is trained to minimize energy. This method also did not use the form of discriminator presented above. An interesting direction for future exploration is to consider combining the GAN training algorithm discussed here with an objective other than log-likelihood, such as one used with EBMs [14] or different f -divergences used with GANs [17]."}, {"heading": "5 Related Work", "text": "Ho et al. [10, 9] previously presented a GAN-like algorithm for imitation learning, where the goal is to recover a policy that matches the expert demonstrations. The proposed algorithm, called generative adversarial imitation learning (GAIL), has an adversarial structure. The analysis in this paper provides additional insight into what GAIL is doing. As discussed above, GANs are optimizing the same objective as MaxEnt IRL. Thus, the GAIL policy is being trained to optimize a cost learned through MaxEnt IRL. Unlike guided cost learning [7], however, Ho & Ermon use the typical unconstrained form of the discriminator [9] and do not use the generator\u2019s density. In this case, the cost function remains implicit within the discriminator and cannot be recovered. Hence, in GAIL, the discriminator is discarded and the policy is the end result.\nBachman & Precup [1] suggested that data generation can be converted into a sequential decisionmaking problem and solved with a reinforcement learning method. Several recent works have proposed methods for merging maximum likelihood objectives and known reward functions for training sequential language generation models and rely on surrogate reward function such as BLEU score or edit distance [19, 16, 2]. In this work, we assume that the reward function is unknown.\nYu et al. proposed to learn a cost function for sequential data generation using GANs, where the cost is defined as the probability of the discriminator classifying the generated sequence as coming from the data distribution [23]. The discriminator does not take advantage of the policy\u2019s density values, despite the fact that they are known (and are used during pre-training). Their experiments also find\nthat max-likelihood pre-training is crucial for good performance, suggesting that recurrent generators that can\u2019t afford such pre-training (e.g. because they don\u2019t have densities) are less practical to train."}, {"heading": "6 Discussion", "text": "In this work, we showed an equivalence between generative adversarial modeling and an algorithm for performing maximum entropy inverse reinforcement learning. Our derivation used a special form of discriminator that leverages likelihood values from the generator, leading to an unbiased estimate of the underlying energy function. A natural direction for future work is to experiment with combining deep generators that can provide densities, such as autoregressive models [13, 21] or models that use invertible transformations [6], with generative adversarial modeling. Such an approach may provide more stable training, better generators, and wider applicability to discrete problems such as language.\nThis work also suggests a new algorithm for training energy-based models using generative adversarial networks, that trains a neural network model to sample from the distribution induced by the current energy. This method could reduce the computational challenges of existing MCMC-based solutions."}, {"heading": "Acknowledgments", "text": "The authors would like to thank Ian Goodfellow and Joan Bruna for insightful discussions."}], "references": [{"title": "Data generation as sequential decision making", "author": ["P. Bachman", "D. Precup"], "venue": "In Neural Information Processing Systems (NIPS),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "An actor-critic algorithm for sequence prediction", "author": ["D. Bahdanau", "P. Brakel", "K. Xu", "A. Goyal", "R. Lowe", "J. Pineau", "A. Courville", "Y. Bengio"], "venue": "arXiv preprint arXiv:1607.07086,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2016}, {"title": "Scheduled sampling for sequence prediction with recurrent neural networks", "author": ["S. Bengio", "O. Vinyals", "N. Jaitly", "N. Shazeer"], "venue": "In Neural Information Processing Systems (NIPS),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Relative entropy inverse reinforcement learning", "author": ["A. Boularias", "J. Kober", "J. Peters"], "venue": "In International Conference on Artificial Intelligence and Statistics (AISTATS),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Density estimation using real nvp", "author": ["L. Dinh", "J. Sohl-Dickstein", "S. Bengio"], "venue": "arXiv preprint arXiv:1605.08803,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Guided cost learning: Deep inverse optimal control via policy optimization", "author": ["C. Finn", "S. Levine", "P. Abbeel"], "venue": "International Conference on Machine Learning (ICML),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2016}, {"title": "Generative adversarial nets", "author": ["I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio"], "venue": "In Neural Information Processing Systems (NIPS),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "Generative adversarial imitation learning", "author": ["J. Ho", "S. Ermon"], "venue": "Neural Information Processing Systems (NIPS),", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2016}, {"title": "Model-free imitation learning with policy optimization", "author": ["J. Ho", "J.K. Gupta", "S. Ermon"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "Learning objective functions for manipulation", "author": ["M. Kalakrishnan", "P. Pastor", "L. Righetti", "S. Schaal"], "venue": "In International Conference on Robotics and Automation (ICRA),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "Deep directed generative models with energy-based probability estimation", "author": ["T. Kim", "Y. Bengio"], "venue": "ICLR Workshop Track,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "The neural autoregressive distribution estimator", "author": ["H. Larochelle", "I. Murray"], "venue": "In International Conference on Artificial Intelligence and Statistics (AISTATS),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "A tutorial on energy-based learning", "author": ["Y. LeCun", "S. Chopra", "R. Hadsell", "M. Ranzato", "F. Huang"], "venue": "Predicting structured data,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "Algorithms for inverse reinforcement learning", "author": ["A. Ng", "S. Russell"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2000}, {"title": "Reward augmented maximum likelihood for neural structured prediction", "author": ["M. Norouzi", "S. Bengio", "Z. Chen", "N. Jaitly", "M. Schuster", "Y. Wu", "D. Schuurmans"], "venue": "Neural Information Processing Systems (NIPS),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "f-gan: Training generative neural samplers using variational divergence minimization", "author": ["S. Nowozin", "B. Cseke", "R. Tomioka"], "venue": "Neural Information Processing Systems (NIPS),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Wavenet: A generative model for raw audio", "author": ["A. v. d. Oord", "S. Dieleman", "H. Zen", "K. Simonyan", "O. Vinyals", "A. Graves", "N. Kalchbrenner", "A. Senior", "K. Kavukcuoglu"], "venue": "arXiv preprint arXiv:1609.03499,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2016}, {"title": "Sequence level training with recurrent neural networks", "author": ["M. Ranzato", "S. Chopra", "M. Auli", "W. Zaremba"], "venue": "International Conference on Learning Representations (ICLR),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2016}, {"title": "A reduction of imitation learning and structured prediction to no-regret online learning", "author": ["S. Ross", "G. Gordon", "A. Bagnell"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}, {"title": "Pixel recurrent neural networks", "author": ["A. van den Oord", "N. Kalchbrenner", "K. Kavukcuoglu"], "venue": "International Conference on Machine Learning (ICML),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2016}, {"title": "Google\u2019s neural machine translation system: Bridging the gap between human and machine translation", "author": ["Y. Wu", "M. Schuster", "Z. Chen", "Q.V. Le", "M. Norouzi", "W. Macherey", "M. Krikun", "Y. Cao", "Q. Gao", "K. Macherey"], "venue": "arXiv preprint arXiv:1609.08144,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2016}, {"title": "Seqgan: Sequence generative adversarial nets with policy gradient", "author": ["L. Yu", "W. Zhang", "J. Wang", "Y. Yu"], "venue": "arXiv preprint arXiv:1609.05473,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2016}, {"title": "Energy-based generative adversarial network", "author": ["J. Zhao", "M. Mathieu", "Y. LeCun"], "venue": "arXiv preprint arXiv:1609.03126,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2016}, {"title": "Modeling purposeful adaptive behavior with the principle of maximum causal entropy", "author": ["B. Ziebart"], "venue": "PhD thesis,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "Maximum entropy inverse reinforcement learning", "author": ["B. Ziebart", "A. Maas", "J.A. Bagnell", "A.K. Dey"], "venue": "In AAAI Conference on Artificial Intelligence,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2008}], "referenceMentions": [{"referenceID": 6, "context": "Generative adversarial networks (GANs) are a recently proposed class of generative models in which a generator is trained to optimize a cost function that is being simultaneously learned by a discriminator [8].", "startOffset": 206, "endOffset": 209}, {"referenceID": 13, "context": "While the idea of learning objectives is relatively new to the field of generative modeling, learning cost or reward functions has long been studied in control [5] and was popularized in 2000 for reinforcement learning problems [15].", "startOffset": 228, "endOffset": 232}, {"referenceID": 24, "context": "[26].", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "with unknown dynamics, using nonlinear function classes, such as neural networks [4, 11, 7].", "startOffset": 81, "endOffset": 91}, {"referenceID": 9, "context": "with unknown dynamics, using nonlinear function classes, such as neural networks [4, 11, 7].", "startOffset": 81, "endOffset": 91}, {"referenceID": 5, "context": "with unknown dynamics, using nonlinear function classes, such as neural networks [4, 11, 7].", "startOffset": 81, "endOffset": 91}, {"referenceID": 18, "context": "This is precisely analogous to the observed ability of inverse reinforcement learning to imitate behaviors that cannot be successfully learned through behavioral cloning [20], direct maximum likelihood regression to the demonstrated behavior.", "startOffset": 170, "endOffset": 174}, {"referenceID": 23, "context": "Interestingly, the maximum entropy formulation of IRL is a special case of an energy-based model (EBM) [25].", "startOffset": 103, "endOffset": 107}, {"referenceID": 10, "context": "Recent works have recognized a connection between EBMs and GANs [12, 24].", "startOffset": 64, "endOffset": 72}, {"referenceID": 22, "context": "Recent works have recognized a connection between EBMs and GANs [12, 24].", "startOffset": 64, "endOffset": 72}, {"referenceID": 10, "context": "In this work, we particularly focus on EBMs trained with maximum likelihood, and expand upon the connection recognized by Kim & Bengio [12] for the case where the generator\u2019s density can be computed.", "startOffset": 135, "endOffset": 139}, {"referenceID": 6, "context": "The goal of the generator is to produce outputs that are classified by the discriminator as coming from the underlying data distribution [8].", "startOffset": 137, "endOffset": 140}, {"referenceID": 6, "context": "The simplest definition, originally proposed in [8], is simply the opposite of the discriminator\u2019s loss.", "startOffset": 48, "endOffset": 51}, {"referenceID": 6, "context": "It is common to instead use the log of the discriminator\u2019s confusion [8].", "startOffset": 69, "endOffset": 72}, {"referenceID": 12, "context": "Energy-based models [14] associate an energy value E\u03b8 (x) with a sample x, modeling the data as a Boltzmann distribution: p\u03b8 (x) = 1 Z exp(\u2212E\u03b8 (x)) (1) The energy function parameters \u03b8 are often chosen to maximize the likelihood of the data; the main challenge in this optimization is evaluating the partition function Z, which is an intractable sum or integral for most high-dimensional problems.", "startOffset": 20, "endOffset": 24}, {"referenceID": 12, "context": "Approximate inference methods can also be used during training, though the energy function may incorrectly assign low energy to some modes if the approximate inference method cannot find them [14].", "startOffset": 192, "endOffset": 196}, {"referenceID": 13, "context": "The goal of inverse reinforcement learning is to infer the cost function underlying demonstrated behavior [15].", "startOffset": 106, "endOffset": 110}, {"referenceID": 24, "context": "The first applications of this model computed Z exactly with dynamic programming [26].", "startOffset": 81, "endOffset": 85}, {"referenceID": 5, "context": "Guided cost learning introduces an iterative sample-based method for estimating Z in the MaxEnt IRL formulation, and can scale to high-dimensional state and action spaces and nonlinear cost functions [7].", "startOffset": 200, "endOffset": 203}, {"referenceID": 23, "context": "A more general form of this equation can be derived for stochastic dynamics [25].", "startOffset": 76, "endOffset": 80}, {"referenceID": 20, "context": "In the field of generative modeling, this approach has most commonly been applied to speech and language generation tasks [22, 18], but has also been applied to image generation [21].", "startOffset": 122, "endOffset": 130}, {"referenceID": 16, "context": "In the field of generative modeling, this approach has most commonly been applied to speech and language generation tasks [22, 18], but has also been applied to image generation [21].", "startOffset": 122, "endOffset": 130}, {"referenceID": 19, "context": "In the field of generative modeling, this approach has most commonly been applied to speech and language generation tasks [22, 18], but has also been applied to image generation [21].", "startOffset": 178, "endOffset": 182}, {"referenceID": 18, "context": "training distribution and makes a catastrophic error [20].", "startOffset": 53, "endOffset": 57}, {"referenceID": 18, "context": "A popular approach for handling this involves incrementally sampling more from the model and drawing less from the data distribution during training [20].", "startOffset": 149, "endOffset": 153}, {"referenceID": 2, "context": "proposed an approximate solution, termed scheduled sampling, that does not require querying the data distribution [3].", "startOffset": 114, "endOffset": 117}, {"referenceID": 6, "context": "For a fixed generator with a [typically unknown] density q(\u03c4), the optimal discriminator is the following [8]: D(\u03c4) = p(\u03c4) p(\u03c4)+ q(\u03c4) , (3) where p(\u03c4) is the actual distribution of the data.", "startOffset": 106, "endOffset": 109}, {"referenceID": 5, "context": "By connecting GANs to the empirical literature on inverse reinforcement learning [7], this demonstrates that GAN training can improve the quality of samples even when the generator\u2019s density can be evaluated exactly.", "startOffset": 81, "endOffset": 84}, {"referenceID": 10, "context": "Two recent papers have proposed to use adversarial training to derive fast estimates of the partition function [12, 24].", "startOffset": 111, "endOffset": 119}, {"referenceID": 22, "context": "Two recent papers have proposed to use adversarial training to derive fast estimates of the partition function [12, 24].", "startOffset": 111, "endOffset": 119}, {"referenceID": 10, "context": "Kim & Bengio proposed a similar energy-based model for generative image modeling, but did not assume they could compute the generator\u2019s density [12].", "startOffset": 144, "endOffset": 148}, {"referenceID": 22, "context": "also proposed an energy-based GAN model with an autoencoder discriminator where the energy is given by the mean-squared error between the data example (generated or real) and the discriminator\u2019s reconstruction [24].", "startOffset": 210, "endOffset": 214}, {"referenceID": 12, "context": "An interesting direction for future exploration is to consider combining the GAN training algorithm discussed here with an objective other than log-likelihood, such as one used with EBMs [14] or different f -divergences used with GANs [17].", "startOffset": 187, "endOffset": 191}, {"referenceID": 15, "context": "An interesting direction for future exploration is to consider combining the GAN training algorithm discussed here with an objective other than log-likelihood, such as one used with EBMs [14] or different f -divergences used with GANs [17].", "startOffset": 235, "endOffset": 239}, {"referenceID": 8, "context": "[10, 9] previously presented a GAN-like algorithm for imitation learning, where the goal is to recover a policy that matches the expert demonstrations.", "startOffset": 0, "endOffset": 7}, {"referenceID": 7, "context": "[10, 9] previously presented a GAN-like algorithm for imitation learning, where the goal is to recover a policy that matches the expert demonstrations.", "startOffset": 0, "endOffset": 7}, {"referenceID": 5, "context": "Unlike guided cost learning [7], however, Ho & Ermon use the typical unconstrained form of the discriminator [9] and do not use the generator\u2019s density.", "startOffset": 28, "endOffset": 31}, {"referenceID": 7, "context": "Unlike guided cost learning [7], however, Ho & Ermon use the typical unconstrained form of the discriminator [9] and do not use the generator\u2019s density.", "startOffset": 109, "endOffset": 112}, {"referenceID": 0, "context": "Bachman & Precup [1] suggested that data generation can be converted into a sequential decisionmaking problem and solved with a reinforcement learning method.", "startOffset": 17, "endOffset": 20}, {"referenceID": 17, "context": "Several recent works have proposed methods for merging maximum likelihood objectives and known reward functions for training sequential language generation models and rely on surrogate reward function such as BLEU score or edit distance [19, 16, 2].", "startOffset": 237, "endOffset": 248}, {"referenceID": 14, "context": "Several recent works have proposed methods for merging maximum likelihood objectives and known reward functions for training sequential language generation models and rely on surrogate reward function such as BLEU score or edit distance [19, 16, 2].", "startOffset": 237, "endOffset": 248}, {"referenceID": 1, "context": "Several recent works have proposed methods for merging maximum likelihood objectives and known reward functions for training sequential language generation models and rely on surrogate reward function such as BLEU score or edit distance [19, 16, 2].", "startOffset": 237, "endOffset": 248}, {"referenceID": 21, "context": "proposed to learn a cost function for sequential data generation using GANs, where the cost is defined as the probability of the discriminator classifying the generated sequence as coming from the data distribution [23].", "startOffset": 215, "endOffset": 219}, {"referenceID": 11, "context": "A natural direction for future work is to experiment with combining deep generators that can provide densities, such as autoregressive models [13, 21] or models that use invertible transformations [6], with generative adversarial modeling.", "startOffset": 142, "endOffset": 150}, {"referenceID": 19, "context": "A natural direction for future work is to experiment with combining deep generators that can provide densities, such as autoregressive models [13, 21] or models that use invertible transformations [6], with generative adversarial modeling.", "startOffset": 142, "endOffset": 150}, {"referenceID": 4, "context": "A natural direction for future work is to experiment with combining deep generators that can provide densities, such as autoregressive models [13, 21] or models that use invertible transformations [6], with generative adversarial modeling.", "startOffset": 197, "endOffset": 200}], "year": 2016, "abstractText": "Generative adversarial networks (GANs) are a recently proposed class of generative models in which a generator is trained to optimize a cost function that is being simultaneously learned by a discriminator. While the idea of learning cost functions is relatively new to the field of generative modeling, learning costs has long been studied in control and reinforcement learning (RL) domains, typically for imitation learning from demonstrations. In these fields, learning the cost function underlying observed behavior is known as inverse reinforcement learning (IRL) or inverse optimal control. While at first the connection between cost learning in RL and cost learning in generative modeling may appear to be a superficial one, we show in this paper that certain IRL methods are in fact mathematically equivalent to GANs. In particular, we demonstrate an equivalence between a sample-based algorithm for maximum entropy IRL and a GAN in which the generator\u2019s density can be evaluated and is provided as an additional input to the discriminator. Interestingly, maximum entropy IRL is a special case of an energy-based model. We discuss the interpretation of GANs as an algorithm for training energy-based models, and relate this interpretation to other recent work that seeks to connect GANs and EBMs. By formally highlighting the connection between GANs, IRL, and EBMs, we hope that researchers in all three communities can better identify and apply transferable ideas from one domain to another, particularly for developing more stable and scalable algorithms: a major challenge in all three domains.", "creator": "LaTeX with hyperref package"}}}