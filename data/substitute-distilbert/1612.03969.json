{"id": "1612.03969", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Dec-2016", "title": "Tracking the World State with Recurrent Entity Networks", "abstract": "astronomers introduce a new model, the recurrent entity network ( entnet ). it is equipped with a dynamic long - term memory which allows it to test and update your representation of the state of the world as it receives new data. for language understanding tasks, something can reason on - f - fly as it leaves text, not mention what it is required to answer a task or respond as is the case for a memory network ( sukhbaatar et al., 2015 ). like a neural graph puzzle or autonomous neural computer ( graves et al., 2014 ; 1967 ) it maintains a fixed size memory and can learn to undertake location and content - based read and write operations. however, unlike those models it has a simple interaction architecture in which several memory locations can be updated simultaneously. however entnet sets a new state - by - the - art on the particular tasks, and is the first method or solve all the tasks in the 10k cube examples setting. we also demonstrate once it properly solve a reasoning maze which requires a large number of supporting facts, which other methods are not able to solve, and can generalize past its training horizon. it can also be specially used on large scale formats such as children't book test, where it obtains competitive performance, setting the story in a single pass.", "histories": [["v1", "Mon, 12 Dec 2016 23:29:40 GMT  (59kb)", "http://arxiv.org/abs/1612.03969v1", null], ["v2", "Sat, 25 Mar 2017 03:05:14 GMT  (60kb)", "http://arxiv.org/abs/1612.03969v2", null], ["v3", "Wed, 10 May 2017 16:52:56 GMT  (60kb)", "http://arxiv.org/abs/1612.03969v3", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["mikael henaff", "jason weston", "arthur szlam", "antoine bordes", "yann lecun"], "accepted": true, "id": "1612.03969"}, "pdf": {"name": "1612.03969.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["mbh305@nyu.edu,", "jase@fb.com", "aszlam@fb.com", "abordes@fb.com", "yann@fb.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 2.\n03 96\n9v 1\n[ cs\n.C L\n] 1\n2 D\nec 2\n01 6"}, {"heading": "1 INTRODUCTION", "text": "The essence of intelligence is the ability to predict. An intelligent agent must be able to predict unobserved facts about their environment from limited percepts (visual, auditory, textual, or otherwise), combined with their knowledge of the past. In order to reason and plan, they must be able to predict how an observed event or action will affect the state of the world. Arguably, the ability to maintain an estimate of the current state of the world, combined with a forward model of how the world evolves, is a key feature of intelligent agents.\nA natural way for an agent to represent the world is to maintain a set of high-level concepts or entities together with their properties, which are updated as new information is received. For example, if a percept is the textual description of an event, such as \u201cJohn walks out of the kitchen\u201d, the agent should learn to update its estimate of John\u2019s location, as well as the list (and number) of people present in each room. If John was carrying a bag, the location of the bag and the list of objects in the kitchen must also be updated. When we read a story, each sentence we read or hear causes us to update our internal representation of the current state of the world within the story. The flow of the story is captured by the evolution of this state of the world.\nAt any given time, an agent typically receives limited information about the state of the world, and should therefore be able to infer new information through partial observation. In this paper, we investigate this problem through a simple story understanding scenario, in which the agent is given a sequence of textual statements and events, and then given another series of statements about the final state of the world. If the second series of statements is given in the form of questions about the final state of the world together with their correct answers, the agent should be able to learn from them and its performance can be measured by the accuracy of its answers.\n\u2217The majority of this work was done while MH was at Facebook AI Research, and was completed at his current affiliation, New York University.\nEven with this weak form of supervision, the system may learn basic dynamical constraints about the world. For example, it may learn that a person or object cannot be in two locations at the same time, or may learn simple update rules such as incrementing and decrementing the number of persons or objects in a room. It may also learn basic rules of approximate (logical) inference, such as the fact that objects belonging to the same category tend to have similar properties (light objects can be carried over from rooms to rooms for instance).\nWe propose to handle this scenario with a new kind of memory-augmented neural network that uses a distributed memory and processor architecture: the Recurrent Entity Network (EntNet). The model consists of a fixed number of dynamic memory cells, each containing a vector key wj and a vector value (or content) hj . Each cell is associated with its own \u201cprocessor\u201d, a simple gated recurrent network that may update the cell value given an input. If each cell learns to represent a concept or entity in the world, one can imagine a gating mechanism that, based on the key and content of the memory cells, will only modify the cells that concern the entities mentioned in the input. In the current version of the model, there is no direct interaction between the memory cells, hence the system can be seen as multiple identical processors functioning in parallel, with distributed local memory. Alternatively, the EntNet can be seen as a bank of gated RNNs (all sharing the same parameters), whose hidden states correspond to latent concepts and attributes. Their hidden state is updated only when new information relevant to their concept is received, and remains otherwise unchanged. The keys used in the addressing/gating mechanism also correspond to concepts or entities, but are modified only during learning, not during inference.\nThe EntNet is able to solve all 20 bAbI question-answering tasks (Weston et al., 2015), a popular benchmark of story understanding, which to our knowledge sets a new state-of-the-art. Our experiments also indicate that the model indeed maintains an internal representation of the simplified world in which the stories take place, and that the model does not limit itself to storing the aspects of the world required to answer a specific question. We also introduce a new reasoning task which, unlike the bAbI tasks, requires a model to use a large number of supporting facts to answer the question, and show that the EntNet outperforms both LSTMs and Memory Networks (Sukhbaatar et al., 2015) by a significant margin. It is also able to generalize to sequences longer than those seen during training. Finally, our model also obtains competitive results on the Childrens Book Test (Hill et al., 2016), and performs best among models that read the text in a single pass before receiving knowledge of the question."}, {"heading": "2 MODEL", "text": "Our model is designed to process data in sequential form, and consists of three main parts: an input encoder, a dynamic memory and an output layer, which we now describe in detail. We developed it in the context of question answering on short stories where the inputs are word sequences, but the model could be adapted to many other contexts."}, {"heading": "2.1 INPUT ENCODER", "text": "The encoding layer summarizes an element of the input sequence with a vector of fixed length. Typically the input element at time t is a sequence of words, e.g. a sentence or window of words. One is free to choose the encoding module to be any standard sequence encoder, which is an active area of research. Typical choices include a bag-of-words (BoW) representation or the final state of a recurrent neural net (RNN) run over the sequence. In this work, we use a simple encoder consisting of a learned multiplicative mask followed by a summation. More precisely, let the input at time t be a sequence of words with embeddings {e1, ..., ek}. The vector representation of this input is then:\nst = \u2211\ni\nfi \u2299 ei (1)\nThe same set of vectors {f1, ..., fk} are used at each time step and are learned jointly with the other parameters of the model. Note that the model can choose to adopt a standard BoW representation by setting all weights in the multiplicative mask to 1, or can choose a positional encoding model as used in (Sukhbaatar et al., 2015)."}, {"heading": "2.2 DYNAMIC MEMORY", "text": "The dynamic memory is a gated recurrent network with a (partially) block structured weight tying scheme. We divide the hidden states of the network into blocks h1, ..., hm; the full hidden state is the concatenation of the hj . In the experiments below, m is of the order of 5 to 20, and each block hj is of the order of 20 to 100 units.\nAt each time step t, the content of the hidden states {hj} (which we will call the jth memory) are updated using a set of key vectors {wj} and the encoded input st. In its most general form, the update equations of our model are given by:\ngj \u2190 \u03c3(s T t hj + s T t wj) (2)\nh\u0303j \u2190 \u03c6(Uhj + V wj +Wst) (3)\nhj \u2190 hj + gj \u2299 h\u0303j (4)\nhj \u2190 hj\n||hj || (5)\nHere \u03c3 represents a sigmoid, gj is a gating function which determines how much the jth memory should be updated, and h\u0303j is the new candidate value of the memory to be combined with the existing memory hj . The function \u03c6 can be chosen from any number of activation functions, in our experiments we use either parametric ReLU non-linearities (He et al., 2015) or the identity. The matrices U, V,W are typically trainable parameters of the model, and are shared between all the blocks. They can also be fixed to certain values, such as the identity or zero, to yield a simpler model which we use in some of our experiments.\nThe gating function gj contains two terms: a \u201ccontent\u201d term sTt hj which causes the gate to open for memory slots whose content matches the input, and a \u201clocation\u201d term sTt wj which causes the gate to open for memory slots whose key matches the input. The final normalization step allows\nthe model to forget previous information. To see this, note that since the memories lie on the unit sphere, all information is contained in their phase. Adding any vector to a given memory (other than the memory itself) will decrease the cosine distance between the original memory and the updated one. Therefore, as new information is added, old information is forgotten."}, {"heading": "2.3 OUTPUT MODULE", "text": "Whenever the model is required to produce an output, it is presented with a query vector q. Specifically, the output is computed using the following equations:\npj = Softmax(qThj)\nu = \u2211\nj\npjhj\ny = R\u03c6(q +Hu)\n(6)\nThe matrices H and R are additional trainable parameters of the model. The output module can be viewed as a one-hop Memory Network (Sukhbaatar et al., 2015) with an additional non-linearity \u03c6 between the internal state and the decoder matrix. If the memory slots correspond to specific words (as we will describe in the following section) which contain the answer, p can be viewed as a distribution over potential answers and can be used to make a prediction directly or fed into a loss function, removing the need for the last two steps.\nThe entire model (all three components described above) is trained via backpropagation through time, receiving gradients from any time steps where the reader is required to produce an output, which are then propagated through the unrolled network."}, {"heading": "3 MOTIVATING EXAMPLE OF OPERATION", "text": "We now describe a motivating example of how our model can perform reasoning on-the-fly as it is ingesting input sequences. Let us suppose our model is reading a story, so the inputs are natural language sentences, and then it is required to answer questions about the story it has just read.\nOur model is free to learn the key vectors wj for each memory j. One choice the model could make is to associate a single memory (via the key) with each entity in the story. The memory slot corresponding to a person could encode that person\u2019s location, the objects they are carrying, or the people they are with, depending on what information is relevant for the task at hand. As new information is received indicating that objects are acquired or discarded, or the person changes location, their memory slot will change accordingly. Similarly useful updates can be made for memories corresponding to object and location entities as well.\nIn fact, we could encode this choice of memories directly into our model, which we consider as a type of prior knowledge. By tying the weights of the key vectors with the embeddings of specific words, we can encourage the model to record information about certain words occuring in the text which we believe to be important. For example, given a list of named entities (which could be produced by a standard tagger), we could make the model have a separate memory slot for each entity. We consider this \u201ctied\u201d variant in our experiments. Since the list of entities is independent of the training data, this variant can handle entities not seen in the training set, as long as their embeddings can be initialized in a reasonable way (such as pre-training on a larger corpus).\nNow, consider that the model reads the following two sentences, and the desired behavior of the gating function and update function at each memory as they are seen:\n\u2022 Mary picked up the ball.\n\u2022 Mary went to the garden.\nAs the first sentence st is ingested, and assuming memories encode entities, we would like the gates of the memories corresponding to both \u201cMary\u201d and \u201cball\u201d to activate. This is possible due to the location addressing term sTt wj which uses the key wj . We expect that a well trained model would\nlearn to do this. The model would hence modify both the entry corresponding to \u201cMary\u201d to indicate that she is now carrying the ball, and also the entry corresponding to \u201cball\u201d, to indicate that it is being carried by Mary. When the second sentence is seen, we would like the model to again modify the \u201cMary\u201d entry to indicate that she is now in the garden, and also modify the \u201cball\u201d entry to reflect its new location as well. Assuming the information for \u201cMary\u201d is contained in the \u201cball\u201d memory as described before, the gate corresponding to \u201cball\u201d can activate due to the content addressing term sTt hj , even though the word \u201cball\u201d does not occur in the second sentence. As before, the gate corresponding to the \u201cMary\u201d entry can open due to the second term.\nIf the gating function and update function have weights such that the steps above are executed, then the memory will be in a state where questions such as \u201cWhere is the ball?\u201d or \u201cWhere is Mary?\u201d can be answered from the values of relevant memories, without the need for further complex reasoning."}, {"heading": "4 RELATED WORK", "text": "The EntNet is related to gated recurrent models such as the LSTM (Hochreiter & Schmidhuber, 1997) and GRU (Cho et al., 2014), which also use gates to fix or modify the information stored in the hidden state. However, these models use scalar memory cells with full interactions between them, whereas ours has separate memory slots which could be seen as groups of hidden units with tied weights in the gating and update functions. Another important difference is the content-based matching term between the input and hidden state, which is not present in these models.\nOur model also shares some similarities with the DNC/NTM framework of (Graves et al., 2014; 2016). There, as in our model, a block of hidden states acts as a set of read-writeable memories. On the other hand, the DNC has a relatively sophisticated controller network (such as an LSTM) which reads an input and outputs a number of interface vectors (such as keys and weightings) which are then combined via a softmax to read from and write to the external memory matrix. In contrast, our model can be viewed as a set of separate recurrent models whose hidden states store the memory slots. These hidden states are either fixed by the gates, or modified through a simple RNN-style update. The bulk of the reasoning is thus performed by these parallel recurrent models, rather than through a central controller. Moreover, instead of using a softmax, our model uses an independent gate for writing to each memory.\nOur model is similar to a Memory Network and its variants (Weston et al., 2014; Sukhbaatar et al., 2015; Chandar et al., 2016; Miller et al., 2016) in the way it produces an output using a softmax over blocks of hidden states, and our encoding layer is inspired by techniques used in those works. However, Memory Networks explicitly store the entire input sequence in memory, and then sequentially update a controller\u2019s hidden state via a softmax gating over the memories. In contrast, our model keeps a fixed number of blocks of hiddens as memories and updates each block with an independent gated RNN. The Dynamic Memory Network of (Xiong et al., 2016) also performs updates via a recurrent model, however it links memories to input tokens and updates them sequentially rather than in parallel.\nThe weight tying scheme and the parallel gated RNNs recall the gated graph network of (Li et al., 2015). If we interpret our work in that context, the \u201cgraph\u201d is just a set of vertices with no edges; our gating mechanism is also somewhat different than the one they use. The CommNN model of (Sukhbaatar et al., 2016) also uses a set of parallel recurrent models with tied weights, but differs from our model in their use of inter-network communication and the lack of a gating mechanism.\nFinally, there is another class of recent models that have a writeable memory arranged as (unbounded) stacks, linked lists or queues (Joulin & Mikolov, 2015; Grefenstette et al., 2015). Our model is different from these in that we use a key-value pair array instead of a stack, and in the experiments in this work, the array is of fixed size."}, {"heading": "5 EXPERIMENTS", "text": "In this section we evaluate our model on three different datasets. Training details common to all experiments can be found in Appendix A."}, {"heading": "5.1 SYNTHETIC WORLD MODEL TASK", "text": "We first study our model\u2019s properties on a toy task designed to measure the ability to keep a world model in memory. In this task two agents are initially placed randomly on an 10\u00d710 grid, and at each time step a randomly chosen agent either changes direction or moves ahead. After a certain number of time steps, the model is required to provide the locations of each of the agents, thus revealing its internal world model (details can be found in Appendix B). This task is challenging because the model must combine up to T \u22122 supporting facts in order to answer the question correctly, and must also keep the locations of both agents in memory and update them at different times.\nWe compared the performance of a MemN2N, LSTM and EntNet. For the MemN2N, we set the number of hops equal to T\u22122 and the embedding dimension to d = 20. The EntNet had embedding dimension d = 20 and 5 memory slots, and the LSTM had 50 hidden units which resulted in it having significantly more parameters than the other two models. For each model, we repeated the experiment with 5 different initializations and reported the best performance. All models were trained with ADAM (Kingma & Ba, 2014) with initial learning rates set by grid search over {0.1, 0.01, 0.001} and divided by 2 every 10,000 updates. Table 1a shows the results. The MemN2N has the worst performance, which degrades quickly as the length of the sequence increases. The LSTM performs better, but still loses accuracy as the length of the sequence increases. In contrast, the EntNet is able to solve the task in all cases.\nThe ability to generalize to sequences longer than those seen during training is a desirable property, which suggests that the network has learned the dynamics of the world it is trying to model. It also means the model can be trained less expensively. To study this, we trained an EntNet on variable length sequences between 1 and 20, and evaluated it on different length sequences longer than 20. Results are shown in Table 1b. We see that the model is able to achieve good performance several times past its training horizon."}, {"heading": "5.2 BABI TASKS", "text": "We next evaluate our model on the bAbI tasks, which are a collection of 20 synthetic questionanswering datasets first introduced in (Weston et al., 2015) designed to test a wide variety of reasoning abilities. They have since become a benchmark for memory-augmented neural networks and most of the related methods described in Section 4 have been tested on them. Performance is measured using two metrics: the average error across all tasks, and the number of failed tasks (more than 5% error). We used version 1.2 of the dataset with 10k samples.\nTraining Details We used a similar training setup as (Sukhbaatar et al., 2015). All models were trained with ADAM using a learning rate of \u03b7 = 0.01, which was divided by 2 every 25 epochs until 200 epochs were reached. Copying previous works (Sukhbaatar et al., 2015; Xiong et al., 2016), the capacity of the memory was limited to the most recent 70 sentences, except for task 3 which was limited to 130 sentences. Due to the high variance in model performance for some tasks, for each task we conducted 10 runs with different initializations and picked the best model based on performance on the validation set, as it has been done in previous work. In all experiments, our model had embedding dimension size d = 100 and 20 memory slots.\nIn Table 2 we compare our model to various other state-of-the-art models in the literature: the larger MemN2N reported in the appendix of (Sukhbaatar et al., 2015), the Dynamic Memory Network of (Xiong et al., 2016), the Dynamic Neural Turing Machine (Gulcehre et al., 2016), the Neural Turing Machine (Graves et al., 2014) and the Differentiable Neural Computer (Graves et al., 2016). Our\nmodel is able to solve all the tasks, outperforming the other models in terms of both the number of solved tasks and the average error.\nTo analyze what kind of representations our model can learn, we conducted an additional experiment on Task 2 using a simple BoW sentence encoding and key vectors which were tied to entity embeddings. This was designed to make the model more interpretable, since the weight tying forces memory slots to encode information about specific entities. 1 After training, we ran the model over a story and computed the cosine distance between \u03c6(Hhj) and each row ri of the decoder matrix R. This gave us a score which measures the affinity between a given memory slot and each word in the vocabulary. Table 3 shows the nearest neighboring words for each memory slot (which itself corresponds to an entity). We see that the model has indeed stored locations of all of the objects and characters in its memory slots which reflect the final state of the story. In particular, it has the correct answer readily stored in the memory slot of the entity being inquired about (the milk). It also has correct location information about all other non-location entities stored in the appropriate memory slots. Note that it does not store useful or correct information in the memory slots corresponding to locations, most likely because this task does not contain questions about locations (such as \u201cwho is in the kitchen?\u201d)."}, {"heading": "5.3 CHILDREN\u2019S BOOK TEST (CBT)", "text": "We next evaluated our model on the Children\u2019s Book Test (Hill et al., 2016), which is a semantic language modeling (sentence completion) benchmark built from children\u2019s books that are freely available from Project Gutenberg 2. Models are required to read 20 consecutive sentences from a\n1For most tasks including this one, tying key vectors did not significantly change performance, although it hurt in a few cases (see Appendix C). Therefore we did not apply it in Table 2\n2www.gutenberg.org\ngiven story and use this context to fill in a missing word from the 21st sentence. More specifically, each sample consists of a tuple (S, q, C, a) where S is the story consisting of 20 sentences, Q is the 21st sentence with one word replaced by a special blank token, C is a set of 10 candidate answers of the same type as the missing word (for example, common nouns or named entities), and a is the true answer (which is always contained in C).\nIt was shown in (Hill et al., 2016) that methods with limited memory such as LSTMs perform well on more frequent, syntax based words such as prepositions and verbs, being similar to human performance, but poorly relative to humans on more semantically meaningful words such as named entities and common nouns. Therefore, most recent methods have been evaluated on the Named Entity and Common Noun subtasks, since they better test the ability of a model to make use of wider contextual information.\nTraining Details We adopted the same window memory approach used in (Hill et al., 2016), where each input corresponds to a window of text from {w(i\u2212b\u22121/2)...wi...w(i+(b\u22121)/2)} centered at a candidate wi \u2208 C. In our experiments we set b = 5. All models were trained using standard stochastic gradient descent (SGD) with a fixed learning rate of 0.001. We used separate input encodings for the update and gating functions, and applied a dropout rate of 0.5 to the word embedding dimensions. Key embeddings were tied to the embeddings of the candidate words, resulting in 10 hidden blocks, one per member of C. Due to the weight tying, we did not need a decoder matrix and used the distribution over candidates to directly produce a prediction, as described in Section 3.\nWe found that a simpler version of the model worked best, with U = V = 0, W = I and \u03c6 equal to the identity. We also removed the normalization step in this simplified model, which we found to hurt performance. This can be explained by the fact that the maximum frequency baseline model in (Hill et al., 2016) has performance which is significantly higher than random, and including the normalization step hides this useful frequency-based information.\nResults We draw a distinction between two setups: the single-pass setup, where the model must read the story and query in order and immediately produce an output, and the multi-pass setup, where the model can use the query to perform attention over the story. The first setup is more challenging because the model does not know beforehand which query it will be presented with, and must learn to retain information which is useful for a wide variety of potential queries. For this reason it can be viewed as a test of the model\u2019s ability to construct a general-purpose representation of the current state of the story. The second setup leverages all available information, and allows the model to use knowledge of which question will be asked when it reads the story.\nIn Table 4, we show the performance of the general EntNet, the simplified EntNet, as well as other single-pass models taken from (Hill et al., 2016). The general EntNet performs better than the LSTMs and n-gram model on the Named Entities Task, but lags behind on the Common Nouns task. The simplified EntNet outperforms all other single-pass models on both tasks, and also performs better than the Memory Network which does not use the self-supervision heuristic. However,\nthere is still a performance gap when compared to more sophisticated machine comprehension models, many of which perform multiple layers of attention over the story using query knowledge. The fact that the simplified EntNet is able to obtain decent performance is encouraging since it indicates that the model is able to build an internal representation of the story which it can then use to answer a relatively diverse set of queries."}, {"heading": "6 CONCLUSION", "text": "Two closely related challenges in artificial intelligence are designing models which can maintain an estimate of the state of a world with complex dynamics over long timescales, and models which can predict the forward evolution of the state of the world from partial observation. In this paper, we introduced the Recurrent Entity Network, a new model that makes a promising step towards the first goal. Our model is able to accurately track the world state while reading text stories, which enables it to set a new state-of-the-art on the bAbI tasks, the competitive benchmark of story understanding, by being the first model to solve them all. We also showed that our model is able to capture simple dynamics over long timescales, and is able to perform competitively on a real-world dataset.\nAlthough our model was able to solve all the bAbI tasks using 10k training samples, we found that performance dropped considerably when using only 1k samples (see Appendix). Most recent work on the bAbI tasks has focused on the 10k samples setting, and we would like to emphasize that solving them in the 1k samples setting remains an open problem which will require improving the sample efficiency of reasoning models, including ours.\nRecent works have made some progress towards the second goal of forward modeling, for instance in capturing simple physics (Lerer et al., 2016), predicting future frames in video (Mathieu et al., 2015) or responses in dialog (Weston, 2016). Although we have only applied our model to tasks with textual inputs in this work, the architecture is general and future work should investigate how to combine the EntNet\u2019s tracking abilities with such predictive models."}, {"heading": "A TRAINING DETAILS", "text": "All models were implemented using Torch (Collobert et al., 2011). In all experiments, we initialized our model by drawing weights from a Gaussian distribution with mean zero and standard deviation 0.1, except for the PReLU slopes and encoder weights which were initialized to 1. Note that the PReLU initialization is related to two of the heuristics used in (Sukhbaatar et al., 2015), namely starting training with a purely linear model, and adding non-linearities to half of the hidden units. Our initialization allows the model to choose when and how much to enter the non-linear regime. Initializing the encoder weights to 1 corresponds to beginning with a BoW encoding, which the model can then choose to modify. The initial values of the memory slots were initialized to the key values, which we found to help performance. Optimization was done with SGD or ADAM using minibatches of size 32, and gradients with norm greater than 40 were clipped to 40. A null symbol whose embedding was constrained to be zero was used to pad all sentences or windows to a fixed size."}, {"heading": "B DETAILS OF WORLD MODEL EXPERIMENTS", "text": "Two agents are initially placed at random on a 10 \u00d7 10 grid with 100 distinct locations {(1, 1), (1, 2), ...(9, 10), (10, 10)}. At each time step an agent is chosen at random. There are two types of actions: the agent can face a given direction, or can move a number of steps ahead. Actions are sampled until a legal action is found by either choosing to change direction or move with equal probability. If they change direction, the direction is chosen between north, south, east and west with equal probability. If they move, the number of steps is randomly chosen between 1 and 5. A legal action is one which does not place the agent off the grid. Stories are given to the network in textual form, an example of which is below. The first action after each agent is placed on the grid is to face a given direction. Therefore, the maximum number of actions made by one agent is T \u2212 2. The network learns word embeddings for all words in the vocabulary such as locations, agent identifiers\nand actions. At question time, the model must predict the correct answer (which will always be a location) from all the tokens in the vocabulary.\nagent1 is at (2,8) agent1 faces-N agent2 is at (9,7) agent2 faces-N agent2 moves-2 agent2 faces-E agent2 moves-1 agent1 moves-1 agent2 faces-S agent2 moves-5"}, {"heading": "Q1: where is agent1 ?", "text": ""}, {"heading": "Q2: where is agent2 ?", "text": ""}, {"heading": "A1: (2,9)", "text": ""}, {"heading": "A2: (10,4)", "text": ""}, {"heading": "C ADDITIONAL RESULTS ON BABI TASKS", "text": "We provide some additional experiments on the bAbI tasks, in order to better understand the influence of architecture, weight tying, and amount of training data. Table 5 shows results when a simple BoW encoding is used for the inputs. Here, the EntNet still performs better than a MemN2N which uses the same encoding scheme, indicating that the architecture has an important effect. Tying the key vectors to entities did not help, and hurt performance for some tasks. Table 6 shows results when using only 1k training samples. In this setting, the EntNet performs worse than the MemN2N."}], "references": [{"title": "Gatedattention readers for text comprehension", "author": ["Bhuwan Dhingra", "Hanxiao Liu", "William Cohen", "Salakhutdinov", "Ruslan"], "venue": "CoRR, abs/1606.01549,", "citeRegEx": "Dhingra et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Dhingra et al\\.", "year": 2016}, {"title": "Hierarchical memory networks", "author": ["Chandar", "Sarath", "Ahn", "Sungjin", "Larochelle", "Hugo", "Vincent", "Pascal", "Tesauro", "Gerald", "Bengio", "Yoshua"], "venue": "arXiv preprint arXiv:1605.07427,", "citeRegEx": "Chandar et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chandar et al\\.", "year": 2016}, {"title": "On the properties of neural machine translation: Encoder-decoder approaches", "author": ["Cho", "Kyunghyun", "van Merrienboer", "Bart", "Bahdanau", "Dzmitry", "Bengio", "Yoshua"], "venue": "In Proceedings of SSST@EMNLP", "citeRegEx": "Cho et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Torch7: A matlab-like environment for machine", "author": ["Collobert", "Ronan", "Kavukcuoglu", "Koray", "Farabet", "Clment"], "venue": null, "citeRegEx": "Collobert et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Attentionover-attention neural networks for reading comprehension", "author": ["Cui", "Yiming", "Chen", "Zhipeng", "Wei", "Si", "Wang", "Shijin", "Liu", "Ting", "Hu", "Guoping"], "venue": "CoRR, abs/1607.04423,", "citeRegEx": "Cui et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cui et al\\.", "year": 2016}, {"title": "Hybrid computing using a neural network with dynamic external memory", "author": ["Graves", "Alex", "Wayne", "Greg", "Reynolds", "Malcolm", "Harley", "Tim", "Danihelka", "Ivo", "Grabska-Barwi\u0144ska", "Agnieszka", "Colmenarejo", "Sergio G\u00f3mez", "Grefenstette", "Edward", "Ramalho", "Tiago", "Agapiou", "John"], "venue": null, "citeRegEx": "Graves et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2016}, {"title": "Learning to transduce with unbounded memory", "author": ["Grefenstette", "Edward", "Hermann", "Karl Moritz", "Suleyman", "Mustafa", "Blunsom", "Phil"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Grefenstette et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Grefenstette et al\\.", "year": 2015}, {"title": "Dynamic neural turing machines with soft and hard addressing schemes", "author": ["Gulcehre", "Caglar", "Chandar", "Sarath", "Cho", "Kyunghyun", "Bengio", "Yoshua"], "venue": "CoRR, abs/1607.00036,", "citeRegEx": "Gulcehre et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Gulcehre et al\\.", "year": 2016}, {"title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "author": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"], "venue": "CoRR, abs/1502.01852,", "citeRegEx": "He et al\\.,? \\Q2015\\E", "shortCiteRegEx": "He et al\\.", "year": 2015}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations", "author": ["Hill", "Felix", "Bordes", "Antoine", "Chopra", "Sumit", "Weston", "Jason"], "venue": "In Proceedings of the International Conference on Learning Representations", "citeRegEx": "Hill et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hill et al\\.", "year": 2016}, {"title": "Long short-term memory", "author": ["Hochreiter", "Sepp", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural Comput.,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "Inferring algorithmic patterns with stack-augmented recurrent nets", "author": ["Joulin", "Armand", "Mikolov", "Tomas"], "venue": "arXiv preprint arXiv:1503.01007,", "citeRegEx": "Joulin et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Joulin et al\\.", "year": 2015}, {"title": "Text understanding with the attention sum reader network", "author": ["Kadlec", "Rudolf", "Schmid", "Martin", "Bajgar", "Ondrej", "Kleindienst", "Jan"], "venue": "CoRR, abs/1603.01547,", "citeRegEx": "Kadlec et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kadlec et al\\.", "year": 2016}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Diederik P", "Ba", "Jimmy"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Learning physical intuition of block towers by example", "author": ["Lerer", "Adam", "Gross", "Sam", "Fergus", "Rob"], "venue": "In Proceedings of the 33nd International Conference on Machine Learning,", "citeRegEx": "Lerer et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Lerer et al\\.", "year": 2016}, {"title": "Gated graph sequence neural networks", "author": ["Li", "Yujia", "Tarlow", "Daniel", "Brockschmidt", "Marc", "Zemel", "Richard S"], "venue": "CoRR, abs/1511.05493,", "citeRegEx": "Li et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Li et al\\.", "year": 2015}, {"title": "Deep multi-scale video prediction beyond mean square", "author": ["Mathieu", "Micha\u00ebl", "Couprie", "Camille", "LeCun", "Yann"], "venue": "error. CoRR,", "citeRegEx": "Mathieu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mathieu et al\\.", "year": 2015}, {"title": "Key-value memory networks for directly reading documents", "author": ["Miller", "Alexander", "Fisch", "Adam", "Dodge", "Jesse", "Karimi", "Amir-Hossein", "Bordes", "Antoine", "Weston", "Jason"], "venue": "arXiv preprint arXiv:1606.03126,", "citeRegEx": "Miller et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Miller et al\\.", "year": 2016}, {"title": "Reasoning with memory augmented neural networks for language comprehension", "author": ["Munkhdalai", "Tsendsuren", "Yu", "Hong"], "venue": "CoRR, abs/1610.06454,", "citeRegEx": "Munkhdalai et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Munkhdalai et al\\.", "year": 2016}, {"title": "Endto-end memory networks", "author": ["Sukhbaatar", "Sainbayar", "szlam", "arthur", "Weston", "Jason", "Fergus", "Rob"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Sukhbaatar et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Sukhbaatar et al\\.", "year": 2015}, {"title": "Learning multiagent communication with backpropagation", "author": ["Sukhbaatar", "Sainbayar", "Szlam", "Arthur", "Fergus", "Rob"], "venue": "CoRR, abs/1605.07736,", "citeRegEx": "Sukhbaatar et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Sukhbaatar et al\\.", "year": 2016}, {"title": "Natural language comprehension with the epireader", "author": ["Trischler", "Adam", "Ye", "Zheng", "Yuan", "Xingdi", "Suleman", "Kaheer"], "venue": "CoRR, abs/1606.02270,", "citeRegEx": "Trischler et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Trischler et al\\.", "year": 2016}, {"title": "Dialog-based language learning", "author": ["Weston", "Jason"], "venue": "CoRR, abs/1604.06045,", "citeRegEx": "Weston and Jason.,? \\Q2016\\E", "shortCiteRegEx": "Weston and Jason.", "year": 2016}, {"title": "Towards ai-complete question answering: A set of prerequisite toy tasks", "author": ["Weston", "Jason", "Bordes", "Antoine", "Chopra", "Sumit", "Mikolov", "Tomas"], "venue": "CoRR, abs/1502.05698,", "citeRegEx": "Weston et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Weston et al\\.", "year": 2015}, {"title": "Dynamic memory networks for visual and textual question answering", "author": ["Xiong", "Caiming", "Merity", "Stephen", "Socher", "Richard"], "venue": "In ICML,", "citeRegEx": "Xiong et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Xiong et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 19, "context": "For language understanding tasks, it can reason on-the-fly as it reads text, not just when it is required to answer a question or respond as is the case for a Memory Network (Sukhbaatar et al., 2015).", "startOffset": 174, "endOffset": 199}, {"referenceID": 23, "context": "The EntNet is able to solve all 20 bAbI question-answering tasks (Weston et al., 2015), a popular benchmark of story understanding, which to our knowledge sets a new state-of-the-art.", "startOffset": 65, "endOffset": 86}, {"referenceID": 19, "context": "We also introduce a new reasoning task which, unlike the bAbI tasks, requires a model to use a large number of supporting facts to answer the question, and show that the EntNet outperforms both LSTMs and Memory Networks (Sukhbaatar et al., 2015) by a significant margin.", "startOffset": 220, "endOffset": 245}, {"referenceID": 9, "context": "Finally, our model also obtains competitive results on the Childrens Book Test (Hill et al., 2016), and performs best among models that read the text in a single pass before receiving knowledge of the question.", "startOffset": 79, "endOffset": 98}, {"referenceID": 19, "context": "Note that the model can choose to adopt a standard BoW representation by setting all weights in the multiplicative mask to 1, or can choose a positional encoding model as used in (Sukhbaatar et al., 2015).", "startOffset": 179, "endOffset": 204}, {"referenceID": 8, "context": "The function \u03c6 can be chosen from any number of activation functions, in our experiments we use either parametric ReLU non-linearities (He et al., 2015) or the identity.", "startOffset": 135, "endOffset": 152}, {"referenceID": 19, "context": "The output module can be viewed as a one-hop Memory Network (Sukhbaatar et al., 2015) with an additional non-linearity \u03c6 between the internal state and the decoder matrix.", "startOffset": 60, "endOffset": 85}, {"referenceID": 2, "context": "The EntNet is related to gated recurrent models such as the LSTM (Hochreiter & Schmidhuber, 1997) and GRU (Cho et al., 2014), which also use gates to fix or modify the information stored in the hidden state.", "startOffset": 106, "endOffset": 124}, {"referenceID": 19, "context": "Our model is similar to a Memory Network and its variants (Weston et al., 2014; Sukhbaatar et al., 2015; Chandar et al., 2016; Miller et al., 2016) in the way it produces an output using a softmax over blocks of hidden states, and our encoding layer is inspired by techniques used in those works.", "startOffset": 58, "endOffset": 147}, {"referenceID": 1, "context": "Our model is similar to a Memory Network and its variants (Weston et al., 2014; Sukhbaatar et al., 2015; Chandar et al., 2016; Miller et al., 2016) in the way it produces an output using a softmax over blocks of hidden states, and our encoding layer is inspired by techniques used in those works.", "startOffset": 58, "endOffset": 147}, {"referenceID": 17, "context": "Our model is similar to a Memory Network and its variants (Weston et al., 2014; Sukhbaatar et al., 2015; Chandar et al., 2016; Miller et al., 2016) in the way it produces an output using a softmax over blocks of hidden states, and our encoding layer is inspired by techniques used in those works.", "startOffset": 58, "endOffset": 147}, {"referenceID": 24, "context": "The Dynamic Memory Network of (Xiong et al., 2016) also performs updates via a recurrent model, however it links memories to input tokens and updates them sequentially rather than in parallel.", "startOffset": 30, "endOffset": 50}, {"referenceID": 15, "context": "The weight tying scheme and the parallel gated RNNs recall the gated graph network of (Li et al., 2015).", "startOffset": 86, "endOffset": 103}, {"referenceID": 20, "context": "The CommNN model of (Sukhbaatar et al., 2016) also uses a set of parallel recurrent models with tied weights, but differs from our model in their use of inter-network communication and the lack of a gating mechanism.", "startOffset": 20, "endOffset": 45}, {"referenceID": 6, "context": "Finally, there is another class of recent models that have a writeable memory arranged as (unbounded) stacks, linked lists or queues (Joulin & Mikolov, 2015; Grefenstette et al., 2015).", "startOffset": 133, "endOffset": 184}, {"referenceID": 23, "context": "We next evaluate our model on the bAbI tasks, which are a collection of 20 synthetic questionanswering datasets first introduced in (Weston et al., 2015) designed to test a wide variety of reasoning abilities.", "startOffset": 132, "endOffset": 153}, {"referenceID": 19, "context": "Training Details We used a similar training setup as (Sukhbaatar et al., 2015).", "startOffset": 53, "endOffset": 78}, {"referenceID": 19, "context": "Copying previous works (Sukhbaatar et al., 2015; Xiong et al., 2016), the capacity of the memory was limited to the most recent 70 sentences, except for task 3 which was limited to 130 sentences.", "startOffset": 23, "endOffset": 68}, {"referenceID": 24, "context": "Copying previous works (Sukhbaatar et al., 2015; Xiong et al., 2016), the capacity of the memory was limited to the most recent 70 sentences, except for task 3 which was limited to 130 sentences.", "startOffset": 23, "endOffset": 68}, {"referenceID": 19, "context": "In Table 2 we compare our model to various other state-of-the-art models in the literature: the larger MemN2N reported in the appendix of (Sukhbaatar et al., 2015), the Dynamic Memory Network of (Xiong et al.", "startOffset": 138, "endOffset": 163}, {"referenceID": 24, "context": ", 2015), the Dynamic Memory Network of (Xiong et al., 2016), the Dynamic Neural Turing Machine (Gulcehre et al.", "startOffset": 39, "endOffset": 59}, {"referenceID": 7, "context": ", 2016), the Dynamic Neural Turing Machine (Gulcehre et al., 2016), the Neural Turing Machine (Graves et al.", "startOffset": 43, "endOffset": 66}, {"referenceID": 5, "context": ", 2014) and the Differentiable Neural Computer (Graves et al., 2016).", "startOffset": 47, "endOffset": 68}, {"referenceID": 9, "context": "We next evaluated our model on the Children\u2019s Book Test (Hill et al., 2016), which is a semantic language modeling (sentence completion) benchmark built from children\u2019s books that are freely available from Project Gutenberg 2.", "startOffset": 56, "endOffset": 75}, {"referenceID": 9, "context": "It was shown in (Hill et al., 2016) that methods with limited memory such as LSTMs perform well on more frequent, syntax based words such as prepositions and verbs, being similar to human performance, but poorly relative to humans on more semantically meaningful words such as named entities and common nouns.", "startOffset": 16, "endOffset": 35}, {"referenceID": 9, "context": "Training Details We adopted the same window memory approach used in (Hill et al., 2016), where each input corresponds to a window of text from {w(i\u2212b\u22121/2).", "startOffset": 68, "endOffset": 87}, {"referenceID": 9, "context": "This can be explained by the fact that the maximum frequency baseline model in (Hill et al., 2016) has performance which is significantly higher than random, and including the normalization step hides this useful frequency-based information.", "startOffset": 79, "endOffset": 98}, {"referenceID": 9, "context": "In Table 4, we show the performance of the general EntNet, the simplified EntNet, as well as other single-pass models taken from (Hill et al., 2016).", "startOffset": 129, "endOffset": 148}, {"referenceID": 12, "context": "630 Attention Sum Reader (Kadlec et al., 2016) 0.", "startOffset": 25, "endOffset": 46}, {"referenceID": 21, "context": "639 EpiReader (Trischler et al., 2016) 0.", "startOffset": 14, "endOffset": 38}, {"referenceID": 4, "context": "674 AoA Reader (Cui et al., 2016) 0.", "startOffset": 15, "endOffset": 33}, {"referenceID": 14, "context": "Recent works have made some progress towards the second goal of forward modeling, for instance in capturing simple physics (Lerer et al., 2016), predicting future frames in video (Mathieu et al.", "startOffset": 123, "endOffset": 143}, {"referenceID": 16, "context": ", 2016), predicting future frames in video (Mathieu et al., 2015) or responses in dialog (Weston, 2016).", "startOffset": 43, "endOffset": 65}], "year": 2016, "abstractText": "We introduce a new model, the Recurrent Entity Network (EntNet). It is equipped with a dynamic long-term memory which allows it to maintain and update a representation of the state of the world as it receives new data. For language understanding tasks, it can reason on-the-fly as it reads text, not just when it is required to answer a question or respond as is the case for a Memory Network (Sukhbaatar et al., 2015). Like a Neural Turing Machine or Differentiable Neural Computer (Graves et al., 2014; 2016) it maintains a fixed size memory and can learn to perform location and content-based read and write operations. However, unlike those models it has a simple parallel architecture in which several memory locations can be updated simultaneously. The EntNet sets a new state-of-the-art on the bAbI tasks, and is the first method to solve all the tasks in the 10k training examples setting. We also demonstrate that it can solve a reasoning task which requires a large number of supporting facts, which other methods are not able to solve, and can generalize past its training horizon. It can also be practically used on large scale datasets such as Children\u2019s Book Test, where it obtains competitive performance, reading the story in a single pass.", "creator": "LaTeX with hyperref package"}}}