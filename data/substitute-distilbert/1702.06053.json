{"id": "1702.06053", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Feb-2017", "title": "Learning to Multi-Task by Active Sampling", "abstract": "one of the long - standing challenges in artificial intelligence calls to build a single agent which can solve everyday tasks. recent progress in multi - task learning for learning behavior in many goal - directed sequential tasks has been in the form of distillation based learning wherein a single resource network learns from multiple site - specific teacher networks by mimicking the environment - specific policies of the teacher educators. there has also been progress in the form of progressive networks which seek to overcome the catastrophic forgetting achieved from gating mechanisms. we propose a simple yet efficient multi - site framework which solves many tasks in an online or active task approach.", "histories": [["v1", "Mon, 20 Feb 2017 16:31:56 GMT  (1939kb,D)", "http://arxiv.org/abs/1702.06053v1", "9 pages"], ["v2", "Tue, 21 Feb 2017 04:38:43 GMT  (1945kb,D)", "http://arxiv.org/abs/1702.06053v2", "9 pages"], ["v3", "Sat, 25 Feb 2017 08:49:45 GMT  (1981kb,D)", "http://arxiv.org/abs/1702.06053v3", "10 pages + 3 page appendix"], ["v4", "Sun, 21 May 2017 12:47:34 GMT  (8403kb,D)", "http://arxiv.org/abs/1702.06053v4", "11 pages + 30 page appendix"]], "COMMENTS": "9 pages", "reviews": [], "SUBJECTS": "cs.NE cs.LG", "authors": ["sahil sharma", "ashutosh jha", "parikshit hegde", "balaraman ravindran"], "accepted": false, "id": "1702.06053"}, "pdf": {"name": "1702.06053.pdf", "metadata": {"source": "META", "title": "Online Multi-Task Learning Using Biased Sampling", "authors": ["Sahil Sharma", "Balaraman Ravindran"], "emails": ["<ssahil08@gmail.com>,", "<ravi@cse.iitm.ac.in>."], "sections": [{"heading": "1. Introduction", "text": "The field of Reinforcement Learning (RL) (Sutton & Barto, 1998) is concerned with learning goal-directed behavior in sequential decision problems using only a scalar reward signal as feedback. Traditional RL algorithms like Q-Learning (Watkins & Dayan, 1992) lack the ability to generalize to unseen states because they maintain value estimates for every single state-action pair (refer to (Sutton & Barto, 1998) for a good introduction to Markov Decision Processes (MDPs) in the context of RL). The field of Deep Reinforcement Learning (DRL) allows one to combine the representation power of Deep learning (DL) with the use of RL objective functions. Such combinations of DL and RL have resulted in agents which can solve complex visual control problems directly from pixels (Mnih et al., 2015; 2016; Schaul et al., 2015; Lillicrap et al., 2015). However models learnt by such algorithms tend to be taskspecific. A usual model trained using a DRL algorithm to solve the game of Sea Quest in the Atari 2600 emulator ALE (Bellemare et al., 2013) cannot play the game of\n1Indian Institute of Technology, Madras. Correspondence to: Sahil Sharma <ssahil08@gmail.com>, Balaraman Ravindran <ravi@cse.iitm.ac.in>.\nSpace Invaders. This implies that solving multiple tasks requires one to train many different agents and being able to solve all the tasks would require the multi-task agent to remember all the learnt networks. This inability of the AI agents to generalize across tasks gives rise to the field of multi-task learning which seeks to find a single agent (in the case of DRL algorithms, a single deep neural network) which can perform well on all the tasks. Multi-task learning refers to the concept of a single AI agent solving multiple tasks. The ability to solve multiple tasks comes naturally to humans and other forms of intelligence and thus it has been postulated that multi-task learning is a necessary characteristic of any General-purpose Artificial Intelligence. Such a multi-tasking agent would possess the ability to generalize learning across tasks and thus would be a necessary first step towards achieving general purpose artificial intelligence. Successful DRL approaches to the goal-directed multitasking problem fall into two categories. On the one hand are approaches which seek to condense the prowess of multiple task-specific teacher networks into a single student network. The Policy Distillation framework (Rusu et al., 2015) and Actor-Mimic Networks (Parisotto et al., 2015) fall into this category of approaches. The core idea is the same in both the works. One trains k task-specific teacher networks and then distills the individual task-specific policies learnt by the teacher networks into a single student network which is trained using supervised learning. The learning objective for the student network is a cross-entropy loss between it\u2019s probability distribution for action selection and that of the corresponding teacher network, with the teacher\u2019s probability distribution for action selection serving as the target towards which one trains the student probability distribution to move. These approaches require teacher networks which are task-specific Deep Q-Networks (Mnih et al., 2015).\nThe teacher network\u2019s action selection probability distribution is derived from the learnt Q-function using a temperature hyper-parameter. An important problem with such approaches is that they require many teacher networks which means that one must first train k task-specific networks successfully before one can train a student network which performs the all the tasks. Such a training of all the teacher networks tends to be extremely resource intensive and of-\nar X\niv :1\n70 2.\n06 05\n3v 1\n[ cs\n.N E\n] 2\n0 Fe\nb 20\n17\nten infeasible with growing k. Another category of approaches for multi-tasking build networks which progressively learn to solve each successive task. Progressive networks (Rusu et al., 2016) represent one such framework. While Progressive Networks certainly allow multi-task learning in a sequential manner, the framework instantiates a task-specific column network for each new task. This implies that the number of parameters grows with a large linear factor with each new task. This limits the scalability of the approach with the results presented in the work being limited to a maximum of 4 tasks only. Another problem with this approach is the crucial decision of which order to train on the tasks in. In this work we present the first successful reinforcement learning approach towards multi-tasking which operates in an online setting. By this, we mean that our approach never stops learning on any of the tasks and does not require supervision in the form of teacher or expert networks\u2019 action probabilities or action values."}, {"heading": "2. Background", "text": "In this section, we describe the actor-critic algorithm and the A3C algorithm."}, {"heading": "2.1. Actor Critic Algorithms", "text": "Generally, reinforcement learning agents are not provided with a model of the environment (the specification of the underlying MDP) and must either learn optimal control in a model free way, or build a model of the environment. One of the model-free ways of learning optimal control in RL is through the use of actor critic algorithms. While actor critic algorithms can in general be non-parametric and offpolicy, we describe a parametric on-policy version of the algorithms here. These approaches consist of two separate components: an actor and a critic. The actor is a parametric function (\u03c0\u03b8a(at|st)) mapping from states in the state space to an explicit policy (which is a probability distribution over actions which can be executed in current state) according to which the RL agent acts. The basis for the improvement of the policy (the actor objective function) comes from the stochastic policy gradient (SPG) theorem (Sutton et al., 1999), although actor critic algorithms pre-date the SPG theorem. The actor\u2019s objective function is:\nL(\u03b8a) = log \u03c0\u03b8a(at|st)(Q(st, at)\u2212 b(st))\nwhere action at was executed in state st. Q(st, at) is the action value function associated with the execution of at in st and captures the cumulative discounted future rewards the agent would receive by executing at in st and thereafter following the current policy. b(st) is a state-dependent baseline for cumulative discounted future rewards.\nThe critic is used for estimating Q(st, at) and possibly the state dependent baseline b(st). Often, the baseline chosen is the value function of the state, V (st). In this case, we could get a biased estimate for Q(st, at) by approximating it as rt+1 + \u03b3V (st+1) where \u03b3 is the discounting factor. This kind of a biased estimate allows the critic to get away with modeling just the state value function and not modeling the action value function directly. The critic is trained using temporal difference learning algorithms like TD(0) (Sutton & Barto, 1998). The objective function for the critic is:\nL\u03b8c = (V\u0302 (st)\u2212 V\u03b8c(st)2\nwhere V\u0302 (st) is a bootstrapped estimate for the value function of the state st based on the value function of the next state st+1. Accordingly we have:\nV\u0302 (st) = rt+1 + \u03b3V (st+1)"}, {"heading": "2.2. Asynchronous Advantage Actor Critic", "text": "On-policy reinforcement learning algorithms are hard to implement with deep neural networks as function approximators. This is because the on-policy nature of the algorithms makes consecutive updates to the parameters correlated which breaks assumptions made by popular gradient algorithms like stochastic gradient descent about the data: that the training data is independently and identically distributed.\nThis problem was solved to a large extent by the Asynchronous Advantage Actor Critic (A3C) Algorithm (Mnih et al., 2016) by executing multiple versions of the actor and critic networks asynchronously and gathering parameter updates in parallel. The asynchronous nature of the algorithm means that the multiple different actor threads explore different parts of the state space and hence the updates made to the parameters are de-correlated. The parameter updates from various different threads are applied to a global parameter vector which ensures that learning is pooled across different threads. The algorithm uses the baseline and modeling choices for Q(st, at) which were discussed in the previous subsection. This implies that effectively, the objective function for the actor is:\nL(\u03b8a) = log \u03c0\u03b8a(at|st)(Q(st, at)\u2212 V (st))\n\u21d2 L(\u03b8a) = log \u03c0\u03b8a(at|st)A(st, at) whereA(st, at) = Q(st, at)\u2212V (st) is the advantage function and captures the advantage of taking action at in state st. Thus the name Asynchronous Advantage Actor Critic."}, {"heading": "3. Model Definition", "text": "We demonstrate our method with the help of LSTM version of the A3C algorithm (Mnih et al., 2016). Figure\n1 contains an illustration of our method. To understand how our method works, one must first think about what a naive multi-tasking agent looks like and why/where it fails. We first describe a naive multi-tasking baseline A3C agent (called NA3C) and then describe our approach (Biasedsampling A3C - BA3C) as a modification of this baseline."}, {"heading": "3.1. NA3C", "text": "The NA3C multi-tasking agent is a single A3C network which learns to perform k tasks in an on-line learning fashion. The training period of an A3C agent can be broken down into discrete episodes since it is an on-policy learning algorithm (See (Sutton & Barto, 1998) for a discussion on on-policy and off-policy reinforcement learning algorithms). In a single-task A3C agent, the training data from the same task is used in every single episode. However in an on-policy multi-tasking agent based on A3C such as NA3C, at the termination of an episode, the agent must decide which task to train on next. We call such decision steps as task decision steps and these form the basis of our method. At every task decision step The NA3C agent decides uniformly at random, the particular task on which it will train next, for 1 episode. The training algorithm for\nAlgorithm 1 Naive Multi-Task Learning 1: function NAIVEMULTITASKING( SetOfTasks T ) 2: k\u2190 |T | 3: t\u2190 Total number of training steps for the\nalgorithm 4: bmta\u2190 the naive baseline multi-tasking agent 5: for i in {1, \u00b7 \u00b7 \u00b7 , k} do 6: pi \u2190 1k 7: for train steps:0 to t do 8: j \u2190 j \u223c pi. Identity of next task to train on 9: scorej \u2190 bsmta.train for one episode(Tj)\nNA3C is given as Algorithm 1.\nNaive baseline agents such as NA3C have been experimented with in the context of DQNs by works such as (Parisotto et al., 2015) and (Rusu et al., 2015). The general conclusion seems to be that such naive baselines perform poorly. We reach a similar conclusion in our work as well. As we demonstrate in the next section, such an approach does not lead to a high performance multi-tasking agent. We believe that this is because the probability distribution according to which the agent decides which task to train\non next is an important factor which determines the extent of multi-tasking abilities of the trained agent. A uniform probability distribution does not take into account the fact that some tasks are just harder to learn than others.\nAlgorithm 2 Biased Sampling based Multi-Task Learning 1: function MULTITASKING( SetOfTasks T ) 2: k\u2190 |T | 3: bi\u2190 Baseline score in task Ti. This could be based\non expert human performance or even published scores from other technical works\n4: n\u2190 Number of episodes which are used for estimating current average performance in any task Ti 5: l\u2190 Number of training steps for which uniformly random policy is executed for task selection. At the end of l training steps, the agent must have learnt on \u2265 n episodes \u2200 tasks Ti \u2208 T 6: t\u2190 Total number of training steps for the algorithm 7: si\u2190 list of the last n scores that the multi-tasking agent scored during training on task Ti. 8: pi \u2190 probability of training on an episode of task Ti next.\n9: bsmta\u2190 the biased sampling multi-tasking agent 10: \u03c4 \u2190 Temperature hyper-parameter of the softmax operation 11: for i in {1, \u00b7 \u00b7 \u00b7 , k} do 12: pi \u2190 1k 13: for train steps:0 to t do 14: if train steps \u2265 l then 15: for i in {1, \u00b7 \u00b7 \u00b7 , k} do 16: ai\u2190 si.average() 17: mi \u2190 bi\u2212aibi\u00d7\u03c4 18: pi \u2190 e\nmi\u2211k q=1 e mq\n19: j \u2190 j \u223c p. Identity of next task to train on 20: scorej \u2190 bsmta.train for one episode(Tj) 21: sj .push back(scorej) 22: if sj .length() > n then 23: sj .pop front()\nWe remedy this major drawback of naive baseline multitasking agents by proposing our approach: Biased Sampling A3C (BA3C)."}, {"heading": "3.2. BA3C", "text": "Our method is based on the abstract machine learning principle of active learning (Settles, 2010; Prince, 2004; Zhu, 2005). The core hypothesis which drives active learning\nin the usual machine learning contexts (such as classification problems) is that a machine learning algorithm can achieve better performance with fewer labeled training examples if it is allowed to choose the data from which it learns. An active learning algorithm can query an oracle (usually a human annotator) for labels of unlabeled data instances. Active learning is important for many modern machine learning methods (specially deep learning methods), wherein access to unlabeled data may be easy , but labeled data might be difficult to obtain (Settles, 2010). We present the first successful online multi-tasking deep reinforcement learning algorithm. This means that our method does not require access to the hidden features (Rusu et al., 2016) or the action-value predictions (Rusu et al., 2015; Parisotto et al., 2015) of multiple task-specific experts for being able to solve multiple tasks using a single machine learning agent. Our method is also data-efficient. By this we mean that all of our results are based on 50% of training data that would be necessary to even train taskspecific expert networks. Our agents are trained using only reinforcement learning end-to-end from raw pixel streams and are first to offer promising performance among such multi-tasking methods. Previous works (Parisotto et al., 2015; Rusu et al., 2016) have found it hard to train online multi-tasking agents which do not rely on expert supervision and are trained not using supervised learning algorithms but rather directly by maximizing the reward signals (that is, using reinforcement learning objectives). Biased sampling based online multi-task learning demonstrates that the use of an adaptive or biased sampling distribution in deciding the next task to train on acts as a form of active learning and results in a dramatic improvement in the performance of the multi-tasking agent over naive baselines. The architecture for our BA3C agents is the same as the NA3C agent. The only difference is in way the next task to train on is selected. Instead of selecting the next task to train on uniformly at random (which is what NA3C does), our method maintains an estimate of current performance as well as metrics for baseline performance, on each of the tasks that it needs to solve. By comparing the current performance to the baseline performance on each of it tasks that it needs to achieve, our method is able to make smarter decisions about where to allocate training resources next (that is, which task to train on text). We show empirically that such smart decision-making leads to significant increase in performance with respect to the baseline agents. Concretely, the training algorithm for BA3C is stated as Algorithm 2."}, {"heading": "4. Experimental Setup and Results", "text": "Agents in this work are trained using the LSTM version of the A3C algorithm (Mnih et al., 2016). Two of the hyperparameters that we tune for in the BA3C agents are \u03b2 (see\n(Mnih et al., 2016) for details) and \u03c4 which was introduced in the last section and controls the sharpness of the softmax operation from which we sample the identity of the next task to be trained on. For the baseline NA3C agents, we tune \u03b2.\nFor our method, we require setting the baseline scores as illustrated in Algorithm 2. Since the original A3C publication (Mnih et al., 2016) contains a different metric (human starts) for evaluation of performance as compared to raw task scores (which we would like to optimize for), we took the published baseline A3C scores from (Sharma et al., 2017) (Table 4) as baseline scores. In all the comparison graphs, ST-A3C refers to the performance of a single-task A3C agent. All the results in this work are for k = 6 tasks. Table 1 contains description of the various multitasking problems presented to agents in this work. All hyper-parameters throughout this work are tuned on MT1.\nIt is also to be noted that all the agents in this work were trained only for 300 million action decision steps which is 50% lower than the combined training steps for all the k = 6 tasks put together (single-task agents were trained for 100 million decision steps in (Sharma et al., 2017)). This section is broken into 5 subsections. In the first subsection we outline our evaluation strategies. In the second and third subsections we report the performance of two different type of architectures that we experimented with. The fourth subsection contains additional experiments which demonstrate the importance of the baseline scores bi to the proposed method. The last sub-section analyzes the evolution of the sampling distribution p, which is central to our method."}, {"heading": "4.1. Evaluation", "text": "In most previous works such as (Parisotto et al., 2015), the arithmetic mean of the performance of the multi-tasking agent on the different tasks is considered as the performance metric based on which the multi-tasking agent is\nevaluated. Concretely,\npam = ( k\u2211 i=1 ai bi )/ k\nwhere p is the performance metric, ai is the score of the multi tasking agent in task i, bi is the baseline score (of a single-task agent) in task i and the sub-script am depicts the fact that the arithmetic mean is computed. We argue that this metric is not robust enough. This is because a multi-tasking agent can achieve pam = 1 by being 6 times better than baseline on one of the tasks and being as bad as getting 0 score in all other tasks. A good multi-tasking agent which is as good as baseline single-task agents on all the 6 tasks would also end up having pam = 1. Hence, it becomes impossible to distinguish a good multi-tasking agent (latter) from a bad one (former) using this metric of average performance. To alleviate this problem, we define the following performance metric:\nqam = ( k\u2211 i=1 min ( ai bi , 1 ))/ k\nqam is a robust evaluation metric because the agent needs to be good in all the tasks in order to get a high score on this metric. We can similarly define geometric-mean and harmonic-mean based metrics as :\nqgm = k \u221a\u221a\u221a\u221a( k\u220f i=1 min ( ai bi , 1 )) and\nqhm = k /( k\u2211 i=1 max ( bi ai , 1 ))\nWe report performance of baseline agents and our agents on qam, qgm and qhm. Intuitively, optimizing for qhm while performing model selection would tend to penalize the multi-tasking agent for having extremely low performance on some of the tasks that it needs to solve. While optimizing for qam would lead to those models being selected which can get away with bad performance on some tasks as long as it is suitably compensated by high performance on other tasks. It is not clear a-priori that one of the metrics is better for judging the performance of a multitasking agent. Hence, the evaluation procedure followed throughout our work is as follows. The multi-tasking network is trained for 300 million steps. Every 3 million steps, it is evaluated on each of the 6 tasks for 10 episodes. These 100 evaluations are stored in a log file. After the completion of training, the best model according to each metric is selected separately and offline by directly maximizing for the metric. The performance is reported in Tables 2 and 3."}, {"heading": "4.2. Shared Output Head agents", "text": "In this type of multi-tasking agents, the behavior policy of the agent has a constant size equal to 18, the maximum possible number of actions in the Atari 2600 emulator. These agents must learn from the scratch using just the reward signal, the subset of actions which are relevant to a particular task. If action a is not relevant to task g, then executing a in any state while performing g would result in no movement at all and is the same as executing a no-op action. We call the BA3C version of these agents BA3CSH and the NA3C version of these agents NA3CSH. After hyper-parameter tuning, we found the best hyperparameters for BA3CSH to be \u03b2 = 0.02 and \u03c4 = 0.05. For NA3CSH the best hyper-parameter setting had \u03b2 = 0.01. The evolution of the performance of BA3CSH and NA3CSH agents with training progress is shown in Figure 2. As can be seen from Figure 2, for most of the tasks the BA3CSH agent does reasonably well. The performance of Shared-head agents (BA3CSH and NA3CSH) on all the multi tasking instances (MT1, MT2 and MT3) is shown in Table 2.\nIt is clear from table 2 that our method BA3C significantly out-performs the baseline method NA3C, specially if one would like to optimize for the performance of the multitasking agent on all the tasks."}, {"heading": "4.3. Different Output Head agents", "text": "Some works in multi-task learning (Parisotto et al., 2015) have experimented with baselines wherein most layers of the multi-tasking agent are shared across tasks (to enable\nthe learning of a task-agnostic common representation of the different state spaces) but the final layer is task-specific. We also experimented with such an agent which has an output head specific to each task. This agent is known as the BA3CDH agent. Architectures for BA3CSH and BA3CDH multi-tasking agents are exactly the same except for the following difference highlighted below. The only difference with respect to the BA3CSH architecture is that instead of a final 18-dimensional softmax layer, the 18 dimensional pre-softmax output vector is projected into k different vector subspaces where k is the number of tasks that BA3CDH is solving. The projection matrices (Wi\u2019s) are akin to a linear activation layer in a neural network and are learnt end to end along with the rest of the task. Let the 18-dimensional pre-softmax output of BA3CDH be denoted as v. Then the policy for task i is given by:\nzi =Wiv\n\u03c0ij = ezij\u2211 k e zik\nwhere \u03c0ij is the probability of picking action j in task i. Wi is a projection matrix for task i. The output size for head hi is the number of valid actions for task i. Hence, the total number of extra parameters introduced in BA3CDH agents (over and above BA3CSH agents) is only 18 \u2211k\u22121 i=0 |Ai| where Ai is the set of valid actions for task i. Hyperparameter tuning similar to previous subsection was performed on MT1. After hyper-parameter tuning, we found the best hyper-parameters for this agent to be \u03b2 = 0.02 and \u03b3 = 0.1. NA3CDH agents can be defined similar to the BA3CDH agents wherein uniform sampling is used for deciding the next task to train on. The best \u03b2 for NA3CDH agents was found to be \u03b2 = 0.1. The performance of the BA3CDH agent with respect to NA3CDH agent as well as single-task agents is shown in Figure 3.\nAs can be seen from Figure 3, for most tasks the BA3CDH agent does reasonably well, although the performance is in general worse than the BA3CSH agent. It is also to be noted that the BA3CDH agent was trained only for 300 million action decision steps which is 50% lower than the combined training steps for all the 6 tasks put together. The performance of Different-head agents (BA3CSH and NA3CSH) on all the multi tasking instances (MT1, MT2 and MT3) is shown in Table 3.\nIt is clear from table 3 that our method BA3C out-performs the baseline method NA3C, specially if one would like to optimize for the performance of the multi-tasking agent on all the tasks. However, the Shared-head versions (BA3CSH) perform strictly better than their different-head\ncounterparts (BA3CDH)."}, {"heading": "4.4. Importance of the baseline scores", "text": "The crucial part of our method is the use of baseline scores to appropriately keep track of the performance of the multitasking on the individual tasks for deciding the next task to train on. In this work, we have used the single-agent A3C performance as described in (Sharma et al., 2017).\nIn this section, we demonstrate what happens when the baseline scores (defined at step 3, Algorithm 2) used in our method are changed. Since the hyper-parameters were tuned on MT1, understandably, the performance of our agents is better on MT1 than MT2 or MT3. Hence we picked the multi-tasking instances MT2 and MT3 and experimented with doubling the baseline scores used in our method. For example, b5 , corresponding to the task of Gopher, part of MT2 was changed from 9400 to 18800. We\nwould expect such a change in bi\u2019s to lead to better performance since the agent would now not stop learning until it reaches the more aggressive baseline scores. Note that we did not tune the hyper-parameters for experiments in this sub-section. Such a tuning could potentially improve the performance. The experimental results are documented in Table 4 It can be seen that in every case, the doubling of the baseline scores improved the performance of our agents. In some cases, such as MT3 the improvement was noticeable."}, {"heading": "4.5. Analysis of Sampling Distribution p", "text": "Figure 4 contains the evolution of the sampling distribution p with respect to training progress, for a particular training thread. The sampling distribution p is snapshotted every\n1000 training steps. It is then averaged over 100 such successive snapshots to ensure that the curve is smooth. We can see from the graph that certain games that are hard to train on (such as Space Invaders) are sampled steadily more whereas those that are easy to train on such as Crazy Climber are sampled steadily lesser."}, {"heading": "5. Conclusion and Future Work", "text": "We propose a simple yet efficient way to train multi-tasking agents which through a form of active learning succeed in learning to perform online multi-task learning. The key insight of our work is that by choosing the task to train on next, a multi-tasking agent can choose to concentrate its resources on tasks which it currently performs badly. While we do not claim that our method solves the problem of online multi-task reinforcement learning definitively, we believe it is an important first step. In the current setup, the probability distribution which decides the next task to train on is adaptive but not learnt per se. A good next step in this direction would be to learn the probability distribution from which to sample the next episode for training, using an actor-critic meta-controller based setup. We leave it to future work to explore and experimentally validate such a setup."}], "references": [{"title": "The arcade learning environment: An evaluation platform for general agents", "author": ["Bellemare", "Marc G", "Naddaf", "Yavar", "Veness", "Joel", "Bowling", "Michael"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Bellemare et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bellemare et al\\.", "year": 2013}, {"title": "Continuous control with deep reinforcement learning", "author": ["Lillicrap", "Timothy P", "Hunt", "Jonathan J", "Pritzel", "Alexander", "Heess", "Nicolas", "Erez", "Tom", "Tassa", "Yuval", "Silver", "David", "Wierstra", "Daan"], "venue": "arXiv preprint arXiv:1509.02971,", "citeRegEx": "Lillicrap et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lillicrap et al\\.", "year": 2015}, {"title": "Human-level control through deep reinforcement learning", "author": ["Dharshan", "Wierstra", "Daan", "Legg", "Shane", "Hassabis", "Demis"], "venue": null, "citeRegEx": "Dharshan et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dharshan et al\\.", "year": 2015}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["Mnih", "Volodymyr", "Badia", "Adria Puigdomenech", "Mirza", "Mehdi", "Graves", "Alex", "Lillicrap", "Timothy P", "Harley", "Tim", "Silver", "David", "Kavukcuoglu", "Koray"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Mnih et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2016}, {"title": "Actor-mimic: Deep multitask and transfer reinforcement learning", "author": ["Parisotto", "Emilio", "Ba", "Jimmy Lei", "Salakhutdinov", "Ruslan"], "venue": "arXiv preprint arXiv:1511.06342,", "citeRegEx": "Parisotto et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Parisotto et al\\.", "year": 2015}, {"title": "Does active learning work? a review of the research", "author": ["Prince", "Michael"], "venue": "Journal of engineering education,", "citeRegEx": "Prince and Michael.,? \\Q2004\\E", "shortCiteRegEx": "Prince and Michael.", "year": 2004}, {"title": "Policy distillation", "author": ["Rusu", "Andrei A", "Colmenarejo", "Sergio Gomez", "Gulcehre", "Caglar", "Desjardins", "Guillaume", "Kirkpatrick", "James", "Pascanu", "Razvan", "Mnih", "Volodymyr", "Kavukcuoglu", "Koray", "Hadsell", "Raia"], "venue": "arXiv preprint arXiv:1511.06295,", "citeRegEx": "Rusu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Rusu et al\\.", "year": 2015}, {"title": "Prioritized experience replay", "author": ["Schaul", "Tom", "Quan", "John", "Antonoglou", "Ioannis", "Silver", "David"], "venue": "4th International Conference on Learning Representations,", "citeRegEx": "Schaul et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schaul et al\\.", "year": 2015}, {"title": "Active learning literature survey", "author": ["Settles", "Burr"], "venue": "University of Wisconsin, Madison,", "citeRegEx": "Settles and Burr.,? \\Q2010\\E", "shortCiteRegEx": "Settles and Burr.", "year": 2010}, {"title": "Introduction to reinforcement learning", "author": ["Sutton", "Richard S", "Barto", "Andrew G"], "venue": null, "citeRegEx": "Sutton et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 1998}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["Sutton", "Richard S", "McAllester", "David A", "Singh", "Satinder P", "Mansour", "Yishay"], "venue": "In NIPS,", "citeRegEx": "Sutton et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 1999}, {"title": "Semi-supervised learning literature survey", "author": ["Zhu", "Xiaojin"], "venue": null, "citeRegEx": "Zhu and Xiaojin.,? \\Q2005\\E", "shortCiteRegEx": "Zhu and Xiaojin.", "year": 2005}], "referenceMentions": [{"referenceID": 7, "context": "Such combinations of DL and RL have resulted in agents which can solve complex visual control problems directly from pixels (Mnih et al., 2015; 2016; Schaul et al., 2015; Lillicrap et al., 2015).", "startOffset": 124, "endOffset": 194}, {"referenceID": 1, "context": "Such combinations of DL and RL have resulted in agents which can solve complex visual control problems directly from pixels (Mnih et al., 2015; 2016; Schaul et al., 2015; Lillicrap et al., 2015).", "startOffset": 124, "endOffset": 194}, {"referenceID": 0, "context": "A usual model trained using a DRL algorithm to solve the game of Sea Quest in the Atari 2600 emulator ALE (Bellemare et al., 2013) cannot play the game of", "startOffset": 106, "endOffset": 130}, {"referenceID": 6, "context": "The Policy Distillation framework (Rusu et al., 2015) and Actor-Mimic Networks (Parisotto et al.", "startOffset": 34, "endOffset": 53}, {"referenceID": 4, "context": ", 2015) and Actor-Mimic Networks (Parisotto et al., 2015) fall into this category of approaches.", "startOffset": 33, "endOffset": 57}, {"referenceID": 10, "context": "The basis for the improvement of the policy (the actor objective function) comes from the stochastic policy gradient (SPG) theorem (Sutton et al., 1999), although actor critic algorithms pre-date the SPG theorem.", "startOffset": 131, "endOffset": 152}, {"referenceID": 3, "context": "This problem was solved to a large extent by the Asynchronous Advantage Actor Critic (A3C) Algorithm (Mnih et al., 2016) by executing multiple versions of the actor and critic networks asynchronously and gathering parameter updates in parallel.", "startOffset": 101, "endOffset": 120}, {"referenceID": 3, "context": "We demonstrate our method with the help of LSTM version of the A3C algorithm (Mnih et al., 2016).", "startOffset": 77, "endOffset": 96}, {"referenceID": 4, "context": "Naive baseline agents such as NA3C have been experimented with in the context of DQNs by works such as (Parisotto et al., 2015) and (Rusu et al.", "startOffset": 103, "endOffset": 127}, {"referenceID": 6, "context": ", 2015) and (Rusu et al., 2015).", "startOffset": 12, "endOffset": 31}, {"referenceID": 6, "context": ", 2016) or the action-value predictions (Rusu et al., 2015; Parisotto et al., 2015) of multiple task-specific experts for being able to solve multiple tasks using a single machine learning agent.", "startOffset": 40, "endOffset": 83}, {"referenceID": 4, "context": ", 2016) or the action-value predictions (Rusu et al., 2015; Parisotto et al., 2015) of multiple task-specific experts for being able to solve multiple tasks using a single machine learning agent.", "startOffset": 40, "endOffset": 83}, {"referenceID": 4, "context": "Previous works (Parisotto et al., 2015; Rusu et al., 2016) have found it hard to train online multi-tasking agents which do not rely on expert supervision and are trained not using supervised learning algorithms but rather directly by maximizing the reward signals (that is, using reinforcement learning objectives).", "startOffset": 15, "endOffset": 58}, {"referenceID": 3, "context": "Agents in this work are trained using the LSTM version of the A3C algorithm (Mnih et al., 2016).", "startOffset": 76, "endOffset": 95}, {"referenceID": 3, "context": "(Mnih et al., 2016) for details) and \u03c4 which was introduced in the last section and controls the sharpness of the softmax operation from which we sample the identity of the next task to be trained on.", "startOffset": 0, "endOffset": 19}, {"referenceID": 3, "context": "Since the original A3C publication (Mnih et al., 2016) contains a different metric (human starts) for evaluation of performance as compared to raw task scores (which we would like to optimize for), we took the published baseline A3C scores from (Sharma et al.", "startOffset": 35, "endOffset": 54}, {"referenceID": 4, "context": "In most previous works such as (Parisotto et al., 2015), the arithmetic mean of the performance of the multi-tasking agent on the different tasks is considered as the performance metric based on which the multi-tasking agent is evaluated.", "startOffset": 31, "endOffset": 55}, {"referenceID": 4, "context": "Some works in multi-task learning (Parisotto et al., 2015) have experimented with baselines wherein most layers of the multi-tasking agent are shared across tasks (to enable Table 2.", "startOffset": 34, "endOffset": 58}], "year": 2017, "abstractText": "One of the long-standing challenges in Artificial Intelligence for goal-directed behavior is to build a single agent which can solve multiple tasks. Recent progress in multi-task learning for learning behavior in many goal-directed sequential tasks has been in the form of distillation based learning wherein a single student network learns from multiple task-specific teacher networks by mimicking the task-specific policies of the teacher networks. There has also been progress in the form of Progressive Networks which seek to overcome the catastrophic forgetting problem using gating mechanisms. We propose a simple yet efficient Multi-Tasking framework which solves many tasks in an online or active learning setup.", "creator": "LaTeX with hyperref package"}}}