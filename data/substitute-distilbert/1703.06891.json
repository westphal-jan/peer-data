{"id": "1703.06891", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Mar-2017", "title": "Dance Dance Convolution", "abstract": "dance dance revolution ( ddr ) is a cooperative rhythm - level video game. players perform steps facing a dance platform in synchronization with music as directed by center - hand step charts. while analog step charts are available in standardized packs, users may grow tired of existing charts, or wish to dance to a song for which no indication exists. we introduce her task of learning to choreograph. given a raw audio track, the goal is to produce another new step chart. this task drops naturally into two subtasks : deciding when to execute which has determined which steps to select. for the step placement database, we utilized recurrent and convolutional neural networks to ingest spectrograms of low - level audio features to predict steps, counting on chart difficulty. for step selection, we present a conditional correlation generative model that substantially outperforms n - gram selective fixed - window approaches.", "histories": [["v1", "Mon, 20 Mar 2017 18:00:13 GMT  (1518kb,D)", "https://arxiv.org/abs/1703.06891v1", null], ["v2", "Wed, 22 Mar 2017 07:44:55 GMT  (1518kb,D)", "http://arxiv.org/abs/1703.06891v2", null], ["v3", "Wed, 21 Jun 2017 00:45:51 GMT  (1881kb,D)", "http://arxiv.org/abs/1703.06891v3", "Published as a conference paper at ICML 2017"]], "reviews": [], "SUBJECTS": "cs.LG cs.MM cs.NE cs.SD stat.ML", "authors": ["chris donahue", "zachary c lipton", "julian mcauley"], "accepted": true, "id": "1703.06891"}, "pdf": {"name": "1703.06891.pdf", "metadata": {"source": "META", "title": "Dance Dance Convolution", "authors": ["Chris Donahue", "Zachary C. Lipton", "Julian McAuley"], "emails": ["<cdonahue@ucsd.edu>."], "sections": [{"heading": "1. Introduction", "text": "Dance Dance Revolution (DDR) is a rhythm-based video game with millions of players worldwide (Hoysniemi, 2006). Players perform steps atop a dance platform, following prompts from an on-screen step chart to step on the platform\u2019s buttons at specific, musically salient points in time. A player\u2019s score depends upon both hitting the correct buttons and hitting them at the correct time. Step charts vary in difficulty with harder charts containing more steps and more complex sequences. The dance pad contains up, down, left, and right arrows, each of which can be in one of four states: on, off, hold, or release. Because the four arrows can be activated or released independently, there are 256 possible step combinations at any instant.\n1UCSD Department of Music, San Diego, CA 2UCSD Department of Computer Science, San Diego, CA. Correspondence to: Chris Donahue <cdonahue@ucsd.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nFigure 1. Proposed learning to choreograph pipeline for four seconds of the song Knife Party feat. Mistajam - Sleaze. The pipeline ingests audio features (Bottom) and produces a playable DDR choreography (Top) corresponding to the audio.\nStep charts exhibit rich structure and complex semantics to ensure that step sequences are both challenging and enjoyable. Charts tend to mirror musical structure: particular sequences of steps correspond to different motifs (Figure 2), and entire passages may reappear as sections of the song are repeated. Moreover, chart authors strive to avoid patterns that would compel a player to face away from the screen.\nThe DDR community uses simulators, such as the opensource StepMania, that allow fans to create and play their own charts. A number of prolific authors produce and disseminate packs of charts, bundling metadata with relevant recordings. Typically, for each song, packs contain one chart for each of five difficulty levels.\nDespite the game\u2019s popularity, players have some reasonable complaints: For one, packs are limited to songs with favorable licenses, meaning players may be unable to dance to their favorite songs. Even when charts are available, players may tire of repeatedly performing the same charts. Although players can produce their own charts, the process is painstaking and requires significant expertise.\nar X\niv :1\n70 3.\n06 89\n1v 3\n[ cs\n.L G\n] 2\n1 Ju\nn 20\n17\nIn this paper, we seek to automate the process of step chart generation so that players can dance to a wider variety of charts on any song of their choosing. We introduce the task of learning to choreograph, in which we learn to generate step charts from raw audio. Although this task has previously been approached via ad-hoc methods, we are the first to cast it as a learning task in which we seek to mimic the semantics of human-generated charts. We break the problem into two subtasks: First, step placement consists of identifying a set of timestamps in the song at which to place steps. This process can be conditioned on a playerspecified difficulty level. Second, step selection consists of choosing which steps to place at each timestamp. Running these two steps in sequence yields a playable step chart. This process is depicted in Figure 1.\nProgress on learning to choreograph may also lead to advances in music information retrieval (MIR). Our step placement task, for example, closely resembles onset detection, a well-studied MIR problem. The goal of onset detection is to identify the times of all musically salient events, such as melody notes or drum strikes. While not every onset in our data corresponds to a DDR step, every DDR step corresponds to an onset. In addition to marking steps, DDR packs specify a metronome click track for each song. For songs with changing tempos, the exact location of each change and the new tempo are annotated. This click data could help to spur algorithmic innovation for beat tracking and tempo detection.\nUnfortunately, MIR research is stymied by the difficulty of accessing large, well-annotated datasets. Songs are often subject to copyright issues, and thus must be gathered by each researcher independently. Collating audio with separately-distributed metadata is nontrivial and errorprone owing to the multiple available versions of many songs. Researchers often must manually align their version of a song to the metadata. In contrast, our dataset is publicly available, standardized and contains meticulouslyannotated labels as well as the relevant recordings.\nWe believe that DDR charts represent an abundant and\nunder-recognized source of annotated data for MIR research. StepMania Online, a popular repository of DDR data, distributes over 350Gb of packs with annotations for more than 100k songs. In addition to introducing a novel task and methodology, we contribute two large public datasets, which we consider to be of notably high quality and consistency.1 Each dataset is a collection of recordings and step charts. One contains charts by a single author and the other by multiple authors.\nFor both prediction stages of learning to choreograph, we demonstrate the superior performance of neural networks over strong alternatives. Our best model for step placement jointly learns a convolutional neural network (CNN) representation and a recurrent neural network (RNN), which integrates information across consecutive time slices. This method outperforms CNNs alone, multilayer perceptrons (MLPs), and linear models.\nOur best-performing system for step selection consists of a conditional LSTM generative model. As auxiliary information, the model takes beat phase, a number representing the fraction of a beat at which a step occurs. Additionally, the best models receive the time difference (measured in beats) since the last and until the next step. This model selects steps that are more consistent with expert authors than the best n-gram and fixed-window models, as measured by perplexity and per-token accuracy."}, {"heading": "1.1. Contributions", "text": "In short, our paper offers the following contributions:\n\u2022 We define learning to choreograph, a new task with real-world usefulness and strong connections to fundamental problems in MIR.\n\u2022 We introduce two large, curated datasets for benchmarking DDR choreography algorithms. They represent an under-recognized source of music annotations.\n\u2022 We introduce an effective pipeline for learning to choreograph with deep neural networks.2"}, {"heading": "2. Data", "text": "Basic statistics of our two datasets are shown in Table 1. The first dataset contains 90 songs choreographed by a single prolific author who works under the name Fraxtil. This dataset contains five charts per song corresponding to increasing difficulty levels. We find that while these charts overlap significantly, the lower difficulty charts are not strict subsets of the higher difficulty charts (Figure 3). The\n1https://github.com/chrisdonahue/ddc 2Demonstration showing human choreography alongside out-\nput of our method: https://youtu.be/yUc3O237p9M\nsecond dataset is a larger, multi-author collection called In The Groove (ITG); this dataset contains 133 songs with one chart per difficulty, except for 13 songs that lack charts for the highest difficulty. Both datasets contain electronic music with constant tempo and a strong beat, characteristic of music favored by the DDR community.\nNote that while the total number of songs is relatively small, when considering all charts across all songs the datasets contain around 35 hours of annotations and 350,000 steps. The two datasets have similar vocabulary sizes (81 and 88 distinct step combinations, respectively). Around 84% of the steps in both datasets consist of a single, instantaneous arrow.\nStep charts contain several invariances, for example interchanging all instances of left and right results in an equally plausible sequence of steps. To augment the amount of data available for training, we generate four instances of each chart, by mirroring left/right, up/down (or both). Doing so considerably improves performance in practice.\nIn addition to encoded audio, packs consist of metadata including a song\u2019s title, artist, a list of time-stamped tempo changes, and a time offset to align the recording to the tempos. They also contain information such as the chart difficulties and the name of the choreographer. Finally, the metadata contains a full list of steps, marking the measure and beat of each. To make this data easier to work with, we convert it to a canonical form consisting of (beat, time, step) tuples.\nThe charts in both datasets echo high-level rhythmic structure in the music. An increase in difficulty corresponds to increasing propensity for steps to appear at finer rhythmic subdivisions. Beginner charts tend to contain only quarter notes and eighth notes. Higher-difficulty charts reflect more complex rhythmic details in the music, featuring higher densities of eighth and sixteenth note steps (8th, 16th) as well as triplet patterns (12th, 24th) (Figure 4)."}, {"heading": "3. Problem Definition", "text": "A step can occur in up to 192 different locations (subdivisions) within each measure. However, measures contain roughly 6 steps on average. This level of sparsity makes it difficult to uncover patterns across long sequences of (mostly empty) frames via a single end-to-end sequential model. So, to make automatic DDR choreography tractable, we decompose it into two subtasks: step placement and step selection.\nIn step placement, our goal is to decide at what precise times to place steps. A step placement algorithm ingests raw audio features and outputs timestamps corresponding to steps. In addition to the audio signal, we provide step placement algorithms with a one-hot representation of the intended difficulty rating for the chart.\nStep selection involves taking a discretized list of step times computed during step placement and mapping each of these to a DDR step. Our approach to this problem involves modeling the probability distribution P (mn|m1, . . . ,mn\u22121) where mn is the nth step in the sequence. Some steps require that the player hit two or more arrows at once, a jump; or hold on one arrow for some duration, a freeze (Figure 2)."}, {"heading": "4. Methods", "text": "We now describe our specific solutions to the step placement and selection problems. Our basic pipeline works as follows: (1) extract an audio feature representation;\n(2) feed this representation into a step placement algorithm, which estimates probabilities that a ground truth step lies within that frame; (3) use a peak-picking process on this sequence of probabilities to identify the precise timestamps at which to place steps; and finally (4) given a sequence of timestamps, use a step selection algorithm to choose which steps to place at each time."}, {"heading": "4.1. Audio Representation", "text": "Music files arrive as lossy encodings at 44.1kHz . We decode the audio files into stereo PCM audio and average the two channels to produce a monophonic representation. We then compute a multiple-timescale short-time Fourier transform (STFT) using window lengths of 23ms , 46ms , and 93ms and a stride of 10ms . Shorter window sizes preserve low-level features such as pitch and timbre while larger window sizes provide more context for high-level features such as melody and rhythm (Hamel et al., 2012).\nUsing the ESSENTIA library (Bogdanov et al., 2013), we reduce the dimensionality of the STFT magnitude spectra to 80 frequency bands by applying a Mel-scale (Stevens et al., 1937) filterbank. We scale the filter outputs logarithmically to better represent human perception of loudness. Finally, we prepend and append seven frames of past and future context respectively to each frame.\nFor fixed-width methods, the final audio representation is a 15\u00d780\u00d73 tensor. These correspond to the temporal width of 15 representing 150ms of audio context, 80 frequency bands, and 3 different window lengths. To better condition the data for learning, we normalize each frequency band to zero mean and unit variance. Our approach to acoustic feature representation closely follows the work of Schlu\u0308ter & Bo\u0308ck (2014), who develop similar representations to perform onset detection with CNNs."}, {"heading": "4.2. Step Placement", "text": "We consider several models to address the step placement task. Each model\u2019s output consists of a single sigmoid unit which estimates the probability that a step is placed. For all models, we augment the audio features with a one-hot representation of difficulty.\nFollowing state-of-the-art work on onset detection (Schlu\u0308ter & Bo\u0308ck, 2014), we adopt a convolutional neural network (CNN) architecture. This model consists of two convolutional layers followed by two fully connected layers. Our first convolutional layer has 10 filter kernels that are 7-wide in time and 3-wide in frequency. The second layer has 20 filter kernels that are 3-wide in time and 3-wide in frequency. We apply 1D max-pooling after each convolutional layer, only in the frequency dimension, with a width and stride of 3. Both convolutional layers\nuse rectified linear units (ReLU) (Glorot et al., 2011). Following the convolutional layers, we add two fully connected layers with rectifier activation functions and 256 and 128 nodes, respectively.\nTo improve upon the CNN, we propose a C-LSTM model, combining a convolutional encoding with an RNN that integrates information across longer windows of time. To encode the raw audio at each time step, we first apply two convolutional layers (of the same shape as the CNN) across the full unrolling length. The output of the second convolutional layer is a 3D tensor, which we flatten along the channel and frequency axes (preserving the temporal dimension). The flattened features at each time step then become the inputs to a two-layer RNN.\nThe C-LSTM contains long short-term memory (LSTM) units (Hochreiter & Schmidhuber, 1997) with forget gates (Gers & Schmidhuber, 2000). The LSTM consists of 2 layers with 200 nodes each. Following the LSTM layers, we apply two fully connected ReLU layers of dimension 256 and 128. This architecture is depicted in Figure 5. We train this model using 100 unrollings for backpropagation through time.\nA chart\u2019s intended difficulty influences decisions both about how many steps to place and where to place them. For low-difficulty charts, the average number of steps per second is less than one. In contrast, the highest-difficulty charts exceed seven steps per second. We trained all models both with and without conditioning on difficulty, and found the inclusion of this feature to be informative. We\nconcatenate difficulty features to the flattened output of the CNN before feeding the vector to the fully connected (or LSTM) layers (Figure 5).3 We initialize weight matrices following the scheme of Glorot & Bengio (2010).\nTraining Methodology We minimize binary crossentropy with mini-batch stochastic gradient descent. For all models we train with batches of size 256, scaling down gradients when their l2 norm exceeds 5. We apply 50% dropout following each LSTM and fully connected layer. For LSTM layers, we apply dropout in the input to output but not temporal directions, following best practices from (Zaremba et al., 2014; Lipton et al., 2016; Dai & Le, 2015). Although the problem exhibits pronounced class imbalance (97% negatives), we achieved better results training on imbalanced data than with re-balancing schemes. We exclude all examples before the first step in the chart or after the last step as charts typically do not span the entire duration of the song.\nFor recurrent neural networks, the target at each frame is the ground truth value corresponding to that frame. We calculate updates using backpropagation through time with 100 steps of unrolling, equal to one second of audio or two beats on a typical track (120 BPM). We train all networks with early-stopping determined by the area under the precision-recall curve on validation data. All models satisfy this criteria within 12 hours of training on a single machine with an NVIDIA Tesla K40m GPU."}, {"heading": "4.3. Peak Picking", "text": "Following standard practice for onset detection, we convert sequences of step probabilities into a discrete set of\n3For LogReg and MLP, we add difficulty to input layer.\nchosen placements via a peak-picking process. First we run our step placement algorithm over an entire song to assign the probabilities of a step occurring within each 10ms frame.4 We then convolve this sequence of predicted probabilities with a Hamming window, smoothing the predictions and suppressing double-peaks from occurring within a short distance. Finally, we apply a constant threshold to choose which peaks are high enough (Figure 6). Because the number of peaks varies according to chart difficulty, we choose a different threshold per difficulty level. We consider predicted placements to be true positives if they lie within a \u00b120ms window of a ground truth."}, {"heading": "4.4. Step Selection", "text": "We treat the step selection task as a sequence generation problem. Our approach follows related work in language modeling where RNNs are well-known to produce coherent text that captures long-range relationships (Mikolov et al., 2010; Sutskever et al., 2011; Sundermeyer et al., 2012).\nOur LSTM model passes over the ground truth step placements and predicts the next token given the previous sequence of tokens. The output is a softmax distribution over the 256 possible steps. As input, we use a more compact bag-of-arrows representation containing 16 features (4 per arrow) to depict the previous step. For each arrow, the 4 corresponding features represent the states on, off, hold, and release. We found the bag-of-arrows to give equivalent\n4In DDR, scores depend on the accuracy of a player\u2019s step timing. The highest scores require that a step is performed within 22.5ms of its appointed time; this suggests that a reasonable algorithm should place steps with an even finer level of granularity.\nperformance to the one-hot representation while requiring fewer parameters. We add an additional feature that functions as a start token to denote the first step of a chart. For this task, we use an LSTM with 2 layers of 128 cells each.\nFinally, we provide additional musical context to the step selection models by conditioning on rhythmic features (Figure 7). To inform models of the non-uniform spacing of the step placements, we consider the following three features: (1) \u2206-time adds two features representing the time since the previous step and the time until the next step; (2) \u2206-beat adds two features representing the number of beats since the previous and until the next step; (3) beat phase adds four features representing which 16th note subdivision of the beat the current step most closely aligns to.\nTraining Methodology For all neural network models, we learn parameters by minimizing cross-entropy. We train with mini-batches of size 64, and scale gradients using the same scheme as for step placement. We use 50% dropout during training for both the MLP and RNN models in the same fashion as for step placement. We use 64 steps of unrolling, representing an average of 100 seconds for the easiest charts and 9 seconds for the hardest. We apply earlystopping determined by average per-step cross entropy on validation data. All models satisfy this criteria within 6 hours of training on a single machine with an NVIDIA Tesla K40m GPU."}, {"heading": "5. Experiments", "text": "For both the Fraxtil and ITG datasets we apply 80%, 10%, 10% splits for training, validation, and test data, respectively. Because of correlation between charts for the same song of varying difficulty, we ensure that all charts for a particular song are grouped together in the same split."}, {"heading": "5.1. Step Placement", "text": "We evaluate the performance of our step placement methods against baselines via the methodology outlined below.\nBaselines To establish reasonable baselines for step placement, we first report the results of a logistic regressor (LogReg) trained on flattened audio features. We also report the performance of an MLP. Our MLP architecture contains two fully-connected layers of size 256 and 128, with rectifier nonlinearity applied to each layer. We apply dropout with probability 50% after each fully-connected layer during training. We model our CNN baseline on the method of Schlu\u0308ter & Bo\u0308ck (2014), a state-of-the-art algorithm for onset detection.\nMetrics We report each model\u2019s perplexity (PPL) averaged across each frame in each chart in the test data. Using the sparse step placements, we calculate the average perchart area under the precision-recall curve (AUC). We average the best per-chart F-scores and report this value as F-scorec. We calculate the micro F-score across all charts and report this value as F-scorem.\nIn Table 2, we list the results of our experiments for step placement. For ITG, models were conditioned on not just difficulty but also a one-hot representation of chart author. For both datasets, the C-LSTM model performs the best by all evaluation metrics. Our models achieve significantly higher F-scores for harder difficulty step charts. On the Fraxtil dataset, the C-LSTM achieves an F-scorec of 0.844 for the hardest difficulty charts but only 0.389 for the lowest difficulty. The difficult charts contribute more to Fscorem calculations because they have more ground truth positives. We discuss these results further in Section 6."}, {"heading": "5.2. Step Selection", "text": "Baselines For step selection, we compare the performance of the conditional LSTM to an n-gram model. Note that perplexity can be unbounded when a test set token is assigned probability 0 by the generative model. To protect the n-gram models against unbounded loss on previously unseen n-grams, we use modified Kneser-Ney smoothing (Chen & Goodman, 1998), following best practices in language modeling (Mikolov et al., 2010; Sutskever et al., 2011). Specifically, we train a smoothed 5-gram model with backoff (KN5) as implemented in Stolcke (2002).\nFollowing the work of Bengio et al. (2003) we also compare against a fixed-window 5-gram MLP which takes 4 bag-of-arrows-encoded steps as input and predicts the next step. The MLP contains two fully-connected layers with 256 and 128 nodes and 50% dropout after each layer during training. As with the LSTM, we train the MLP both with and without access to side features. In addition to the LSTM with 64 steps of unrolling, we train an LSTM with 5 steps of unrolling. These baselines show that the LSTM learns complex, long-range dependencies. They also demonstrate the discriminative information conferred by the \u2206-time, \u2206-beat, and beat phase features.\nMetrics We report the average per-step perplexity, averaging scores calculated separately on each chart. We also report a per-token accuracy. We calculate accuracy by comparing the ground-truth step to the argmax over a model\u2019s predictive distribution given the previous sequence of ground-truth tokens. For a given chart, the per token accuracy is averaged across time steps. We produce final numbers by averaging scores across charts.\nIn Table 3 we present results for the step selection task. For the Fraxtil dataset, the best performing model was the LSTM conditioned on both \u2206-beat and beat phase, while for ITG it was the LSTM conditioned on \u2206-time. While conditioning on rhythm features was generally beneficial, the benefits of various features were not strictly additive. Representing \u2206-beat and \u2206-time as real numbers outperformed bucketed representations.\nAdditionally, we explored the possibility of incorporating more comprehensive representations of the audio into the step selection model. We considered a variety of representations, such as conditioning on CNN features learned from the step placement task. We also experimented with jointly learning a CNN audio encoder. In all cases, these approaches led to rapid overfitting and never approached the performance of the conditional LSTM generative model; perhaps a much larger dataset could support these approaches. Finally, we tried conditioning the step selection models on both difficulty and chart author but found these models to overfit quickly as well."}, {"heading": "6. Discussion", "text": "Our experiments establish the feasibility of using machine learning to automatically generate high-quality DDR charts from raw audio. Our performance evaluations on both subtasks demonstrate the advantage of deep neural networks over classical approaches. For step placement, the best performing model is an LSTM with CNN encoder, an approach which has been used for speech recognition (Amodei et al., 2015), but, to our knowledge, never for music-related tasks. We noticed that by all metrics, our models perform better on higher-difficulty charts. Likely, this owes to the comparative class imbalance of the lower difficulty charts.\nThe superior performance of LSTMs over fixed-window approaches on step selection suggests both that DDR charts exhibit long range dependencies and that recurrent neural networks can exploit this complex structure. In addition to reporting quantitative results, we visualize the step selection model\u2019s next-step predictions. Here, we give the entire ground truth sequence as input but show the predicted next step at each time. We also visualize a generated choreography, where each sampled output from the LSTM is fed in as the subsequent input (Figure 8). We note the high accuracy of the model\u2019s predictions and qualitative similarity of the generated sequence to Fraxtil\u2019s choreography.\nFor step selection, we notice that modeling the Fraxtil dataset choreography appears to be easy compared to the multi-author ITG dataset. We believe this owes to the distinctiveness of author styles. Because we have so many step charts for Fraxtil, the network is able to closely mimic his patterns. While the ITG dataset contains multiple charts per author, none are so prolific as Fraxtil.\nWe released a public demo5 using our most promising models as measured by our quantitative evaluation. Players upload an audio file, select a difficulty rating and receive a step chart for use in the StepMania DDR simulator. Our demo produces a step chart for a 3 minute song in about 5 seconds using an NVIDIA Tesla K40c GPU. At time of writing, 220 players have produced 1370 step charts with the demo. We also solicited feedback, on a scale of 1-5, for player \u201csatisfaction\u201d with the demo results. The 22 respondents reported an average satisfaction of 3.87.\nA promising direction for future work is to make the selection algorithm audio-aware. We know qualitatively that elements in the ground truth choreography tend to coincide with specific musical events: jumps are used to emphasize accents in a rhythm; freezes are used to transition from regions of high rhythmic intensity to more ambient sections.\nDDR choreography might also benefit from an end-to-end approach, in which a model simultaneously places steps and selects them. The primary obstacle here is data sparsity at any sufficiently high feature rate. At 100Hz , about 97% of labels are null. So in 100 time-steps of unrolling, an RNN might only encounter 3 ground truth steps.\nWe demonstrate that step selection methods are improved by incorporating \u2206-beat and beat phase features, however our current pipeline does not produce this information. In lieu of manual tempo input, we are restricted to using \u2206-time features when executing our pipeline on unseen recordings. If we trained a model to detect beat phase, we would be able to use these features for step selection."}, {"heading": "7. Related Work", "text": "Several academic papers address DDR. These include anthropological studies (Hoysniemi, 2006; Behrenshausen, 2007) and two papers that describe approaches to automated choreography. The first, called Dancing Monkeys, uses rule-based methods for both step placement and step selection (O\u2019Keeffe, 2003). The second employs genetic algorithms for step selection, optimizing an ad-hoc fitness function (Nogaj, 2005). Neither establishes reproducible evaluation methodology or learns the semantics of steps from data.\nOur step placement task closely resembles the classic problem of musical onset detection (Bello et al., 2005; Dixon, 2006). Several onset detection papers investigate modern deep learning methodology. Eyben et al. (2010) employ bidirectional LSTMs (BLSTMs) for onset detection; Marchi et al. (2014) improve upon this work, developing a rich multi-resolution feature representation; Schlu\u0308ter & Bo\u0308ck (2014) demonstrate a CNN-based approach (against\n5http://deepx.ucsd.edu/ddc\nwhich we compare) that performs competitively with the prior BLSTM work. Neural networks are widely used on a range of other MIR tasks, including musical chord detection (Humphrey & Bello, 2012; Boulanger-Lewandowski et al., 2013a) and boundary detection (Ullrich et al., 2014), another transient audio phenomenon.\nOur step selection problem resembles the classic natural language processing task of statistical language modeling. Classical methods, which we consider, include n-gram distributions (Chen & Goodman, 1998; Rosenfeld, 2000). Bengio et al. (2003) demonstrate an approach to language modeling using neural networks with fixed-length context. More recently, RNNs have demonstrated superior performance to fixed-window approaches (Mikolov et al., 2010; Sundermeyer et al., 2012; Sutskever et al., 2011). LSTMs are also capable of modeling language at the character level (Karpathy et al., 2015; Kim et al., 2016). While a thorough explanation of modern RNNs exceeds the scope of this paper, we point to two comprehensive reviews of the literature (Lipton et al., 2015; Greff et al., 2016). Several papers investigate neural networks for single-note melody generation (Bharucha & Todd, 1989; Eck, 2002; Chu et al., 2016; Hadjeres & Pachet, 2016) and polyphonic melody generation (Boulanger-Lewandowski et al., 2012).\nLearning to choreograph requires predicting both the timing and the type of events in relation to a piece of music. In that respect, our task is similar to audio sequence transduction tasks, such as musical transcription and speech recognition. RNNs currently yield state-of-the-art performance for musical transcription (Bo\u0308ck & Schedl, 2012; Boulanger-Lewandowski et al., 2013b; Sigtia et al., 2016). RNNs are widely used for speech recognition (Graves & Jaitly, 2014; Graves et al., 2006; 2013; Sainath et al., 2015), and the state-of-the-art method (Amodei et al., 2015) combines convolutional and recurrent networks. While our work is methodologically similar, it differs from the above in that we consider an entirely different application."}, {"heading": "8. Conclusions", "text": "By combining insights from musical onset detection and statistical language modeling, we have designed and evaluated a number of deep learning methods for learning to choreograph. We have introduced standardized datasets and reproducible evaluation methodology in the hope of encouraging wider investigation into this and related problems. We emphasize that the sheer volume of available step charts presents a rare opportunity for MIR: access to large amounts of high-quality annotated data. This data could help to spur innovation for several MIR tasks, including onset detection, beat tracking, and tempo detection."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Jeff Donahue, Shlomo Dubnov, Jennifer Hsu, Mohsen Malmir, Miller Puckette, Adith Swaminathan and Sharad Vikram for their helpful feedback on this work. This work used the Extreme Science and Engineering Discovery Environment (XSEDE) (Towns et al., 2014), which is supported by National Science Foundation grant number ACI-1548562. GPUs used for this research were graciously donated by the NVIDIA Corporation."}], "references": [{"title": "Deep speech 2: End-to-end speech recognition in english and mandarin", "author": ["Amodei", "Dario", "Anubhai", "Rishita", "Battenberg", "Eric", "Case", "Carl", "Casper", "Jared", "Catanzaro", "Bryan", "Chen", "Jingdong", "Chrzanowski", "Mike", "Coates", "Adam", "Diamos", "Greg"], "venue": "In ICML,", "citeRegEx": "Amodei et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Amodei et al\\.", "year": 2015}, {"title": "Toward a (kin) aesthetic of video gaming the case of dance dance revolution", "author": ["Behrenshausen", "Bryan G"], "venue": "Games and Culture,", "citeRegEx": "Behrenshausen and G.,? \\Q2007\\E", "shortCiteRegEx": "Behrenshausen and G.", "year": 2007}, {"title": "A tutorial on onset detection in music signals", "author": ["Bello", "Juan Pablo", "Daudet", "Laurent", "Abdallah", "Samer", "Duxbury", "Chris", "Davies", "Mike", "Sandler", "Mark B"], "venue": "IEEE Transactions on speech and audio processing,", "citeRegEx": "Bello et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Bello et al\\.", "year": 2005}, {"title": "A neural probabilistic language model", "author": ["Bengio", "Yoshua", "Ducharme", "R\u00e9jean", "Vincent", "Pascal", "Jauvin", "Christian"], "venue": null, "citeRegEx": "Bengio et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2003}, {"title": "Modeling the perception of tonal structure with neural nets", "author": ["Bharucha", "Jamshed J", "Todd", "Peter M"], "venue": "Computer Music Journal,", "citeRegEx": "Bharucha et al\\.,? \\Q1989\\E", "shortCiteRegEx": "Bharucha et al\\.", "year": 1989}, {"title": "Polyphonic piano note transcription with recurrent neural networks", "author": ["B\u00f6ck", "Sebastian", "Schedl", "Markus"], "venue": "In ICASSP,", "citeRegEx": "B\u00f6ck et al\\.,? \\Q2012\\E", "shortCiteRegEx": "B\u00f6ck et al\\.", "year": 2012}, {"title": "Essentia: An audio analysis library for music information retrieval", "author": ["Bogdanov", "Dmitry", "Wack", "Nicolas", "G\u00f3mez", "Emilia", "Gulati", "Sankalp", "Herrera", "Perfecto", "Mayor", "Oscar", "Roma", "Gerard", "Salamon", "Justin", "Zapata", "Jos\u00e9 R", "Serra", "Xavier"], "venue": "In ISMIR,", "citeRegEx": "Bogdanov et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bogdanov et al\\.", "year": 2013}, {"title": "Modeling temporal dependencies in high-dimensional sequences: Application to polyphonic music generation and transcription", "author": ["Boulanger-Lewandowski", "Nicolas", "Bengio", "Yoshua", "Vincent", "Pascal"], "venue": "In ICML,", "citeRegEx": "Boulanger.Lewandowski et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Boulanger.Lewandowski et al\\.", "year": 2012}, {"title": "Audio chord recognition with recurrent neural networks", "author": ["Boulanger-Lewandowski", "Nicolas", "Bengio", "Yoshua", "Vincent", "Pascal"], "venue": "In ISMIR,", "citeRegEx": "Boulanger.Lewandowski et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Boulanger.Lewandowski et al\\.", "year": 2013}, {"title": "High-dimensional sequence transduction", "author": ["Boulanger-Lewandowski", "Nicolas", "Bengio", "Yoshua", "Vincent", "Pascal"], "venue": "In ICASSP,", "citeRegEx": "Boulanger.Lewandowski et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Boulanger.Lewandowski et al\\.", "year": 2013}, {"title": "An empirical study of smoothing techniques for language modeling", "author": ["Chen", "Stanley F", "Goodman", "Joshua"], "venue": "Technical Report TR-10-98,", "citeRegEx": "Chen et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Chen et al\\.", "year": 1998}, {"title": "Song from pi: A musically plausible network for pop music generation", "author": ["Chu", "Hang", "Urtasun", "Raquel", "Fidler", "Sanja"], "venue": null, "citeRegEx": "Chu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chu et al\\.", "year": 2016}, {"title": "Semi-supervised sequence learning", "author": ["Dai", "Andrew M", "Le", "Quoc V"], "venue": "In NIPS,", "citeRegEx": "Dai et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dai et al\\.", "year": 2015}, {"title": "Onset detection revisited", "author": ["Dixon", "Simon"], "venue": "In Proceedings of the 9th International Conference on Digital Audio Effects,", "citeRegEx": "Dixon and Simon.,? \\Q2006\\E", "shortCiteRegEx": "Dixon and Simon.", "year": 2006}, {"title": "A first look at music composition using lstm recurrent neural networks", "author": ["Eck", "Douglas"], "venue": "Technical Report IDSIA-0702,", "citeRegEx": "Eck and Douglas.,? \\Q2002\\E", "shortCiteRegEx": "Eck and Douglas.", "year": 2002}, {"title": "Universal onset detection with bidirectional long short-term memory neural networks", "author": ["Eyben", "Florian", "B\u00f6ck", "Sebastian", "Schuller", "Bj\u00f6rn W", "Graves", "Alex"], "venue": "In ISMIR,", "citeRegEx": "Eyben et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Eyben et al\\.", "year": 2010}, {"title": "Recurrent nets that time and count", "author": ["Gers", "Felix", "Schmidhuber", "J\u00fcrgen"], "venue": "In International Joint Conference on Neural Networks (IJCNN),", "citeRegEx": "Gers et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Gers et al\\.", "year": 2000}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Glorot", "Xavier", "Bengio", "Yoshua"], "venue": "In AISTATS,", "citeRegEx": "Glorot et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2010}, {"title": "Deep sparse rectifier neural networks", "author": ["Glorot", "Xavier", "Bordes", "Antoine", "Bengio", "Yoshua"], "venue": "In AISTATS,", "citeRegEx": "Glorot et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2011}, {"title": "Towards end-to-end speech recognition with recurrent neural networks", "author": ["Graves", "Alex", "Jaitly", "Navdeep"], "venue": "In ICML,", "citeRegEx": "Graves et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2014}, {"title": "Connectionist temporal classification: labelling unsegmented sequence data with recurrent neural networks", "author": ["Graves", "Alex", "Fern\u00e1ndez", "Santiago", "Gomez", "Faustino", "Schmidhuber", "J\u00fcrgen"], "venue": "In ICML,", "citeRegEx": "Graves et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2006}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Graves", "Alex", "Mohamed", "Abdel-rahman", "Hinton", "Geoffrey"], "venue": "In ICASSP,", "citeRegEx": "Graves et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2013}, {"title": "Lstm: A search space odyssey", "author": ["Greff", "Klaus", "Srivastava", "Rupesh K", "Koutn\u0131\u0301k", "Jan", "Steunebrink", "Bas R", "Schmidhuber", "J\u00fcrgen"], "venue": "IEEE transactions on neural networks and learning systems,", "citeRegEx": "Greff et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Greff et al\\.", "year": 2016}, {"title": "Deepbach: a steerable model for bach chorales generation", "author": ["Hadjeres", "Ga\u00ebtan", "Pachet", "Fran\u00e7ois"], "venue": null, "citeRegEx": "Hadjeres et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hadjeres et al\\.", "year": 2016}, {"title": "Building musically-relevant audio features through multiple timescale representations", "author": ["Hamel", "Philippe", "Bengio", "Yoshua", "Eck", "Douglas"], "venue": "In ISMIR,", "citeRegEx": "Hamel et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hamel et al\\.", "year": 2012}, {"title": "Long shortterm memory", "author": ["Hochreiter", "Sepp", "Schmidhuber", "J\u00fcrgen"], "venue": "Neural computation,", "citeRegEx": "Hochreiter et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 1997}, {"title": "International survey on the dance dance revolution game", "author": ["Hoysniemi", "Johanna"], "venue": "Computers in Entertainment (CIE),", "citeRegEx": "Hoysniemi and Johanna.,? \\Q2006\\E", "shortCiteRegEx": "Hoysniemi and Johanna.", "year": 2006}, {"title": "Rethinking automatic chord recognition with convolutional neural networks", "author": ["Humphrey", "Eric J", "Bello", "Juan Pablo"], "venue": "In ICMLA,", "citeRegEx": "Humphrey et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Humphrey et al\\.", "year": 2012}, {"title": "Visualizing and understanding recurrent networks", "author": ["Karpathy", "Andrej", "Johnson", "Justin", "Fei-Fei", "Li"], "venue": null, "citeRegEx": "Karpathy et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Karpathy et al\\.", "year": 2015}, {"title": "Character-aware neural language models", "author": ["Kim", "Yoon", "Jernite", "Yacine", "Sontag", "David", "Rush", "Alexander M"], "venue": "In Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence,", "citeRegEx": "Kim et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kim et al\\.", "year": 2016}, {"title": "A critical review of recurrent neural networks for sequence learning", "author": ["Lipton", "Zachary C", "Berkowitz", "John", "Elkan", "Charles"], "venue": null, "citeRegEx": "Lipton et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lipton et al\\.", "year": 2015}, {"title": "Learning to diagnose with LSTM recurrent neural networks", "author": ["Lipton", "Zachary C", "Kale", "David C", "Elkan", "Charles", "Wetzell", "Randall"], "venue": "In ICLR,", "citeRegEx": "Lipton et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Lipton et al\\.", "year": 2016}, {"title": "Multi-resolution linear prediction based features for audio onset detection with bidirectional lstm neural networks", "author": ["Marchi", "Erik", "Ferroni", "Giacomo", "Eyben", "Florian", "Gabrielli", "Leonardo", "Squartini", "Stefano", "Schuller", "Bjorn"], "venue": null, "citeRegEx": "Marchi et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Marchi et al\\.", "year": 2014}, {"title": "Recurrent neural network based language model", "author": ["Mikolov", "Tomas", "Karafi\u00e1t", "Martin", "Burget", "Lukas", "Cernock\u1ef3", "Jan", "Khudanpur", "Sanjeev"], "venue": "In Interspeech,", "citeRegEx": "Mikolov et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2010}, {"title": "A genetic algorithm for determining optimal step patterns in dance dance revolution", "author": ["Nogaj", "Adam"], "venue": "Technical report, State University of New York at Fredonia,", "citeRegEx": "Nogaj and Adam.,? \\Q2005\\E", "shortCiteRegEx": "Nogaj and Adam.", "year": 2005}, {"title": "Dancing monkeys (automated creation of step files for dance dance revolution)", "author": ["O\u2019Keeffe", "Karl"], "venue": "Technical report, Imperial College London,", "citeRegEx": "O.Keeffe and Karl.,? \\Q2003\\E", "shortCiteRegEx": "O.Keeffe and Karl.", "year": 2003}, {"title": "Two decades of statistical language modeling: Where do we go from here", "author": ["Rosenfeld", "Ronald"], "venue": "Proceedings of the IEEE,", "citeRegEx": "Rosenfeld and Ronald.,? \\Q2000\\E", "shortCiteRegEx": "Rosenfeld and Ronald.", "year": 2000}, {"title": "Learning the speech frontend with raw waveform cldnns", "author": ["Sainath", "Tara N", "Weiss", "Ron J", "Senior", "Andrew", "Wilson", "Kevin W", "Vinyals", "Oriol"], "venue": "In Interspeech,", "citeRegEx": "Sainath et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Sainath et al\\.", "year": 2015}, {"title": "Improved musical onset detection with convolutional neural networks", "author": ["Schl\u00fcter", "Jan", "B\u00f6ck", "Sebastian"], "venue": "In ICASSP,", "citeRegEx": "Schl\u00fcter et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Schl\u00fcter et al\\.", "year": 2014}, {"title": "An end-to-end neural network for polyphonic piano music transcription", "author": ["Sigtia", "Siddharth", "Benetos", "Emmanouil", "Dixon", "Simon"], "venue": "IEEE/ACM Transactions on Audio, Speech, and Language Processing,", "citeRegEx": "Sigtia et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Sigtia et al\\.", "year": 2016}, {"title": "A scale for the measurement of the psychological magnitude pitch", "author": ["Stevens", "Stanley Smith", "Volkmann", "John", "Newman", "Edwin B"], "venue": "The Journal of the Acoustical Society of America,", "citeRegEx": "Stevens et al\\.,? \\Q1937\\E", "shortCiteRegEx": "Stevens et al\\.", "year": 1937}, {"title": "Srilm-an extensible language modeling toolkit", "author": ["Stolcke", "Andreas"], "venue": "In Interspeech,", "citeRegEx": "Stolcke and Andreas.,? \\Q2002\\E", "shortCiteRegEx": "Stolcke and Andreas.", "year": 2002}, {"title": "Lstm neural networks for language modeling", "author": ["Sundermeyer", "Martin", "Schl\u00fcter", "Ralf", "Ney", "Hermann"], "venue": "In Interspeech,", "citeRegEx": "Sundermeyer et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Sundermeyer et al\\.", "year": 2012}, {"title": "Generating text with recurrent neural networks", "author": ["Sutskever", "Ilya", "Martens", "James", "Hinton", "Geoffrey E"], "venue": "In ICML,", "citeRegEx": "Sutskever et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2011}, {"title": "Xsede: accelerating scientific discovery", "author": ["Towns", "John", "Cockerill", "Timothy", "Dahan", "Maytal", "Foster", "Ian", "Gaither", "Kelly", "Grimshaw", "Andrew", "Hazlewood", "Victor", "Lathrop", "Scott", "Lifka", "Dave", "Peterson", "Gregory D"], "venue": "Computing in Science & Engineering,", "citeRegEx": "Towns et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Towns et al\\.", "year": 2014}, {"title": "Boundary detection in music structure analysis using convolutional neural networks", "author": ["Ullrich", "Karen", "Schl\u00fcter", "Jan", "Grill", "Thomas"], "venue": "In ISMIR,", "citeRegEx": "Ullrich et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ullrich et al\\.", "year": 2014}, {"title": "Recurrent neural network regularization", "author": ["Zaremba", "Wojciech", "Sutskever", "Ilya", "Vinyals", "Oriol"], "venue": null, "citeRegEx": "Zaremba et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Zaremba et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 24, "context": "Shorter window sizes preserve low-level features such as pitch and timbre while larger window sizes provide more context for high-level features such as melody and rhythm (Hamel et al., 2012).", "startOffset": 171, "endOffset": 191}, {"referenceID": 6, "context": "Using the ESSENTIA library (Bogdanov et al., 2013), we reduce the dimensionality of the STFT magnitude spectra to 80 frequency bands by applying a Mel-scale (Stevens et al.", "startOffset": 27, "endOffset": 50}, {"referenceID": 40, "context": ", 2013), we reduce the dimensionality of the STFT magnitude spectra to 80 frequency bands by applying a Mel-scale (Stevens et al., 1937) filterbank.", "startOffset": 114, "endOffset": 136}, {"referenceID": 18, "context": "use rectified linear units (ReLU) (Glorot et al., 2011).", "startOffset": 34, "endOffset": 55}, {"referenceID": 46, "context": "For LSTM layers, we apply dropout in the input to output but not temporal directions, following best practices from (Zaremba et al., 2014; Lipton et al., 2016; Dai & Le, 2015).", "startOffset": 116, "endOffset": 175}, {"referenceID": 31, "context": "For LSTM layers, we apply dropout in the input to output but not temporal directions, following best practices from (Zaremba et al., 2014; Lipton et al., 2016; Dai & Le, 2015).", "startOffset": 116, "endOffset": 175}, {"referenceID": 33, "context": "Our approach follows related work in language modeling where RNNs are well-known to produce coherent text that captures long-range relationships (Mikolov et al., 2010; Sutskever et al., 2011; Sundermeyer et al., 2012).", "startOffset": 145, "endOffset": 217}, {"referenceID": 43, "context": "Our approach follows related work in language modeling where RNNs are well-known to produce coherent text that captures long-range relationships (Mikolov et al., 2010; Sutskever et al., 2011; Sundermeyer et al., 2012).", "startOffset": 145, "endOffset": 217}, {"referenceID": 42, "context": "Our approach follows related work in language modeling where RNNs are well-known to produce coherent text that captures long-range relationships (Mikolov et al., 2010; Sutskever et al., 2011; Sundermeyer et al., 2012).", "startOffset": 145, "endOffset": 217}, {"referenceID": 33, "context": "To protect the n-gram models against unbounded loss on previously unseen n-grams, we use modified Kneser-Ney smoothing (Chen & Goodman, 1998), following best practices in language modeling (Mikolov et al., 2010; Sutskever et al., 2011).", "startOffset": 189, "endOffset": 235}, {"referenceID": 43, "context": "To protect the n-gram models against unbounded loss on previously unseen n-grams, we use modified Kneser-Ney smoothing (Chen & Goodman, 1998), following best practices in language modeling (Mikolov et al., 2010; Sutskever et al., 2011).", "startOffset": 189, "endOffset": 235}, {"referenceID": 33, "context": "To protect the n-gram models against unbounded loss on previously unseen n-grams, we use modified Kneser-Ney smoothing (Chen & Goodman, 1998), following best practices in language modeling (Mikolov et al., 2010; Sutskever et al., 2011). Specifically, we train a smoothed 5-gram model with backoff (KN5) as implemented in Stolcke (2002).", "startOffset": 190, "endOffset": 336}, {"referenceID": 3, "context": "Following the work of Bengio et al. (2003) we also compare against a fixed-window 5-gram MLP which takes 4 bag-of-arrows-encoded steps as input and predicts the next step.", "startOffset": 22, "endOffset": 43}, {"referenceID": 0, "context": "For step placement, the best performing model is an LSTM with CNN encoder, an approach which has been used for speech recognition (Amodei et al., 2015), but, to our knowledge, never for music-related tasks.", "startOffset": 130, "endOffset": 151}, {"referenceID": 2, "context": "Our step placement task closely resembles the classic problem of musical onset detection (Bello et al., 2005; Dixon, 2006).", "startOffset": 89, "endOffset": 122}, {"referenceID": 2, "context": "Our step placement task closely resembles the classic problem of musical onset detection (Bello et al., 2005; Dixon, 2006). Several onset detection papers investigate modern deep learning methodology. Eyben et al. (2010) employ bidirectional LSTMs (BLSTMs) for onset detection; Marchi et al.", "startOffset": 90, "endOffset": 221}, {"referenceID": 2, "context": "Our step placement task closely resembles the classic problem of musical onset detection (Bello et al., 2005; Dixon, 2006). Several onset detection papers investigate modern deep learning methodology. Eyben et al. (2010) employ bidirectional LSTMs (BLSTMs) for onset detection; Marchi et al. (2014) improve upon this work, developing a rich multi-resolution feature representation; Schl\u00fcter & B\u00f6ck (2014) demonstrate a CNN-based approach (against", "startOffset": 90, "endOffset": 299}, {"referenceID": 2, "context": "Our step placement task closely resembles the classic problem of musical onset detection (Bello et al., 2005; Dixon, 2006). Several onset detection papers investigate modern deep learning methodology. Eyben et al. (2010) employ bidirectional LSTMs (BLSTMs) for onset detection; Marchi et al. (2014) improve upon this work, developing a rich multi-resolution feature representation; Schl\u00fcter & B\u00f6ck (2014) demonstrate a CNN-based approach (against", "startOffset": 90, "endOffset": 405}, {"referenceID": 45, "context": ", 2013a) and boundary detection (Ullrich et al., 2014), another transient audio phenomenon.", "startOffset": 32, "endOffset": 54}, {"referenceID": 33, "context": "More recently, RNNs have demonstrated superior performance to fixed-window approaches (Mikolov et al., 2010; Sundermeyer et al., 2012; Sutskever et al., 2011).", "startOffset": 86, "endOffset": 158}, {"referenceID": 42, "context": "More recently, RNNs have demonstrated superior performance to fixed-window approaches (Mikolov et al., 2010; Sundermeyer et al., 2012; Sutskever et al., 2011).", "startOffset": 86, "endOffset": 158}, {"referenceID": 43, "context": "More recently, RNNs have demonstrated superior performance to fixed-window approaches (Mikolov et al., 2010; Sundermeyer et al., 2012; Sutskever et al., 2011).", "startOffset": 86, "endOffset": 158}, {"referenceID": 28, "context": "LSTMs are also capable of modeling language at the character level (Karpathy et al., 2015; Kim et al., 2016).", "startOffset": 67, "endOffset": 108}, {"referenceID": 29, "context": "LSTMs are also capable of modeling language at the character level (Karpathy et al., 2015; Kim et al., 2016).", "startOffset": 67, "endOffset": 108}, {"referenceID": 30, "context": "While a thorough explanation of modern RNNs exceeds the scope of this paper, we point to two comprehensive reviews of the literature (Lipton et al., 2015; Greff et al., 2016).", "startOffset": 133, "endOffset": 174}, {"referenceID": 22, "context": "While a thorough explanation of modern RNNs exceeds the scope of this paper, we point to two comprehensive reviews of the literature (Lipton et al., 2015; Greff et al., 2016).", "startOffset": 133, "endOffset": 174}, {"referenceID": 11, "context": "Several papers investigate neural networks for single-note melody generation (Bharucha & Todd, 1989; Eck, 2002; Chu et al., 2016; Hadjeres & Pachet, 2016) and polyphonic melody generation (Boulanger-Lewandowski et al.", "startOffset": 77, "endOffset": 154}, {"referenceID": 7, "context": ", 2016; Hadjeres & Pachet, 2016) and polyphonic melody generation (Boulanger-Lewandowski et al., 2012).", "startOffset": 66, "endOffset": 102}, {"referenceID": 3, "context": "Bengio et al. (2003) demonstrate an approach to language modeling using neural networks with fixed-length context.", "startOffset": 0, "endOffset": 21}, {"referenceID": 39, "context": "RNNs currently yield state-of-the-art performance for musical transcription (B\u00f6ck & Schedl, 2012; Boulanger-Lewandowski et al., 2013b; Sigtia et al., 2016).", "startOffset": 76, "endOffset": 155}, {"referenceID": 20, "context": "RNNs are widely used for speech recognition (Graves & Jaitly, 2014; Graves et al., 2006; 2013; Sainath et al., 2015), and the state-of-the-art method (Amodei et al.", "startOffset": 44, "endOffset": 116}, {"referenceID": 37, "context": "RNNs are widely used for speech recognition (Graves & Jaitly, 2014; Graves et al., 2006; 2013; Sainath et al., 2015), and the state-of-the-art method (Amodei et al.", "startOffset": 44, "endOffset": 116}, {"referenceID": 0, "context": ", 2015), and the state-of-the-art method (Amodei et al., 2015) combines convolutional and recurrent networks.", "startOffset": 41, "endOffset": 62}, {"referenceID": 44, "context": "This work used the Extreme Science and Engineering Discovery Environment (XSEDE) (Towns et al., 2014), which is supported by National Science Foundation grant number ACI-1548562.", "startOffset": 81, "endOffset": 101}], "year": 2017, "abstractText": "Dance Dance Revolution (DDR) is a popular rhythm-based video game. Players perform steps on a dance platform in synchronization with music as directed by on-screen step charts. While many step charts are available in standardized packs, players may grow tired of existing charts, or wish to dance to a song for which no chart exists. We introduce the task of learning to choreograph. Given a raw audio track, the goal is to produce a new step chart. This task decomposes naturally into two subtasks: deciding when to place steps and deciding which steps to select. For the step placement task, we combine recurrent and convolutional neural networks to ingest spectrograms of low-level audio features to predict steps, conditioned on chart difficulty. For step selection, we present a conditional LSTM generative model that substantially outperforms n-gram and fixed-window approaches.", "creator": "LaTeX with hyperref package"}}}