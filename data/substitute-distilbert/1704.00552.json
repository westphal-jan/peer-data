{"id": "1704.00552", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Apr-2017", "title": "A Transition-Based Directed Acyclic Graph Parser for UCCA", "abstract": "we present the first parser for ucca, showcasing cross - linguistically diverse framework linking semantic representation, which builds for extensive typological work and supports rapid annotation. ucca fills a challenge for existing parsing techniques, as it exhibits reentrancy ( resulting neural dag structures ), discontinuous modules and non - terminal nodes corresponding to complex graphical units. to our knowledge, the conjunction of these formal properties is not supported by its existing parser. our grid - based parser, which uses a novel transition mechanisms and features based on various lstms, has value not featured in ucca parsing : its ability consistently handle more general hierarchical structures can inform the development of parsers for other semantic dag structures, and in languages that frequently use discontinuous structures.", "histories": [["v1", "Mon, 3 Apr 2017 12:40:54 GMT  (43kb)", "https://arxiv.org/abs/1704.00552v1", "16 pages; Accepted as long paper at ACL2017"], ["v2", "Tue, 4 Apr 2017 10:51:51 GMT  (41kb)", "http://arxiv.org/abs/1704.00552v2", "16 pages; Accepted as long paper at ACL2017"]], "COMMENTS": "16 pages; Accepted as long paper at ACL2017", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["daniel hershcovich", "omri abend", "ari rappoport"], "accepted": true, "id": "1704.00552"}, "pdf": {"name": "1704.00552.pdf", "metadata": {"source": "CRF", "title": "A Transition-Based Directed Acyclic Graph Parser for UCCA", "authors": ["Daniel Hershcovich", "Omri Abend"], "emails": ["danielh@cs.huji.ac.il", "oabend@cs.huji.ac.il", "arir@cs.huji.ac.il"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 4.\n00 55\n2v 2\n[ cs\n.C L\n] 4\nA pr\n2 01\n7\ncross-linguistically applicable framework for semantic representation, which builds on extensive typological work and supports rapid annotation. UCCA poses a challenge for existing parsing techniques, as it exhibits reentrancy (resulting in DAG structures), discontinuous structures and non-terminal nodes corresponding to complex semantic units. To our knowledge, the conjunction of these formal properties is not supported by any existing parser. Our transition-based parser, which uses a novel transition set and features based on bidirectional LSTMs, has value not just for UCCA parsing: its ability to handle more general graph structures can inform the development of parsers for other semantic DAG structures, and in languages that frequently use discontinuous structures."}, {"heading": "1 Introduction", "text": "Universal Conceptual Cognitive Annotation (UCCA, Abend and Rappoport, 2013) is a cross-linguistically applicable semantic representation scheme, building on the established Basic Linguistic Theory typological framework (Dixon, 2010a,b, 2012), and Cognitive Linguistics literature (Croft and Cruse, 2004). It has demonstrated applicability to multiple languages, including English, French, German and Czech, support for rapid annotation by non-experts (assisted by an accessible annotation interface (Abend et al., 2017)), and stability under translation (Sulem et al., 2015). It has also proven useful for machine translation evaluation (Birch et al., 2016). UCCA differs from syntactic schemes in terms of content and formal structure. It\nexhibits reentrancy, discontinuous nodes and non-terminals, which no single existing parser supports. Lacking a parser, UCCA\u2019s applicability has been so far limited, a gap this work addresses.\nWe present the first UCCA parser, TUPA (Transition-based UCCA Parser), building on recent advances in discontinuous constituency and dependency graph parsing, and further introducing novel transitions and features for UCCA. Transition-based techniques are a natural starting point for UCCA parsing, given the conceptual similarity of UCCA\u2019s distinctions, centered around predicate-argument structures, to distinctions expressed by dependency schemes, and the achievements of transition-based methods in dependency parsing (Dyer et al., 2015; Andor et al., 2016; Kiperwasser and Goldberg, 2016). We are further motivated by the strength of transition-based methods in related tasks, including dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokgo\u0308z and Eryig\u0306it, 2015), constituency parsing (Sagae and Lavie, 2005; Zhang and Clark, 2009; Zhu et al., 2013; Maier, 2015; Maier and Lichte, 2016), AMR parsing (Wang et al., 2015a,b, 2016; Misra and Artzi, 2016; Goodman et al., 2016; Zhou et al., 2016; Damonte et al., 2017) and CCG parsing (Zhang and Clark, 2011; Ambati et al., 2015, 2016).\nWe evaluate TUPA on the English UCCA corpora, including in-domain and out-of-domain settings. To assess the ability of existing parsers to tackle the task, we develop a conversion procedure from UCCA to bilexical graphs and trees. Results show superior performance for TUPA, demonstrating the effectiveness of the presented approach.1\n1All parsing and conversion code, as well as trained parser models, are available at https://github.com/danielhers/tupa.\nThe rest of the paper is structured as follows: Section 2 describes UCCA in more detail. Section 3 introduces TUPA. Section 4 discusses the data and experimental setup. Section 5 presents the experimental results. Section 6 summarizes related work, and Section 7 concludes the paper."}, {"heading": "2 The UCCA Scheme", "text": "UCCA graphs are labeled, directed acyclic graphs (DAGs), whose leaves correspond to the tokens of the text. A node (or unit) corresponds to a terminal or to several terminals (not necessarily contiguous) viewed as a single entity according to semantic or cognitive considerations. Edges bear a category, indicating the role of the sub-unit in the parent relation. Figure 1 presents a few examples.\nUCCA is a multi-layered representation, where each layer corresponds to a \u201cmodule\u201d of semantic distinctions. UCCA\u2019s foundational layer, targeted in this paper, covers the predicate-argument structure evoked by predicates of all grammatical categories (verbal, nominal, adjectival and others), the inter-relations between them, and other major linguistic phenomena such as coordination and multi-word expressions. The layer\u2019s basic notion is the scene, describing a state, action, movement or some other relation that evolves in time. Each scene contains one main relation (marked as either a Process or a State), as well as one or more Participants. For example, the sentence \u201cAfter graduation, John moved to Paris\u201d (Figure 1a) contains two scenes, whose main relations are \u201cgraduation\u201d and \u201cmoved\u201d. \u201cJohn\u201d is a Participant in both scenes, while \u201cParis\u201d only in the latter. Further categories account for inter-scene relations and the internal structure of complex arguments and relations (e.g. coordination, multi-word expressions and modification).\nOne incoming edge for each non-root node is marked as primary, and the rest (mostly used for implicit relations and arguments) as remote edges, a distinction made by the annotator. The primary edges thus form a tree structure, whereas the remote edges enable reentrancy, forming a DAG.\nWhile parsing technology in general, and transition-based parsing in particular, is wellestablished for syntactic parsing, UCCA has several distinct properties that distinguish it from syntactic representations, mostly UCCA\u2019s tendency to abstract away from syntactic detail that do not affect argument structure. For instance, consider the\nfollowing examples where the concept of a scene has a different rationale from the syntactic concept of a clause. First, non-verbal predicates in UCCA are represented like verbal ones, such as when they appear in copula clauses or noun phrases. Indeed, in Figure 1a, \u201cgraduation\u201d and \u201cmoved\u201d are considered separate events, despite appearing in the same clause. Second, in the same example, \u201cJohn\u201d is marked as a (remote) Participant in the graduation scene, despite not being overtly marked. Third, consider the possessive construction in Figure 1c. While in UCCA \u201ctrip\u201d evokes a scene in which \u201cJohn and Mary\u201d is a Participant, a syntactic scheme would analyze this phrase similarly to \u201cJohn and Mary\u2019s shoes\u201d.\nThese examples demonstrate that a UCCA parser, and more generally semantic parsers, face an additional level of ambiguity compared to their syntactic counterparts (e.g., \u201cafter graduation\u201d is formally very similar to \u201cafter 2pm\u201d, which does not evoke a scene). Section 6 discusses UCCA in the context of other semantic schemes, such as AMR (Banarescu et al., 2013).\nAlongside recent progress in dependency parsing into projective trees, there is increasing interest in parsing into representations with more general structural properties (see Section 6). One such property is reentrancy, namely the sharing of semantic units between predicates. For in-\nstance, in Figure 1a, \u201cJohn\u201d is an argument of both \u201cgraduation\u201d and \u201cmoved\u201d, yielding a DAG rather than a tree. A second property is discontinuity, as in Figure 1b, where \u201cgave up\u201d forms a discontinuous semantic unit. Discontinuities are pervasive, e.g., with multi-word expressions (Schneider et al., 2014). Finally, unlike most dependency schemes, UCCA uses non-terminal nodes to represent units comprising more than one word. The use of non-terminal nodes is motivated by constructions with no clear head, including coordination structures (e.g., \u201cJohn and Mary\u201d in Figure 1c), some multi-word expressions (e.g., \u201cThe Haves and the Have Nots\u201d), and prepositional phrases (either the preposition or the head noun can serve as the constituent\u2019s head). To our knowledge, no existing parser supports all structural properties required for UCCA parsing."}, {"heading": "3 Transition-based UCCA Parsing", "text": "We now turn to presenting TUPA. Building on previous work on parsing reentrancies, discontinuities and non-terminal nodes, we define an extended set of transitions and features that supports the conjunction of these properties.\nTransition-based parsers (Nivre, 2003) scan the text from start to end, and create the parse incrementally by applying a transition at each step to the parser\u2019s state, defined using three data structures: a buffer B of tokens and nodes to be processed, a stack S of nodes currently being processed, and a graph G = (V,E, \u2113) of constructed nodes and edges, where V is the set of nodes, E is the set of edges, and \u2113 : E \u2192 L is the label function, L being the set of possible labels. Some states are marked as terminal, meaning that G is the final output. A classifier is used at each step to select the next transition based on features encoding the parser\u2019s current state. During training, an oracle creates training instances for the classifier, based on gold-standard annotations.\nTransition Set. Given a sequence of tokens w1, . . . , wn, we predict a UCCA graph G over the sequence. Parsing starts with a single node on the stack (an artificial root node), and the input tokens in the buffer. Figure 2 shows the transition set.\nIn addition to the standard SHIFT and REDUCE operations, we follow previous work in transitionbased constituency parsing (Sagae and Lavie, 2005), adding the NODE transition for creating new non-terminal nodes. For every X \u2208 L,\nNODEX creates a new node on the buffer as a parent of the first element on the stack, with an Xlabeled edge. LEFT-EDGEX and RIGHT-EDGEX create a new primary X-labeled edge between the first two elements on the stack, where the parent is the left or the right node, respectively. As a UCCA node may only have one incoming primary edge, EDGE transitions are disallowed if the child node already has an incoming primary edge. LEFT-REMOTEX and RIGHT-REMOTEX do not have this restriction, and the created edge is additionally marked as remote. We distinguish between these two pairs of transitions to allow the parser to create remote edges without the possibility of producing invalid graphs. To support the prediction of multiple parents, node and edge transitions leave the stack unchanged, as in other work on transition-based dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokgo\u0308z and Eryig\u0306it, 2015). REDUCE pops the stack, to allow removing a node once all its edges have been created. To handle discontinuous nodes, SWAP pops the second node on the stack and adds it to the top of the buffer, as with the similarly named transition in previous work (Nivre, 2009; Maier, 2015). Finally, FINISH pops the root node and marks the state as terminal.\nClassifier. The choice of classifier and feature representation has been shown to play an important role in transition-based parsing (Chen and Manning, 2014; Andor et al., 2016; Kiperwasser and Goldberg, 2016). To investigate the impact of the type of transition classifier in UCCA parsing, we experiment with three different models.\n1. Starting with a simple and common choice\n(e.g., Maier and Lichte, 2016), TUPASparse uses a linear classifier with sparse features, trained with the averaged structured perceptron algorithm (Collins and Roark, 2004) and MINUPDATE (Goldberg and Elhadad, 2011): each feature requires a minimum number of updates in training to be included in the model.2\n2. Changing the model to a feedforward neural\nnetwork with dense embedding features, TUPAMLP (\u201cmulti-layer perceptron\u201d),\n2We also experimented with a linear model using dense embedding features, trained with the averaged structured perceptron algorithm. It performed worse than the sparse perceptron model and was hence discarded.\nuses an architecture similar to that of Chen and Manning (2014), but with two rectified linear layers instead of one layer with cube activation. The embeddings and classifier are trained jointly.\n3. Finally, TUPABiLSTM uses a bidirectional\nLSTM for feature representation, on top of the dense embedding features, an architecture similar to Kiperwasser and Goldberg (2016). The BiLSTM runs on the input tokens in forward and backward directions, yielding a vector representation that is then concatenated with dense features representing the parser state (e.g., existing edge labels and previous parser actions; see below). This representation is then fed into a feedforward network similar to TUPAMLP. The feedforward layers, BiLSTM and embeddings are all trained jointly.\nFor all classifiers, inference is performed greedily, i.e., without beam search. Hyperparameters are tuned on the development set (see Section 4).\nFeatures. TUPASparse uses binary indicator features representing the words, POS tags, syntactic dependency labels and existing edge labels related to the top four stack elements and the next three buffer elements, in addition to their children and grandchildren in the graph. We also use bi- and trigram features based on these values (Zhang and Clark, 2009; Zhu et al., 2013), features related to discontinuous nodes (Maier, 2015, including separating punctuation and gap type), features representing existing edges and the number of parents and children, as well as the past actions taken by the parser. In addition, we use use a novel, UCCA-specific feature: number of remote\nchildren.3\nFor TUPAMLP and TUPABiLSTM, we replace all indicator features by a concatenation of the vector embeddings of all represented elements: words, POS tags, syntactic dependency labels, edge labels, punctuation, gap type and parser actions. These embeddings are initialized randomly. We additionally use external word embeddings initialized with pre-trained word2vec vectors (Mikolov et al., 2013),4 updated during training. In addition to dropout between NN layers, we apply word dropout (Kiperwasser and Goldberg, 2016): with a certain probability, the embedding for a word is replaced with a zero vector. We do not apply word dropout to the external word embeddings.\nFinally, for all classifiers we add a novel realvalued feature to the input vector, ratio, corresponding to the ratio between the number of terminals to number of nodes in the graph G. This feature serves as a regularizer for the creation of new nodes, and should be beneficial for other transition-based constituency parsers too.\nTraining. For training the transition classifiers, we use a dynamic oracle (Goldberg and Nivre, 2012), i.e., an oracle that outputs a set of optimal transitions: when applied to the current parser state, the gold standard graph is reachable from the resulting state. For example, the oracle would predict a NODE transition if the stack has on its top a parent in the gold graph that has not been created, but would predict a RIGHT-EDGE transition if the second stack element is a parent of the first element according to the gold graph and the edge between them has not been created. The transition\n3See Appendix A for a full list of used feature templates. 4 https://goo.gl/6ovEhC\npredicted by the classifier is deemed correct and is applied to the parser state to reach the subsequent state, if the transition is included in the set of optimal transitions. Otherwise, a random optimal transition is applied, and for the perceptronbased parser, the classifier\u2019s weights are updated according to the perceptron update rule.\nPOS tags and syntactic dependency labels are extracted using spaCy (Honnibal and Johnson, 2015).5 We use the categorical cross-entropy objective function and optimize the NN classifiers with the Adam optimizer (Kingma and Ba, 2014)."}, {"heading": "4 Experimental Setup", "text": "Data. We conduct our experiments on the UCCA Wikipedia corpus (henceforth, Wiki), and use the English part of the UCCA Twenty Thousand Leagues Under the Sea English-French parallel corpus (henceforth, 20K Leagues) as out-\n5 https://spacy.io\nof-domain data.6 Table 1 presents some statistics for the two corpora. We use passages of indices up to 676 of the Wiki corpus as our training set, passages 688\u2013808 as development set, and passages 942\u20131028 as in-domain test set. While UCCA edges can cross sentence boundaries, we adhere to the common practice in semantic parsing and train our parsers on individual sentences, discarding inter-relations between them (0.18% of the edges). We also discard linkage nodes and edges (as they often express inter-sentence relations and are thus mostly redundant when applied at the sentence level) as well as implicit nodes.7 In the out-of-domain experiments, we apply the same parsers (trained on the Wiki training set) to the 20K Leagues corpus without parameter re-tuning.\nImplementation. We use the DyNet package (Neubig et al., 2017) for implementing the NN classifiers. Unless otherwise noted, we use the default values provided by the package. See Appendix C for the hyperparameter values we found by tuning on the development set.\nEvaluation. We define a simple measure for comparing UCCA structures Gp = (Vp, Ep, \u2113p) and Gg = (Vg, Eg, \u2113g), the predicted and goldstandard graphs, respectively, over the same sequence of terminals W = {w1, . . . , wn}. For an edge e = (u, v) in either graph, u being the parent and v the child, its yield y(e) \u2286 W is the set of terminals in W that are descendants of v. Define the set of mutual edges between Gp and Gg:\n6 http://cs.huji.ac.il/\u02dcoabend/ucca.html 7Appendix B further discusses linkage and implicit units.\nM(Gp, Gg) =\n{(e1, e2) \u2208 Ep \u00d7 Eg | y(e1) = y(e2) \u2227 \u2113p(e1) = \u2113g(e2)}\nLabeled precision and recall are defined by dividing |M(Gp, Gg)| by |Ep| and |Eg|, respectively, and F-score by taking their harmonic mean. We report two variants of this measure: one where we consider only primary edges, and another for remote edges (see Section 2). Performance on remote edges is of pivotal importance in this investigation, which focuses on extending the class of graphs supported by statistical parsers.\nWe note that the measure collapses to the standard PARSEVALconstituency evaluation measure if Gp and Gg are trees. Punctuation is excluded from the evaluation, but not from the datasets.\nComparison to bilexical graph parsers. As no direct comparison with existing parsers is possible, we compare TUPA to bilexical dependency graph parsers, which support reentrancy and discontinuity but not non-terminal nodes.\nTo facilitate the comparison, we convert our training set into bilexical graphs (see examples in Figure 4), train each of the parsers, and evaluate them by applying them to the test set and then reconstructing UCCA graphs, which are compared with the gold standard. The conversion to bilexical graphs is done by heuristically selecting a head terminal for each non-terminal node, and attaching all terminal descendents to the head terminal. In the inverse conversion, we traverse the bilexical graph in topological order, creating non-terminal parents for all terminals, and attaching them to the previously-created non-terminals corresponding to the bilexical heads.8\n8See Appendix D for a detailed description of the conver-\nIn Section 5 we report the upper bounds on the achievable scores due to the error resulting from the removal of non-terminal nodes.\nComparison to tree parsers. For completeness, and as parsing technology is considerably more mature for tree (rather than graph) parsing, we also perform a tree approximation experiment, converting UCCA to (bilexical) trees and evaluating constituency and dependency tree parsers on them (see examples in Figure 5). Our approach is similar to the tree approximation approach used for dependency graph parsing (Agic\u0301 et al., 2015; Ferna\u0301ndez-Gonza\u0301lez and Martins, 2015), where dependency graphs were converted into dependency trees and then parsed by dependency tree parsers. In our setting, the conversion to trees consists simply of removing remote edges from the graph, and then to bilexical trees by applying the same procedure as for bilexical graphs.\nBaseline parsers. We evaluate two bilexical graph semantic dependency parsers: DAGParser (Ribeyre et al., 2014), the leading transitionbased parser in SemEval 2014 (Oepen et al., 2014) and TurboParser (Almeida and Martins, 2015), a graph-based parser from SemEval 2015 (Oepen et al., 2015); UPARSE (Maier and Lichte, 2016), a transition-based constituency parser supporting discontinuous constituents; and two bilexical tree parsers: MaltParser (Nivre et al., 2007), and the stack LSTM-based parser of Dyer et al. (2015, henceforce \u201cLSTM Parser\u201d). Default settings are used in all cases.9 DAGParser and UP-\nsion procedures. 9For MaltParser we use the ARCEAGER transition set and SVM classifier. Other configurations yielded lower scores.\nARSE use beam search by default, with a beam size of 5 and 4 respectively. The other parsers are greedy."}, {"heading": "5 Results", "text": "Table 2 presents our main experimental results, as well as upper bounds for the baseline parsers, reflecting the error resulting from the conversion.10\nDAGParser and UPARSE are most directly comparable to TUPASparse, as they also use a perceptron classifier with sparse features. TUPASparse considerably outperforms both, where DAGParser does not predict any remote edges in the out-ofdomain setting. TurboParser fares worse in this comparison, despite somewhat better results on remote edges. The LSTM parser of Dyer et al. (2015) obtains the highest primary F-score among the baseline parsers, with a considerable margin.\nUsing a feedforward NN and embedding features, TUPAMLP obtains higher scores than TUPASparse, but is outperformed by the LSTM parser on primary edges. However, using better input encoding allowing virtual look-ahead and look-behind in the token representation, TUPABiLSTM obtains substantially higher scores\n10The low upper bound for remote edges is partly due to the removal of implicit nodes (not supported in bilexical representations), where the whole sub-graph headed by such nodes, often containing remote edges, must be discarded.\nthan TUPAMLP and all other parsers, on both primary and remote edges, both in the in-domain and out-of-domain settings. Its performance in absolute terms, of 73.5% F-score on primary edges, is encouraging in light of UCCA\u2019s interannotator agreement of 80\u201385% F-score on them (Abend and Rappoport, 2013).\nThe parsers resulting from tree approximation are unable to recover any remote edges, as these are removed in the conversion.11 The bilexical DAG parsers are quite limited in this respect as well. While some of the DAG parsers\u2019 difficulty can be attributed to the conversion upper bound of 58.3%, this in itself cannot account for their poor performance on remote edges, which is an order of magnitude lower than that of TUPABiLSTM."}, {"heading": "6 Related Work", "text": "While earlier work on anchored12 semantic parsing has mostly concentrated on shallow semantic analysis, focusing on semantic role labeling of verbal argument structures, the focus has recently shifted to parsing of more elaborate representations that account for a wider range of phenomena\n11We also experimented with a simpler version of TUPA lacking REMOTE transitions, obtaining an increase of up to 2 labeled F-score points on primary edges, at the cost of not being able to predict remote edges.\n12By anchored we mean that the semantic representation directly corresponds to the words and phrases of the text.\n(Abend and Rappoport, 2017).\nGrammar-Based Parsing. Linguistically expressive grammars such as HPSG (Pollard and Sag, 1994), CCG (Steedman, 2000) and TAG (Joshi and Schabes, 1997) provide a theory of the syntax-semantics interface, and have been used as a basis for semantic parsers by defining compositional semantics on top of them (Flickinger, 2000; Bos, 2005, among others). Depending on the grammar and the implementation, such semantic parsers can support some or all of the structural properties UCCA exhibits. Nevertheless, this line of work differs from our approach in two important ways. First, the representations are different. UCCA does not attempt to model the syntax-semantics interface and is thus less coupled with syntax. Second, while grammar-based parsers explicitly model syntax, our approach directly models the relation between tokens and semantic structures, without explicit composition rules.\nBroad-Coverage Semantic Parsing. Most closely related to this work is Broad-Coverage Semantic Dependency Parsing (SDP), addressed in two SemEval tasks (Oepen et al., 2014, 2015). Like UCCA parsing, SDP addresses a wide range of semantic phenomena, and supports discontinuous units and reentrancy. In SDP, however, bilexical dependencies are used, and a head must be selected for every relation\u2014even in constructions that have no clear head, such as coordination (Ivanova et al., 2012). The use of non-terminal nodes is a simple way to avoid this liability. SDP also differs from UCCA in the type of distinctions it makes, which are more tightly coupled with syntactic considerations, where UCCA aims to capture purely semantic cross-linguistically applicable notions. For instance, the \u201cposs\u201d label in the DM target representation is used to annotate syntactic possessive constructions, regardless of whether they correspond to semantic ownership (e.g., \u201cJohn\u2019s dog\u201d) or other semantic relations, such as marking an argument of a nominal predicate (e.g., \u201cJohn\u2019s kick\u201d). UCCA reflects the difference between these constructions.\nRecent interest in SDP has yielded numerous works on graph parsing (Ribeyre et al., 2014; Thomson et al., 2014; Almeida and Martins, 2015; Du et al., 2015), including tree approximation (Agic\u0301 and Koller, 2014; Schluter et al.,\n2014) and joint syntactic/semantic parsing (Henderson et al., 2013; Swayamdipta et al., 2016).\nAbstract Meaning Representation. Another line of work addresses parsing into AMRs (Flanigan et al., 2014; Vanderwende et al., 2015; Pust et al., 2015; Artzi et al., 2015), which, like UCCA, abstract away from syntactic distinctions and represent meaning directly, using OntoNotes predicates (Weischedel et al., 2013). Events in AMR may also be evoked by non-verbal predicates, including possessive constructions.\nUnlike in UCCA, the alignment between AMR concepts and the text is not explicitly marked. While sharing much of this work\u2019s motivation, not anchoring the representation in the text complicates the parsing task, as it requires the alignment to be automatically (and imprecisely) detected. Indeed, despite considerable technical effort (Flanigan et al., 2014; Pourdamghani et al., 2014; Werling et al., 2015), concept identification is only about 80%\u201390% accurate. Furthermore, anchoring allows breaking down sentences into semantically meaningful sub-spans, which is useful for many applications (Ferna\u0301ndez-Gonza\u0301lez and Martins, 2015; Birch et al., 2016).\nSeveral transition-based AMR parsers have been proposed: CAMR assumes syntactically parsed input, processing dependency trees into AMR (Wang et al., 2015a,b, 2016; Goodman et al., 2016). In contrast, the parsers of Damonte et al. (2017) and Zhou et al. (2016) do not require syntactic pre-processing. Damonte et al. (2017) perform concept identification using a simple heuristic selecting the most frequent graph for each token, and Zhou et al. (2016) perform concept identification and parsing jointly. UCCA parsing does not require separately aligning the input tokens to the graph. TUPA creates non-terminal units as part of the parsing process.\nFurthermore, existing transition-based AMR parsers are not general DAG parsers. They are only able to predict a subset of reentrancies and discontinuities, as they may remove nodes before their parents have been predicted (Damonte et al., 2017). They are thus limited to a sub-class of AMRs in particular, and specifically cannot produce arbitrary DAG parses. TUPA\u2019s transition set,\non the other hand, allows general DAG parsing.13"}, {"heading": "7 Conclusion", "text": "We present TUPA, the first parser for UCCA. Evaluated in in-domain and out-of-domain settings, we show that coupled with a NN classifier and BiLSTM feature extractor, it accurately predicts UCCA graphs from text, outperforming a variety of strong baselines by a margin.\nDespite the recent diversity of semantic parsing work, the effectiveness of different approaches for structurally and semantically different schemes is not well-understood (Kuhlmann and Oepen, 2016). Our contribution to this literature is a general parser that supports multiple parents, discontinuous units and non-terminal nodes.\nFuture work will evaluate TUPA in a multilingual setting, assessing UCCA\u2019s cross-linguistic applicability. We will also apply the TUPA transition scheme to different target representations, including AMR and SDP, exploring the limits of its generality. In addition, we will explore different conversion procedures (Kong et al., 2015) to compare different representations, suggesting ways for a data-driven design of semantic annotation.\nA parser for UCCAwill enable using the framework for new tasks, in addition to existing applications such as machine translation evaluation (Birch et al., 2016). We believe UCCA\u2019s merits in providing a cross-linguistically applicable, broadcoverage annotation will support ongoing efforts to incorporate deeper semantic structures into various applications, such as sentence simplification (Narayan and Gardent, 2014) and summarization (Liu et al., 2015)."}, {"heading": "Acknowledgments", "text": "This work was supported by the HUJI Cyber Security Research Center in conjunction with the Israel National Cyber Bureau in the PrimeMinister\u2019s Office, and by the Intel Collaborative Research Institute for Computational Intelligence (ICRI-CI). The first author was supported by a fellowship from the Edmond and Lily Safra Center for Brain Sciences. We thank Wolfgang Maier, Nathan Schneider, Elior Sulem and the anonymous reviewers for their helpful comments.\n13See Appendix E for a proof sketch for the completeness of TUPA\u2019s transition set."}, {"heading": "A Feature Templates", "text": "Figure 6 presents the feature templates used by TUPASparse. All feature templates define binary features. The other classifiers use the same elements listed in the feature templates, but all categorical features are replaced by vector embeddings, and all count-based features are replaced by their numeric value.\nFor some of the features, we used the notion of head word, defined by the h\u2217 function (see Appendix D). While head words are not explicitly represented in the UCCA scheme, these features prove useful as means of encoding word-to-word relations."}, {"heading": "B Extended Presentation of UCCA", "text": "This work does not handle two important constructions in the UCCA foundational layer: Linkage, representing discourse relations, and Implicit, representing covert entities. Table 3 shows the statistics of linkage nodes and edges and implicit nodes in the corpora.\nLinkage. Figure 7 demonstrates a linkage relation, omitted from Figure 1a. The linkage relation is represented by the gray node. LA is link argument, and LR is link relation. The relation represents the fact that the linker \u201cAfter\u201d links the two parallel scenes that are the arguments of the linkage. Linkage relations are another source of multiple parents for a node, which we do not yet handle in parsing and evaluation.\nImplicit units. UCCA graphs may contain implicit units with no correspondent in the text. Figure 8 shows the annotation for the sentence \u201cA similar technique is almost impossible to apply to other crops, such as cotton, soybeans and rice.\u201d. The sentence was used by Oepen et al. (2015) to compare between different semantic dependency schemes. It includes a single scene, whose main\nrelation is \u201capply\u201d, a secondary relation \u201calmost impossible\u201d, as well as two complex arguments: \u201ca similar technique\u201d and the coordinated argument \u201csuch as cotton, soybeans, and rice.\u201d In addition, the scene includes an implicit argument, which represents the agent of the \u201capply\u201d relation.\nThe parsing of these units is deferred to future work, as it is likely to require different methods than those explored in this paper (Roth and Frank,\n2015)."}, {"heading": "C Hyperparameter Values", "text": "Table 4 lists the hyperparameter values we found for the different classifiers by tuning on the development set. Note that learning rate decay is multiplicative and is applied at each epoch. Mini-batch size is in number of transitions, but a mini-batch must contain only whole sentences."}, {"heading": "D Bilexical Graph Conversion", "text": "Here we describe the algorithms used in the conversion referred to in Section 4.\nNotation. Let L be the set of possible edge labels. A UCCA graph over a sequence of tokens w1, . . . , wn is a directed acyclic graph G = (V,E, \u2113), where \u2113 : E \u2192 L maps edges to labels. For each token wi there exists a leaf (terminal) ti \u2208 V . A bilexical (dependency) graph over the same text consists of a set A of labeled\ndependency arcs (t\u2032, l, t) between the terminals of G, where t\u2032 is the head, t is the dependent and l is the edge label.\nConversion to bilexical graphs. Let G = (V,E, \u2113) be a UCCA graph with labels \u2113 : E \u2192 L. The conversion to a bilexical graph requires calculating the set A. All non-terminals in G are removed.\nWe define a linear order over possible edge labels L (see Figure 9). The priority order generally places core-like categories before adjunct-like ones, and was decided heuristically. For each node u \u2208 V , denote by h(u) its child with the highestpriority edge label. The leftmost edge is chosen in case of a tie. Let h\u2217(u) be the terminal reached by recursively applying h(\u00b7) over u. For each termi-\nnal t, we define\nN(t) = {(u, v) \u2208 E | t = h\u2217(v) \u2227 t 6= h\u2217(u)}\nFor each edge (u, v) \u2208 N(t), we add h\u2217(u) as a head of t in A, with the label \u2113(u, v). This procedure is given in Algorithm 1.\nData: UCCA graph G = (V,E, \u2113) Result: set A of labeled bilexical arcs A \u2190 \u2205; foreach t \u2208 Terminals(V ) do\nforeach (u, v) \u2208 N(t) do A \u2190 A \u222a {(h\u2217(u), \u2113(u, v), t)}; end\nend\nAlgorithm 1: Conversion to bilexical graphs.\nNote that this conversion procedure is simpler than the head percolation procedure used for converting syntactic constituency trees to dependency trees (Collins, 1997), since h(u) (similar to u\u2019s head-containing child) depends only on \u2113(u, h(u)) and not on the sub-tree spanned by u, because edge labels in UCCA directly express the role of the child in the parent unit, and are thus sufficient for determining which of u\u2019s children contains the head node.\nConversion from bilexical graphs. The inverse conversion introduces non-terminal nodes back into the graph. As the distinction between lowand high-attaching nodes is lost in the conversion, we assume that attachments are always lowattaching. Let A be a the labeled arc set of a bilexical graph. Iterating over the terminals in topological order according to A, we add its members as terminals to graph and create a pre-terminal parent ut for each terminal t, with an edge labeled as Terminal between them. The parents of the preterminals are determined by the terminal\u2019s parent in the bilexical graph: if t\u2032 is a head of t in A,\nthen ut\u2032 will be a parent of ut. We add an intermediate node in between if t has any dependents in A, to allow adding their pre-terminals as children later. Edge labels for the intermediate edges are determined by a rule-based function, denoted by Label(t). This procedure is given in Algorithm 2.\nData: list T of terminals, set A of labeled\nbilexical arcs\nResult: UCCA graph G = (V,E, \u2113) V \u2190 \u2205, E \u2190 \u2205; foreach t \u2208 TopologicalSort(T,A) do\nut \u2190 Node(); V \u2190 V \u222a {ut, t}, E \u2190 E \u222a {(ut, t)}; \u2113(ut, t) \u2190 Terminal ; foreach t\u2032 \u2208 T, l \u2208 L do\nif (t\u2032, l, t) \u2208 A then if \u2203t\u2032\u2032 \u2208 T, l\u2032 \u2208 L : (t, l\u2032, t\u2032\u2032) \u2208 A then\nu \u2190 Node(); V \u2190 V \u222a {u}, E \u2190 E \u222a {(u, ut)}; \u2113(u, ut) \u2190 Label(t);\nelse\nu \u2190 ut; end E \u2190 E \u222a {(ut\u2032 , u)}; \u2113(ut\u2032 , u) \u2190 l;\nend\nend\nend Function Label Data: node t \u2208 T Result: label l \u2208 L if IsPunctuation(t) then\nreturn Punctuation;\nelse if \u2203t\u2032 \u2208 T : (t,ParallelScene, t\u2032) \u2208 A then\nreturn ParallelScene;\nelse if \u2203t\u2032 \u2208 T : (t,Participant, t\u2032) \u2208 A then\nreturn Process;\nelse\nreturn Center; Algorithm 2: Conversion from bilexical graphs."}, {"heading": "E Proof Sketch for Completeness of the TUPA Transition Set", "text": "Here we sketch a proof for the fact that the transition set defined in Section 3 is capable of producing any rooted, labeled, anchored DAG. This\nproves that the transition set is complete with respect to the class of graphs that comprise UCCA.\nLet G = (V,E, \u2113) be a graph with labels \u2113 : E \u2192 L over a sequence of tokens w1, . . . , wn. Parsing starts with w1, . . . , wn on the buffer, and the root node on the stack.\nFirst we show that every node can be created, by induction on the node height: every terminal (height zero) already exists at the beginning of the parse (and so does the root node). Let v \u2208 V be of height k, and assume all nodes of height less than k can be created. Take any (primary) child u of v: its height must be less than k. If u is a terminal, apply SHIFT until it lies at the head of the buffer. Otherwise, by our assumption, u can still be created. Right after u is created, it lies at the head of the buffer. A SHIFT transition followed by a NODE\u2113(v,u) transition will move u to the stack and create v on the buffer, with the correct edge label.\nNext, we show that every edge can be created. Let (v, u) \u2208 E be any edge with parent v and child u. Assume v and u have both been created (we already showed that both are created eventually). If either v or u are in the buffer, apply SHIFT until both are in the stack. If both are in the stack but neither is at the stack top, apply SWAP transitions until either moves to the buffer, and then apply SHIFT. Now, assume either v or u is at the stack top. If the other is not the second element on the stack, apply SWAP transitions until it is. Finally, v and u are the top two elements on the stack. If they are in that order, apply RIGHT-EDGE\u2113(v,u) (or RIGHT-REMOTE\u2113(v,u) if the edge between them is remote). Otherwise, apply LEFT-EDGE\u2113(v,u) (or\nLEFT-REMOTE\u2113(v,u) if the edge between them is remote). This creates (v, u) with the correct edge label.\nOnce all nodes and edges have been created, we can apply REDUCE until only the root node remains on the stack, and then FINISH. This yields exactly the graph G.\nNote that the distinction we made between primary and remote transitions is suitable for UCCA parsing. For general graph parsing without this distinction, the REMOTE transitions can be removed, as well as the single-primary-parent restriction on EDGE transition."}], "references": [{"title": "HUME: Human UCCA", "author": ["Barry Haddow"], "venue": null, "citeRegEx": "Haddow.,? \\Q2016\\E", "shortCiteRegEx": "Haddow.", "year": 2016}, {"title": "A fast", "author": ["Danqi Chen", "Christopher Manning"], "venue": null, "citeRegEx": "Chen and Manning.,? \\Q2014\\E", "shortCiteRegEx": "Chen and Manning.", "year": 2014}, {"title": "Multilingual joint pars", "author": ["Gabriele Musillo"], "venue": null, "citeRegEx": "Musillo.,? \\Q2013\\E", "shortCiteRegEx": "Musillo.", "year": 2013}, {"title": "Who did what to whom", "author": ["Dan Flickinger"], "venue": null, "citeRegEx": "Flickinger.,? \\Q2012\\E", "shortCiteRegEx": "Flickinger.", "year": 2012}, {"title": "Hybrid simplification using deep semantics and machine translation", "author": ["Shashi Narayan", "Claire Gardent."], "venue": "Proc. of ACL. pages 435\u2013445.", "citeRegEx": "Narayan and Gardent.,? 2014", "shortCiteRegEx": "Narayan and Gardent.", "year": 2014}, {"title": "DyNet: The dynamic neural network toolkit", "author": ["Lingpeng Kong", "Adhiguna Kuncoro", "Gaurav Kumar", "Chaitanya Malaviya", "Paul Michel", "Yusuke Oda", "Matthew Richardson", "Naomi Saphra", "Swabha Swayamdipta", "Pengcheng Yin."], "venue": "arXiv preprint", "citeRegEx": "Kong et al\\.,? 2017", "shortCiteRegEx": "Kong et al\\.", "year": 2017}, {"title": "An efficient algorithm for projective dependency parsing", "author": ["Joakim Nivre."], "venue": "Proc. of IWPT. pages 149\u2013160.", "citeRegEx": "Nivre.,? 2003", "shortCiteRegEx": "Nivre.", "year": 2003}, {"title": "Non-projective dependency parsing in expected linear time", "author": ["Joakim Nivre."], "venue": "Proc. of ACL. pages 351\u2013359.", "citeRegEx": "Nivre.,? 2009", "shortCiteRegEx": "Nivre.", "year": 2009}, {"title": "MaltParser: A language-independent system for data-driven dependency parsing", "author": ["Joakim Nivre", "Johan Hall", "Jens Nilsson", "Atanas Chanev", "G\u00fclsen Eryigit", "Sandra K\u00fcbler", "Svetoslav Marinov", "Erwin Marsi."], "venue": "Natural Language Engineering", "citeRegEx": "Nivre et al\\.,? 2007", "shortCiteRegEx": "Nivre et al\\.", "year": 2007}, {"title": "SemEval 2015 task 18: Broad-coverage semantic dependency parsing", "author": ["Stephan Oepen", "Marco Kuhlmann", "Yusuke Miyao", "Daniel Zeman", "Silvie Cinkov\u00e1", "Dan Flickinger", "Jan Haji\u010d", "Zde\u0148ka Ure\u0161ov\u00e1."], "venue": "Proc. of SemEval. pages 915\u2013926.", "citeRegEx": "Oepen et al\\.,? 2015", "shortCiteRegEx": "Oepen et al\\.", "year": 2015}, {"title": "SemEval 2014 task 8: Broad-coverage semantic dependency parsing", "author": ["Stephan Oepen", "Marco Kuhlmann", "Yusuke Miyao", "Daniel Zeman", "Dan Flickinger", "Jan Haji\u010d", "Angelina Ivanova", "Yi Zhang."], "venue": "Proc. of SemEval. pages 63\u201372.", "citeRegEx": "Oepen et al\\.,? 2014", "shortCiteRegEx": "Oepen et al\\.", "year": 2014}, {"title": "Head Driven Phrase Structure Grammar", "author": ["Carl Pollard", "Ivan Sag."], "venue": "CSLI Publications, Stanford, CA.", "citeRegEx": "Pollard and Sag.,? 1994", "shortCiteRegEx": "Pollard and Sag.", "year": 1994}, {"title": "Aligning English strings with abstract meaning representation graphs", "author": ["Nima Pourdamghani", "Yang Gao", "Ulf Hermjakob", "Kevin Knight."], "venue": "Proc. of EMNLP. pages 425\u2013429.", "citeRegEx": "Pourdamghani et al\\.,? 2014", "shortCiteRegEx": "Pourdamghani et al\\.", "year": 2014}, {"title": "Parsing English into abstract meaning representation using syntaxbased machine translation", "author": ["Michael Pust", "Ulf Hermjakob", "Kevin Knight", "Daniel Marcu", "Jonathan May."], "venue": "Proc. of EMNLP. pages 1143\u20131154.", "citeRegEx": "Pust et al\\.,? 2015", "shortCiteRegEx": "Pust et al\\.", "year": 2015}, {"title": "Alpage: Transition-based semantic graph parsing with syntactic features", "author": ["Corentin Ribeyre", "Eric Villemonte de la Clergerie", "Djam\u00e9 Seddah."], "venue": "Proc. of SemEval. pages 97\u2013103.", "citeRegEx": "Ribeyre et al\\.,? 2014", "shortCiteRegEx": "Ribeyre et al\\.", "year": 2014}, {"title": "Inducing Implicit Arguments from Comparable Texts: A Framework and its Applications", "author": ["Michael Roth", "Anette Frank."], "venue": "Computational Linguistics 41:625\u2013664.", "citeRegEx": "Roth and Frank.,? 2015", "shortCiteRegEx": "Roth and Frank.", "year": 2015}, {"title": "A classifier-based parser with linear run-time complexity", "author": ["Kenji Sagae", "Alon Lavie."], "venue": "Proc. of IWPT. pages 125\u2013132.", "citeRegEx": "Sagae and Lavie.,? 2005", "shortCiteRegEx": "Sagae and Lavie.", "year": 2005}, {"title": "Shift-reduce dependency DAG parsing", "author": ["Kenji Sagae", "Jun\u2019ichi Tsujii"], "venue": "In Proc. of COLING", "citeRegEx": "Sagae and Tsujii.,? \\Q2008\\E", "shortCiteRegEx": "Sagae and Tsujii.", "year": 2008}, {"title": "Copenhagen-Malm\u00f6: Tree approximations of semantic parsing problems", "author": ["Natalie Schluter", "Anders S\u00f8gaard", "Jakob Elming", "Dirk Hovy", "Barbara Plank", "H\u00e9ctor Mart\u0131\u0301nez Alonso", "Anders Johanssen", "Sigrid Klerke"], "venue": "In Proc. of SemEval", "citeRegEx": "Schluter et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Schluter et al\\.", "year": 2014}, {"title": "Discriminative lexical semantic segmentation with gaps: running the MWE gamut", "author": ["Nathan Schneider", "Emily Danchik", "Chris Dyer", "Noah A Smith."], "venue": "TACL 2:193\u2013206.", "citeRegEx": "Schneider et al\\.,? 2014", "shortCiteRegEx": "Schneider et al\\.", "year": 2014}, {"title": "The Syntactic Process", "author": ["Mark Steedman."], "venue": "MIT Press, Cambridge, MA.", "citeRegEx": "Steedman.,? 2000", "shortCiteRegEx": "Steedman.", "year": 2000}, {"title": "Conceptual annotations preserve structure across translations: A French-English case study", "author": ["Elior Sulem", "Omri Abend", "Ari Rappoport."], "venue": "Proc. of S2MT. pages 11\u201322.", "citeRegEx": "Sulem et al\\.,? 2015", "shortCiteRegEx": "Sulem et al\\.", "year": 2015}, {"title": "Greedy, joint syntacticsemantic parsing with stack LSTMs", "author": ["Swabha Swayamdipta", "Miguel Ballesteros", "Chris Dyer", "Noah A. Smith."], "venue": "Proc. of CoNLL. pages 187\u2013197.", "citeRegEx": "Swayamdipta et al\\.,? 2016", "shortCiteRegEx": "Swayamdipta et al\\.", "year": 2016}, {"title": "CMU: Arc-factored, discriminative semantic dependency parsing", "author": ["Sam Thomson", "Brendan O\u2019Connor", "Jeffrey Flanigan", "David Bamman", "Jesse Dodge", "Swabha Swayamdipta", "Nathan Schneider", "Chris Dyer", "Noah A. Smith"], "venue": null, "citeRegEx": "Thomson et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Thomson et al\\.", "year": 2014}, {"title": "Transitionbased dependency DAG parsing using dynamic oracles", "author": ["Alper Tokg\u00f6z", "G\u00fclsen Eryi\u011fit."], "venue": "Proc. of ACL Student Research Workshop. pages 22\u201327.", "citeRegEx": "Tokg\u00f6z and Eryi\u011fit.,? 2015", "shortCiteRegEx": "Tokg\u00f6z and Eryi\u011fit.", "year": 2015}, {"title": "An AMR parser for English, French, German, Spanish and Japanese and a new AMR-annotated corpus", "author": ["Lucy Vanderwende", "Arul Menezes", "Chris Quirk."], "venue": "Proc. of NAACL. pages 26\u201330.", "citeRegEx": "Vanderwende et al\\.,? 2015", "shortCiteRegEx": "Vanderwende et al\\.", "year": 2015}, {"title": "CAMR at SemEval-2016 task 8: An extended transition-based amr parser", "author": ["Chuan Wang", "Sameer Pradhan", "Xiaoman Pan", "Heng Ji", "Nianwen Xue."], "venue": "Proc. of SemEval. pages 1173\u20131178.", "citeRegEx": "Wang et al\\.,? 2016", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "Boosting transition-based AMR parsing with refined actions and auxiliary analyzers", "author": ["Chuan Wang", "Nianwen Xue", "Sameer Pradhan."], "venue": "Proc. of ACL. pages 857\u2013862.", "citeRegEx": "Wang et al\\.,? 2015a", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "A transition-based algorithm for AMR parsing", "author": ["Chuan Wang", "Nianwen Xue", "Sameer Pradhan."], "venue": "Proc. of NAACL. pages 366\u2013375.", "citeRegEx": "Wang et al\\.,? 2015b", "shortCiteRegEx": "Wang et al\\.", "year": 2015}, {"title": "OntoNotes release", "author": ["Franchini"], "venue": null, "citeRegEx": "Franchini,? \\Q2013\\E", "shortCiteRegEx": "Franchini", "year": 2013}, {"title": "Hyperparameter Values Table 4 lists the hyperparameter values we found for the different classifiers by tuning on the development", "author": [], "venue": null, "citeRegEx": "2015..,? \\Q2015\\E", "shortCiteRegEx": "2015..", "year": 2015}], "referenceMentions": [{"referenceID": 21, "context": ", 2017)), and stability under translation (Sulem et al., 2015).", "startOffset": 42, "endOffset": 62}, {"referenceID": 17, "context": "We are further motivated by the strength of transition-based methods in related tasks, including dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryi\u011fit, 2015), constituency parsing (Sagae and Lavie, 2005; Zhang and Clark, 2009; Zhu et al.", "startOffset": 122, "endOffset": 194}, {"referenceID": 14, "context": "We are further motivated by the strength of transition-based methods in related tasks, including dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryi\u011fit, 2015), constituency parsing (Sagae and Lavie, 2005; Zhang and Clark, 2009; Zhu et al.", "startOffset": 122, "endOffset": 194}, {"referenceID": 24, "context": "We are further motivated by the strength of transition-based methods in related tasks, including dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryi\u011fit, 2015), constituency parsing (Sagae and Lavie, 2005; Zhang and Clark, 2009; Zhu et al.", "startOffset": 122, "endOffset": 194}, {"referenceID": 16, "context": ", 2014; Tokg\u00f6z and Eryi\u011fit, 2015), constituency parsing (Sagae and Lavie, 2005; Zhang and Clark, 2009; Zhu et al., 2013; Maier, 2015; Maier and Lichte, 2016), AMR parsing (Wang et al.", "startOffset": 56, "endOffset": 157}, {"referenceID": 19, "context": ", with multi-word expressions (Schneider et al., 2014).", "startOffset": 30, "endOffset": 54}, {"referenceID": 6, "context": "Transition-based parsers (Nivre, 2003) scan the text from start to end, and create the parse incrementally by applying a transition at each step to the parser\u2019s state, defined using three data structures: a buffer B of tokens and nodes to be processed, a stack S of nodes currently being processed, and a graph G = (V,E, l) of constructed nodes and edges, where V is the set of nodes, E is the set of edges, and l : E \u2192 L is the label function, L being the set of possible labels.", "startOffset": 25, "endOffset": 38}, {"referenceID": 16, "context": "In addition to the standard SHIFT and REDUCE operations, we follow previous work in transitionbased constituency parsing (Sagae and Lavie, 2005), adding the NODE transition for creating new non-terminal nodes.", "startOffset": 121, "endOffset": 144}, {"referenceID": 17, "context": "To support the prediction of multiple parents, node and edge transitions leave the stack unchanged, as in other work on transition-based dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryi\u011fit, 2015).", "startOffset": 162, "endOffset": 234}, {"referenceID": 14, "context": "To support the prediction of multiple parents, node and edge transitions leave the stack unchanged, as in other work on transition-based dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryi\u011fit, 2015).", "startOffset": 162, "endOffset": 234}, {"referenceID": 24, "context": "To support the prediction of multiple parents, node and edge transitions leave the stack unchanged, as in other work on transition-based dependency graph parsing (Sagae and Tsujii, 2008; Ribeyre et al., 2014; Tokg\u00f6z and Eryi\u011fit, 2015).", "startOffset": 162, "endOffset": 234}, {"referenceID": 7, "context": "To handle discontinuous nodes, SWAP pops the second node on the stack and adds it to the top of the buffer, as with the similarly named transition in previous work (Nivre, 2009; Maier, 2015).", "startOffset": 164, "endOffset": 190}, {"referenceID": 1, "context": "The choice of classifier and feature representation has been shown to play an important role in transition-based parsing (Chen and Manning, 2014; Andor et al., 2016; Kiperwasser and Goldberg, 2016).", "startOffset": 121, "endOffset": 197}, {"referenceID": 1, "context": "uses an architecture similar to that of Chen and Manning (2014), but with two rectified linear layers instead of one layer with cube activation.", "startOffset": 40, "endOffset": 64}, {"referenceID": 14, "context": "We evaluate two bilexical graph semantic dependency parsers: DAGParser (Ribeyre et al., 2014), the leading transitionbased parser in SemEval 2014 (Oepen et al.", "startOffset": 71, "endOffset": 93}, {"referenceID": 10, "context": ", 2014), the leading transitionbased parser in SemEval 2014 (Oepen et al., 2014) and TurboParser (Almeida and Martins, 2015), a graph-based parser from SemEval 2015 (Oepen et al.", "startOffset": 60, "endOffset": 80}, {"referenceID": 9, "context": ", 2014) and TurboParser (Almeida and Martins, 2015), a graph-based parser from SemEval 2015 (Oepen et al., 2015); UPARSE (Maier and Lichte, 2016), a transition-based constituency parser supporting discontinuous constituents; and two bilexical tree parsers: MaltParser (Nivre et al.", "startOffset": 92, "endOffset": 112}, {"referenceID": 8, "context": ", 2015); UPARSE (Maier and Lichte, 2016), a transition-based constituency parser supporting discontinuous constituents; and two bilexical tree parsers: MaltParser (Nivre et al., 2007), and the stack LSTM-based parser of Dyer et al.", "startOffset": 163, "endOffset": 183}, {"referenceID": 11, "context": "Linguistically expressive grammars such as HPSG (Pollard and Sag, 1994), CCG (Steedman, 2000) and TAG (Joshi and Schabes, 1997) provide a theory of the syntax-semantics interface, and have been used as a basis for semantic parsers by defining compositional semantics on top of them (Flickinger, 2000; Bos, 2005, among others).", "startOffset": 48, "endOffset": 71}, {"referenceID": 20, "context": "Linguistically expressive grammars such as HPSG (Pollard and Sag, 1994), CCG (Steedman, 2000) and TAG (Joshi and Schabes, 1997) provide a theory of the syntax-semantics interface, and have been used as a basis for semantic parsers by defining compositional semantics on top of them (Flickinger, 2000; Bos, 2005, among others).", "startOffset": 77, "endOffset": 93}, {"referenceID": 14, "context": "Recent interest in SDP has yielded numerous works on graph parsing (Ribeyre et al., 2014; Thomson et al., 2014; Almeida and Martins, 2015; Du et al., 2015), including tree approximation (Agi\u0107 and Koller, 2014; Schluter et al.", "startOffset": 67, "endOffset": 155}, {"referenceID": 23, "context": "Recent interest in SDP has yielded numerous works on graph parsing (Ribeyre et al., 2014; Thomson et al., 2014; Almeida and Martins, 2015; Du et al., 2015), including tree approximation (Agi\u0107 and Koller, 2014; Schluter et al.", "startOffset": 67, "endOffset": 155}, {"referenceID": 18, "context": ", 2015), including tree approximation (Agi\u0107 and Koller, 2014; Schluter et al., 2014) and joint syntactic/semantic parsing (Henderson et al.", "startOffset": 38, "endOffset": 84}, {"referenceID": 22, "context": ", 2014) and joint syntactic/semantic parsing (Henderson et al., 2013; Swayamdipta et al., 2016).", "startOffset": 45, "endOffset": 95}, {"referenceID": 25, "context": "Another line of work addresses parsing into AMRs (Flanigan et al., 2014; Vanderwende et al., 2015; Pust et al., 2015; Artzi et al., 2015), which, like UCCA, abstract away from syntactic distinctions and represent meaning directly, using OntoNotes predicates (Weischedel et al.", "startOffset": 49, "endOffset": 137}, {"referenceID": 13, "context": "Another line of work addresses parsing into AMRs (Flanigan et al., 2014; Vanderwende et al., 2015; Pust et al., 2015; Artzi et al., 2015), which, like UCCA, abstract away from syntactic distinctions and represent meaning directly, using OntoNotes predicates (Weischedel et al.", "startOffset": 49, "endOffset": 137}, {"referenceID": 12, "context": "Indeed, despite considerable technical effort (Flanigan et al., 2014; Pourdamghani et al., 2014; Werling et al., 2015), concept identification is only about 80%\u201390% accurate.", "startOffset": 46, "endOffset": 118}, {"referenceID": 26, "context": "Several transition-based AMR parsers have been proposed: CAMR assumes syntactically parsed input, processing dependency trees into AMR (Wang et al., 2015a,b, 2016; Goodman et al., 2016). In contrast, the parsers of Damonte et al. (2017) and Zhou et al.", "startOffset": 136, "endOffset": 237}, {"referenceID": 26, "context": "Several transition-based AMR parsers have been proposed: CAMR assumes syntactically parsed input, processing dependency trees into AMR (Wang et al., 2015a,b, 2016; Goodman et al., 2016). In contrast, the parsers of Damonte et al. (2017) and Zhou et al. (2016) do not require syntactic pre-processing.", "startOffset": 136, "endOffset": 260}, {"referenceID": 26, "context": "Several transition-based AMR parsers have been proposed: CAMR assumes syntactically parsed input, processing dependency trees into AMR (Wang et al., 2015a,b, 2016; Goodman et al., 2016). In contrast, the parsers of Damonte et al. (2017) and Zhou et al. (2016) do not require syntactic pre-processing. Damonte et al. (2017) perform concept identification using a simple heuristic selecting the most frequent graph for each token, and Zhou et al.", "startOffset": 136, "endOffset": 323}, {"referenceID": 26, "context": "Several transition-based AMR parsers have been proposed: CAMR assumes syntactically parsed input, processing dependency trees into AMR (Wang et al., 2015a,b, 2016; Goodman et al., 2016). In contrast, the parsers of Damonte et al. (2017) and Zhou et al. (2016) do not require syntactic pre-processing. Damonte et al. (2017) perform concept identification using a simple heuristic selecting the most frequent graph for each token, and Zhou et al. (2016) perform concept identification and parsing jointly.", "startOffset": 136, "endOffset": 452}, {"referenceID": 4, "context": "We believe UCCA\u2019s merits in providing a cross-linguistically applicable, broadcoverage annotation will support ongoing efforts to incorporate deeper semantic structures into various applications, such as sentence simplification (Narayan and Gardent, 2014) and summarization (Liu et al.", "startOffset": 228, "endOffset": 255}], "year": 2017, "abstractText": "We present the first parser for UCCA, a cross-linguistically applicable framework for semantic representation, which builds on extensive typological work and supports rapid annotation. UCCA poses a challenge for existing parsing techniques, as it exhibits reentrancy (resulting in DAG structures), discontinuous structures and non-terminal nodes corresponding to complex semantic units. To our knowledge, the conjunction of these formal properties is not supported by any existing parser. Our transition-based parser, which uses a novel transition set and features based on bidirectional LSTMs, has value not just for UCCA parsing: its ability to handle more general graph structures can inform the development of parsers for other semantic DAG structures, and in languages that frequently use discontinuous structures.", "creator": "LaTeX with hyperref package"}}}