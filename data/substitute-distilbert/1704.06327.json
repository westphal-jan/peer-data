{"id": "1704.06327", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Apr-2017", "title": "Deep Clustering via Joint Convolutional Autoencoder Embedding and Relative Entropy Minimization", "abstract": "image clustering is one of the most important computer vision programs, which has been extensively redesigned in particular. however, current clustering methods mostly suffer from lack of efficiency and scalability when dealing with large - scale and high - dimensional data. in this paper, we propose 1 new clustering model, incorporating deep embedded regularized scheme ( depict ), which randomly maps data into a discriminative embedding subspace and precisely avoids cluster assignments. depict generally consists of pure multinomial sequential regression function stacked on top of a multi - layer convolutional grid. we define a conditional objective function using relative entropy ( kl + ) minimization, regularized by a prior regulating the frequency of clusters. an alternating strategy is then derived to optimize the objective by updating parameters and estimating cluster assignments. furthermore, and obtain finite reconstruction loss functions in our autoencoder, as a distributed - intensity regularization term, to prevent the deep embedding function totally overfitting. when order to benefit multiple end - to - end optimization and eliminate the necessity for flow - wise variability, we introduce a joint learning framework to minimize the required clustering system reconstruction engine functions together and train all network layers simultaneously. experimental results indicate the superiority and speed of depict and our joint learning approach in real - world clustering tasks, in which no labeled data is available among hyper - parameter tuning.", "histories": [["v1", "Thu, 20 Apr 2017 20:29:46 GMT  (3425kb)", "http://arxiv.org/abs/1704.06327v1", null], ["v2", "Sat, 29 Apr 2017 23:08:45 GMT  (4791kb,D)", "http://arxiv.org/abs/1704.06327v2", null], ["v3", "Wed, 9 Aug 2017 00:07:22 GMT  (4794kb,D)", "http://arxiv.org/abs/1704.06327v3", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["kamran ghasedi dizaji", "amirhossein herandi", "cheng deng", "weidong cai", "heng huang"], "accepted": false, "id": "1704.06327"}, "pdf": {"name": "1704.06327.pdf", "metadata": {"source": "CRF", "title": "Deep Clustering via Joint Convolutional Autoencoder Embedding and Relative Entropy Minimization", "authors": ["Kamran Ghasedi Dizaji", "Amirhossein Herandi", "Heng Huang"], "emails": ["kamran.ghasedidizaji@uta.edu", "amirhossein.herandi@uta.edu", "heng@uta.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 4.\n06 32\n7v 1\n[ cs\n.L G\n] 2\n0 A\npr 2\nImage clustering is one of the most important computer vision applications, which has been extensively studied in literature. However, current clustering methods mostly suffer from lack of efficiency and scalability when dealing with large-scale and high-dimensional data. In this paper, we propose a new clustering model, called DEeP Embedded RegularIzed ClusTering (DEPICT), which efficiently maps data into a discriminative embedding subspace and precisely predicts cluster assignments. DEPICT generally consists of a multinomial logistic regression function stacked on top of a multi-layer convolutional autoencoder. We define a clustering objective function using relative entropy (KL divergence) minimization, regularized by a prior for the frequency of clusters. An alternating strategy is then derived to optimize the objective by updating parameters and estimating cluster assignments. Furthermore, we employ the reconstruction loss functions in our autoencoder, as a datadependent regularization term, to prevent the deep embedding function from overfitting. In order to benefit from endto-end optimization and eliminate the necessity for layerwise pretraining, we introduce a joint learning framework to minimize the unified clustering and reconstruction loss functions together and train all network layers simultaneously. Experimental results indicate the superiority and speed of DEPICT and our joint learning approach in realworld clustering tasks, in which no labeled data is available for hyper-parameter tuning."}, {"heading": "1. Introduction", "text": "Clustering is one of the fundamental topics in machine learning and computer vision research, and it has gained significant attention for discriminative representation of data points without any need for supervisory signals. The clustering problem has been extensively studied in various applications; however, the performance of standard clus-\ntering algorithms is adversely affected when dealing with high-dimensional data, and their time complexity dramatically increases when working with large-scale datasets. Tackling the curse of dimensionality, the previous studies often initially project the data into a low-dimensional manifold, and then cluster the embedded data in this new subspace [32, 41, 46]. Handling large-scale datasets, there are also several studies which select only a subset of data points to accelerate the clustering process [38, 7].\nHowever, dealing with real-world image data, existing clustering algorithms suffer from different issues: 1) Using inflexible hand-crafted features (e.g. SIFT, HOG), which do not depend on the input data distribution; 2) Using shallow and linear embedding functions, which are not able to capture the non-linear nature of data; 3) Non-joint embedding and clustering processes, which do not result in an optimal embedding subspace for clustering; 4) Complicated clustering algorithms that require tuning the hyper-parameters using labeled data, which is not feasible in real-world clustering tasks.\nTo address the mentioned challenging issues, we propose a new clustering algorithm, called deep embedded regular-\n1\nized clustering (DEPICT), which exploits the advantages of both discriminative clustering methods and deep embedding models. DEPICT generally consists of two main parts, a multinomial logistic regression (soft-max) layer stacked on top of a multi-layer convolutional autoencoder. The soft-max layer along with the encoder pathway can be considered as a discriminative clustering model, which is trained using the relative entropy (KL divergence) minimization. We further add a regularization term to this objective based on a prior distribution for the frequency of clusters. This regularization term penalizes unbalanced cluster assignments and prevents allocating clusters to outlier samples.\nAlthough this deep clustering model is flexible enough to discriminate the complex real-world input data, it can easily get stuck in non-optimal local minima during training and result in undesirable cluster assignments. In order to avoid overfitting the deep clustering model to spurious data correlations, we utilize the reconstruction loss function of autoencoder models as a data-dependent regularization term for training parameters.\nIn order to benefit from a joint learning framework for embedding and clustering, we introduce a unified objective function including our clustering and auxiliary reconstruction loss functions. We then employ an alternating approach to efficiently update the parameters and estimate the cluster assignments. It is worth mentioning that in the standard learning approach for training a multi-layer autoencoder, the encoder and decoder parameters are first pretrained layer-wise using the reconstruction loss, and the encoder parameters are then fine-tuned using the objective function of the main task [44]. However, it has been argued that the non-joint fine-tuning step may overwrite the encoder parameters entirely and consequently cancel out the benefit of the layer-wise pretraining step [63]. To avoid this problem and achieve optimal joint learning results, we simultaneously train all of the encoder and decoder layers together along with the soft-max layer. To do so, we sum up the \u21132 norm reconstruction loss functions between the decoder and their corresponding (clean) encoder layers and add them to the clustering loss function.\nFigure 1 demonstrates the importance of our joint learning strategy by comparing different data representations of MNIST-test data points [16] using principle component analysis (PCA) visualization. The first figure indicates the raw data representation; The second one shows the data points in the embedding subspace of non-joint DEPICT, in which the model is trained using the standard layer-wise stacked denoising autoencoder (SdA); The third one visualizes the data points in the embedding subspace of joint DEPICT, in which the model is trained using our multilayer denoising autoencoder learning approach (MdA). As shown, joint DEPICT using MdA learning approach pro-\nvides a significantly more discriminative embedding subspace compared to non-joint DEPICT using standard SdA learning approach.\nMoreover, experimental results show that DEPICT achieves superior or competitive results compared to the state-of-the-art algorithms on the image benchmark datasets while having faster running times. In addition, we compared different learning strategies for DEPICT, and confirm that our joint learning approach has the best results. It should also be noted that DEPICT does not require any hyper-parameter tuning using supervisory signals, and consequently is a better candidate for the real-world clustering tasks. Thus, we summarize the advantages of DEPICT as:\n\u2022 Providing a discriminative non-linear embedding subspace via the deep convolutional autoencoder; \u2022 Introducing an end-to-end joint learning approach, which unifies the clustering and embedding tasks, and\navoids layer-wise pretraining;\n\u2022 Achieving superior or competitive clustering results on high-dimensional and large-scale datasets with no\nneed for hyper-parameter tuning using labeled data."}, {"heading": "2. Related Works", "text": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58]. In another sense, they are generally divided into two subcategories, generative and discriminative clustering algorithms. Generative algorithms likeK-means and Gaussian mixture model [6] explicitly represent the clusters using geometric properties of the feature space, and model the categories via the statistical distributions of input data. Unlike the generative clustering algorithms, the discriminative methods directly identify the categories using their separating hyperplanes regardless of data distribution. Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models. Generally it has been argued that the discriminative models often have better results compared to their generative counterparts, since they have fewer assumptions about the data distribution and directly separate the clusters, but their training can suffer from overfitting or getting stuck in undesirable local minima [14, 22, 28]. Our DEPICT algorithm is also a discriminative clustering model, but it benefits from the auxiliary reconstruction task in our autoencoder to alleviate the issues in training of our deep discriminative model.\nThere are also several studies regarding the combination of clustering with feature embedding learning. Ye et al. introduced a kernelized K-means algorithm, denoted by DisKmeans, where embedding to a lower dimensional\nsubspace via linear discriminant analysis (LDA) is jointly learned with K-means cluster assignments [56]. Combination of linear embedding with spectral clustering is also presented in [25, 55]. But these models all suffer from having shallow and linear embedding functions, which cannot represent the non-linearity of real-world data.\nA joint learning framework for updating code books and estimating image clusters was proposed in [51] while SIFT features are used as input data. A deep structure, named TAGnet was introduced in [46], where two layers of sparse coding followed by a clustering algorithm are trained with an alternating learning approach. Similar work is presented in [47] that formulates a joint optimization framework for discriminative clustering and feature extraction using sparse coding. However, the inference complexity of sparse coding forces the model in [47] to reduce the dimension of input data with PCA and the model in [46] to use an approximate solution. Hand-crafted features and dimension reduction techniques often degrade the clustering performance by neglecting the distribution of input data.\nTian et al. learned a non-linear embedding of the affinity graph using a stacked autoencoder, and then obtained the clusters in the embedding subspace via K-means [41]. Trigeorgis et al. extended semi non-negative matrix factorization (semi-NMF) to stacked multi-layer (deep) semi-NMF to capture the abstract information in the top layer. Afterwards, they runK-means over the embedding subspace for cluster assignments [42]. More recently, Xie et al. employed denoising stacked autoencoder learning approach, and first pretrained the model layer-wise and then fine-tuned the encoder pathway stacked by a clustering algorithm using Kullback-Leibler divergence minimization [50]. Unlike these models that require layer-wise pretraining as well as non-joint embedding and clustering learning, DEPICT utilizes an end-to-end optimization for training all network layers simultaneously using the unified clustering and reconstruction loss functions.\nYang et al. introduced a new clustering model, named JULE, based on a recurrent framework, where data is represented via a convolutional neural network and embedded data is iteratively clustered using an agglomerative clustering algorithm [54]. They derived a unified loss function consisting of the merging process for agglomerative clustering and updating the parameters of the deep representation. While JULE achieved good results using the joint learning approach, it requires tuning of a large number of hyperparameters, which is not practical in real-world clustering tasks. In contrast, our model does not need any supervisory signals for hyper-parameter tuning."}, {"heading": "3. Deep Embedded Regularized Clustering", "text": "In this section, we first introduce the clustering objective function and the corresponding optimization algorithm,\nwhich alternates between estimating the cluster assignments and updating model parameters. Afterwards, we show the architecture of DEPICT and provide the joint learning framework to simultaneously train all network layers using the unified clustering and reconstruction loss functions."}, {"heading": "3.1. DEPICT Algorithm", "text": "Let\u2019s consider the clustering task of N samples, X = [x1, ...,xn], into K categories, where each sample xi \u2208 R\ndx . Using the embedding function, \u03d5W : X \u2192 Z , we are able to map raw samples into the embedding subspace Z = [z1, ..., zn], where each zi \u2208 R dz has a much lower dimension compared to the input data (i.e. dx \u226a dz). Given the embedded features, we use a multinomial logistic regression (soft-max) function f\u03b8 : Z \u2192 Y to predict the probabilistic cluster assignments as follows.\npik = P (yi = k|zi,\u0398) = exp(\u03b8Tk zi)\nK \u2211\nk\u2032=1\nexp(\u03b8Tk\u2032zi)\n, (1)\nwhere \u0398 = [\u03b81, ..., \u03b8k] \u2208 R dz\u00d7K are the soft-max function parameters, and pik indicates the probability of the i-th sample belonging to the k-th cluster.\nIn order to define our clustering objective function, we employ an auxiliary target variable Q to refine the model predictions iteratively. To do so, we first use KullbackLeibler (KL) divergence to decrease the distance between the model predictionP and the target variableQ.\nL= KL(Q\u2016P) = 1\nN\nN \u2211\ni=1\nK \u2211\nk=1\nqik log qik pik , (2)\nIn order to avoid degenerate solutions, which allocate most of the samples to a few clusters or assign a cluster to outlier samples, we aim to impose a regularization term to the target variable. To this end, we first define the empirical label distribution of target variables as:\nfk = P (y = k) = 1\nN\n\u2211\ni\nqik , (3)\nwhere fk can be considered as the soft frequency of clusters in the target distribution. Using this empirical distribution, we are able to enforce our preference for having balanced assignments by adding the following KL divergence to the loss function.\nL= KL(Q\u2016P) +KL(f\u2016u) (4)\n= 1\nN\nN \u2211\ni=1\nK \u2211\nk=1\nqik log qik pik + 1 N\nK \u2211\nk=1\nfk log fk uk\n= 1\nN\nN \u2211\ni=1\nK \u2211\nk=1\nqik log qik pik + qik log fk uk ,\nwhere u is the uniform prior for the empirical label distribution. While the first term in the objective minimizes the distance between the target and model prediction distributions, the second term balances the frequency of clusters in the target variables. Utilizing the balanced target variables, we can force the model to have more balanced predictions (cluster assignments)P indirectly. It is also simple to change the prior from the uniform distribution to any arbitrary distribution in the objective function if there is any extra knowledge about the frequency of clusters.\nIn order to optimize the objective function, we use an alternating approach, in which the cluster assignmentsP and target variables Q are inferred while the model parameters are fixed (expectation step), and the parameters are updated step with the known target variables (maximization step). Considering the network output as the model prediction, we estimate the target variableQ using the following objective:\nmin Q\n1\nN\nN \u2211\ni=1\nK \u2211\nk=1\nqik log qik pik + qik log fk uk , (5)\nwhere the target variables are constrained to \u2211\nk qik = 1.\nThis problem can be solved using first order methods, such as gradient descent, projected gradient descent, and Nesterov optimal method [21], which only require the objective function value and its (sub)gradient at each iteration. In the following equation, we show the partial derivative of the objective function with respect to the target variables.\n\u2202L \u2202qik \u221d log (qikfk pik ) + qik N \u2211\ni\u2032=1\nqi\u2032k\n+ 1 , (6)\nInvestigating this problem more carefully, we find out that the second term in the gradient can be ignored if the number of samples N is big enough. This approximation helps us derive the following closed form solution for the target variables.\nqik = pik/(\n\u2211\ni\u2032 pi\u2032k)\n1 2\n\u2211\nk\u2032\npik\u2032/( \u2211 i\u2032 pi\u2032k\u2032) 1 2\n, (7)\nFor the maximization step, we update the network parameters \u03c8 = {\u0398,W} using the estimated target variables with the following objective function.\nmin \u03c8\n\u2212 1\nN\nN \u2211\ni=1\nK \u2211\nk=1\nqik log pik , (8)\nInterestingly, this problem can be considered as a standard cross entropy loss function for classification tasks, and the parameters of soft-max layer\u0398 and embedding functionW can be efficiently updated by backpropagating the error."}, {"heading": "3.2. DEPICT Architecture", "text": "The deep embedding function is useful for capturing the non-linear nature of input data; However, it may overfit to spurious data correlations and get stuck in undesirable local minima during training. To avoid this overfitting, we employ autoencoder structures and use the reconstruction loss function as a data-dependent regularization for training the parameters. Therefore, we design DEPICT to consist of a soft-max layer stacked on top of a multi-layer convolutional autoencoder. Due to the promising performance of strided convolutional layers in [27, 57], we employ convolutional layers in our encoder and strided convolutional layers in the decoder pathways, and avoid deterministic spatial pooling layers (like max-pooling). Strided convolutional layers allow the network to learn its own spatial upsampling, providing a better generation capability.\nUnlike the standard learning approach for denoising autoencoders, which contains layer-wise pretraining and then fine-tuning, we simultaneously learn all of the autoencoder and soft-max layers. As shown in Figure 2, DEPICT consists of the following components: 1) Corrupted feedforward (encoder) pathway maps the noisy input data into the embedding subspace using a few convolutional layers followed by a fully connected layer. The following equation indicates the output of each layer in the noisy encoder pathway.\nz\u0303l = Dropout [ g(Wlez\u0303 l\u22121) ] , (9)\nwhere z\u0303l are the noisy features of the l-th layer, Dropout is a stochastic mask function that randomly sets a subset of its inputs to zero [40], g is the activation function of convolutional or fully connected layers, and Wle indicates the weights of the l-th layer in the encoder. Note that the first layer features, z\u03030, are equal to the noisy input data, x\u0303. 2) Followed by the corrupted encoder, the decoder pathway reconstructs the input data through a fully connected and multiple strided convolutional layers as follows,\nz\u0302l\u22121 = g(Wldz\u0302 l) , (10)\nwhere z\u0302l is the l-th reconstruction layer output, and Wl d shows the weights for the l-th layer of the decoder. Note that input reconstruction, x\u0302, is equal to z\u03020. 3) Clean feedforward (encoder) pathway shares its weights with the corrupted encoder, and infers the clean embedded features. The following equation shows the outputs of the clean encoder, which are used in the \u21132 norm reconstruction loss functions and obtaining the final cluster assignments.\nzl = g(Wlez l\u22121) , (11)\nwhere zl is the clean output of the l-th layer in the encoder. Consider the first layer features z0 equal to input data x.\n4) Given the top layer of the corrupted and clean encoder pathways as the embedding subspace, the soft-max layer obtains the cluster assignments using Eq.(1). The corrupted features will be used in the training process, and the clean features produce the final cluster assignments.\nAs a crucial point, DEPICT algorithm provides a joint learning framework that optimizes the soft-max and autoencoder parameters together.\nmin \u03c8\n\u2212 1\nN\nN \u2211\ni=1\nK \u2211\nk=1\nqik log pik + 1\nN\nN \u2211\ni=1\nL\u22121 \u2211\nl=0\n1\n|zl i | \u2016zli \u2212 z\u0302 l i\u2016 2 2 ,\n(12)\nwhere |zl i | is the output size of the l-th hidden layer (input for l = 0), and L is the depth of the autoencoder model.\nThe benefit of joint learning frameworks for training multi-layer autoencoders is also reported in semisupervised classification tasks [29, 63]. However, DEPICT is different from previous studies, since it is designed for the unsupervised clustering task, it also does not require maxpooling switches used in stacked what-where autoencoder (SWWAE) [63], and lateral (skip) connections between encoder and decoder layers used in ladder network [29]. Algorithm 1 shows a brief description of DEPICT algorithm.\nAlgorithm 1: DEPICT Algorithm\n1 InitializeQ using K-means 2 while not converged do 3 min \u03c8 \u2212 1 N \u2211\nik\nqik log pik + 1 N\n\u2211\nil\n1 |zl i | \u2016zl i \u2212 z\u0302l i \u201622\n4 p (t) ik \u221d exp(\u03b8Tk z L i ) 5 q (t) ik \u221d pik/( \u2211 i\u2032 pi\u2032k) 1 2 6 end"}, {"heading": "4. Experiments", "text": "In this section, we first evaluate DEPICT in comparison with state-of-the-art clustering methods on several benchmark image datasets. Then, the running speed of the best clustering models are compared. Moreover, we examine different learning approaches for training DEPICT. Finally, we analyze the performance of DEPICT model on semisupervised classification tasks.\nDatasets: In order to show that DEPICT works well with various kinds of datasets, we have chosen the following handwritten digit and face image datasets. Considering that clustering tasks are fully unsupervised, we concatenate the training and testing samples when applicable. MNIST-full: A dataset containing a total of 70,000 handwritten digits\nwith 60,000 training and 10,000 testing samples, each being a 32 by 32 monochrome image [16]. MNIST-test: A dataset which only consists of the testing part of MNISTfull data. USPS: It is a handwritten digits dataset from the USPS postal service, containing 11,000 samples of 16 by 16 images. CMU-PIE: A dataset including 32 by 32 face images of 68 people with 4 different expressions [39]. Youtube-Face (YTF): Following [54], we choose the first 41 subjects of YTF dataset. Faces inside images are first cropped and then resized to 55 by 55 sizes [49]. FRGC: Using the 20 random selected subjects in [54] from the original dataset, we collect 2,462 face images. Similarly, we first crop the face regions and resize them into 32 by 32 images. Table 1 provides a brief description of each dataset.\nClustering Metrics: We have used 2 of the most popular evaluation criteria widely used for clustering algorithms, accuracy (ACC) and normalized mutual information (NMI). The best mapping between cluster assignments and true labels is computed using the Hungarian algorithm [15] to measure accuracy. NMI calculates the normalized measure of similarity between two labels of the same data [53]. Results of NMI do not change by permutations of clusters (classes), and they are normalized to have [0, 1] range, with 0 meaning no correlation and 1 exhibiting perfect correlation."}, {"heading": "4.1. Evaluation of Clustering Algorithm", "text": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54]. Implementation Details: We use a common architecture for DEPICT and avoid tuning any hyper-parameters using the labeled data in order to provide a practical algorithm for real-world clustering tasks. For all datasets, we con-\nsider two convolutional layers followed by a fully connected layer in encoder and decoder pathways. While for all convolutional layers, the feature map size is 50 and the kernel size is about 5 \u00d7 5, the dimension of the embedding subspace is set equal to the number of clusters in each dataset. We also pick the proper stride, padding and crop to have an output size of about 10 \u00d7 10 in the second convolutional layer. Inspired by [27], we consider leaky rectified (leaky RELU) non-linearity [20] as the activation function of convolutional and fully connected layers, except in the last layer of encoder and first layer of decoder, which have Tanh non-linearity functions. Consequently, we normalize the image intensities to be in the range of [\u22121, 1]. Moreover, we set the learning rate and dropout to 10\u22124 and 0.1 respectively, adopt adam as our optimization method with the default hyper-parameters \u03b21 = 0.9, \u03b22 = 0.999, \u01eb = 1e \u2212 08 [12]. The weights of convolutional and fully connected layers are all initialized by Xavier approach [8]. Since the clustering assignments in the first iterations are random and not reliable for clustering loss, we first train DEPICT without clustering loss function for a while, then initialize the clustering assignment qik by clustering the embedding subspace features via simple algorithms likeK-means or AC-PIC.\nQuantitative Comparison: We run DEPICT and other clustering methods on each dataset. We followed the implementation details for DEPICT and report the average results from 5 runs. For the rest, we present the best reported results either from their original papers or from [54]. For unreported results on specific datasets, we run the released code with hyper-parameters mentioned in the original papers, these results are marked by (\u2217) on top. But, when the code is not publicly available, or running the released code is not practical, we put dash marks (-) instead of the corresponding results. Moreover, we mention the number of hyper-parameters that are tuned using supervisory signals (labeled data) for each algorithm. Note that this number only shows the quantity of hyper-parameters, which are set differently for various datasets for better performance.\nTable 2 reports the clustering metrics, normalizedmutual information (NMI) and accuracy (ACC), of the algorithms on the aforementioned datasets. As shown, DEPICT outperforms other algorithms on three datasets and achieves competitive results on the remaining three. It should be noted that we think hyper-parameter tuning using supervisory signals is not feasible in real-worl clustering tasks, and hence DEPICT is a significantly better clustering algorithm compared to the alternative models in practice. For example, DEC, SEC, and LDMGI report their best results by tuning one hyper-parameter over nine different options, while JULE-SF and JULE-RC achieve their good performance by tweaking several hyper-parameters over various datasets. However, we do not tune any hyper-parameters for DEPICT using the labeled data and only report the result\nwith the same (default) hyper-parameters for all datasets."}, {"heading": "4.2. Running Time Comparison", "text": "In order to evaluate the efficiency of our clustering algorithm in dealing with large-scale and high dimensional data, we compare the running speed of DEPICT with its competing algorithms, JULE-SF and JULE-RC. Moreover, the fast versions of JULE-SF and JULE-RC are also evaluated. Note that JULE-SF(fast) and JULE-RC(fast) both require tuning one extra hyper-parameter for each dataset to achieve results similar to the original JULE algorithms in Table 2 [54]. We run DEPICT and the released code for JULE algorithms1 on a machine with one Titan X pascal GPU and a Xeon E5-2699 CPU. We have used Theano to write our code, which will be publicly available.\nFigure 5 illustrates the running time for DEPICT and JULE algorithms on all datasets. Note that running times of JULE-SF and JULE-RC are shown linearly from 0 to 30,000 and logarithmically for larger values for the sake of readability. In total, JULE-RC, JULE-SF, JULE-RC(fast), JULE-SF(fast) and DEPICT take 66.1, 35.5, 11.0, 6.6 and 4.7 hours respectively to run over all datasets. While all algorithms have approximately similar running times on small datasets (FRGC and CMU-PIE), when dealing with the large-scale and high-dimensional datasets (MNIST-full and YTF), DEPICT almost shows a linear increase in the running time, but the running times of original JULE algorithms dramatically grow with the size and number of input data. This outcome again emphasizes the practicality of DEPICT for real-world clustering tasks.\n1https://github.com/jwyang/JULE-Torch"}, {"heading": "4.3. Evaluation of Learning Approach", "text": "In order to evaluate our joint learning approach, we compare several strategies for training DEPICT. For training a multi-layer convolutional autoencoder, we analyze the following three approaches : 1) Standard stacked denoising autoencoder (SdA), in which the model is first pretrained using the reconstruction loss function in a layer-wise manner, and the encoder pathway is then fine-tuned using the clustering objective function [44]. 2) Another approach (RdA) is suggested in [50] to improve the SdA learning approach, in which all of the autoencoder layers are retrained after the pretraining step, only using the reconstruction of input layer while data is not corrupted by noise. The fine-tuning step is\nalso done after the retraining step. 3) Our learning approach (MdA), in which the whole model is trained simultaneously using the joint reconstruction loss functions from all layers along with the clustering objective function.\nFurthermore, we also examine the effect of clustering loss (through error back-prop) in constructing the embedding subspace. To do so, we train a similar multi-layer convolutional autoencoder (Deep-ConvAE) only using the reconstruction loss function to generate the embedding subspace. Then, we run the best shallow clustering algorithm (AC-PIC) on the embedded data. Hence, this model (DeepConvAE+AC-PIC) differs from DEPICT in the sense that its embedding subspace is only constructed using the reconstruction loss and does not involve the clustering loss.\nTable 3 indicates the results of DEPICT and DeepConvAE+AC-PIC when using the different learning approaches. As expected, DEPICT trained by our joint learning approach (MdA) consistently outperforms the other alternatives on all datasets. Interestingly, MdA learning approach shows promising results for Deep-ConvAE+AC-PIC model, where only reconstruction losses are used to train the embedding subspace. Thus, our learning approach is an efficient strategy for training autoencoder models due to its superior results and fast end-to-end training."}, {"heading": "4.4. Semi-Supervised Classification Performance", "text": "Representation learning in an unsupervised manner or using a small number of labeled data has recently attracted great attention. Due to the potential of our model in learning a discriminative embedding subspace, we evaluate DEPICT in a semi-supervised classification task. Following the semi-supervised experiment settings [29, 63], we train our model using a small random subset of MNIST-training dataset as labeled data and the remaining as unlabeled data. The classification error of DEPICT is then computed using the MNIST-test dataset, which is not seen during training. Compared to our unsupervised learning approach, we only utilize the clusters corresponding to each labeled data in training process. In particular, only for labeled data, the cluster labels (assignments) are set using the best map technique from the original classification labels once, and then\nthey will be fixed during the training step.\nTable 4 shows the error results for several semisupervised classification models using different numbers of labeled data. Surprisingly, DEPICT achieves comparable results with the state-of-the-art, despite the fact that the semi-supervised classification models use 10,000 validation data to tune their hyper-parameters, DEPICT only employs the labeled training data (e.g. 100) and does not tune any hyper-parameters. Although DEPICT is not mainly designed for classification tasks, it outperforms several models including SWWAE [63], M1+M2 [13], and AtlasRBF [26], and has comparable results with the complicated Ladder network [29]. These results further confirm the discriminative quality of the embedding features of DEPICT."}, {"heading": "5. Conclusion", "text": "In this paper, we proposed a new deep clustering model, DEPICT, consisting of a soft-max layer stacked on top of a multi-layer convolutional autoencoder. We employed a regularized relative entropy loss function for clustering, which leads to balanced cluster assignments. Adopting our autoencoder reconstruction loss function enhanced the embedding learning. Furthermore, a joint learning framework was introduced to train all network layers simultaneously and avoid layer-wise pretraining. Experimental results showed\nthat DEPICT is a good candidate for real-world clustering tasks, since it achieved superior or competitive results compared to alternative methods while having faster running speed and not needing hyper-parameter tuning. Efficiency of our joint learning approach was also confirmed in clustering and semi-supervised classification tasks."}], "references": [{"title": "Automatic subspace clustering of high dimensional data for data mining applications, volume 27", "author": ["R. Agrawal", "J. Gehrke", "D. Gunopulos", "P. Raghavan"], "venue": "ACM,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1998}, {"title": "k-means++: The advantages of careful seeding", "author": ["D. Arthur", "S. Vassilvitskii"], "venue": "Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms, pages 1027\u2013 1035. Society for Industrial and Applied Mathematics,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2007}, {"title": "Scalable k-means++", "author": ["B. Bahmani", "B. Moseley", "A. Vattani", "R. Kumar", "S. Vassilvitskii"], "venue": "Proceedings of the VLDB Endowment, 5(7):622\u2013633,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Kernelized infomax clustering", "author": ["D. Barber", "F.V. Agakov"], "venue": "Advances in neural information processing systems (NIPS), pages 17\u201324,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2005}, {"title": "Fcm: The fuzzy c-means clustering algorithm", "author": ["J.C. Bezdek", "R. Ehrlich", "W. Full"], "venue": "Computers & Geosciences, 10(2-3):191\u2013203,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1984}, {"title": "Assessing a mixture model for clustering with the integrated completed likelihood", "author": ["C. Biernacki", "G. Celeux", "G. Govaert"], "venue": "IEEE transactions on pattern analysis and machine intelligence, 22(7):719\u2013725,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2000}, {"title": "Large scale spectral clustering with landmark-based representation", "author": ["X. Chen", "D. Cai"], "venue": "AAAI,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["X. Glorot", "Y. Bengio"], "venue": "Aistats, volume 9, pages 249\u2013256,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "Bayesian hierarchical clustering", "author": ["K.A. Heller", "Z. Ghahramani"], "venue": "Proceedings of the 22nd international conference on Machine learning (ICML), pages 297\u2013304. ACM,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2005}, {"title": "Density-connected subspace clustering for high-dimensional data", "author": ["K. Kailing", "H.-P. Kriegel", "P. Kr\u00f6ger"], "venue": "Proceedings of the 2004 SIAM International Conference on Data Mining, pages 246\u2013256. SIAM,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2004}, {"title": "An online algorithm for segmenting time series", "author": ["E. Keogh", "S. Chu", "D. Hart", "M. Pazzani"], "venue": "Data Mining, 2001. ICDM 2001, Proceedings IEEE International Conference on, pages 289\u2013296. IEEE,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2001}, {"title": "Adam: A method for stochastic optimization", "author": ["D. Kingma", "J. Ba"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2014}, {"title": "Semi-supervised learning with deep generative models", "author": ["D.P. Kingma", "S. Mohamed", "D.J. Rezende", "M. Welling"], "venue": "Advances in Neural Information Processing Systems (NIPS), pages 3581\u20133589,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2014}, {"title": "Discriminative clustering by regularized information maximization", "author": ["A. Krause", "P. Perona", "R.G. Gomes"], "venue": "Advances in neural information processing systems (NIPS), pages 775\u2013783,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2010}, {"title": "The hungarian method for the assignment problem", "author": ["H.W. Kuhn"], "venue": "Naval research logistics quarterly, 2(1-2):83\u201397,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1955}, {"title": "Gradientbased learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, 86(11):2278\u20132324,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1998}, {"title": "Pseudo-label: The simple and efficient semisupervised learning method for deep neural networks", "author": ["D.-H. Lee"], "venue": "Workshop on Challenges in Representation Learning, ICML, volume 3, page 2,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}, {"title": "Minimum entropy clustering and applications to gene expression analysis", "author": ["H. Li", "K. Zhang", "T. Jiang"], "venue": "Computational Systems Bioinformatics Conference, 2004. CSB 2004. Proceedings. 2004 IEEE, pages 142\u2013151. IEEE,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2004}, {"title": "Least squares quantization in pcm", "author": ["S. Lloyd"], "venue": "IEEE transactions on information theory, 28(2):129\u2013137,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1982}, {"title": "Rectifier nonlinearities improve neural network acoustic models", "author": ["A.L. Maas", "A.Y. Hannun", "A.Y. Ng"], "venue": "Proc. ICML, volume 30,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2013}, {"title": "Introductory lectures on convex optimization: A basic course, volume 87", "author": ["Y. Nesterov"], "venue": "Springer Science & Business Media,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2013}, {"title": "On discriminative vs", "author": ["A.Y. Ng", "M.I. Jordan"], "venue": "generative classifiers: A comparison of logistic regression and naive bayes. Advances in neural information processing systems (NIPS), 2:841\u2013848,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2002}, {"title": "On spectral clustering: Analysis and an algorithm", "author": ["A.Y. Ng", "M.I. Jordan", "Y. Weiss"], "venue": "Advances in neural information processing systems (NIPS),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2002}, {"title": "The constrained laplacian rank algorithm for graph-based clustering", "author": ["F. Nie", "X. Wang", "M.I. Jordan", "H. Huang"], "venue": "AAAI, pages 1969\u20131976. Citeseer,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2016}, {"title": "Spectral embedded clustering: A framework for in-sample and outof-sample spectral clustering", "author": ["F. Nie", "Z. Zeng", "I.W. Tsang", "D. Xu", "C. Zhang"], "venue": "IEEE Transactions on Neural Networks, 22(11):1796\u20131808,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "Semi-supervised learning using an unsupervised atlas", "author": ["N. Pitelis", "C. Russell", "L. Agapito"], "venue": "Joint European Conference on Machine Learning and Knowledge Discovery in Databases, pages 565\u2013580. Springer,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2014}, {"title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "author": ["A. Radford", "L. Metz", "S. Chintala"], "venue": "arXiv preprint arXiv:1511.06434,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2015}, {"title": "Classification with hybrid generative/discriminative models", "author": ["R. Raina", "Y. Shen", "A.Y. Ng", "A. McCallum"], "venue": "In Advances in Neural Information Processing Systems (NIPS), volume 16,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2003}, {"title": "Semi-supervised learning with ladder networks", "author": ["A. Rasmus", "M. Berglund", "M. Honkala", "H. Valpola", "T. Raiko"], "venue": "Advances in Neural Information Processing Systems (NIPS), pages 3546\u20133554,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2015}, {"title": "The manifold tangent classifier", "author": ["S. Rifai", "Y.N. Dauphin", "P. Vincent", "Y. Bengio", "X. Muller"], "venue": "Advances in Neural Information Processing Systems (NIPS), pages 2294\u20132302,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2011}, {"title": "Contractive auto-encoders: Explicit invariance during feature extraction", "author": ["S. Rifai", "P. Vincent", "X. Muller", "X. Glorot", "Y. Bengio"], "venue": "Proceedings of the 28th international conference on machine learning (ICML-11), pages 833\u2013840,", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2011}, {"title": "Feature selection in clustering problems", "author": ["V. Roth", "T. Lange"], "venue": "In Advances in Neural Information Processing Systems (NIPS), pages 473\u2013480,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2003}, {"title": "Retrieving target gestures toward speech driven animation with meaningful behaviors", "author": ["N. Sadoughi", "C. Busso"], "venue": "Proceedings of the 2015 ACM on International Conference on Multimodal Interaction, pages 115\u2013122. ACM,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}, {"title": "Head motion generation with synthetic speech: a data driven approach", "author": ["N. Sadoughi", "C. Busso"], "venue": "Interspeech 2016, pages 52\u201356,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2016}, {"title": "Analysis of head gesture and prosody patterns for prosody-driven head-gesture animation", "author": ["M.E. Sargin", "Y. Yemez", "E. Erzin", "A.M. Tekalp"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, 30(8):1330\u20131345,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2008}, {"title": "Normalized cuts and image segmentation", "author": ["J. Shi", "J. Malik"], "venue": "IEEE Trans. Pattern Anal. Mach. Intell., 22:888\u2013905,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 1997}, {"title": "Normalized cuts and image segmentation", "author": ["J. Shi", "J. Malik"], "venue": "IEEE Transactions on pattern analysis and machine intelligence, 22(8):888\u2013905,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2000}, {"title": "Spectral clustering for a large data set by reducing the similarity matrix size", "author": ["H. Shinnou", "M. Sasaki"], "venue": "LREC,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2008}, {"title": "The cmu pose, illumination, and expression (pie) database", "author": ["T. Sim", "S. Baker", "M. Bsat"], "venue": "Automatic Face and Gesture Recognition, 2002. Proceedings. Fifth IEEE International Conference on, pages 46\u201351. IEEE,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2002}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "author": ["N. Srivastava", "G.E. Hinton", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov"], "venue": "Journal of Machine Learning Research, 15(1):1929\u20131958,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2014}, {"title": "Learning deep representations for graph clustering", "author": ["F. Tian", "B. Gao", "Q. Cui", "E. Chen", "T.-Y. Liu"], "venue": "AAAI, pages 1293\u20131299,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2014}, {"title": "A deep semi-nmf model for learning hidden representations", "author": ["G. Trigeorgis", "K. Bousmalis", "S. Zafeiriou", "B. Schuller"], "venue": "ICML, pages 1692\u20131700,", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2014}, {"title": "Statistical learning theory, volume 1", "author": ["V.N. Vapnik", "V. Vapnik"], "venue": "Wiley New York,", "citeRegEx": "43", "shortCiteRegEx": null, "year": 1998}, {"title": "Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion", "author": ["P. Vincent", "H. Larochelle", "I. Lajoie", "Y. Bengio", "P.- A. Manzagol"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2010}, {"title": "Structured doubly stochastic matrix for graph based clustering: Structured doubly stochastic matrix", "author": ["X. Wang", "F. Nie", "H. Huang"], "venue": "Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 1245\u20131254. ACM,", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning a task-specific deep architecture for clustering", "author": ["Z. Wang", "S. Chang", "J. Zhou", "M. Wang", "T.S. Huang"], "venue": "Proceedings of the 2016 SIAM International Conference on Data Mining, pages 369\u2013377. SIAM,", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2016}, {"title": "A joint optimization framework of sparse coding and discriminative clustering", "author": ["Z. Wang", "Y. Yang", "S. Chang", "J. Li", "S. Fong", "T.S. Huang"], "venue": "International Joint Conference on Artificial Intelligence (IJCAI), volume 1, page 4,", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2015}, {"title": "A mcmc approach to hierarchical mixture modelling", "author": ["C.K. Williams"], "venue": "Advances in neural information processing systems (NIPS), pages 680\u2013686,", "citeRegEx": "48", "shortCiteRegEx": null, "year": 1999}, {"title": "Face recognition in unconstrained videos with matched background similarity", "author": ["L. Wolf", "T. Hassner", "I. Maoz"], "venue": "InComputer Vision and Pattern Recognition (CVPR), 2011 IEEE Conference on, pages 529\u2013534. IEEE,", "citeRegEx": "49", "shortCiteRegEx": null, "year": 2011}, {"title": "Unsupervised deep embedding for clustering analysis", "author": ["J. Xie", "R. Girshick", "A. Farhadi"], "venue": "International Conference on Machine Learning (ICML),", "citeRegEx": "50", "shortCiteRegEx": null, "year": 2016}, {"title": "Integrating image clustering and codebook learning", "author": ["P. Xie", "E.P. Xing"], "venue": "AAAI, pages 1903\u20131909,", "citeRegEx": "51", "shortCiteRegEx": null, "year": 2015}, {"title": "Maximum margin clustering", "author": ["L. Xu", "J. Neufeld", "B. Larson", "D. Schuurmans"], "venue": "Advances in neural information processing systems (NIPS), pages 1537\u20131544,", "citeRegEx": "52", "shortCiteRegEx": null, "year": 2004}, {"title": "Document clustering based on non-negative matrix factorization", "author": ["W. Xu", "X. Liu", "Y. Gong"], "venue": "Proceedings of the 26th annual international ACM SIGIR conference on Research and development in informaion retrieval, pages 267\u2013 273. ACM,", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2003}, {"title": "Joint unsupervised learning of deep representations and image clusters", "author": ["J. Yang", "D. Parikh", "D. Batra"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 5147\u20135156,", "citeRegEx": "54", "shortCiteRegEx": null, "year": 2016}, {"title": "Image clustering using local discriminant models and global integration", "author": ["Y. Yang", "D. Xu", "F. Nie", "S. Yan", "Y. Zhuang"], "venue": "IEEE Transactions on Image Processing, 19(10):2761\u20132773,", "citeRegEx": "55", "shortCiteRegEx": null, "year": 2010}, {"title": "Discriminative k-means for clustering", "author": ["J. Ye", "Z. Zhao", "M. Wu"], "venue": "Advances in neural information processing systems (NIPS), pages 1649\u20131656,", "citeRegEx": "56", "shortCiteRegEx": null, "year": 2008}, {"title": "Semantic image inpainting with perceptual and contextual losses", "author": ["R. Yeh", "C. Chen", "T.Y. Lim", "M. Hasegawa-Johnson", "M.N. Do"], "venue": "arXiv preprint arXiv:1607.07539,", "citeRegEx": "57", "shortCiteRegEx": null, "year": 2016}, {"title": "Scalable sparse subspace clustering by orthogonal matching pursuit", "author": ["C. You", "D. Robinson", "R. Vidal"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 3918\u20133927,", "citeRegEx": "58", "shortCiteRegEx": null, "year": 2016}, {"title": "Self-tuning spectral clustering", "author": ["L. Zelnik-Manor", "P. Perona"], "venue": "In Advances in Neural Information Processing Systems (NIPS), volume 17, page 16,", "citeRegEx": "59", "shortCiteRegEx": null, "year": 2004}, {"title": "Graph degree linkage: Agglomerative clustering on a directed graph", "author": ["W. Zhang", "X. Wang", "D. Zhao", "X. Tang"], "venue": "European Conference on Computer Vision, pages 428\u2013441. Springer,", "citeRegEx": "60", "shortCiteRegEx": null, "year": 2012}, {"title": "Agglomerative clustering via maximum incremental path integral", "author": ["W. Zhang", "D. Zhao", "X. Wang"], "venue": "Pattern Recognition, 46(11):3056\u20133065,", "citeRegEx": "61", "shortCiteRegEx": null, "year": 2013}, {"title": "Efficient multiclass maximum margin clustering", "author": ["B. Zhao", "F. Wang", "C. Zhang"], "venue": "Proceedings of the 25th international conference on Machine learning (ICML), pages 1248\u2013 1255. ACM,", "citeRegEx": "62", "shortCiteRegEx": null, "year": 2008}, {"title": "Stacked what-where auto-encoders", "author": ["J. Zhao", "M. Mathieu", "R. Goroshin", "Y. Lecun"], "venue": "arXiv preprint arXiv:1506.02351,", "citeRegEx": "63", "shortCiteRegEx": null, "year": 2015}, {"title": "Hierarchical aligned cluster analysis for temporal clustering of human motion", "author": ["F. Zhou", "F. De la Torre", "J.K. Hodgins"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "64", "shortCiteRegEx": "64", "year": 2013}], "referenceMentions": [{"referenceID": 31, "context": "Tackling the curse of dimensionality, the previous studies often initially project the data into a low-dimensional manifold, and then cluster the embedded data in this new subspace [32, 41, 46].", "startOffset": 181, "endOffset": 193}, {"referenceID": 40, "context": "Tackling the curse of dimensionality, the previous studies often initially project the data into a low-dimensional manifold, and then cluster the embedded data in this new subspace [32, 41, 46].", "startOffset": 181, "endOffset": 193}, {"referenceID": 45, "context": "Tackling the curse of dimensionality, the previous studies often initially project the data into a low-dimensional manifold, and then cluster the embedded data in this new subspace [32, 41, 46].", "startOffset": 181, "endOffset": 193}, {"referenceID": 37, "context": "Handling large-scale datasets, there are also several studies which select only a subset of data points to accelerate the clustering process [38, 7].", "startOffset": 141, "endOffset": 148}, {"referenceID": 6, "context": "Handling large-scale datasets, there are also several studies which select only a subset of data points to accelerate the clustering process [38, 7].", "startOffset": 141, "endOffset": 148}, {"referenceID": 43, "context": "It is worth mentioning that in the standard learning approach for training a multi-layer autoencoder, the encoder and decoder parameters are first pretrained layer-wise using the reconstruction loss, and the encoder parameters are then fine-tuned using the objective function of the main task [44].", "startOffset": 293, "endOffset": 297}, {"referenceID": 62, "context": "However, it has been argued that the non-joint fine-tuning step may overwrite the encoder parameters entirely and consequently cancel out the benefit of the layer-wise pretraining step [63].", "startOffset": 185, "endOffset": 189}, {"referenceID": 15, "context": "Figure 1 demonstrates the importance of our joint learning strategy by comparing different data representations of MNIST-test data points [16] using principle component analysis (PCA) visualization.", "startOffset": 138, "endOffset": 142}, {"referenceID": 8, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 135, "endOffset": 150}, {"referenceID": 47, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 135, "endOffset": 150}, {"referenceID": 59, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 135, "endOffset": 150}, {"referenceID": 60, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 135, "endOffset": 150}, {"referenceID": 18, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 167, "endOffset": 180}, {"referenceID": 1, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 167, "endOffset": 180}, {"referenceID": 4, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 167, "endOffset": 180}, {"referenceID": 2, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 167, "endOffset": 180}, {"referenceID": 36, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 194, "endOffset": 206}, {"referenceID": 23, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 194, "endOffset": 206}, {"referenceID": 44, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 194, "endOffset": 206}, {"referenceID": 10, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 230, "endOffset": 250}, {"referenceID": 34, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 230, "endOffset": 250}, {"referenceID": 33, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 230, "endOffset": 250}, {"referenceID": 63, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 230, "endOffset": 250}, {"referenceID": 32, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 230, "endOffset": 250}, {"referenceID": 0, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 282, "endOffset": 297}, {"referenceID": 9, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 282, "endOffset": 297}, {"referenceID": 57, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 282, "endOffset": 297}, {"referenceID": 57, "context": "There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such as hierarchical [9, 48, 60, 61], centroid-based [19, 2, 5, 3], graph-based [37, 24, 45], sequential (temporal) [11, 35, 34, 64, 33] and subspace clustering models [1, 10, 58, 58].", "startOffset": 282, "endOffset": 297}, {"referenceID": 5, "context": "Generative algorithms likeK-means and Gaussian mixture model [6] explicitly represent the clusters using geometric properties of the feature space, and model the categories via the statistical distributions of input data.", "startOffset": 61, "endOffset": 64}, {"referenceID": 17, "context": "Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models.", "startOffset": 22, "endOffset": 33}, {"referenceID": 3, "context": "Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models.", "startOffset": 22, "endOffset": 33}, {"referenceID": 13, "context": "Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models.", "startOffset": 22, "endOffset": 33}, {"referenceID": 61, "context": "Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models.", "startOffset": 46, "endOffset": 54}, {"referenceID": 51, "context": "Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models.", "startOffset": 46, "endOffset": 54}, {"referenceID": 22, "context": "Information theoretic [18, 4, 14], max-margin [62, 52], and spectral graph [23] algorithms are examples of discriminative clustering models.", "startOffset": 75, "endOffset": 79}, {"referenceID": 13, "context": "Generally it has been argued that the discriminative models often have better results compared to their generative counterparts, since they have fewer assumptions about the data distribution and directly separate the clusters, but their training can suffer from overfitting or getting stuck in undesirable local minima [14, 22, 28].", "startOffset": 319, "endOffset": 331}, {"referenceID": 21, "context": "Generally it has been argued that the discriminative models often have better results compared to their generative counterparts, since they have fewer assumptions about the data distribution and directly separate the clusters, but their training can suffer from overfitting or getting stuck in undesirable local minima [14, 22, 28].", "startOffset": 319, "endOffset": 331}, {"referenceID": 27, "context": "Generally it has been argued that the discriminative models often have better results compared to their generative counterparts, since they have fewer assumptions about the data distribution and directly separate the clusters, but their training can suffer from overfitting or getting stuck in undesirable local minima [14, 22, 28].", "startOffset": 319, "endOffset": 331}, {"referenceID": 55, "context": "subspace via linear discriminant analysis (LDA) is jointly learned with K-means cluster assignments [56].", "startOffset": 100, "endOffset": 104}, {"referenceID": 24, "context": "Combination of linear embedding with spectral clustering is also presented in [25, 55].", "startOffset": 78, "endOffset": 86}, {"referenceID": 54, "context": "Combination of linear embedding with spectral clustering is also presented in [25, 55].", "startOffset": 78, "endOffset": 86}, {"referenceID": 50, "context": "A joint learning framework for updating code books and estimating image clusters was proposed in [51] while SIFT features are used as input data.", "startOffset": 97, "endOffset": 101}, {"referenceID": 45, "context": "A deep structure, named TAGnet was introduced in [46], where two layers of sparse coding followed by a clustering algorithm are trained with an alternating learning approach.", "startOffset": 49, "endOffset": 53}, {"referenceID": 46, "context": "Similar work is presented in [47] that formulates a joint optimization framework for discriminative clustering and feature extraction using sparse coding.", "startOffset": 29, "endOffset": 33}, {"referenceID": 46, "context": "However, the inference complexity of sparse coding forces the model in [47] to reduce the dimension of input data with PCA and the model in [46] to use an approximate solution.", "startOffset": 71, "endOffset": 75}, {"referenceID": 45, "context": "However, the inference complexity of sparse coding forces the model in [47] to reduce the dimension of input data with PCA and the model in [46] to use an approximate solution.", "startOffset": 140, "endOffset": 144}, {"referenceID": 40, "context": "learned a non-linear embedding of the affinity graph using a stacked autoencoder, and then obtained the clusters in the embedding subspace via K-means [41].", "startOffset": 151, "endOffset": 155}, {"referenceID": 41, "context": "Afterwards, they runK-means over the embedding subspace for cluster assignments [42].", "startOffset": 80, "endOffset": 84}, {"referenceID": 49, "context": "employed denoising stacked autoencoder learning approach, and first pretrained the model layer-wise and then fine-tuned the encoder pathway stacked by a clustering algorithm using Kullback-Leibler divergence minimization [50].", "startOffset": 221, "endOffset": 225}, {"referenceID": 53, "context": "introduced a new clustering model, named JULE, based on a recurrent framework, where data is represented via a convolutional neural network and embedded data is iteratively clustered using an agglomerative clustering algorithm [54].", "startOffset": 227, "endOffset": 231}, {"referenceID": 20, "context": "This problem can be solved using first order methods, such as gradient descent, projected gradient descent, and Nesterov optimal method [21], which only require the objective function value and its (sub)gradient at each iteration.", "startOffset": 136, "endOffset": 140}, {"referenceID": 26, "context": "Due to the promising performance of strided convolutional layers in [27, 57], we employ convolutional layers in our encoder and strided convolutional layers in the decoder pathways, and avoid deterministic spatial pooling layers (like max-pooling).", "startOffset": 68, "endOffset": 76}, {"referenceID": 56, "context": "Due to the promising performance of strided convolutional layers in [27, 57], we employ convolutional layers in our encoder and strided convolutional layers in the decoder pathways, and avoid deterministic spatial pooling layers (like max-pooling).", "startOffset": 68, "endOffset": 76}, {"referenceID": 39, "context": "where z\u0303 are the noisy features of the l-th layer, Dropout is a stochastic mask function that randomly sets a subset of its inputs to zero [40], g is the activation function of convolutional or fully connected layers, and W e indicates the weights of the l-th layer in the encoder.", "startOffset": 139, "endOffset": 143}, {"referenceID": 28, "context": "The benefit of joint learning frameworks for training multi-layer autoencoders is also reported in semisupervised classification tasks [29, 63].", "startOffset": 135, "endOffset": 143}, {"referenceID": 62, "context": "The benefit of joint learning frameworks for training multi-layer autoencoders is also reported in semisupervised classification tasks [29, 63].", "startOffset": 135, "endOffset": 143}, {"referenceID": 62, "context": "However, DEPICT is different from previous studies, since it is designed for the unsupervised clustering task, it also does not require maxpooling switches used in stacked what-where autoencoder (SWWAE) [63], and lateral (skip) connections between encoder and decoder layers used in ladder network [29].", "startOffset": 203, "endOffset": 207}, {"referenceID": 28, "context": "However, DEPICT is different from previous studies, since it is designed for the unsupervised clustering task, it also does not require maxpooling switches used in stacked what-where autoencoder (SWWAE) [63], and lateral (skip) connections between encoder and decoder layers used in ladder network [29].", "startOffset": 298, "endOffset": 302}, {"referenceID": 15, "context": "with 60,000 training and 10,000 testing samples, each being a 32 by 32 monochrome image [16].", "startOffset": 88, "endOffset": 92}, {"referenceID": 38, "context": "CMU-PIE: A dataset including 32 by 32 face images of 68 people with 4 different expressions [39].", "startOffset": 92, "endOffset": 96}, {"referenceID": 53, "context": "Youtube-Face (YTF): Following [54], we choose the first 41 subjects of YTF dataset.", "startOffset": 30, "endOffset": 34}, {"referenceID": 48, "context": "Faces inside images are first cropped and then resized to 55 by 55 sizes [49].", "startOffset": 73, "endOffset": 77}, {"referenceID": 53, "context": "FRGC: Using the 20 random selected subjects in [54] from the original dataset, we collect 2,462 face images.", "startOffset": 47, "endOffset": 51}, {"referenceID": 14, "context": "The best mapping between cluster assignments and true labels is computed using the Hungarian algorithm [15] to measure accuracy.", "startOffset": 103, "endOffset": 107}, {"referenceID": 52, "context": "NMI calculates the normalized measure of similarity between two labels of the same data [53].", "startOffset": 88, "endOffset": 92}, {"referenceID": 0, "context": "Results of NMI do not change by permutations of clusters (classes), and they are normalized to have [0, 1] range, with 0 meaning no correlation and 1 exhibiting perfect correlation.", "startOffset": 100, "endOffset": 106}, {"referenceID": 35, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 170, "endOffset": 174}, {"referenceID": 58, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 216, "endOffset": 220}, {"referenceID": 6, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 262, "endOffset": 265}, {"referenceID": 59, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 328, "endOffset": 332}, {"referenceID": 60, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 386, "endOffset": 390}, {"referenceID": 24, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 427, "endOffset": 431}, {"referenceID": 54, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 490, "endOffset": 494}, {"referenceID": 41, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 524, "endOffset": 528}, {"referenceID": 45, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 579, "endOffset": 583}, {"referenceID": 49, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 616, "endOffset": 620}, {"referenceID": 53, "context": "Alternative Models: We compare our clustering model, DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (NCUTS) [36], self-tuning spectral clustering (SC-ST) [59], large-scale spectral clustering (SC-LS) [7], graph degree linkage-based agglomerative clustering (AC-GDL) [60], agglomerative clustering via path integral (AC-PIC) [61], spectral embedded clustering (SEC) [25], local discriminant models and global integration (LDMGI) [55], NMF with deep model (NMF-D) [42], task-specific clustering with deep model (TSC-D) [46], deep embedded clustering (DEC) [50], and joint unsupervised learning (JULE) [54].", "startOffset": 661, "endOffset": 665}, {"referenceID": 26, "context": "Inspired by [27], we consider leaky rectified (leaky RELU) non-linearity [20] as the activation function of convolutional and fully connected layers, except in the last layer of encoder and first layer of decoder, which have Tanh non-linearity functions.", "startOffset": 12, "endOffset": 16}, {"referenceID": 19, "context": "Inspired by [27], we consider leaky rectified (leaky RELU) non-linearity [20] as the activation function of convolutional and fully connected layers, except in the last layer of encoder and first layer of decoder, which have Tanh non-linearity functions.", "startOffset": 73, "endOffset": 77}, {"referenceID": 11, "context": "999, \u01eb = 1e \u2212 08 [12].", "startOffset": 17, "endOffset": 21}, {"referenceID": 7, "context": "The weights of convolutional and fully connected layers are all initialized by Xavier approach [8].", "startOffset": 95, "endOffset": 98}, {"referenceID": 53, "context": "For the rest, we present the best reported results either from their original papers or from [54].", "startOffset": 93, "endOffset": 97}, {"referenceID": 53, "context": "Note that JULE-SF(fast) and JULE-RC(fast) both require tuning one extra hyper-parameter for each dataset to achieve results similar to the original JULE algorithms in Table 2 [54].", "startOffset": 175, "endOffset": 179}, {"referenceID": 43, "context": "For training a multi-layer convolutional autoencoder, we analyze the following three approaches : 1) Standard stacked denoising autoencoder (SdA), in which the model is first pretrained using the reconstruction loss function in a layer-wise manner, and the encoder pathway is then fine-tuned using the clustering objective function [44].", "startOffset": 332, "endOffset": 336}, {"referenceID": 49, "context": "2) Another approach (RdA) is suggested in [50] to improve the SdA learning approach, in which all of the autoencoder layers are retrained after the pretraining step, only using the reconstruction of input layer while data is not corrupted by noise.", "startOffset": 42, "endOffset": 46}, {"referenceID": 28, "context": "Following the semi-supervised experiment settings [29, 63], we train our model using a small random subset of MNIST-training dataset as labeled data and the remaining as unlabeled data.", "startOffset": 50, "endOffset": 58}, {"referenceID": 62, "context": "Following the semi-supervised experiment settings [29, 63], we train our model using a small random subset of MNIST-training dataset as labeled data and the remaining as unlabeled data.", "startOffset": 50, "endOffset": 58}, {"referenceID": 42, "context": "In particular, only for labeled data, the cluster labels (assignments) are set using the best map technique from the original classification labels once, and then Model 100 1000 3000 T-SVM [43] 16.", "startOffset": 189, "endOffset": 193}, {"referenceID": 30, "context": "45 CAE [31] 13.", "startOffset": 7, "endOffset": 11}, {"referenceID": 29, "context": "22 MTC [30] 12.", "startOffset": 7, "endOffset": 11}, {"referenceID": 16, "context": "57 PL-DAE [17] 10.", "startOffset": 10, "endOffset": 14}, {"referenceID": 25, "context": "69 AtlasRBF [26] 8.", "startOffset": 12, "endOffset": 16}, {"referenceID": 12, "context": "68 M1+M2 [13] 3.", "startOffset": 9, "endOffset": 13}, {"referenceID": 62, "context": "04 SWWAE [63] 8.", "startOffset": 9, "endOffset": 13}, {"referenceID": 28, "context": "22 Ladder [29] 1.", "startOffset": 10, "endOffset": 14}, {"referenceID": 62, "context": "Although DEPICT is not mainly designed for classification tasks, it outperforms several models including SWWAE [63], M1+M2 [13], and AtlasRBF [26], and has comparable results with the complicated Ladder network [29].", "startOffset": 111, "endOffset": 115}, {"referenceID": 12, "context": "Although DEPICT is not mainly designed for classification tasks, it outperforms several models including SWWAE [63], M1+M2 [13], and AtlasRBF [26], and has comparable results with the complicated Ladder network [29].", "startOffset": 123, "endOffset": 127}, {"referenceID": 25, "context": "Although DEPICT is not mainly designed for classification tasks, it outperforms several models including SWWAE [63], M1+M2 [13], and AtlasRBF [26], and has comparable results with the complicated Ladder network [29].", "startOffset": 142, "endOffset": 146}, {"referenceID": 28, "context": "Although DEPICT is not mainly designed for classification tasks, it outperforms several models including SWWAE [63], M1+M2 [13], and AtlasRBF [26], and has comparable results with the complicated Ladder network [29].", "startOffset": 211, "endOffset": 215}], "year": 2017, "abstractText": "Image clustering is one of the most important computer vision applications, which has been extensively studied in literature. However, current clustering methods mostly suffer from lack of efficiency and scalability when dealing with large-scale and high-dimensional data. In this paper, we propose a new clustering model, called DEeP Embedded RegularIzed ClusTering (DEPICT), which efficiently maps data into a discriminative embedding subspace and precisely predicts cluster assignments. DEPICT generally consists of a multinomial logistic regression function stacked on top of a multi-layer convolutional autoencoder. We define a clustering objective function using relative entropy (KL divergence) minimization, regularized by a prior for the frequency of clusters. An alternating strategy is then derived to optimize the objective by updating parameters and estimating cluster assignments. Furthermore, we employ the reconstruction loss functions in our autoencoder, as a datadependent regularization term, to prevent the deep embedding function from overfitting. In order to benefit from endto-end optimization and eliminate the necessity for layerwise pretraining, we introduce a joint learning framework to minimize the unified clustering and reconstruction loss functions together and train all network layers simultaneously. Experimental results indicate the superiority and speed of DEPICT and our joint learning approach in realworld clustering tasks, in which no labeled data is available for hyper-parameter tuning.", "creator": "LaTeX with hyperref package"}}}