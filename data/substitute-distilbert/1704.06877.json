{"id": "1704.06877", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Apr-2017", "title": "Learning to Skim Text", "abstract": "recurrent neural networks are showing much promise near many sub - areas of natural language processing, ranging especially tensor classification to machine translation require easier question answering. despite their promise, many recurrent models have to read recently generated text word by word, making it slow then handle long documents. for example, it is difficult to use a recurrent network to read a book and answer questions about it. in this paper, we present an approach of reading text while skipping irrelevant information commonly needed. the underlying model generates a recurrent network that learns how far atoms jump easily reading a wide phrases of the input text. we employ a standard policy gradient method to train which model to make discrete jumping decisions. in our benchmarks on four different tasks, including number prediction, sentiment analysis, news article classification and automatic q \\ & amp ; a, our proposed model, a modified lstm with jumping, is up to 200 times faster through the standard sequential regression, while maintaining some same or even better accuracy.", "histories": [["v1", "Sun, 23 Apr 2017 03:54:22 GMT  (250kb,D)", "http://arxiv.org/abs/1704.06877v1", null], ["v2", "Sat, 29 Apr 2017 19:58:31 GMT  (250kb,D)", "http://arxiv.org/abs/1704.06877v2", null]], "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["adams wei yu", "hongrae lee", "quoc v le"], "accepted": true, "id": "1704.06877"}, "pdf": {"name": "1704.06877.pdf", "metadata": {"source": "CRF", "title": "Learning to Skim Text", "authors": ["Adams Wei Yu", "Hongrae Lee", "Quoc V. Le"], "emails": ["weiyu@cs.cmu.edu", "hrlee@google.com", "qvl@google.com"], "sections": [{"heading": "1 Introduction", "text": "The last few years have seen much success of applying neural networks to many important applications in natural language processing, e.g., partof-speech tagging, chunking, named entity recognition (Collobert et al., 2011), sentiment analysis (Socher et al., 2011, 2013), document classification (Kim, 2014; Le and Mikolov, 2014; Zhang et al., 2015; Dai and Le, 2015), machine translation (Kalchbrenner and Blunsom, 2013; Sutskever\n\u2217Most of work was done when AWY was with Google.\net al., 2014; Bahdanau et al., 2014; Sennrich et al., 2015; Wu et al., 2016), conversational/dialogue modeling (Sordoni et al., 2015; Vinyals and Le, 2015; Shang et al., 2015), document summarization (Rush et al., 2015; Nallapati et al., 2016), parsing (Andor et al., 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016). An important characteristic of all these models is that they read all the text available to them. While it is essential for certain applications, such as machine translation, this characteristic also makes it slow to apply these models to scenarios that have long input text, such as document classification or automatic Q&A. However, the fact that texts are usually written with redundancy inspires us to think about the possibility of reading selectively.\nIn this paper, we consider the problem of understanding documents with partial reading, and propose a modification to the basic neural architectures that allows them to read input text with skipping. The main benefit of this approach is faster inference because it skips irrelevant information. An unexpected benefit of this approach is that it also helps the models generalize better.\nIn our approach, the model is a recurrent network, which learns to predict the number of jumping steps after it reads one or several input tokens. Such a discrete model is therefore not fully differentiable, but it can be trained by a standard policy gradient algorithm, where the reward can be the accuracy or its proxy during training.\nIn our experiments, we use the basic LSTM recurrent networks (Hochreiter and Schmidhuber, 1997) as the base model and benchmark the proposed algorithm on a range of document classification or reading comprehension tasks, using various datasets such as Rotten Tomatoes (Pang\nar X\niv :1\n70 4.\n06 87\n7v 1\n[ cs\n.C L\n] 2\n3 A\npr 2\n01 7\nand Lee, 2005), IMDB (Maas et al., 2011), AG News (Zhang et al., 2015) and Children\u2019s Book Test (Hill et al., 2015). We find that the proposed approach of selective reading speeds up the base model by two to six times. Surprisingly, we also observe our model beats the standard LSTM in terms of accuracy.\nIn summary, the main contribution of our work is to design an architecture that learns to skim text and show that it is both faster and more accurate in practical applications of text processing. Our model is simple and flexible enough that we anticipate it would be able to incorporate to recurrent nets with more sophisticated structures to achieve even better performance in the future."}, {"heading": "2 Methodology", "text": "In this section, we introduce the proposed model named LSTM-Jump. We first describe its main structure, followed by the difficulty of estimating part of the model parameters because of nondifferentiability. To address this issue, we appeal to a reinforcement learning formulation and adopt a policy gradient method."}, {"heading": "2.1 Model Overview", "text": "The main architecture of the proposed model is shown in Figure 1, which is based on an LSTM recurrent neural network. Before training, the number of jumps allowed N , the number of tokens read between every two jumps R and the maximum size of jumping K are chosen ahead of time. While K is a fixed parameter of the model, N and R are hyperparameters that can vary between training and testing. Also, throughout the paper, we would use d1:p to denote a sequence d1, d2, ..., dp.\nIn the following, we describe in detail how the model operates when processing text. Given a training example x1:T , the recurrent network will read the embedding of the first R tokens x1:R and output the hidden state. Then this state is used to compute the jumping softmax that determines a distribution over the jumping steps between 1 and K. The model then samples from this distribution a jumping step, which is used to decide the next token to be read into the model. Let \u03ba be the sampled value, then the next starting token is xR+\u03ba. Such process continues until either\na) the jump softmax samples a 0; or b) the number of jumps exceeds N ; or c) the model reaches the last token xT .\nAfter stopping, as the output, the latest hidden state is further used for predicting desired targets. How to leverage the hidden state depends on the specifics of the task at hand. For example, for classification problems in Section 3.1, 3.2 and 3.3, it is directly applied to produce a softmax for classification, while in automatic Q&A problem of Section 3.4, it is used to compute the correlation with the candidate answers in order to select the best one. Figure 1 gives an example with K = 5, R = 2 and N = 10 terminating on condition a)."}, {"heading": "2.2 Training with REINFORCE", "text": "Our goal for training is to estimate the parameters of LSTM and possibly word embedding, which are denoted as \u03b8m, together with the jumping action parameters \u03b8a. Once obtained, they can be used for inference.\nThe estimation of \u03b8m is straightforward in the tasks that can be reduced as classification problems (which is essentially what our experiments cover), as the cross entropy objective J1(\u03b8m) is\ndifferentiable over \u03b8m that we can directly apply backpropagation to minimize.\nHowever, the nature of discrete jumping decisions made at every step makes it difficult to estimate \u03b8a, as cross entropy is no longer differentiable over \u03b8a. Therefore, we formulate it as a reinforcement learning problem and apply policy gradient method to train the model. Specifically, we need to maximize a reward function over \u03b8a which can be constructed as follows.\nLet j1:N be the jumping action sequence during the training with an example x1:T . Suppose hi is a hidden state of the LSTM right before the i-th jump ji,1 then it is a function of j1:i\u22121 and thus can be denoted as hi(j1:i\u22121). Now the jump is attained by sampling from the multinomial distribution p(ji|hi(j1:i\u22121); \u03b8a), which is determined by the jump softmax. We can receive a reward R after processing x1:T under the current jumping strategy.2 The reward should be positive if the output is favorable or non-positive otherwise. In our experiments, we choose\nR = { 1 if prediction correct; \u22121 otherwise.\nThen the objective function of \u03b8a we want to maximize is the expected reward under the distribution defined by the current jumping policy, i.e.,\nJ2(\u03b8a) = Ep(j1:N ;\u03b8a)[R]. (1)\nwhere p(j1:N ; \u03b8a) = \u220f i p(j1:i|hi(j1:i\u22121); \u03b8a).\nOptimizing this objective numerically requires computing its gradient, whose exact value is intractable to obtain as the expectation is over high dimensional interaction sequences. By running S examples, an approximated gradient can be computed by the following REINFORCE algorithm (Williams, 1992): \u2207\u03b8aJ2(\u03b8a) = N\u2211 i=1 Ep(j1:N ;\u03b8a)[\u2207\u03b8a log p(j1:i|hi; \u03b8a)R]\n\u2248 1 S S\u2211 s=1 N\u2211 i=1 [\u2207\u03b8a log p(js1:i|hsi ; \u03b8a)Rs]\nwhere the superscript s denotes a quantity belonging to the s-th example. Now the term\n1The i-th jumping step is usually not xi. 2In the general case, one may receive (discounted) intermediate rewards after each jump. But in our case, we only consider final reward. It is equivalent to a special case that all intermediate rewards are identical and without discount.\n\u2207\u03b8a log p(j1:i|hi; \u03b8a) can be computed by standard backpropagation.\nAlthough the above estimation of \u2207\u03b8aJ2(\u03b8a) is unbiased, it may have very high variance. One widely used remedy to reduce the variance is to subtract a baseline value bsi from the reward R\ns, such that the approximated gradient becomes\n\u2207\u03b8aJ2(\u03b8a) \u2248 1\nS S\u2211 s=1 N\u2211 i=1 [\u2207\u03b8a log p(js1:i|hsi ; \u03b8)(Rs\u2212bsi )]\nIt is shown (Williams, 1992; Zaremba and Sutskever, 2015) that any number bsi will yield an unbiased estimation. Here, we adopt the strategy of Mnih et al. (2014) that bsi = wbh s i + cb and the parameter \u03b8b = {wb, cb} is learned by minimizing (Rs\u2212 bsi )2. Now the final objective to minimize is J(\u03b8m, \u03b8a, \u03b8b) = J1(\u03b8m)\u2212J2(\u03b8a)+ S\u2211 s=1 N\u2211 i=1 (Rs\u2212bsi )2,\nwhich is fully differentiable and can be solved by standard backpropagation."}, {"heading": "2.3 Inference", "text": "During inference, we can either use sampling or greedy evaluation by selecting the most probable jumping step suggested by the jump softmax and follow that path. In the our experiments, we will adopt the sampling scheme."}, {"heading": "3 Experimental Results", "text": "In this section, we present our empirical studies to understand the efficiency of the proposed model in reading text. The tasks under experimentation are: synthetic number prediction, sentiment analysis, news topic classification and automatic question answering. Those, except the first one, are representative tasks in text reading involving different sizes of datasets and various levels of text processing, from character to word and to sentence. Table 1 summarizes the statistics of the dataset in our experiments.\nTo exclude the potential impact of advanced models, we restrict our comparison between the vanilla LSTM (Hochreiter and Schmidhuber, 1997) and our model, which is referred to as LSTM-Jump. In a nutshell, we show that, while achieving the same or even better testing accuracy, our model is up to 6 times and 66 times faster than the baseline LSTM model in real and synthetic\ndatasets, respectively, as we are able to selectively skip a large fraction of text.\nIn fact, the proposed model can be readily extended to other recurrent neural networks with sophisticated mechanisms such as attention and/or hierarchical structure to achieve higher accuracy than those presented below. However, this is orthogonal to the main focus of this work and would be left as an interesting future work.\nGeneral Experiment Settings We use the Adam optimizer (Kingma and Ba, 2014) with a learning rate of 0.001 in all experiments. We also apply gradient clipping to all the trainable variables with the threshold of 1.0. The dropout rate between the LSTM layers is 0.2 and the embedding dropout rate is 0.1. We repeat the notations N,K,R defined previously in Table 2, so readers can easily refer to when looking at Tables 4,5,6 and 7. While K is fixed during both training and testing, we would fix R and N at training but vary their values during test to see the impact of parameter changes. Note that N is essentially a constraint which can be relaxed. Yet we prefer to enforce this constraint here to let the model learn to read fewer tokens. Finally, the reported test time is measured by running one pass of the whole test set instance by instance, and the speedup is over the base LSTM model. The code is written with TensorFlow.3"}, {"heading": "3.1 Number Prediction with a Synthetic Dataset", "text": "We first test whether LSTM-Jump is indeed able to learn how to jump if a very clear jumping sig-\n3https://www.tensorflow.org/\nnal is given in the text. The input of the task is a sequence of L positive integers x0:T\u22121 and the output is simply xx0 . That is, the output is chosen from the input sequence, with index determined by x0 . Here are two examples to illustrate the idea:\ninput1 : 4, 5, 1, 7, 6, 2. output1 : 6\ninput2 : 2, 4, 9, 4, 5, 6. output2 : 9\nOne can see that x0 is essentially the oracle jumping signal, i.e. the indicator of how many steps the reading should jump to get the exact output and obviously, the remaining number of the sequence are useless. After reading the first token, a \u201csmart\u201d network should be able to learn from the training examples to jump to the output position, skipping the rest.\nWe generate 1 million training and 10,000 validation examples with the rule above, each with sequence length T = 100. We also impose 1 \u2264 x0 < T to ensure the index is valid. We find that directly training the LSTM-Jump with full sequence is unlikely to converge, therefore, we adopt a curriculum training scheme. More specifically, we generate sequences with lengths {10, 20, 30, 40, 50, 60, 70, 80, 90, 100} and train the model starting from the shortest. Whenever the training accuracy reaches a threshold, we shift to longer sequences. We also train an LSTM with the same curriculum training scheme. The training stops when the validation accuracy is larger than 98%. We choose such stopping criterion simply because it is the highest that both models can achieve.4 All the networks are single layered, with hidden size 512, embedding size 32 and batch size 100. During testing, we generate sequences of lengths 10, 100 and 1000 with the same rule, each having 10,000 examples. As the training size is large enough, we do not have to worry about overfitting so dropout is not applied. In fact, we find that the training, validation and testing accuracies are almost the same.\n4In fact, our model can get higher but we stick to 98% for ease of comparison.\nThe results of LSTM and our method, LSTMJump, are shown in Table 3. The first observation is that LSTM-Jump is faster than LSTM; the longer the sequence is, the more significant speedup LSTM-Jump can gain. This is because the well-trained LSTM-Jump is aware of the jumping signal at the first token and hence can directly jump to the output position to make prediction, while LSTM is agnostic to the signal and has to read the whole sequence. As a result, the reading speed of LSTM-Jump is hardly affected by the length of sequence, but that of LSTM is linear with respect to length. Besides, LSTM-Jump also outperforms LSTM in terms of test accuracy under all cases. This is not surprising either, as LSTM has to read a large amount of tokens that are potentially not helpful and could interfere with the prediction. In summary, the results indicate LSTM-Jump is able to learn to jump if the signal is clear."}, {"heading": "3.2 Word Level Sentiment Analysis with Rotten Tomatoes and IMDB datasets", "text": "As LSTM-Jump has shown great speedups in the synthetic dataset, we would like to understand whether it could carry this benefit to real-world data, where \u201cjumping\u201d signal is not explicit. So in this section, we conduct sentiment analysis on two movie review datasets, both containing equal numbers of positive and negative reviews.\nThe first dataset is Rotten Tomatoes, which contains 10,662 documents. Since there is not a standard split, we randomly select around 80% for training, 10% for validation, and 10% for testing. The average and maximum lengths of the reviews are 22 and 56 words respectively, and we pad each of them to 60. We choose the pre-trained word2vec embeddings5 (Mikolov et al., 2013) as\n5https://code.google.com/archive/p/ word2vec/\nour fixed word embedding that we do not update this matrix during training. Both LSTM-Jump and LSTM contain 2 layers, 256 hidden units and the batch size is 100. As the amount of training data is small, we slightly augment the data by sampling a continuous 50-word sequence in each padded reviews as one training sample. During training, we enforce LSTM-Jump to read 8 tokens before a jump (R = 8), and the maximum skipping tokens per jump is 10 (K = 10), while the number of jumps allowed is 3 (N = 3).\nThe testing result is reported in Table 4. In a nutshell, LSTM-Jump is always faster than LSTM under different combinations of R and N . At the same time, the accuracy is on par with that of LSTM. In particular, the combination of (R,N) = (7, 4) even achieves slightly better accuracy than LSTM while having a 1.5x speedup.\nThe second dataset is IMDB (Maas et al., 2011),6 which contains 25,000 training and 25,000 testing movie reviews, where the average length of text is 240 words, much longer than that of Rotten Tomatoes. We randomly set aside about 15% of training data as validation set. Both LSTM-Jump and LSTM has one layer and 128 hidden units, and the batch size is 50. Again, we use pretrained word2vec embeddings as initialization but they are updated during training. We either pad a short sequence to 400 words or randomly select a 400- word segment from a long sequence as a training example. During training, we setR = 20,K = 40 and N = 5.\nAs Table 5 shows, the result exhibits a similar trend as found in Rotten Tomatoes that LSTMJump is uniformly faster than LSTM under many settings. The various (R,N) combinations again demonstrate the trade-off between efficiency and accuracy. If one cares more about accuracy, then allowing LSTM-Jump to read and jump more\n6http://ai.Stanford.edu/amaas/data/ sentiment/index.html\ntimes is a good choice. Otherwise, shrinking either one would bring a significant speedup though at the price of losing some accuracy. Nevertheless, the configuration with the highest accuracy still enjoys a 1.6x speedup compared to LSTM. With a slight loss of accuracy, LSTM-Jump can be 2.5x faster ."}, {"heading": "3.3 Character Level News Article Classification with AG dataset", "text": "We now present results on testing the character level jumping with a news article classification problem. The dataset contains four classes of topics (World, Sports, Business, Sci/Tech) from the AG\u2019s news corpus,7 a collection of more than 1 million news articles. The data we use is the subset constructed by Zhang et al. (2015) for classification with character-level convolutional networks. There are 30,000 training and 1,900 testing examples for each class respectively, where 15% of training data is set aside as validation. The nonspace alphabet under use are:\nabcdefghijklmnopqrstuvwxyz0123456 789-,;.!?:/\\|_@#$%&*\u02dc\u2018+-=<>()[]{}\nSince the vocabulary size is small, we choose 16 as the embedding size. The initialized entries of the embedding matrix are drawn from a uniform distribution in [\u22120.25, 0.25], which are progressively updated during training. Both LSTM-Jump and LSTM have 1 layer and 64 hidden units and the batch sizes are 20 and 100 respectively. The training sequence is again of length 400 that it is either padded from a short sequence or sampled from a long one. During training, we setR = 30,K = 40 and N = 5.\nThe result is summarized in Table 6. It is interesting to see that even with skipping, LSTM-Jump\n7http://www.di.unipi.it/\u02dcgulli/AG_ corpus_of_news_articles.html\nis not always faster than LSTM. This is mainly due to the fact that the embedding size and hidden layer are both much smaller than those used previously, and accordingly the processing of a token is much faster. In that case, other computation overhead such as calculating and sampling from the jump softmax might become a dominating factor of efficiency. By this cross-task comparison, we can see that the larger the hidden unit size of recurrent neural network and the embedding are, the more speedup LSTM-Jump can gain, which is also confirmed by the task below."}, {"heading": "3.4 Sentence Level Automatic Question Answering with Children\u2019s Book Test dataset", "text": "The last task is automatic question answering, in which we aim to test the sentence level skimming of LSTM-Jump. We benchmark on the data set Children\u2019s Book Test (CBT) (Hill et al., 2015).8 In each document, there are 20 contiguous sentences (context) extracted from a children\u2019s book followed by a query sentence. A word of the query is deleted and the task is to select the best fit for this position from 10 candidates. Originally, there are four types of tasks according to the part of speech of the missing word, from which, we choose the most difficult two, i.e., the name entity (NE) and common noun (CN) as our focus, since simple language models can already achieve human-level performance for the other two types .\nThe models, LSTM or LSTM-Jump, firstly read the whole query, then the context sentences and finally output the predicted word. While LSTM reads everything, our jumping model would decide how many context sentences should skip after reading one sentence. Whenever a model finishes reading, the context and query are encoded in its\n8http://www.thespermwhale.com/ jaseweston/babi/CBTest.tgz\nhidden state ho, and the best answer from the candidate words has the same index that maximizes the following:\nsoftmax(CWho) \u2208 R10,\nwhere C \u2208 R10\u00d7d is the word embedding matrix of the 10 candidates and W \u2208 Rd\u00d7hidden size is a trainable weight variable. Using such bilinear form to select answer basically follows the idea of Chen et al. (2016), as it is shown to have good performance. The task is now distilled to a classification problem of 10 classes.\nWe either truncate or pad each context sentence, such that they all have length 20. The same preprocessing is applied to the query sentences except that the length is set as 30. For both models, the number of layers is 2, the number of hidden units is 256 and the batch size is 32. Pretrained word2vec embeddings are again used and they are not adjusted during training. The maximum number of context sentences LSTM-Jump can skip per time is K = 5 while the number of total jumping is limited to N = 5. We let the model jump after reading every sentence, so R = 1 (20 words).\nThe result is reported in Table 7. The performance of LSTM-Jump is superior to LSTM in terms of both accuracy and efficiency under all settings in our experiments. In particular, the fastest LSTM-Jump configuration achieves a remarkable 6x speedup over LSTM, while also having respectively 1.4% and 4.4% higher accuracy in Children\u2019s Book Test - Named Entity and Children\u2019s Book Test - Common Noun.\nThe dominant performance of LSTM-Jump over LSTM might be interpreted as follows. After reading the query, both LSTM and LSTM-Jump\nknow what the question is. However, LSTM still has to process the remaining 20 sentences and thus at the very end of the last sentence, the long dependency between the question and output might become weak that the prediction is hampered. On the contrary, the question can guide LSTM-Jump on how to read selectively and stop early when the answer is clear. Therefore, when it comes to the output stage, the \u201cmemory\u201d is both fresh and uncluttered that a more accurate answer is likely to be picked.\nIn the following, we show two examples of how the model reads the context given a query (bold face sentences are those read by our model in the increasing order). XXXXX is the missing word we want to fill. Note that due to truncation, a few sentences might look uncompleted.\nExample 1 In the first example, the exact answer appears in the context multiple times, which makes the task relatively easy, as long as the reader has captured their occurrences. (a) Query: \u2018XXXXX! (b) Context: 1. said Big Klaus, and he ran off at once to\nLittle Klaus. 2. \u2018Where did you get so much money from?\u2019 3. \u2018Oh, that was from my horse-skin. 4. I sold it yesterday evening.\u2019 5. \u2018That \u2019s certainly a good price!\u2019 6. said Big Klaus; and running home in great\nhaste, he took an axe, knocked all his four 7. \u2018Skins! 8. skins! 9. Who will buy skins?\u2019\n10. he cried through the streets. 11. All the shoemakers and tanners came running\nto ask him what he wanted for them.\u2019 12. A bushel of money for each,\u2019 said Big\nKlaus. 13. \u2018Are you mad?\u2019 14. they all exclaimed. 15. \u2018Do you think we have money by the bushel?\u2019 16. \u2018Skins! 17. skins! 18. Who will buy skins?\u2019 19. he cried again, and to all who asked him what\nthey cost, he answered,\u2019 A bushel 20. \u2018He is making game of us,\u2019 they said; and the\nshoemakers seized their yard measures and (c) Candidates: Klaus | Skins | game | haste |\nhead | home | horses | money | price| streets\n(d) Answer: Skins The reading behavior might be interpreted as follows. The model tries to search for clues, and after reading sentence 8, it realizes that the most plausible answer is \u201cKlaus\u201d or \u201cSkins\u201d, as they both appear twice. \u201cSkins\u201d is more likely to be the answer as it is followed by a \u201c!\u201d. The model searches further to see if \u201dKlaus!\u201d is mentioned somewhere, but it only finds \u201cKlaus\u201d without \u201c!\u201d for the third time. After the last attempt at sentence 14, it is confident about the answer and stops to output with \u201cSkins\u201d.\nExample 2 In this example, the answer is illustrated by a word \u201cnuisance\u201d that does not show up in the context at all. Hence, to answer the query, the model has to understand the meaning of both the query and context and locate the synonym of \u201cnuisance\u201d, which is not merely verbatim and thus much harder than the previous example. Nevertheless, our model is still able to make a right choice while reading much fewer sentences. (a) Query: Yes, I call XXXXX a nuisance. (b) Context: 1. But to you and me it would have looked\njust as it did to Cousin Myra \u2013 a very discontented 2. \u201cI\u2019m awfully glad to see you, Cousin Myra, \u201dexplained Frank carefully, \u201cand your 3. But Christmas is just a bore \u2013 a regular bore.\u201d 4. That was what Uncle Edgar called things that didn\u2019t interest him, so that Frank felt pretty sure of 5. Nevertheless, he wondered uncomfortably what made Cousin Myra smile so queerly. 6. \u201cWhy, how dreadful!\u201d 7. she said brightly. 8. \u201cI thought all boys and girls looked upon\nChristmas as the very best time in the year.\u201d 9. \u201cWe don\u2019t, \u201dsaid Frank gloomily.\n10. \u201cIt\u2019s just the same old thing year in and year out. 11. We know just exactly what is going to happen. 12. We even know pretty well what presents we are going to get. 13. And Christmas Day itself is always the same. 14. We\u2019ll get up in the morning , and our stock-\nings will be full of things, and half of 15. Then there \u2019s dinner. 16. It \u2019s always so poky.\n17. And all the uncles and aunts come to dinner \u2013 just the same old crowd, every year, and 18. Aunt Desda always says, \u2018Why, Frankie, how you have grown!\u2019 19. She knows I hate to be called Frankie. 20. And after dinner they\u2019ll sit round and talk the\nrest of the day, and that\u2019s all. (c) Candidates: Christmas | boys | day | dinner |\nhalf | interest | rest | stockings | things | uncles (d) Answer: Christmas The reading behavior can be interpreted as follows. After reading the query, our model realizes that the answer should be something like a nuisance. Then it starts to process the text. Once it hits sentence 3, it may begin to consider \u201cChristmas\u201d as the answer, since \u201cbore\u201d is a synonym of \u201cnuisance\u201d. Yet the model is not 100% sure, so it continues to read, very conservatively \u2013 it does not jump for the next three sentences. After that, the model gains more confidence on the answer \u201cChristmas\u201d and it makes a large jump to see if there is something that can turn over the current hypothesis. It turns out that the last-read sentence is still talking about Christmas with a negative voice. Therefore, the model stops to take \u201cChristmas\u201d as the output."}, {"heading": "4 Related Work", "text": "Closely related to our work is the idea of learning visual attention with neural networks (Mnih et al., 2014; Ba et al., 2014; Sermanet et al., 2014), where a recurrent model is used to combine visual evidence at multiple fixations processed by a convolutional neural network. Similar to our approach, the model is trained end-to-end using the REINFORCE algorithm (Williams, 1992). However, a major difference between those work and ours is that we have to sample from discrete jumping distribution, while they can sample from continuous distribution such as Gaussian. The difference is mainly due to the inborn characteristics of text and image. In fact, as pointed out by Mnih et al. (2014), it was difficult to learn policies over more than 25 possible discrete locations.\nThis idea has recently been explored in the context of natural language processing applications, where the main goal is to filter irrelevant content using a small network (Choi et al., 2016). Perhaps the most closely related to our work is the concurrent work on learning to reason with reinforcement\nlearning (Shen et al., 2016). The key difference between our work and Shen et al. (2016) is that they focus on early stopping after multiple pass of data to ensure accuracy whereas our method focuses on selective reading with single pass to enable fast processing.\nThe concept of \u201chard\u201d attention has also been used successfully in the context of making neural network predictions more interpretable (Lei et al., 2016). The key difference between our work and Lei et al. (2016)\u2019s method is that our method optimizes for faster inference, and is more dynamic in its jumping. Likewise is the difference between our approach and the \u201csoft\u201d attention approach by (Bahdanau et al., 2014).\nOur method belongs to adaptive computation of neural networks, whose idea is recently explored by (Graves, 2016; Jernite et al., 2016), where different amount of computations are allocated dynamically per time step. The main difference between our method and Graves; Jernite et al.\u2019s methods is that our method can set the amount of computation to be exactly zero for many steps, thereby achieving faster scanning over texts. Even though our method requires policy gradient methods to train, which is a disadvantage compared to (Graves, 2016; Jernite et al., 2016), we do not find training with policy gradient methods problematic in our experiments.\nAt the high-level, our model can be viewed as a simplified trainable Turing machine, where the controller can move on the input tape. It is therefore related to the prior work on Neural Turing Machines (Graves et al., 2014) and especially its RL version (Zaremba and Sutskever, 2015). Compared to (Zaremba and Sutskever, 2015), the output tape in our method is more simple and reward signals in our problems are less sparse, which explains why our model is easy to train. It is worth noting that Zaremba and Sutskever report difficulty in using policy gradients to train their model.\nOur method, by skipping irrelevant content, shortens the length of recurrent networks, thereby addressing the vanishing or exploding gradients in them (Hochreiter et al., 2001). The baseline method itself, Long Short Term Memory (Hochreiter and Schmidhuber, 1997), belongs to the same category of methods. In this category, there are several recent methods that try to achieve the same goal, such as having recurrent networks that operate in different frequency (Koutnik et al., 2014) or\nis organized in a hierarchical fashion (Chan et al., 2015; Chung et al., 2016).\nLastly, we should point out that we are among the recent efforts that deploy reinforcement learning to the field of natural language processing, some of which have achieved encouraging results in the realm of such as neural symbolic machine (Liang et al., 2017), machine reasoning (Shen et al., 2016) and sequence generation (Ranzato et al., 2015)."}, {"heading": "5 Conclusions", "text": "In this paper, we focus on learning how to skim text for fast reading. In particular, we propose a \u201cjumping\u201d model that after reading every few tokens, it decides how many tokens should be skipped by sampling from a softmax. Such jumping behavior is modeled as a discrete decision making process, which can be trained by reinforcement learning algorithm such as REINFORCE. In four different tasks with six datasets (one synthetic and five real), we test the efficiency of the proposed method on various levels of text jumping, from character to word and then to sentence. The results indicate our model is several times faster than, while the accuracy is on par with the baseline LSTM model."}, {"heading": "Acknowledgments", "text": "The authors would like to thank the Google Brain Team, especially Zhifeng Chen and Yuan Yu for helpful discussion about the implementation of this model on Tensorflow. The first author also wants to thank Chen Liang, Hanxiao Liu, Yingtao Tian, Fish Tung, Chiyuan Zhang and Yu Zhang for their help during the project. Finally, the authors appreciate the invaluable feedback from anonymous reviewers."}], "references": [{"title": "Globally normalized transition-based neural networks", "author": ["Daniel Andor", "Chris Alberti", "David Weiss", "Aliaksei Severyn", "Alessandro Presta", "Kuzman Ganchev", "Slav Petrov", "Michael Collins."], "venue": "arXiv preprint arXiv:1603.06042 .", "citeRegEx": "Andor et al\\.,? 2016", "shortCiteRegEx": "Andor et al\\.", "year": 2016}, {"title": "Multiple object recognition with visual attention", "author": ["Jimmy Ba", "Volodymyr Mnih", "Koray Kavukcuoglu."], "venue": "arXiv preprint arXiv:1412.7755 .", "citeRegEx": "Ba et al\\.,? 2014", "shortCiteRegEx": "Ba et al\\.", "year": 2014}, {"title": "Neural machine translation by jointly", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": null, "citeRegEx": "Bahdanau et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "Listen, attend and spell", "author": ["William Chan", "Navdeep Jaitly", "Quoc V Le", "Oriol Vinyals."], "venue": "arXiv preprint arXiv:1508.01211 .", "citeRegEx": "Chan et al\\.,? 2015", "shortCiteRegEx": "Chan et al\\.", "year": 2015}, {"title": "A thorough examination of the cnn/daily mail reading comprehension task", "author": ["Danqi Chen", "Jason Bolton", "Christopher D. Manning."], "venue": "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, ACL 2016, Au-", "citeRegEx": "Chen et al\\.,? 2016", "shortCiteRegEx": "Chen et al\\.", "year": 2016}, {"title": "Hierarchical question answering for long documents", "author": ["Eunsol Choi", "Daniel Hewlett", "Alexandre Lacoste", "Illia Polosukhin", "Jakob Uszkoreit", "Jonathan Berant."], "venue": "arXiv preprint arXiv:1611.01839 .", "citeRegEx": "Choi et al\\.,? 2016", "shortCiteRegEx": "Choi et al\\.", "year": 2016}, {"title": "Hierarchical multiscale recurrent neural networks", "author": ["Junyoung Chung", "Sungjin Ahn", "Yoshua Bengio."], "venue": "arXiv preprint arXiv:1609.01704 .", "citeRegEx": "Chung et al\\.,? 2016", "shortCiteRegEx": "Chung et al\\.", "year": 2016}, {"title": "Natural language processing (almost) from scratch", "author": ["Ronan Collobert", "Jason Weston", "L\u00e9on Bottou", "Michael Karlen", "Koray Kavukcuoglu", "Pavel Kuksa."], "venue": "Journal of Machine Learning Research 12(Aug):2493\u20132537.", "citeRegEx": "Collobert et al\\.,? 2011", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Semisupervised sequence learning", "author": ["Andrew M. Dai", "Quoc V. Le."], "venue": "Advances in Neural Information Processing Systems. pages 3079\u2013 3087.", "citeRegEx": "Dai and Le.,? 2015", "shortCiteRegEx": "Dai and Le.", "year": 2015}, {"title": "Adaptive computation time for recurrent neural networks", "author": ["Alex Graves."], "venue": "arXiv preprint arXiv:1603.08983 .", "citeRegEx": "Graves.,? 2016", "shortCiteRegEx": "Graves.", "year": 2016}, {"title": "Neural turing machines", "author": ["Alex Graves", "Greg Wayne", "Ivo Danihelka."], "venue": "arXiv preprint arXiv:1410.5401 .", "citeRegEx": "Graves et al\\.,? 2014", "shortCiteRegEx": "Graves et al\\.", "year": 2014}, {"title": "Teaching machines to read and comprehend", "author": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom."], "venue": "Advances in Neural Information Processing Systems. pages 1693\u2013", "citeRegEx": "Hermann et al\\.,? 2015", "shortCiteRegEx": "Hermann et al\\.", "year": 2015}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations", "author": ["Felix Hill", "Antoine Bordes", "Sumit Chopra", "Jason Weston."], "venue": "arXiv:1511.02301 .", "citeRegEx": "Hill et al\\.,? 2015", "shortCiteRegEx": "Hill et al\\.", "year": 2015}, {"title": "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies", "author": ["Sepp Hochreiter", "Yoshua Bengio", "Paolo Frasconi", "J\u00fcrgen Schmidhuber."], "venue": "S. C. Kremer and J. F. Kolen, editors, A Field Guide to Dynamical Recurrent Neural Net-", "citeRegEx": "Hochreiter et al\\.,? 2001", "shortCiteRegEx": "Hochreiter et al\\.", "year": 2001}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber."], "venue": "Neural computation 9(8):1735\u20131780.", "citeRegEx": "Hochreiter and Schmidhuber.,? 1997", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Variable computation in recurrent neural networks", "author": ["Yacine Jernite", "Edouard Grave", "Armand Joulin", "Tomas Mikolov."], "venue": "arXiv preprint arXiv:1611.06188 .", "citeRegEx": "Jernite et al\\.,? 2016", "shortCiteRegEx": "Jernite et al\\.", "year": 2016}, {"title": "Recurrent continuous translation models", "author": ["Nal Kalchbrenner", "Phil Blunsom."], "venue": "EMNLP.", "citeRegEx": "Kalchbrenner and Blunsom.,? 2013", "shortCiteRegEx": "Kalchbrenner and Blunsom.", "year": 2013}, {"title": "Convolutional neural networks for sentence classification", "author": ["Yoon Kim."], "venue": "arXiv preprint arXiv:1408.5882 .", "citeRegEx": "Kim.,? 2014", "shortCiteRegEx": "Kim.", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba."], "venue": "arXiv preprint arXiv:1412.6980 .", "citeRegEx": "Kingma and Ba.,? 2014", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "A clockwork rnn", "author": ["Jan Koutnik", "Klaus Greff", "Faustino Gomez", "Juergen Schmidhuber."], "venue": "International Conference on Machine Learning.", "citeRegEx": "Koutnik et al\\.,? 2014", "shortCiteRegEx": "Koutnik et al\\.", "year": 2014}, {"title": "Distributed representations of sentences and documents", "author": ["Quoc V. Le", "Tomas Mikolov."], "venue": "International Conference on Machine Learning (ICML).", "citeRegEx": "Le and Mikolov.,? 2014", "shortCiteRegEx": "Le and Mikolov.", "year": 2014}, {"title": "Learning recurrent span representations for extractive question answering", "author": ["Kenton Lee", "Tom Kwiatkowski", "Ankur Parikh", "Dipanjan Das."], "venue": "arXiv preprint arXiv:1611.01436 .", "citeRegEx": "Lee et al\\.,? 2016", "shortCiteRegEx": "Lee et al\\.", "year": 2016}, {"title": "Rationalizing neural predictions", "author": ["Tao Lei", "Regina Barzilay", "Tommi Jaakkola."], "venue": "arXiv preprint arXiv:1606.04155 .", "citeRegEx": "Lei et al\\.,? 2016", "shortCiteRegEx": "Lei et al\\.", "year": 2016}, {"title": "Neural symbolic machines: Learning semantic parsers on freebase with weak supervision", "author": ["Chen Liang", "Jonathan Berant", "Quoc Le", "Kenneth D. Forbus", "Ni Lao."], "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational", "citeRegEx": "Liang et al\\.,? 2017", "shortCiteRegEx": "Liang et al\\.", "year": 2017}, {"title": "Learning word vectors for sentiment analysis", "author": ["Andrew L Maas", "Raymond E Daly", "Peter T. Pham", "Dan Huang", "Andrew Y. Ng", "Christopher Potts."], "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Lan-", "citeRegEx": "Maas et al\\.,? 2011", "shortCiteRegEx": "Maas et al\\.", "year": 2011}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."], "venue": "Advances in neural information processing systems. pages 3111\u20133119.", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Recurrent models of visual attention", "author": ["Volodymyr Mnih", "Nicolas Heess", "Alex Graves"], "venue": "In Advances in neural information processing systems", "citeRegEx": "Mnih et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2014}, {"title": "Abstractive text summarization using sequence-to-sequence RNNs and beyond", "author": ["Ramesh Nallapati", "Bowen Zhou", "Caglar Gulcehre", "Bing Xiang"], "venue": "In Conference on Computational Natural Language Learning (CoNLL)", "citeRegEx": "Nallapati et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Nallapati et al\\.", "year": 2016}, {"title": "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales", "author": ["Bo Pang", "Lillian Lee."], "venue": "Proceedings of the 43rd annual meeting on association for computational linguistics. Association for Computational", "citeRegEx": "Pang and Lee.,? 2005", "shortCiteRegEx": "Pang and Lee.", "year": 2005}, {"title": "Sequence level training with recurrent neural networks", "author": ["Marc\u2019Aurelio Ranzato", "Sumit Chopra", "Michael Auli", "Wojciech Zaremba"], "venue": "CoRR abs/1511.06732", "citeRegEx": "Ranzato et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2015}, {"title": "A neural attention model for abstractive sentence summarization", "author": ["Alexander M Rush", "Sumit Chopra", "Jason Weston."], "venue": "Empirical Methods in Natural Language Processing (EMNLP).", "citeRegEx": "Rush et al\\.,? 2015", "shortCiteRegEx": "Rush et al\\.", "year": 2015}, {"title": "Neural machine translation of rare words with subword units", "author": ["Rico Sennrich", "Barry Haddow", "Alexandra Birch."], "venue": "Annual Meeting of the Association for Computational Linguistics (ACL).", "citeRegEx": "Sennrich et al\\.,? 2015", "shortCiteRegEx": "Sennrich et al\\.", "year": 2015}, {"title": "Bidirectional attention flow for machine comprehension", "author": ["Minjoon Seo", "Aniruddha Kembhavi", "Ali Farhadi", "Hannaneh Hajishirzi."], "venue": "arXiv preprint arXiv:1611.01603 .", "citeRegEx": "Seo et al\\.,? 2016", "shortCiteRegEx": "Seo et al\\.", "year": 2016}, {"title": "Attention for fine-grained categorization", "author": ["Pierre Sermanet", "Andrea Frome", "Esteban Real."], "venue": "arXiv preprint arXiv:1412.7054 .", "citeRegEx": "Sermanet et al\\.,? 2014", "shortCiteRegEx": "Sermanet et al\\.", "year": 2014}, {"title": "Neural responding machine for short-text conversation", "author": ["Lifeng Shang", "Zhengdong Lu", "Hang Li."], "venue": "Annual Meeting of the Association for Computational Linguistics (ACL).", "citeRegEx": "Shang et al\\.,? 2015", "shortCiteRegEx": "Shang et al\\.", "year": 2015}, {"title": "Reasonet: Learning to stop reading in machine comprehension", "author": ["Yelong Shen", "Po-Sen Huang", "Jianfeng Gao", "Weizhu Chen."], "venue": "arXiv preprint arXiv:1609.05284 .", "citeRegEx": "Shen et al\\.,? 2016", "shortCiteRegEx": "Shen et al\\.", "year": 2016}, {"title": "Semi-supervised recursive autoencoders for predicting sentiment distributions", "author": ["Richard Socher", "Jeffrey Pennington", "Eric H. Huang", "Andrew Y. Ng", "Christopher D. Manning."], "venue": "Proceedings of the conference on empirical methods in natural lan-", "citeRegEx": "Socher et al\\.,? 2011", "shortCiteRegEx": "Socher et al\\.", "year": 2011}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["Richard Socher", "Alex Perelygin", "Jean Y. Wu", "Jason Chuang", "Christopher D. Manning", "Andrew Y. Ng", "Christopher Potts"], "venue": null, "citeRegEx": "Socher et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Socher et al\\.", "year": 2013}, {"title": "A neural network approach to context-sensitive generation of conversational responses", "author": ["Alessandro Sordoni", "Michel Galley", "Michael Auli", "Chris Brockett", "Yangfeng Ji", "Margaret Mitchell", "Jian-Yun Nie", "Jianfeng Gao", "Bill Dolan."], "venue": "arXiv preprint", "citeRegEx": "Sordoni et al\\.,? 2015", "shortCiteRegEx": "Sordoni et al\\.", "year": 2015}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V. Le."], "venue": "Advances in neural information processing systems. pages 3104\u20133112.", "citeRegEx": "Sutskever et al\\.,? 2014", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "A parallel-hierarchical model for machine comprehension on sparse data", "author": ["Adam Trischler", "Zheng Ye", "Xingdi Yuan", "Jing He", "Phillip Bachman", "Kaheer Suleman."], "venue": "arXiv preprint arXiv:1603.08884 .", "citeRegEx": "Trischler et al\\.,? 2016", "shortCiteRegEx": "Trischler et al\\.", "year": 2016}, {"title": "A neural conversational model", "author": ["Oriol Vinyals", "Quoc Le."], "venue": "arXiv preprint arXiv:1506.05869 .", "citeRegEx": "Vinyals and Le.,? 2015", "shortCiteRegEx": "Vinyals and Le.", "year": 2015}, {"title": "Machine comprehension using match-lstm and answer pointer", "author": ["Shuohang Wang", "Jing Jiang."], "venue": "arXiv preprint arXiv:1608.07905 .", "citeRegEx": "Wang and Jiang.,? 2016", "shortCiteRegEx": "Wang and Jiang.", "year": 2016}, {"title": "Multi-perspective context matching for machine comprehension", "author": ["Zhiguo Wang", "Haitao Mi", "Wael Hamza", "Radu Florian."], "venue": "arXiv preprint arXiv:1612.04211 .", "citeRegEx": "Wang et al\\.,? 2016", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "Towards ai-complete question answering: A set of prerequisite toy tasks", "author": ["Jason Weston", "Antoine Bordes", "Sumit Chopra", "Alexander M Rush", "Bart van Merri\u00ebnboer", "Armand Joulin", "Tomas Mikolov."], "venue": "arXiv preprint arXiv:1502.05698 .", "citeRegEx": "Weston et al\\.,? 2015", "shortCiteRegEx": "Weston et al\\.", "year": 2015}, {"title": "Simple statistical gradientfollowing algorithms for connectionist reinforcement learning", "author": ["Ronald J. Williams."], "venue": "Machine Learning 8:229\u2013256.", "citeRegEx": "Williams.,? 1992", "shortCiteRegEx": "Williams.", "year": 1992}, {"title": "Dynamic coattention networks for question answering", "author": ["Caiming Xiong", "Victor Zhong", "Richard Socher."], "venue": "arXiv preprint arXiv:1611.01604 .", "citeRegEx": "Xiong et al\\.,? 2016", "shortCiteRegEx": "Xiong et al\\.", "year": 2016}, {"title": "Reinforcement learning neural turing machines-revised", "author": ["Wojciech Zaremba", "Ilya Sutskever."], "venue": "arXiv preprint arXiv:1505.00521 .", "citeRegEx": "Zaremba and Sutskever.,? 2015", "shortCiteRegEx": "Zaremba and Sutskever.", "year": 2015}, {"title": "Character-level convolutional networks for text classification", "author": ["Xiang Zhang", "Junbo Zhao", "Yann LeCun."], "venue": "Advances in neural information processing systems. pages 649\u2013657.", "citeRegEx": "Zhang et al\\.,? 2015", "shortCiteRegEx": "Zhang et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 7, "context": ", partof-speech tagging, chunking, named entity recognition (Collobert et al., 2011), sentiment analysis (Socher et al.", "startOffset": 60, "endOffset": 84}, {"referenceID": 17, "context": ", 2011, 2013), document classification (Kim, 2014; Le and Mikolov, 2014; Zhang et al., 2015; Dai and Le, 2015), machine translation (Kalchbrenner and Blunsom, 2013; Sutskever", "startOffset": 39, "endOffset": 110}, {"referenceID": 20, "context": ", 2011, 2013), document classification (Kim, 2014; Le and Mikolov, 2014; Zhang et al., 2015; Dai and Le, 2015), machine translation (Kalchbrenner and Blunsom, 2013; Sutskever", "startOffset": 39, "endOffset": 110}, {"referenceID": 48, "context": ", 2011, 2013), document classification (Kim, 2014; Le and Mikolov, 2014; Zhang et al., 2015; Dai and Le, 2015), machine translation (Kalchbrenner and Blunsom, 2013; Sutskever", "startOffset": 39, "endOffset": 110}, {"referenceID": 8, "context": ", 2011, 2013), document classification (Kim, 2014; Le and Mikolov, 2014; Zhang et al., 2015; Dai and Le, 2015), machine translation (Kalchbrenner and Blunsom, 2013; Sutskever", "startOffset": 39, "endOffset": 110}, {"referenceID": 38, "context": ", 2016), conversational/dialogue modeling (Sordoni et al., 2015; Vinyals and Le, 2015; Shang et al., 2015), document summarization (Rush et al.", "startOffset": 42, "endOffset": 106}, {"referenceID": 41, "context": ", 2016), conversational/dialogue modeling (Sordoni et al., 2015; Vinyals and Le, 2015; Shang et al., 2015), document summarization (Rush et al.", "startOffset": 42, "endOffset": 106}, {"referenceID": 34, "context": ", 2016), conversational/dialogue modeling (Sordoni et al., 2015; Vinyals and Le, 2015; Shang et al., 2015), document summarization (Rush et al.", "startOffset": 42, "endOffset": 106}, {"referenceID": 30, "context": ", 2015), document summarization (Rush et al., 2015; Nallapati et al., 2016),", "startOffset": 32, "endOffset": 75}, {"referenceID": 27, "context": ", 2015), document summarization (Rush et al., 2015; Nallapati et al., 2016),", "startOffset": 32, "endOffset": 75}, {"referenceID": 0, "context": "parsing (Andor et al., 2016) and automatic question answering (Q&A) (Weston et al.", "startOffset": 8, "endOffset": 28}, {"referenceID": 44, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 11, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 42, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 43, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 40, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 21, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 32, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 46, "context": ", 2016) and automatic question answering (Q&A) (Weston et al., 2015; Hermann et al., 2015; Wang and Jiang, 2016; Wang et al., 2016; Trischler et al., 2016; Lee et al., 2016; Seo et al., 2016; Xiong et al., 2016).", "startOffset": 47, "endOffset": 211}, {"referenceID": 14, "context": "In our experiments, we use the basic LSTM recurrent networks (Hochreiter and Schmidhuber, 1997) as the base model and benchmark the proposed algorithm on a range of document classification or reading comprehension tasks, using various datasets such as Rotten Tomatoes (Pang ar X iv :1 70 4.", "startOffset": 61, "endOffset": 95}, {"referenceID": 24, "context": "and Lee, 2005), IMDB (Maas et al., 2011), AG News (Zhang et al.", "startOffset": 21, "endOffset": 40}, {"referenceID": 48, "context": ", 2011), AG News (Zhang et al., 2015) and Children\u2019s Book", "startOffset": 17, "endOffset": 37}, {"referenceID": 12, "context": "Test (Hill et al., 2015).", "startOffset": 5, "endOffset": 24}, {"referenceID": 45, "context": "rithm (Williams, 1992):", "startOffset": 6, "endOffset": 22}, {"referenceID": 45, "context": "It is shown (Williams, 1992; Zaremba and Sutskever, 2015) that any number bi will yield an unbiased estimation.", "startOffset": 12, "endOffset": 57}, {"referenceID": 47, "context": "It is shown (Williams, 1992; Zaremba and Sutskever, 2015) that any number bi will yield an unbiased estimation.", "startOffset": 12, "endOffset": 57}, {"referenceID": 26, "context": "of Mnih et al. (2014) that bi = wbh s i + cb and the parameter \u03b8b = {wb, cb} is learned by minimizing (Rs\u2212 bi )2.", "startOffset": 3, "endOffset": 22}, {"referenceID": 14, "context": "To exclude the potential impact of advanced models, we restrict our comparison between the vanilla LSTM (Hochreiter and Schmidhuber, 1997) and our model, which is referred to as LSTM-Jump.", "startOffset": 104, "endOffset": 138}, {"referenceID": 18, "context": "General Experiment Settings We use the Adam optimizer (Kingma and Ba, 2014) with a learning rate of 0.", "startOffset": 54, "endOffset": 75}, {"referenceID": 25, "context": "We choose the pre-trained word2vec embeddings5 (Mikolov et al., 2013) as", "startOffset": 47, "endOffset": 69}, {"referenceID": 24, "context": "The second dataset is IMDB (Maas et al., 2011),6 which contains 25,000 training and 25,000 testing movie reviews, where the average length of text is 240 words, much longer than that of Rotten Tomatoes.", "startOffset": 27, "endOffset": 46}, {"referenceID": 48, "context": "The data we use is the subset constructed by Zhang et al. (2015) for classification with character-level convolutional networks.", "startOffset": 45, "endOffset": 65}, {"referenceID": 12, "context": "We benchmark on the data set Children\u2019s Book Test (CBT) (Hill et al., 2015).", "startOffset": 56, "endOffset": 75}, {"referenceID": 4, "context": "Using such bilinear form to select answer basically follows the idea of Chen et al. (2016), as it is shown to have good performance.", "startOffset": 72, "endOffset": 91}, {"referenceID": 45, "context": "Similar to our approach, the model is trained end-to-end using the REINFORCE algorithm (Williams, 1992).", "startOffset": 87, "endOffset": 103}, {"referenceID": 1, "context": ", 2014; Ba et al., 2014; Sermanet et al., 2014), where a recurrent model is used to combine visual evidence at multiple fixations processed by a convolutional neural network. Similar to our approach, the model is trained end-to-end using the REINFORCE algorithm (Williams, 1992). However, a major difference between those work and ours is that we have to sample from discrete jumping distribution, while they can sample from continuous distribution such as Gaussian. The difference is mainly due to the inborn characteristics of text and image. In fact, as pointed out by Mnih et al. (2014), it was difficult to learn policies over more than 25 possible discrete locations.", "startOffset": 8, "endOffset": 591}, {"referenceID": 5, "context": "This idea has recently been explored in the context of natural language processing applications, where the main goal is to filter irrelevant content using a small network (Choi et al., 2016).", "startOffset": 171, "endOffset": 190}, {"referenceID": 35, "context": "learning (Shen et al., 2016).", "startOffset": 9, "endOffset": 28}, {"referenceID": 35, "context": "learning (Shen et al., 2016). The key difference between our work and Shen et al. (2016) is that they focus on early stopping after multiple pass of data to ensure accuracy whereas our method focuses on selective reading with single pass to enable fast processing.", "startOffset": 10, "endOffset": 89}, {"referenceID": 22, "context": "The concept of \u201chard\u201d attention has also been used successfully in the context of making neural network predictions more interpretable (Lei et al., 2016).", "startOffset": 135, "endOffset": 153}, {"referenceID": 22, "context": "The concept of \u201chard\u201d attention has also been used successfully in the context of making neural network predictions more interpretable (Lei et al., 2016). The key difference between our work and Lei et al. (2016)\u2019s method is that our method optimizes for faster inference, and is more dynamic in its jumping.", "startOffset": 136, "endOffset": 213}, {"referenceID": 2, "context": "proach by (Bahdanau et al., 2014).", "startOffset": 10, "endOffset": 33}, {"referenceID": 9, "context": "Our method belongs to adaptive computation of neural networks, whose idea is recently explored by (Graves, 2016; Jernite et al., 2016), where different amount of computations are allocated dynamically per time step.", "startOffset": 98, "endOffset": 134}, {"referenceID": 15, "context": "Our method belongs to adaptive computation of neural networks, whose idea is recently explored by (Graves, 2016; Jernite et al., 2016), where different amount of computations are allocated dynamically per time step.", "startOffset": 98, "endOffset": 134}, {"referenceID": 9, "context": "to (Graves, 2016; Jernite et al., 2016), we do not find training with policy gradient methods problematic in our experiments.", "startOffset": 3, "endOffset": 39}, {"referenceID": 15, "context": "to (Graves, 2016; Jernite et al., 2016), we do not find training with policy gradient methods problematic in our experiments.", "startOffset": 3, "endOffset": 39}, {"referenceID": 10, "context": "It is therefore related to the prior work on Neural Turing Machines (Graves et al., 2014) and especially its RL version (Zaremba and Sutskever, 2015).", "startOffset": 68, "endOffset": 89}, {"referenceID": 47, "context": ", 2014) and especially its RL version (Zaremba and Sutskever, 2015).", "startOffset": 38, "endOffset": 67}, {"referenceID": 47, "context": "Compared to (Zaremba and Sutskever, 2015), the output tape in our method is more simple and reward signals in our problems are less sparse, which explains why our model is easy to train.", "startOffset": 12, "endOffset": 41}, {"referenceID": 13, "context": "Our method, by skipping irrelevant content, shortens the length of recurrent networks, thereby addressing the vanishing or exploding gradients in them (Hochreiter et al., 2001).", "startOffset": 151, "endOffset": 176}, {"referenceID": 14, "context": "The baseline method itself, Long Short Term Memory (Hochreiter and Schmidhuber, 1997), belongs to the same category of methods.", "startOffset": 51, "endOffset": 85}, {"referenceID": 19, "context": "In this category, there are several recent methods that try to achieve the same goal, such as having recurrent networks that operate in different frequency (Koutnik et al., 2014) or is organized in a hierarchical fashion (Chan et al.", "startOffset": 156, "endOffset": 178}, {"referenceID": 3, "context": ", 2014) or is organized in a hierarchical fashion (Chan et al., 2015; Chung et al., 2016).", "startOffset": 50, "endOffset": 89}, {"referenceID": 6, "context": ", 2014) or is organized in a hierarchical fashion (Chan et al., 2015; Chung et al., 2016).", "startOffset": 50, "endOffset": 89}, {"referenceID": 23, "context": "Lastly, we should point out that we are among the recent efforts that deploy reinforcement learning to the field of natural language processing, some of which have achieved encouraging results in the realm of such as neural symbolic machine (Liang et al., 2017), machine reasoning (Shen et al.", "startOffset": 241, "endOffset": 261}, {"referenceID": 35, "context": ", 2017), machine reasoning (Shen et al., 2016) and sequence generation (Ranzato et al.", "startOffset": 27, "endOffset": 46}, {"referenceID": 29, "context": ", 2016) and sequence generation (Ranzato et al., 2015).", "startOffset": 32, "endOffset": 54}], "year": 2017, "abstractText": "Recurrent Neural Networks are showing much promise in many sub-areas of natural language processing, ranging from document classification to machine translation to automatic question answering. Despite their promise, many recurrent models have to read the whole text word by word, making it slow to handle long documents. For example, it is difficult to use a recurrent network to read a book and answer questions about it. In this paper, we present an approach of reading text while skipping irrelevant information if needed. The underlying model is a recurrent network that learns how far to jump after reading a few words of the input text. We employ a standard policy gradient method to train the model to make discrete jumping decisions. In our benchmarks on four different tasks, including number prediction, sentiment analysis, news article classification and automatic Q&A, our proposed model, a modified LSTM with jumping, is up to 6 times faster than the standard sequential LSTM, while maintaining the same or even better accuracy.", "creator": "LaTeX with hyperref package"}}}