{"id": "1705.04448", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-May-2017", "title": "R2-D2: ColoR-inspired Convolutional NeuRal Network (CNN)-based AndroiD Malware Detections", "abstract": "machine learning ( sat ) has found it particularly useless in malware detection. however, as the malware evolves very frequently, robust stability of the apps extracted from malware serves as each critical issue in malware enforcement. by recent success of deep learning in image recognition, natural language processing, and machine translation indicates a potential solution for stabilizing the malware monitoring effectiveness. between this research, people haven't extract mostly any features ( e. g., numerical control - flow of op - code, interfaces, methods of functions and the timing they are invoked etc. ) from android apps. we develop our own method for translating android apps into mobile color vectors and transform them to a fixed - sized encoded image. after that, the encoded image is automatically multiple digital transform network ( cnn ) for automatic asset extraction and learning, reducing the respondents'self intervention. automated learning usually involves a large number of parameters that cannot be learned from only a small dataset. in overall way, we currently have collected 1500k android apps samples, have run our system over these 800k malware samples ( benign and malicious samples are roughly equal - weights ), and also through our back - end ( 60 million monthly active users and 10k new malware profiles per day ), we can then detect sms malware. we verify that our methodology and the corresponding use of deep learning malware classification can overcome the weakness, reduced computational cost of the common static / dynamic analysis process or machine learning - based of android malware detection approach.", "histories": [["v1", "Fri, 12 May 2017 06:28:12 GMT  (7709kb,D)", "http://arxiv.org/abs/1705.04448v1", "2017/05/12 Draft Version"], ["v2", "Fri, 21 Jul 2017 11:56:51 GMT  (7872kb,D)", "http://arxiv.org/abs/1705.04448v2", "2017/07/20 Version 2"], ["v3", "Fri, 1 Sep 2017 16:10:48 GMT  (6305kb,D)", "http://arxiv.org/abs/1705.04448v3", "2017/09/01 Version 3"]], "COMMENTS": "2017/05/12 Draft Version", "reviews": [], "SUBJECTS": "cs.CR cs.AI", "authors": ["tonton hsien-de huang", "hung-yu kao"], "accepted": false, "id": "1705.04448"}, "pdf": {"name": "1705.04448.pdf", "metadata": {"source": "CRF", "title": "R2-D2: ColoR-inspired Convolutional NeuRal Network (CNN)-based AndroiD Malware Detections", "authors": [], "emails": [], "sections": [{"heading": null, "text": "Index Terms\u2014Deep Learning, Android Malware Detection, Convolutional Neural Network\nI. INTRODUCTION\nSmartphones have gained widespread popularing worldwide, among them. Android is the most commonly used operating system (OS), and is still expanding as ferritory. International Data Corporation (IDC) 2016 Q3 smartphones OS marketshare reports 86.8% of smartphones are Android phones, indicating a steady growth market share, compared to 84.3% of marketshare in 2015 Q2 (see Fig. 1) [1]. Android is featured by its openness; users can choose to downloads apps from Google Play and third-party marketplace. However due to the popularing and openness, Android has attracted the attacker\u2019s attention. In purticalar malicious software (malware) can easily spread and infect benign devises. Security Report 201516 of AV-TEST Intitute reports that while the number of malware is increased from 17 millions in 2005 to over 600 millions in 2016, the percentage of Android malware has a significant increase from 3.19% in 2015 to 7.48% in 2016Q2. Among them, Trojans targeting at stealing user data occupy 97.49%. We can also find that Android malware has dominat-\ning percetange, 99.87% on the number of malware on mobile platform [2]. Fig. 2 shows the statistic collected from our backend system during January 2017., where for countries such as US, UK, France, etc., more than 50000 users are infected everyday. Moreover, from our experience, the number of Android malware is sharply increased from 1000000 in 2012 to 2.8 million in 2014. Due to the serious security problem caused by Android malware, we propose, color-inspired convolutional neural networks (CNN)-based Android malware detection, R2D2, to detect Android malware. Different from the existing solution, our propose R2-D2 detection is featured by its endto-end learning process. More specifically, in contrast to the prior solutions that require manual process of feature selection and parameter configuration, our proposed R2-D2 detection takes as input the training samples and outputs the malware detection model without the human interrelation.\nar X\niv :1\n70 5.\n04 44\n8v 1\n[ cs\n.C R\n] 1\n2 M\nay 2\n01 7"}, {"heading": "II. RELATED WORK", "text": ""}, {"heading": "A. Android Malware Analysis Background", "text": "Android Package (APK) is the paella format used by Android OS for distribution and installation of mobile apps. Essentially, APK fields are a type of zip-formatted archive file. The structure of APK can be dissected as follows:\n\u2022 META-INIF/: contains the information description from Java jar file. \u2022 res/: contains the resource document. \u2022 libs/: contains the so library from Android Native Devel-\nopment (NDK) \u2022 AndroidManifest.xml: contains the configuration file\nabout the authorization and service. \u2022 classes.dex: contains the dalvik byte-code, i.e., Android\nexecution file. \u2022 resource.asc: contains the binary resource file after com-\npilation. Fig. 3 shows the compilation process of Android APK. First we compile all of the Java source code, generating the .class byte-code. After that, all of the .class files are transformed into .dex format executable format. Dalvik VM is mainly developed by Google, with the minimal requirement on the resource. In other words, Dalvik VM can be run on the mobile devices with limited computing and memory resource but with acceptably performance.\nStatic analysis of signature-based method is one of the most common approaches for Android malware detection. The tools include Apktool, baksmalu, dex2jar, and JD-GUI, which are reverse-engineering tools for deriving Java or smali source code from classes.dex. Furthermore, AXMLPrinter2 can be used to derive the Android permission from AndroidManifest.xml. Another category of approaches for Android malware detection is dynamic analysis or behavior-based method. The idea behind this category is to keep track of the system communications and network connections by emulating Android apps. through techniques such as sandbox and virtual machine. The domain exports then perform the inspection and analysis on the records to see wether the malicious behaviours occur. If so, virus pattern and black/white-list are generated for pattern matching and for capturing the malware. However antianalysis techniques such as obfuscation, encryption, and antidebugging are also proposed by hacker to hide the malicious behaviours, and escaping the detection [3]. In fact, the above approaches can be useless when the malware programmers make modification on the initial components in malware, which can evade the detection.\nFig. 4 shows the popular class naming in benign Android apps (e.g. intellij.annotations and features2d). Fig. 5 shows the common way for declaring the data variables (e.g. paramBitmap and paramBitmap). However, to evade the detection, certain random naming (e.g. dsrhki.yjgfqjejkjh and nlrskgblc) will be used by \" opfake \" family (show in Fig. 6). Fig. 7 shows that \" fakeinst \" family until encrypt the critical variables (e.g. jj = 84f113ee155ba4f1e280b54401fffab and jj1 = 84f113ee155ba43f1e280b54401fffab)."}, {"heading": "B. Machine Learning-based Malware Detection", "text": "Machine learning is a techniques for enabling the machine to learn the pattern, build the model, and make the prediction by seeing only the raw data. Currently, the most widespread malware attacks are still exploit attack and privileged escalation, as a result, most of the machine learning-based malware detection still find the features such as the Android apps permissions, API invocation and control flow graphs (CFG) in order to distinguish between the benign and malicious apps. Usually, SVM and random forest are used to build the model to distinguish between benign and malicious apps. For example, DroidMiner [4] has a two-step flow-chart to represent the behaviours of Android apps and capture the execution logs behind the apps. After that rectors are clustered to identity the similar code snippet. Lei Chen et al. [5] extracted features from Android API invocation as a reverse engineering approach. They apply normalization procedure to the extracted featuring and perform logistic regression on the extracted feature to detect Android malware. Moreover, the dataset used by the current research-oriented machine learning-based Android malware detection are rather small. Most of existing solutions train their detection models sorely based on the small datasets. This cause the practicality problem because the realworld malware may have distinguishing distinctive behaviors and the existing detection models cannot successfully identify the malware by correlating the API invocation and Android permissions."}, {"heading": "C. Deep Learning", "text": "The recent success in deep learning research and development attracts people\u2019s attention [6]. In 2015, Google released Tensorflow [7], a framework of realizing deep learning algorithm. Deep learning is a specific type of machine learning, more specifically deep learning is an artificial neural network, in which multiple layers of neurons are interconnected with different weights and activation functions to learn the hidden relationship between input and output. Intuitively, input data are feeded to the first layer that generates different combinations of the input [8]. These combinations, after the activation function, are feeded to the second layer, and so on. Under the above procedures, different combinations of the outputs from the previously layer can be seen as different representation of features. The weights on links between layers are adjusted according forward and backward propagations, depending on the distance or less function between true output label and the label calculated by neural network. Note that deep learning can be seen as a neural network with a large number of layers. After the above learning process via multiple layers, we can derive a better understanding and representation of distinguishable features, enhancing the detection accuracy [9]. Also notice that the effectiveness of deep learning is increased with the network size. In addition to deep neural networks, the most well-known deep networks is convolutional neural networks (CNN). The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13]. More specifically, CNN is composed of hidden layers, fully connected layers.\nconvolution layers, and pooling layers. The hidden layers are used to increase the complexity of the model. If the same number of neural are associated with the input image, the number of parameters can be significantly reduced, adapting to the function structure more properly."}, {"heading": "D. Deep Learning-based Malware Detection", "text": "Deep learning once can be seem as the care for the above problem. However, a pre-processing step, such as feature engineering, is still needed before the model is learn. Furthermore, the dataset for training the model cannot reflect real-world malware accurately. For example [14], propose a malware detection, which takes windows API invocation as the inputs of stack of Auto-Encoders and fine-tunes the model parameters [15]. Performs the feature extracting, such as contextual byte features, PE import features, string 2d histogram features, and PE metadata features. Then, the extracted features are feeded to the DNN. With two hidden layers, [16] uses static analysis to extract features such as required permission, sensitive API, and uses dynamic analysis to extract features such as actiondexclass-load, action-recrent and action-service start. After that, these features are feeded to deep belief network (DBN). There is similarity between the execution logic of Android malicious apps and the order of functions being called. Thus, in addition to the aforementioned solutions that apply DNN to malware analysis based on exploit attack and privileged escalation, another category of malware detection relies on ngram analysis on byte-code and op-code. For example, [17] and [18] first calculate the n-grams on the binary byte-code and then perform the malware detection based on k-nearest neighbor. [19] proposes to perform analysis on op-code of the reverse-engineering. In addition, one more category of the malware detection relies on transforming malware into the images. For example, [20] proposes to first transform binary byte-code into grayscale image and the apply pattern recognition on the image. All of the above methods achieves a certain level of detection accuracy. However, as mentioned in Section II, the number of malware is increased dramatically. Even worse, more and more anti-debugging techniques are discovered. The size of dataset used for training the model also has significant impacts on the detection accuracy and the training efficiency. Here, we particularly note that despite the detection accuracy of the n-gram approach. N-gram approach consumes substantial computing resources and time for handling the dynamic growth of the model parameters required, implying the impracticality [21]. However, CNN is able to handle the explosive data growth because the increased number of parameters does not imply the growth of computing resource and time required. Recently, [22] also proposes a deep learning-based malware detection, where the op-code sequences are encoded as one-hot vectors for the input of CNN. However, this method needs to dissemble the Android apps via backsmali, and therefore cannot handle malware with encryption and obfuscation, as show in Fig. 3 and Fig. 4 [23], [24], [25]."}, {"heading": "III. OUR PROPOSED MECHANISM: R2-D2", "text": ""}, {"heading": "A. The Advantage of Our Methodology", "text": "As mentioned above, the majority of the malware detection still relies on the static analysis of source code and the dynamic analysis through monitoring the execution of malware. However, these approaches are known to have better detection accuracy for the same family of malware only. In reality, Android malware has dramatically growth in numbers and mutates with fast speed and with various anti-analysis techniques. All of these characteristics make the accurate detection extremely difficult. Thus, we attempt to find out the hidden relationship between the program execution logic and the order of function calls behind the malware by taking advantauge of the deep learning in order to accurately detect known and even unknown malware.\nSince the byte-code in classes.dex and rgb color code are both hexadecimal, we proposed a transformation algorithm that enables the byte-code as rgb color code. After that, we apply CNN to the images for the Android malware detection. Our R2-D2 method works by only decompressing Android apps and then translating the dalvik executable, classes.dex into color images. In fact, a huge amount of human labor will instead perform feature engineering and model before the detection model built. To ease the model training, we adopt deep learning to construct an end-to-end learning-based Android malware detection, which is termed as R2-D2 (R2D2: ColoR-inspired Convolutional NeuRal Network (CNN)based AndroiD Malware Detections). Our proposed R2-D2 possesses the following advantages:\n\u2022 R2-D2 translates classes.dex, the core of the execution logic of Android apps, into RGB color images, without modifying the original Android apps and without extracting features from apps. In our experiments, only 0.4 seconds suffice to translate an apps into a color image, such translation is also featured by the fact that more information in apps can be preserved in the color image compared to the grayscale image. \u2022 Though the fully connected layer of DNN can be used to handle the fast mutation, the CNN in R2-D2 actually is more suitable for capturing the malware, because of its features such as local receptive fields and shared weights that can not only significantly reduce the number of model parameters nut also represent the complex structure of Android malware. \u2022 The filter, pooling, and non-linear activation functions in CNN do not extract features from image for pattern recognition. Instead, the raw pixels are represented by multi-dimensional matrices."}, {"heading": "B. The Architecture of Our Methodology", "text": "In the following, we explain the algorithm procedures of R2-D2 in more details. First of all, we collected the Android apps which from our original back-end classification system, the Android apps will be classified as benign and Trojan, RiskTool, HackTool, AdWare, Banker, Clicker, Downloader,\nDropper, FakeAV, Monitor, SMS, Spy, Ransom, Exploit, and BackDoor. Then, we decompress the apps to retrieve the classes.dex and present as byte-code. We then map the hexadecimal from byte-code to rgb color code through the rule show in Fig. 8. Finally, we will reach a color image (shown in Fig. 9 and 10), and the images are feed to CNN and training a model to detection Android malware. Fig. 11 is our system architecture."}, {"heading": "IV. EXPERIMENT RESULT", "text": ""}, {"heading": "A. Experiment Environment and Datasets", "text": "Fig. 12 shows the hardware setting and software library used in our experiment. We collect the data from Cheetah Mobile Security Research Lab. In our back-end system, on average we collect 4000 benign and 6000 malicious samples everyday. The data collection duration is from October 2016 to February 2017, among which we have collection approximately 1.5 million of Android apps for our experiments. We particularly note that the malware may have different variants and mutations, depending on the factors such as the cell-pone model, Android version, and the orographic regions. Thus Fig. 2 shows the basis for our classification depending on malware family and malware behavior. Fig. 13 shows the trend of different mlaware families particularly all of the world, and Fig. 14 shows the trend of different malware families particularly in China and India. Fig. 15 shows the market shares for different cell-phone models. Based on the above statistic, we can confirm that even the same malware family will exhibit different behaviours in different geographic regions. Our dataset can handle this problem.\nFig. 12. The hardware setting and software library used in our experiment."}, {"heading": "B. Evaluations of different deep neural networks optimization", "text": "Based on our collected data, we evaluate the detection accuracy and performance with different optimization model techniques. Note that the learning rate is fixed to be 0.01, The model optimization techniques are stochastic gradient descent (SGD), Nesterov Accelerated Gradient (NAG), AdaDelta and AdaGrad. From our experiment, we find that Inception-v3 (show in Fig. 16) is almost always better than AlexNet (show in Fig. 17), with such as observation, we further compare Inception-v3 with AdaDelta and Inception-v3 with AdaGrad (see Fig. 18), and find that SGD is best suitable for our use. In particular, it results in the sharpest increase in accuracy and sharpest decrease in loss. At the end, we reach 98.4225% and 97.7081% accuracy (see Fig. 19).\nC. Validation on Real Environment\nTo infer the capability of our R2-D2 system in detection the unknown malware, we also collected Android apps on Google Play from February 2017. More specifically, we collected Android apps in different categories (e.g., weather, business, finance, travel, etc.) from the different countries (e.g., US, UK, France, Germany, etc. ). In addition, we also choose benign samples that none of VirusTotal (https://www.virustotal.com) vendor report malicious. We also selected malicious samples, the criteria for selecting malicious samples is that more than 30 VirusTotal vendors report malicious. We download some malicious samples from contagio (http://contagiominidump.blogspot.tw). As a summary, the above four sources of benign/malicious samples are used for verifying the detection capability of our R2D2 system. The evaluation metrics in our experiment include True Positive (TP), False Positive (FP), False Negative (FN), True Negative (TN), Accucarcy (Acc), Precision (Prec), Recall (Detection Rate, DR), False Positive Rate (FPR) and F1-score (F-measure). The evaluation results are shown in Fig. 20. We can see that with the rapid generation and mutation of malware, even the detection model is trained based on our dataset with 1.5 million samples, the precision is highler than accuracy after the threshold 0.6. Moreover, when the threshold is over 0.7, recall and F1 -score start to drop, meaning that the detection accuracy is not as good as before, this phenomenon can confirm that thought R2-D2 is able to reduce the human labor and resource consumption, long-term sample collection and model updating are still necessary."}, {"heading": "D. Real Case study", "text": "We further compare our detection results to the results reported by VirusTotal vendors. More specifically, we collect 87 Minecraft apps that are verified as malware from Google Play. These apps are active on Google Play from January 2017, and the numbers of installations is approximately 1 million. The most prominent feature of these apps are the extra module for downloading, and the request for Device Administrator permission. These apps then promote deceptive advertisements. These apps have been removed by Google Play,. However, if they can be detected in the first place\nwithout feature extraction, they can fluctuation of Android malware can be mitigated. From Fig. 21, we can find that most of the above Minecraft malware can be detected by approximately 16% vendors (10/60) on 2017/03/24. Until 2017/03/30, approximately 32% vendors (20/60) can detect these malware. For example, Fig. 22 shows the detection results of \"hash\". However, R2-D2 can detect more than 75% of these apps. This manual feature engineering, but even also is able to beter detect unknown malware before the state-ofthe-art malware detection engines."}, {"heading": "E. Comparison with Exited Methodology", "text": "Finally, we compare our R2-D2 to DroidSieve. The evaluation metres include the sample size, DR/FPR, acc, and detection time. From Fig. 23, we find that though R2-D2 is slightly weaker than some others in DRFPR and acc, our R2D2 is trained based on a significantly larger dataset and is more adaptive to the real-world adoption, because the model trained by smaller dataset cannot reflect the reality. Moreover, R2-D2 has distinguishing advantage that it has fast detection time, 0.5 seconds for each coming samples, and require manual feature engineering."}, {"heading": "V. CONCLUSION", "text": "This research adopt deep learning to construct an end-toend learning-based Android malware detection and proposed color-inspired convolutional neural network (CNN)-based Android Malware detection, which is termed as R2-D2. The proposed proof-of-concept system has tested in our internal environment. The results show that our detection system works very well to detect known Android malware and even unknown Android malwarte. Also, we have publish to our core product to provide convenient usage scenarios for endusers or enterprise. The future work is reduce the complex task and train a high performance to faced the Android malware from a huge amount of computation burden. Furthermore, we will keep our research results on http://R2D2.TWMAN.ORG if there any update."}, {"heading": "ACKNOWLEDGEMENT", "text": "This work would not have been possible without the valuable dataset offered by Cheetah Mobile, Leopard Mobile and Android apps CM Security Master (CM Security)."}], "references": [{"title": "Evading Android Runtime Analysis via Sandbox Detection", "author": ["T. Vidas", "N. Christin"], "venue": "Proceedings of the 9th ACM symposium on Information, computer and communications security (ASIA CCS \u201914), Kyoto, Japan, June, 2014.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "DroidMiner: Automated Mining and Characterization of Fine-grained Malicious Behaviors in Android Applications", "author": ["C. Yang", "Z. Xu", "G. Gu", "V. Yegneswaran", "P. Porras"], "venue": "Proceedings of the 19th European Symposium on Research in Computer Security (ESORICS\u201914), Wroclaw, Poland, September, 2014.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code", "author": ["C. Lei", "C.S. Gates", "S. Luo", "L. Ninghui"], "venue": "IEEE Transactions on Dependable and Secure Computing, vol. 12, pp. 400-412, 2015.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Mastering the game of Go with deep neural networks and tree search", "author": ["D. Silver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre", "G. van den Driessche"], "venue": "Nature, vol. 529, pp. 484-489, 2016.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}, {"title": "TensorFlow: a system for large-scale machine learning", "author": ["M. Abadi", "P. Barham", "J. Chen", "Z. Chen", "A. Davis", "J. Dean"], "venue": "Proceedings of the 12th USENIX conference on Operating Systems Design and Implementation, Savannah, GA, USA, 2016.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "Deep learning", "author": ["Y. LeCun", "Y. Bengio", "G. Hinton"], "venue": "Nature, vol. 521, pp. 436-444, 2015.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep learning\" An MIT Press book", "author": ["Ian Goodfellow", "Y. Bengio", "Aaron Courville"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2016}, {"title": "ImageNet Classification with Deep Convolutional Neural Networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "Advances in Neural Information Processing Systems 25 (NIPS 2012), Harrahs and Harveys, Lake Tahoe, 2012, pp. 1097-1105.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Very Deep Convolutional Networks for Large- Scale Image Recognition", "author": ["A.Z.K. Simonyan"], "venue": "International Conference on Learning Representations 2015 (ICLR2015), San Diego, CA, 2015.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2015}, {"title": "Wojna.,\u201dRethinking the Inception Architecture for Computer Vision.\u201din", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens"], "venue": "Proc. of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), WA,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "Deep Residual Learning for Image Recognition", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Las Vegas, Nevada, 2016.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "DL4MD: A Deep Learning Framework for Intelligent Malware Detection", "author": ["William Hardy", "Lingwei Chen", "Shifu Hou", "Yanfang Ye", "Xin Li"], "venue": "International Conference on Data Mining", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2016}, {"title": "Deep neural network based malware detection using two dimensional binary program features", "author": ["J. Saxe", "K. Berlin"], "venue": "2015 10th International Conference on Malicious and Unwanted Software (MALWARE), Fajardo, 2015.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "Droid-Sec: deep learning in android malware detection", "author": ["Z. Yuan", "Y. Lu", "Z. Wang", "Y. Xue"], "venue": "Proceedings of the 2014 ACM conference on SIGCOMM, Chicago, Illinois, USA, 2014.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2014}, {"title": "N-Gram- Based Detection of New Malicious Code", "author": ["T. Abou-Assaleh", "N. Cercone", "V. Keselj", "R. Sweidan"], "venue": "Proceedings of the 28th Annual International Computer Software and Applications Conference- Workshops and Fast Abstracts-Volume 02, 2004.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2004}, {"title": "N-gram analysis for computer virus detection", "author": ["D.K.S. Reddy", "A.K. Pujari"], "venue": "Journal in Computer Virology, vol. 2, pp. 231-239, 2006.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2006}, {"title": "Unknown Malcode Detection Using OPCODE Representation", "author": ["R. Moskovitch", "C. Feher", "N. Tzachar", "E. Berger", "M. Gitelman", "S. Dolev"], "venue": "Intelligence and Security Informatics: First European Conference, EuroISI 2008, Esbjerg, Denmark, December 3-5, 2008. Proceedings, D. Ortiz-Arroyo, H. L. Larsen, D. D. Zeng, D. Hicks, and G. Wagner, Eds., ed Berlin, Heidelberg: Springer Berlin Heidelberg, pp. 204-215, 2008.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2008}, {"title": "Malware images: visualization and automatic classification", "author": ["L. Nataraj", "S. Karthikeyan", "G. Jacob", "B.S. Manjunath"], "venue": "Proceedings of the 8th International Symposium on Visualization for Cyber Security, Pittsburgh, Pennsylvania, USA, 2011.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2011}, {"title": "Character-level convolutional networks for text classification", "author": ["X. Zhang", "J. Zhao", "Y. LeCun"], "venue": "Proceedings of the 28th International Conference on Neural Information Processing Systems, Montreal, Canada, 2015.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep Android Malware Detection", "author": ["N. McLaughlin", "J.M. d. Rincon", "B. Kang", "S. Yerima", "P. Miller", "S. Sezer"], "venue": "Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy, Scottsdale, Arizona, USA, 2017.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2017}, {"title": "Inside of APK Protectors", "author": ["Bob Pan"], "venue": "RSA Conference 2015, [Online].Available : https : //www.rsaconference.com/writable/presentations/fileupload/spo\u2212 r09insideofapkprotectors.pdf.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Dex Education: Practicing Safe Dex", "author": ["Caleb Fenton", "Tim Strazzere"], "venue": "Black Hat USA 2012, [Online].Available : https : //www.blackhat.com/html/bh \u2212 us \u2212 12/bh \u2212 us \u2212 12 \u2212 briefings.html#Strazzere.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2012}, {"title": "Android Hacker Protection Level 0", "author": ["Tim Strazzere", "Jon Sawyer"], "venue": "Defcon 22, [Online].Available : https : //www.defcon.org/images/defcon \u2212 22/dc \u2212 22 \u2212 presentations/Strazzere \u2212 Sawyer/DEFCON \u2212 22 \u2212 Strazzere\u2212and\u2212Sawyer\u2212Android\u2212Hacker\u2212Protection\u2212 Level\u2212 UPDATED.pdf.", "citeRegEx": "25", "shortCiteRegEx": null, "year": 0}], "referenceMentions": [{"referenceID": 0, "context": "However antianalysis techniques such as obfuscation, encryption, and antidebugging are also proposed by hacker to hide the malicious behaviours, and escaping the detection [3].", "startOffset": 172, "endOffset": 175}, {"referenceID": 1, "context": "For example, DroidMiner [4] has a two-step flow-chart to represent the behaviours of Android apps and capture the execution logs behind the apps.", "startOffset": 24, "endOffset": 27}, {"referenceID": 2, "context": "[5] extracted features from Android API invocation as a reverse engineering approach.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "The recent success in deep learning research and development attracts people\u2019s attention [6].", "startOffset": 89, "endOffset": 92}, {"referenceID": 4, "context": "In 2015, Google released Tensorflow [7], a framework of realizing deep learning algorithm.", "startOffset": 36, "endOffset": 39}, {"referenceID": 5, "context": "Intuitively, input data are feeded to the first layer that generates different combinations of the input [8].", "startOffset": 105, "endOffset": 108}, {"referenceID": 6, "context": "After the above learning process via multiple layers, we can derive a better understanding and representation of distinguishable features, enhancing the detection accuracy [9].", "startOffset": 172, "endOffset": 175}, {"referenceID": 7, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 70, "endOffset": 74}, {"referenceID": 8, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 74, "endOffset": 78}, {"referenceID": 9, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 78, "endOffset": 82}, {"referenceID": 10, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 82, "endOffset": 86}, {"referenceID": 11, "context": "For example [14], propose a malware detection, which takes windows API invocation as the inputs of stack of Auto-Encoders and fine-tunes the model parameters [15].", "startOffset": 12, "endOffset": 16}, {"referenceID": 12, "context": "For example [14], propose a malware detection, which takes windows API invocation as the inputs of stack of Auto-Encoders and fine-tunes the model parameters [15].", "startOffset": 158, "endOffset": 162}, {"referenceID": 13, "context": "With two hidden layers, [16] uses static analysis to extract features such as required permission, sensitive API, and uses dynamic analysis to extract features such as actiondexclass-load, action-recrent and action-service start.", "startOffset": 24, "endOffset": 28}, {"referenceID": 14, "context": "For example, [17] and [18] first calculate the n-grams on the binary byte-code and then perform the malware detection based on k-nearest neighbor.", "startOffset": 13, "endOffset": 17}, {"referenceID": 15, "context": "For example, [17] and [18] first calculate the n-grams on the binary byte-code and then perform the malware detection based on k-nearest neighbor.", "startOffset": 22, "endOffset": 26}, {"referenceID": 16, "context": "[19] proposes to perform analysis on op-code of the reverse-engineering.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "For example, [20] proposes to first transform binary byte-code into grayscale image and the apply pattern recognition on the image.", "startOffset": 13, "endOffset": 17}, {"referenceID": 18, "context": "required, implying the impracticality [21].", "startOffset": 38, "endOffset": 42}, {"referenceID": 19, "context": "Recently, [22] also proposes a deep learning-based malware detection, where the op-code", "startOffset": 10, "endOffset": 14}, {"referenceID": 20, "context": "4 [23], [24], [25].", "startOffset": 2, "endOffset": 6}, {"referenceID": 21, "context": "4 [23], [24], [25].", "startOffset": 8, "endOffset": 12}, {"referenceID": 22, "context": "4 [23], [24], [25].", "startOffset": 14, "endOffset": 18}], "year": 2017, "abstractText": "Machine Learning (ML) has found it particularly useful in malware detection. However, as the malware evolves very fast, the stability of the feature extracted from malware serves as a critical issue in malware detection. The recent success of deep learning in image recognition, natural language processing, and machine translation indicates a potential solution for stabilizing the malware detection effectiveness. In this research, we haven\u2019t extract selected any features (e.g., the control-flow of op-code, classes, methods of functions and the timing they are invoked etc.) from Android apps. We develop our own method for translating Android apps into rgb color code and transform them to a fixed-sized encoded image. After that, the encoded image is fed to convolutional neural network (CNN) for automatic feature extraction and learning, reducing the expert\u2019s intervention. Deep learning usually involves a large number of parameters that cannot be learned from only a small dataset. In this way, we currently have collected 1500k Android apps samples, have run our system over these 800k malware samples (benign and malicious samples are roughly equal-sized), and also through our back-end (60 million monthly active users and 10k new malware samples per day), we can effectively detect the malware. We believe that our methodology and the corresponding use of deep learning malware classification can overcome the weakness, and computational cost of the common static/dynamic analysis process or machine learning-based of Android malware detection approach.", "creator": "LaTeX with hyperref package"}}}