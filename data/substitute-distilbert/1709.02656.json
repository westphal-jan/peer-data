{"id": "1709.02656", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Sep-2017", "title": "Deep Packet: A Novel Approach For Encrypted Traffic Classification Using Deep Learning", "abstract": "internet traffic classification has become more important with rapid application of current internet network and monitoring applications. there ve accompanied numerous studies on this basis using previously led to many different approaches. most of these approaches exploit morphological features extracted by an architecture in order to classify network traffic. in contrast, in short study, we demonstrate a deep learning model approach which integrate both feature extraction and classification phases utilizing one system. our proposed scheme, see \" deep packet, \" can capture both traffic categorization in which the network traffic is categorize into defined classes ( e. g. netflix, p2p, etc. ) and user identification in which one identify end - user applications ( e. g., owl, skype, etc. ). contrary to most of the current methods, deep packet can identify encrypted traffic and also distinguishes between portals towards non - malicious network traffic. after initial pre - processing controls on data, profiles are fed to deep packet topology that embeds stacked autoencoder and shared neural network in order to classify link traffic. deep packet with cnn as its classification model achieved $ f _ { 1 } $ score of $ 0. 95 $ in application identification and it also developed $ f _ { 1 } $ score ( $ 0. 97 $ in traffic categorization task. to the best of our knowledge, deep data outperforms all of the classification and categorization methods on unb, vpn - nonvpn dataset.", "histories": [["v1", "Fri, 8 Sep 2017 11:40:37 GMT  (848kb,D)", "http://arxiv.org/abs/1709.02656v1", null], ["v2", "Sun, 24 Sep 2017 12:13:18 GMT  (218kb,D)", "http://arxiv.org/abs/1709.02656v2", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CR cs.NI", "authors": ["mohammad lotfollahi", "ramin shirali", "mahdi jafari siavoshani", "mohammdsadegh saberian"], "accepted": false, "id": "1709.02656"}, "pdf": {"name": "1709.02656.pdf", "metadata": {"source": "CRF", "title": "Deep Packet: A Novel Approach For Encrypted Traffic Classification Using Deep Learning", "authors": ["Mohammad Lotfollahi", "Ramin Shirali", "Mahdi Jafari Siavoshani", "Mohammdsadegh Saberian"], "emails": [], "sections": [{"heading": null, "text": "Internet traffic classification has become more important with rapid growth of current Internet network and online applications. There have been numerous studies on this topic which have led to many different approaches. Most of these approaches exploit predefined features extracted by an expert in order to classify network traffic. In contrast, in this study, we propose a deep learning based approach which integrate both feature extraction and classification phases into one system. Our proposed scheme, called \u201cDeep Packet,\u201d can handle both traffic categorization in which the network traffic is categorize into major classes (e.g., FTP, P2P, etc.) and application identification in which one identify end-user applications (e.g., BitTorrent, Skype, etc.). Contrary to most of the current methods, Deep Packet can identify encrypted traffic and also distinguishes between VPN and non-VPN network traffic. After initial pre-processing phase on data, packets are fed to Deep Packet framework that embeds stacked autoencoder and convolution neural network in order to classify network traffic. Deep packet with CNN as its classification model achieved F1 score of 0.95 in application identification and it also accomplished F1 score of 0.97 in traffic categorization task. To the best of our knowledge, Deep Packet outperforms all of the classification and categorization methods on UNB ISCX VPN-nonVPN dataset.\nKeywords: Application Identification, Traffic characterization, Deep Learning, Convolutional Neural Networks, Stacked autoencoder, Deep Packet."}, {"heading": "1. Introduction", "text": "Network traffic classification is an important task in modern communication networks [1]. Due the rapid growth of high throughput network traffic demands, in order to properly manage network resources, it is vital to recognize different types of applications utilizing network resources. Consequently, accurate traffic classification and identification has become one of the prerequisites for advanced network management tasks such as providing appropriate Quality-of-Service (QoS), pricing, anomaly detection, etc. Traffic classification, and more specifically application identification, have attracted a lot of interests in both academia and industrial activities related to network management (e.g., see [2], [3], [4] and the references therein).\nAs an example of why network traffic identification is important, one can think of the asymmetric architecture of today\u2019s network access links, which has been designed based on the assumption that clients download more than what they upload. However, the pervasiveness of symmetricdemand applications (such as peer-to-peer (P2P) applications, voice over IP (VoIP), video call, etc.) has changed the clients\u2019 demands to deviate from the aforementioned assumption. Thus, in order to provide a satisfactory experience for the clients, extra application-level knowledge is required to allocate adequate resources to such applications.\nEmergence of new applications as well as interactions between various components on the Internet, have dramatically increased the complexity and diversity of this network which makes the traffic classification a difficult problem per se. In the following, we discuss in details some of the most important challenges of network traffic classification.\nFirst, according to [5, 6], only 30% to 70% of the current generated traffic can be identified based on the connection\u2019s port numbers. In the classical approach, the connection\u2019s port numbers are compared to the list of standard ports proposed by the International Assigned Number Authority (IANA) for each application. However, many of the recent applications such as P2P applications, video call, etc., may use a port number initially assigned to a different protocol. For instance, using the standard web port 80 and secure shell (SSH) port 22 are very popular among such applications. This deviation in port assignment from IANA proposed list, leads to a poor performance of traditional port-based traffic classification methods.\nFurthermore, the increasing demand for user\u2019s privacy and data encryption has tremendously raised the amount of encrypted traffic in today\u2019s Internet [4]. Encryption procedure turns the original data into a pseudo-random-like format in order to make it hard to decrypt. This causes the encrypted data scarcely contain any discriminative pat-\nPreprint submitted to Elsevier September 11, 2017\nar X\niv :1\n70 9.\n02 65\n6v 1\n[ cs\n.L G\n] 8\nS ep\n2 01\n7\nterns to identify network traffic. Therefore, accurate classification of encrypted traffic has become a challenge in modern network [2].\nIt is also worth mentioning that many of the proposed network traffic classification approaches, such as payload inspection as well as machine learning and statistical methods, require patterns or features to be extracted by experts. This process is prone to error, time consuming and costly.\nFinally, many of the Internet service providers (ISPs) block P2P file sharing applications because of their high bandwidth consumption and copyright issues [7]. These applications use protocol embedding to bypass traffic control systems [8]. These applications embed their content inside well-known protocols packets, e.g., Hypertext Transfer Protocol (HTTP), which are allowed to pass any network to escape this control procedures. The identification of these kind of applications is one of the important challenges in traffic classification task.\nThere have been abundant studies on the network traffic classification subject [9, 10, 5]. However, most of them have focused on classifying a protocol family, also known as traffic characterization (e.g., streaming, chat, P2P, etc.), instead of identifying a single application, which is known as application identification (e.g., Spotify, Hangouts, BitTorrent, etc.) [11]. In contrast, this work proposes a method based on the ideas recently developed in the machine learning community, namely, deep learning, [12, 13], to both characterize and identify the network traffic. The benefits of our proposed method which make it superior to other classification schemes are stated as follows:\n\u2022 In the proposed method, there is no need for an expert to extract features related to network traffic. In the light of this approach, the cumbersome step of finding and extracting distinguishing features has been omitted.\n\u2022 Our proposed method can identify traffic in both granular level (application identification and traffic categorization) with sate-of-the-art results compared to the works conducted on similar dataset [10, 14, 15, 16].\n\u2022 Our approach can accurately classify one of the hardest class of applications, known to be P2P [11]. These kind of applications routinely use advanced port obfuscation techniques, embedding their information in well-known protocols\u2019 packets and using random ports in order to circumvent ISPs\u2019 controlling processes."}, {"heading": "1.1. Related Works", "text": "In this section, we provide an overview of the most important Internet traffic classification methods. In particular, we can categorize these approaches into four main category as follows: (i) port-based, (ii) graphical techniques,\n(iii) payload inspection, and (iv) statistical and machine learning. Here is a brief review of the most important and recent studies regarding each of the aforementioned approaches.\nPort-based approach: Traffic identification via port number is the oldest and the most well-known method for this task [2]. Port-based classifiers use the information in the TCP/UDP headers of the packets to extract the port number which is assumed to be associated with a particular application. After the extraction of the port number, it is compared with the assigned IANA TCP/UDP port numbers for traffic identification. The extraction is an easy procedure and port numbers will not be affected by encryption schemes. Because of the fast extraction process, this method is often used in firewall and access control list (ACL) [17]. Port-based classification is known to be among the simplest and fastest method for network traffic identification. However, the pervasiveness of port obfuscation, network address translation (NAT), port forwarding, protocol embedding ,and random ports assignments have significantly reduced the accuracy of this approach. According to [5, 6] only 30% to 70% of the current Internet traffic can be classified using port-based classification methods. Because of the aforementioned reasons, more complex traffic classification methods are needed to identify modern network traffic.\nPayload Inspection Techniques: These techniques are based on the analysis of information in the application layer payload of packets [11]. Most of the payload inspection methods (also known as deep packet inspection (DPI)) exploit predefined patterns like regular expressions as signatures for each protocol (e.g., see [15] and [18]). The derived pattern is then used to distinguish protocols form each other. The need for updating patterns when a new protocol is released and user privacy issues are among the two most important weaknesses of this approach. Sherry et al. [19] proposed a new DPI system that can inspect encrypted payload without decryption, thus solved the user privacy issue, but it can only process HTTPS traffic.\nGraphical Techniques: These techniques employ the interaction graphs of the hosts who are communicating with each other and analyze such graphs with graph theory techniques. The oldest graphical techniques are called Graphlets [9]. The Graphlets are graphs modeling the interactions among hosts at the application level layer. Every application has its own graphlets which are almost unique for that particular application [11]. Social network graphs derived from the host interactions are another kind of graphical techniques used in order to classify traffic. Iliofotou et al., [20], proposed a traffic dispersion graph (TDG) based method called \u201cGraption\u201d to classify P2P applications. They achieved 95% of accuracy covering Gnutella, e-Donkey, FastTrack, Soribada, MP2P, and BitTorrent P2P applications. Motif based classification is also another kind of Graphlet methods. Allan et al., [21], proposed using binary metric which measures weather the host is involved in using an application or not. The authors\nachieved 85% accuracy classifying hosts over a protocol set including AIM, DNS, HTTP, MSDS, NETBIOS, SSH, and Kazaa.\nStatistical and machine learning approach: The statistical approach comprises of the following two main methods:\n\u2022 Simple and complex statistical methods: These methods have a biased assumption that the underlying traffic for each application have some statistical features which is almost unique for each application. Each statistical method uses its own functions and statistics. Crotti et al. [22] proposed protocol fingerprints based on the probability density function (PDF) of packets inter-arrival time and normalized thresholds. They achieved up to 91% accuracy for a group of protocols such as HTTP, Post Office Protocol 3 (POP3) and Simple Mail Transfer Protocol (SMTP). In a similar work, Wang et al. [23] have considered PDF of the packet size. Their scheme was able to identify a broader range of protocols including file transfer protocol (FTP), Internet Message Access Protocol (IMAP), SSH, and TELNET with accuracy up to 87%.\n\u2022 Machine learning based methods: A vast number of machine learning approaches have been published to classify traffic. Auld et al.[16] proposed a Bayesian neural network that was trained to classify most wellknown P2P protocols including Kazaa, BitTorrent, GnuTella, and achieved 99% accuracy. Moore et al. [24] achieved 96% of accuracy on the same set of applications using a Naive Bayes classifier and the kernel density estimator. Artificial neural network (ANN) approaches were proposed for traffic identification (e.g., see [25] and [26]). Moreover, it was shown in [26] that the ANN approach can outperform Naive Bayes methods. Two of the most important papers that have been published on \u201cISCX VPN-non VPN traffic\u201d dataset are based on machin learning methods. Gil et al. [10] used time related features like the duration of the flow, flow bytes per second, forward and backward inter-arrival time and etc. to characterize the network traffic using knearest neighbor (k-NN) and C4.5 decision tree algorithms. They achieved approximately 91\u221292% recall characterizing six major classes of traffic including Web browsing, email, chat, streaming, file transfer and VoIP using C4.5 algorithm. They also achieved approximately 88% recall using C4.5 algorithm on same dataset which is tunneled through VPN. Yamansavascilar et al. [14] manually selected 111 flow features described in [27] and achieved 93.94% of accuracy for 14 class of applications using k-NN algorithm.\nTo the best of our knowledge, prior to our work, only one study based on deep learning ideas has been re-\nported by Wangc [28]. They exploited stacked autoencoders (SAE) to classify some network traffic for a large family of protocols like HTTP, SMTP and etc. However, in their report, they did not mention to the dataset they used. Moreover, the methodology of their scheme, the details of their implementation, and the proper report of their result is missing.\nThe rest of paper is organized as follows. In Section 2, we present some essential background on machine learning which are necessary to our work. In Section 3, our methodology is presented. The results of our proposed method on network traffic identification is described in Section 4. In Section 5, we provide further discussion on experimental results. Finally, we conclude the paper in Section 6."}, {"heading": "2. Background", "text": "In the following, we provide the background necessary to understand our proposed method for classification of network traffic using deep learning."}, {"heading": "2.1. Neural Networks", "text": "Neural networks (NNs) are computing systems made up of a number of simple, highly interconnected processing elements, which process information by their dynamic state response to external inputs [29]. In practice, these networks are typically constructed from a huge number of building blocks called neuron where they are connected via links to each other. These links are called connections and to each connection a weight number is associated. During the training procedure, the NN is fed with possibly a huge number of data samples. The widely used learning algorithm used to train such networks (which is called backpropagation) adjusts the weights in order to achieve the desired output from the NN. It is known that with more data samples, the supervuied learning models including NNs can become better and more powerful in doing the classification task [30]. Intuitively, this happens because by observing more samples the NN can better approximate the underlying distribution governing the data. Hence, it is advised to use NN framework when there exist sufficient data to train and test the network."}, {"heading": "2.2. Deep Learning", "text": "The deep learning framework can be considered as a special kind of NNs with many (hidden) layers. Nowadays, with rapid growth of computational power and the availability of graphical processing units (GPUs), training deep NNs have become plausible. Therefore, the researchers from different scientific fields consider using deep learning algorithms in their respective area of research. It is worth mentioning that deep learning has achieved stateof-the-art results in many fields such as speech recognition [31], machine vision [32], and natural language processing [33]."}, {"heading": "2.3. Autoencoder", "text": "The autoencoder NN is an unsupervised learning framework that uses backpropagation to reconstruct the input at the output while minimizing the reconstruction error (i.e., according to some criteria). Suppose we have a training set {x1, x2, . . . , xn} where for each training data we have xi \u2208 Rn. Then, the autoencoder objective is to set yi = xi for i \u2208 [1 : n]. Considering this objective function, the autoencoder tries to learn a compressed representation of the dataset, i.e., it approximately learns the identity function, FW,b(x) ' x, where W and b are the whole network weights and biases vectors. The first half of autoencoder\nwhich reduces the dimension of data is called encoder. On the other hand, the part of autoencoder which tries to reconstruct the data from the low-dimensional representation made by the encoder is called decoder. Fig. 1 shows a typical autoencoder with n inputs and outputs.\nIn practice, to obtain a better performance, a more complex architecture and training procedure, called stacked autoencoder (SAE), is proposed [34]. This scheme suggests to stack up several autoencoders in a manner that output of each one is the input of the successive layer which itself is an autoencoder.\nThe training procedure of a stacked autoencoder is done in a greedy layer-wise fashion [35]. First, this method trains each layer of network while freezing the weights of other layers. After training all the layers, in order to have more accurate results, fine-tuning is applied. At the finetuning phase, the backpropagation algorithm is used to adjust all layers\u2019 weights. Moreover, for classification task, an extra soft-max layer can be applied as the final layer.\nFig. 2, depicts the training procedure of a stacked autoencoder."}, {"heading": "2.4. Convolutional Neural Network", "text": "The convolutional neural networks (CNNs) are another deep learning model in which feature extraction from the input data is done using layers comprised of convolutional functions. The structure of convolutional networks is inspired by visual mechanism of living organisms [36]. Similar to other kinds of deep learning models, feature extraction plays an important role in convolutional networks. Features extracted in shallower layers of the convolutional network will be fed to the successive convolutional layers in order to extract more abstract features.\nCNNs exploit neurons with local connections to the input which means every neuron is only connected to to a limited numbers of adjacent elements in the input. This feature is also inspired by visual system of animals. In other words, in a CNN, neurons in layer l are connected to a limited number of input neurons in layer l \u2212 1. The subset of neurons in layer l \u2212 1 which act as the input for a neuron in the successive layer are called the receptive field of that particular neuron [36]. It is important to mention that each neuron is unresponsive to variations outside of its receptive field. Another important component of a CNN is pooling mechanism. It is common to periodically insert a pooling layer in-between successive convolutional layers. The function of such layers is to progressively reduce the spatial size of the data representation in order to reduce the amount of parameters and computations in the network.\nCNNs have been applied to different fields including natural language processing [37], computational biology [38], and machine vision [32]. One of the most interesting application of CNNs is in face recognition[39]. In face recognition task, consecutive convolutional layers are used in order to extract features from each picture. The extracted features in shallow layers are simple like edges and\ncurves. Features in deep layers of networks are more abstract than the ones in shallow layers. It is worth to mention that visualizing the extracted features in the middle layers of the network are not always meaningful like face recognition task. For example in one-dimensional CNN which we used to classify traffic network, the feature vectors are just some real numbers which make no sense at all."}, {"heading": "3. Methodology", "text": "In this work, we developed a framework that comprises of two deep learning methods, namely, convolutional NN and stacked autoencoder NN, for both application identification and traffic characterization tasks. Prior to training the NNs, we have to prepare the network traffic data so that it can be fed into NNs properly. To this end, we preform a pre-processing phase on the dataset. Fig. 3 displays the general scheme for proposed method. At test phase, after loading packet capture (pcap) files, user selects the classification task which is required, namely application identification or traffic categorization. Afterwards, appropriate type of pre-trained neural network selection is done by user to do required task. The dataset, implementation and design details of the pre-processing phase and the architecture of proposed NNs will be explained in the following."}, {"heading": "3.1. Dataset", "text": "For this work, we use \u201cISCX VPN-nonVPN traffic dataset\u201d [10], that consists of captured traffic of different applications in pcap format files. In this dataset, the captured packets are separated into different pcap files labeled according to the application produced the packets (e.g., Skype) and the particular activity the application was engaged during the capture session (e.g., voice call, chat, file transfer, or video call). For more details on the captured traffic and the traffic generation process, refer to [10].\nThe dataset also contains packets captured over Virtual Private Network (VPN) sessions. A VPN is a private overlay network among distributed sites which operates by tunneling traffic over public communication networks (e.g., the Internet). Tunneling IP packets, guaranteeing secure remote access to servers, is the most prominent aspect of VPNs [40]. Similar to regular (non-VPN) traffic, VPN traffic is captured for different applications, such as Skype, while performing different activities, like voice call, video call, file transfer and chat.\nMoreover, this dataset includes captured traffic of Tor software. This traffic is presumably is generated while using Tor browser and it has labels like Twitter, Google, Facebook, etc. Tor is a free, open source software developed for anonymous communications. Tor forwards users traffic through its own free, worldwide, overlay network which consists of a volunteer-operated servers. Tor was proposed to protect users against Internet surveillance\nknown as \u201ctraffic analysis.\u201d In order to create a private network pathway, Tor builds a circuit of encrypted connections through relays on the network in a way that no individual relay ever knows the complete path that a data packet has taken [41]."}, {"heading": "3.2. Pre-processing", "text": "The dataset was captured at data-link layer, thus it includes the Ethernet header. The data-link header contains information regarding the physical link, such as Media Access Control (MAC) address, which are essential for forward the frames in network, but it is uninformative considering application identification or traffic characterization. Hence, at the pre-processing phase, the Ethernet header is removed first.\nTransport layer segments, specifically Transmission Control Protocol (TCP) or User Datagram Protocol (UDP), vary in header length. The former typically bears a header of 20 bytes length while the latter has a 8 bytes header. To make the transport layer segments uniform, we inject zeros to the end of UDP segment\u2019s headers to make them equal with TCP headers in length. The remaining packets are then transformed from bits to bytes, as many fields in the layers\u2019 headers are made up 4 or 2 bytes. It also helps to reduce in input size for the NNs.\nFig. 4 illustrates the packet length for the dataset\u2019s packets. As the histogram shows, packet length varies a lot thorough the dataset, while employing NNs necessitates using a fixed-size input. Hence, truncation at a fixed length and zero-padding is required inevitably. In order too find the fixed length for truncation, we inspected the packets\u2019 statistics. We observed that approximately 96% of packets have a length of less than 1480 bytes. This is not far from our expectation, as most of the computer networks are constrained by Maximum Transmission Unit (MTU) size of 1500 bytes. We keep the IP header and the first 1480 bytes of each IP packet which results in a 1500 bytes vector as input for our proposed NNs. Needless to say, packets with IP payload less than 1480 bytes, are zero-padded at the end. For better performance, all the packet bytes are divided to 255, maximum value for a byte, so that all the input values are in [0\u22121] range. All of the these pre-processing steps take place when user loads a pcap file into Deep Packet toolkit."}, {"heading": "3.2.1. Labeling Dataset", "text": "As mentioned before at 3.1, the dataset\u2019s pcap files are labeled according to the applications and activities they were engaged to. However for application identification and traffic characterization tasks, we need to redefine the labels, with respect to each task. For application identification all pcap files labeled as a particular application disregarding the activities and VPN or non-VPN condition, are aggregated into a single file. This leads to 17 distinct labels shown at Table 2a. As for traffic characterization, we aggregated the captured traffic of different applications involved in the same activity into a single pcap\nfile, ignoring the VPN or non-VPN condition same as the application identification labeling procedure. This leads to a 12-classes dataset, as shown at Table 2b.\nBy observing Table 1, one would instantly notice that the dataset is significantly imbalanced and the number of samples vary remarkably among different classes. Sampling, explained at [42], is a simple yet powerful technique to overcome this problem. Using under-sampling method, we randomly remove the major classes\u2019 samples (classes having more samples) until the classes are fairly balanced."}, {"heading": "3.3. Architectures", "text": "The proposed SAE architecture consists of five fullyconnected layers, stacked on top of each other which made up of 400, 300, 200, 100, and 50 neurons, respectively. In order to prevent over-fitting problem, after each layer the dropout technique with 25% dropout probability is applied [43]. In this technique, during the training phase, some of the neurons are set to zero randomly. Hence, at each iteration, there is a random set of active neurons.\nFor the application identification and traffic categorization tasks, at the final layer of the proposed SAE, a softmax classifier with 17 and 12 neurons is added respectively. Fig. 5a illustrates the architecture of the proposed SAE in a nutshell.\nThe second proposed scheme, based on one-dimensional CNN is briefly depicted at Fig. 5b. As shown in the figure, the proposed CNN consists of a one dimensional convolu-\ntional layer with 200 filters with kernel size of 5 which is applied on the byte-vactorized packet as input. This layer is followed by another one dimensional convolutional layer with 80 filters of kernel size 4. Afterwards, a one dimensional average pooling layer with kernel size of 2 is applied which is followed by a 25% dropout layer. Afterwards, the output of previous layer is fed into a fully-connected network consisting of seven layers. Finally, a softmax classifier is applied for the classification task, similar to SAE architecture. For a detailed description of one-dimensional CNN refer to Appendix ."}, {"heading": "4. Experimental Results", "text": "To implement our proposed NNs, we have used Keras library [44] using Tensorflow [45] backend. Each of the proposed models was trained and evaluated against the independent test set that was derived from dataset. We randomly split the dataset into three separate sets: first one which includes 60% of samples is used for training and adjusting weights and biases; second one containing 20% of samples is used for validation during the training phase; finally the third set made up of 20% of data points is used for testing the model. In order to avoid over-fitting problem, we have used early stopping technique. It stops the training procedure, once the loss function value for the validation set remains stationary for several epochs, thus prevent the network to over-fit on the train samples. The procedure of training and testing each network was performed 5 times, with different train, test and validation sets.\nFor training SAE, first each layer was trained in greedy layer-wise fashion, described at Section 2.3, using Adam [46] optimizer and mean squared error as the loss function for 200 epochs. At the fine-tuning phase categorical cross entropy loss function was employed and the network was trained for another 200 epochs. It is worth to mention\nthat all layers exploit Rectified Linear Unit (ReLU) as the activation function, except for the final softmax classifier layer. As for implementing one dimensional CNN, categorical cross entropy and Adam were used for loss function and optimizer respectively. The network was trained for 500 epochs, with batch size of 1000 packets.\nTo evaluate the performance of our proposed methods we have used Recall (Rc), Precision (Pr) and F1 Score (F1) metrics. The formulas for aforementioned metrics are stated as follows:\nRc = TP\nTP + FP , Pr =\nTP\nTP + FN , F1 = 2 \u00b7 Rc \u00b7 Pr Rc + Pr (1)\nHere TP, FP and FN stands for True Positive, False Positive and False negative, respectively.\nTable 2 shows the detailed performance of both SAE and CNN on the application identification task on the test set. The average F1 score of 0.95 for one-dimensional CNN and 0.95 for SAE shows that our networks have completely extracted and learned the discriminating features from the training set and can successfully distinguish each application. One can infer the same from the row-normalized confusion matrices depicted at Fig. 9 in form of heatmaps. The dark color of the elements on the main diagonal suggests that our networks can classify each application with minor confusion. However there are lower F1 scores in both networks for AIM, ICQ and email applications. This is due to the fact that those classes possess fewer samples, hence the NNs were not able to classify them as accurately as the others.\nOn the traffic characterization task, our CNN has achieved F1 score of 0.97, while the proposed SAE has reached 0.97,\nimplying that both networks are capable of accurately classify packets. Table 4a summaries the proposed methods performance on the test set.\nAs mentioned in Section 1.1, [38] tried to characterize network traffic using time-related features handcrafted from traffic flows. Yamansavascilar et al. [14] exploiteds time-related features to identify end-user application. Their best results can be found at Table 4. It can be observed that Deep Packet has outperformed the aforementioned works, in both application identification and traffic characterization."}, {"heading": "5. Discussion", "text": "By carefully observing the confusion matrices at Fig. 9, one would definitely notice some interesting confusions\n(e.g., ACQ and AIM). Hierarchical clustering further demonstrates the similarities captured by Deep Packet. Clustering on row-normalized confusion matrix for application identification with one-dimensional CNN (Fig. 6a), using \u201cEuclidean\u201d as the distance metric and Ward.D as the clustering method, uncovers similarities among applications in terms of their propensities to be assigned to the 17 application classes. Application groupings revealed by Deep Packet, generally agrees with the applications similarities in real world. Hierarchical clustering divided the applications into 7 groups. Interestingly, these groups are to some extent similar to groups in traffic characterization task. One would notice that Vimeo, Netflix, YouTube and Spotify which are bundled together, are all streaming applications. Streaming applications use network to transfer audio and video files. There is a cluster including ICM, AIM and Gmail. AIM and ICQ are used for online chatting and Gmail offers a service for online chatting. Another interesting observation is that Skype, Facebook and Hangouts are all grouped in a cluster together. Though these applications do not seem much relevant, this grouping can be justified. The dataset contained traffic for aforementioned applications in 3 forms: voice call, video call and chat. Thus the network has found these application similar in terms of their usage. FTPS (File Transfer Protocol over SSL) and SFTP (File Transfer Protocol over SSH) which are both used for transferring files between two remote systems securely, are clustered together. Interestingly, SCP (Secure Copy) has formed its own cluster despite is also used for remote file transferring. SCP uses SSH protocol for transferring file, while SFTP and FTPS use FTP. Presumably our network has learned this subtle difference and separated them. Tor and Torrent have their own clusters which is sensible due to their apparent differences with other applications. Yet this clustering is not flawless. Clustering Skype, Facebook and Hangouts along with Email and VoipBuster is not correct. VoipBuster is an application which offers voice communications over In-\nternet infrastructure. Thus applications in this cluster do not seem much similar in terms of their usage and this grouping is not precise. The same procedure was also performed on confusion matrix for SAE on application identification task (Fig. 6b), and the outcome is pretty much the same. It can be found at Appendix .\nMost of the applications exploit encryption in order to maintain clients\u2019 privacy. The dataset packets are believed to be encrypted. One might wonder how it is possible for Deep Packet to classify such packets. Unlike DPI methods Deep Packet does not inspect the packets for keywords. In contrast, it attempts to learn features in traffic for each application. Consequently it needs not to decrypt the packets to classify them. Ideal encryption technique causes the data to bear most possible entropy [47]. In other words, it produces pattern-less data that theoretically can not be discernible form on another. However due to the fact that all encryption schemes use pseudo-random generators, this hypothesis is not always true in practice. Each application employs its own ciphering scheme for packets encryption. These schemes utilize pseudo-random algorithms which bear distinct patterns. These patterns can be used to distinguish applications from one another. Our network attempts to extract those discriminative patterns\nand learn them. Hence, it is able to classify encrypted packets.\nIt is noticeable from Figs. 6a and 6b and Table 2 that Tor traffic was successfully classified. To further investigate this, we conducted another test in which we trained and tested our network with a dataset containing only Tor traffic. Detailed result can be found at Table 5, but it is obvious that our network was unable to classify Tors traffic accurately.\nThis is not far from what we expected. Tor encrypts its packets, before channeling them. As discussed before, Deep Packet presumably learns pseudo-random patterns used in encryption scheme of each application. At this experiment traffic was tunneled through Tor, hence they all bear the same encryption scheme. Consequently our neural network was not able to tell them apart."}, {"heading": "6. Conclusion", "text": "In this paper, we presented Deep Packet a framework that automatically extracts features from network traffic using deep learning algorithms in order to classify traffic. To the best of our knowledge, Deep Packet is the first traffic classification system using Deep learning algorithms, namely, SAE and one-dimensional CNN that can handle both application identification and traffic categorization tasks. Our results showed that Deep Packet outperforms all of the similar works on \u201cISCX VPN-nonVPN traffic dataset\u201d both in traffic classification and traffic categorization to the date. Moreover, with state-of-the-art results achieved by Deep Packet, we envisage that Deep Packet is the first step toward a general trend of using deep learning algorithms in traffic classification tasks. Deep Packet can be modified in order to handle more complex tasks\nlike multi-channel classification, accurate classification of Tor traffic, etc. Finally, the automatic feature extraction procedure from network traffic can save the cost for using experts in order to identify and extract handcrafted features from the traffic which eventually leads to more accurate traffic identification."}, {"heading": "7. Refrences", "text": ""}, {"heading": "8. Appendix", "text": ""}, {"heading": "8.1. 1D CNN Architecture", "text": "The architecture of one-dimensional CNN is shown at Fig. 8. It is made up of a one-dimensional convolutional layer with 200 filters of size 5. The filters are convolved with the input vector. The output of this layer would be a two-dimensional tensor with size of 1500\u00d7200. This tensor is then fed into the next convolutional layer which has 80 filters each having a 4 \u00d7 200 shape. Afterwards, a onedimensional average pooling layer with pooling region of 2 is applied. Dropout technique with probability of 25% is used. Then the output which is a tensor with size of 2\u00d780 is squashed (flattened) into a one-dimensional vector. This vector is then fed into several fully-connected layers. This fully-connected network consists of seven layers with 600, 500, 400, 300, 200, 100 and 50 neurons respectively. A softmax classifier is employed for performing classification tasks."}, {"heading": "8.2. Clustering", "text": ""}, {"heading": "8.2.1. Traffic Characterization Task", "text": "We did a hierarchical clustering on row-normalized confusion matrices for traffic characterization, shown in Figs. 6c and 6d. The clustering were performed using \u201cEuclidean\u201d as the distance metric and Ward.D as the clustering method. Interestingly two groups revealed by clustering divides the traffic to VPN and non-VPN clusters. All the VPN traffics are bundled together in one cluster, while all of non-VPNs are grouped together."}, {"heading": "8.2.2. Application Identification Task", "text": "Hierarchical clustering on Fig. 6b, using \u201cEuclidean\u201d as the distance metric and Ward.D as the clustering method, uncovers similarities among applications captured by the SAE. Application groupings are generally sensible with respect to applications similarities in real world. The clustering is depicted at Fig. 10."}], "references": [{"title": "Comparison of machine-learning algorithms for classification of vpn network traffic flow using time-related features", "author": ["S. Bagui", "X. Fang", "E. Kalaimannan", "S.C. Bagui", "J. Sheehan"], "venue": "Journal of Cyber Security Technology ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2017}, {"title": "A survey of payload-based traffic classification approaches", "author": ["M. Finsterbusch", "C. Richter", "E. Rocha", "J.-A. Muller", "K. Hanssgen"], "venue": "IEEE Communications Surveys & Tutorials 16 (2) ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "A survey of methods for encrypted traffic classification and analysis", "author": ["P. Velan", "M. \u010cerm\u00e1k", "P. \u010celeda", "M. Dra\u0161ar"], "venue": "International Journal of Network Management 25 (5) ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Toward the accurate identification of network applications", "author": ["A.W. Moore", "K. Papagiannaki"], "venue": "in: PAM, Vol. 5, Springer", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "A longitudinal study of p2p traffic classification", "author": ["A. Madhukar", "C. Williamson"], "venue": "in: Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, 2006. MASCOTS 2006. 14th IEEE International Symposium on, IEEE", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2006}, {"title": "Deepflow: Hiding anonymous communication traffic in p2p streaming networks", "author": ["J. Lv", "C. Zhu", "S. Tang", "C. Yang"], "venue": "Wuhan University Journal of Natural Sciences 19 (5) ", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Can encrypted traffic be identified without port numbers", "author": ["R. Alshammari", "A.N. Zincir-Heywood"], "venue": "ip addresses and payload inspection?, Computer networks 55 (6) ", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "Blinc: multilevel traffic classification in the dark", "author": ["T. Karagiannis", "K. Papagiannaki", "M. Faloutsos"], "venue": "in: ACM SIGCOMM Computer Communication Review, Vol. 35, ACM", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2005}, {"title": "Characterization of encrypted and vpn traffic using time-related features", "author": ["G.D. Gil", "A.H. Lashkari", "M. Mamun", "A.A. Ghorbani"], "venue": "in: Proceedings of the 2nd International Conference on Information Systems Security and Privacy ", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2016}, {"title": "A multilevel taxonomy and requirements for an optimal traffic-classification model", "author": ["J. Khalife", "A. Hajjar", "J. Diaz-Verdejo"], "venue": "International Journal of Network Management 24 (2) ", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Learning deep architectures for ai", "author": ["Y. Bengio"], "venue": "Found. Trends Mach. Learn. 2 (1) ", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "Deep learning", "author": ["Y. LeCun", "Y. Bengio", "G. Hinton"], "venue": "Nature 521 (7553) ", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Application identification via network traffic classification", "author": ["B. Yamansavascilar", "M.A. Guvensan", "A.G. Yavuz", "M.E. Karsligil"], "venue": "in: Computing, Networking and Communications (ICNC), 2017 International Conference on, IEEE", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2017}, {"title": "Cute: Traffic classification using terms", "author": ["S.H. Yeganeh", "M. Eftekhar", "Y. Ganjali", "R. Keralapura", "A. Nucci"], "venue": "in: Computer Communications and Networks (ICCCN), 2012 21st International Conference on, IEEE", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2012}, {"title": "Bayesian neural networks for internet traffic classification", "author": ["T. Auld", "A.W. Moore", "S.F. Gull"], "venue": "IEEE Transactions on neural networks 18 (1) ", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2007}, {"title": "Packet classification algorithms: From theory to practice", "author": ["Y. Qi", "L. Xu", "B. Yang", "Y. Xue", "J. Li"], "venue": "in: INFOCOM 2009, IEEE, IEEE", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "Accurate", "author": ["S. Sen", "O. Spatscheck", "D. Wang"], "venue": "scalable in-network identification of p2p traffic using application signatures, in: Proceedings of the 13th International Conference on World Wide Web, ACM, New York, NY, USA", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2004}, {"title": "Blindbox: Deep packet inspection over encrypted traffic", "author": ["J. Sherry", "C. Lan", "R.A. Popa", "S. Ratnasamy"], "venue": "in: ACM SIGCOMM Computer Communication Review, Vol. 45, ACM", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Using network motifs to identify application protocols", "author": ["E.G. Allan", "Jr.", "W.H. Turkett", "E.W. Fulp"], "venue": "in: Proceedings of the 28th IEEE Conference on Global Telecommunications,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}, {"title": "Traffic classification through simple statistical fingerprinting", "author": ["M. Crotti", "M. Dusi", "F. Gringoli", "L. Salgarelli"], "venue": "ACM SIGCOMM Computer Communication Review 37 (1) ", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2007}, {"title": "Optimised multi-stage tcp traffic classifier based on packet size distributions", "author": ["X. Wang", "D.J. Parish"], "venue": "in: Communication Theory, Reliability, and Quality of Service (CTRQ), 2010 Third International Conference on, IEEE", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2010}, {"title": "Internet traffic classification using bayesian analysis techniques", "author": ["A.W. Moore", "D. Zuev"], "venue": "in: ACM SIGMETRICS Performance Evaluation Review, Vol. 33, ACM", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2005}, {"title": "Traffic classification using probabilistic neural networks", "author": ["R. Sun", "B. Yang", "L. Peng", "Z. Chen", "L. Zhang", "S. Jing"], "venue": "in: Natural computation (ICNC), 2010 sixth international conference on, Vol. 4, IEEE", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2010}, {"title": "Network traffic classification based on kernel self-organizing maps", "author": ["H. Ting", "W. Yong", "T. Xiaoling"], "venue": "in: Intelligent Computing and Integrated Systems (ICISS), 2010 International Conference on, IEEE", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2010}, {"title": "Discriminators for use in flowbased classification", "author": ["A. Moore", "D. Zuev", "M. Crogan"], "venue": "Tech. rep. ", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2013}, {"title": "Neural networks primer", "author": ["M. Caudill"], "venue": "part i, AI Expert 2 (12) ", "citeRegEx": "29", "shortCiteRegEx": null, "year": 1987}, {"title": "Sample size planning for classification models", "author": ["C. Beleites", "U. Neugebauer", "T. Bocklitz", "C. Krafft", "J. Popp"], "venue": "Analytica chimica acta 760 ", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2013}, {"title": "G", "author": ["G. Hinton", "L. Deng", "D. Yu"], "venue": "E. Dahl, A.-r. Mohamed, N. Jaitly, A. Senior, V. Vanhoucke, P. Nguyen, T. N. Sainath, et al., Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups, IEEE Signal Processing Magazine 29 (6) ", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2012}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["R. Socher", "A. Perelygin", "J.Y. Wu", "J. Chuang", "C.D. Manning", "A.Y. Ng", "C.P. Potts"], "venue": "in: EMNLP", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2013}, {"title": "Extracting and composing robust features with denoising autoencoders", "author": ["P. Vincent", "H. Larochelle", "Y. Bengio", "P.-A. Manzagol"], "venue": "in: Proceedings of the 25th international conference on Machine learning, ACM", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2008}, {"title": "Greedy layer-wise training of deep networks", "author": ["Y. Bengio", "P. Lamblin", "D. Popovici", "H. Larochelle"], "venue": "in: Advances in neural information processing systems", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2007}, {"title": "Receptive fields and functional architecture of monkey striate cortex", "author": ["D.H. Hubel", "T.N. Wiesel"], "venue": "The Journal of physiology 195 (1) ", "citeRegEx": "36", "shortCiteRegEx": null, "year": 1968}, {"title": "Deep convolutional neural networks for sentiment analysis of short texts", "author": ["C.N. dos Santos", "M. Gatti"], "venue": "in: Proceedings of the 25th International Conference on Computational Linguistics (COL- ING),", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2014}, {"title": "Predicting the sequence specificities of dna-and rna-binding proteins by 10  deep learning", "author": ["B. Alipanahi", "A. Delong", "M.T. Weirauch", "B.J. Frey"], "venue": "Nature biotechnology 33 (8) ", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2015}, {"title": "Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations", "author": ["H. Lee", "R. Grosse", "R. Ranganath", "A.Y. Ng"], "venue": "in: Proceedings of the 26th Annual International Conference on Machine Learning, ICML \u201909, ACM, New York, NY, USA", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2009}, {"title": "A survey of network virtualization", "author": ["N.M.K. Chowdhury", "R. Boutaba"], "venue": "Computer Networks 54 (5) ", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2010}, {"title": "Tor: The secondgeneration onion router", "author": ["R. Dingledine", "N. Mathewson", "P. Syverson"], "venue": "Tech. rep., Naval Research Lab Washington DC ", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2004}, {"title": "R", "author": ["N. Srivastava", "G.E. Hinton", "A. Krizhevsky", "I. Sutskever"], "venue": "Salakhutdinov, Dropout: a simple way to prevent neural networks from overfitting., Journal of Machine Learning Research 15 (1) ", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2014}, {"title": "TensorFlow: Large-scale machine learning on heterogeneous systems", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin", "S. Ghemawat", "I. Goodfellow", "A. Harp", "G. Irving", "M. Isard", "Y. Jia", "R. Jozefowicz", "L. Kaiser", "M. Kudlur", "J. Levenberg", "D. Man\u00e9", "R. Monga", "S. Moore", "D. Murray", "C. Olah", "M. Schuster", "J. Shlens", "B. Steiner", "I. Sutskever", "K. Talwar", "P. Tucker", "V. Vanhoucke", "V. Vasudevan", "F. Vi\u00e9gas", "O. Vinyals", "P. Warden", "M. Wattenberg", "M. Wicke", "Y. Yu", "X. Zheng"], "venue": "software available from tensorflow.org ", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2015}, {"title": "Entropy measures and unconditional security in cryptography", "author": ["C. Cachin"], "venue": null, "citeRegEx": "47", "shortCiteRegEx": "47", "year": 1997}], "referenceMentions": [{"referenceID": 0, "context": "Network traffic classification is an important task in modern communication networks [1].", "startOffset": 85, "endOffset": 88}, {"referenceID": 1, "context": ", see [2], [3], [4] and the references therein).", "startOffset": 11, "endOffset": 14}, {"referenceID": 2, "context": ", see [2], [3], [4] and the references therein).", "startOffset": 16, "endOffset": 19}, {"referenceID": 3, "context": "First, according to [5, 6], only 30% to 70% of the current generated traffic can be identified based on the connection\u2019s port numbers.", "startOffset": 20, "endOffset": 26}, {"referenceID": 4, "context": "First, according to [5, 6], only 30% to 70% of the current generated traffic can be identified based on the connection\u2019s port numbers.", "startOffset": 20, "endOffset": 26}, {"referenceID": 2, "context": "Furthermore, the increasing demand for user\u2019s privacy and data encryption has tremendously raised the amount of encrypted traffic in today\u2019s Internet [4].", "startOffset": 150, "endOffset": 153}, {"referenceID": 5, "context": "Finally, many of the Internet service providers (ISPs) block P2P file sharing applications because of their high bandwidth consumption and copyright issues [7].", "startOffset": 156, "endOffset": 159}, {"referenceID": 6, "context": "These applications use protocol embedding to bypass traffic control systems [8].", "startOffset": 76, "endOffset": 79}, {"referenceID": 7, "context": "There have been abundant studies on the network traffic classification subject [9, 10, 5].", "startOffset": 79, "endOffset": 89}, {"referenceID": 8, "context": "There have been abundant studies on the network traffic classification subject [9, 10, 5].", "startOffset": 79, "endOffset": 89}, {"referenceID": 3, "context": "There have been abundant studies on the network traffic classification subject [9, 10, 5].", "startOffset": 79, "endOffset": 89}, {"referenceID": 9, "context": ") [11].", "startOffset": 2, "endOffset": 6}, {"referenceID": 10, "context": "In contrast, this work proposes a method based on the ideas recently developed in the machine learning community, namely, deep learning, [12, 13], to both characterize and identify the network traffic.", "startOffset": 137, "endOffset": 145}, {"referenceID": 11, "context": "In contrast, this work proposes a method based on the ideas recently developed in the machine learning community, namely, deep learning, [12, 13], to both characterize and identify the network traffic.", "startOffset": 137, "endOffset": 145}, {"referenceID": 8, "context": "\u2022 Our proposed method can identify traffic in both granular level (application identification and traffic categorization) with sate-of-the-art results compared to the works conducted on similar dataset [10, 14, 15, 16].", "startOffset": 202, "endOffset": 218}, {"referenceID": 12, "context": "\u2022 Our proposed method can identify traffic in both granular level (application identification and traffic categorization) with sate-of-the-art results compared to the works conducted on similar dataset [10, 14, 15, 16].", "startOffset": 202, "endOffset": 218}, {"referenceID": 13, "context": "\u2022 Our proposed method can identify traffic in both granular level (application identification and traffic categorization) with sate-of-the-art results compared to the works conducted on similar dataset [10, 14, 15, 16].", "startOffset": 202, "endOffset": 218}, {"referenceID": 14, "context": "\u2022 Our proposed method can identify traffic in both granular level (application identification and traffic categorization) with sate-of-the-art results compared to the works conducted on similar dataset [10, 14, 15, 16].", "startOffset": 202, "endOffset": 218}, {"referenceID": 9, "context": "\u2022 Our approach can accurately classify one of the hardest class of applications, known to be P2P [11].", "startOffset": 97, "endOffset": 101}, {"referenceID": 15, "context": "Because of the fast extraction process, this method is often used in firewall and access control list (ACL) [17].", "startOffset": 108, "endOffset": 112}, {"referenceID": 3, "context": "According to [5, 6] only 30% to 70% of the current Internet traffic can be classified using port-based classification methods.", "startOffset": 13, "endOffset": 19}, {"referenceID": 4, "context": "According to [5, 6] only 30% to 70% of the current Internet traffic can be classified using port-based classification methods.", "startOffset": 13, "endOffset": 19}, {"referenceID": 9, "context": "Payload Inspection Techniques: These techniques are based on the analysis of information in the application layer payload of packets [11].", "startOffset": 133, "endOffset": 137}, {"referenceID": 13, "context": ", see [15] and [18]).", "startOffset": 6, "endOffset": 10}, {"referenceID": 16, "context": ", see [15] and [18]).", "startOffset": 15, "endOffset": 19}, {"referenceID": 17, "context": "[19] proposed a new DPI system that can inspect encrypted payload without decryption, thus solved the user privacy issue, but it can only process HTTPS traffic.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "The oldest graphical techniques are called Graphlets [9].", "startOffset": 53, "endOffset": 56}, {"referenceID": 9, "context": "Every application has its own graphlets which are almost unique for that particular application [11].", "startOffset": 96, "endOffset": 100}, {"referenceID": 18, "context": ", [21], proposed using binary metric which measures weather the host is involved in using an application or not.", "startOffset": 2, "endOffset": 6}, {"referenceID": 19, "context": "[22] proposed protocol fingerprints based on the probability density function (PDF) of packets inter-arrival time and normalized thresholds.", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[23] have considered PDF of the packet size.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[16] proposed a Bayesian neural network that was trained to classify most wellknown P2P protocols including Kazaa, BitTorrent, GnuTella, and achieved 99% accuracy.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[24] achieved 96% of accuracy on the same set of applications using a Naive Bayes classifier and the kernel density estimator.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": ", see [25] and [26]).", "startOffset": 6, "endOffset": 10}, {"referenceID": 23, "context": ", see [25] and [26]).", "startOffset": 15, "endOffset": 19}, {"referenceID": 23, "context": "Moreover, it was shown in [26] that the ANN approach can outperform Naive Bayes methods.", "startOffset": 26, "endOffset": 30}, {"referenceID": 8, "context": "[10] used time related features like the duration of the flow, flow bytes per second, forward and backward inter-arrival time and etc.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[14] manually selected 111 flow features described in [27] and achieved 93.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[14] manually selected 111 flow features described in [27] and achieved 93.", "startOffset": 54, "endOffset": 58}, {"referenceID": 25, "context": "Neural networks (NNs) are computing systems made up of a number of simple, highly interconnected processing elements, which process information by their dynamic state response to external inputs [29].", "startOffset": 195, "endOffset": 199}, {"referenceID": 26, "context": "It is known that with more data samples, the supervuied learning models including NNs can become better and more powerful in doing the classification task [30].", "startOffset": 155, "endOffset": 159}, {"referenceID": 27, "context": "It is worth mentioning that deep learning has achieved stateof-the-art results in many fields such as speech recognition [31], machine vision [32], and natural language processing [33].", "startOffset": 121, "endOffset": 125}, {"referenceID": 28, "context": "It is worth mentioning that deep learning has achieved stateof-the-art results in many fields such as speech recognition [31], machine vision [32], and natural language processing [33].", "startOffset": 180, "endOffset": 184}, {"referenceID": 29, "context": "In practice, to obtain a better performance, a more complex architecture and training procedure, called stacked autoencoder (SAE), is proposed [34].", "startOffset": 143, "endOffset": 147}, {"referenceID": 30, "context": "The training procedure of a stacked autoencoder is done in a greedy layer-wise fashion [35].", "startOffset": 87, "endOffset": 91}, {"referenceID": 31, "context": "The structure of convolutional networks is inspired by visual mechanism of living organisms [36].", "startOffset": 92, "endOffset": 96}, {"referenceID": 31, "context": "The subset of neurons in layer l \u2212 1 which act as the input for a neuron in the successive layer are called the receptive field of that particular neuron [36].", "startOffset": 154, "endOffset": 158}, {"referenceID": 32, "context": "CNNs have been applied to different fields including natural language processing [37], computational biology [38], and machine vision [32].", "startOffset": 81, "endOffset": 85}, {"referenceID": 33, "context": "CNNs have been applied to different fields including natural language processing [37], computational biology [38], and machine vision [32].", "startOffset": 109, "endOffset": 113}, {"referenceID": 34, "context": "One of the most interesting application of CNNs is in face recognition[39].", "startOffset": 70, "endOffset": 74}, {"referenceID": 8, "context": "For this work, we use \u201cISCX VPN-nonVPN traffic dataset\u201d [10], that consists of captured traffic of different applications in pcap format files.", "startOffset": 56, "endOffset": 60}, {"referenceID": 8, "context": "For more details on the captured traffic and the traffic generation process, refer to [10].", "startOffset": 86, "endOffset": 90}, {"referenceID": 35, "context": "Tunneling IP packets, guaranteeing secure remote access to servers, is the most prominent aspect of VPNs [40].", "startOffset": 105, "endOffset": 109}, {"referenceID": 36, "context": "\u201d In order to create a private network pathway, Tor builds a circuit of encrypted connections through relays on the network in a way that no individual relay ever knows the complete path that a data packet has taken [41].", "startOffset": 216, "endOffset": 220}, {"referenceID": 37, "context": "In order to prevent over-fitting problem, after each layer the dropout technique with 25% dropout probability is applied [43].", "startOffset": 121, "endOffset": 125}, {"referenceID": 38, "context": "To implement our proposed NNs, we have used Keras library [44] using Tensorflow [45] backend.", "startOffset": 80, "endOffset": 84}, {"referenceID": 33, "context": "1, [38] tried to characterize network traffic using time-related features handcrafted from traffic flows.", "startOffset": 3, "endOffset": 7}, {"referenceID": 12, "context": "[14] exploiteds time-related features to identify end-user application.", "startOffset": 0, "endOffset": 4}, {"referenceID": 39, "context": "Ideal encryption technique causes the data to bear most possible entropy [47].", "startOffset": 73, "endOffset": 77}], "year": 2017, "abstractText": "Internet traffic classification has become more important with rapid growth of current Internet network and online applications. There have been numerous studies on this topic which have led to many different approaches. Most of these approaches exploit predefined features extracted by an expert in order to classify network traffic. In contrast, in this study, we propose a deep learning based approach which integrate both feature extraction and classification phases into one system. Our proposed scheme, called \u201cDeep Packet,\u201d can handle both traffic categorization in which the network traffic is categorize into major classes (e.g., FTP, P2P, etc.) and application identification in which one identify end-user applications (e.g., BitTorrent, Skype, etc.). Contrary to most of the current methods, Deep Packet can identify encrypted traffic and also distinguishes between VPN and non-VPN network traffic. After initial pre-processing phase on data, packets are fed to Deep Packet framework that embeds stacked autoencoder and convolution neural network in order to classify network traffic. Deep packet with CNN as its classification model achieved F1 score of 0.95 in application identification and it also accomplished F1 score of 0.97 in traffic categorization task. To the best of our knowledge, Deep Packet outperforms all of the classification and categorization methods on UNB ISCX VPN-nonVPN dataset.", "creator": "LaTeX with hyperref package"}}}