{"id": "1004.2626", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Apr-2010", "title": "Propagating Conjunctions of AllDifferent Constraints", "abstract": "We medical alter-globalization debugging for the conjunction of together AllDifferent restraints. Solutions several being AllDifferent monotonic would some those where you claw-free on new frequencies / expectation claw-free curve. Therefore, we investigate while problem of finding incidents polygon alap. We given came extends entire the unlike Hall theorem and characterization before 24-hour entendre matchings exists. Unfortunately, finding creating unforgotten is NP - hard it planning. However, we make came certainly resulted that finding a repeated suits on a thin-walled 16-kilometer formula_10 actually just formula_20 time. Based on is theoretical cause, we required for went polynomial time cargo consistency interface free way conjunction entire which AllDifferent external. We identify but improprieties nothing on addition because khumm is exponentially faster compared intended existing nootropics. Our experiments show same today new propagator must offer significant encourage raised existing useful.", "histories": [["v1", "Thu, 15 Apr 2010 13:37:49 GMT  (33kb,D)", "http://arxiv.org/abs/1004.2626v1", "AAAI 2010, Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence"]], "COMMENTS": "AAAI 2010, Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["christian bessiere", "george katsirelos", "nina narodytska", "claude-guy quimper", "toby walsh"], "accepted": true, "id": "1004.2626"}, "pdf": {"name": "1004.2626.pdf", "metadata": {"source": "CRF", "title": "Propagating Conjunctions of ALLDIFFERENT Constraints", "authors": ["Christian Bessiere", "George Katsirelos", "Nina Narodytska", "Claude-Guy Quimper", "Toby Walsh"], "emails": ["bessiere@lirmm.fr", "gkatsi@gmail.com", "ninan@cse.unsw.edu.au", "cquimper@gmail.com", "toby.walsh@nicta.com.au"], "sections": [{"heading": "Introduction", "text": "Global constraints are a critical factor in the success of constraint programming. They capture patterns that often occur in practice (e.g. \u201cthese courses must occur at different times\u201d). In addition, fast propagation algorithms are associated with each global constraint to reason about potential solutions (e.g. \u201cthese 4 courses have only 3 time slots between them so, by a pigeonhole argument, the problem is infeasible\u201d). One of the oldest and most useful global constraints is the ALLDIFFERENT constraint (Laurie\u0300re 1978). This specifies that a set of variables takes all different values. Many different algorithms have been proposed for propagating the ALLDIFFERENT constraint (Re\u0301gin 1994; Leconte 1996; Puget 1998). Such propagators can have a significant impact on our ability to solve problems (Stergiou & Walsh 1999).\nProblems often contain multiple ALLDIFFERENT constraints (e.g. \u201cThe CS courses must occur at different times, as must the IT courses. In addition, CS and IT have several courses in common\u201d). Currently, constraint solvers ignore information about the overlap between multiple constraints (except for the limited communication provided by the domains of common variables). Here, we show the benefits of reasoning about such overlap. This is a challenging problem\nCopyright c\u00a9 2013, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nas finding a solution to just two ALLDIFFERENT constraints is NP-hard (Kutz et al. 2008) and existing approaches to deal with such overlaps require exponential space (Lardeux et al. 2008). Our approach is to focus on domains that are ordered, as often occurs in practice. For example in our time-tabling problem, values might represent times (which are naturally ordered). In such cases, domains can be compactly represented by intervals. Propagation algorithms can narrow such intervals using the notion of bound consistency. Our main result is to prove we can enforce bound consistency on two ALLDIFFERENT constraints in polynomial time. Our algorithm exploits a connection with matching on bipartite graphs. In particular, we consider simultaneous matchings. By generalizing Hall\u2019s theorem, we identify a necessary and sufficient condition for the existence of such a matching and show that the this problem is polynomial for convex graphs."}, {"heading": "Formal background", "text": "Constraint programming. We use capitals for variables and lower case for values. Values range over 1 to d. We write D(X) for the domain of values for X , lb(X) (ub(X)) for the smallest (greatest) value in D(X). A global constraint is one in which the number of variables n is a parameter. For instance, ALLDIFFERENT([X1, . . . , Xn]) ensures that Xi 6= Xj for any i < j. Constraint solvers prune search by enforcing properties like domain consistency. A constraint is domain consistent (DC) iff when a variable is assigned any value in its domain, there are compatible values in the domains of all other variables. Such an assignment is a support. A constraint is bound consistent (BC) iff when a variable is assigned the minimum or maximum value in its domain, there are compatible values between the minimum and maximum domain value for all other variables. Such an assignment is a bound support. A constraint is bound disentailed iff no possible assignment is a bound support. Graph Theory. Solutions of ALLDIFFERENT correspond to matchings in a bipartite variable/value graph (Re\u0301gin 1994).\nDefinition 1. The graph G = \u3008V,E\u3009 is bipartite if V partitions into 2 classes, V = A \u222a B and A \u2229 B = \u2205, such that every edge has ends in different classes.\nDefinition 2. Let G = \u3008A \u222aB,E\u3009 be a bipartite graph. A matching that covers A is a set of pairwise non-adjacent edges M \u2286 E such that every vertex from A is incident to\nar X\niv :1\n00 4.\n26 26\nv1 [\ncs .A\nI] 1\n5 A\npr 2\n01 0\nexactly one edge from M . We will consider simultaneous matchings on bipartite graphs(SIM-BM) (Kutz et al. 2008). Definition 3. An overlapping bipartite graph is a bipartite graph G = \u3008A \u222aB,E\u3009 and two sets S and T such that A = S \u222a T , A \u2229B = \u2205, and S \u2229 T 6= \u2205. Definition 4. Let \u3008A \u222aB,E\u3009 and S, T be an overlapping bipartite graph. A simultaneous matching is a set of edges M \u2286 E such that M \u2229 (S \u00d7 B) and M \u2229 (T \u00d7 B) are matchings that cover S and T , respectively.\nIn the following, we use the convention that a set of vertices P is a subset of the partition A. We write N(P ) for the neighborhood of P , PS = P \u2229 (S \\ T ), PT = P \u2229 (T \\ S) and PST = P \u2229 S \u2229 T . SIM-BM problems frequently occur in real world applications like production scheduling and timetabling. We introduce here a simple exam timetabling problem that will serve as a running example. Running example. We have 7 exams offered over 5 days and 2 students. The first student has to take the first 5 exams and the second student has to take the last 5 exams. Due to the availability of examiners, not every exam is offered each day. For example, the first exam cannot be on the last day of the week. Only one exam can be sat each day. This problem can be encoded as a SIM-BM problem. A represents the exams and contains 7 vertices X1 to X7. B represents the days and contains the vertices 1 to 5. S = [X1, X2, X3, X4, X5] and T = [X3, X4, X5, X6, X7]. We connect vertices between A and B to encode the availability restrictions of the examiners. The adjacency matrix of the graph is as follows:\n1 2 3 4 5\nAS = S \\ T X1 \u2217 \u2217 \u2217 \u2217 X2 \u2217 \u2217\nAST = S \u2229 T X3 \u2217 \u2217 \u2217 X4 \u2217 \u2217 \u2217 X5 \u2217 \u2217 \u2217 \u2217 \u2217\nAT = T \\ S X6 \u2217 \u2217 X7 \u2217 \u2217 \u2217 \u2217\nFinding a solution for this SIM-BM problem is equivalent to solving the timetabling problem."}, {"heading": "Simultaneous Bipartite Matching", "text": "We now consider how to find a simultaneous matching. Unfortunately, this problem is NP-complete in general (Kutz et al. 2008). Our contribution here is to identify a necessary and sufficient condition for the existence of a simultaneous matching based on an extension of Hall\u2019s theorem (Hall 1935). We use this to show that a simultaneous matching on a convex bipartite graph can be found in polynomial time.\nIn the following, let G\u2032(u,v) be the subgraph of the overlapping bipartite graph G that is induced by choosing an edge (u, v) to be in the simultaneous matching. If u \u2208 AST then G\u2032(u,v) = G \u2212 {u, v}. If u \u2208 A\nS (and symmetrically if u \u2208 AT ) then G\u2032(u,v) = \u3008V \u2212 {u}, E \\ {(u\n\u2032, v)|u\u2032 \u2208 S}\u3009. If M is a SIM-BM in G\u2032(u,v), then M\u222a{(u, v)} is a SIM-BM in G. Since the edge (u, v) is implied throughout, we write G\u2032 = G\u2032(u,v). In addition, we write N \u2032(P ) = NG\u2032(P )."}, {"heading": "Extension of Hall\u2019s Theorem", "text": "Hall\u2019s theorem provides a necessary and sufficient condition for the existence of a perfect matching in a bipartite graph. Theorem 1 (Hall Condition (Hall 1935)). Let G = \u3008A \u222aB,E\u3009 such that A \u2229 B = \u2205. There exists a perfect matching iff |N(P )| \u2265 |P | for P \u2286 A.\nInterestingly we only need a small adjustment for simultaneous matching. Theorem 2 (Simultaneous Hall Condition (SIM-HC)). Let G = \u3008A \u222aB,E\u3009 and sets S, T be an overlapping bipartite graph. There exists a SIM-BM, iff |N(P )|+ |N(PS) \u2229 N(PT )| \u2265 |P | for P \u2286 A.\nProof. We prove SIM-HC by induction on |A|. When |A| = 1, the statement holds. Let |A| = k > 1.\nIf AS = \u2205 or AT = \u2205 then SIM-HC reduces to the condition of Hall\u2019s theorem and the statement is true for that reason. Hence, we assume AS 6= \u2205 and AT 6= \u2205. We show that there is an edge (u, v) that can be chosen for a simultaneous matching and the graph G\u2032(u,v) will satisfy SIM-HC. Following (Diestel 2006), page 37, we consider two cases. The first case when all subsets of A satisfy the strict SIM-HC, namely, |N(P )|+ |N(PS)\u2229N(PT )| > |P | and the second case when we have an equality.\nCase 1. Suppose |N(P )| + |N(PS) \u2229 N(PT )| > |P | for all sets P \u2282 A. As AS 6= \u2205 we select any edge (u, v), u \u2208 AS and construct the graph G\u2032(u,v) (the case u \u2208 AT is symmetric). For any set P \u2282 A \\ {u} we consider two cases: either v /\u2208 N(P ) or v \u2208 N(P ). In the first case, the neighborhood of P is the same in G and G\u2032, so the SIM-HC holds for P . In the case that v \u2208 N(P ), then either v is a shared neighbor of PS and PT , which means that N \u2032(PS) \u2229 N \u2032(PT ) = N(PS) \u2229 N(PT ) \u2212 1 but N \u2032(P ) = N(P ) by construction, or v is a neighbor of PS but not of PT . Therefore N \u2032(P ) \u2265 N(P ) \u2212 1. But N \u2032(PS) \u2229 N \u2032(PT ) = N(PS) \u2229 N(PT ) by construction. In either case, |N \u2032(P )| + |N \u2032(PS) \u2229 N \u2032(PT )| \u2265 |N(P )| + |N(PS) \u2229 N(PT )| \u2212 1 \u2265 |P | for any set P in G\u2032. By the inductive hypothesis there exists a simultaneous matching in it.\nCase 2. Suppose that there exists a set P ( A such that |N(P )|+ |N(PS)\u2229N(PT )| = |P |. Let Q = \u3008A\u2032 \u222aB\u2032, E\u2032\u3009 such that A\u2032 = A \\ P , B\u2032 = B \\ (N(PS) \u2229N(PT )) and\nE\u2032 = {(u, v) \u2208 E \u2229 (A\u2032 \u00d7B\u2032) |\n(u \u2208 AS \u2032 =\u21d2 v /\u2208 N(P ) \\N(PT )) \u2227\n(u \u2208 AT \u2032 =\u21d2 v /\u2208 N(P ) \\N(PS)) \u2227\n(u \u2208 AST \u2032 =\u21d2 v /\u2208 N(P )) } There exists a simultaneous matching in G \u2212 Q by the inductive hypothesis. We claim that the SIM-HC holds also for Q. This implies that, by the inductive hypothesis, there exists a simultaneous matching in Q. Suppose there exists a set P \u2032 \u2286 A\u2032 that violates the SIM-HC in Q.\nWe denote as N(P ) the neighborhood of P in G and NQ(P\n\u2032) as the neighborhood of P \u2032 in Q. We know that the sets P \u2032 and P are disjoint. We observe that N(P \u222a\nP \u2032) = N(P ) \u222a N(P \u2032) = N(P ) \u222a NQ(P \u2032), because (N(P \u2032) \\NQ(P \u2032)) \u2286 N(P ) by construction of Q. Moreover |N(P ) \u222aNQ(P \u2032)| = |N(P )| + |NQ(P \u2032)| \u2212 |N(P ) \u2229 NQ(P \u2032)| = |N(P )| + |NQ(P \u2032)| \u2212 |N(P ) \u2229 (NQ(PS \u2032 ) \u222a NQ(P T \u2032) \u222a NQ(PST \u2032 ))|. By construction of Q, we have that NQ(PST \u2032 ) \u2229 N(P ) = \u2205, NQ(PS \u2032 ) \u2229 N(P ) = NQ(P S \u2032) \u2229N(PT ) and NQ(PT \u2032 ) \u2229N(P ) = NQ(PT \u2032 ) \u2229 N(PS). Hence, |N(P )\u222aNQ(P \u2032)| = |N(P )|+ |NQ(P \u2032)|\u2212 |D|, where D = (N(PS) \u2229 NQ(PT \u2032 )) \u222a (N(PT ) \u2229 NQ(P S \u2032)). Similarly, N(PS \u222aPS \u2032) = N(PS)\u222aNQ(PS \u2032 ) and N(PT \u222a PT \u2032) = N(PT ) \u222a NQ(PT \u2032 ). Therefore, |N(PS \u222aPS \u2032)\u2229N(PT \u222aPT \u2032)| = |(N(PS)\u222aNQ(PS \u2032 ))\u2229 (N(PT )\u222aNQ(PT \u2032 ))| \u2264 |N(PS)\u2229N(PT )|+ |NQ(PS \u2032 )\u2229 NQ(P T \u2032)|+ |D|. Finally, we have that\n|N(P \u222a P \u2032)|+ |N(PS \u222a PS \u2032) \u2229N(PT \u222a PT \u2032)| \u2264 |N(P )|+ |NQ(P \u2032)| \u2212 |D| +\n|N(PS) \u2229N(PT )|+ |NQ(PS \u2032 ) \u2229NQ(PT \u2032 )|+ |D| =\n|N(P )|+ |N(PS) \u2229N(PT )| +\n|NQ(P \u2032)|+ |NQ(PS \u2032 ) \u2229NQ(PT \u2032| < |P |+ |P \u2032| = |P \u222a P \u2032|.\nHence P \u222a P \u2032 violates the SIM-HC in G, a contradiction. Therefore, there exists a simultaneous matching in Q.\nLet M be a simultaneous matching in Q. For any edge (u, v) \u2208 M , we construct the graph R = (G \u2212 Q)(u,v) and show that NR(P \u2217) = NG(P \u2217) and NR(PS \u2217 ) \u2229 NR(P T \u2217) = N(PS \u2217 ) \u2229N(PT \u2217) for any P \u2217 \u2286 P .\nLet (u, v) be an edge in M . By construction of Q, we have that v /\u2208 N(PS\u2217) \u2229N(PT \u2217). Hence, the construction of R leaves the size of NR(PS \u2217 ) \u2229 NR(PT \u2217 ) the same as in G. Moreover, u \u2208 AST \u2032 \u21d2 v /\u2208 N(P \u2217), u \u2208 AS \u2032 \u21d2 v /\u2208 N(PS \u2217 ), u \u2208 AT \u2032 \u21d2 v /\u2208 N(PT \u2217).\nConsider the remaining options for the edge (u, v). If u \u2208 AS \u2032 (u \u2208 AT \u2032 is similar) then v can be in N(PT \u2217), so v is a shared vertex with N(P \u2217). There are two cases to consider: v \u2208 N(PT \u2217) \\ N(PST \u2217) and v \u2208 N(PT \u2217) \u2229 N(PST \u2217 ). In the first case, the construction of R leaves the size of NR(PT \u2217 ) the same as N(PT \u2217) because u \u2208 AS \u2032 and can share vertices with PT \u2217. In the latter case, NR(P ST \u2217) = N(PST \u2217 ) \\ {v}, but NR(PT \u2217 ) = N(PT \u2217 ). Hence, NR(P \u2217) = N(P \u2217) in both cases. Therefore, the SIM-HC holds for any P \u2217 \u2286 P .\nRunning example. In our running example A = [X1, X2, X3, X4, X5, X6, X7], AS = [X1, X2], AST = [X3, X4, X5] and AT = [X6, X7] . It is easy to check that the simultaneous Hall condition holds for all subsets of the partition A.\nNote that Theorem 2 does not give a polynomial time method to decide if a simultaneous matching exists. Verifying that SIM-HC holds requires checking the exponential number of subsets of A."}, {"heading": "Removing edges", "text": "To build a propagator, we consider how to detect edges that cannot appear in any simultaneous matching. Definition 5. Let G = \u3008A \u222aB,E\u3009 and sets S, T be an overlapping bipartite graph. A set P , P \u2286 A, is\na simultaneous Hall set iff |N(P )|+ |N(PS) \u2229N(PT )| = |P |.\nan almost simultaneous Hall set iff |N(P )|+ |N(PS) \u2229N(PT )| = |P |+ 1.\na loose set iff |N(P )|+ |N(PS) \u2229N(PT )| \u2265 |P |+ 2.\nTheorem 3. G = \u3008A \u222aB,E\u3009 and sets S, T be an overlapping bipartite graph. Each edge (u, v), u \u2208 A and v \u2208 B can be extended to a matching that covers S and T iff\n1. for each set P : (a) |N(P )|+ |N(PS) \u2229N(PT )| \u2265 |P |\n2. for each simultaneous Hall set P : (a) if u /\u2208 P then v /\u2208 (N(PS) \u2229N(PT )) (b) if u \u2208 S \\ (T \u222a P ) then v /\u2208 ( N(P ) \\N(PT ) ) (c) if u \u2208 T \\ (S \u222a P ) then v /\u2208 ( N(P ) \\N(PS)\n) (d) if u \u2208 (S \u2229 T ) \\ P then v /\u2208 N(P )\n3. for each almost simultaneous Hall set P : (a) if u \u2208 (S \u2229 T ) \\ P then v /\u2208 N(PS) \u2229N(PT )\nProof. Soundness. The soundness of Rule 1a follows from Theorem 2. Let (u, v) be an edge that we want to extend to a matching. Suppose that (u, v) violates one of the rules for a SIM-HALLSET or an A-SIM-HALLSET P in G. We show that if (u, v) is selected to be in a matching, then P fails SIM-HC in G\u2032(u,v).\nRule 2a: If (u, v) violates Rule 2a for a SIM-HALLSET P then |N \u2032(PS) \u2229N \u2032(PT )| = |N(PS) \u2229N(PT )| \u2212 1 and N \u2032(P ) = N(P ), so the SIM-HC is violated for P in G\u2032.\nRule 2b: If (u, v) violates Rule 2b for a SIM-HALLSET P then |N \u2032(P )| = |N(P )| \u2212 1 and |N \u2032(PS) \u2229N \u2032(PT )| = |N(PS) \u2229N(PT )| so the SIM-HC is violated for P in G\u2032.\nRule 2c: Symmetric to Rule 2b. Rule 2d: If (u, v) violates Rule 2d for a SIM-HALLSET P then |N \u2032(P )| = |N(P )| \u2212 1 so the SIM-HC is violated for P in G\u2032.\nRule 3a: If (u, v) violates Rule 3a for an A-SIM-HALLSET P then |N \u2032(P )| = |N(P )| \u2212 1 and |N \u2032(PS) \u2229 N \u2032(PT )| = |N(PS) \u2229 N(PT )| \u2212 1, so |N \u2032(P )|+ |N \u2032(PS)\u2229N \u2032(PT )| = |P | \u2212 1 and the SIM-HC is violated for P in G\u2032.\nCompleteness. Second, we show that Rules 2a- 3a are complete. We will show that we can use any edge (u, v) in a maching by showing that the graph G\u2032(u,v) satisfies the SIM-HC, thus has a SIM-BM.\nSuppose there is a set P that violates the SIM-HC in G\u2032 but not in G so that\n|N \u2032(P )|+ |N \u2032(PS) \u2229N \u2032(PT )| < |P | (1)\nand |N(P )|+ |N(PS) \u2229N(PT )| \u2265 |P | (2)\nNote that N \u2032(P ) = N(P )\\{v} and N \u2032(PS)\u2229N \u2032(PT ) = N(PS)\u2229N(PT )\\{v}. Hence, |N \u2032(P )| \u2265 |N(P )|\u22121 and |N \u2032(PS) \u2229N \u2032(PT )| \u2265 |N(PS) \u2229N(PT )| \u2212 1.\nThere are three cases to consider for P in G, when P is a loose set, a SIM-HALLSET and an A-SIM-HALLSET in G. These cases are similar, so we consider only the most difficult case. Let P be an A-SIM-HALLSET in G. If u \u2208 AST then v /\u2208 N(PS) \u2229 N(PT ) by Rule 3a. Hence N \u2032(PS) \u2229 N \u2032(PT ) = N(PS) \u2229 N(PT ), so |N \u2032(P )| + |N \u2032(PS)\u2229N \u2032(PT )| \u2265 |N(P )|+ |N(PS)\u2229N(PT )|\u22121 \u2265 |P | and therefore (1) and (2) cannot both be true.\nIf u \u2208 AS (u \u2208 AT is symmetric) then v \u2208 N(PS) \u2229 N(PT ) or its complement. In the first case N \u2032(P ) = N(P ), while in the second N \u2032(PS) \u2229 N \u2032(PT ) = N(P \u2032S) \u2229 N(P \u2032T ). In both cases, |N \u2032(P )| + |N \u2032(PS) \u2229 N \u2032(PT )| \u2265 |N(P )|+|N(PS)\u2229N(PT )|\u22121 \u2265 |P | so (1) and (2) cannot both be true.\nRunning example. Consider again our running example. We show that Rules 2a-3a remove every edge that can not be extended to a matching. Consider the set P = {X2, X3, X4, X6}. This is a SIM-HALLSET as N(P ) = {1, 2, 3}, N(PS) \u2229 N(PT ) = {2} and 4 = |P | = |N(P )| + |N(PS) \u2229 N(PT )| = 4. Hence, by Rule 2d we prune 1, 2, 3 from X5 and by Rule 2a we prune 2 from X1 and X7. Now consider the set P = {X2, X3, X6}. This is an A-SIM-HALLSET. By Rule 3a we prune 2 from X4. The set P = {X2, X4, X6} is also an A-SIM-HALLSET and, by Rule 3a, we prune 2 from X3. Next consider the set P = {X3, X4} which is a SIM-HALLSET. By Rules 2b and 2c we prune 1, 3 from X1, X2, X6 and X7. Now, {X1} is a SIM-HALLSET and 4 is pruned from X5 by Rule 2d. Finally, from the simultaneous Hall set {X5}, we prune 5 from X7 using Rule 2c and we are now at the fixpoint.\n1 2 3 4 5\nAS = S \\ T X1 \u2217 X2 \u2217\nAST = S \u2229 T X3 \u2217 \u2217 X4 \u2217 \u2217 X5 \u2217\nAT = T \\ S X6 \u2217 X7 \u2217\nThe overlapping ALLDIFFERENT constraint We now uses these results to build a propagator.\nDefinition 6. OVERLAPPINGALLDIFF([X], S, T ) where S \u2286 X , T \u2286 X , S \u222a T = X holds iff ALLDIFFERENT(S) and ALLDIFFERENT(T ) hold simultaneously .\nEnforcing DC on the OVERLAPPINGALLDIFF constraint is NP -hard (Bessiere et al. 2007). We consider instead enforcing just BC. This relaxation is equivalent to the simultaneous matching problem on a bipartite convex variablevalue graph. Our main result is an algorithm that enforces BC on the OVERLAPPINGALLDIFF constraint in O(nd3) time. The algorithm is based on the decomposition of the OVERLAPPINGALLDIFF constraint into a set of arithmetic constraints derived from Rules 2b\u20133a. It is inspired by a decomposition of ALLDIFFERENT (Bessiere et al. 2009). As\nthere, we introduce Boolean variables ailu, bil to represent whether Xi takes a value in the interval [l, u] and the variables CS , CST and CT to represent bounds on the number of variables from S \\ T , T \\ S and S \u2229 T that may take values in the interval [l, u]. We introduce the following set of constraints for 1 \u2264 i \u2264 n, 1 \u2264 l \u2264 u \u2264 d and u\u2212 l < n:\nbil = 1 \u21d0\u21d2 Xi \u2264 l (3) ailu = 1 \u21d0\u21d2 (bi(l\u22121) = 0 \u2227 biu = 1) (4)\nCSTlu = \u2211\ni\u2208S\u2229T ailu (5)\nCSlu = \u2211\ni\u2208S\\T\nailu (6)\nCTlu = \u2211\ni\u2208T\\S\nailu (7)\nCST1u = C ST 1l + C ST (l+1)u (8)\nCSTlu + C S lu \u2264 u\u2212 l + 1 (9)\nCSTlu + C T lu \u2264 u\u2212 l + 1 (10)\nWe also introduce a dummy variable CST10 = 0 to simplify the following lemma and theorems. Lemma 1. Consider a sequence of values v1, v2, . . . , vk. Enforcing BC on (8) ensures ub(CST1vk\u22121) \u2264\u2211\ni:vi<vi+1 ub(CSTvivi+1\u22121)\u2212 \u2211 i:vi>vi+1 lb(CSTvi+1vi\u22121).\nProof. For every i such that vi < vi+1, constraint (8) ensures that ub(CST1vi+1\u22121) \u2264 ub(C ST 1vi\u22121) + ub(C ST vivi+1\u22121). For every i such that vi > vi+1 constraint (8) ensures that ub(CST1vi+1\u22121) \u2264 ub(C ST 1vi\u22121) \u2212 lb(C ST vi+1,vi\u22121). The left side of each inequality can be substituted into the right side of another inequality until one obtains ub(CST1vk\u22121) \u2264\u2211\ni:vi<vi+1 ub(CSTvivi+1\u22121)\u2212 \u2211 i:vi>vi+1 lb(CSTvi+1vi\u22121).\nTheorem 4. Enforcing BC on (3)-(10) detects bound disentailment of OVERLAPPINGALLDIFF in O(nd2) time but does not enforce BC on OVERLAPPINGALLDIFF.\nProof. First we derive useful upper bounds for the variables CSTlu . Consider a set P and an interval [a, b] such that N(P ) = [a, b]. Let [c1, d1] \u222a . . . \u222a [ck, dk] be a set of intervals that tightly contain variables from PS so that \u2200i, [ci, di] \u2208 N(PS), [e1, f1] \u222a . . . \u222a [em, fm] be a set of intervals that tightly contain variables from PT so that \u2200i, [ei, fi] \u2208 N(PT ), and I1 \u222a . . . \u222a Ip are intersection intervals between intervals [ci, di] and [ei, fi], i.e., \u2200i, Ii \u2208 N(PS) \u2229N(PT ).\nWe first remove all intervals [ci, di] ([ei, fi]) that are completely inside an interval [ej , fj ] ([cj , dj ]). For any of these intervals [ci, di] ([ei, fi] is similar) there exists an intersection interval Ij such that Ij = [ci, di]. We denote the set of removed intervals RI . The remaining intervals are {[c1, d1], . . . , [ck\u2032 , dk\u2032 ]}, [e1, f1] . . . , [em\u2032 , fm\u2032 ]} and I1, . . . , Ip\u2032 . For any interval [ci, di], (9) ensures that ub(CSTcidi) \u2264 di \u2212 ci + 1\u2212 lb(C S cidi\n). Similarly for an interval [ei, fi], we have ub(CSTeifi) \u2264 fi \u2212 ei + 1\u2212 lb(C T eifi ).\nWe sort the union of remaining intervals [ci, di] and [ei, fi] by their lower bounds and list them as semiopen intervals [g1, g2), [g3, g4), . . . , [gk\u2032+m\u2032\u22121, gk\u2032+m\u2032). Using the sequence a, (g1, g2, . . . , gk\u2032+m\u2032 , b + 1, a)x where (.)x indicates a repetition of x times the same sequence, Lemma 1 provides the inequality ub(CST1a\u22121) \u2264 ub(CST1a\u22121)+x(ub(CSTag1\u22121)+ub(C ST gk\u2032+m\u2032b\n)+\u2211k\u2032 i=1 ub(C ST cidi ) + \u2211m\u2032 i=1 ub(C ST eifi\n) \u2212 lb(CSTa,b )). Substituting the inequalities that we already defined, we obtain ub(CST1a\u22121) \u2264 a \u2212 1 + x(b \u2212 a + 1 + \u2211k\u2032 i=1 lb(C S cidi\n) \u2212\u2211m\u2032 i=1 lb(C T eifi ) + \u2211p\u2032\ni=1 |Ii| \u2212 lb(CSTa,b )). For any removed interval Ij \u2208 RI we have (|Ij | \u2212\nlb(CSmin(Ij)max(Ij))) \u2265 0 or (|Ij |\u2212 lb(C T min(Ij)max(Ij) )) \u2265 0. We reintegrate all removed intervals into the inequation to get ub(CST1a\u22121) \u2264 a \u2212 1 + x(b \u2212 a + 1 \u2212\u2211k\ni=1 lb(C S cidi\n)\u2212 \u2211m\ni=1 lb(C T eifi\n) + \u2211p\ni=1 |Ii| \u2212 lb(CSTab )). Note that \u2211p i=1 |Ii| = |N(PS) \u2229 N(PT )|, lb(CSab) =\u2211k\ni=1 lb(C S cidi ) and lb(CTab) = \u2211m i=1 lb(C T eifi ). Hence\nub(CST1a\u22121) \u2264 a\u2212 1 + x(b\u2212 a+ 1\u2212 lb(CSab)\u2212 lb(CTab) +|N(PS) \u2229N(PT )| \u2212 lb(CSTab )) (*)\nBound disentailment. Suppose, for the purpose of contradiction, that OVERLAPPINGALLDIFF is bound disentailed and that constraints (3)-(10) are bound consistent. Then, there exists a set P , such that N(P ) is an interval and |N(P )|+ |N(PS)\u2229N(PT )| < |P |. As P fails SIM-HC, it holds that lb(CSTab )+ lb(C S ab)+ lb(C T ab) \u2265 |P | > |N(P )|+ |N(PS) \u2229 N(PT )| = b \u2212 a + 1 + |N(PS) \u2229 N(PT )| or lb(CSTab ) \u2265 b\u2212a+2\u2212lb(CSab)\u2212lb(CTab)+|N(PS)\u2229N(PT )|. Substituing the last inequality in (*) gives ub(CST1a\u22121) \u2264 a \u2212 1 \u2212 x. Choosing a large enough value for x (say a) gives the contradiction ub(CST1a\u22121) < 0.\nBound consistency. To show that this decomposition does not enforce BC, consider the conjunction of ALLDIFFERENT ([X1, X2, X3]) and ALLDIFFERENT ([X2, X3, X4]) with D(X1) = [2, 3], D(X2) = [2, 4], D(X3) = [1, 3], D(X4) = [1, 2]. Enforcing BC on (3)-(10) does not remove the bound inconsistent value X2 = 2.\nComplexity. There are O(nd) constraints (3) that can be invoked O(d) times at most. There are O(nd2) constraints (4) that can be invoked O(1) times. There are O(d2) constraints (8) that can be invoked O(n) times. There are O(d2) constraints (5)\u2013 (7) that can be propagated in O(n). The remaining constraints take O(nd2) to propagate. The total time complexity is O(nd2).\nIt follows immediately that the simultaneous matching problem is polynomial on bipartite convex graphs. Theorem 5. A simultaneous matching can be found in polynomial time on an overlapping convex bipartite graph.\nNext, we present an algorithm to enforce BC. We show that constraints (3)\u2013(10) together with the following two constraints enforce all but one of the rules from Theorem 3.\nCT1u = C T 1l + C T (l+1)u 1 \u2264 l \u2264 u \u2264 d (11)\nCS1u = C S 1l + C S (l+1)u 1 \u2264 l \u2264 u \u2264 d (12)\nTheorem 6. Constraints (3)-(12) enforce Rules 2a\u2013 2d.\nProof Sketch. Based on Lemma 1, similar to the proof of Theorem 4, we show that all intervals that contain variables from a SIM-HALLSET P become saturated intervals, so that the lower bounds of the corresponding variables CST , CS and CT equal to their upper bounds. Hence, these values are pruned from domains of variables outside the set P .\nTheorem 7. Suppose constraints (3)-(12) together with CSTlu = C ST lk + C ST (k+1)u, 2 \u2264 l \u2264 k \u2264 u \u2264 d have reached their fixpoint. Rule 3a can now be enforced in O(nd3) time.\nProof Sketch. Let P is an A-SIM-HALLSET, N(P ) = [a, b]. Similar to the proof of Theorem 4, we can obtain that lb(CSTab ) + 1 \u2265 ub(CSTab ). Hence, we can identify intervals, that might contain an A-SIM-HALLSET P . Next, we observe that if we add a dummy variable Z, D(Z) = [a, b] to the set P so that P \u2032 = P \u222a {Z}, Z \u2208 PST \u2032 then P \u2032 is a SIM-HALLSET. This allows us to identify the set N(PS) \u2229 N(PT ) by simulating constraints (3)-(12) inside the interval [a, b] taking into account the variable Z. There are O(d2) intervals. Finding N(PS) \u2229N(PT ) takes O(n+ d) time inside an interval. Enforcing the rule takes O(nd) time. Hence, the total time complexity is O(nd3).\nFrom Theorems 6 and 7 it follows that\nTheorem 8. BC on OVERLAPPINGALLDIFF can be enforced in O(nd3) time.\nRunning example. We demonstrate the action of constraints (3)-(12). The interval [1, 4] contains a SIM-HALLSET P = {X2, X3, X4, X6}. Rule 2d. lb(CS12) \u2265 1 and lb(CT23) \u2265 1\u21d2 (9), (10)\u21d2 ub(CST12 ) \u2264 1 and ub(CST23 ) \u2264 1 \u21d2 (8) \u21d2 ub(CST13 ) \u2264 2. The interval [1, 3] is saturated, as lb(CST13 ) = ub(C ST 13 ). Hence, by (3)-(5), [1, 3] is removed from D(X5). Rules 2b,2c. As lb(CST13 ) = 2 \u21d2 (9) \u21d2 ub(CS13) \u2264 1 \u21d2 (12) \u21d2 ub(CS12) \u2264 1. The interval [1, 2] is saturated, as lb(CS12) = ub(C ST 12 ). Hence, by (3)-(4),(6), [1, 2] is removed from D(X1). Similarly, [2, 3] is removed from D(X7). Rule 2a. This is satisfied as 2 is removed from all variables outside P ."}, {"heading": "Exponential separation", "text": "We now give a pathological problem on which our new propagator does exponentially less work than existing methods.\nTheorem 9. There exists a class of problems such that enforcing BC on OVERLAPPINGALLDIFF immediately detects unsatisfiability while a search method that enforces DC on the decomposition into ALLDIFFERENT constraints explores an exponential search tree regardless of branching.\nProof. The instance In is defined as follows In = ALLDIFFERENT([X \u222a Y ]) \u2227 ALLDIFFERENT([Y \u222a Z]), D(Xi) = [1, 2n \u2212 1], i = 1, . . . , n, D(Yi) = [1, 4n \u2212 1], i = 1, . . . , 2n and D(Zi) = [2n, 4n\u2212 1], i = 1, . . . , n.\nOVERLAPPINGALLDIFF. Consider the interval [1, 4n \u2212 1]. |P | = 4n, |N(P )| = 4n\u22121 and |N(PS)\u2229N(PT )| = 0. By Theorem 2, we detect unsatisfiability.\nDecomposition. Consider any ALLDIFFERENT constraint. A subset of n or fewer variables has at least 2n \u2212 1 values in their domains and a subset of n+1 to 3n variables has 4n\u22121 values in their domains. Thus, to obtain a Hall set and prune, we must instantiate at least n\u2212 1 variables."}, {"heading": "Experimental results", "text": "To evaluate the performance of our decomposition we carried out an experiment on random problems. We used Ilog 6.2 on an Intel Xeon 4 CPU, 2.0 GHz, 4GB RAM. We compare the performance of the DC, BC (LopezOrtiz et al. 2003) propagators and our decomposition into constraints (3)-(12) for the OVERLAPPINGALLDIFF constraint (OBC). We use randomly generated problems with three global constraints: ALLDIFFERENT(X \u222a W ), ALLDIFFERENT(Y \u222aW ) and ALLDIFFERENT(Z\u222aW ), and a linear number of binary ordering relations between variables in X , Y and Z. We use a random variable ordering and run each instance with 50 different seeds. As Table 1 shows, our decomposition reduces the search space significantly, is much faster and solves more instances overall."}, {"heading": "Conclusions", "text": "We have generalized Hall\u2019s theorem to simultaneous matchings in a bipartite graph. This generalization suggests a polynomial time algorithm to find a simultaneous matching in a convex bipartite graph. We applied this to a problem in constraint programming of propagating conjunctions of ALLDIFFERENT constraints. Initial experimental results suggest that reasoning about such conjunctions can significantly reduce the size of the explored search space. There are several avenues for future research. For example, the algorithmic techniques proposed in (Puget 1998) and (LopezOrtiz et al. 2003) may be generalizable to simultaneous bipartite matchings, giving more efficient propagators. Further, matchings are used to propagate other constraints such\nas NVALUE (Bessiere et al. 2006). It may be possible to apply similar insights to develop propagators for conjunctions of other global constraints, or to improve existing propagators for global constraints that decompose into overlapping constraints like SEQUENCE (Brand et al. 2005). Finally, we may be able to develop polynomial time propagators for otherwise intractable cases if certain parameters are fixed (Bessiere et al. 2008)."}, {"heading": "Acknowledgments", "text": "This research is supported by ANR UNLOC project (ANR 08-BLAN-0289-01), the Australian Government\u2019s Department of Broadband, Communications and the Digital Economy and the ARC."}], "references": [{"title": "Filtering algorithms for the NVALUE", "author": ["Bessiere"], "venue": "constraint. Constraints,", "citeRegEx": "Bessiere,? \\Q2006\\E", "shortCiteRegEx": "Bessiere", "year": 2006}, {"title": "The Parameterized Complexity of Global Constraints", "author": ["Bessiere"], "venue": "In Proc. of 23rd AAAI,", "citeRegEx": "Bessiere,? \\Q2008\\E", "shortCiteRegEx": "Bessiere", "year": 2008}, {"title": "Decompositions of all different, global cardinality and related constraint", "author": ["Bessiere"], "venue": "In Proc. of 21st IJCAI,", "citeRegEx": "Bessiere,? \\Q2009\\E", "shortCiteRegEx": "Bessiere", "year": 2009}, {"title": "Encodings of the Sequence Constraint", "author": ["Brand"], "venue": "In Proc. of CP-2007,", "citeRegEx": "Brand,? \\Q2007\\E", "shortCiteRegEx": "Brand", "year": 2007}, {"title": "Simultaneous matchings: Hardness and approximation", "author": ["Kutz"], "venue": "J. of Computer and System Sciences", "citeRegEx": "Kutz,? \\Q2008\\E", "shortCiteRegEx": "Kutz", "year": 2008}, {"title": "Interleaved Alldifferent Constraints: CSP vs. SAT Approaches", "author": ["Lardeux"], "venue": "In Proc. of AIMSA,", "citeRegEx": "Lardeux,? \\Q2008\\E", "shortCiteRegEx": "Lardeux", "year": 2008}, {"title": "A fast and simple algorithm for bounds consistency of the alldifferent constraint", "author": ["Lopez-Ortiz"], "venue": "Proc. of 18th IJCAI,", "citeRegEx": "Lopez.Ortiz,? \\Q2003\\E", "shortCiteRegEx": "Lopez.Ortiz", "year": 2003}, {"title": "The difference all-difference makes", "author": ["Stergiou", "K. Walsh 1999] Stergiou", "T. Walsh"], "venue": "In Proc. of 16th IJCAI,", "citeRegEx": "Stergiou et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Stergiou et al\\.", "year": 1999}], "referenceMentions": [], "year": 2013, "abstractText": "We study propagation algorithms for the conjunction of two ALLDIFFERENT constraints. Solutions of an ALLDIFFERENT constraint can be seen as perfect matchings on the variable/value bipartite graph. Therefore, we investigate the problem of finding simultaneous bipartite matchings. We present an extension of the famous Hall theorem which characterizes when simultaneous bipartite matchings exists. Unfortunately, finding such matchings is NP-hard in general. However, we prove a surprising result that finding a simultaneous matching on a convex bipartite graph takes just polynomial time. Based on this theoretical result, we provide the first polynomial time bound consistency algorithm for the conjunction of two ALLDIFFERENT constraints. We identify a pathological problem on which this propagator is exponentially faster compared to existing propagators. Our experiments show that this new propagator can offer significant benefits over existing methods.", "creator": "LaTeX with hyperref package"}}}