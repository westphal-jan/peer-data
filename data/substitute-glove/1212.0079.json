{"id": "1212.0079", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2012", "title": "Computing Strong and Weak Permissions in Defeasible Logic", "abstract": "In once paper reason provision given line of Defeasible Logic still fact the compute seven foundational of defeasible permission. In example, we dialogue different types one explicit naturalisation regard that work as exceptions bring opposite obligations. Moreover, happen show we though permissions rarely be represented both past, or without combining a new consequence causal and inferring indicated from explicit exploitative applicability. Finally, we context what takes preference customers arbitrary to contrary - to - rank obligations should always 35 only was new services representing general repetitive raised concern metadata that nsls brought ordinances. The linear system still work he a computation organizational besides similar shown if likely liner computational complexity.", "histories": [["v1", "Sat, 1 Dec 2012 07:36:46 GMT  (61kb)", "http://arxiv.org/abs/1212.0079v1", null]], "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["guido governatori", "francesco olivieri", "antonino rotolo", "simone scannapieco"], "accepted": false, "id": "1212.0079"}, "pdf": {"name": "1212.0079.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n21 2.\n00 79\nv1 [\ncs .L"}, {"heading": "1. Introduction", "text": "The concept of permission plays an important role in many normative domains in that it may be crucial in characterising notions such as those of authorisation and derogation [11,30,33]. For example, sometimes it may happen that we mistakenly drive to a building site, or a road-work restricted area, with signs out saying \u201cNo admittance. Authorised personnel only\u201d. Or consider when we subscribe to an on-line sale agreement accepting to enter our personal data on the condition that this information is only used for shipping, and other necessary purposes to communicate with us or deliver the products to us. In both cases, a permission (to enter a restricted area or to use our personal data) is stated as an exception to a general prohibition.\nDespite this fact, the concept of permission is still elusive in this field of literature and has not been extensively investigated in deontic logic as the notion of obligation. For a long time, deontic logicians mostly viewed permission as the dual of obligation: Pa \u2261 \u00acO\u00aca. This view is unsatisfactory, as it hardly allows us to grasp the meaning of examples like the ones previously mentioned. For this, and other reasons, the attempt to reduce permissions to duals of obligations has been criticised (see [2,1]).\nOne important distinction that has traditionally contributed to a richer account of this concept is the one between weak (or negative) and strong (or positive) permission [35]. The former corresponds to saying that some a is permitted if \u00aca is not provable\nas mandatory. In other words, something is allowed by a code iff(only when) it is not prohibited by that code. At least when dealing with unconditional obligations, the notion of weak permission is trivially equivalent to the dual of obligation [25].\nThe latter concept of strong permission is more complicated, as it amounts to saying that some a is permitted by a code iff such a code explicitly states that a is permitted. It follows that a strong permission is not derived from the absence a prohibition, but is explicitly formulated in a permissive norm. The complexities of this concept depend on the fact that, besides \u201cthe items that a code explicitly pronounces to be permitted, there are others that in some sense follow from the explicit ones\u201d. The problem is hence \u201cto clarify the inference from one to the other\u201d [25, p. 391\u20132]. For example, if some b logically follows from a, which is strongly permitted, can we say that b is also strongly permitted?\nFeatures such as the distinction between strong and weak permission show the multifaceted nature of permission and permissive norms, which has been overlooked by most logicians for a long time. Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32]. These contributions can be roughly summarised into the following points:\n\u2022 despite some scepticism [28,27] and critical remarks [3,2] (a discussion of this related work can be found in Section 7), the distinction between weak and strong permission seems to be needed, otherwise it is rather hard to account for the fact that certain permissions make sense because they explicitly derogate to existing prohibitions while other permissions are not explicit and occur precisely because opposite prohibitions do not exist;\n\u2022 we may have different types of strong permissions (specifically permissions that logically follow from explicit permissive norms), according to whether\n* we statically determine what is actually permitted given what is obligatory and what is explicitly permitted;\n* we dynamically determine \u201cthe limits on what may be prohibited without violating static permissions\u201d [9];\n\u2022 especially in the law, strong permissions state exceptions to obligations [8]: indeed, derogating with a permission, for example, to a general prohibition to use private protected data provides an exception to such a prohibition;\n\u2022 strong permissions make sense even when any incompatible prohibitions are not in the legal system; permissions have a dynamic behaviour and prevent future prohibitions from holding in general, or applying to specific contexts [13].\nThis paper moves from the above points with the specific purpose of studying the different conceptual and computational aspects of weak and strong permissions. More precisely, the current contribution works in the following directions:\nPermissions and defeasibility. The concept of permission exhibits strong connections with the idea of defeasibility. Indeed, an example of a natural way to capture strong permissions acting as exceptions to obligations is the one where permissions rebut the conclusions of incompatible prescriptive norms [25,9,17,33] or undercut them (i.e., challenge an inference rule of an argument supporting an opposite obligation) [10]).\nPermissions and preferences. Sometimes explicit derogations of (existing or possible) prohibitions can be ranked according to some preference orderings. In other words, given any prescriptive norm prohibiting a, more derogations to this norm can be stated and ranked in a certain preference sequence. This situation may occur in domains such as the law, where for instance the lawmaker, when imposing duties for citizens, establishes conditions to lessen the effect of violating such duties to different degrees, or exempt people to comply with the duties. We will study these mechanisms and see that ordered sequences of strong permissions, derogating or making exceptions to prohibitions, have interesting similarities with ordered sequences of contrary-to-duty obligations [14,15]. This is a specific novelty of our contribution, as such sequences regard permissions (i.e., exceptions) which are not necessarily incompatible with each other.\nPermissions and computation. If, as we have mentioned, the concept of permission is mostly overlooked in literature, being that its computational treatment is basically neglected. To the best of our knowledge, no work in deontic logic has extensively explored the computational complexity of reasoning about different types of permission. Here, we will attempt a first analysis of the problem in the context of a modal extension of Defeasible Logic [5]. Modal Defeasible Logic is a computationally efficient logical framework able to capture various aspects of non-monotonic and modal reasoning, as well as the defeasible character of permissive norms, and recently a possible-world semantics for it has been proposed [18]. We will study how to compute weak and strong permissions with and without introducing a new nonmonotonic consequence relation for permission. The choice of Defeasible Logic is motivated by the fact that it is very efficient. Also, the formal language of its (nonmodal) modulo is simple, thus allowing us to isolate the deontic aspects of permissions and investigate their specific computational characteristics.\nThe layout of the paper is as follows. Section 2 introduces and informally discusses three types of defeasible permission in Defeasible Logic. Section 3 presents the technical machinery and states coherency and consistency results of the proposed extension. In Section 4 we develop the algorithmic means to state what is mandatory and what is permitted in a given theory, along with the corresponding computational results in Section 5. Section 6 discusses the system and illustrates how the logical framework presented in Section 3 is able to capture the three types of permission. Section 7 discusses some related work and provides a summary of the paper."}, {"heading": "2. Three concepts of permission", "text": "This section is meant to offer a brief and gentle introduction to our formal language and logic, and to discuss three different types of permission and their relation with the concept of normative defeasibility. Moreover, we illustrate the idea of preference over permissions that explicitly derogate to prohibitions.\nThese aspects will be formally handled in Section 3. The whole discussion of the computational aspects of permission in Defeasible Logic is postponed to Sections 4 and 5.\n2.1. Informal presentation of the logic\nLet us summarise the basic logical intuitions behind our framework.\n1. Permissive and prescriptive norms are represented by means of defeasible rules, whose conclusions normally follow unless they are defeated by contrary evidence. For example, the rule\nOrder \u21d2O Pay\nsays that, if we send a purchase order, then we will be defeasibly obliged to pay; the rule\nOrder,Creditor \u21d2P \u00acPay\nstates that if we send an order, in general we are not obliged to pay if we are creditors towards the vendor for the same amount.\n2. Rules introduce modalities: if we have the rule a \u21d2O b and a holds, then we obtain Ob. That is to say, in the scenario where conditions described by a hold, the obligation of doing b is active as well. The advantage is that explicitly deriving modal literals such as Ob adds expressive power to the language, since Ob may appear in the antecedent of other rules, which can then be triggered.\n3. For the sake of simplicity, modal literals can only occur in the antecedent of rules. In other words, we do not admit nested modalities, i.e., rules such as a \u21d2O Pb. This is in line with our idea that the applicability of rules labeled with modality \u2737 (where \u2737 can be O for obligation or P for permission) is the condition for deriving literals modalised with \u2737. 4. The symbols O and P are not simple labels: they are modalities. O is non-reflexive1: consequently, we do not have a conflict within the theory when \u00aca is the case and we derive that a is mandatory (Oa); this amounts to having a violation. The modality P works in such a way that two rules for P supporting a and \u00aca do not clash, but a rule like \u21d2P b attacks a rule such as \u21d2O \u00acb (and vice versa). 5. Like standard Defeasible Logic, our extension is able to establish the relative strength of any rule (thus to solve rule conflicts) and has two types of attackable rules: defeasible rules and defeaters. Defeaters in Defeasible Logic are a special kind of rules: they are used to prevent conclusions but not to support them. For example, the defeater\nSpecialOrder,PremiumCustomer \u2740O \u00acPayBy7Days\ncan prevent the derivation of the obligation for premium customers placing special orders to pay within the deadline of 7 days, but cannot be used to directly derive any conclusion.\n2.2. Permissions and defeasibility\nThe above framework, though simple, allows us to express three basic types of permissions as well as illustrate interesting connections with the idea of defeasibility.\n1As it is well-known, in a non-reflexive modal logic \u2737a does not imply a, where \u2737 is a modal operator.\nWeak permission. A first way to define permissions in Defeasible Logic is by simply considering weak permissions and stating that the opposite of what is permitted is not provable as obligatory. Let us consider a normative system consisting of the following two rules:\nr1 : Park,Vehicle \u21d2O \u00acEnter r2 : Park,Emergency \u21d2O Enter.\nHere the normative system does not contain any permissive norm. However, since Defeasible Logic is a sceptical non-monotonic logic, in case both r1 and r2 fire we neither conclude that it is prohibited nor that it is obligatory to enter, because we do not know which rule is stronger. Hence, in this context, both \u00acEnter and Enter are weakly permitted.\nAs already argued, this is the most direct way to define the idea of weak permission: some q is permitted by a code iff q is not prohibited by that code. Accordingly, saying that any literal q is weakly permitted corresponds to the failure of deriving\u00acq using rules for O. Notice that, in Defeasible Logic, this does not amount to obtain \u00acO\u00acq.\nExplicit permissions are defeaters. In Defeasible Logic any rule can be used to prevent the derivation of a conclusion. For instance, suppose there exists a norm that prohibits to U-turn at traffic lights unless there is a \u201cU-turn permitted\u201d sign:\nr1 : AtTrafficLight \u21d2O \u00acUturn r2 : AtTrafficLight,UturnSign\u21d2O Uturn.\nIn this example we use a defeasible rule for obligation to block the prohibition to U-turn. However, this is not satisfactory: if we do not know whether r2 is stronger than r1, then the best we can say is that U-turn is weakly permitted. Furthermore, if r2 prevails over r1, we derive that U-turn is obligatory.\nThus, there are good reasons to argue that defeaters for O are suitable to express an idea of strong permission2. Explicit rules such as r : a \u2740O q state that a is a specific reason for blocking the derivation of O\u00acq (but not for proving Oq). In other words, this rule does not support any conclusion, but states that \u00acq is deontically undesirable. Consider this example:\nr1 : Weekend,AirPollution \u21d2O \u00acUseCar r2 : Weekend,Emergency \u2740O UseCar.\nRule r1 states that on weekends it is forbidden to use private cars if a certain air pollution level is exceeded. Defeater r2 is in fact an exception to r1, and so it seems to capture the above idea that explicit permissive norms (especially in the law) provide exceptions to obligations.\nExplicit permissions using permissive rules. Another approach is based on introducing specific rules for deriving permissions [25,9]. Let us consider the following situation:\nr1 : Weekend,AirPollution \u21d2O \u00acUseCar r\u20322 : Emergency \u21d2P UseCar.\nAs r2 in the previous scenario, r\u20322 looks like an exception to r1. The apparent difference between r2 and r\u20322 is that the latter is directly used to prove that the use of the car is permitted (PUseCar) in case of emergencies. The question is: does it amount to a real difference?\n2The idea of using defeaters to introduce permissions was introduced in [19].\nAlthough r2 is a defeater, it is specifically used to derive the strong permission to use the car, like r\u20322. In addition, rules such as r \u2032 2 do not attack other permissive rules, but are in conflict only with rules for obligation intended to prove the opposite conclusion. This precisely holds for defeaters.\nMoreover, let us suppose to have the defeater s : a \u2740P b. Does s attack a rule like \u21d2P \u00acb?\nIf this is the case, s would be close to an obligation. The fact that Pb does not attack P\u00acb makes it pointless for s to introduce defeaters for P. But, if this is not the case, s could only attack \u21d2O \u00acb, thus being equivalent to s\u2032 : a \u2740O b.\nTherefore, although it is admissible to have defeaters, we do not need to distinguish defeaters for O from those for P. One way to mark the difference between \u2740 and \u21d2P is by stating that only the latter rule type admits ordered sequences of strong permissions in the head of a rule, which are supposed to derogate or make exceptions to prohibitions. This matter will be discussed in the next subsection.\n2.3. Permissions, obligations, and preferences\nThe introduction of ordered sequences of strong permissions in the head of a rule, which derogate or make exceptions to prohibitions, can be logically modelled by enriching the formal language and following these guidelines:\n1. In many domains, such as the law, norms often specify mandatory actions to be taken in case of their violation. In general, obligations in force after the violation of some other obligations correspond to contrary-to-duty (CTD) obligations. These constructions affect the formal characterisation of compliance since they identify situations that are not ideal, but still acceptable. A compact representation of CTDs may resort to the non-boolean connective \u2297 [14]: a formula like x \u21d2O a\u2297 b means that, if x is the case, then a is obligatory, but if the obligation a is not fulfilled, then the obligation b is activated and becomes in force until it is satisfied, or violated. 2. Concepts introduced at point 1 can be extended to permissive rules with the subscripted arrow \u21d2P by introducing the non-boolean connective \u2299 for sequences of permissions. As in the case of \u2297, given a rule like \u21d2P a\u2299b, we can proceed through the \u2299-chain to obtain the derivation of Pb. However, permissions cannot be violated, and consequently it does not make sense to obtain Pb from \u21d2P a\u2299b and \u00aca. In this case, the reason to proceed in the chain is rather that the normative system allows us to prove O\u00aca. Hence, \u2299 still establishes a preference order among strong permissions and, in case the opposite obligation is in force, another permission holds. This is significant especially when strong permissions are exceptions to obligations.\nIn this paper we take a neutral approach as to whether ordered sequences of obligations or permissions are either given explicitly, or inferred from other rules. However, we point out that normative documents often explicitly contains provision with such structures. A clear example of this is provided by the Australian \u201cNational Consumer Credit Protection Act 2009\u201d (Act No. 134 of 2009) which is structured in such a way that for every section establishing an obligation or a prohibition, the penalties for violating the provision are given in the section itself.\nExample 1 (National Consumer Credit Protection Act 2009). Section 29 (Prohibition on engaging in credit activities without a licence) of the act recites:\n(1) A person must not engage in a credit activity if the person does not hold a licence authorising the person to engage in the credit activity. Civil penalty: 2,000 penalty units. [. . . ] Criminal penalty: 200 penalty units, or 2 years imprisonment, or both.\nThis norm can be represented as\nr1 :\u21d2O \u00acCreditActivity\u2297 2000CivilPenaltyUnits\nr2 : CreditLicence \u21d2P CreditActivity\nwhere r2 > r1. The first rules state that in absence of other information a person is forbidden to engage in credit activities (O\u00acCreditActivity), and then the second rule establish an exception to the prohibition, or in other terms it recites a condition under which such activities are permitted. The section then continues by giving explicit exceptions (permissions) to the prohibition to engage in credit activity, even without a valid licence.\nSequences of permissions are a natural fit for expressions like \u201cthe subject is authorised, in order of preference, to do the following: (list)\u201d or \u201cthe subject is entitled, in order of preference, to one of the following: (list)\u201d. This is illustrated in the next example.\nExample 2 (U.S. Copyright Act). A concrete instance of sequences of permissions is given by Section 504(c)(1) (Remedies for infringement: Damages and profits) of the U.S. Copyright Act (17 USC \u00a7504).\nExcept as provided by clause (2) of this subsection, the copyright owner may elect, at any time before final judgment is rendered, to recover, instead of actual damages and profits, an award of statutory damages for all infringements involved in the action, with respect to any one work, for which any one infringer is liable individually, or for which any two or more infringers are liable jointly and severally, in a sum of not less than $750 or more than $30,000 as the court considers just. [. . . ]\nThe above provision can be modelled as\ninfringment,beforeJudgment \u21d2P ActualDamages\u2299 StatutoryDamages\nThe above rendering of the textual provision is based on the interpretation of the term \u2018instead\u2019, which suggests that the copyright owners are entitled by default the award of the actual damages and profits, but they may elect to recover statutory damages, which is then the second option if exercised by the relevant party.3\nAs we have just seen, chains of obligations are appropriate to capture the obligations and the penalties related to them. Furthermore, this kind of structure has been successfully used for applications in the area of business process compliance [21]. In a situation governed by the rule \u21d2O a\u2297 b and where \u00aca and b hold, the norm has been complied with (even if to a lower degree than if we had a). On the contrary, if we had two rules \u21d2O a and \u00aca \u21d2O b, then the first norm would have been violated, while the second would have been complied with. But in overall, the whole case would be not compliant [20].\n3Here we speak of entitlements or rights. A right is a permission on one party (in this case the copyright owner) generating an obligation on another party (in this case the infringer). For a more detailed discussion on the concept of right see [30].\nConsider the following example:\nr1 : Invoice \u21d2O PayWithin7days r2 : OPayWithin7days,\u00acPayWithin7days \u21d2O Pay5%Interest r3 : OPay5%Interest,\u00acPay5%Interest \u21d2O Pay10%Interest.\nWhat happens if a customer violates both the obligation to pay within 7 days after the invoice and the obligation to pay the 5% of interest, but she pays the total amount plus the 10% of interest? In the legal perspective the customer should be still compliant, but in this representation contract clauses r1 and r2 have been violated. However, if we represent the whole scenario with the single rule\nInvoice \u21d2O PayBy7days\u2297Pay5%Interest\u2297Pay10%Interest,\nthen the rule is not violated, and the customer is compliant with the contract. Even when the text of legal provisions does not explicitly have this form, there are cases where the joint interpretation of several legal provisions still leads to formulate applicable norms with orders among derogations.\nExample 3 (Formal equality and affirmative action). Art. 3, 1st paragraph, of the Italian constitution ensures formal equality of citizens (in fact, all individuals) before the law, namely, an equal legal treatment for everybody:\nAll citizens have equal social dignity and are equal before the law, without distinction of sex, race, language, religion, political opinion, personal and social conditions. [. . . ]\nThis general principle can be sometimes derogated, for example, when derogations are meant \u201cto remove those obstacles of an economic or social nature which constrain the freedom and equality of citizens\u201d (art. 3, 2nd par.). In fact, one may argue that permitting (which is different from imposing as mandatory) the adoption of affirmative action policies in favour of women (e.g., introducing quotas for women in politics and the job market) is a flexible legal measure to remove some of those obstacles. Now, suppose a quota for women is guaranteed in public institutions in hiring and promoting employees, but another similar derogation can be applied to disabled people. Imagine that, in a specific case, it is not possible to apply both derogations (for example, this would lead to exceeding the number of jobs available) and so we have to choose to hire a woman or a disabled man. In absence of any further legal provision, one possible solution is to balance both options with respect to the specific facts X of the case, thus ranking, in a rule r, these options in order of preference, given the facts X (on balancing, see [4,31]). For instance, if disabled men should be favoured over non-disabled women (because disability in this case reinforces a more serious discrimination or disadvantage) then r is the following:\nr : X \u21d2P Hire Disabled Men\u2299Hire NonDisabled Women\nThe reason why we should still keep as a second option Hire NonDisabled Women depends on the fact that we can draw only defeasibly the permission of Hire Disabled Men. Indeed, we have only considered art. 3 of the Italian constitution but other legal provisions or factual reasons could block this conclusion. For example, suppose that the disabled person applying for the job was some years earlier convicted of the crime of belonging to a mafia organisation, while the law prohibits in general and without exceptions for public institutions to hire people who committed that crime. Or imagine that,\nin the meantime, the disabled man has withdrawn his request for a job. In both cases, despite X occurs, the first option does not hold and, all things considered, the second one can be applied in order to derogate to art. 3, 1st par., of the Italian constitution."}, {"heading": "3. Defeasible Deontic Logic with strong permission", "text": "This section begins by introducing the language adopted to formalise obligations and strong permissions in DL, and describing the inferential mechanism in the form of proof conditions defining the logic. Finally, we show that the proposed formalisation enjoys properties appropriate to model the notion of strong permission. We will proceed incrementally: this section, as well as Section 4, works only with obligations and strong permissions expressed by rules for P. In Section 6 we will show how weak permissions and strong permissions based on defeaters can be easily captured in the framework.\nWe consider a logic whose language is defined as follows.\nDefinition 1 (Language). Let PROP be a set of propositional atoms, MOD = {O,P} the set of modal operators where O is the modality for the obligation and P for permission.\n\u2022 The set Lit = PROP\u222a{\u00acp | p \u2208 PROP} denotes the set of literals. \u2022 The complementary of a literal q is denoted by \u223cq; if q is a positive literal p, then \u223cq is \u00acp, and if q is a negative literal \u00acp, then \u223cq is p. \u2022 The set of modal literals is ModLit = {\u2737l,\u00ac\u2737l | l \u2208 Lit, \u2737 \u2208 MOD}.\nWe introduce two preference operators, \u2297 for obligations and \u2299 for permissions, and we will use \u2298 when we refer to one of them generically. These operators are used to build chains of preferences, called \u2298-expressions. The formation rules for well-formed \u2298-expressions are:\n(a) every literal l \u2208 Lit is an \u2298-expression; (b) if A is an \u2297-expression, B is an \u2299-expression and c1, . . . ,ck \u2208 Lit, then A\u2297c1\u2297\u00b7\u00b7 \u00b7\u2297\nck is an \u2297-expression, B\u2299c1\u2299\u00b7\u00b7 \u00b7\u2299ck is an \u2299-expression, A\u2299B is an \u2298-expression; (c) every \u2297-expression and \u2299-expression is an \u2298-expression; (d) nothing else is an \u2298-expression.\nIn addition we stipulate that \u2297 and \u2299 obey the following properties:\n1. a\u2298 (b\u2298 c) = (a\u2298 b)\u2298 c (associativity); 2. \u2298ni=1ai = (\u2298 k\u22121 i=1 ai)\u2298 (\u2298 n i=k+1ai) where there exists j such that a j = ak and j < k\n(duplication and contraction on the right).\nGiven an \u2298-expression A, the length of A is the number of literals in it. Given an \u2298- expression A\u2298b\u2298C (where A and C can be empty), the index of b is the length of A\u2298b. We also say that b appears at index n in A\u2298 b if the length of A\u2298 b is n.\nWe adopt the standard Defeasible Logic definitions of strict rules, defeasible rules, and defeaters [5]. However for the sake of simplicity, and to better focus on the nonmonotonic aspects that Defeasible Logic offers, in the remainder we use only defeasible rules and defeaters. In addition, we have to take the modal operators into account.\nDefinition 2 (Rules). Let Lab be a set of arbitrary labels. Every rule is of the type\nr : A(r) \u2192\u0592C(r)\nwhere\n1. r \u2208 Lab is the name of the rule; 2. A(r) = {a1, . . . ,an}, the antecedent (or body) of the rule, is the set of the premises of\nthe rule (alternatively, it can be understood as the conjunction of all the literals in it). Each ai is either a literal, or a modal literal; 3. \u2192\u0592\u2208 {\u21d2\u2737,\u2740} denotes the type of the rule. If \u2192\u0592 is \u21d2\u2737, the rule is a defeasible rule, while if \u2192\u0592 is \u2740, the rule is a defeater. The subscript \u2737 \u2208 MOD in defeasible rules represents the modality introduced by the rule itself: the mode of a rule tells us what kind of conclusion we obtain from the rule. As we argued in Section 2, we do not need to label \u2740 with any modality; 4. C(r) is the consequent (or head) of the rule, which is an \u2298-expression. Two constraints apply on the consequent of a rule: (a) if \u2192\u0592 is \u2740, then C(r) is a single literal; (b) if \u2737= P, then C(r) must be an \u2299-expression.\nGiven a set of rules R, we will use the following abbreviations for specific subsets of rules:\n\u2022 Rde f denotes the set of all defeaters in the set R; \u2022 R[q,n] is the set of rules where q appears at index n in the consequent. The set of\n(defeasible) rules where q appears at any index n is denoted by R[q]; \u2022 R\u2737 with \u2737 \u2208 MOD denotes the set of all rules in R introducing modality \u2737; \u2022 RO[q,n] is the set of (defeasible) rules where q appears at index n and the operator\npreceding it is \u2297 for n > 1 or the mode of the rule is O for n = 1. The set of (defeasible) rules where q appears at any index n satisfying the above constraints is denoted by RO[q]; \u2022 similarly RP[q,n] is the set of rules where q appears at index n, and the operator preceding it is \u2299 for n > 1 or the mode of the rule is P for n = 1. The set of (defeasible) rules where q appears at any index n satisfying the above constraints is denoted by RP[q].\nDefinition 3. A Defeasible Theory is a structure D = (F,R,>), where F, the set of facts, is a set of literals and modal literals, R is a set of rules and >, the superiority relation, is a binary relation over R.\nA theory corresponds to a normative system, i.e., a set of norms which are modelled by rules. The superiority relation is used for conflicting rules, i.e., rules whose conclusions are complementary literals, in case both rules fire. Notice that we do not impose any restriction on the superiority relation: it is just a binary relation determining the relative strength of two rules.\nDefinition 4. A proof P in a defeasible theory D is a linear sequence P(1) . . .P(n) of tagged literals in the form of +\u2202\u2737q and \u2212\u2202\u2737q with \u2737\u2208 MOD, where P(1) . . .P(n) satisfy the proof conditions given in Definitions 8\u201311.\nThe tagged literal +\u2202\u2737q means that q is defeasibly provable in D with modality \u2737, while \u2212\u2202\u2737q means that q is defeasibly refuted with modality \u2737. The initial part of length i of a proof P is denoted by P(1..i).\nThe first thing to do is to define when a rule is applicable or discarded. A rule is applicable for a literal q if q occurs in the head of the rule, all non-modal literals in the antecedent are given as facts and all the modal literals have been defeasibly proved (with the appropriate modalities). On the other hand, a rule is discarded if at least one of the modal literals in the antecedent has not been proved (or is not a fact in the case\nof non-modal literals). However, as literal q might not appear as the first element in an \u2298-expression in the head of the rule, some additional conditions on the consequent of rules must be satisfied. Defining when a rule is applicable or discarded is essential to characterise the notion of provability for obligations (\u00b1\u2202O) and permissions (\u00b1\u2202P).\nDefinition 5. A rule r \u2208R[q, j] such that C(r) = c1\u2297\u00b7\u00b7 \u00b7\u2297cl\u22121\u2299cl \u2299\u00b7\u00b7 \u00b7\u2299cn is applicable for literal q at index j, with 1 \u2264 j < l, in the condition for \u00b1\u2202O iff\n(1) for all ai \u2208 A(r): (1.1) if ai = Ol then +\u2202Ol \u2208 P(1..n); (1.2) if ai = \u00acOl then \u2212\u2202Ol \u2208 P(1..n); (1.3) if ai = Pl then +\u2202Pl \u2208 P(1..n); (1.4) if ai = \u00acPl then \u2212\u2202Pl \u2208 P(1..n); (1.5) if ai = l \u2208 Lit then l \u2208 F, and (2) for all ck \u2208C(r), 1 \u2264 k < j, +\u2202Ock \u2208 P(1..n) and (ck 6\u2208 F or \u223cck \u2208 F).\nConditions (1.1)\u2013(1.5) represent the requirements on the antecedent as informally described above; condition (2) on the head of the rule states that each element ck prior to q must be derived as an obligation, and a violation of such obligation has occurred.\nDefinition 6. A rule r \u2208R[q, j] such that C(r) = c1\u2297\u00b7\u00b7 \u00b7\u2297cl\u22121\u2299cl \u2299\u00b7\u00b7 \u00b7\u2299cn is applicable for literal q at index j, with l \u2264 j \u2264 n in the condition for \u00b1\u2202P iff\n(1) for all ai \u2208 A(r): (1.1) if ai = Ol then +\u2202Ol \u2208 P(1..n); (1.2) if ai = \u00acOl then \u2212\u2202Ol \u2208 P(1..n); (1.3) if ai = Pl then +\u2202Pl \u2208 P(1..n); (1.4) if ai = \u00acPl then \u2212\u2202Pl \u2208 P(1..n); (1.5) if ai = l \u2208 Lit then l \u2208 F, and (2) for all ck \u2208C(r), 1 \u2264 k < l, +\u2202Ock \u2208 P(1..n) and (ck 6\u2208 F or \u223cck \u2208 F), and (3) for all ck \u2208C(r), l \u2264 k < j, \u2212\u2202Pck \u2208 P(1..n).\nThe only difference with respect to \u00b1\u2202O is the presence of an additional condition, stating that all permissions prior to q must be refuted (condition (3)).\nDefinition 7. A rule r \u2208R[q, j] such that C(r) = c1\u2297\u00b7\u00b7 \u00b7\u2297cl\u22121\u2299cl \u2299\u00b7\u00b7 \u00b7\u2299cn is discarded for literal q at index j, with 1 \u2264 j \u2264 n in the condition for \u00b1\u2202O or \u00b1\u2202P iff\n(1) there exists ai \u2208 A(r) such that (1.1) if ai = Ol then \u2212\u2202Ol \u2208 P(1..n); (1.2) if ai = \u00acOl then +\u2202Ol \u2208 P(1..n); (1.3) if ai = Pl then \u2212\u2202Pl \u2208 P(1..n); (1.4) if ai = \u00acPl then +\u2202Pl \u2208 P(1..n); (1.5) if ai = l \u2208 Lit then l 6\u2208 F, or (2) there exists ck \u2208C(r), 1 \u2264 k < l, such that either \u2212\u2202Ock \u2208 P(1..n) or ck \u2208 F, or (3) there exists ck \u2208C(r), l \u2264 k < j, such that +\u2202Pck \u2208 P(1..n). In this case, condition (2) ensures that an obligation prior to q in the chain is not in force or has already been fulfilled (thus, no reparation is required), while condition (3) states that there exists at least one explicit derived permission prior to q.\nWe now introduce the proof conditions for \u00b1\u2202O and \u00b1\u2202P.\nDefinition 8. The proof condition of defeasible provability for obligation is\n+\u2202O: If P(n+ 1) = +\u2202Oq then (1) Oq \u2208 F or\n(2.1) O\u223cq 6\u2208 F and \u00acOq 6\u2208 F and P\u223cq 6\u2208 F and (2.2) \u2203r \u2208 RO[q, i] such that r is applicable for q, and (2.3) \u2200s \u2208 R[\u223cq, j], either\n(2.3.1) s is discarded, or either (2.3.2) s \u2208 RO and \u2203t \u2208 R[q,k] such that t is applicable for q and t > s, or (2.3.3) s \u2208 RP \u222aRde f and \u2203t \u2208 RO[q,k] such that t is applicable for q and t > s.\nTo show that q is defeasibly provable as an obligation, there are two ways: (1) the obligation of q is a fact, or (2) q must be derived by the rules of the theory. In the second case, three conditions must hold: (2.1) q does not appear as not obligatory as a fact, and \u223cq is neither provable as an obligation nor as a permission using the set of modal facts at hand; (2.2) there must be a rule introducing the obligation for q which can apply; (2.3) every rule s for \u223cq is either discarded or defeated by a stronger rule for q. If s is an obligation rule, then it can be counterattacked by any type of rule; if s is a defeater or a permission rule, then only an obligation rule can counterattack it.\nThe strong negation of the above definition gives us the negative proof condition for obligation. Notice that the strong negation of a formula is closely related to the function that simplifies a formula by moving all negations to an inner most position in the resulting formula, and replaces the positive tags with the respective negative tags, and the other way around [6,17].\nDefinition 9. The proof condition of defeasible refutability for obligation is\n\u2212\u2202O: If P(n+ 1) =\u2212\u2202Oq then (1) Oq 6\u2208 F and either\n(2.1) O\u223cq \u2208 F or \u00acOq \u2208 F or P\u223cq \u2208 F or (2.2) \u2200r \u2208 RO[q, i] either r is discarded for q, or (2.3) \u2203s \u2208 R[\u223cq, j] such that\n(2.3.1) s is applicable for \u223cq, and (2.3.2) if s \u2208 RO then \u2200t \u2208 R[q,k], either t is discarded or t 6> s, and (2.3.3) if s \u2208 RP \u222aRde f then \u2200t \u2208 RO[q,k], either t is discarded or t 6> s.\nWe now introduce and briefly explain the proof conditions for permission.\nDefinition 10. The proof condition of defeasible provability for permission is\n+\u2202P: If P(n+ 1) = +\u2202Pq then (1) Pq \u2208 F or\n(2.1) O\u223cq 6\u2208 F and \u00acPq 6\u2208 F and (2.2) \u2203r \u2208 RP[q, i] such that r is applicable for q, and (2.3) \u2200s \u2208 RO[\u223cq, j], either\n(2.3.1) s is discarded for \u223cq, or (2.3.2) \u2203t \u2208 R[q,k] such that t is applicable for q and t > s.\nThis proof condition differs from its counterpart for obligation in two aspects: we allow scenarios where both +\u2202Pq and +\u2202P\u223cq hold, but +\u2202O\u223cq must not hold (clause 2.1); any applicable rule s supporting \u223cq can be counterattacked by any type of rule t supporting\nq, as s must be an obligation rule, and permission rules can only be attacked by obligation rules (clause 2.3).\nAs argued above, we define the negative proof condition for permission as the strong negation of that for +\u2202P. Definition 11. The proof condition of defeasible refutability for permission is\n\u2212\u2202P: If P(n+ 1) =\u2212\u2202Pq then (1) Pq 6\u2208 F and either\n(2.1) O\u223cq \u2208 F or \u00acPq \u2208 F, or (2.2) \u2200r \u2208 RP[q, i], either r is discarded, or (2.3) \u2203s \u2208 RO[\u223cq, j] such that\n(2.3.1) s is applicable for \u223cq, and (2.3.2) \u2200t \u2208 R[q,k], either t is discarded or t 6> s.\nThe logic resulting from the above proof conditions enjoys properties describing the appropriate behaviour of the modal operators.\nDefinition 12. A Defeasible Theory D = (F,R,>) is consistent iff > is acyclic and F does not contain pairs of complementary (modal) literals, that is if D does not contain pairs like Ol and \u00acOl, Pl and \u00acPl, or l and \u223cl. The theory D is O-consistent iff > is acyclic and for any literal l, F does not contain any of the following pairs: Ol and O\u223cl, Ol and P\u223cl.\nAs usual, given a Defeasible Theory D, we will use D \u22a2 \u00b1\u2202\u2737l iff there is a proof P in D such that P(n) =\u00b1\u2202\u2737l for an index n. Proposition 13. Let D be a consistent Defeasible Theory, and \u2737 \u2208 MOD. For any literal l, it is not possible to have both D \u22a2+\u2202\u2737l and D \u22a2 \u2212\u2202\u2737l.\nProof. It straightforwardly follows from the principle of strong negation proposed in [6,17]: indeed, the negative proof tags proposed in this work are defined as the strong negation of the positive ones.\nThe meaning of the above proposition is that it is not possible to prove that a literal is at the same time obligatory and not obligatory, or permitted and not permitted.\nProposition 14. Let D be an O-consistent Defeasible Theory. For any literal l, it is not possible to have both D \u22a2+\u2202Ol and D \u22a2+\u2202O\u223cl.\nProof. We split the proof in two cases: (i) at least one of Ol and O\u223cl is in F , and (ii) none of them is in F .\nFor (i) the proposition immediately follows by the assumption of O-consistency. Suppose that Ol \u2208 F . Then clause (1) of +\u2202O holds for l. By O-consistency O\u223cl /\u2208 F , thus clause (1) of +\u2202O does not hold for \u223cl. Since Ol \u2208 F , clause (2.1) of +\u2202O is always falsified for \u223cl, and the thesis is proved.\nFor (ii): First of all, it is easy to verify that no rule can be at the same time applicable and discarded for the derivation of \u00b1\u2202Ol(\u223cl). Then, since both +\u2202Ol and +\u2202O\u223cl hold, we have that there are applicable obligation rules for both l and \u223cl. This means that clause (2.3.2) holds for both +\u2202Ol and +\u2202O\u223cl. Therefore, for every applicable rule for l there is an applicable rule for \u223cl stronger than the rule for l, and symmetrically, for every applicable rule for \u223cl there is an applicable rule for l stronger than the rule for \u223cl. Since the set of rules in a theory is finite, the situation we have just described is possible only\nif there is a cycle in the transitive closure of the superiority relation. Therefore, we have a contradiction because the superiority relation is assumed to be acyclic (the transitive closure of the relation does not contain cycles).\nThe meaning of the proposition is that no formula is both obligatory and forbidden at the same time. However, the proposition does not hold for permission. It is possible to have both the explicit permission of l and the explicit permission of \u223cl.\nThe relationships between permissions and obligations are governed by the following proposition:\nProposition 15. Let D be an O-consistent Defeasible Theory. For any literal l:\n1. if D \u22a2+\u2202Ol, then D \u22a2 \u2212\u2202O\u223cl; 2. if D \u22a2+\u2202Ol, then D \u22a2 \u2212\u2202P\u223cl; 3. if D \u22a2+\u2202Pl, then D \u22a2 \u2212\u2202O\u223cl.\nProof. 1. Let D be an O-consistent Defeasible Theory, and D \u22a2 +\u2202Ol. Literal \u223cl can be in only one of the following mutually exclusive situations: (i) D \u22a2 +\u2202O\u223cl; (ii) D \u22a2 \u2212\u2202O\u223cl; (iii) D 6\u22a2 \u00b1\u2202O\u223cl. Proposition 14 allows us to exclude case (i) since D \u22a2+\u2202Ol by hypothesis. Situation (iii) denotes situations where there are loops in the theory involving literal \u223cl4, but inevitably this would affect also the provability of literal l, i.e., we would not be able to give a proof for +\u2202Ol as well. This is in contradiction with the hypothesis; thus, situation (ii) must be the case.\n2. Let D be an O-consistent Defeasible Theory, and D \u22a2+\u2202Ol. By definition of proof conditions for +\u2202O, statements (1)\u2013(2.3.3) hold.\nIf Ol \u2208 F , then condition (2.1) of \u2212\u2202P holds for \u223cl. Furthermore, by O-consistency of D, Ol \u2208 F implies condition (1) of \u2212\u2202P for \u223cl, and we obtain the thesis.\nOtherwise, from condition (2.2) of +\u2202O, conditions (2.3) and (2.3.1) of \u2212\u2202P follow. Again, we can iterate the same reasoning for condition (2.3.1) of +\u2202O implying condition (2.2) of \u2212\u2202P. It remains to consider conditions (2.3.2) and (2.3.3) of +\u2202O. In the first case, the attacking rule s is an obligation rule, thus it is of no interest in this proof since in condition (2.2) of \u2212\u2202P we consider only permission rules. Thus, for the latter case, we know there exists a rule t for obligation that is stronger than s, and this tuple of rules (t,s) in condition (2.3.3) for +\u2202O is the equivalent but opposite tuple of the rules used in condition (2.3.2) for \u2212\u2202P. But, to analyse in an exhaustive way condition (2.3.2) of \u2212\u2202P, we have to take into consideration the whole set of rules S = {s1, . . . ,sn} for permission leading to \u223cl, against the set of rules T = {t1, . . . , tm} for obligation leading to l.5 For each subset S\u2032 of S, every rule s\u2032 \u2208 S\u2032 is either discarded, or there exists a rule t \u2032 \u2208 T that is stronger (the existence of t \u2032 is guaranteed by the fact that +\u2202Ol holds by hypothesis). We can now remove S\u2032 from S (as it cannot be used for proving +\u2202P\u223cl), reducing the number of elements in S. The iteration of this procedure eventually empties the set S since the number of rules in D is finite, and the superiority relation is acyclic.\n3. Let D be an O-consistent Defeasible Theory, and D\u22a2+\u2202Pl. By definition of proof conditions for +\u2202P, statements (1) or (2.1)\u2013(2.3.2) hold. The proof follows step by step that of Part 2 of the proposition. Moreover, steps for conditions (1)\u2013(2.2) are the mere\n4For examples situations like O\u223cl \u21d2O \u223cl, where the proof conditions will generate a loop without introducing a proof.\n5Notice that the rules in conditions (2.2) and (2.3.3) are different rules: they form a team that can defeat teams of rules for the opposite.\njuxtaposition. It remains to analyse the interrelationship between condition (2.3) of +\u2202P and conditions (2.3.2)\u2013(2.3.3) of \u2212\u2202O. Since condition (2.3) of +\u2202P takes into account only rules for obligation which are systematically defeated with an analogous process of rule elimination, thus conditions (2.3.2) and (2.3.3) of \u2212\u2202O are satisfied.\nThe combination of Part 2 and 3 of Proposition 15 describes the consistency between obligation and permission. Part 3 also gives the relationships between strong and weak permission. As we discussed in Section 1, a weak permission is a permission obtained from the failure to derive the opposite obligation. This means that we have the weak permission of p when we have \u2212\u2202O\u223cp, and Part 3 guarantees that we have it when +\u2202P p holds.\nWe conclude this section showing how the logic developed hitherto works with the example introduced at the end of Section 2.\nExample. Let us recall the scenario reported at the end of Section 2, and formally explain the conclusions of the theory using applicability of rules and proof tags as defined above. The primary obligation to call the ambulance is obtained (i.e., we derive +\u2202OCallAmbulance), but the obligation is violated as \u00acCallAmbulance \u2208 F , making r1 applicable for Help; rule r3 is applicable for literal \u00acHelp and could attack r1, but r1 > r3, thus we have also +\u2202OHelp. Also CallFiremen is derived as an obligation but it is violated, thus rule r2 is applicable for literal Extinguish in the condition for +\u2202O. As +\u2202OHelp holds, r3 is applicable for \u00acExtinguish, and r3 > r2, thus we derive +\u2202P\u00acExtinguish."}, {"heading": "4. Algorithms for defeasible extension", "text": "We now present procedures and algorithms apt to compute the extension of a finite Defeasible Theory, i.e., a theory where the set of facts and rules is finite, in order to bound the complexity of the logic introduced in the previous sections. The algorithms are based on the algorithm proposed by Maher [23] to show that Defeasible Logic has linear complexity; the algorithms also incorporate the notion of inferiorly defeated rules proposed by [22] to handle directly the superiority relation.\nThis section is divided in three main parts. In the first part we give the formal definitions and introduce the notation adopted. The second part, which contains the main body, describes the required computations: Algorithms 5 and 4 effectively compute the defeasible extension of a Defeasible Theory given as an input, while Algorithms 1, 2, and 3 are but auxiliary procedures that execute all the necessary operations due to any modification of the extension. Each algorithm is followed by a technical explanation on how it works. In the third part we present formal properties that are meant to prove the computational results proposed in Section 5.\n4.1. Notation for the algorithms\nWe introduce the notation relevant to our framework. Given a Defeasible Theory D, HBD is the set of literals such that the literal or its complement appears in D, where \u2018appears\u2019 means that it is a sub-formula of a modal literal occurring in the theory. The modal Herbrand Base of D is HB = {\u2737l|\u2737 \u2208 MOD, l \u2208 HBD}. Accordingly, the extension of a Defeasible Theory is defined as follows.\nDefinition 16. Given a Defeasible Theory D, the defeasible extension of D is defined as\nE(D) = (+\u2202O,+\u2202P,\u2212\u2202O,\u2212\u2202P),\nwhere \u00b1\u2202\u2737 = {l \u2208 HBD : D \u22a2\u00b1\u2202\u2737l} with \u2737 \u2208 MOD. We define two Defeasible Theories D and D\u2032 to be equivalent (in notation D \u2261 D\u2032) if they have the same extensions, i.e., E(D) = E(D\u2032).\nThe next definition introduces two syntactical operations on the consequent of rules used by the algorithms, whose meaning will be clear in the remainder.\nDefinition 17. Let c1 = a1 \u2298\u00b7\u00b7 \u00b7\u2298al\u22121 and c2 = ai+1 \u2298\u00b7\u00b7 \u00b7\u2298an be two (possibly empty) \u2298-expressions such that ai does not occur in them, and c = c1 \u2298 ai \u2298 c2 is an \u2298- expression. Let r be a rule with form A(r) \u2192\u0592 c. We define the operation of truncation of the consequent c at ai as:\nA(r) \u2192\u0592 c!ai = A(r) \u2192\u0592 c1 \u2298 ai.\nWe define the removal of ai from the consequent c, A(r) \u2192\u0592 c\u2296 ai, as:\nA(r) \u2192\u0592 c\u2296 ai =    A(r)\u21d2O c1 \u2297 c2 if r is A(r)\u21d2O c1 \u2297 ai \u2297 c2 A(r)\u21d2O c1 \u2299 c2 if r is A(r)\u21d2O c1 \u2297 ai \u2299 c2 A(r)\u21d2\u2737\u2208MOD c1 \u2299 c2 if r is A(r)\u21d2\u2737\u2208MOD c1 \u2299 ai\u2299 c2 A(r)\u21d2P c2 if r is A(r)\u21d2O ai \u2299 c2\nThe next definition extends the concept of complement presented in Section 3 for modal literals, and it is used to establish the logical connection among proved and refuted literals in our framework.\nDefinition 18. We define the complement of a given literal l, denoted by l\u0303, as:\n1. If l \u2208 Lit, then l\u0303 = {\u223cl}; 2. If l = Om, then l\u0303 = {\u00acOm,O\u223cm,P\u223cm}; 3. If l = \u00acOm, then l\u0303 = {Om}; 4. If l = Pm, then l\u0303 = {\u00acPm,O\u223cm}; 5. If l = \u00acPm, then l\u0303 = {Pm}.\nGiven \u2737 \u2208 MOD, the sets \u00b1\u2202\u2737 denote the global sets of defeasible conclusions (i.e., the set of literals for which condition\u00b1\u2202\u2737 holds), while \u2202\u00b1\u2737 are the corresponding temporary sets. Notice that the complement of \u00acPm does not include Om (and vice versa) because the failure to derive Pm cannot depend on the derivation of Om, but rather on the fact that O\u223cm is the case.\n4.2. Algorithms\nWe begin this subsection by reporting and explaining the three auxiliary procedures used in the two main algorithms for the computation of the extension of a logic.\nAlgorithm 1 DISCARD performs all operations related to when \u2212\u2202\u2737l holds for a given literal l.\nFirst of all, literal l is placed in the local set of refuted literals with modality \u2737 (line 2). Furthermore, condition \u2212\u2202\u2737l makes literal \u00ac\u2737l provable, therefore it can be safely removed from all rules where it appears as an antecedent, being that its contribution to a rule being applicable or refuted has already been established. Since l cannot be\nAlgorithm 1 Discard\n1: procedure DISCARD(l \u2208 Lit,\u2737 \u2208 {P,O}) 2: \u2202\u2212\n\u2737 \u2190 \u2202\u2212 \u2737 \u222a{l}\n3: R \u2190{A(r)\\ {\u00ac\u2737l} \u2192\u0592C(r)| r \u2208 R} \\ {r \u2208 R| \u2737l \u2208 A(r)} 4: >\u2190> \\{(r,s),(s,r) \u2208> | \u2737l \u2208 A(r)} 5: HB \u2190 HB\\ {\u2737l} 6: end procedure\nproved with modality \u2737, every rule containing \u2737l in its body is discarded by clauses (1.1) and (1.3) of Definition 7, and thus we can remove such rules without affecting the conclusions that can be derived from the theory (line 3). In addition, we remove all pairs involving the rules from the superiority relation (line 4), and \u2737l from the modal Herbrand Base (line 5).\nAlgorithms 2 MODIFYOBL and 3 MODIFYPERM behave in a very similar way: both of them modify the theory to accommodate the positive derivation of a modal literal. They only differ on the kind of rules they manipulate (obligation and permission rules, respectively).\nAlgorithm 2 ModifyObl\n1: procedure MODIFYOBL(l \u2208 Lit) 2: \u2202+O \u2190 \u2202 + O \u222a{l} 3: \u2202\u2212O \u2190 \u2202 \u2212 O \u222a{\u223cl} 4: \u2202\u2212P \u2190 \u2202 \u2212 P \u222a{\u223cl} 5: HB \u2190 HB\\ {Ol,O\u223cl,P\u223cl} 6: if Ol 6\u2208 F then 7: R \u2190{A(r)\\ {Ol,\u00acO\u223cl} \u2192\u0592C(r)| r \u2208 R} \\ {r \u2208 R| A(r)\u2229 O\u0303l 6= /0} 8: >\u2190> \\{(r,s),(s,r) \u2208> | A(r)\u2229 O\u0303l 6= /0} 9: end if\n10: R \u2190{A(r) \u2192\u0592C(r)\u2296 l| r \u2208 RO[l,n] for an index n} 11: R \u2190{A(r) \u2192\u0592C(r)\u2296\u223cl| r \u2208 RP[\u223cl,n] for an index n} 12: R \u2190{A(r) \u2192\u0592C(r)!\u223cl \u2296\u223cl| r \u2208 RO[\u223cl,n] for an index n} 13: end procedure\nThe input of both procedures is a literal l. As such, we add it to the corresponding set of derived literals (line 2). Since D\u22a2+\u2202Ol implies D\u22a2\u2212\u2202O\u223cl,\u2212\u2202P\u223cl by Proposition 15 Part 1 and 2, and D \u22a2+\u2202Pl implies D \u22a2\u2212\u2202O\u223cl by Proposition 15 Part 3, we also remove \u223cl from the appropriate sets of refuted literals; then the modal literal along with the set of its complementaries6 are removed from the Modal Herbrand Base (lines 3\u20135 and 3\u20134, respectively). Lines 6\u20139 and 5\u20138, respectively, follow the same reasoning of line 3 in Algorithm 1 DISCARD. Finally, the rules of the theory are modified on account of the modality the literal is derived with as well as the conditions for the applicability of a rule given in Definitions 5\u20137 (lines 10\u201312 and 9\u201310, respectively).\n6Notice that we do not remove any negative modal literal from HB by definition of modal Herbrand Base.\nAlgorithm 3 ModifyPerm\n1: procedure MODIFYPERM(l \u2208 Lit) 2: \u2202+P \u2190 \u2202 + P \u222a{l} 3: \u2202\u2212O \u2190 \u2202 \u2212 O \u222a{\u223cl} 4: HB \u2190 HB\\ {Pl,O\u223cl} 5: if Pl 6\u2208 F then 6: R \u2190{A(r)\\ {Pl,\u00acO\u223cl} \u2192\u0592C(r)| r \u2208 R} \\ {r \u2208 R| A(r)\u2229 P\u0303l 6= /0} 7: >\u2190> \\{(r,s),(s,r) \u2208> | A(r)\u2229 P\u0303l 6= /0} 8: end if 9: R \u2190{A(r) \u2192\u0592C(r)!\u223cl \u2296\u223cl| r \u2208 RO[\u223cl,n] for an index n}\n10: R \u2190{A(r) \u2192\u0592C(r)!l| r \u2208 RP[l,n] for an index n} 11: end procedure\nAlgorithm 4 CheckFacts\n1: procedure CHECKFACTS 2: for l \u2208 F do 3: R \u2190{A(r)\\ {l} \u2192\u0592C(r)| r \u2208 R} \\ {r \u2208 R| A(r)\u2229 l\u0303 6= /0} 4: >\u2190> \\{(r,s),(s,r) \u2208> | A(r)\u2229 l\u0303 6= /0} 5: if l \u2208 Lit then 6: R \u2190 {A(r) \u2192\u0592C(r)!l| r \u2208 RO[l,n] for an index n} 7: end if 8: if l = Om then 9: MODIFYOBL(m)\n10: end if 11: if l = \u00acOm then 12: \u2212\u2202O \u2190\u2212\u2202O \u222a{m} 13: HB \u2190 HB\\ {Om} 14: R \u2190 {A(r) \u2192\u0592C(r)!m\u2296m| r \u2208 RO[m,n] for an index n} 15: end if 16: if l = Pm then 17: MODIFYPERM(m) 18: end if 19: if l = \u00acPm then 20: \u2212\u2202P \u2190\u2212\u2202P \u222a{m} 21: HB \u2190 HB\\ {Pm,Om} 22: R \u2190 {A(r)\\ \u2192\u0592C(r)\u2296m| r \u2208 RP[m,n] for an index n} 23: end if 24: end for 25: end procedure\nBefore describing how Algorithm 4 works, let us recall some concepts about the provability of a literal. Given a Defeasible Theory, a modal literal \u2737l \u2208 F is trivially proved with the corresponding modality by definition. Furthermore, we also stated that a non-modal literal is proved within the theory if it is a fact.\nBased on these facts, the procedure described in Algorithm 4 CHECKFACTS begins by removing all factual literals from every rule where they appear as an antecedent; it also\nremoves all rules whose body contains a complementary literal (line 3). The superiority relation is then modified in view of this operation (line 4).\nFrom this point on, different operations are performed on account of which kind of factual literal is considered.\n1. If l is a non-modal literal, we truncate the head of all rules at l, where l appears as an obligation (lines 5\u20137);\n2. if l is a positive modal literal for obligation (lines 8\u201310) or permission (lines 16\u201318), then Algorithm 2 MODIFYOBL (respectively Algorithm 3 MODIFYPERM) is called to properly modify the theory. Notice that operations in lines 7\u20138 of Algorithm 2 MODIFYOBL and 6\u20137 of Algorithm 3 MODIFYPERM are not performed in this case, since they are equivalent to lines 3\u20134 of Algorithm 4 CHECKFACTS; 3. if l is a negative modal literal for obligation \u00acOm (lines 11\u201315), then \u2212\u2202Om holds, and clause (2) of Definition 7 makes all rules containing m as an obligation in their heads discarded for all literals after m. Hence, we truncate all these chains at m, and then remove m (line 14); 4. if l is a negative modal literal for permission \u00acPm (lines 19\u201323), then \u2212\u2202Pm holds in the theory. Thus, we remove m in every chain where m appears as a permission (line 22).\nWe conclude this section by presenting and describing Algorithm 5 COMPUTEDEFEASIBLE, which represents the main core for the computation of the defeasible extension of a theory. In lines 1\u20135, we initialise variables +\u2202O, +\u2202P and, for each literal l, a set R[l]in f d containing all the rules for l that are defeated by a rule for the opposite. Algorithm 4 CHECKFACTS is invoked to compute all defeasible conclusions derived from the set of facts (line 6).\nThe algorithm consists of a main loop (the repeat cycle in lines 7\u201335) that performs a series of transformations to reduce a Defeasible Theory into a simpler equivalent one. The loop ends when no more modifications on the extension are made, i.e., when both variables \u2202+\n\u2737 and \u2202\u2212 \u2737 are empty at the end of an iteration.\nAt the beginning of the cycle, we re-initialise the set of conclusions computed at the iteration of the main loop (lines 8\u20139).\nThe for cycle in lines 10\u201332 checks all the rules for every literal l of the theory. In lines 11\u201313 it modifies the theory invoking Algorithm 1 DISCARD for all modal literals with no supporting chains. Lines 14\u201331 loop over all rules in the theory for the current literal l, and checks if an applicable rule exists with l as first element in its head. If the rule introduces l as an obligation (lines 14\u201322), then we have to collect all rules for the opposite, and check if they are all defeated by a rule for l. If this is the case, then we have proved +\u2202Ol and Algorithm 2 MODIFYOBL must be invoked.\nOn the other hand, if l is introduced as a permission (lines 23\u201331), then we have to take into account only obligation rules for \u223cl, and to check if every rule for \u223cl as an obligation is defeated by at least one rule for the opposite. If so, condition +\u2202Pl holds, and Algorithm 3 MODIFYPERM is invoked. Finally, all modifications on the extension, due to the execution of the cycle, are stored in the global sets of conclusions (lines 33\u2013 34).\nAlgorithm 5 ComputeDefeasible\nInput: A defeasible theory D. Output: The extension E(D) of D.\n1: for \u2737 \u2208 {O,P} do 2: +\u2202\u2737 \u2190 /0 3: \u2212\u2202\u2737 \u2190 /0 4: end for 5: R[l]in f d \u2190 /0 for each l \u2208 Lit 6: CHECKFACTS 7: repeat 8: \u2202+\n\u2737 \u2190 /0\n9: \u2202\u2212 \u2737 \u2190 /0\n10: for \u2737l \u2208 HB,\u2737 \u2208 {O,P} do 11: if R\u2737[l] = /0 then 12: DISCARD(l,\u2737) 13: end if 14: if there exists r \u2208 RO[l,1] such that A(r) = /0 then 15: R[\u223cl]in f d \u2190 R[\u223cl]in f d \u222a{s \u2208 R[\u223cl]| r > s} 16: if {s \u2208 R[\u223cl]| s > r}= /0 then 17: DISCARD(\u223cl,\u2737) 18: if R[\u223cl]\\R[\u223cl]in f d = /0 and \u00acOl 6\u2208 F then 19: MODIFYOBL(l) 20: end if 21: end if 22: end if 23: if there exists r \u2208 RP[l,1] such that A(r) = /0 then 24: R[\u223cl]in f d \u2190 R[\u223cl]in f d \u222a{s \u2208 RO[\u223cl]| r > s} 25: if {s \u2208 R[\u223cl]| s > r}= /0 then 26: DISCARD(\u223cl,O) 27: if RO[\u223cl]\\R[\u223cl]in f d = /0 then 28: MODIFYPERM(l) 29: end if 30: end if 31: end if 32: end for 33: +\u2202\u2737 \u2190+\u2202\u2737\u222a\u2202+\u2737 34: \u2212\u2202\u2737 \u2190\u2212\u2202\u2737\u222a\u2202\u2212\u2737 35: until \u2202+\n\u2737 = /0 and \u2202\u2212 \u2737 = /0\n36: return E(D) = (+\u2202O,+\u2202P,\u2212\u2202O,\u2212\u2202P)\n4.3. Properties of defeasible theory transformations\nThe properties we are going to show below are related to operations that transform a theory D into an equivalent simpler theory D\u2032 (where by the term \u2018simpler\u2019 we mean a theory with a minor number of symbols in it).\nThe transformations operate either by removing some elements from it, or by deleting a rule from the theory. Given the functional nature of the operations, we will refer to\nthe rules in the target theory with the same names/labels as the rules in the source theory. Thus, given a rule r \u2208 D, we will refer to the rule corresponding to it in D\u2032 (if it exists) with the same label, namely r.\nFor the sake of readability, the proofs of all the theoretical results (Lemmas 19\u201328) are not reported in this subsection and the interested reader can find them in Appendix A.\nGiven a non-modal literal p \u2208 F , we can obtain an equivalent theory by removing p in every rule where it appears in the antecedent. Moreover, if the rule is for an obligation, Definition 7 clause (2) ensures that the rule will be discarded for every element after p, and therefore we can truncate the reparation chain at p. Instead, if the rule is for a permission, we cannot operate on it. In both cases, we only consider rules where the complement of p does not appear in the antecedent. Finally, the superiority relation can be simplified by removing all tuples with a rule containing \u223cp in the antecedent, or an obligation rule for an element after p in its consequent.\nLemma 19. Let D = (F,R,>) be a theory such that p \u2208 F \u2229Lit. Let D\u2032 = (F \u2032,R\u2032,>\u2032) be the theory obtained from D where\nF \u2032 = F \\ {p}\nR\u2032 ={r : A(r)\\ {p}\u21d2O C(r)!p| r \u2208 R, A(r)\u2229 p\u0303 = /0} \u222a\n{r : A(r)\\ {p}\u21d2P C(r)| r \u2208 R, A(r)\u2229 p\u0303 = /0}\n>\u2032=> \\{(r,s),(s,r)| r,s \u2208 R,A(r)\u2229 p\u0303 6= /0}.\nThen D \u2261 D\u2032.\nStarting from the modified theory given by the transformations of the previous lemma, we now consider a theory with only modal literals in the set of facts. If a literal p is provable as an obligation, then we can simplify the theory by removing Op in every antecedent of the rules in R, and erase the rules where at least one element of O\u0303p appears in the antecedent. Since by hypothesis F \u2229Lit = /0, if p is present in the reparation chain of an obligation rule, we simplify the theory by removing p from the consequent. If \u223cp is in the consequent, we can also truncate the reparation chain of the rule since, by Definition 7 clause (2), the rule will be discarded for each element after \u223cp (Proposition 15 Part 1 states that \u2212\u2202O\u223cp holds as well). Moreover, Proposition 15 Part 2 ensures that \u2212\u2202P\u223cp holds. Thus, Definition 6 clause (3) allows us to remove \u223cp in the consequent of permission rules for \u223cp. Finally, the superiority relation can be simplified by removing all tuples with a rule containing at least one element of O\u0303p in the antecedent.\nLemma 20. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 +\u2202O p. Let D\u2032 = (F,R\u2032,>\u2032) be the theory obtained from D where\nR\u2032 ={r : A(r)\\ {Op}\u21d2O C(r)!\u223cp\u2296\u223cp| r \u2208 R, A(r)\u2229 O\u0303p = /0} \u222a\n{r : A(r)\\ {Op}\u21d2O C(r)\u2296 p| r \u2208 R, A(r)\u2229 O\u0303p = /0} \u222a\n{r : A(r)\\ {Op}\u21d2P C(r)\u2296\u223cp| r \u2208 R, A(r)\u2229 O\u0303p = /0}\n>\u2032 => \\{(r,s),(s,r)| r,s \u2208 R,A(r)\u2229 O\u0303p 6= /0}.\nThen D \u2261 D\u2032.\nAs the previous lemma, we consider a theory with only modal literals in the set of facts. Since the theory proves \u2212\u2202O p, also \u00acOp holds. Thus, we obtain an equivalent simpler theory by erasing all rules with Op as one of the antecedents, and by removing \u00acOp in each rule where it appears in the antecedent. Again, by Definition 7 clause (2), for every obligation rule we can truncate each reparation chain with p in the consequent and eliminate it from such a chain. Finally, the superiority relation can be simplified by removing all the pairs with a rule containing Op in the antecedent.\nLemma 21. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 \u2212\u2202O p. Let D\u2032 = (F,R\u2032,>\u2032) be theory obtained from D where\nR\u2032 ={r : A(r)\\ {\u00acOp}\u21d2\u2737 C(r)| r \u2208 R, A(r)\u2229{Op}= /0} \u222a\n{r : A(r)\u21d2O C(r)!p\u2296 p| r \u2208 R, A(r)\u2229{Op}= /0}\n>\u2032=> \\{(r,s),(s,r)| r,s \u2208 R,A(r)\u2229{Op} 6= /0}.\nThen D \u2261 D\u2032.\nWe can defeasibly prove a literal p as a permission. A simpler equivalent theory is one where we remove Pp in each set of antecedents and where we erase all the rules containing at least one element of the complement of P\u0303p in the antecedent. Proposition 15 Part 3 states that \u2212\u2202O\u223cp holds. Thus, by Definition 7 clause (2), if \u223cp appears in the reparation chain of an obligation rule, we can remove it after having truncate the chain at \u223cp. Instead, if we consider permission rules with p in the consequent, by Definition 7 clause (3), we can truncate the corresponding reparation chain at p. Finally, the superiority relation can be simplified by removing all the pairs with a rule with an element of P\u0303p in the antecedent.\nLemma 22. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 +\u2202P p. Let D\u2032 = (F,R\u2032,>\u2032) be theory obtained from D where\nR\u2032 ={r : A(r)\\ {Pp}\u21d2O C(r)!\u223cp\u2296\u223cp| r \u2208 R, A(r)\u2229 P\u0303p = /0} \u222a\n{r : A(r)\\ {Pp}\u21d2P C(r)!p| r \u2208 R, A(r)\u2229 P\u0303p = /0}\n>\u2032=> \\{(r,s),(s,r)| r,s \u2208 R,A(r)\u2229 P\u0303p 6= /0}.\nThen D \u2261 D\u2032.\nThe theory proves \u2212\u2202P p, allowing \u00acPp to hold. Thus, we obtain an equivalent theory if we erase all the rules with Pp in the set of the antecedents and if we remove \u00acPp where it appears in the tail of a rule. Moreover, if the rule is for a permission, we remove p from the reparation chain. Finally, we change the superiority relation by erasing the tuples with a rule with Pp in the antecedent.\nLemma 23. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 \u2212\u2202P p. Let D\u2032 = (F,R\u2032,>\u2032) be theory obtained from D where\nR\u2032 ={r : A(r)\\ {\u00acPp}\u21d2\u2737 C(r)| r \u2208 R, A(r)\u2229{Pp}= /0} \u222a\n{r : A(r)\u21d2P C(r)\u2296 p| r \u2208 R, A(r)\u2229{Pp}= /0}\n>\u2032=> \\{(r,s),(s,r)| r,s \u2208 R,A(r)\u2229{Pp} 6= /0}.\nThen D \u2261 D\u2032.\nThe following two lemmas represent conditions under which a literal can be proved as an obligation or as a permission. The transformations dictated by the previous lemmas empty the antecedent of every applicable rule.\nDefinition 24. Given a theory D = (F,R,>), and a set of rules S, the subset of S of inferiorly defeated rules for a literal p, S[p]in f d is thus defined: r \u2208 S[p]in f d iff\n1. \u2203s \u2208 R[\u223cp] such that A(r) = /0 and s > r, and 2. if r \u2208 RP[p], then s \u2208 RO[\u223cp].\nLemma 25. Let D = (F,R,>) be a theory such that F \u2229 ModLit = /0, \u2203r \u2208 RO[p,1], A(r) = /0, and R[\u223cp]\u2286 Rin f d . Then D \u22a2+\u2202O p.\nLemma 26. Let D = (F,R,>) be a theory such that F \u2229 ModLit = /0, \u2203r \u2208 RP[p,1], A(r) = /0, and RO[\u223cp]\u2286 Rin f d . Then D \u22a2+\u2202P p.\nThe next two lemmas concern conditions to determine when it is possible to assert that a literal is negatively provable.\nLemma 27. Let D = (F,R,>) be a theory such that F \u2229ModLit = /0 and R\u2737[p] = /0, for \u2737 \u2208 {O,P}. Then D \u22a2 \u2212\u2202\u2737p.\nLemma 28. Let D = (F,R,>) be a theory such that F \u2229ModLit = /0, and \u2203r \u2208 R[p,1] such that A(r) = /0 and rsup = /0. Then\n1. if r \u2208 RO, then D \u22a2 \u2212\u2202\u2737\u223cp, \u2737 \u2208 {O,P}; 2. if r \u2208 RP \u222aRde f , then D \u22a2 \u2212\u2202O\u223cp."}, {"heading": "5. Computational results", "text": "In this section we present the computational properties of the algorithms previously described. Since, as stated above, the first three algorithms are sub-routines of the two main ones, we will present the correctness and completeness results of these algorithms inside theorems for Algorithms 4 CHECKFACTS and 5 COMPUTEDEFEASIBLE.\nIn order to properly exhibit results on the complexity of the algorithms, we need the following definition.\nDefinition 29. Given a Defeasible Theory D, the size S of D is the number of literal occurrences plus the number of the rules in D.\nWe also report some key ideas and intuitions behind our implementation.\n1. Each operation on global sets \u00b1\u2202\u2737 and \u2202\u00b1\u2737 requires a constant time, as we manipulate finite sets of literals; 2. For each literal \u2737l \u2208 HB, we implement a hash table with pointers to rules where the literal occurs; thus, retrieving the set of rules containing a given literal requires constant time. 3. The superiority relation can also be implemented by means of hash tables; once again, the information required to modify a given tuple can be accessed in constant time.\nTheorem 30. Given a modal Defeasible Theory D with size S, Algorithm 4 CHECKFACTS terminates and its computational complexity is O(S).\nProof. Termination of Algorithm 4 CHECKFACTS is given by definition of modal Defeasible Theory, since the internal sub-routines (i.e., Algorithm 2 MODIFYOBL and 3 MODIFYPERM), as well as the algorithm itself, manipulate finite sets of rules and facts.\nFor a correct analysis of the complexity of Algorithm 4 CHECKFACTS, it is of the utmost importance to correctly comprehend Definition 29. Here we underline that the size S of a theory represents the total number of occurrences of each literal in every rule of such a theory. Let us examine a theory with Y literals and whose size is Z. If we consider a cycle whose purpose is to call, for each literal, a procedure that selectively deletes it from all the rules of the theory (no matter to what end), a rough computational complexity would be O(Z2). In fact, the complexity of the procedure by itself is bound to the number of rules in the theory, which is in O(Z), and this procedure is iterated Y \u2208 O(Z) times.\nHowever, a more fined-grained analysis shows that the complexity of this loop is lower. The mistake of the previous analysis is that it considers the complexity of the procedure separately from the complexity of the external loop, whilst they are strictly dependent. Indeed, the overall number of operations made by the sum of all loop iterations cannot outrun the number of occurrences of the literals, O(Z), because the operations in the inner procedure directly decrease, iteration after iteration, the number of the remaining repetitions of the outmost loop, and the other way around. Therefore, the overall complexity is not bound to O(Z) \u00b7O(Z) = O(Z2), but to O(Z)+O(Z) = O(Z).\nWe can contextualise the above reasoning to Algorithm 4 CHECKFACTS. The main cycle in lines 2\u201326 is iterated over the set of facts, whose cardinality is in O(S); the operations in lines 10 and 19 (invoking Algorithms 2 MODIFYOBL and 3 MODIFYPERM) represent an additive factor O(S) in the overall complexity of the algorithm. Finally, all operations on the set of rules and the superiority relation performed by conditions in lines 5, 12, and 21 require constant time, given the implementation of data structures proposed above. Therefore, we can state that the complexity of the algorithm is O(S).\nTheorem 31. Given a Defeasible Theory D with size S, Algorithm 5 COMPUTEDEFEASIBLE terminates and its computational complexity is O(S).\nProof. When referring to the termination of Algorithm 5 COMPUTEDEFEASIBLE, the most important part we have to analyse is the repeat cycle in lines 7\u201335. Once an instance of the cycle has been performed, we must be in one of the following (mutually exclusive) situations:\n1. no modification of the extension has occurred. In this case, line 29 ensures the termination of the algorithm; 2. the theory is modified with respect to a literal in the Modal Herbrand Base HB. Notice that the algorithm takes care of removing the literal from HB once it has performed the suitable operations. As the set is finite, the process described above eventually empties HB, and at the next iteration of the cycle we have no means to modify the extension of the theory. In this case as well, the algorithm ends its execution.\nThe analysis of the complexity of Algorithm 5 COMPUTEDEFEASIBLE straightly follows from the reasoning proposed to demonstrate the computational complexity of Algorithm 4 CHECKFACTS. Thus, the repeat cycle in lines 7\u201335 is in O(S), while procedure invocations in lines 12, 17, 19, 26 and 28 represent an additive factor as before. Since the\noperations in lines 15 and 24, and the checks in lines 14, 16, 18, 23, 25 and 27 also weight a constant time, the computational complexity of Algorithm 5 COMPUTEDEFEASIBLE is bound to O(S).\nTheorem 32. Algorithm 5 COMPUTEDEFEASIBLE is sound and complete.\nProof. As already argued at the beginning of the section, the aim of Algorithm 5 COMPUTEDEFEASIBLE is to compute the defeasible extension of a given theory D through successive transformations on the set of facts and rules, and on the superiority relation. These transformations act in ways which obtain at each step a new simpler theory while retaining the same extension. Again, we remark that the word \u2018simpler\u2019 is used to denote a theory with less elements in it. Since we have already proved the termination of the algorithm, it eventually comes to a fix-point theory where no more operations can be made.\nIn order to demonstrate the soundness of Algorithm 5, we show in the list below that all the operations performed by the algorithm are those described in Lemmas 19\u201328, where we have already proved the soundness of the operation involved.\n\u2022 Algorithm 1 DISCARD:\n\u2013 Lines 2\u20134: Lemma 21 and 23.\n\u2022 Algorithm 2 MODIFYOBL:\n\u2013 Lines 2\u20134, 10\u201313: Lemma 20; \u2013 Lines 6\u20139: Proposition 14 and Lemma 20.\n\u2022 Algorithm 3 MODIFYPERM:\n\u2013 Lines 2\u20133, 9\u201311: Lemma 22; \u2013 Lines 5\u20138: Proposition 13 and Lemma 22.\n\u2022 Algorithm 4 CHECKFACTS:\n\u2013 Lines 3\u20134: Lemmas 19\u201323; \u2013 Lines 5\u20138: Lemma 19; \u2013 Lines 9\u201311: Algorithm 2; \u2013 Lines 12\u201317: Lemma 21; \u2013 Lines 18\u201320: Algorithm 3; \u2013 Lines 21\u201325: Lemma 23.\n\u2022 Algorithm 5 COMPUTEDEFEASIBLE:\n\u2013 Lines 11\u201313: Lemma 27; \u2013 Lines 17 and 26: Lemma 28; \u2013 Lines 18\u201320: Lemmas 25 and 20; \u2013 Lines 27\u201329: Lemma 26 and 22.\nThese results state that if in the initial theory a literal is either defeasibly proved or not, so it will be in the final theory; thus proving the soundness of the algorithm.\nMoreover, since all lemmas show the equivalence of the two theories, and since the equivalence relation is a bijection, this also gives the completeness of Algorithm 5 COMPUTEDEFEASIBLE."}, {"heading": "6. Discussion: The Three Types of Permission", "text": "Resuming the discussion of Section 2, we will delve into the technical aspects of the three mentioned concepts of permissions within our framework.\nThe idea of weak or negative permission is easily represented in the system as follows:\nDefinition 33 (Weak Permission). Let D be a Defeasible Theory. A literal l is weakly permitted in D iff D \u22a2 \u2212\u2202O\u223cl.\nOne remark is in order here: Definition 33 is useful to check whether a literal l is weakly permitted within the theory, but it cannot be directly used to explicitly derive Pl for triggering any rule where this modal literal occurs in the antecedent. In fact, when Pl appears in the antecedent of a rule, then the only way to activate such a rule is to explicitly derive Pl.\nHowever, weak permissions are decisive in the applicability of a rule for conditions (1.2) of Definitions 5 and 6; when \u00acOl occurs in the antecedent of the rule, then the theory must prove \u2212\u2202Ol. This is equivalent to say that \u223cl is weakly permitted in D.\nThis reading assumes that the distinction between weak and strong permission goes beyond the idea, defended by [2], that there is only one prescriptive type of permission. If the reader finds our proposal limiting, we can trivially revise the rule applicability conditions at point (1.3) (and adjust the algorithms accordingly) by establishing that, when Pl occurs in the antecedent of any rule r, r is applicable if one of the following conditions holds: (i) +\u2202Pl, or (ii) \u2212\u2202O\u223cl (observe that +\u2202Pl implies \u2212\u2202O\u223cl, but not vice versa).\nA straightforward result (from Proposition 15 Part 1) regarding weak permissions follows:\nProposition 34. Let D be any O-consistent Defeasible Theory. For any literal l, if D \u22a2+\u2202Ol, then l is weakly permitted.\nAs expected, weak permission enjoys the deontic principle \u201cOught implies Can\u201d, i.e., the principle that in deontic logic is Ol \u2192 Pl.\nWe now consider the two ways to obtain strong permissions in Defeasible Logic: using either explicit permissive norms or defeaters.\nThe first case is naturally captured in the logical framework proposed in Sections 3 and 4. In the simplest case, a literal like Pl is derived in a theory D when there is a successful reasoning chain in which the last rule has the form a1, . . . ,an \u21d2P l.\nMore complex cases are due to the fact that l may occur in an \u2298-expression. In this case l is obtained as strongly permitted if, for each literal c preceding l in the sequence, one of the following conditions hold:\n\u2022 if c leads to derive Oc (i.e., c occurs in an \u2297-subsequence of the main sequence where l occurs), then this obligation must be obtained and violated; \u2022 if c leads to derive Pc (i.e., c occurs in an \u2299-subsequence of the main sequence where l occurs), then this permission is successfully attacked by an opposite obligation.\nThe introduction of sequences of permissions and obligations enriches the language in a significant way, since it allows us to express a preference among obligations and permissions when they are logically compatible. In the case of sequences of positive per-\nmissions, an \u2299-sequence states that a permissive exception of an obligation is preferred with respect to another possible exception of the same obligation. However, this extension does not conceptually change the fundamental intuition that is also behind the basic case where permissive norms have the form a1, . . . ,an \u21d2P l: the antecedent of positive permissive rules with head l provides sufficient defeasible reasons to derive Pl.\nThe second method considered in Section 2 to capture the notion of strong permissions acting as exceptions to obligations looks at permissions as undercutters in argumentation theory (this idea was discussed in [10]): a permissive norm with head l operates in such a way that, if applicable, it is not a sufficient reason for deriving neither l, nor \u223cl, but it is a sufficient reason for blocking the derivation of \u223cl as obligatory. In Defeasible Logic, this idea is naturally implemented by using defeaters. For the sake of simplicity, we have not considered this concept of strong permission in Sections 3 and 4. However, to cover this case it is sufficient to adopt one the following definitions (compare the definition of RP[q,n] in Section 3):\nDefinition 35. The set RP[q,n] is X \u222aY where\n\u2022 X is the set of rules where q appears at index n, and the operator \u2299 precedes q; \u2022 Y is the set of defeaters with head q.7\nDefinition 36. The set RP[q,n] is the set of defeaters with head q.8\nDefinition 35 adds the defeaters to the set of rules that can be used to derive tagged literals like +\u2202Pl, obtaining modal literals like Pl. Definition 36 restricts derivations of strong permissions only to reasoning chains where the last rule is a defeater. In both cases, except these new definitions, we do not need to change anything else in the logic (hence, in the proof conditions for \u00b1\u2202P) or the algorithms.\nWhat is the difference between strong permissions obtained via rules for permission and the ones obtained via defeaters? Although rules for P and defeaters are not in general equivalent, as we have informally suggested in Section 2, they behave quite similarly when they are used to derive permissions, as well as to attack obligation rules supporting the opposite conclusion. In other words, defeaters do not clash with any permissive rules. Consequently, if this reading of defeaters is simply embedded within the proof conditions for \u00b1\u2202P and for \u00b1\u2202O by adopting either Definition 35, or Definition 36, then rules for P and defeaters play a very similar role in the proof theory. In fact, if we consider condition (2.3.3) in the proof condition for \u00b1\u2202O, then two rules like r1 : a1, . . . ,an \u21d2P l and r2 : a1, . . . ,an \u2740 l both attack any rule s for obligation supporting\u223cl, and s can counterattack r1 and r2 as well.\nWe remark that the significant difference between the rules for P and defeaters is that defeaters do not allow for having sequences of permissions in their head.\nFinally, notice that neither type of strong permission considered enjoys the principle \u201cOught implies Can\u201d. This result comes directly from Proposition 15 and is based on the idea that the only manner to derive strong permissions is by means of reasoning chains where the last rule occurring in them is either a rule for P or a defeater (i.e., explicit permissive norms).\n7In this case, n is always 1. 8Since n is always 1, n can be omitted and we can simply write RP[q]."}, {"heading": "7. Summary and Related Work", "text": "In this paper we proposed an extension of Defeasible Logic to represent three concepts of defeasible permission. In particular, we examined different types of explicit permissive norms that work as exceptions to opposite obligations. We also discussed how strong permissions can be represented with or without introducing a new consequence relation for inferring conclusions from explicit permissive norms. Finally, we combined a preference operator applicable to contrary-to-duty obligations with a new one representing ordered sequences of strong permissions which derogate from prohibitions. Special attention was devoted to the computational aspects of the logic.\nAlthough logicians have mostly overlooked the concept of permission over time, the history of deontic logic offers some well-known key ideas to interpret it. Indeed, the original intuition (proposed by [34], among others) that permissions are the modal dual of obligations, though technically simple and attractive, proved to be partial and simplistic (for a discussion, see [35,2,1]). Hence, subsequent contributions have helped to expand the picture in several directions. The distinction between weak (or negative) and strong (or positive) permission [35] plays an important role in this regard. Though, Alchourro\u0301n and Bulygin [3,2] argued that there is only one prescriptive sense of permission, while the distinction between weak and strong permission makes sense only at a descriptive level, depending on how any permission is obtained within a system of norms. Legal theorists such as Alf Ross and Norberto Bobbio [28,8] claimed that legal permissions are in fact exceptions to obligations imposing the opposite, even though this did not lead them (Ross, in particular) to clearly link the concept of exception with the one of strong permission. Other theorists even denied the usefulness of seeing strong permissions as exceptions [27,29], since the former ones introduce nothing but strong indifference in normative systems. This thesis was instead rejected by [3].\nThe purpose of this paper was not to provide a comprehensive logical theory of permission, nor to take an exhaustive critical position in the debate that we have very briskly recalled. Our goal was twofold:\n\u2022 to capture some aspects of permissions within a broader view of defeasible normative reasoning; \u2022 to study the defeasibility of permissions in a computationally efficient logical framework.\nAt a more theoretical level, our work shares with [25,9,33] some conceptual assumptions. Slightly rephrasing [33]\u2019s analysis, the following guidelines inspired our treatment of the concept of permission:\n1. \u201cno logic of norms without attention to the system of which they form part\u201d [26]: our investigation of the concept of permission looks at how permissive norms and other types of norms interact within systems; 2. the distinction between positive and negative permission is meaningful; 3. one fundamental role of positive permissions is that of stating exceptions to obliga-\ntions; accordingly, positive permissions are supposed to override, or at least block, some deontic conclusions coming from other norms; 4. the logical space of weak permission is the one left unregulated by mandatory norms.\nHowever, [25,9,33] are all based on a different logical formalism, Input/Output Logic (IOL) [24], thus it is difficult to compare in detail those contributions with the present\none. Normative reasoning is viewed in IOL as a rule-based process of manipulation of inputs (factual premises) into outputs (normative conclusions). The analysis of normative systems consists in representing conditional norms simply as ordered pairs (a,b) where a represents the antecedent of the rule, and b its consequent: \u201cif a then b\u201d where a has factual content and b normative content, viz. an obligation or a permission. Typically, both a and b are taken to be formulas from propositional logic. Each set of such ordered pairs can be seen as an inferential mechanism which, given an input, determines an output based on those connections. Formally, given a set of positive mandatory norms (obligations) G and a set of permissive norms (positive permissions) P, a closure operation C, and a set of facts A, the output of G\u222aP given C and a set of input formulas is outC(G\u222aP,A) = {b | (a,b) \u2208 C(G\u222aP) and s \u2208 A}. This approach allows for defining different concepts of permission [25,9]9:\nNegative permission: (a,x) is a negative permission w.r.t. G iff (a,\u00acx) 6\u2208 outC(G); if x is not prohibited by the system given a, then is negatively permitted under those factual conditions a. Static permission: (a,x) is a static permission w.r.t. (G,P) iff (a,x) \u2208 outC(G \u222a {(c,d)}) for some (c,d) \u2208 P; (a,x) is statically permitted iff it follows from adding a positive permissive norm to G; Dynamic permission: (a,x) is a dynamic permission w.r.t. (G,P) iff (c,\u00acd) \u2208 outC(G,\u222a{a,\u00acx}) for some (c,d) \u2208 P; (a,x) is permitted when, given the obligations in G, we cannot prohibit x under the condition a without prohibiting d under condition c which is however explicitly permitted by the system.\nAnother concept of permission was proposed in [33] to specifically capture the idea of exception10:\nExemption: (a,x) is an exemption w.r.t. (G,P) iff (a,\u00acx) \u2208 outC(G)\\outC(G)\u2212 (c,\u00acd) for some (c,d) \u2208 P; (a,x) is an exception if the code contains the prohibition of x under condition a which, unless it is removed, it clashes with an explicit permission in P.\nSince IOL and Defeasible Logic are different logical systems, which were designed for very different purposes, it is difficult to compare them also in regard to the problem of permission. Despite any possible connection between the two logics, which is still an open research problem (Defeasible Logic in fact characterises a consequence relation falling within cumulative reasoning [7]), an immediate comparison shows significant differences. In particular, formulas in IOL are based on propositional logic while rules in Defeasible Logic are built using atomic literals, modal literals, and their negations. A second difference is that the inference machinery of IOL leads to derive pairs, while the inference output in Defeasible Logic refers to theories and consists of sets of tagged literals.\nHowever, there are some general similarities in both approaches.\n\u2022 First, Defeasible Logic, like IOL, models explicit and implicit permissions by distinguishing in an analogous manner a consequence relation for obligation and one for permission. \u2022 Second, the definition of negative or weak permission in both formalisms is the same.\n9[33] offers a different technical treatment, which is however in line with most intuitions discussed in [25,9]. 10[33] proposed two definitions. Here, we report on the simpler one.\n\u2022 Third, although we have not discussed in our approach the notion of static permission, it seems relatively simple to capture it in Defeasible Logic: indeed, we may derive that some p is permitted by making an essential use in the derivation of a rule for explicit permission. The only feature that makes the difference with respect to Defeasible Logic is that in IOL static permission admits the principle \u201cOught implies Can\u201d, which does not hold for strong permission in our approach.\nSimilarly, since both approaches distinguish between permissions rebutting obligations and permissions providing exceptions, we do not see any difficulty in capturing in Defeasible Logic the intuition behind the concept of exemption, even though exceptions are more naturally captured in Defeasible Logic by using the superiority relation between rules. The concept of dynamic permission can be instead expressed in Defeasible Logic, but in a different way, due to the sceptical character of Defeasible Logic: if we add a prohibition for some p, which is incompatible with any rule for explicit permission (or even a defeater), then we cannot derive such a prohibition (unless it is stated to be stronger than any other rule), and so p is dynamically permitted.\nA novelty of our paper is the introduction of the new operator \u2299 to express preferences between explicit permissions. A somehow similar idea has been suggested (though with different purposes) by [9], where a preference relation among pairs (for obligations and permissions) was introduced. Technically, it is not clear if that approach can be reframed in our setting. In fact, adopting that option in Defeasible Logic would not work, as the superiority relation in Defeasible Logic plays a role in the proof theory only in case of rule conflicts. A clear advantage of the current proposal is that it adopts a rich formal language where\n\u2022 modal operators can occur in the applicability conditions of rules (the inputs in IOL are always factual); \u2022 we have two ordering types between permissions: the one expressed by \u2299 and the one induced by the superiority relation which applies to defeaters.\nTo the best of our knowledge, there is no logical system having linear complexity with analogous normative reasoning capabilities.\nAcknowledgements\nThis work is an extended and revised version of the paper presented at Jurix 2011 [16]. We thanks the anonymous referees for their valuable comments.\nNICTA is funded by the Australian Government as represented by the Department of Broadband, Communications and the Digital Economy, the Australian Research Council through the ICT Centre of Excellence program and the Queensland Government."}, {"heading": "A. Appendix", "text": "We now prove the properties related to operations that transform a theory D into an equivalent simpler theory D\u2032 (we recall that the term \u201csimpler\u201d means a theory with a minor number of symbols in it). The transformations operate on rules either by removing some elements from some rules, or by deleting rules from a theory. Given the functional nature of the operations involved, we will refer to the rules in the target theory with the same names/labels as the rules in the source theory. Thus, given a rule r \u2208 D, we will refer to the rule corresponding to it in D\u2032, if it exists, with the same label, namely r.\nLemma 19. Let D = (F,R,>) be a theory such that p \u2208 F \u2229Lit. Let D\u2032 = (F \u2032,R\u2032,>\u2032) be the theory obtained from D, where\nF \u2032 =F \\ {p}\nR\u2032 ={r : A(r)\\ {p}\u21d2O C(r)!p|r \u2208 R,A(r)\u2229 p\u0303 = /0}\u222a\n{r : A(r)\\ {p}\u21d2P C(r)|r \u2208 R,A(r)\u2229 p\u0303 = /0}\n>\u2032=> \\{(r,s),(s,r)|r,s \u2208 R,A(r)\u2229 p\u0303 6= /0}.\nThen D \u2261 D\u2032.\nProof. The proof is by induction on the length of a derivation P. For the inductive base, we consider all the modal derivations for a generic literal q in the theory.\nP(1) =+\u2202Oq. This is possible in two cases: (1) Oq \u2208 F , or (2) O\u223cq 6\u2208 F , \u00acOq 6\u2208 F and P\u223cq 6\u2208 F , and \u2203r \u2208 RO[q, i] that is applicable for q at i at P(1) and every rule for \u223cq is either (a) discarded for \u223cq at P(1), or (b) defeated by a stronger rule for q applicable at P(1).\nFor (1), by construction of D\u2032, Oq \u2208 F iff Oq \u2208 F \u2032, thus +\u2202Oq is provable both in D and in D\u2032.\nFor (2), again by construction of D\u2032, the modal literals in the clause do not appear in F iff they do not appear in F \u2032. Furthermore, an obligation rule r \u2208 RO[q, i] is applicable for q at P(1) iff i = 1, A(r) \u2286 F , and \u223cp 6\u2208 A(r) since p \u2208 F . Therefore A(r) \u2286 F if A(r)\\ {p} \u2286 F \u2032. This means that if a rule is applicable at P(1) in D then it is applicable at P(1) in D\u2032. In the other direction, suppose that r is applicable in D\u2032, thus in particular A(r) \u2286 F \u2032. In both cases where r has p in its antecedent or it is not in D, we obtain A(r)\u2286 F , therefore r is applicable in D.\nLet us now consider a rule attacking r, namely a rule s \u2208 R[\u223cq, j]. For such a rule, we have to analyse cases (a) and (b) above.\n(a) A rule s is discarded for \u223cq at j at P(1) in D iff: (i) \u2203ai \u2208 A(s)\u2229Lit and ai /\u2208 F , or (ii) \u2203ck \u2208 C(s), k < j such that ck \u2208 F , and s \u2208 RO[ck,k] by condition (2) of a rule being discarded for +\u2202O.\nFor (i), we are sure that ai 6= p since p \u2208 F by hypothesis. If ai = \u223cp, then s is discarded in D and, by construction, the rule is not in D\u2032. Hence R\u2032[\u223cq] \u2286 R[\u223cq]. If ai 6= \u223cp, then by construction ai /\u2208 F iff ai /\u2208 F \u2032. For (ii), if ck = p, then the rule is discarded in D, the consequent of s is truncated at k in D\u2032, and \u223cq does not occur in the consequent of s in D\u2032, i.e., s /\u2208 R\u2032[\u223cq]. If ck 6= p, then the rule is also discarded in D\u2032 since the only difference between F and F \u2032 is that p is in F but not in F \u2032. To summarise, if a rule is discarded for \u223cq at j at P(1) in D, then the rule is either not in D\u2032, or discarded in D\u2032.\nFor the other direction, in R\u2032 there are no rules containing either p, or \u223cp. Hence, if we have ai \u2208 A(s) and ai /\u2208 F \u2032, then ai /\u2208 F . Similarly for ck, if ck \u2208 F \u2032, then ck \u2208 F . The difference between D and D\u2032 is that in R we have rules with \u223cp in the antecedent and rules with p preceding q in the consequent, and these rules are not in R\u2032. Since p \u2208 F , all rules in R for which there is no corresponding rule in R\u2032 are discarded in D.\n(b) The superiority relation is modified in a way that we only remove instances where one of the rules is discarded in D. But only rules that are not discarded are active in the clauses of the proof conditions where the superiority relation is involved.\nFrom the discussion above, if a rule is applicable for q at 1 at P(1) in D, then the rule is also applicable in D\u2032. If a rule is discarded for \u223cq at index 1 at P(1) in D, then the rule is not in D\u2032, or it is discarded in D\u2032. If a rule s for \u223cq is applicable in D, then there is an applicable rule t for q stronger than s. The rules s and t are applicable, so they are in D\u2032 and t >\u2032 s. Thus, D\u2032 \u22a2+\u2202Oq.\nSimilarly to the other direction, if a rule is applicable in D\u2032 then it is applicable in D, and if it is discarded in D\u2032 then it is discarded in D. The additional rules in D have either \u223cp in the antecedent, or p in the consequent, thus these rules are discarded in D, and for them clause (2.3.1) of +\u2202O applies. Therefore if we have a derivation of length one of +\u2202Oq in D\u2032, then we have D \u22a2+\u2202Oq.\nP(1) = +\u2202Pq. The proof is essentially identical to the inductive base for +\u2202Oq, with some slight syntactical modifications dictated by the different proof conditions for +\u2202P: (1) Pq\u2208 F , or (2) O\u223cq 6\u2208 F and \u00acPq 6\u2208F , and \u2203r \u2208RP[q,1] that is applicable for q at P(1) and every obligation rule for \u223cq is either (a) discarded for \u223cq at P(1), or (b) defeated by a stronger rule for q applicable at P(1).\nP(1)=\u2212\u2202Oq. Clearly clauses (1) and (2.1) of\u2212\u2202O hold for D iff they hold for D\u2032, given that F and F \u2032 have the same modal literals. For clause (2.2), consider a rule r \u2208 RO[q,1]. If r is discarded for D then, as we argued above, it is not in R\u2032, or it is discarded in D\u2032. Also, all rules discarded in D\u2032 are discarded in D, and all rules in R for which there is no corresponding rule in R\u2032 are discarded in D as well. As regards clauses (2.3.1)\u2013(2.3.3), we point out that condition t 6> s between two applicable rules t and s is clearly unaffected passing from D to D\u2032, and the other way around.\nP(1) =\u2212\u2202Pq. This case is a mere variant of the previous one for the negative provability of obligations.\nFor the inductive step, the property of equivalence between D and D\u2032 is assumed up to the n-th step of a generic proof for a given literal l.\nP(n+ 1) = +\u2202Oq. Clauses (1) and (2.1) of +\u2202O follow the same conditions treated in the inductive base for +\u2202Oq. As regards clause (2.2), if an applicable rule r \u2208 RO[q, i] for q in D exists, then clauses (1.1)\u2013(1.5) and (2) of Definition 5 are all satisfied. By inductive hypothesis, we conclude that clauses (1.1)\u2013(1.4) are satisfied by r in D\u2032 as well, and clause (1.5) is satisfied in D\u2032 by the inductive base. For condition (2), the provability of ck as an obligation in D\u2032 is given by inductive hypothesis; furthermore, ck 6\u2208 F or \u223cck \u2208 F iff ck 6\u2208 F \u2032 or \u223cck \u2208 F \u2032 either when ck =\u223cp or ck 6=\u223cp since F and F \u2032 coincide in both cases (notice that ck 6= p by hypothesis).\nThe direction from rule applicability in D\u2032 to rule applicability in D is straightforward. Therefore, a rule r \u2208 RO[q, i] is applicable for q in D iff it is applicable for q in D\u2032. Conditions (2.3.1)\u2013(2.3.3) are treated like cases (a) and (b) for the corresponding inductive base.\nP(n+ 1) = +\u2202Pq. Again, the inductive base justifies clauses (1), (2.1), (2.3.1), and (2.3.2) of +\u2202Pq. Clause (2.2) is satisfied by the same reasoning used in the inductive step of +\u2202Oq and by Definition 6, whose additional clause (3) is trivially satisfied by inductive hypothesis.\nP(n+ 1) = \u2212\u2202Oq. Besides conditions (1), (2.1), (2.3.1), and (2.3.2) \u2013 treated as usual \u2013 it remains to prove that a rule for q as a permission at P(n+ 1) is discarded in D iff it is discarded at P(n+ 1) in D\u2032. To this end, we follow the same analysis carried out in P(n+ 1) = +\u2202Oq for rule applicability, using the inductive base and hypothesis, and Definition 7.\nP(n + 1) = \u2212\u2202Pq. This case is a mere variant of the previous one for the negative provability as an obligation.\nLemma 20. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 +\u2202O p. Let D\u2032 = (F,R\u2032,>\u2032) be the theory obtained from D where\nR\u2032 = {r : A(r)\\ {Op}\u21d2O C(r)!\u223cp\u2296\u223cp,\nA(r)\\ {Op}\u21d2O C(r)\u2296 p|r \u2208 R,A(r)\u2229 O\u0303p = /0} \u222a\n{r : A(r)\\ {Op}\u21d2P C(r)\u2296\u223cp|r \u2208 R,A(r)\u2229 O\u0303p = /0}\n>\u2032 => \\{(r,s),(s,r)|r,s \u2208 R,A(r)\u2229 O\u0303p 6= /0}.\nThen D \u2261 D\u2032.\nProof. The proof is by induction on the length of a derivation P. For the inductive base, we consider all possible derivations of length one for a generic literal q in the theory, where Op \u2208 F .\nP(1) = +\u2202Oq. From D to D\u2032, the structure of the proof follows the inductive base for +\u2202Oq of Lemma 19, where the cases depending on F are trivially satisfied since F = F \u2032, and the other steps are obtained by substituting p with Op and \u223cp with O\u0303p. From D\u2032 to D, there must exist an applicable rule r proving +\u2202Oq at P(1) in D\u2032. Then A(r) \u2286 F . By construction of D\u2032, the antecedent of r in D is either the same, or A(r)\u222a {Op}, while the consequent has either q as the first element, or only p precedes q. Since Op \u2208 F and p 6\u2208 F , all the combinations of antecedent and consequent denote applicable rules in D.\nAs already argued, also in this case if a rule s is discarded at P(1) in D, then it is not in D\u2032, or it is discarded in D\u2032. In particular, all rules in R for which there is no corresponding rule in R\u2032 have either (i) \u00acOp, O\u223cp or P\u223cp in the antecedent, or (ii) \u223cp in the consequent. Since +\u2202O p holds, clause (1.2) of Definition 7 and Proposition 15 Parts 1 and 2 make the rules of the form (i) discarded in D. Rules of type (ii) are also discarded in D since Op \u2208 F .\nP(n+ 1) = +\u2202Oq. The proof is essentially identical to situation P(n+ 1) = +\u2202Oq of Lemma 19. Notice that for rule applicability, clauses l \u2208 F (condition (1.5)), and ck 6\u2208 F or \u223cck \u2208 F (condition (2)) are both true in D and D\u2032, since the set of facts is the same and it does not contain non-modal literals.\nP(1) = +\u2202Pq, P(n+ 1) = +\u2202Pq. For the inductive base, notice that by construction of D\u2032, the antecedent of a rule r for permission in D is either the same, or A(r)\u222a {Op}, while the consequent has either q as the first element, or only \u223cp precedes q. However, applicability and refutability of this rule follow the analysis carried out for +\u2202O. We treat the inductive step as usual, using the inductive hypothesis and the fact that F = F \u2032.\nThe hypothesis F = F \u2032 and the structure of D\u2032 can be easily used to prove the inductive base and the inductive step for proof tags \u2212\u2202O and \u2212\u2202P.\nBoth the inductive base and the inductive step for \u00b1\u2202X q with X = {O,P} in the case where Op 6\u2208 F are straightforward. Indeed, even when Op \u2208 A(r) in D, the hypothesis +\u2202O p allows an applicable rule in D\u2032 to be also applicable in D. The same hypothesis allows us to conclude that a discarded rule in D is also discarded in D\u2032, and the other way around.\nLemma 21. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 \u2212\u2202O p. Let D\u2032 = (F,R\u2032,>\u2032) be theory obtained from D where\nR\u2032 = {r : A(r)\\ {\u00acOp}\u21d2O C(r)!p\u2296 p|r \u2208 R,A(r)\u2229{Op}= /0}\n>\u2032 => \\{(r,s),(s,r)|r,s \u2208 R,A(r)\u2229{Op} 6= /0}.\nThen D \u2261 D\u2032.\nProof. Since D \u22a2+\u2202Ol implies D \u22a2 \u2212\u2202O\u223cl by Proposition 15 Part 1, the modifications on R\u2032 and >\u2032 represent a particular case of Lemma 20, where l = \u223cp. The only difference is that we eliminate from D rules with Op in the antecedent, and we modify the antecedent of the others eliminating \u00acOp (we recall that condition \u2212\u2202O p makes \u00acOp defeasibly proved in our framework). In the case that RO[p] = /0, no modifications on the consequent of rules are made since literal p does not appear in any chain by hypothesis.\nLemma 22. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 +\u2202P p. Let D\u2032 = (F,R\u2032,>\u2032) be theory obtained from D where\nR\u2032 ={r : A(r)\\ {Pp}\u21d2O C(r)!\u223cp\u2296\u223cp|r \u2208 R,A(r)\u2229 P\u0303p = /0}\u222a\n{r : A(r)\\ {Pp}\u21d2P C(r)!p|r \u2208 R,A(r)\u2229 P\u0303p = /0}\n>\u2032=> \\{(r,s),(s,r)|r,s \u2208 R,A(r)\u2229 P\u0303p 6= /0}.\nThen D \u2261 D\u2032.\nProof. The proof is by induction on the length of a derivation P; its structure is the same of that for Lemma 20. We have to take into account the different proof conditions for permission, and arrange the proof to analyse the inductive bases and steps of each derivation either when Pp is a fact or not.\nFor the inductive base, we consider all possible derivations of length one for a generic literal q in the theory, where Pp \u2208 F .\nP(1) = +\u2202Oq. From D to D\u2032, the structure of the proof follows the inductive base for +\u2202Oq of Lemma 19, where the cases depending on F are trivially satisfied since F = F \u2032, and the other steps are obtained by substituting p with Pp and \u223cp with P\u0303p. From D\u2032 to D, there must exist an applicable rule r proving +\u2202Oq at P(1) in D\u2032. Then A(r) \u2286 F . By construction of D\u2032, the antecedent of r in D is either the same, or A(r)\u222a {Pp}, while the consequent has q as the first element. In this case p cannot precede q since a permission never precedes an obligation in a reparation chain. Since Pp \u2208 F , then all rules in D corresponding to applicable rules in D\u2032 are themselves applicable in D.\nAs already argued, also in this case if a rule s is discarded for \u223cq at P(1) in D, then either it is not in D\u2032, or it is discarded in D\u2032. In particular, all rules in R for which there is no corresponding rule in R\u2032 have either (i) \u00acPp or O\u223cp in the antecedent, (ii) \u223cp precedes \u223cq if s is an obligation rule, (iii) p precedes \u223cq if s is a permission rule. Since +\u2202P p holds, clauses (1.1) and (1.4) of Definition 7, and Proposition 15 Part 3 make the rules of the form (i) discarded in D. Moreover, the rules of type (ii) and (iii) are also discarded since Pp \u2208 F , and by Definition 7 clauses (2) and (3), respectively.\nP(n+ 1) = +\u2202Oq. The proof is essentially identical to situation P(n+ 1) = +\u2202Oq of Lemma 19. Notice that for rule applicability, clauses l \u2208 F (condition (1.5)) and ck 6\u2208 F or \u223cck \u2208 F (condition (2)) are both true in D and D\u2032, since the set of facts is the same and it does not contain non-modal literals.\nP(1) = +\u2202Pq, P(n+ 1) = +\u2202Pq. For the inductive base, notice that by construction of D\u2032, the antecedent of a rule r for permission in D is either the same, or A(r)\u222a{Pp}, while the consequent must have q as first element. However, applicability and refutability of this rule follow the analysis carried out for +\u2202O. We treat the inductive step as usual, using the inductive hypothesis and the fact that F = F \u2032. In this case, we do not consider rules of type (iii), i.e., rules for P\u223cq, since only rules for obligation can attack rules for permission.\nThe hypothesis F = F \u2032 and the structure of D\u2032 can be easily used to prove the inductive base and the inductive step for proof tags \u2212\u2202O and \u2212\u2202P.\nBoth the inductive base and the inductive step for \u00b1\u2202X q with X = {O,P} in the case where Pp 6\u2208 F are straightforward. Indeed, even when Pp \u2208 A(r) in D, the hypothesis +\u2202P p allows an applicable rule in D\u2032 to be also applicable in D. The same hypothesis allows us to conclude that a discarded rule in D is also discarded in D\u2032, and the other way around.\nLemma 23. Let D = (F,R,>) be a theory such that F \u2229Lit = /0 and D \u22a2 \u2212\u2202P p. Let D\u2032 = (F,R\u2032,>\u2032) be theory obtained from D where\nR\u2032 = {r : A(r)\\ {\u00acPp}\u21d2P C(r)\u2296 p|r \u2208 R,A(r)\u2229{Pp}= /0}\n>\u2032 => \\{(r,s),(s,r)|r,s \u2208 R,A(r)\u2229{Pp} 6= /0}.\nThen D \u2261 D\u2032.\nProof. Condition D \u22a2 \u2212\u2202P\u223cl is another consequence of D \u22a2 +\u2202Ol, as stated by Proposition 15 Part 2. As such, the proof is derived by Lemma 20, where l =\u223cp.\nLemma 25. Let D = (F,R,>) be a theory such that F \u2229 ModLit = /0, \u2203r \u2208 RO[p,1], A(r) = /0, and R[\u223cp]\u2286 Rin f d . Then D \u22a2+\u2202O p.\nProof. Given that there are no modal literals in F clause (2.1) of +\u2202O is satisfied. Let r be a rule that meets the conditions of the Lemma. According to Definition 5, rule r is trivially applicable for p in the condition for +\u2202O, and thus clause (2.2) is applicable as well. Finally, for clause (2.3) we have that all rules for \u223cp are inferiorly defeated by an appropriate rule with empty antecedent for p, but a rule with empty body is applicable. Hence, all clauses for proving +\u2202O are satisfied. Thus, D \u22a2+\u2202O p.\nLemma 26. Let D = (F,R,>) be a theory such that F \u2229 ModLit = /0, \u2203r \u2208 RP[p,1], A(r) = /0, and RO[\u223cp]\u2286 Rin f d . Then D \u22a2+\u2202P p.\nProof. The proof is analogous to the previous one. The differences are that we have to use the notion of applicability in Definition 6, and that the rules that are inferiorly defeated are restricted to rules in RO[\u223cp].\nLemma 27. Let D = (F,R,>) be a theory such that F \u2229ModLit = /0 and RX [p] = /0, for X \u2208 {O,P}. Then D \u22a2 \u2212\u2202X p.\nProof. If there are no modal literals and the set of defeasible (obigation/permission) rules for a literal p is empty, then clause (2.2) of \u2212\u2202O and \u2212\u2202P are vacuously satisfied.\nLemma 28. Let D = (F,R,>) be a theory such that F \u2229ModLit = /0, and \u2203r \u2208 R[p,1] such that A(r) = /0 and rsup = /0. Then\n1. if r \u2208 RO, then D \u22a2 \u2212\u2202\u2737\u223cp, \u2737 \u2208 {O,P}; 2. if r \u2208 RP \u222aRde f , then D \u22a2 \u2212\u2202O\u223cp.\nProof. Let r be a rule in a theory D for which the conditions of the Lemma hold. It is easy to verify that for both cases the rule satisfies clause (2.3) of \u2212\u2202\u2737, in particular (2.3.2\u20133) for \u2212\u2202O and (2.3.2) for \u2212\u2202P."}], "references": [{"title": "Alchourr\u00f3n. Philosophical foundations of deontic logic and the logic of defeasible conditionals", "author": ["E. Carlos"], "venue": "Deontic Logic in Computer Science: Normative System Specification. Wiley,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1993}, {"title": "Permission and permissive norms", "author": ["Carlos E. Alchourr\u00f3n", "E. Bulygin"], "venue": "In W. Krawietz et al., editor, Theorie der Normen. Duncker & Humblot,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1984}, {"title": "The expressive conception of norms. In Risto Hilpinen, editor, New Studies in Deontic Logic, pages 95\u2013125", "author": ["Carlos E. Alchourr\u00f3n", "Eugenio Bulygin"], "venue": "D. Reidel Publishing Company, Dordrecht,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1981}, {"title": "On balancing and subsumption. a structural comparison", "author": ["Robert Alexy"], "venue": "Ratio Juris,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2003}, {"title": "Representation results for defeasible logic", "author": ["Grigoris Antoniou", "David Billington", "Guido Governatori", "Michael J. Maher"], "venue": "ACM Trans. Comput. Logic,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2001}, {"title": "A family of defeasible reasoning logics and its implementation", "author": ["Grigoris Antoniou", "David Billington", "Guido Governatori", "Michael J. Maher", "Andrew Rock"], "venue": "ECAI", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2000}, {"title": "Defeasible logic is stable", "author": ["David Billington"], "venue": "J. Log. Comput.,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1993}, {"title": "Teoria della norma giuridica", "author": ["N. Bobbio"], "venue": "Giappichelli,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1958}, {"title": "Permissions and obligations in hierarchical normative systems", "author": ["G. Boella", "L. van der Torre"], "venue": "In Proceedings of the 9th international conference on Artificial intelligence and law,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2003}, {"title": "Permissions and undercutters", "author": ["G. Boella", "L. van der Torre"], "venue": "In Proceedings of the IJCAI-03 Workshop on Nonmonotonic Reasoning, Action, and Change (NRAC\u201903),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2003}, {"title": "Permission and authorization in normative multiagent systems", "author": ["Guido Boella", "Leendert van der Torre"], "venue": "In Proceedings of the 10th international conference on Artificial intelligence and law,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2005}, {"title": "Conditional obligation and positive permission for agents in time", "author": ["M.A. Brown"], "venue": "Nordic Journal of Philosophical Logic, 5(2):83\u2013111,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2000}, {"title": "Permissive norms and normative systems", "author": ["E. Bulygin"], "venue": "A. Martino and F. Socci Natali, editors, Automated Analysis of Legal Texts. Publishing Company,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1986}, {"title": "Logic of violations: A gentzen system for reasoning with contrary-to-duty obligations", "author": ["G. Governatori", "A. Rotolo"], "venue": "Australasian Journal of Logic, 4:193\u2013215,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "Justice delayed is justice denied: Logics for a temporal account of reparations and legal compliance", "author": ["G. Governatori", "A. Rotolo"], "venue": "CLIMA XII, 12th International Workshop on Computational Logic and Multi-Agent Sytems. Springer,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "Three concepts of defeasible permission", "author": ["Guido Governatori", "Francesco Olivieri", "Antonino Rotolo", "Simone Scannapieco"], "venue": "Legal Knowledge and Information Systems - JURIX 2011: The Twenty-Fourth Annual Conference,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "A defeasible logic for modelling policy-based intentions and motivational attitudes", "author": ["Guido Governatori", "Vineet Padmanabhan", "Antonino Rotolo", "Abdul Sattar"], "venue": "Logic Journal of the IGPL,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2009}, {"title": "Possible world semantics for defeasible deontic logic", "author": ["Guido Governatori", "Antonino Rotolo", "Erica Calardo"], "venue": "editors, DEON,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2012}, {"title": "Temporalised normative positions in defeasible logic", "author": ["Guido Governatori", "Antonino Rotolo", "Giovanni Sartor"], "venue": "In ICAIL", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2005}, {"title": "The journey to business process compliance", "author": ["Guido Governatori", "Shazia Sadiq"], "venue": "Handbook of Research on BPM,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2008}, {"title": "Rule based business process compliance", "author": ["Guido Governatori", "Sidney Shek"], "venue": "In Proceedings of the RuleML2012@ECAI Challenge,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "What are the Necessity Rules in Defeasible Reasoning", "author": ["Ho-Pun Lam", "Guido Governatori"], "venue": "In James Delgrande and Wolfgang Faber, editors,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2011}, {"title": "Propositional defeasible logic has linear complexity", "author": ["Michael J. Maher"], "venue": "Theory and Practice of Logic Programming,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2001}, {"title": "Input-output logics", "author": ["D. Makinson", "L. van der Torre"], "venue": "Journal of Philosophical Logic,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2000}, {"title": "Permission from an input/output perspective", "author": ["D. Makinson", "L. van der Torre"], "venue": "Journal of Philosophical Logic,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2003}, {"title": "On a fundamental problem of deontic logic", "author": ["David C. Makinson"], "venue": "Norms, Logics and Information Systems. New Studies in Deontic Logic and Computer Science,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1999}, {"title": "Normative systems, permission and deontic logic", "author": ["K. Opalek", "J. Wolenski"], "venue": "Ratio Juris, 4:334\u2013348,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 1991}, {"title": "Directives and norms", "author": ["A. Ross"], "venue": "Routledge and Kegan Paul,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 1968}, {"title": "The logic of enactment", "author": ["Lamb\u00e8r M.M. Royakkers", "Frank Dignum"], "venue": "In ICAIL,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1997}, {"title": "Legal Reasoning: A Cognitive Approach to the Law", "author": ["G. Sartor"], "venue": "Springer,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2005}, {"title": "Doing justice to rights and values: teleological reasoning and proportionality", "author": ["Giovanni Sartor"], "venue": "Artif. Intell. Law,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2010}, {"title": "Relevance, derogation and permission", "author": ["A. Stolpe"], "venue": "DEON, pages 98\u2013115. Springer,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2010}, {"title": "A theory of permission based on the notion of derogation", "author": ["A. Stolpe"], "venue": "J. Applied Logic, 8(1):97\u2013113,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2010}, {"title": "Norm and action: A logical inquiry", "author": ["G.H. von Wright"], "venue": "Routledge and Kegan Paul,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1963}], "referenceMentions": [{"referenceID": 10, "context": "The concept of permission plays an important role in many normative domains in that it may be crucial in characterising notions such as those of authorisation and derogation [11,30,33].", "startOffset": 174, "endOffset": 184}, {"referenceID": 29, "context": "The concept of permission plays an important role in many normative domains in that it may be crucial in characterising notions such as those of authorisation and derogation [11,30,33].", "startOffset": 174, "endOffset": 184}, {"referenceID": 32, "context": "The concept of permission plays an important role in many normative domains in that it may be crucial in characterising notions such as those of authorisation and derogation [11,30,33].", "startOffset": 174, "endOffset": 184}, {"referenceID": 1, "context": "For this, and other reasons, the attempt to reduce permissions to duals of obligations has been criticised (see [2,1]).", "startOffset": 112, "endOffset": 117}, {"referenceID": 0, "context": "For this, and other reasons, the attempt to reduce permissions to duals of obligations has been criticised (see [2,1]).", "startOffset": 112, "endOffset": 117}, {"referenceID": 33, "context": "One important distinction that has traditionally contributed to a richer account of this concept is the one between weak (or negative) and strong (or positive) permission [35].", "startOffset": 171, "endOffset": 175}, {"referenceID": 24, "context": "At least when dealing with unconditional obligations, the notion of weak permission is trivially equivalent to the dual of obligation [25].", "startOffset": 134, "endOffset": 138}, {"referenceID": 24, "context": "Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32].", "startOffset": 121, "endOffset": 139}, {"referenceID": 8, "context": "Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32].", "startOffset": 121, "endOffset": 139}, {"referenceID": 9, "context": "Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32].", "startOffset": 121, "endOffset": 139}, {"referenceID": 11, "context": "Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32].", "startOffset": 121, "endOffset": 139}, {"referenceID": 32, "context": "Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32].", "startOffset": 121, "endOffset": 139}, {"referenceID": 31, "context": "Nevertheless, some exceptions have recently offered significant contributions to the logical understanding of permission [25,9,10,12,33,32].", "startOffset": 121, "endOffset": 139}, {"referenceID": 27, "context": "\u2022 despite some scepticism [28,27] and critical remarks [3,2] (a discussion of this related work can be found in Section 7), the distinction between weak and strong permission seems to be needed, otherwise it is rather hard to account for the fact that certain permissions make sense because they explicitly derogate to existing prohibitions while other permissions are not explicit and occur precisely because opposite prohibitions do not exist; \u2022 we may have different types of strong permissions (specifically permissions that logically follow from explicit permissive norms), according to whether", "startOffset": 26, "endOffset": 33}, {"referenceID": 26, "context": "\u2022 despite some scepticism [28,27] and critical remarks [3,2] (a discussion of this related work can be found in Section 7), the distinction between weak and strong permission seems to be needed, otherwise it is rather hard to account for the fact that certain permissions make sense because they explicitly derogate to existing prohibitions while other permissions are not explicit and occur precisely because opposite prohibitions do not exist; \u2022 we may have different types of strong permissions (specifically permissions that logically follow from explicit permissive norms), according to whether", "startOffset": 26, "endOffset": 33}, {"referenceID": 2, "context": "\u2022 despite some scepticism [28,27] and critical remarks [3,2] (a discussion of this related work can be found in Section 7), the distinction between weak and strong permission seems to be needed, otherwise it is rather hard to account for the fact that certain permissions make sense because they explicitly derogate to existing prohibitions while other permissions are not explicit and occur precisely because opposite prohibitions do not exist; \u2022 we may have different types of strong permissions (specifically permissions that logically follow from explicit permissive norms), according to whether", "startOffset": 55, "endOffset": 60}, {"referenceID": 1, "context": "\u2022 despite some scepticism [28,27] and critical remarks [3,2] (a discussion of this related work can be found in Section 7), the distinction between weak and strong permission seems to be needed, otherwise it is rather hard to account for the fact that certain permissions make sense because they explicitly derogate to existing prohibitions while other permissions are not explicit and occur precisely because opposite prohibitions do not exist; \u2022 we may have different types of strong permissions (specifically permissions that logically follow from explicit permissive norms), according to whether", "startOffset": 55, "endOffset": 60}, {"referenceID": 8, "context": "* we statically determine what is actually permitted given what is obligatory and what is explicitly permitted; * we dynamically determine \u201cthe limits on what may be prohibited without violating static permissions\u201d [9];", "startOffset": 215, "endOffset": 218}, {"referenceID": 7, "context": "\u2022 especially in the law, strong permissions state exceptions to obligations [8]: indeed, derogating with a permission, for example, to a general prohibition to use private protected data provides an exception to such a prohibition; \u2022 strong permissions make sense even when any incompatible prohibitions are not in the legal system; permissions have a dynamic behaviour and prevent future prohibitions from holding in general, or applying to specific contexts [13].", "startOffset": 76, "endOffset": 79}, {"referenceID": 12, "context": "\u2022 especially in the law, strong permissions state exceptions to obligations [8]: indeed, derogating with a permission, for example, to a general prohibition to use private protected data provides an exception to such a prohibition; \u2022 strong permissions make sense even when any incompatible prohibitions are not in the legal system; permissions have a dynamic behaviour and prevent future prohibitions from holding in general, or applying to specific contexts [13].", "startOffset": 460, "endOffset": 464}, {"referenceID": 24, "context": "Indeed, an example of a natural way to capture strong permissions acting as exceptions to obligations is the one where permissions rebut the conclusions of incompatible prescriptive norms [25,9,17,33] or undercut them (i.", "startOffset": 188, "endOffset": 200}, {"referenceID": 8, "context": "Indeed, an example of a natural way to capture strong permissions acting as exceptions to obligations is the one where permissions rebut the conclusions of incompatible prescriptive norms [25,9,17,33] or undercut them (i.", "startOffset": 188, "endOffset": 200}, {"referenceID": 16, "context": "Indeed, an example of a natural way to capture strong permissions acting as exceptions to obligations is the one where permissions rebut the conclusions of incompatible prescriptive norms [25,9,17,33] or undercut them (i.", "startOffset": 188, "endOffset": 200}, {"referenceID": 32, "context": "Indeed, an example of a natural way to capture strong permissions acting as exceptions to obligations is the one where permissions rebut the conclusions of incompatible prescriptive norms [25,9,17,33] or undercut them (i.", "startOffset": 188, "endOffset": 200}, {"referenceID": 9, "context": ", challenge an inference rule of an argument supporting an opposite obligation) [10]).", "startOffset": 80, "endOffset": 84}, {"referenceID": 13, "context": "We will study these mechanisms and see that ordered sequences of strong permissions, derogating or making exceptions to prohibitions, have interesting similarities with ordered sequences of contrary-to-duty obligations [14,15].", "startOffset": 219, "endOffset": 226}, {"referenceID": 14, "context": "We will study these mechanisms and see that ordered sequences of strong permissions, derogating or making exceptions to prohibitions, have interesting similarities with ordered sequences of contrary-to-duty obligations [14,15].", "startOffset": 219, "endOffset": 226}, {"referenceID": 4, "context": "Here, we will attempt a first analysis of the problem in the context of a modal extension of Defeasible Logic [5].", "startOffset": 110, "endOffset": 113}, {"referenceID": 17, "context": "Modal Defeasible Logic is a computationally efficient logical framework able to capture various aspects of non-monotonic and modal reasoning, as well as the defeasible character of permissive norms, and recently a possible-world semantics for it has been proposed [18].", "startOffset": 264, "endOffset": 268}, {"referenceID": 24, "context": "Another approach is based on introducing specific rules for deriving permissions [25,9].", "startOffset": 81, "endOffset": 87}, {"referenceID": 8, "context": "Another approach is based on introducing specific rules for deriving permissions [25,9].", "startOffset": 81, "endOffset": 87}, {"referenceID": 18, "context": "2The idea of using defeaters to introduce permissions was introduced in [19].", "startOffset": 72, "endOffset": 76}, {"referenceID": 13, "context": "A compact representation of CTDs may resort to the non-boolean connective \u2297 [14]: a formula like x \u21d2O a\u2297 b means that, if x is the case, then a is obligatory, but if the obligation a is not fulfilled, then the obligation b is activated and becomes in force until it is satisfied, or violated.", "startOffset": 76, "endOffset": 80}, {"referenceID": 20, "context": "Furthermore, this kind of structure has been successfully used for applications in the area of business process compliance [21].", "startOffset": 123, "endOffset": 127}, {"referenceID": 19, "context": "But in overall, the whole case would be not compliant [20].", "startOffset": 54, "endOffset": 58}, {"referenceID": 29, "context": "For a more detailed discussion on the concept of right see [30].", "startOffset": 59, "endOffset": 63}, {"referenceID": 3, "context": "In absence of any further legal provision, one possible solution is to balance both options with respect to the specific facts X of the case, thus ranking, in a rule r, these options in order of preference, given the facts X (on balancing, see [4,31]).", "startOffset": 244, "endOffset": 250}, {"referenceID": 30, "context": "In absence of any further legal provision, one possible solution is to balance both options with respect to the specific facts X of the case, thus ranking, in a rule r, these options in order of preference, given the facts X (on balancing, see [4,31]).", "startOffset": 244, "endOffset": 250}, {"referenceID": 4, "context": "We adopt the standard Defeasible Logic definitions of strict rules, defeasible rules, and defeaters [5].", "startOffset": 100, "endOffset": 103}, {"referenceID": 5, "context": "Notice that the strong negation of a formula is closely related to the function that simplifies a formula by moving all negations to an inner most position in the resulting formula, and replaces the positive tags with the respective negative tags, and the other way around [6,17].", "startOffset": 273, "endOffset": 279}, {"referenceID": 16, "context": "Notice that the strong negation of a formula is closely related to the function that simplifies a formula by moving all negations to an inner most position in the resulting formula, and replaces the positive tags with the respective negative tags, and the other way around [6,17].", "startOffset": 273, "endOffset": 279}, {"referenceID": 5, "context": "It straightforwardly follows from the principle of strong negation proposed in [6,17]: indeed, the negative proof tags proposed in this work are defined as the strong negation of the positive ones.", "startOffset": 79, "endOffset": 85}, {"referenceID": 16, "context": "It straightforwardly follows from the principle of strong negation proposed in [6,17]: indeed, the negative proof tags proposed in this work are defined as the strong negation of the positive ones.", "startOffset": 79, "endOffset": 85}, {"referenceID": 22, "context": "The algorithms are based on the algorithm proposed by Maher [23] to show that Defeasible Logic has linear complexity; the algorithms also incorporate the notion of inferiorly defeated rules proposed by [22] to handle directly the superiority relation.", "startOffset": 60, "endOffset": 64}, {"referenceID": 21, "context": "The algorithms are based on the algorithm proposed by Maher [23] to show that Defeasible Logic has linear complexity; the algorithms also incorporate the notion of inferiorly defeated rules proposed by [22] to handle directly the superiority relation.", "startOffset": 202, "endOffset": 206}, {"referenceID": 1, "context": "This reading assumes that the distinction between weak and strong permission goes beyond the idea, defended by [2], that there is only one prescriptive type of permission.", "startOffset": 111, "endOffset": 114}, {"referenceID": 9, "context": "The second method considered in Section 2 to capture the notion of strong permissions acting as exceptions to obligations looks at permissions as undercutters in argumentation theory (this idea was discussed in [10]): a permissive norm with head l operates in such a way that, if applicable, it is not a sufficient reason for deriving neither l, nor \u223cl, but it is a sufficient reason for blocking the derivation of \u223cl as obligatory.", "startOffset": 211, "endOffset": 215}, {"referenceID": 33, "context": "Indeed, the original intuition (proposed by [34], among others) that permissions are the modal dual of obligations, though technically simple and attractive, proved to be partial and simplistic (for a discussion, see [35,2,1]).", "startOffset": 217, "endOffset": 225}, {"referenceID": 1, "context": "Indeed, the original intuition (proposed by [34], among others) that permissions are the modal dual of obligations, though technically simple and attractive, proved to be partial and simplistic (for a discussion, see [35,2,1]).", "startOffset": 217, "endOffset": 225}, {"referenceID": 0, "context": "Indeed, the original intuition (proposed by [34], among others) that permissions are the modal dual of obligations, though technically simple and attractive, proved to be partial and simplistic (for a discussion, see [35,2,1]).", "startOffset": 217, "endOffset": 225}, {"referenceID": 33, "context": "The distinction between weak (or negative) and strong (or positive) permission [35] plays an important role in this regard.", "startOffset": 79, "endOffset": 83}, {"referenceID": 2, "context": "Though, Alchourr\u00f3n and Bulygin [3,2] argued that there is only one prescriptive sense of permission, while the distinction between weak and strong permission makes sense only at a descriptive level, depending on how any permission is obtained within a system of norms.", "startOffset": 31, "endOffset": 36}, {"referenceID": 1, "context": "Though, Alchourr\u00f3n and Bulygin [3,2] argued that there is only one prescriptive sense of permission, while the distinction between weak and strong permission makes sense only at a descriptive level, depending on how any permission is obtained within a system of norms.", "startOffset": 31, "endOffset": 36}, {"referenceID": 27, "context": "Legal theorists such as Alf Ross and Norberto Bobbio [28,8] claimed that legal permissions are in fact exceptions to obligations imposing the opposite, even though this did not lead them (Ross, in particular) to clearly link the concept of exception with the one of strong permission.", "startOffset": 53, "endOffset": 59}, {"referenceID": 7, "context": "Legal theorists such as Alf Ross and Norberto Bobbio [28,8] claimed that legal permissions are in fact exceptions to obligations imposing the opposite, even though this did not lead them (Ross, in particular) to clearly link the concept of exception with the one of strong permission.", "startOffset": 53, "endOffset": 59}, {"referenceID": 26, "context": "Other theorists even denied the usefulness of seeing strong permissions as exceptions [27,29], since the former ones introduce nothing but strong indifference in normative systems.", "startOffset": 86, "endOffset": 93}, {"referenceID": 28, "context": "Other theorists even denied the usefulness of seeing strong permissions as exceptions [27,29], since the former ones introduce nothing but strong indifference in normative systems.", "startOffset": 86, "endOffset": 93}, {"referenceID": 2, "context": "This thesis was instead rejected by [3].", "startOffset": 36, "endOffset": 39}, {"referenceID": 24, "context": "At a more theoretical level, our work shares with [25,9,33] some conceptual assumptions.", "startOffset": 50, "endOffset": 59}, {"referenceID": 8, "context": "At a more theoretical level, our work shares with [25,9,33] some conceptual assumptions.", "startOffset": 50, "endOffset": 59}, {"referenceID": 32, "context": "At a more theoretical level, our work shares with [25,9,33] some conceptual assumptions.", "startOffset": 50, "endOffset": 59}, {"referenceID": 32, "context": "Slightly rephrasing [33]\u2019s analysis, the following guidelines inspired our treatment of the concept of permission:", "startOffset": 20, "endOffset": 24}, {"referenceID": 25, "context": "\u201cno logic of norms without attention to the system of which they form part\u201d [26]: our investigation of the concept of permission looks at how permissive norms and other types of norms interact within systems; 2.", "startOffset": 76, "endOffset": 80}, {"referenceID": 24, "context": "However, [25,9,33] are all based on a different logical formalism, Input/Output Logic (IOL) [24], thus it is difficult to compare in detail those contributions with the present", "startOffset": 9, "endOffset": 18}, {"referenceID": 8, "context": "However, [25,9,33] are all based on a different logical formalism, Input/Output Logic (IOL) [24], thus it is difficult to compare in detail those contributions with the present", "startOffset": 9, "endOffset": 18}, {"referenceID": 32, "context": "However, [25,9,33] are all based on a different logical formalism, Input/Output Logic (IOL) [24], thus it is difficult to compare in detail those contributions with the present", "startOffset": 9, "endOffset": 18}, {"referenceID": 23, "context": "However, [25,9,33] are all based on a different logical formalism, Input/Output Logic (IOL) [24], thus it is difficult to compare in detail those contributions with the present", "startOffset": 92, "endOffset": 96}, {"referenceID": 24, "context": "This approach allows for defining different concepts of permission [25,9]9:", "startOffset": 67, "endOffset": 73}, {"referenceID": 8, "context": "This approach allows for defining different concepts of permission [25,9]9:", "startOffset": 67, "endOffset": 73}, {"referenceID": 32, "context": "Another concept of permission was proposed in [33] to specifically capture the idea of exception10:", "startOffset": 46, "endOffset": 50}, {"referenceID": 6, "context": "Despite any possible connection between the two logics, which is still an open research problem (Defeasible Logic in fact characterises a consequence relation falling within cumulative reasoning [7]), an immediate comparison shows significant differences.", "startOffset": 195, "endOffset": 198}, {"referenceID": 32, "context": "9[33] offers a different technical treatment, which is however in line with most intuitions discussed in [25,9].", "startOffset": 1, "endOffset": 5}, {"referenceID": 24, "context": "9[33] offers a different technical treatment, which is however in line with most intuitions discussed in [25,9].", "startOffset": 105, "endOffset": 111}, {"referenceID": 8, "context": "9[33] offers a different technical treatment, which is however in line with most intuitions discussed in [25,9].", "startOffset": 105, "endOffset": 111}, {"referenceID": 32, "context": "10[33] proposed two definitions.", "startOffset": 2, "endOffset": 6}, {"referenceID": 8, "context": "A somehow similar idea has been suggested (though with different purposes) by [9], where a preference relation among pairs (for obligations and permissions) was introduced.", "startOffset": 78, "endOffset": 81}, {"referenceID": 15, "context": "This work is an extended and revised version of the paper presented at Jurix 2011 [16].", "startOffset": 82, "endOffset": 86}], "year": 2012, "abstractText": "In this paper we propose an extension of Defeasible Logic to represent and compute three concepts of defeasible permission. In particular, we discuss different types of explicit permissive norms that work as exceptions to opposite obligations. Moreover, we show how strong permissions can be represented both with, and without introducing a new consequence relation for inferring conclusions from explicit permissive norms. Finally, we illustrate how a preference operator applicable to contrary-to-duty obligations can be combined with a new operator representing ordered sequences of strong permissions which derogate from prohibitions. The logical system is studied from a computational standpoint and is shown to have liner computational complexity.", "creator": "LaTeX with hyperref package"}}}