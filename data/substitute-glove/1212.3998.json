{"id": "1212.3998", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Dec-2012", "title": "Online Learning for Ground Trajectory Prediction", "abstract": "This product aspects a model major then also ethanol system time classifier detectors to swimming expansion of an flew. This model, though one position a gravity scenario design. Finally, three Covariance Matrix Adaptation Evolution Strategy (CMA - ES) optimization polynomial well system but albums 23 selected variables, and consequently improve is accuracy of be generation. Incorporated existence a quantitative prediction computer, beyond model can rarely different to dilute the under of 5.9 of followed prediction erroneous over time, especially thus the domain large validity now took trajectory adjustment. A 2001 rigorous experiment of the tax designs is related on the questionable along time for which none - time quantitative prediction, itself take on its been helicopter while respect rest the default context has over quantum BADA model. This done, assuming made reporting, besides recent on limit on the compact. A another experiment for presents an made - either slope prediction, in but the prediction whose continuously updated based back itself current aircraft the. This changing concern taken issues, over. addition of the emphasis model make new, has the resulting timescale adjustment tool beginning statistically normal more compelling shown ones ways of given bankruptcy uses.", "histories": [["v1", "Mon, 17 Dec 2012 14:17:16 GMT  (118kb,D)", "http://arxiv.org/abs/1212.3998v1", "SESAR 2nd Innovation Days (2012)"]], "COMMENTS": "SESAR 2nd Innovation Days (2012)", "reviews": [], "SUBJECTS": "cs.AI cs.SY", "authors": ["areski hadjaz", "ga\\'etan marceau", "pierre sav\\'eant", "marc schoenauer"], "accepted": false, "id": "1212.3998"}, "pdf": {"name": "1212.3998.pdf", "metadata": {"source": "CRF", "title": "Online Learning for Ground Trajectory Prediction", "authors": ["Areski Hadjaz", "Ga\u00e9tan Marceau", "Pierre Sav\u00e9ant", "Marc Schoenauer"], "emails": ["areski.hadjaz@thalesgroup.com", "gaetan.marceaucaron@thalesgroup.com", "pierre.saveant@thalesgroup.com", "marc.schoenauer@inria.fr"], "sections": [{"heading": null, "text": "Index Terms\u2014Air Traffic Control, Trajectory Prediction, Hybrid System, Total-Energy Model, Black-Box Optimization, Machine Learning\nI. INTRODUCTION\nTrajectory Prediction (TP) is the core component of automated systems in Air Traffic Control (ATC). Many functionalities of the Decision Support Tool directly rely on an accurate TP: controller posting, workload estimation, arrival sequencing, loss of separation detection, and conflict resolution, to name the most prominent ones. As a consequence, TP is the weakness of the current automation ATC systems and a major issue in the ATC research community, even more with the new paradigmatic shift toward 4D trajectories in both the SESAR Joint Undertaking and the NextGen project. The challenge is to reduce the uncertainty of the prediction of the aircraft states on a temporal horizon of at least 20 minutes. To achieve this, the information of the current state of the aircraft and its environment shall be reliable. As a matter of fact, the Flight Management System (FMS) has access to the measurements from the sensors of the aircraft and creates its own TP, which is updated frequently. Therefore, we should expect that this TP is the most accurate one. Thanks to the Data Link, it should be possible for the ground control to receive data from this onboard TP. Unfortunately, today, this promising technology is\nnot implemented in all aircrafts. Moreover, a decision support tool requires the capacity to efficiently generate \u2019what-if\u2019 scenarios. Today, it is unrealistic to receive many trajectories from the on-board system of every aircraft in the airspace and merge them into different airspace scenarios in real-time. Therefore, the ground TP is still an essential component of the future air traffic control systems.\nA trajectory can roughly be separated in three phases: climbing, level flight, and descent. Phases with altitude changes are the most difficult to handle due to the differences of aircraft performances and the effect of the weather conditions. Operationally, the controllers of approach control centers, who deal with climbing and descent phases, must have a good representation of the vertical evolution of the aircraft to ensure their separations. In most airspace, this separation shall be at least 10 flight levels. For these reasons, this study will focus mainly on the prediction in the vertical axis.\nThe paper is organized as follows: Section II surveys some recent works in the domain of trajectory prediction. Section III details the proposed model. The validation experiments are described in Section IV, while the on-line prediction method is experimented with in Section V. Section VI summarizes the paper and gives some hints for further research in the area of trajectory prediction."}, {"heading": "II. RELATED WORK", "text": "Research on TP includes a set of methodologies for its specification, implementation and evaluation. First, the Eurocontrol Specification for Trajectory Prediction gives the requirements for an operational TP and a validation methodology useful for the Air Navigation Service Providers in their choice of a new ATM system compatible with SESAR. This document covers many functionalities like flight plan and clearance processing, airspace constraints and real-time monitoring. Unfortunately, it does not specify the accuracy requirements. Besides, [22] provides an important literature survey of trajectory prediction technology with 282 reviewed documents and 20 selected for further studies. From the selected set, many implement the point-mass model where the rotational moments are not modeled. This is an acceptable assumption for airline aircraft. Also, [4] and [27] enumerate the principal difficulties inherent to TP, i.e. the uncertainty on the input data, the controller ar X iv :1\n21 2.\n39 98\nv1 [\ncs .A\nI] 1\n7 D\nec 2\n01 2\nand pilot intents, and quantify the errors accordingly. The input data mainly refers to aircraft characteristics which are given in the Base of Aircraft DAta (BADA) Aircraft Performance Model. Still, these values are only nominal and can be different from the real situation. Therefore, the SESAR project 5.5.2 [24] concludes that sharing airline operational control data, like the mass and the speed schedule, could provide quick improvement to ground trajectory prediction, with limited investment. As a matter of fact, these parameters are determinants for computing the TP with a point-mass model.\nMore generally, a parametric approach refers to a model based on flight equations and aircraft characteristics. The point-mass model is an example of a parametric approach. As we will see, many parameters can be used to tune the model to reality. To generate trajectories, [7] uses six ordinary differential integrators depending on the longitudinal motion instruction. Similarly, [8] and [19] use hybrid systems to model the change of differential equations according to the control law and the aircraft states. A discrete space, e.g. an automaton, is defined to represent the modes of the system. Every mode defines the differential equations and creates trajectories in a continuous space. As seen in [8], this model is well-suited for implementing BADA. [1] exposes a technique to find a general thrust settings, i.e. a control law, that could be used in such framework. The idea of fitting the mass parameter of BADA on a few past points is used. Results on the accuracy of this generic control law in the vertical plane should be expected in a near future.\nA common flaw in parametric approaches concerns the nominal values used for every parameters. As shown on figure 1, the effect of the mass parameter clearly shows the importance of tuning these parameters. As an example, 400 seconds after the takeoff, there is already a difference of approximately 250 flight levels between the minimal and the maximum mass which is enormous for an application like the TP. This can easily become a burden when the model is rather complex. To overcome this inherent difficulty, non-parametric approaches are studied in order to obtain an aircraft model from the past trajectories. Non-parametric approaches rely on machine learning and statistical inference: [20] uses neural networks, [2] uses genetic programming in order to learn the structure of the variables of a linear regression and [9] uses fuzzy regression with k-nearest neighbor. The main drawback of non-parametric approaches is that it requires lots of historical data and the model is learned for a specific context and can hardly be generalized because of the airspace constraints, e.g. aircraft following a Standard Instrument Departure.\nCombining both approaches is an interesting research question addressed by [1] and [5]. The latter combines MonteCarlo Simulation and worst-case scenario for modifying the parameters of BADA while integrating a wind model. However, this work is limited to the descent phase and the experiments are performed on trajectories obtained by simulation. The main contribution of our work on this question is to show that tuning the parameters of BADA during the progress of\na flight is a way to overcome the difficulties of parametric approach and avoiding to learn a model from the historical data. To the best of our knowledge, no work has answered to this question with results of the vertical plane."}, {"heading": "III. MODEL", "text": "The basic idea is to create an hybrid system to generate a trajectory in the vertical plane using BADA. The system describes the transitions between the different modes in function of the states and the control laws. Following the mode, a given differential equation is integrated to obtain the trajectory. This section states the assumptions, defines the model and gives an integration schema for generating the trajectories."}, {"heading": "A. Assumptions", "text": "Depending on the requirements of the simulation, one may choose different levels of complexity for the coordinate systems and the aircraft control system. Since we consider only the climbing phase, the system will evolve on a short period of time on a limited geographical area. From these considerations, we assume that the flat earth model is a reasonable approximation (cf. [18]). This model assumes that the earth is flat, non-rotating and can be defined as an inertial reference frame. Also, the gravitational force is constant and perpendicular to the ground. The atmosphere is at rest relative to the earth and atmospheric properties solely depend on the altitude. With these assumptions, one can define the differential equations of kinematics and dynamics. For the kinematics, the equations imply solely that the displacement is proportional to the speed projected on the vertical or horizontal plan. For the dynamics, we need to model the thrust, the drag, the lift and the weight. To our knowledge, BADA is the most complete model describing the capabilities of many aircraft types."}, {"heading": "B. Total-Energy Model", "text": "This section relies on the BADA 3.10 User Manual [3]. BADA is based on the total-energy model where the rate of work is equal to the rate of potential and kinetic energy. Here, the rate of climb is obtained by controlling the speed and the throttle. From [3] p.14:eq.3.2-7 and by transforming the\nquantities into functions of altitude h, speed V and mode q, the rate of climb is defined by:\nh\u0307(V, q) = T (h)\u2212\u2206T\nT (h)\n[ (Thr(h)\u2212D(V, h)) \u00b7 V\nm \u00b7 g\n] \u00b7f(V, h, q)\n(1) where the function T (h) is defined in BADA 3.10 User Manual [3] p. 10, Thr(h) at p.22, D(V, h) at p.20 and f(V, h, q) at p.15-16. As a first approximation, the mass m, the gravitational acceleration g and the temperature differential \u2206T are constant during the climb phase. According to [18], this is a reasonable assumption since the climb phase lasts around 20 minutes. The terms h, V and q are variables that evolve with the system and one must specify the evolution of the two remaining independent variables. However, the acceleration in function of the aircraft dynamic is not specified in BADA. From [18], it is given by:\nV\u0307 (h, h\u0307) = 1\nm (Thr(h)\u2212D(V, h)\u2212m \u00b7 g \u00b7 sin(\u03b3)) (2)\nwhere sin(\u03b3) = h\u0307V . So, from eq. 2, we can see that the acceleration evolves independently of the mode given the rate of climb. Also, when h\u0307 is high, sin(\u03b3) is high and the acceleration V\u0307 is low. This goes along with the hypothesis the total-energy model. Finally, the next section will present the evolution of the variable q."}, {"heading": "C. Mode Definition", "text": "In this section, we define the modes and their transitions based on BADA 3.10 User Manual [3]. First, let Q = {CAS,MACH} \u00d7 {LOW,HIGH} \u00d7 {DEC,CST,ACC} be the mode space. The first two modes, transition altitude and tropopause, depend solely on the altitude:\nq1(h) = { CAS if h \u2264 Htrans MACH otherwise\nq2(h) = { LOW if h \u2264 Htrop HIGH otherwise\nwhere Htrans is the transition altitude and Htrop is the tropopause geopotential pressure altitude. Finally, the last feature q3 is the mode of acceleration. The simplest controller of this mode is given by:\nq3(V, h) =  ACC if V \u2264 V \u2217(h)\u2212 DEC if V \u2265 V \u2217(h) + CST otherwise\nwhere ACC is acceleration, DEC is deceleration and CST is constant speed and V \u2217 be a target speed at altitude h where V tends to converge. V \u2217 can be chosen according to the speed schedule defined in the Airline Procedures Model of BADA 3.10 User Manual [3] p.29, where three target speeds (V1, V2,M) are required as parameters. The nominal values can be found in the airline procedure files of BADA. Finally, \u2208 R is a threshold value to avoid jitter. Next, the energy share\nfactor function f takes its values according to the following flight conditions:\n1) Constant VM above tropopause, 2) Constant VM below tropopause, 3) Constant VCAS above tropopause, 4) Constant VCAS below tropopause, 5) Acceleration in climb, 6) Deceleration in climb\nwhere VM is the Mach speed and VCAS is the calibrated speed. These flight conditions can be defined in terms of conjunctions of q1, q2 and q3. From [3] p.15-16, f is discontinuous when q jumps from one mode to another. Also, f is bounded and therefore, with the flight envelope, one can also bound h\u0307 and V\u0307 . One must pay attention to the Zeno behavior (cf. [21]) where a system can make an infinite number of jumps in a finite amount of time. With these considerations in minds, one can use a numerical procedure to integrate eq.1 and eq.2."}, {"heading": "D. Trajectory Generation", "text": "In order to generate the trajectory, one must specify eq.1 and eq.2 as functions of time. With respect to BADA, let Thr(h(t), t) = Thr(h(t)), D(h(t), V (t), t) = D(h(t), V (t)) and T (h(t), t) = T (h(t)), that is the evolution of the thrust, the temperature and the drag are time-invariant. Moreover, the aircraft dynamic functions shall be specified with respect to the flight envelope constraints. In this study, we choose a nominal thrust function. In eq.1, Thr is replaced by the maximum thrust Thrmax and the whole equation is multiplied by a reduced climb power coefficient Cred, which is supposed to give realistic profiles (cf. [3] p.24). To simulate the system, a common fourth-order Runge-Kutta method is used. Let f1(t, h, V, q) = h\u0307(V, q) and f2(t, V, h, h\u0307) = V\u0307 (h, h\u0307). Then, one obtains the following integration scheme:\ndh1 = f1(tn, hn, Vn, q(Vn, hn))\ndv1 = f2(tn, Vn, hn, h\u0307n) dh2 = f1(tn + \u2206t\n2 , hn + dh1\n\u2206t\n2 , Vn + dv1\n\u2206t\n2 ,\nq(Vn + dv1 \u2206t\n2 , hn + dh1\n\u2206t\n2 ))\ndv2 = f2(tn + \u2206t\n2 , Vn + dv1\n\u2206t\n2 , hn + dh1\n\u2206t\n2 , dh2)\ndh3 = f1(tn + \u2206t\n2 , hn + dh2\n\u2206t\n2 , Vn + dv2\n\u2206t\n2 ,\nq(Vn + dv2 \u2206t\n2 , hn + dh2\n\u2206t\n2 ))\ndv3 = f2(tn + \u2206t\n2 , Vn + dv2\n\u2206t\n2 , hn + dh2\n\u2206t\n2 , dh3)\ndh4 = f1(tn + \u2206t, hn + dh3\u2206t, Vn + dv3\u2206t,\nq(Vn + dv3\u2206t, hn + dh3\u2206t))\ndv4 = f2(tn + \u2206t, Vn + dv3\u2206t, hn + dh3\u2206t, dh4)\nhn+1 = hn + \u2206t\n6 (dh1 + 2dh2 + 2dh3 + dh4)\nVn+1 = Vn + \u2206t\n6 (dv1 + 2dv2 + 2dv3 + dv4)\ntn+1 = tn + \u2206t\nwhere the initial conditions t0, q0, h(t0, q0) = h0, V (t0, h0) = V0 are given. The choice of the Runge-kutta method is justified by the jumps in the function f . As a matter of fact, this method will minimize the impact of a jump during a timestep by averaging the variations at the beginning, twice at the middle point and at the end of the timestep (cf. [6]). Nevertheless, stability questions shall be addressed in the later in order to validate the approach."}, {"heading": "E. Parameter Tuning", "text": "Now that the trajectory generator is defined, we would like to tune the model parameters according to observations. First, there should be a trade-off between the number of parameters and the capacity of the model to approximate real trajectories. As a bad example, instead of using the default thrust controller defined in [3], we tried to find the optimal controller for the acceleration mode for a given trajectory. The resulting controller was a Bang-Bang control function where we have observed that the mode switches between accelerating and decelerating at every timestep. Clearly, this function can approximate any real trajectories, but does not generalize from one trajectory to another and does not reflect the real behavior of the aircraft. So, from eq.1 and eq.2 and the speed schedule V \u2217, the parameters m, V1, V2 ,M and \u2206T are good candidates since they are time-invariant, contrary to a discrete control law. Moreover, their values are fixed to nominal values and BADA explicitly suggests to tune them.\nOne way to tune the parameters is to minimize the position errors between the TP and the real trajectory. This leads to an optimization problem where the function to minimize is expressed by the trajectory generation scheme. Here, we decide to use a black-box optimization algorithm that will perform parameter estimation on the hybrid system. Due to the relations between the parameters and the complexity of the BADA models, we assume that parameter estimation is a non-trivial optimization problem."}, {"heading": "F. Black-Box Optimization", "text": "As already mentioned, parameter tuning pertains to nonconvex black-box optimization, and several methods could be used to tackle it. Furthermore, no information whatsoever is available regarding the modality of the objective function with five parameters. As a matter of fact, it is unimodal when the mass parameter or the differential temperature are the only ones to be tuned. These have an effect on the whole trajectory. But, the speed parameters have a local effect depending on the speed schedule. Moreover, the differences between the speed parameters will induce acceleration phases that will transform the trajectory. Finding the best value for a speed parameter to fit locally the trajectory will create a local optimum that could be worse than finding the two speed parameters that will avoid an acceleration phase that is not undertaken in reality. Even if we did not prove that the objective function is multimodal, we can think that it can possibly be the case. Finally, the objective is non-differentiable (or at least the analytical derivative is out\nof reach). Hence general-purpose derivative-free optimization method is required.\nThe Covariance Matrix Adaptation Evolution Strategy (CMA-ES) [17] is today a state-of-the-art derivative-free optimization method that has demonstrated outstanding performances for problems up to a few hundred variables, in several official comparisons (see, among others, the CEC 2005 challenge [12], and both Black Box Optimization Benchmark workshops at ACM-GECCO 2009 [13] and 2010 [23]), as well as on a large number of real-world applications [11]. CMA-ES is an Evolution Strategy [25], [26] that uses Gaussian mutation with adaptive parameter setting. A Gaussian mutation is defined here by its step-size and its covariance matrix. The step-size is increased (resp. decreased) if the cumulated path of the current best solution is smaller (resp. larger) than that of a random walk, and in the original version [15], [16], the covariance matrix was updated by adding a rank-one matrix with eigenvector the direction of progress. An improved version with rank-\u00b5 update was later proposed [14], and several additional variant made it more and more powerful. The most recent version is the so-called bi-popCMA-ES [10], that evolves both a large and a small population and outperforms previous versions in case of multimodal functions. All source code is available on the author\u2019s web page (http://www.lri.fr/\u223chansen/index.html), in different programming languages, including the bi-pop version. Using CMA-ES for parameter estimation is then straightforward, and amounts to interfacing the objective function for BADA TP with the core CMA-ES program, after eventually normalizing its parameters."}, {"heading": "IV. MODEL VALIDATION", "text": "This section deals both with the empirical validation of the nominal model and the estimation algorithm used to fit the parameters on the whole trajectory."}, {"heading": "A. Dataset", "text": "To validate our model, we will use a dataset composed of 262 real departure trajectories of A320. These trajectories have been recorded via a radar systems during one month. For one trajectory, there is a data vector at every 5 seconds composed of the aircraft position, the rate of climb and the true airspeed. Then, the top of climb is calculated as the first highest point of the trajectory. Also, these trajectories do not have a rate of climb that is equal to zero for more than 30 seconds, they shall reach a cruise level at least of 300 FL and their durations are at least of 1100 seconds. These filtering conditions permits to keep trajectories that are not affected by a level flight clearance."}, {"heading": "B. Methodology", "text": "To assess the model, we evaluate the position error between the TP and the real trajectory. Let H(\u03b8; s0) be the sequence of altitudes generated by the simulation of the hybrid system with the parameters \u03b8 = [m \u2206T V1 V2 VM ]\nT and the initial condition vector s0 = [t0 q0 h0 V0] T . Then, the measure\nis simply the sum of absolute errors. In the case of parameter estimation, we search in the feasible space of parameters \u0398, the point \u03b8 \u2208 \u0398 that minimizes this measure. So, we have the optimization problem:\n\u03b8\u2217i,j = argmin \u03b8\u2208\u0398 j\u2211 n=i |H(\u03b8; s0)n \u2212 Tn| (3)\nwhere H(\u03b8, s0) is the sequence of ordered altitudes obtained for given parameters \u03b8 and initial conditions s0 and T is the sequence of observed altitudes from a trajectory of the dataset. We suppose that (j \u2212 i) \u2264 |H(\u03b8, s0)| \u2264 |T | and that the timestamp associated to the point H(\u03b8, s0)n is the same than Tn. When fitting the whole climbing phase, some difficulties with eq.3 may arise. First, we need to give a termination criterion when simulating the hybrid system that is to stop when the TP reaches the level flight. Depending on the parameters, the cardinal of the resulting sequence of points will be different. So, it might be necessary to add points to the real trajectory T since the TP can reach the top of climb after T, e.g. a high value for the mass parameter. To compute this error, we simply add points at the level flight until the TP reaches it. Inversely, we add these points to the TP if it reaches the top of climb before the real trajectory. Besides, i < j are bounds to restrain the optimization on any subset of contiguous points of the trajectory. Thereafter, this notation will be useful for the online predictor."}, {"heading": "C. Results", "text": "Table I shows the evolution of the mean errors and the standard deviation with time for both models: with nominal values and with tuned values. The first important evidence is the inaccuracy of the Total-Energy Model to model the positions at the beginning of the trajectory. As a matter of fact, for the tuned values, the errors at 2 minutes are the highest. An explanation consists in the fact that the aircraft states (position, speed, heading) change rapidly at the beginning of the trajectory and the selected five parameters are not sufficient to capture this complexity. Furthermore, the optimization of the equation eq.3 has a global scope and so, the errors generated by local behaviors of the aircraft are ignored in favor of the common behavior. This depends directly on the selected values of i,j in \u03b8\u2217i,j , which in this case are i = 0 and j = ttoc where ttoc is the time at top of climb. From our dataset, this common behavior happens around 10 minutes where the errors are the smallest after an acceleration phase\nwhich happens around 5 minutes. As an example, on the figure 2, we can distinguish three main behaviors: the initial climb from 0s. to approximately 200s, a short acceleration phase from 200s. to 300s. and the common behavior after 300s. From figure 3, we can see that the initial climb is characterized with high variability in the rate of climb and an acceleration phase between 50s. and 100s., shown by a huge decrease in the rate of climb. During this phase, the predicted rate of climb is far from reality for both parameter sets. Thereafter, both models capture the acceleration phase and finally, they average the rate of climb during the common behavior, which fits well the positions as shown on figure 2.\nAnother interesting result is the evolution of the standard deviation, which is in parentheses, for the model with nominal values. It increases with time from 2 min. to 15 min. and afterwards, it seems to stabilize around 9 FL. This can be interpreted as an uncertainty cone, which is often used in the air traffic community, but here, we can see that the cone stops to grow at 15 minutes and becomes a corridor of uncertainty. First, we understand that the cone grows with the flight envelope, but afterwards, the uncertainty is bounded by the fact that the trajectories, as functions of time, are strictly increasing because of the filtering conditions of the dataset (cf. Section IV-A) and the upper bound that is the cruise level."}, {"heading": "V. ONLINE TRAJECTORY PREDICTOR", "text": "In this section, we present an online trajectory prediction which uses the observed positions of a current flight to tune at the same time the parameters of the model used to predict the rest of the trajectory. Different kind of algorithms can be used to undertake this task. Traditionally, a probabilistic approach is used in this online configuration, e.g. Kalman Filter, where the uncertainty is explicitly modeled. These performs very well on short periods of time but, for longer period like in this context, the linearity of the model could be too limited and should be subject to future experiments. In our approach, we use the BADA model in conjunction with the optimization algorithm CMA-ES in order to fit the parameters of the model with an objective function that defines a distance between the observed positions and the modeled one. As we will see, the problem of overfitting, which is studied by statistics and machine learning, arises in our context. The current section presents the difficulties and the solutions chosen with the associated results."}, {"heading": "A. Design of Experiment", "text": "In order to verify that the idea of an online predictor, as the one mentioned previously, is valid, we must do an empirical evaluation of the chosen algorithm by replicating the same context. The main hypothesis is that from the observation set, we can determine the values of parameters that will be fitted to the current flight. So the trajectory is separated in two subsets: the observed altitudes from the beginning to the present and the future altitudes from the present to the top of climb. As in the subsection IV-C, we use metering points to evaluate the quality of the prediction by computing the errors between the predicted altitudes and the real ones. To distinguish if a set of errors is statistically greater than the other one, we use a Wilcoxon signed-rank test. The null hypothesis of this test is that two related paired samples come from the same distribution. In our case, this test is a relevant choice because two approaches are tested on the same trajectory dataset. As usual, we reject the null hypothesis if the p-value is lower than 0.05."}, {"heading": "B. Methodology", "text": "The most naive way to learn the parameters of the model from the observed altitudes is to directly apply Eq.3 from subsection IV-B and to apply them to generate the rest of the trajectory. By doing so, the default model is always better than the fitted one with a significant p-value. The reason behind this result is simply that the fitted model does not generalize over all the behaviors of the aircraft. In other words, it is fitted only to the behavior captured in the observations. This problem is referred to overfitting in Machine Learning litterature. To circumvent this problem, we must think of the trajectory as a time serie where the observations arrive with an determined order, i.e. the temporal order. So, at first, we will always observe the initial climb where we know from Table I that the inaccuracy of the model is the greatest. Furthermore, we are more interested by the parameter values that fit better the\npositions near the present time than at the beginning of the trajectory. To this end, we will add a weighting vector \u03b1 that will penalize more the errors that are near the present time. But still, this is not sufficient because, depending on the present time, some parameters will not have any effect on the trajectory. As a matter of fact, from 0 to FL60, a predefined schedule is applied and only the mass parameter has an effect in BADA. The scope of the parameter V1 is from FL60 to FL100, the scope of V2 is from FL100 to the transition altitude (around FL277) and finally, the scope of Vm is over the transition altitude. Furthermore, we add the constraint that V2 is greater than V1 to the optimization problem. To avoid that the optimization algorithm assigns them some arbitrary values resulting in unrealistic trajectories, we use a regulation method that penalizes any deviation from the default parameters. A meta-parameter \u03bb is associated to the weight of the penalty, which controls the tradeoff between exploration and exploitation. Consequently, the resulting objective function is:\n\u03b8\u22170,t = argmin \u03b8\u2208\u0398  t\u2211 i=0 \u03b1i |H(\u03b8; s0)i \u2212Oi|+ \u03bb |\u03b8|\u2211 i=0 \u2223\u2223\u03b8i \u2212 \u03b8di \u2223\u2223  (4)\nwhere \u03b8d is the default parameters of BADA. Notice that the penalty occurs on the parameters space, but could also be applied on the trajectory space because the mapping from the parameter space to the trajectory space is not linear in the sum of differences of altitudes.\nFinally, in order to set the value of \u03bb, we use a crossvalidation approach where we partition the observation set in two: the learning set and the validation set. We choose the validation set to be just before the current altitude. One must notice that the samples are not independent and identically distributed and that we create a bias in favor of the points located just after the current altitude. Because of our extrapolation context, a bias is inevitable and this one seems the most justifiable one in order to gain accuracy in predicting the future positions. Figure 4 shows the partition of the trajectory. The cross-validation technique used in this study consists in learning the parameters of the model on the learning set with the objective function and to use these parameters for generating the points on the validation intervals. Then, we compare these points with the real ones. We do it for multiple values of \u03bb and we choose the parameter values where the validation error is the lowest to generate the rest of the trajectory."}, {"heading": "C. Results", "text": "The approach is validated on the same dataset than subsection IV-A. We choose three different time slices in order to represent the online aspect of the method. The validation set size is fixed to 36 points or 180 seconds. This choice must do the trade-off between the validation purpose of avoiding overfitting which could lead to a large validation set size and the learning purpose of finding the best parameter values which could lead to a large learning set size and therefore,\na small validation set size. At least, the validation set size must be higher than the acceleration phase, where the local behavior is the most different from the global one. In the learning objective function (cf. Eq.4), we choose a linear weight function where \u03b1i = it\u22121 . The initial lambda value is arbitrarily set to 100 and are doubled until the penalty is high enough so that the fitted values equal the default ones. Then, the parameter values generating the lowest validation error are chosen.\nAlso, to avoid that the algorithm changes the parameter values based on a poor learning performance, we arbritrarily set a threshold error at 5 FL, which is higher than the results at subsection IV-C. When the threshold is exceeded, the BADA default values are chosen.\nTable II, III and IV show the results of the proposed methodology for each time slice. At P = 400s, the two model performances are not significantly different as shown with the high p-values. We can see that our approach increases the accuracy by 1 FL in average for the metering points at 2 minutes and 5 minutes after the current time slice with a pvalue significantly under 0.05. For the metering points at 10 minutes, the p-value is higher than 0.05 and the difference is not statistically significant due to the high standard deviation values. This can be explained by the fact that the model is not very accurate during initial climb (cf. model validation section) and the validation set covers the acceleration phase. Also, because the learning error is too high, the algorithm can choose the BADA default values. So, the default choice ratio is around 20% which is rather high.\nAt P = 500s, the fitted model performs better at 2 and 5 minutes after the current position with small p-values. For 10 minutes, the two models are not significantly different because of the high value of the standard deviation. In fact, this can be interpreted as the two models are equally affected by the uncertainty around the possible maneuvers of the aircraft. In order to perform better, more information on the flight intents are required to reduce the variability in the trajectories. Here, the ratio of the default choice is 16%.\nAt P = 600s, the results are similar to P = 500s. The reason is that the aircraft keeps the same behavior between 500s. and 600s. which is different from the behavior at 400s.\nThere is some kind of regularity that explains the fact that the prediction is enhanced up to 5 minutes. This regularity is captured more easily by the learning algorithm when the behavior is stable during the validation interval. In this case, the ratio of the default choice is 14%."}, {"heading": "VI. CONCLUSIONS AND FUTURE WORK", "text": "In conclusion, this article presents a flight model for the climbing phase defined as a hybrid system based on BADA. An integration scheme is defined in order to generate the trajectories from this system. Then, tuning parameters are identified in order to be used in the online context. The method is validated through measuring the vertical errors between real trajectories and generated ones: both for default and fitted parameter values. In the validation context, fitting is done on the entire trajectory i.e. with total information. The measured errors are considered as the accuracy limit of this five parameters model. Afterwards, the model is applied in the online context, which evolves with time. Known altitudes are used to fit the parameters and then, these are used to predict the remaining points. To avoid overfitting, the known points are partitioned in a learning set and a validation set. The validation set is used to fit the regulation parameter, which penalizes the deviation from the default values. Results shows that the initial climb, which is before the main acceleration phase, is not modeled accurately in order to fit the parameters. On the contrary, when the flights adopt a common behavior after this acceleration phase, the online learning method increases the accuracy of the trajectory prediction. The gain is about 1 FL for 2 minutes and 5 minutes after the current time. After that, the two models are not significantly different\nbecause of the huge uncertainty on the trajectory. This study shows that the uncertainty becomes too important between 5 and 10 minutes with minimal information. Consequently, without further information on the flight intents and airspace constraints, ground trajectory prediction is not accurate enough for automated tasks such as conflict resolution. Furthermore, this study confirms the need to use the aircraft derived data to feed the BADA model in order to build a ground trajectory prediction as the foundation stone of automated Air Traffic control systems. The next step should be the identification of the relevant onboard data improving significantly the trajectory predictability on ground."}, {"heading": "VII. ACKNOWLEDGMENTS", "text": "This author Gae\u0301tan Marceau is funded by the scholarship CIFRE 710/2012 established between Thales Air Systems and INRIA-Saclay, and the scholarship 141138/2011 from the Fonds de Recherche du Que\u0301bec - Nature et Technologies."}], "references": [{"title": "Energy Rate Prediction Using an Equivalent Thrust Setting Profile", "author": ["R. Alligier", "D. Gianazza", "N. Durand"], "venue": "In 5th International Conference on Research in Air Transportation (ICRAT", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Programmation \u00e9volutionnaire appliqu\u00e9e \u00e0 la pr\u00e9vision de trajectoire", "author": ["Richard Alligier"], "venue": "PhD thesis, Master Recherche Informatique et Te\u0301le\u0301communications de l\u2019Universite\u0301 de Toulouse, parcours Intelligence Artificielle,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Climb trajectory prediction enhancement using airline flight-planning information", "author": ["R.A. Coppenbarger"], "venue": "In Proceedings of the AIAA Guidance, Navigation, and Control Conference,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1999}, {"title": "Combining Monte Carlo and worst-case methods for trajectory prediction in air traffic control: a case study", "author": ["E Crisostomi", "A. Lecchini-Visintini", "J. Maciejowski"], "venue": "Journal of Guidance, Control and Dynamics,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Analyse Numerique pour ingenieurs, 4ed", "author": ["Andre Fortin"], "venue": "Presses Internationales Polytechnique,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Trajectory Computation Infrastructure", "author": ["Eduardo Gallo", "Javier L\u00f3pez-leon\u00e9s", "Miguel A Vilaplana", "Francisco A Navarro"], "venue": "Based on BADA Aircraft Performance Model. 26th Digital Avionics Systems Conference,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "A Stochastic Hybrid Model for Air Traffic Control Simulation", "author": ["William Glover", "John Lygeros"], "venue": "Computer Engineering,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Pr\u00e9diction de trajectoires d\u2019avions \u00e0 l\u2019aide de la r\u00e9gression floue", "author": ["Mohammad Ghasemi Hamed"], "venue": "PhD thesis, Master Recherche Informatique et Te\u0301le\u0301communications de l\u2019Universite\u0301 de Toulouse, parcours Intelligence Artificielle,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2010}, {"title": "Benchmarking a BI-Population CMA-ES on the BBOB- 2009 Function Testbed", "author": ["N. Hansen"], "venue": "In F. Rotlauf, editor, 11th Annual Genetic and Evolutionary Computation Conference GECCO 2009 Companion Publication,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "References to CMA-ES Applications", "author": ["N. Hansen"], "venue": "http://www.lri.fr/ \u223chansen/cmaapplications.pdf,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "Comparison of Evolutionary Algorithms on a Benchmark Function Set. CEC\u201905", "author": ["N. Hansen", "al"], "venue": "Special Session,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Comparing Results of 31 Algorithms from the Black-Box Optimization Benchmarking BBOB-2009", "author": ["N. Hansen", "A. Auger", "R. Ros", "S. Finck", "Posik P"], "venue": "In 12th Annual Genetic and Evolutionary Computation Conference GECCO 2010 Companion Publication,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2010}, {"title": "Reducing the Time Complexity of the Derandomized Evolution Strategy with Covariance Matrix Adaptation (CMA-ES)", "author": ["N. Hansen", "S. M\u00fcller", "P. Koumoutsakos"], "venue": "Evolutionary Computation,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2003}, {"title": "Adapting Arbitrary Normal Mutation Distributions in Evolution Strategies: The Covariance Matrix Adaption", "author": ["N. Hansen", "A. Ostermeier"], "venue": "In IEEE International Conference on Evolutionary Computation", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1996}, {"title": "Completely Derandomized Self- Adaptation in Evolution Strategies", "author": ["N. Hansen", "A. Ostermeier"], "venue": "Evolutionary Computation,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2001}, {"title": "The CMA Evolution Strategy: A Tutorial", "author": ["Nikolaus Hansen"], "venue": "http:// www.lri.fr/\u223chansen/cmatutorial.pdf,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Fundamentals of Airplane Flight Mechanics", "author": ["David G. Hull"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2007}, {"title": "Hybrid Optimal Control for Aircraft Trajectory Design with a Variable Sequence of Modes", "author": ["Maryam Kamgarpour", "Manuel Soler", "CJ Tomlin"], "venue": "World Congress,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2011}, {"title": "Using Neural Networks to predict aircraft trajectories", "author": ["Y. Le Fablec", "J.M. Alliot"], "venue": "In Proceedings of the International Conference on Artificial Intelligence", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1999}, {"title": "Hybrid Systems: Foundations, Advanced Topics and Applications", "author": ["S. Sastry Lygeros J", "C. Tomlin"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2010}, {"title": "Literature Survey of Trajectory Predictor Technology", "author": ["Ben Musialek", "Carmen F. Munafo", "Ryan Hollis", "Paglione Mike"], "venue": "Technical Report DOT/FAA/TCTN11/1, Federal Aviation Administration, William J. Hughes Technical Center,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2010}, {"title": "BBOB workshop, volume 12th Annual Genetic and Evolutionary Computation Conference GECCO 2010 Companion Publication", "author": ["Martin Pelikan", "Jurgen Branke", "editors"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Evolutionstrategie: Optimierung Technisher Systeme nach Prinzipien des Biologischen Evolution", "author": ["I. Rechenberg"], "venue": "Fromman-Hozlboog Verlag, Stuttgart,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1972}, {"title": "Numerical Optimization of Computer Models", "author": ["H.-P. Schwefel"], "venue": null, "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1981}, {"title": "Common Trajectory Prediction Capability for Decision Support Tools", "author": ["Sip Swierstra", "S.M. Green"], "venue": "In 5th USA/Europe Air Traffic Management Research and Development Seminar,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2003}], "referenceMentions": [{"referenceID": 20, "context": "Besides, [22] provides an important literature survey of trajectory prediction technology with 282 reviewed documents and 20 selected for further studies.", "startOffset": 9, "endOffset": 13}, {"referenceID": 2, "context": "Also, [4] and [27] enumerate the principal difficulties inherent to TP, i.", "startOffset": 6, "endOffset": 9}, {"referenceID": 24, "context": "Also, [4] and [27] enumerate the principal difficulties inherent to TP, i.", "startOffset": 14, "endOffset": 18}, {"referenceID": 5, "context": "To generate trajectories, [7] uses six ordinary differential integrators depending on the longitudinal motion instruction.", "startOffset": 26, "endOffset": 29}, {"referenceID": 6, "context": "Similarly, [8] and [19] use hybrid systems to model the change of differential equations according to the control law and the aircraft states.", "startOffset": 11, "endOffset": 14}, {"referenceID": 17, "context": "Similarly, [8] and [19] use hybrid systems to model the change of differential equations according to the control law and the aircraft states.", "startOffset": 19, "endOffset": 23}, {"referenceID": 6, "context": "As seen in [8], this model is well-suited for implementing BADA.", "startOffset": 11, "endOffset": 14}, {"referenceID": 0, "context": "[1] exposes a technique to find a general thrust settings, i.", "startOffset": 0, "endOffset": 3}, {"referenceID": 18, "context": "Non-parametric approaches rely on machine learning and statistical inference: [20] uses neural networks, [2] uses genetic programming in order to learn the structure of the variables of a linear regression and [9] uses fuzzy regression with k-nearest neighbor.", "startOffset": 78, "endOffset": 82}, {"referenceID": 1, "context": "Non-parametric approaches rely on machine learning and statistical inference: [20] uses neural networks, [2] uses genetic programming in order to learn the structure of the variables of a linear regression and [9] uses fuzzy regression with k-nearest neighbor.", "startOffset": 105, "endOffset": 108}, {"referenceID": 7, "context": "Non-parametric approaches rely on machine learning and statistical inference: [20] uses neural networks, [2] uses genetic programming in order to learn the structure of the variables of a linear regression and [9] uses fuzzy regression with k-nearest neighbor.", "startOffset": 210, "endOffset": 213}, {"referenceID": 0, "context": "Combining both approaches is an interesting research question addressed by [1] and [5].", "startOffset": 75, "endOffset": 78}, {"referenceID": 3, "context": "Combining both approaches is an interesting research question addressed by [1] and [5].", "startOffset": 83, "endOffset": 86}, {"referenceID": 16, "context": "[18]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "According to [18], this is a reasonable assumption since the climb phase lasts around 20 minutes.", "startOffset": 13, "endOffset": 17}, {"referenceID": 16, "context": "From [18], it is given by:", "startOffset": 5, "endOffset": 9}, {"referenceID": 19, "context": "[21]) where a system can make an infinite number of jumps in a finite amount of time.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "[6]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 15, "context": "The Covariance Matrix Adaptation Evolution Strategy (CMA-ES) [17] is today a state-of-the-art derivative-free optimization method that has demonstrated outstanding performances for problems up to a few hundred variables, in several official comparisons (see, among others, the CEC 2005 challenge [12], and both Black Box Optimization Benchmark workshops at ACM-GECCO 2009 [13] and 2010 [23]), as well as on a large number of real-world applications [11].", "startOffset": 61, "endOffset": 65}, {"referenceID": 10, "context": "The Covariance Matrix Adaptation Evolution Strategy (CMA-ES) [17] is today a state-of-the-art derivative-free optimization method that has demonstrated outstanding performances for problems up to a few hundred variables, in several official comparisons (see, among others, the CEC 2005 challenge [12], and both Black Box Optimization Benchmark workshops at ACM-GECCO 2009 [13] and 2010 [23]), as well as on a large number of real-world applications [11].", "startOffset": 296, "endOffset": 300}, {"referenceID": 11, "context": "The Covariance Matrix Adaptation Evolution Strategy (CMA-ES) [17] is today a state-of-the-art derivative-free optimization method that has demonstrated outstanding performances for problems up to a few hundred variables, in several official comparisons (see, among others, the CEC 2005 challenge [12], and both Black Box Optimization Benchmark workshops at ACM-GECCO 2009 [13] and 2010 [23]), as well as on a large number of real-world applications [11].", "startOffset": 372, "endOffset": 376}, {"referenceID": 21, "context": "The Covariance Matrix Adaptation Evolution Strategy (CMA-ES) [17] is today a state-of-the-art derivative-free optimization method that has demonstrated outstanding performances for problems up to a few hundred variables, in several official comparisons (see, among others, the CEC 2005 challenge [12], and both Black Box Optimization Benchmark workshops at ACM-GECCO 2009 [13] and 2010 [23]), as well as on a large number of real-world applications [11].", "startOffset": 386, "endOffset": 390}, {"referenceID": 9, "context": "The Covariance Matrix Adaptation Evolution Strategy (CMA-ES) [17] is today a state-of-the-art derivative-free optimization method that has demonstrated outstanding performances for problems up to a few hundred variables, in several official comparisons (see, among others, the CEC 2005 challenge [12], and both Black Box Optimization Benchmark workshops at ACM-GECCO 2009 [13] and 2010 [23]), as well as on a large number of real-world applications [11].", "startOffset": 449, "endOffset": 453}, {"referenceID": 22, "context": "CMA-ES is an Evolution Strategy [25], [26] that uses Gaussian mutation with adaptive parameter setting.", "startOffset": 32, "endOffset": 36}, {"referenceID": 23, "context": "CMA-ES is an Evolution Strategy [25], [26] that uses Gaussian mutation with adaptive parameter setting.", "startOffset": 38, "endOffset": 42}, {"referenceID": 13, "context": "larger) than that of a random walk, and in the original version [15], [16], the covariance matrix was updated by adding a rank-one matrix with eigenvector the direction of progress.", "startOffset": 64, "endOffset": 68}, {"referenceID": 14, "context": "larger) than that of a random walk, and in the original version [15], [16], the covariance matrix was updated by adding a rank-one matrix with eigenvector the direction of progress.", "startOffset": 70, "endOffset": 74}, {"referenceID": 12, "context": "An improved version with rank-\u03bc update was later proposed [14], and several additional variant made it more and more powerful.", "startOffset": 58, "endOffset": 62}, {"referenceID": 8, "context": "The most recent version is the so-called bi-popCMA-ES [10], that evolves both a large and a small population and outperforms previous versions in case of multimodal functions.", "startOffset": 54, "endOffset": 58}], "year": 2012, "abstractText": "This paper presents a model based on an hybrid system to numerically simulate the climbing phase of an aircraft. This model is then used within a trajectory prediction tool. Finally, the Covariance Matrix Adaptation Evolution Strategy (CMA-ES) optimization algorithm is used to tune five selected parameters, and thus improve the accuracy of the model. Incorporated within a trajectory prediction tool, this model can be used to derive the order of magnitude of the prediction error over time, and thus the domain of validity of the trajectory prediction. A first validation experiment of the proposed model is based on the errors along time for a one-time trajectory prediction at the take off of the flight with respect to the default values of the theoretical BADA model. This experiment, assuming complete information, also shows the limit of the model. A second experiment part presents an on-line trajectory prediction, in which the prediction is continuously updated based on the current aircraft position. This approach raises several issues, for which improvements of the basic model are proposed, and the resulting trajectory prediction tool shows statistically significantly more accurate results than those of the default model.", "creator": "LaTeX with hyperref package"}}}