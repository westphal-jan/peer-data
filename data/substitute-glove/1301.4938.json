{"id": "1301.4938", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Jan-2013", "title": "A type theoretical framework for natural language semantics: the Montagovian generative lexicon", "abstract": "In of suggest after, frequently but similar beyond integrated kwasniewska - cal generalization larger compositional ontology. These combining are make use of considered theory at same as symphonic took meanings. We that so with might specifics three only are broader, ours, making whole use only contending - ond order quanta calculation as takes particular theory however presumably assembly taking significant multi sorted yields possibly predicate conventional each numerical representations. The advantages where such an notion are republished particular in naming constraint (dienes, quadrilaterals, grammars) and only lexical pragmatics (coercions, either especially impossible copredication ago differ senses, hakama am - biguities, fictive motion, .. ). Thereafter we possible time instance objectives included stepping again making indicate.", "histories": [["v1", "Mon, 21 Jan 2013 17:42:19 GMT  (1368kb,D)", "https://arxiv.org/abs/1301.4938v1", null], ["v2", "Wed, 1 Jan 2014 23:58:30 GMT  (1383kb,D)", "http://arxiv.org/abs/1301.4938v2", null], ["v3", "Fri, 3 Jan 2014 15:43:25 GMT  (1383kb,D)", "http://arxiv.org/abs/1301.4938v3", null]], "reviews": [], "SUBJECTS": "cs.LO cs.CL", "authors": ["christian retor\\'e"], "accepted": false, "id": "1301.4938"}, "pdf": {"name": "1301.4938.pdf", "metadata": {"source": "CRF", "title": "A TYPE THEORETICAL FRAMEWORK FOR NATURAL LANGUAGE SEMANTICS: THE MONTAGOVIAN GENERATIVE LEXICON", "authors": ["CHRISTIAN RETOR\u00c9"], "emails": [], "sections": [{"heading": null, "text": "con, for computing the semantics of natural language sentences, expressed in many sorted higher order logic. Word meaning is depicted by lambda terms of second order lambda calculus (Girard\u2019s system F) with base types including a type for propositions and many types for sorts of a many sorted logic. This framework is able to integrate a proper treatment of lexical phenomena into a Montagovian compositional semantics, including the restriction of selection which imposes the nature of the arguments of a predicate, and the possible adaptation of a word meaning to some contexts. Among these adaptations of a word\u2019s sense to the context, ontological inclusions are handled by an extension of system F with coercive subtyping that is introduced in the present paper. The benefits of this framework for lexical pragmatics are illustrated on meaning transfers and coercions, on possible and impossible copredication over different senses, on deverbal ambiguities, and on \u201dfictive motion\u201d. Next we show that the compositional treatment of determiners, quantifiers, plurals,... are finer grained in our framework. We then conclude with the linguistic, logical and computational perspectives opened by the Montagovian generative lexicon."}, {"heading": "1. Introduction: word meaning and compositional semantics", "text": "The study of natural language semantic and its automated analysis is usually divided into formal semantics, usually compositional, which has strong connections with logic and with philosophy of language, and lexical semantics which rather concerns word meaning and their interrelations, derivational morphology and knowledge representation. Roughly speaking, given an utterance, formal semantics tries to determine who does what according to this utterance, while lexical semantics analyses the concepts under discussions and their interplay i.e. what it speaks about.\n(1) A sentence: Some club defeated Leeds.\n(2) Its formal semantics: \u2203x : e (club(x) \u2227 defeated(x, Leeds)) (3) Lexical semantics of the verb as found in a dictionary: defeat:\na. overcome in a contest, election, battle, etc.; prevail over; vanquish\nb. to frustrate; thwart.\nc. to eliminate or deprive of something expected\nAlthough any applications in computational linguistics requires both formal and compositional semantics rather applies in man machine dialogue, text generation and lexical semantics in information retrieval and classification. Herein we shall endow compositional semantics with a treatment of some of lexical semantics issues, in particular for picking up the right word sense in a given context. Of course any\n1991 Mathematics Subject Classification. 03B65; 03B15, 03B40, 68T50. Key words and phrases. type theory; computational linguistics; Affiliation: LaBRI, Universite\u0301 de Bordeaux (& IRIT-CNRS, Toulouse) \u2014- This work was achieved during my CNRS-sabbatical at IRIT and has been supported by the project ANR LOCI.\n1\nar X\niv :1\n30 1.\n49 38\nv3 [\ncs .L\nO ]\n3 J\nan 2\n01 4\nsensible analyser, including human beings, or Moot\u2019s Grail parser [41] combines both the predicate argument structures and the relations between lexical meanings to build a semantic representation and to understand the utterance.\n1.1. The syntax of compositional semantics. As opposed to many contributions to the domain of linguistic known as \u201dformal semantics\u201d the present paper neither deals with reference nor with truth in a given situation: we only build a logical formulae first order or higher order, single or many sorted) that can be thereafter interpreted as one wants, if he wishes to. Hence are not committed to any particular kind of interpretation like truth values, possible worlds, game semantics,...\nIn the traditional view as exposed by Montague, the process of semantic interpretation of a sentence, consists in computing a logical formula including logical modalities and intensional operators, from syntax and word meanings, and to interpret it in possible world semantics. Although Montague thought that intermediate steps were meaningless and should be wiped off just after computing truth values and references, in this paper we precisely focus on the intermediate step, the logical formula, that can be called the logical form of the sentence, with particular attention to the way it is computed \u2014 for the time being, we leave out the interpretation of these formulae. A reason for doing so is that we can encompass subtle questions, like vague predicates, generalised and vague quantifiers, for which standard notions of truth and references are inadequate possibly some interactive interpretation would be better suited, e.g. like [1, 28]. Another reason is that, apart from these difficult questions, we do not have modification to bring to standard interpretations.\n1.2. Brief reminder on Montague semantics. Let us briefly remind the reader how one computes the logical form according to the montagovian view. Assume for simplicity that a syntactic analysis is a tree specifying for each node, which subtree applies to the other one \u2014 the one that is applied is called the function while the other is called its argument. A semantic lexicon provides a simply typed \u03bb-term [w] for each word w. The semantics of a leaf (hence a word) w is [w] and the semantic [t] of a sub syntactic tree t = (t1, t2) is recursively defined as [t] = ([t1] [t2]) that is [t1] applied to [t2], if [t1] is the function and [t2] the argument \u2014 and as [t] = ([t2] [t1]) otherwise, i.e. when [t2] is the function and [t1] the argument.\nThe typed \u03bb-terms from the lexicon are given in such a way that the function always has a semantic type of the shape a \u2192 b that matches the type a of the argument, and the semantics associated with the whole tree has the semantic type t, that is the type of propositions. This correspondence between syntactical categories and semantic types, which extends into a correspondence between parse structures and logical forms is crystal clear in categorial grammars, see e.g. [45, Chapter 3]. Typed \u03bb-terms usually are defined out of two base types, e for individuals (also known as entities) and t for propositions (which have a truth value). Logical formulae can be defined in this typed \u03bb-calculus as first observed by Church long ago. This early use of lambda calculus, where formulae are viewed typed lambda terms, can not be merged with the more familiar view of typed lambda terms as proofs. The proof which such a typed lambda term correspond to is simply the proof that the formula is well formed, e.g. that a two-place predicate is properly applied to two individual terms of type e and not to more or less objects, nor to objects of a different type etc. This initial vision of lambda calculus was designed for a proper handling of substitution in deductive systems a\u0300 la Hilbert. One needs constants for the logical quantifiers and connectives:\nword semantic type u\u2217\nsemantics : \u03bb-term of type u\u2217\nxv the variable or constant x is of type v some (e\u2192 t)\u2192 ((e\u2192 t)\u2192 t) \u03bbP e\u2192t \u03bbQe\u2192t (\u2203(e\u2192t)\u2192t (\u03bbxe(\u2227t\u2192(t\u2192t)(P x)(Q x)))) club e\u2192 t \u03bbxe(clube\u2192t x) defeated e\u2192 (e\u2192 t) \u03bbye \u03bbxe ((speak aboute\u2192(e\u2192t) x)y) Leeds e\nLeeds\nas well as predicates for the precise language to be described \u2014 a binary predicate like won has the type e\u2192 e\u2192 t.\nA small example goes as follows. Assume the syntax says that the structure of the sentence \u201dSome club defeated Leeds.\u201d is\n(some (club)) (defeated Leeds)\nwhere the function is always the term on the left. If the semantic terms are as in the lexicon in figure 1, placing the semantical terms in place of the words yields a large \u03bb-term that can be reduced:\n(( \u03bbP e\u2192t \u03bbQe\u2192t (\u2203(e\u2192t)\u2192t (\u03bbxe(\u2227(P x)(Q x)))) )( \u03bbxe(clube\u2192t x) ))(( \u03bbye \u03bbxe ((defeatede\u2192(e\u2192t) x)y) ) Leedse\n) \u2193 \u03b2(\n\u03bbQe\u2192t (\u2203(e\u2192t)\u2192t (\u03bbxe(\u2227t\u2192(t\u2192t)(clube\u2192t x)(Q x)))) )(\n\u03bbxe ((defeatede\u2192(e\u2192t) x)Leedse) )\n\u2193 \u03b2( \u2203(e\u2192t)\u2192t (\u03bbxe(\u2227(clube\u2192t x)((defeatede\u2192(e\u2192t) x)Leedse))) ) This \u03bb-term of type t that can be called the logical form of the sentence, represents\nthe following formula of predicate calculus (admittedly more pleasant to read):\n\u2203x : e (club(x) \u2227 defeated(x, Leeds)) The above described procedure is quite general: starting a properly defined semantic lexicon whose terms only contains the logical constants and the predicates of the given language one always obtain a logical formula. Indeed, such \u03bb-terms always reduce to a unique normal form and any normal \u03bb-term of type t (preferably \u03b7 long, see e.g. [45, Chapter 3]) corresponds to a logical formula.\nIf we closely look at the Montagovian setting described above, we observe that it is weaving two different \u201dlogics\u201d:\nLogic/calculus for meaning assembly: (a.k.a glue logic, metalogic,...) In our example, this is simply typed \u03bb-calculus with two base types e and t \u2014 these terms are the proof in intuitionistic propositional logic. Logic/language for semantic representations: In our example, that is higher-order predicate logic.1\nThe framework we present in this paper mainly concerns the extension of the metalogic and the reorganisation of the lexicon in order to incorporate some phenomena of lexical semantics, first of all restrictions of selection. Indeed, in the standard type system above nothing prevents a mismatch between the real nature of the argument and its expected nature. Consider the following sentences:2\n(4) * A chair barks.\n(5) * Jim ate a departure\n(6) ? The five is fast\nAlthough they can be syntactically analysed, they should not receive a semantical analysis. Indeed, \u201dbarks\u201d requires a \u201ddog\u201d or at least an \u201danimate\u201d subject while a \u201dchair\u201d is neither of them; \u201ddeparture\u201d is an event, which cannot be an \u201dinanimate\u201d object that could be eaten; finally a \u201dnumber\u201d like \u201dfive\u201d cannot do anything fast \u2014 but there are particular contexts in which this can happen and we shall also handles these meaning transfers.\n1.3. The need of integrating lexical semantics in formal semantics. In order to block the interpretation of the semantically illformed sentences above, it is quite natural to use types, where the word type be both understood in its intuitive and in its formal meaning. The type of the subject of barks should be \u201ddog\u201d, the type of \u201dfast\u201d objects should be \u201danimate\u201d, and the type of the object of \u201date\u201d should be \u201dinanimate\u201d. Clearly, having, on the formal side a unique type e for all entities is not sufficient.\nThe traditional view with a single type e for entities has another related drawback. It is unable to relate related predicates, although a usual dictionary does. A common noun like \u201dbook\u201d is usually viewed as a unary predicate \u201dbook:e \u2192 t\u201d while a transitive verb like \u201dread\u201d is viewed as a binary predicate \u201dread:e\u2192 e\u2192 t\u201d This gives the proper argument structure of Mary reads a book. as (\u2203x : ebook(x) and reads(Mary, x)) but this traditional setting cannot relate the predicates book and read \u2014 while any dictionary does. If we had several types, as we shall do later on, we could stipulate that the object of \u201dread\u201d ought to be something that can be \u201dread\u201d, that one can \u201dread\u201d and \u201dwrite\u201d a \u201dbook\u201d. Such connections like predicates like \u201dbook\u201d, \u201dwrite\u201d, \u201dread\u201d would allow to interpret sentences like \u201dI finished my book\u201d which usually means \u201dI finished to read my book\u201d and sometimes \u201dI finished to write my book\u201d.\nHence we need a more sophisticated type theory than the one initially used by Montague to filter semantically invalid sentences. But in some cases some flexibility is needed to accept and analyse sentences in which a word type is coerced into another type. In sentence 6, in the context of a football match, the noun \u201dfive\u201d can be considered as a player i.e. a \u201dperson\u201d who plays the match with the number 5 jersey, who can \u201drun\u201d and be \u201dfast\u201d.\n1It can be first-order logic if reification is used, but this may induce unnatural structure and exclude some readings.\n2We use the standard linguistic notation: a \u201d* \u201d in front of a sentence points out that the sentence is incorrect, a \u201d?\u201d indicates that the correctness can be discussed and the absence of any symbol in front means that the sentence is correct.\nThere is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories. In those pioneering studies, the objective is mainly to classify these phenomena, to find the rules that govern them. The quest of a computational formalisation that can be incorporated into an automated semantic analyser appears with Pustejovsky\u2019s generative lexicon in 1991 [52, 53]. The integration of lexical issue into compositional semantics la Montague and type theories appears with the work by Nicholas Asher [4, 5] which lead to the book [2], and differently in some works of Robin Cooper with an intensive use of records from type theory to recover frame semantics with features and attributes inside type-theoretical compositional semantics [16, 17]\n1.4. Type theories for integrating lexical semantics. As the afore mentioned contribution suggest, finer-grained type theories are quite a natural framework both for formal semantics a\u0300 la Montague and for selectional restriction and coercions. Such a model must extend the usual ones into two directions:\n(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]\nAt the end of this paper, we shall provide a comparison of the current approaches, which mainly focus on 1. Let us list right now what the current approaches are:\n\u2022 The system work with type based coercions and relies on some Modern Type Theory (MTT) 3 \u2014 this correspond to the work of Zhaohui Luo [33, 34, 64, 13] \u2022 The system work with type based coercions and relies on usual typed \u03bb-\ncalculus extended with some categorical logic rules \u2014 this approach by Asher [4, 5] culminated in his book [2] \u2022 The system work with term based coercions and relies on second order \u03bb-calculus \u2014 this is our approach, first introduced with Bassac, Mery, and further developed with Mery, Moot, Pre\u0301vot, Real-Coelho. [6, 43, 42, 44, 36, 29, 30, 56, 54, 55]\nIn fact our approach differs from the concurrent ones mainly because of the organisation of the lexicon and of the respective ro\u0302les of types and terms. Our approach can be said to be word driven, as it account for the (numerous) idiosyncrasies of natural language in particular the different behaviour of words of the same type is coded by assigning them different terms, while others derive everything from the types.\nThe precise type system we use, namely system F , does not make a big difference with other type theories, and as far as the presentation of the system is concerned, it is the simplest of all systems, because it only contains four term building operations (two of them being the standard \u03bb-calculus rules, the two other one being their second order counter part) and two reduction rules (one of them being the usual beta reduction and the other one being its second order counterpart). Dependent types, that types defined from terms are not avoided."}, {"heading": "2. A Montagovian generative lexicon", "text": "3This name Modern Type Theory (MTT) covers several variants of modern type theories, including Martin-Lo\u0308f type theory, the Predicative Calculus of (Co)Inductive Constructions (pCic), the Unifying Theory of dependent Types (UTT),... \u2014 this later one being the closest to the system used by Zhaohui Luo\nfor compositional semantic and lexical pragmatics\nWe are to present our solution for introducing some lexical issues in a compositional framework a\u0300 la Montague.\n2.1. Guidelines for a semantic lexicon. We should keep in mind that whatever the precise solution presented, the following questions must be addressed in order to obtain a computational model, so here are the guidelines of our model:\n\u2022 What is the logic for semantic representation? We use many-sorted higher order predicate calculus. As usual, the higher order can be reified in first order logic, so it can be first order logic, but in any case the logic has to be many sorted. Asher [2] is quite similar on this point, while Luo use Type Theory [34]. \u2022 What are the sorts?\nThe sorts are the base types. As discussed later on these sorts may vary from a small set of ontological kinds to any formula of one variable. We recently proposed that they correspond to classifiers in language with classifiers: this give sorts a linguistically and cognitively motivated basis. [38] \u2022 What is the metalogic (glue logic) for meaning assembly?\nWe use second order \u03bb-calculus (Girard system F ) in order to factor operations that apply uniformly to family types. For specific coercions, like ontological inclusion we use subtyping introduced in the present paper. Asher [2] use simply typed \u03bb-terms with additional categorical rules, while Luo also use Type Theory with coercive subtyping [34]. \u2022 What kind of information is associated with a word in the lexicon?\nHere it will be a finite set of \u03bb-terms, one of them being called the principal \u03bb-term while the other are called optional. Other approaches make use more specific terms and rules. \u2022 How does one compose words and constituents for a compositional semantics?\nWe simply apply one \u03bb-term to the other, following the syntactic analysis, perform some transformations corresponding to coercions and presupposition, and reduce the compound by \u03b2-reduction. \u2022 How is rendered the semantic incompatibility of two components?\nBy type mismatch, between a function of type A\u2192 X and an argument of type B 6= A, and others do the same. \u2022 How does one allow an a priori impossible composition? By using the optional \u03bb-terms, which change the types of at least one of the two terms being composed, the function and argument. Both the function and the argument may provide some optional lambda terms. Other approaches rather use type driven rules. \u2022 How does one allow and block felicitous and infelicitous copredications on\nvarious aspect of a word? An aspect car be explicitly declared as incompatible with any other aspect. More recently we saw that linear types (linear system F ) can account for compatibility between arbitrary subsets of the possible aspects. [37]\nEach word in the lexicon is given a principal term, as well as a finite number, possibly nought, optional terms that licence type change and implement coercions. They may be inferred from an ordinary dictionary, electronic or not. Terms combine almost as usual except that there might be type clashes, which accounts for infringement of selectional restriction: in this case optional terms may be use to solve the type mismatch. In case they lead to different results these results should be considered as different possible readings \u2014 just as the different readings with\ndifferent quantifier scopes are considered by formal semantics as different possible readings of a sentence.\nLet us first present the type and terms and thereafter we shall come back to the the composition modes.\n2.2. Remarks on the type system for semantics. We use a type system that resembles Muskens Tyn [46] where the usual type of individuals, e is replaced with a finite but large set of base types e1, . . . , en for individuals, for instance objects, concepts, events,... These base types are the sorts of the many sorted logic whose formulae express semantic representations. The set of base types as well as their interrelations can express some ontological relations as Ben Avi and Francez thought ten years ago [8]\nFor instance, assume we have a many sorted logic with a sort \u03b6 for animals, a sort \u03c6 for physical objects and a predicate eat whose arguments are of respective sort \u03c6 and \u03b6 the many sorted formula \u2200z : \u03b6 \u2203x : \u03c6 eat(z, x) is rendered in type theory by the \u03bb-term: \u2200\u03b6(\u03bbz\u03b6\u2203\u03c6\u03bbx\u03c6((eat x)z) with eat a constant of type \u03c6 \u2192 \u03b6 \u2192 t. Observe that the type theoretic formulation requires a quantifier for each sort \u03b1 of object, that is a constant \u2200\u03b1 of type (\u03b1\u2192 t)\u2192 t. 4\nWhat are the base types? We have a tentative answer, but we cannot be too sure of the answer. Indeed, this is a subtle question depending on ones philosophical convictions, and also of the expected precision of the semantic representations.5 but it does not really interfere with the formal and computational model we present here. Let us mention some natural sets of bases types are, from the smallest to the largest:\n(1) A single type e for all entities (but as seen above it cannot account for lexical semantics) (2) A very simple ontology distinguishing events, physical objects, living entities, concepts, ... (this resembles Asher\u2019s position) (3) Many Asian languages (Chinese, Japanese, Korean, Malay, Burmese, Nepali,...) and all Sign Languages, have classifiers that are pronouns specific to classes of nouns (100\u2013400) especially detailed for physical objects that are handled, animals.There are almost no classifiers in European languages. Nevertheless a word like \u201dhead\u201d in \u201dThree heads of cattle.\u201d can be considered as a classifier. Hence classifiers are a rather natural set of base types, or the importation of the classifiers of a language in one that does not have any. But we do not claim that this is the definitive answer. For instance, for a specific task, some other set of base types may be better. [38] (4) A type per common noun as proposed by Luo in [34]) (5) A type for every formula with a single free variable as suggested by some\ncolleague (N. Asher or F. Corblin) after a talk of mine.\nOur opinion is that types should be cognitively natural classes and rich enough to express selectional restrictions. Whatever types are, there is a relation between types and properties. With base types as in 5, the correspondence seems quite clear, but, because types can be used to express new many sorted formulae, the set of types is in this case defined as a least fixed point. For other sets of base types, e.g. 4 or 2 for each type \u03c4 there should be a corresponding predicate which recognises \u03c4 entities among entities of a larger type. For instance, if there is a type dog there should be a predicate d\u0302og : \u03b1\u2192 t but what should be \u03b1 the type of its argument?\n4We do not speak about interpretations, but if one wishes to, we do not necessarily ask for the usual requirement that sorts are disjoint: this is coherent with the fact that in type theory, nothing prevents a pure term to have several types. 5For instance, a dictionary says that pregnant can be said of a \u201dwoman or female animal\u201d, but can it be said of a \u201dgrandma\u201d or of a \u201dveal\u201d?\nShould it be \u201danimal\u201d, \u201danimate\u201d,... the simplest solution is to assume a type of all individuals, that is Montague\u2019s e, and to say that corresponding to any base type \u03c4 , there is a predicate, namely \u03c4\u0302 of type e\u2192 t6\nLet us say here a remark on the predicate constants in the language. If a predicate constant, say Q is given with type u \u2192 t with u 6= e which sometimes is more natural there is an obvious extension Qe which should be interpreted as false for any object that cannot be viewed as an u-object. Given predicate in the language do also have restrictions, Q|v which is defined as Q on q \u2229 v where q is the domain of Q and false elsewhere.\n2.3. \u039bTyn: many sorted formulae in second order lambda calculus. Since we have many base types, and many compound types as well, it is quite convenient and almost necessary to define operations over family of similar terms with different types, to have some flexibility in the typing, and to have terms that act upon families of terms and types. Hence we shall extend further Tyn into \u039bTyn by using Girard\u2019s system F as the type system [21, 20]. System F involves quantified types whose terms can be specialised to any type.\nThe types of \u039bTynare defined as follows:\n\u2022 Constants types ei and t, as well as type variables \u03b1, \u03b2, . . . are types. \u2022 Whenever T and \u03b1 respectively are a type and a type variable \u03a0\u03b1. T is a\ntype. The type variable may or may not occur in the type T . \u2022 Whenever T1 and T2 are types, T1 \u2192 T2 is a type as well.\nThe terms of \u039bTyn, which encode proofs of quantified propositional intuitionistic logic, are defined as follows:\n\u2022 A variable of type T i.e. x : T or xT is a term, and there are countably many variables of each type. \u2022 In each type, there can be a countable set of constants of this type, and\na constant of type T is a term of type T . Such constants are needed for logical operations and for the logical language (predicates, individuals, etc.). \u2022 (f \u03c4) is a term of type U whenever \u03c4 : T and f : T \u2192 U . \u2022 \u03bbxT . \u03c4 is a term of type T \u2192 U whenever x : T , and \u03c4 : U . \u2022 \u03c4{U} is a term of type T [U/\u03b1] whenever \u03c4 : \u039b\u03b1. T , and U is a type. \u2022 \u039b\u03b1.\u03c4 is a term of type \u03a0\u03b1.T whenever \u03b1 is a type variable, and \u03c4 : T a\nterm without any free occurrence of the type variable \u03b1 in the type of a free variable of \u03c4 .\nThe later restriction is the usual one on the proof rule for quantification in propositional logic: one should not conclude that F [p] holds for any proposition p when assuming G[p] \u2014 i.e. having a free hypothesis of type G[p].\nThe reduction of the terms in system F or its specialised version \u039bTynis defined by the two following reduction schemes that resembles each other:\n\u2022 (\u03bbx.\u03c4)u reduces to \u03c4 [u/x] (usual \u03b2 reduction). \u2022 (\u039b\u03b1.\u03c4){U} reduces to \u03c4 [U/\u03b1] (remember that \u03b1 and U are types).\nAs an example, we earlier said that in Tyn we needed a first order quantifier per sort (.e. per base type). In \u039bTynit is sufficient to have a single quantifier \u2200, that is a constant of type \u03a0\u03b1. (\u03b1\u2192 t)\u2192 t . Indeed, this quantifier can be specialised to specific types, for instance to the base type \u03b6, yielding \u2200{\u03b6} : (\u03b6 \u2192 t)\u2192 t, or even to properties of \u03b6 objects, which are of type \u03b6 \u2192 t, yielding \u2200{\u03b6 \u2192 t} : ((\u03b6 \u2192 t)\u2192 t) \u2192 t. We actually do quantify over higher types, for instance in the examples\n6An alternative solution, used by us and others [56, 14] would be \u03a0\u03b1. \u03b1\u2192 t, using quantification over types to be defined in next section.\nbelow respectively quantify over propositions with a human subject, and the next one over propositions:\n(7) He did everything he could to stop them.\n(8) And he believes whatever is politically correct and sounds good.\nAs Girard showed [21, 20] reduction is strongly normalising and confluent every term of every type admits a unique normal form which is reached no matter how one proceeds. 7 The normal forms (which can be asked to be \u03b7-long) can be characterised as follows (for a reference see e.g. [23]) :\nProposition 1. A normal \u039b-term N of system F , \u03b2 normal and \u03b7 long to be precise, has the following structure:\nsequence of {\u00b7 \u00b7 \u00b7 } and (\u00b7 \u00b7 \u00b7 ) sequence of head applications to types Wk\n\u03bb and \u039b abstractions variable and normal terms tXll N = \ufe37 \ufe38\ufe38 \ufe37 ( \u03bbxXii | \u039bXj ) \u2217 \ufe37 \ufe38\ufe38 \ufe37 h(\u03a0Xk|Xl\u2192) \u2217Z \ufe37 \ufe38\ufe38 \ufe37 ( {Wk} | tXll ) \u2217 )\nThis has a good consequence for us, see e.g. [45, Chapter 3]:\nProperty 1 (\u039bTynterms as formulae of a many-sorted logic). If the predicates, the constants and the logical connectives and quantifiers are the ones from a many sorted logic of order n (possibly n = \u03c9) then the normal terms of \u039bTyn of type t unambiguously correspond to many sorted formulae of order n.\nLet us illustrate how F factors uniform behaviours. Given types \u03b1, \u03b2, two predicates P\u03b1\u2192t, Q\u03b2\u2192t, over entities of respective kinds \u03b1 and \u03b2 for any \u03be with two morphisms from \u03be to \u03b1 and to \u03b2, see figure 2 F contains a term that can coordinate the properties P,Q of (the two images of) an entity of type \u03be, every time we are in a situation to do so \u2014 i.e. when the lexicon provides the morphisms.\nTerm 1. [Polymorphic AND] is defined as &\u03a0 = \u039b\u03b1\u039b\u03b2\u03bbP\u03b1\u2192t\u03bbQ\u03b2\u2192t\u039b\u03be\u03bbx\u03be\u03bbf\u03be\u2192\u03b1\u03bbg\u03be\u2192\u03b2 . (andt\u2192t\u2192t (P (f x))(Q (g x)))\nThis can apply to say, a \u201dbook\u201d, that can be \u201dheavy\u201d as a \u201dphysical object\u201d, and \u201dinteresting\u201d as an \u201dinformational content\u201d \u2014 the limitation of possible over generation is handled by the rigid use of possible transformations, including identity to be defined thereafter.\n2.4. Organisation of the lexicon and rules for meaning assembly. The lexicon associate each word w with a principal \u03bb-term [w] which basically is the Montague term reminded earlier, except that the types appearing in [w] belong to a much richer typed system. In particular, the numerous base types can impose some selectional restriction. In addition to this principal term, there can be optional \u03bb-terms also called modifiers or transformations to allow, in some cases, composition that were initially ruled out by selectional restriction.\nThere are two ways to solve a type conflict using those modifiers. Flexible modifiers can be used without any restriction. Rigid modifiers turn the type, or the sense of a word, into another one which is incompatible with other types or senses. For a technical reason, the identity which is always a licit modifier is also specified\n7This is one way to be convinced of the soundness of F , which defines types depending on other types including themselves: as it is easily observed that there are no normal closed terms of type \u03a0X. X \u2261 \u22a5 the system is necessarily coherent. Another way is to construct a concrete model, called coherence spaces, where types are interpreted as countable sets with a binary relation (coherence spaces), and terms up to normalisation are interpreted as structure preserving functions (stable functions). [21]\nto be flexible or rigid. In this later rigid case, it means that the original sense is incompatible with any other sense, although two other senses may be compatible. Consequently, every modifier, i.e. optional \u03bb-term is declared, in the lexicon, to be either a rigid modifier, noted (r) or a flexible one, noted (f). More subtle compatibility relations between senses can be represented by using the linear version of system F as we did in [37]\nThe reader may be surprised that we repeat the morphisms in the lexical entries, rather than having general rules. For instance, one could also consider morphisms that are not anchored in a particular entry: in particular, they could implement the ontology at work in [53] as the type-driven approach of Asher does [2]. For instance,\na place (type Pl) could be viewed as a physical object (type \u03c6) with a general morphism P2\u03c6 turning places into physical objects that can be \u201dvast\u201d. We are not fully enthusiastic about a general use of such rules since it is hard to tell whether they are flexible or rigid. As they can be composed they might lead to incorrect copredications, while their repetition inside each entry offers a better control of incorrect and correct copredications. One can think that some meaning transfer differs although the words have the same type. An example of such a situation in French is provided the words \u201dclasse\u201d and \u201dpromotion\u201d, which both refer to groups of pupils. The first word \u201dclasse\u201d (English: \u201dclass\u201d) can be coerced into the room where the pupils are taught, (the \u201dclassroom\u201d), while the second, \u201dpromotion\u201d (English: \u201dclass\u201d or \u201dpromotion\u201d) cannot.\nThere nevertheless exist ontological inclusions that are better represented by rules on types, like \u201dcar\u201d that are \u201dvehicles\u201d that are \u201dartefacts\u201d. This is the reason why we also allow for optional terms that are available for all words of the same type. This is done by subtyping and more precisely by the notion of coercive subtlyping that is introduced in section 3.4."}, {"heading": "3. A proper account of meaning transfers", "text": "In this section we shall see that the lexicon we propose, provides a proper account of the lexical phenomena that motivated its definition: ill typed readings are rejected, coerced readings are handled, felicitous copretication are analysed while infelicitous ones are rejected. Some particular case of coerced readings are given a finer analysis as the polysemy of deverbals (nouns derived verbs, like \u201dconstruction\u201d), or fictive motion. Finally we introduce coercive subtyping for system F which handles general coercions corresponding to ontological inclusion.\n3.1. Coercions and copredication. One can foresee what is going to happen, using the lexicon given in figure 3 with sentences like:\n(9) Liverpool is vast.\n(10) Liverpool is vast and voted (last Sunday).\n(11) # Liverpool voted and won (last Sunday).\nOur purpose is not discuss whether this or that sentence is correct, nor whether this or that copredication is felicitous, but to provide a formal and computational model which given sentences that are assumed to be correct, derives the correct readings, and which given sentences that are said to be incorrect, fails to provide a reading.\nEx. 9 This sentence leads to a type mismatch vastPl\u2192t(LiverpoolT )), since \u201dvast\u201d applies to \u201dplaces\u201d (type Pl) and not to \u201dtowns\u201d as \u201dLiverpool\u201d. It is solved using the optional term tT\u2192Pl3 provided by the entry for \u201dLiverpool\u201d, which turns a town (T ) into a place (Pl) vastPl\u2192t(tT\u2192Pl3 Liverpool\nT )) \u2014 a single optional term is used, the (f)/ (r)difference is useless.\nEx. 10 In the second example, the fact that Liverpool is vast is derived as previously, and the fact Liverpool voted is obtained from the transformation of the town into people, that can vote. The two can be conjoined by the polymorphic \u201dand\u201d defined above as term 1 (&\u03a0) because these transformations are flexible: one can use one and the other. We can make this precise using only the rules of the type calculus. The syntax yields the predicate (&\u03a0(is vast)Pl\u2192t(voted)P\u2192t) and consequently the type variables should be instantiated by \u03b1 := Pl and \u03b2 := P and the exact term is &\u03a0{Pl}{P}(is vast)Pl\u2192t(voted)P\u2192t which reduces to: \u039b\u03be\u03bbx\u03be \u03bbf\u03be\u2192\u03b1\u03bbg\u03be\u2192\u03b2(andt\u2192t)\u2192t (is vast (f x))(voted (g x))).\nSyntax also says this term is applied to \u201dLiverpool\u201d. which forces the instantiation \u03be := T and the term corresponding to the sentence is after some reduction steps, \u03bbfT\u2192Pl\u03bbgT\u2192P (and (is vast (f LiverpoolT ))(voted (g LiverpoolT )))). Fortunately the optional \u03bb-terms t2 : T \u2192 P and t3 : T \u2192 Pl are provided by the lexicon, and they can both be used, since none of them is rigid. Thus we obtain, as expected (and (is vastP l\u2192 t (tT\u2192Pl3 LiverpoolT ))(votedPl\u2192t (tT\u2192P2 LiverpoolT )))\nEx. 11 The third example is rejected as expected. Indeed, the transformation of the town into a football club prevents any other transformation (even the identity) to be used in the polymorphic and that we defined above. We obtain the same term as above, with won instead of is vast. The term is: \u03bbfT\u2192Pl\u03bbgT\u2192P (and (won (f LiverpoolT ))(voted (g LiverpoolT )))) and the lexicon provides the two morphisms that would solve the type conflict, but one of them is rigid, i.e. we can solely use this one. Consequently the sentence is semantically invalid.\n3.2. Fictive motion. A rather innovative extension is to apply this technique to what Talmy called fictive motion [61]. Under certain circumstances, a path may introduce a virtual traveller following the path, as in sentences like:\n(12) Path GR3 descends for two hours.\nBecause of the duration, one cannot consider that the vertical coordinate decreases as the curvilinear abscissa increases. One ought to consider someone who follows the road. We model this by one morphism associated with the \u201dPath GR3\u201d and one with \u201ddescends\u201d. The first coercion turns the \u201dPath GR3 \u201d from an immobile object into an object of type \u201dpath\u201d that can be followed and the second one coerce \u201ddescends\u201d into a verb that acts upon a \u201dpath\u201d object and introduce an individual following the path downwards \u2014 this individual, which does not need to exist, is quantified, yielding a proposition that can be paraphrased as \u201dany individual following the path goes downwards for two hours\u201d. [43, 42]\n3.3. Deverbals. Deverbals are nouns that correspond to action verbs, as \u201dbuilding\u201d or \u201dsignature\u201d. Usually they are ambiguous between result and process. We showed that our idiosyncratic model is well adapted since their possible senses vary from one deverbal to another, even if the verbs are similar and the suffix is the same.\n(13) The building took three months.\n(14) The building was painted white.\n(15) * The building that took three months was painted white.\n(16) The signature was illegible.\n(17) The signature took three months.\n(18) * Although it took three months the signature was illegible.\n(19) Although it took one minute, the signature was illegible.\nWe showed that a systematical treatment of deverbal meaning as the one proposed by the type-driven approach does not properly account for the data. Indeed, the possible meanings of a deverbal are more diverse than result and event, and there are no known rules to make sure the deverbal refers to the event. Consequently, words must include in the lexical informations such at the possible meanings of the deverbal. These meanings can be derived from the event expressed by the verb, they usually include the event itself (but not always), the result (but not always), and\nother meanings as well like the place where the event happens (e.g. English noun \u201dpasture\u201d). This lexical information can be encoded in our framework, with one principal meaning and optional terms for accessing other senses and the flexibility or rigidity of these optional terms \u2014 they are usually ridig, and copredication on the different senses of a deverbal is generally infelicitous. W successfully applied our framework and treatment to the semantic of deverbals to the of restrictions of selection (both for the deverbal and for the predicate that may apply to the deverbal) to meaning transfers, and to the felicity of copredications on different senses of a deverbal. [54, 55]\n3.4. Coercive subtyping and ontological inclusions. As we said earlier on, ontological inclusions like \u201dHuman beings are animals.\u201d, would be better modelled by optional terms that are available for any word of the type, instead of anchoring them in words and repeating these terms for every word of this type. The model we described can take these subtyping inclusions into account as standard coercions, by specifying that a word like \u201dhuman being\u201d introduces a transformation into an \u201danimal\u201d. But this is somehow heavy, since one should also say that \u201dhuman beings\u201d are \u201dliving beings\u201d etc. Any predicate, that applies to a class, also applies to an ontologically smaller class. For instance, \u201drun\u201d that applies to \u201danimals\u201d also applies to \u201dhuman beings\u201d, because the \u201dhuman\u201d is a subtype of \u201danimals\u201d. These subtype coercions looks type driven, and, consequently, would be more faithfully modelled with a proper notion of subtyping.\nCoercive subtyping, introduced by Luo and Soloviev[35, 60] for variants of MartinLo\u0308f type theory, corresponds quite well to these particular transformations. It starts with a transitive and acyclic set of coercions between base types, with at most one coercion between any two base types, and ontological inclusions fulfil this condition. Indeed, such ontological inclusions when viewed as functions always are the identity on objects, hence there cannot be two different manners to map them in the larger type. Furthermore, other notions of subtyping that have been studied for higher order type theories are very complicated with tricky restriction on the subtyping rules. [12, 32]\nCoercive subtyping, noted A0 < A, can be viewed as a short hand for allowing a predicate or a function which applies to A-objects to apply to an argument whose type A0 is not the expected type A but a subtype A0 of A. Hence coercive application is exactly what we were looking for:\ncoercive application\nf : A\u2192 B u : A0 A0 < A\n(f a) : B\nThe subtyping judgements, which have the structure of categorical combinators, are derived with very natural rules given in figure 4. These rules simply encode transitivity, covariance and contravariance of implicative types (arrow types), and quantification over type variables.\nIt should be observed that, given constants ci\u2192j representing the coercions from ei to ej , any coercion derivable coercion T < U can be depicted by a linear \u039b-term m : U of system F or \u039bTynwith a single occurrence of the free variable x : T and occurrences of the constants ci\u2192j . The construction of the term according to the derivation rules is defined as follows:\n\u2022 transitivity x : A < t : B y : B < u : C\nx : A < u[y := t] : C\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\ntransitivity\nA < B B < C\nA < C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\ncovariance and contravariance of implication\nA < B C < D\nD \u2192 A < C \u2192 B\nA < B\nT \u2192 A < T \u2192 B\nA < B\nB \u2192 T < A\u2192 T . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nquantification over types\nU < T [X] X not free in U\nU < \u03a0X.T [X]\nU < \u03a0X.T [X]\nU < T [W ] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\nProposition 2. All terms derived in this system are linear, with a single occurrence of a single free variable (whose type is on the left of \u201d\u00a1\u201d).\nFrom this one easily concludes that:\nProposition 3. Not all \u039b-terms of system F can be derived in the subtyping system.\nAny derivation c of ei < ej is equivalent to a coercion ci\u2192j , i.e. our derivation system does not introduce new coercions between atomic types. This kind of result is similar to coherence in categories: given a compositional graph G, the free cartesian categories over G does not contain any extra morphism between object from the compositional graph. Here is the precise formulation of this coherence result:\nProposition 4. Given a ei < ej-derivation whose associated \u039b-term is C\u0303, the normal form C of C\u0303 is a compound of ci\u2192j applied to x : ei, which, because of the assumptions on the ci\u2192j is some ch\u2192k.\nProof. As seen above, a deduction of T < U clearly corresponds to a linear \u039b-terms of system F , whose only free variable is x : T with the ci\u2192j as constants. Hence it has a normal from which also has a single free variable is x : T and the ci\u2192j as constants.\nLet us show that any normal \u039b-term C of type ej with a single free variable x : ei and constants ci\u2192j : ei \u2192 ej is a compound of ci\u2192j applied to xei , i.e. a term of Ci:\n\u2022 xei \u2208 Ci \u2022 if cej \u2208 Ci then (cj\u2192k(c))ek \u2208 Ci\nWe proceed by induction on the number of occurrences of variable and constants in the normal term C, whose from is, as said in proposition 1:\nsequence of head sequence of {\u00b7 \u00b7 \u00b7 } and (\u00b7 \u00b7 \u00b7 ) applications \u03bb and \u039b abstractions variable to types Wk and normal terms t Xl l\nC = \ufe37 \ufe38\ufe38 \ufe37 ( \u03bbxXii | \u039bXj ) \u2217 \ufe37 \ufe38\ufe38 \ufe37 h(\u03a0Xk|Xl\u2192) \u2217Z \ufe37 \ufe38\ufe38 \ufe37 ( {Wk} | tXll ) \u2217 )\nIf the term C corresponds to a proof of ei < ej there is no ( \u03bbxXii | \u039bXj ) in front, because the ej is neither of the form U \u2192 V nor of the form \u03a0X. T [X]. What may be the head variable? It is either the only free variable of this term, namely xei , or a constant i.e. a ck\u2192l.\n\u2022 If the head variable is xei then, because of its type, there is no application to a type or to a normal term ( {Wk} | tXll )\u2217 ) arguments, hence ei = ej and the normal form is xei , which is in Ci \u2022 If the head variable is is some ck\u2192l, which because of its type, may only be applied to a normal term tXll of type ek. This normal term is a normal term\nof type ek with xei as its single free variable and the constants cj\u2192l. As t Xl l\nhas one symbol less than C, we can conclude that tXll is in Ci hence C \u2208 Ci. Hence in any case the normal form C : ej of the term C\u0303 : ej is in Ci. Now, given that the coercions ci\u2192j enjoys ck\u2192j \u25e6 ci\u2192j = ci\u2192k (as part of our condition on base coercions) it is easily seen that the only term of type ej in Ci is ci\u2192j .\nWe think that this coherence result can be improved by showing that there is at most one normal term corresponding to a derivation S < T , although the proof is likely to use some variant of reducibility candidates. An alternative. The rules for coercive sub tying follow a natural deduction style, as lambda terms of system F . Nevertheless, an alternative formulation of the quantifier elimination rule which requires to have identity axioms (whose term is identity) to derive obvious sub tying relations.\nalternative quantifier elimination rule (sequent calculus style)\ns : S[T ] < t : U\ns\u0307 : \u03a0X.S[X] < t[s := s\u0307{T}]"}, {"heading": "4. Compositional semantics issues: determiners, quantifiers, plurals", "text": "So far we focused on phenomena in lexical semantics that are usually left out of standard models but properly mastered by our model. But we must also have a look at compositional semantics, that is a as the logical structure of a sentence, to see whether our model still properly analyses what standard compositional models do, and, possibly provide better analysis. Hopefully sentence structure are correctly analysed but furthermore our extended setting is quite appealing for some classical\nissues in formal semantics like determiners and quantification, or plurals, as we show in this section.\n4.1. Determiners and quantifiers. The examples presented so far only involved proper names because the determiners and quantifiers are a bit more complex than in the usual montagovian setting, let us see how they work.\nIn order to integrate lexical issues into compositional semantics which closely follows syntax, we should at least describe the behaviour of determiners and quantifiers in our framework. We adopt the view of quantified, definite, and indefinite noun phrases as individual terms by using generic elements (or choice functions) as initiated by Russell and formalised by Hilbert, Ackerman and Bernays see e.g. [22] and adapted to linguistics by researchers like von Heusinger see e.g. [19, 62, 63].\nHow do we adapt our model, in particular the typing, if instead of \u201dLiverpool\u201d the examples used \u201dThe town\u201d, \u201dA town\u201d, \u201dAll towns\u201d, or \u201dMost towns\u201d? Indefinite determiners, quantifiers, generalised quantifiers,... usually are viewed as functions from two predicates to propositions, one expressing the restriction and the other the main predicate see e.g. [50]\nAs we said, and this is especially true in a categorial setting as the one Moot implemented [41] the syntactic structure closely corresponds to the semantic structure. But the usual treatment of quantification that we saw in subsection 1 infringe this correspondence:\n(20) sentence: Keith played some Beatles song.\n(21) semantical structure: (some (Beatles songs)) (\u03bbx Keith played x)\n(22) syntactical structure: (Keith (played (some (Beatles song))))\nAnother criticism that applies to the usual treatment of quantifiers is the symmetry that it wrongly introduces between the main predicate and the class over which one quantifies. For instance, the two sentences below (23,24) usually have the same logical form (25):\n(23) Some politician are crooks.\n(24) ? Some crooks are politicians.\n(25) \u2203x.politician(x)&crook(x)\nHence, in accordance with syntax, we prefer to consider that a quantified noun phrase is by itself some individual \u2014 a generic one which does not refer to a precise individual nor to a collection of individuals. As [62] we use a \u03b7 for indefinite determiners (whose interpretation picks up a new element) and \u03b9 for definite noun phrases8 (whose interpretation picks up the most salient element). In fact both \u03b9 and \u03b7 correspond to Hilbert\u2019s it is only the interpretation of the two which differ. Although papers and even a book [31] have been published on the topic, up to now results on these operators do not go beyond Hilbert, Ackerman and Bernays results in [22] and in particular there is not yet a sound interpretation that would match the natural proof theoretical rules given by Hilbert.\nand \u03c4 , and others for generalised quantifiers. All those operators takes as arguments a predicate P involving a free variable x P (x) and return a term. The \u03b9 term is written as the term \u03b9x. P (x) in which the variable x is bound \u2014 the syntactical behaviour of the other generic elements introduced by , \u03c4, \u03b7, ... is just\n8Actually [62] writes instead of \u03b9. We do not follow his notation because we also use Hilbert\u2019s with its traditional meaning.\nthe same. The main problem is to provide a proper typing of such operators which fits in our model. 9\nIn a typed model, a predicate applying to \u03b1-objects is of type \u03b1\u2192 t. Consequently \u03b9 should be of type: (\u03b1 \u2192 t) \u2192 \u03b1, and in order to have a single \u03b9 its type is \u03a0\u03b1. (\u03b1\u2192 t)\u2192 \u03b1. Consequently, if we have a predicate \u201dDog\u201d of \u201dAnimate\u201d entities the term \u03b9(Dog) (written \u03b9x. Dog(x) in untyped models) the semantics of \u201dthe dog\u201d is of type \u201dAnimate\u201d.... but we would like this term to be of type Dog if \u201ddog\u201d is a type, or to enjoy the property Dog, if Dog is a property. How do we say so, since the type Dog does not appear in \u03b9? Indeed, only \u201danimate\u201d objects appear in \u03b9 as an instantiation of \u03b1. We solve this by adding a systematic presupposition that can be called an axiom, P (\u03b9(P )) for any P of type e\u2192 t 10\nThe syntax of quantifiers and generalised quantifiers is defined in the same way. Existential quantification \u201dsome\u201d is faithfully represented by Hilbert\u2019s epsilon operator: P ( xP (x)) \u2261 \u2203x. P (x). As soon as some element enjoys the property P , the term x. P (x) enjoys P as well.\nThe operator \u03c4 symmetrically constructs the generic element that appear in mathematical proofs like \u201dLet x be any integer . . . Thus for all integers . . . \u201d This universal generic represents universal quantification because P (\u03c4x. P (x)) \u2261 \u2200x. P (x): as soon as the term \u03c4x. P (x) enjoys the property P any element does. Actually, the operator is enough, since \u03c4x. P (x) = x.(\u00acP (x)) and x. P (x) = \u03c4x.(\u00acP (x))\nAs it is well known determiners \u2014 at least some use of them \u2014 correspond to quantifiers, and that\u2019s the way determiners are modelled in our framework, see e.g. [58, 57]. It avoids the problems evoked in examples 20 and 24.\nIt should be observed that generics fit better into our typed and many sorted semantic representations. Indeed, intuitively it is easier to think of a generic \u201dpolitician\u201d or \u201dsong\u201d than it is to think of a generic \u201dentity\u201d or \u201dindividual\u201d.\nOne can even introduce constants that model generalised quantification. They are typed just the same way, and this construct can be applied to compute the logical form of statement including the \u201dmost\u201d quantifier, as exposed in [56]. It does not mean that we have the sound and complete proof rules nor a model theoretical interpretation: we simply are able to automatically compute logical forms from sentences involving generalised quantifiers.\n4.2. Individuals, plurals and sets in a type-theoretical framework. The organisation of the types also allows us to handle simple facts about plurals, as shown in [44, 36] \u2014 which resembles some Partee\u2019s ideas of [49]. Here are some classical examples involving plurals, exemplifying some typical readings for plurals:\n(26) . *Keith met.\n(27) Keith and John met. (unambiguous).\n(28) *The student met.\n(29) The students met. (unambiguous, one meeting)\n(30) The committee met. (unambiguous, one meeting)\n(31) The committees met. (ambiguous: one big meeting, one meeting per committee, several meetings invoking several committees)\n(32) The students wrote a paper. (unambiguous)\n(33) The students wrote three papers. (covering)\n9Actually, we first provided a type theoretical model,and then discovered earlier related work in untyped semantics, e.g. papers by Heusinger.\n10If the predicate P corresponds to a type \u03c4 i.e. P = \u03c4\u0302 , this presupposition is better written as \u03b9(\u03c4\u0302) : \u03c4 .\nSuch readings are derivable in our model because one can define in F operators for handling plurals. Firstly, on can add, as a constant, a cardinality operator for predicates || || : \u03a0\u03b1.(\u03b1\u2192 t)\u2192 N (using the internal integers of system F which are N = \u03a0X. (X \u2192 X) \u2192 (X \u2192 X), or predefined integers as in Go\u0308del system T or most type theories). Next, as shown in figure 5 , we can have operators for handling plurals: q (turning an individual into a property/set), \u2217 (distributivity) # (restricted distributivity from sets of sets to its constituent subsets), c (for coverings)... The important fact is that the computation of such readings uses exactly the same mechanisms as lexical coercion. Some combinations are blocked by their types, but optional terms coming tier from the predicate or from the plural noun may allow an a priori prohibited reading. To be precise we also provided specific tools for handling groups that are singular nouns denoting a set."}, {"heading": "5. Comparison with related work and conclusion", "text": "5.1. Variants and implementation. In the afore presented model, some points admit slight changes that do not affect the behaviour.\nAs discussed in the beginning of section 2 the base type can be discussed. We proposed to use classifiers as base types of a language with classifiers, because classifiers are linguistically and cognitively motivated classes of words and entities. But it is fairly possible that other sets of base types are better suited in particular for specific applications. [38]\nIn relation to this issue, the inclusion between base types, that in our model are morphisms can be introduced with words or as general axioms. We prefer the first solution which allows idiosyncratic behaviours, dependent on words as explained in paragraph 2.4 with \u201dclasse\u201d and \u201dpromotion\u201d. Nevertheless when dealing with ontological inclusions, or other very general coercions, we think a subtyping approach is possible and reduces the size of the lexicon, this is why we are presently exploring coercive subtyping.\nThe type we gave for predicate can also vary: it could be systematically e\u2192 t, but as explained in paragraph 4, types u\u2192 t are possible as well, and varying from one form to another is not complicated.\nAn important variant is to define the very same ideas within a compositional model like \u03bb-DRT [47] the compositional view of Discourse Representation Theory [24] which can, as its name suggest, handle discursive phenomena. Thus one can integrate the semantical and lexical issues presented here into a broader perspective. This can be done, and in fact several applications of the model presented here are already included into the Grail parser by Richard Moot, in particular for French [41]. The grammar is an automatically acquired grammar but unfortunately the refined semantic terms we need can only be typed by hand. Consequently we only tested the semantic analyses described herein on small or specific lexicon. For instance, four treatment of fictive motion (cf. subsection ?? has been tested with a detailed lexicon for spatial semantics, but with \u03bb-DRT [42] rather than plain lambda calculus [43] .\n5.2. Comparison with related work. There are many similarities with the contemporary work by Asher and Luo described e.g. in [3, 34, 13].\nA first difference is the type system. Our type system, F , is quite powerful but simple: four-term building operations, and two reduction rules. Luo make use of a version of Modern Type Theories (MTT), closed to the Unifying Theory of dependent Types (UTT), whose expressive power and computational complexity is difficult to compare: it is predicative but it include dependent types. Hence it is not clear whether MTT better characterises the logic needed for meaning assembly. Quantification over type variable is quite comparable and allows \u2200\u03b1 : CN which is quite convenient although it can certainly be encoded within system F using the fact that finites sums can be defined in system F , hence x : \u03b1, \u03b1 : CN can be rephrased if there are finitely many CN \u2014 finite products can be fined as well. This is both a positive and negative feature of system F : it can encode many things, but encodings are often dull. In addition, the MTT that Luo uses, includes dependent types, i.e. types defined from terms, which are convenient \u2014 the way they are used so far can probably be encoded in system F , but encoding can be tedious. A possible solution, similar to [59], is too introduce predefined types F with specific reduction schemes \u2014 e.g. adding integers as in Go\u0308del\u2019s system T.\nRegarding coercions, Luo [33] makes an extensive use of coercive subtyping, that he introduced with Soloviev [60]: as said in this paper this kind of subtyping may also work well with system F . So we can say that Luo system is very similar. Dependent types, predicative quantification, may be closer to what we wish to model, but the formal diversity of the many rules may result in an opaque formalisation. The typed system at work in Asher\u2019s view [2] is a simple type theory extended with type constructs and operations from category theory. The theory extends cartesian closed category with a few of the many operations that one finds in a topos, like subtype. This approach is hardly compared with the two above, since it does not belong to the same family: morphisms do not represents (quotiented) proofs of some logic, they are closer to a set theoretic interpretation.\nAnother ingredient of our models are the base types. Asher leaves the set of base types open, but rather small(say a dozen) : e, t, physical object, etc., with a linguistically motivated subtyping relation < defined over these types. Luo, especially in his later article [34], wants to equate base types with common nouns (also with coercions between them), and this is a possible compromise between any formula and the minimal base type system which makes it difficult to express some selectional restrictions with types. However it seems that they are too many of them, since not any common noun appears as a restriction of selection for another reword in a dictionary. Classifiers as base types is a recent proposal of ours which seems cognitively and linguistically motivated. It is worth exploring this hypothesis empirically in corpora and tests.\nThe subtyping relation between the base types are language independent in these two models, i.e. they are not triggered by words, but simply by types. We opted for a compromise in which only ontological inclusions are type driven, using coercive sub typing.\nRegarding the general organisation of the lexicon and of its composition modes, the same difference applies. While according to Asher and Luo the types determine the coercions, in our approach the coercions are provided by the terms in the lexicon, i.e. by the words themselves and not by their types, with an exception for ontological inclusions. The recent claim by Luo that base type should be common nouns (that are words) partly rubs out the differences between on one hand the type driven approaches of himself and Asher and, on the other hand, ours which is more idiosyncratic being based on words and terms.\nFinally one may wonder whether we finally derive similar logical forms? They actually are quite similar: we derive higher order multi sorted logical formulae multi sorted, Asher derives formulae in an intuitionnistic set theory, which works with sorts, and Luo derives formulae of type theory. All these are more or less the same: higher order is possible although not extensively used in examples, and there are sorts or types.\nA possible difference may lie in the distance with syntax and the effective computability of the semantic representation, which requires a treatment of the current constructs in compositional semantics, like determiners, quantifiers, plurals,... and to be integrated in a general analyse also including phenomena like time or aspect. For the time being we did more on such issues than the others, but I am pretty sure that a similar treatment is possible within the approach developed by Asher and Luo.\n5.3. Perspectives. A part from fixing up the optimal variant among the possible variants of our model, to study and develop the convergence with related work, or to develop the implementation there are some questions both on type theory and on linguistic modelling, both theoretical and practical, that deserve to be further studied.\nThe acquisition of the semantic lexicon has both theoretical and practical aspects. In particular, how could one acquire the optional lambda terms? Syntactic informations on words can be automatically acquired, and Moot\u2019s parser that we used for experimenting our type theoretical semantic analyses was automatically acquired. [40, 39] By now there are some techniques to acquire the usual semantic terms of Montague semantics of 1 that are associated with words and depicts their argument structure. [65] Machine learning and serious games also apply to learn some relation between words see e.g. [15, 26] But up to now there are no learning algorithms for acquiring a set of base type, nor for determining given a set of base type, the optional lambda terms, and our experiments with Moot parser were performed using hand typed semantic lexicon.\nOn the logical side there are many intriguing questions.\n\u2022 One is the relation in a type system with sorts between the (higher order) predicate calculus and the type system, exemplified by the relation between the relation between type judgements x : T that, as linguistic\npresuppositions, cannot be denied and predicates T\u0302 (x) that can be denied. \u2022 The Hilbert operator which look more natural in this typed system deserve\nto be further studied. Since most of the results are false but Hilbert\u2019s original results, the study of both the deductive system and the interpretation of those operators is appealing. We are especially intrigued by the formula with Hilbert operators that have no corresponding formula in usual logic. \u2022 The coercive subtyping we introduced in this paper should also be further\nexplored, e.g. by proving that there is at most one coercion between any two types. \u2022 It is quite clear that we do not need the full power of system F : we chose this\nsystem of variable types and quantified types for its simplicity and elegance. Nevertheless one may wonder whether a simple restriction that would be sufficient. Linear version of system F both have a lower complexity [25] and allow a finer grained treatment of the constraints on sense compatibility. [37]\nRegarding computational linguistics, and natural language processing application, the way the discourse context is handled, including the permanence and the propagation of constraints (e.g. on sense compatibilities) through linguistic structure. Observe that:\n(34) This salmon was living nearby Scottish coast. It was delicious.\n(35) ? This salmon that was living nearby Scottish coast was delicious.\n(36) * This salmon was living nearby Scottish coast and was delicious.\nAs a major challenge in the semantics of natural language on which this type theoretical and many sorted view might bring new lights is the semantics of mass nouns, like wine, which can be quantified:\n(37) He drank some wine.\n(38) He drank all the wine.\nThanks. Special thanks to Serge\u0308\u0131 Soloviev for his explanations on coercive subtyping during my CNRS sabbatical at IRIT. Many thanks to those I worked with on these questions R. Moot, , M. Abrusci, Ch. Bassac, B. Mery, L. Pre\u0301vot L. Real and to the ones I discussed with, namely N. Asher, Z. Luo, M. Abrusan, C. Beyssade, H. Burnett, S.-J. Conrad, F. Corblin, A. Mari, H. Person, F. del Prete."}], "references": [{"title": "Quantification in ordinary language: from a critic of set-theoretic approaches to a proof-theoretic proposal", "author": ["Vito Michele Abrusci", "Christian Retor\u00e9"], "venue": "In Peter Schro\u0308der-Heister, editor, 14th Congress of Logic, Methodology and Philosophy of Sciences,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "Lexical Meaning in context \u2013 a web of words", "author": ["Nicholas Asher"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Formalization of coercions in lexical semantics", "author": ["Nicholas Asher", "Zhaohui Luo"], "venue": "Sinn und Bedeutung", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "A type driven theory of predication with complex types", "author": ["Nicolas Asher"], "venue": "Fundamenta Informaticae,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Towards a Type-Theoretical Account of Lexical Semantics", "author": ["Christian Bassac", "Bruno Mery", "Christian Retor\u00e9"], "venue": "Journal of Logic Language and Information,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Logical Aspects of Computational Linguistics - 7th International Conference, LACL", "author": ["Denis B\u00e9chet", "Alexander Ja. Dikovsky", "editors"], "venue": "Lecture Notes in Computer Science. Springer,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Categorial grammars with ontology-refined types. In Categorial grammars \u2013 an efficient tool for natural language processing, pages", "author": ["Gilad Ben-Avi", "Nissim Francez"], "venue": "C.N.R.S", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "W\u00f6rtliche bedeutung - eine pragmatische gretchenfrage", "author": ["Manfred Bierwisch"], "venue": "Sprechakttheorie und Semantik,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1979}, {"title": "Semantische und konzeptuelle repr\u00e4sentation lexikalischer einheiten", "author": ["Manfred Bierwisch"], "venue": "Untersuchungen zur Semantik,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1983}, {"title": "Lexical semantics and pragmatics", "author": ["Reinhard Blutner"], "venue": "editors, Semantics,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2002}, {"title": "An extension of system F with subtyping", "author": ["Luca Cardelli", "Simone Martini", "John C. Mitchell", "Andre Scedrov"], "venue": "Information and Computation,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "An account of natural language coordination in type theory with coercive subtyping", "author": ["Stergios Chatzikyriakidis", "Zhaohui Luo"], "venue": "7th International Workshop on Constraint Solving and Language Processing (CSLP\u201912). Selected and Revised Papers.,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}, {"title": "Adjectives in a modern type-theoretical setting", "author": ["Stergios Chatzikyriakidis", "Zhaohui Luo"], "venue": "RETORE\u0301", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "Automatic acquisition of ranked qualia structures from the web", "author": ["Philipp Cimiano", "Johanna Wenderoth"], "venue": "ACL. The Association for Computational Linguistics,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2007}, {"title": "Copredication, dynamic generalized quantification and lexical innovation by coercion", "author": ["Robin Cooper"], "venue": "In Fourth International Workshop on Generative Approaches to the Lexicon. Universite\u0301 de Gene\u0300ve,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2007}, {"title": "Lexical semantics. Cambridge textbooks in linguistics", "author": ["D.A. Cruse"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1986}, {"title": "The epsilon operator and E-type pronouns", "author": ["Urs Egli", "Klaus von Heusinger"], "venue": "Lexical Knowledge in the Organization of Language,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1995}, {"title": "The blind spot \u2013 lectures on logic", "author": ["Jean-Yves Girard"], "venue": "European Mathematical Society,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2011}, {"title": "Grundlagen der Mathematik", "author": ["David Hilbert", "Paul Bernays"], "venue": "Bd. 2. Springer,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1939}, {"title": "R\u00e9solution d\u2019\u00e9quations dans des langages d\u2019ordre 1,2,...,\u03c9", "author": ["G\u00e9rard P. Huet"], "venue": "The\u0300se de doctorat d\u2019e\u0301tat, Universite\u0301 Paris VII,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1976}, {"title": "Soft linear logic and polynomial time", "author": ["Yves Lafont"], "venue": "Theoretical Computer Science,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2004}, {"title": "Computing trees of named word usages from a crowdsourced lexical network", "author": ["Mathieu Lafourcade", "Alain Joubert"], "venue": "In IMCSIT,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "A comparative study of current theories of polysemy in formal semantics. Master\u2019s thesis, Cognitive science Osnabr\u00fcck ", "author": ["Sven Lauer"], "venue": "Computational Linguistics,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2004}, {"title": "Figures of dialogue: a view from ludics", "author": ["Alain Lecomte", "Myriam Quatrini"], "venue": "Synthese, 183:59\u201385,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2011}, {"title": "Traitement automatique d\u2019un corpus de r\u00e9cits de voyages pyr\u00e9n\u00e9ens : analyse syntaxique, s\u00e9mantique et pragmatique dans le cadre de la th\u00e9orie des types", "author": ["An\u00e4\u0131s Lefeuvre", "Richard Moot", "Christian Retor\u00e9"], "venue": "In Congre\u0300s mondial de linguistique franc\u0327aise,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2012}, {"title": "Traitement automatique sur corpus de r\u00e9cits de voyages pyr\u00e9n\u00e9ens : Une analyse syntaxique, s\u00e9mantique et temporelle", "author": ["An\u00e4\u0131s Lefeuvre", "Richard Moot", "Christian Retor\u00e9", "No\u00e9mie-Fleur Sandillon-Rezer"], "venue": "In Traitement Automatique du Langage Naturel, TALN\u20192012,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2012}, {"title": "Mathematical logic and Hilbert\u2019s symbol", "author": ["Albert C. Leisenring"], "venue": "Mathematical Series. Mac Donald & Co.,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 1967}, {"title": "Coherence and transitivity of subtyping as entailment", "author": ["Giuseppe Longo", "Kathleen Milsted", "Sergei Soloviev"], "venue": "Journal of Logic and Computation,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2000}, {"title": "Coercive subtyping: Theory and implementation", "author": ["Zhaohui Luo", "Sergei Soloviev", "Tao Xue"], "venue": "Inf. Comput.,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2013}, {"title": "Plurals: individuals and sets in a richly typed semantics", "author": ["Bruno Mery", "Richard Moot", "Christian Retor\u00e9"], "venue": "In Logic and Engineering of Natural Language Semantics", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2013}, {"title": "Advances in the logical representation of lexical semantics", "author": ["Bruno Mery", "Christian Retor\u00e9"], "venue": "Natural Language and Computer Science (LICS 2013 satellite workshop),", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2013}, {"title": "Semantic types, lexical sorts and classifiers", "author": ["Bruno Mery", "Christian Retor\u00e9"], "venue": "10th International Workshop on Natural Language Processing and Cognitive", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2013}, {"title": "Automated extraction of type-logical supertags from the spoken dutch corpus", "author": ["Richard Moot"], "venue": null, "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2007}, {"title": "Semi-automated extraction of a wide-coverage type-logical grammar for French", "author": ["Richard Moot"], "venue": "In Proceedings of Traitement Automatique des Langues Naturelles (TALN), Montreal,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2010}, {"title": "Wide-coverage French syntax and semantics using Grail", "author": ["Richard Moot"], "venue": "In Proceedings of Traitement Automatique des Langues Naturelles (TALN), Montreal,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2010}, {"title": "A discursive analysis of itineraries in an historical and regional corpus of travels", "author": ["Richard Moot", "Laurent Pr\u00e9vot", "Christian Retor\u00e9"], "venue": "In Constraints in discourse,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2011}, {"title": "Un calcul de termes typ\u00e9s pour la pragmatique lexicale \u2014 chemins et voyageurs fictifs dans un corpus de r\u00e9cits de voyages", "author": ["Richard Moot", "Laurent Pr\u00e9vot", "Christian Retor\u00e9"], "venue": "In Traitement Automatique du Langage Naturel,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2011}, {"title": "Second order lambda calculus for meaning assembly: on the logical syntax of plurals", "author": ["Richard Moot", "Christian Retor\u00e9"], "venue": "Coconat: Conference on Computing Natural Reasoning", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2011}, {"title": "The logic of categorial grammars: a deductive account of natural language syntax and semantics, volume", "author": ["Richard Moot", "Christian Retor\u00e9"], "venue": null, "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2012}, {"title": "Anaphora and the logic of change", "author": ["Reinhard Muskens"], "venue": "JELIA, volume 478 of Lecture Notes in Computer Science,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 1990}, {"title": "Combining Montague Semantics and Discourse Representation", "author": ["Reinhard Muskens"], "venue": "Linguistics and Philosophy,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 1996}, {"title": "Transfers of meaning", "author": ["Geoffrey Nunberg"], "venue": "Journal of semantics,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 1995}, {"title": "Noun phrase interpretation and type shifting principles", "author": ["Barbara Partee"], "venue": "In B.H. Partee and P.H. Portner, editors, Formal Semantics: The Essential Readings,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2008}, {"title": "Westerst\u030aahl. Quantifiers in Language and Logic", "author": ["Stanley Peters", "Dag"], "venue": null, "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2006}, {"title": "Logical Aspects of Computational Linguistics - 6th International Conference, LACL", "author": ["Sylvain Pogodalla", "Jean-Philippe Prost", "editors"], "venue": null, "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2011}, {"title": "The generative lexicon", "author": ["James Pustejovsky"], "venue": "Computational Linguistics,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 1991}, {"title": "The generative lexicon", "author": ["James Pustejovsky"], "venue": null, "citeRegEx": "53", "shortCiteRegEx": "53", "year": 1995}, {"title": "A generative Montagovian lexicon for polysemous deverbal nouns", "author": ["Livy-Maria Real-Coelho", "Christian Retor\u00e9"], "venue": "In 4th World Congress and School on Universal Logic \u2013 Workshop on Logic and linguistics.,", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 2013}, {"title": "On the semantics of deverbals in a richly typed system", "author": ["Livy-Maria Real-Coelho", "Christian Retor\u00e9"], "venue": "Journal of Logic Language and Information,", "citeRegEx": "55", "shortCiteRegEx": "55", "year": 2013}, {"title": "Variable types for meaning assembly: a logical syntax for generic noun phrases introduced by \u201dmost", "author": ["Christian Retor\u00e9"], "venue": "Recherches Linguistiques de Vincennes,", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 2012}, {"title": "A natural framework for natural language semantics: many sorted logic and Hilbert operators in type theory", "author": ["Christian Retor\u00e9"], "venue": "In Ma\u0301rio Edmundo and Boban Velickovic, editors, Logic colloquium,", "citeRegEx": "57", "shortCiteRegEx": "57", "year": 2013}, {"title": "S\u00e9mantique des d\u00e9terminants dans un cadre richement typ\u00e9", "author": ["Christian Retor\u00e9"], "venue": "Traitement Automatique du Langage Naturel, TALN RECITAL 2013,", "citeRegEx": "58", "shortCiteRegEx": "58", "year": 2013}, {"title": "Some Algebraic Structures in Lambda-Calculus with Inductive Types", "author": ["Sergei Soloviev", "David Chemouil"], "venue": "editors, TYPES,", "citeRegEx": "59", "shortCiteRegEx": "59", "year": 2003}, {"title": "Coercion completion and conservativity in coercive subtyping", "author": ["Sergei Soloviev", "Zhaohui Luo"], "venue": "Annals of Pure and Applied Logic,", "citeRegEx": "60", "shortCiteRegEx": "60", "year": 2000}, {"title": "Fictive motion in language and \u201cception", "author": ["Leonard Talmy"], "venue": "Language and Space,", "citeRegEx": "61", "shortCiteRegEx": "61", "year": 1999}, {"title": "Definite descriptions and choice functions", "author": ["Klaus von Heusinger"], "venue": "Logic, Language and Computation,", "citeRegEx": "62", "shortCiteRegEx": "62", "year": 1997}, {"title": "Choice functions and the anaphoric semantics of definite nps", "author": ["Klaus von Heusinger"], "venue": "Research on Language and Computation,", "citeRegEx": "63", "shortCiteRegEx": "63", "year": 2004}, {"title": "Learning context-dependent mappings from sentences to logical form", "author": ["Luke S. Zettlemoyer", "Michael Collins"], "venue": "The Association for Computer Linguistics,", "citeRegEx": "65", "shortCiteRegEx": "65", "year": 2009}], "referenceMentions": [{"referenceID": 34, "context": "sensible analyser, including human beings, or Moot\u2019s Grail parser [41] combines both the predicate argument structures and the relations between lexical meanings to build a semantic representation and to understand the utterance.", "startOffset": 66, "endOffset": 70}, {"referenceID": 0, "context": "like [1, 28].", "startOffset": 5, "endOffset": 12}, {"referenceID": 23, "context": "like [1, 28].", "startOffset": 5, "endOffset": 12}, {"referenceID": 7, "context": "There is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories.", "startOffset": 96, "endOffset": 111}, {"referenceID": 8, "context": "There is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories.", "startOffset": 96, "endOffset": 111}, {"referenceID": 15, "context": "There is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories.", "startOffset": 96, "endOffset": 111}, {"referenceID": 41, "context": "There is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories.", "startOffset": 96, "endOffset": 111}, {"referenceID": 22, "context": "There is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories.", "startOffset": 123, "endOffset": 131}, {"referenceID": 9, "context": "There is a large literature on such lexical meaning transfers and coercions, starting from 1980 [9, 10, 18, 48] \u2014 see also [27, 11] for a more recent account of some theories.", "startOffset": 123, "endOffset": 131}, {"referenceID": 45, "context": "The quest of a computational formalisation that can be incorporated into an automated semantic analyser appears with Pustejovsky\u2019s generative lexicon in 1991 [52, 53].", "startOffset": 158, "endOffset": 166}, {"referenceID": 46, "context": "The quest of a computational formalisation that can be incorporated into an automated semantic analyser appears with Pustejovsky\u2019s generative lexicon in 1991 [52, 53].", "startOffset": 158, "endOffset": 166}, {"referenceID": 3, "context": "The integration of lexical issue into compositional semantics la Montague and type theories appears with the work by Nicholas Asher [4, 5] which lead to the book [2], and differently in some works of Robin Cooper with an intensive use of records from type theory to recover frame semantics with features and attributes inside type-theoretical compositional semantics [16, 17]", "startOffset": 132, "endOffset": 138}, {"referenceID": 1, "context": "The integration of lexical issue into compositional semantics la Montague and type theories appears with the work by Nicholas Asher [4, 5] which lead to the book [2], and differently in some works of Robin Cooper with an intensive use of records from type theory to recover frame semantics with features and attributes inside type-theoretical compositional semantics [16, 17]", "startOffset": 162, "endOffset": 165}, {"referenceID": 14, "context": "The integration of lexical issue into compositional semantics la Montague and type theories appears with the work by Nicholas Asher [4, 5] which lead to the book [2], and differently in some works of Robin Cooper with an intensive use of records from type theory to recover frame semantics with features and attributes inside type-theoretical compositional semantics [16, 17]", "startOffset": 367, "endOffset": 375}, {"referenceID": 14, "context": "(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]", "startOffset": 310, "endOffset": 338}, {"referenceID": 11, "context": "(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]", "startOffset": 310, "endOffset": 338}, {"referenceID": 37, "context": "(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]", "startOffset": 310, "endOffset": 338}, {"referenceID": 29, "context": "(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]", "startOffset": 310, "endOffset": 338}, {"referenceID": 25, "context": "(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]", "startOffset": 310, "endOffset": 338}, {"referenceID": 49, "context": "(1) Montague\u2019s original type system and metalogic should be enriched to encompass lexical issues (selectional restriction and coercions), and (2) the usual phenomena studied by formal semantics (quantifiers, plurals, generics) should be extended to this richer type system and so far only Cooper and us did so [16, 17, 13, 44, 36, 30, 56]", "startOffset": 310, "endOffset": 338}, {"referenceID": 11, "context": "\u2022 The system work with type based coercions and relies on some Modern Type Theory (MTT) 3 \u2014 this correspond to the work of Zhaohui Luo [33, 34, 64, 13] \u2022 The system work with type based coercions and relies on usual typed \u03bbcalculus extended with some categorical logic rules \u2014 this approach by Asher [4, 5] culminated in his book [2] \u2022 The system work with term based coercions and relies on second order \u03bb-calculus \u2014 this is our approach, first introduced with Bassac, Mery, and further developed with Mery, Moot, Pr\u00e9vot, Real-Coelho.", "startOffset": 135, "endOffset": 151}, {"referenceID": 3, "context": "\u2022 The system work with type based coercions and relies on some Modern Type Theory (MTT) 3 \u2014 this correspond to the work of Zhaohui Luo [33, 34, 64, 13] \u2022 The system work with type based coercions and relies on usual typed \u03bbcalculus extended with some categorical logic rules \u2014 this approach by Asher [4, 5] culminated in his book [2] \u2022 The system work with term based coercions and relies on second order \u03bb-calculus \u2014 this is our approach, first introduced with Bassac, Mery, and further developed with Mery, Moot, Pr\u00e9vot, Real-Coelho.", "startOffset": 300, "endOffset": 306}, {"referenceID": 1, "context": "\u2022 The system work with type based coercions and relies on some Modern Type Theory (MTT) 3 \u2014 this correspond to the work of Zhaohui Luo [33, 34, 64, 13] \u2022 The system work with type based coercions and relies on usual typed \u03bbcalculus extended with some categorical logic rules \u2014 this approach by Asher [4, 5] culminated in his book [2] \u2022 The system work with term based coercions and relies on second order \u03bb-calculus \u2014 this is our approach, first introduced with Bassac, Mery, and further developed with Mery, Moot, Pr\u00e9vot, Real-Coelho.", "startOffset": 330, "endOffset": 333}, {"referenceID": 4, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 36, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 35, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 37, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 29, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 24, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 25, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 49, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 47, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 48, "context": "[6, 43, 42, 44, 36, 29, 30, 56, 54, 55]", "startOffset": 0, "endOffset": 39}, {"referenceID": 1, "context": "Asher [2] is quite similar on this point, while Luo use Type Theory [34].", "startOffset": 6, "endOffset": 9}, {"referenceID": 31, "context": "[38] \u2022 What is the metalogic (glue logic) for meaning assembly? We use second order \u03bb-calculus (Girard system F ) in order to factor operations that apply uniformly to family types.", "startOffset": 0, "endOffset": 4}, {"referenceID": 1, "context": "Asher [2] use simply typed \u03bb-terms with additional categorical rules, while Luo also use Type Theory with coercive subtyping [34].", "startOffset": 6, "endOffset": 9}, {"referenceID": 30, "context": "[37]", "startOffset": 0, "endOffset": 4}, {"referenceID": 39, "context": "We use a type system that resembles Muskens Tyn [46] where the usual type of individuals, e is replaced with a finite but large set of base types e1, .", "startOffset": 48, "endOffset": 52}, {"referenceID": 6, "context": "The set of base types as well as their interrelations can express some ontological relations as Ben Avi and Francez thought ten years ago [8] For instance, assume we have a many sorted logic with a sort \u03b6 for animals, a sort \u03c6 for physical objects and a predicate eat whose arguments are of respective sort \u03c6 and \u03b6 the many sorted formula \u2200z : \u03b6 \u2203x : \u03c6 eat(z, x) is rendered in type theory by the \u03bb-term: \u2200(\u03bbz\u2203\u03bbx((eat x)z) with eat a constant of type \u03c6 \u2192 \u03b6 \u2192 t.", "startOffset": 138, "endOffset": 141}, {"referenceID": 31, "context": "[38] (4) A type per common noun as proposed by Luo in [34]) (5) A type for every formula with a single free variable as suggested by some colleague (N.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "Hence we shall extend further Tyn into \u039bTyn by using Girard\u2019s system F as the type system [21, 20].", "startOffset": 90, "endOffset": 98}, {"referenceID": 49, "context": "6An alternative solution, used by us and others [56, 14] would be \u03a0\u03b1.", "startOffset": 48, "endOffset": 56}, {"referenceID": 12, "context": "6An alternative solution, used by us and others [56, 14] would be \u03a0\u03b1.", "startOffset": 48, "endOffset": 56}, {"referenceID": 17, "context": "As Girard showed [21, 20] reduction is strongly normalising and confluent every term of every type admits a unique normal form which is reached no matter how one proceeds.", "startOffset": 17, "endOffset": 25}, {"referenceID": 19, "context": "[23]) :", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[21]", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "More subtle compatibility relations between senses can be represented by using the linear version of system F as we did in [37] The reader may be surprised that we repeat the morphisms in the lexical entries, rather than having general rules.", "startOffset": 123, "endOffset": 127}, {"referenceID": 46, "context": "For instance, one could also consider morphisms that are not anchored in a particular entry: in particular, they could implement the ontology at work in [53] as the type-driven approach of Asher does [2].", "startOffset": 153, "endOffset": 157}, {"referenceID": 1, "context": "For instance, one could also consider morphisms that are not anchored in a particular entry: in particular, they could implement the ontology at work in [53] as the type-driven approach of Asher does [2].", "startOffset": 200, "endOffset": 203}, {"referenceID": 54, "context": "A rather innovative extension is to apply this technique to what Talmy called fictive motion [61].", "startOffset": 93, "endOffset": 97}, {"referenceID": 36, "context": "[43, 42]", "startOffset": 0, "endOffset": 8}, {"referenceID": 35, "context": "[43, 42]", "startOffset": 0, "endOffset": 8}, {"referenceID": 47, "context": "[54, 55]", "startOffset": 0, "endOffset": 8}, {"referenceID": 48, "context": "[54, 55]", "startOffset": 0, "endOffset": 8}, {"referenceID": 28, "context": "Coercive subtyping, introduced by Luo and Soloviev[35, 60] for variants of MartinL\u00f6f type theory, corresponds quite well to these particular transformations.", "startOffset": 50, "endOffset": 58}, {"referenceID": 53, "context": "Coercive subtyping, introduced by Luo and Soloviev[35, 60] for variants of MartinL\u00f6f type theory, corresponds quite well to these particular transformations.", "startOffset": 50, "endOffset": 58}, {"referenceID": 10, "context": "[12, 32] Coercive subtyping, noted A0 < A, can be viewed as a short hand for allowing a predicate or a function which applies to A-objects to apply to an argument whose type A0 is not the expected type A but a subtype A0 of A.", "startOffset": 0, "endOffset": 8}, {"referenceID": 27, "context": "[12, 32] Coercive subtyping, noted A0 < A, can be viewed as a short hand for allowing a predicate or a function which applies to A-objects to apply to an argument whose type A0 is not the expected type A but a subtype A0 of A.", "startOffset": 0, "endOffset": 8}, {"referenceID": 18, "context": "[22] and adapted to linguistics by researchers like von Heusinger see e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[19, 62, 63].", "startOffset": 0, "endOffset": 12}, {"referenceID": 55, "context": "[19, 62, 63].", "startOffset": 0, "endOffset": 12}, {"referenceID": 56, "context": "[19, 62, 63].", "startOffset": 0, "endOffset": 12}, {"referenceID": 43, "context": "[50] As we said, and this is especially true in a categorial setting as the one Moot implemented [41] the syntactic structure closely corresponds to the semantic structure.", "startOffset": 0, "endOffset": 4}, {"referenceID": 34, "context": "[50] As we said, and this is especially true in a categorial setting as the one Moot implemented [41] the syntactic structure closely corresponds to the semantic structure.", "startOffset": 97, "endOffset": 101}, {"referenceID": 55, "context": "As [62] we use a \u03b7 for indefinite determiners (whose interpretation picks up a new element) and \u03b9 for definite noun phrases (whose interpretation picks up the most salient element).", "startOffset": 3, "endOffset": 7}, {"referenceID": 26, "context": "Although papers and even a book [31] have been published on the topic, up to now results on these operators do not go beyond Hilbert, Ackerman and Bernays results in [22] and in particular there is not yet a sound interpretation that would match the natural proof theoretical rules given by Hilbert.", "startOffset": 32, "endOffset": 36}, {"referenceID": 18, "context": "Although papers and even a book [31] have been published on the topic, up to now results on these operators do not go beyond Hilbert, Ackerman and Bernays results in [22] and in particular there is not yet a sound interpretation that would match the natural proof theoretical rules given by Hilbert.", "startOffset": 166, "endOffset": 170}, {"referenceID": 55, "context": "8Actually [62] writes instead of \u03b9.", "startOffset": 10, "endOffset": 14}, {"referenceID": 51, "context": "[58, 57].", "startOffset": 0, "endOffset": 8}, {"referenceID": 50, "context": "[58, 57].", "startOffset": 0, "endOffset": 8}, {"referenceID": 49, "context": "They are typed just the same way, and this construct can be applied to compute the logical form of statement including the \u201dmost\u201d quantifier, as exposed in [56].", "startOffset": 156, "endOffset": 160}, {"referenceID": 37, "context": "The organisation of the types also allows us to handle simple facts about plurals, as shown in [44, 36] \u2014 which resembles some Partee\u2019s ideas of [49].", "startOffset": 95, "endOffset": 103}, {"referenceID": 29, "context": "The organisation of the types also allows us to handle simple facts about plurals, as shown in [44, 36] \u2014 which resembles some Partee\u2019s ideas of [49].", "startOffset": 95, "endOffset": 103}, {"referenceID": 42, "context": "The organisation of the types also allows us to handle simple facts about plurals, as shown in [44, 36] \u2014 which resembles some Partee\u2019s ideas of [49].", "startOffset": 145, "endOffset": 149}, {"referenceID": 31, "context": "[38] In relation to this issue, the inclusion between base types, that in our model are morphisms can be introduced with words or as general axioms.", "startOffset": 0, "endOffset": 4}, {"referenceID": 40, "context": "An important variant is to define the very same ideas within a compositional model like \u03bb-DRT [47] the compositional view of Discourse Representation Theory [24] which can, as its name suggest, handle discursive phenomena.", "startOffset": 94, "endOffset": 98}, {"referenceID": 34, "context": "This can be done, and in fact several applications of the model presented here are already included into the Grail parser by Richard Moot, in particular for French [41].", "startOffset": 164, "endOffset": 168}, {"referenceID": 35, "context": "subsection ?? has been tested with a detailed lexicon for spatial semantics, but with \u03bb-DRT [42] rather than plain lambda calculus [43] .", "startOffset": 92, "endOffset": 96}, {"referenceID": 36, "context": "subsection ?? has been tested with a detailed lexicon for spatial semantics, but with \u03bb-DRT [42] rather than plain lambda calculus [43] .", "startOffset": 131, "endOffset": 135}, {"referenceID": 2, "context": "in [3, 34, 13].", "startOffset": 3, "endOffset": 14}, {"referenceID": 11, "context": "in [3, 34, 13].", "startOffset": 3, "endOffset": 14}, {"referenceID": 52, "context": "A possible solution, similar to [59], is too introduce predefined types F with specific reduction schemes \u2014 e.", "startOffset": 32, "endOffset": 36}, {"referenceID": 53, "context": "Regarding coercions, Luo [33] makes an extensive use of coercive subtyping, that he introduced with Soloviev [60]: as said in this paper this kind of subtyping may also work well with system F .", "startOffset": 109, "endOffset": 113}, {"referenceID": 1, "context": "The typed system at work in Asher\u2019s view [2] is a simple type theory extended with type constructs and operations from category theory.", "startOffset": 41, "endOffset": 44}, {"referenceID": 33, "context": "[40, 39] By now there are some techniques to acquire the usual semantic terms of Montague semantics of 1 that are associated with words and depicts their argument structure.", "startOffset": 0, "endOffset": 8}, {"referenceID": 32, "context": "[40, 39] By now there are some techniques to acquire the usual semantic terms of Montague semantics of 1 that are associated with words and depicts their argument structure.", "startOffset": 0, "endOffset": 8}, {"referenceID": 57, "context": "[65] Machine learning and serious games also apply to learn some relation between words see e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[15, 26] But up to now there are no learning algorithms for acquiring a set of base type, nor for determining given a set of base type, the optional lambda terms, and our experiments with Moot parser were performed using hand typed semantic lexicon.", "startOffset": 0, "endOffset": 8}, {"referenceID": 21, "context": "[15, 26] But up to now there are no learning algorithms for acquiring a set of base type, nor for determining given a set of base type, the optional lambda terms, and our experiments with Moot parser were performed using hand typed semantic lexicon.", "startOffset": 0, "endOffset": 8}, {"referenceID": 20, "context": "Linear version of system F both have a lower complexity [25] and allow a finer grained treatment of the constraints on sense compatibility.", "startOffset": 56, "endOffset": 60}, {"referenceID": 30, "context": "[37]", "startOffset": 0, "endOffset": 4}], "year": 2014, "abstractText": "We present a framework, named the Montagovian generative lexicon, for computing the semantics of natural language sentences, expressed in many sorted higher order logic. Word meaning is depicted by lambda terms of second order lambda calculus (Girard\u2019s system F) with base types including a type for propositions and many types for sorts of a many sorted logic. This framework is able to integrate a proper treatment of lexical phenomena into a Montagovian compositional semantics, including the restriction of selection which imposes the nature of the arguments of a predicate, and the possible adaptation of a word meaning to some contexts. Among these adaptations of a word\u2019s sense to the context, ontological inclusions are handled by an extension of system F with coercive subtyping that is introduced in the present paper. The benefits of this framework for lexical pragmatics are illustrated on meaning transfers and coercions, on possible and impossible copredication over different senses, on deverbal ambiguities, and on \u201dfictive motion\u201d. Next we show that the compositional treatment of determiners, quantifiers, plurals,... are finer grained in our framework. We then conclude with the linguistic, logical and computational perspectives opened by the Montagovian generative lexicon.", "creator": "LaTeX with hyperref package"}}}