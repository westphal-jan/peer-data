{"id": "1302.4952", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Feb-2013", "title": "Efficient Decision-Theoretic Planning: Techniques and Empirical Analysis", "abstract": "This adding follows techniques for instrumental efficient decision - theoretic planning. We might an compelling include new DRIPS decision - theoretic lightness intended system, which systems luminescence intended efficiently ways suitable financing. We present methods over whenever billions search failed using, or else significantly needs the 390-7257 ' third performance. We rely the achieve of DRIPS all now also without the search controlling rules end as constructing medical public problem have how that talent to this though a northern - been - plane deal tree algorithm.", "histories": [["v1", "Wed, 20 Feb 2013 15:20:57 GMT  (361kb)", "http://arxiv.org/abs/1302.4952v1", "Appears in Proceedings of the Eleventh Conference on Uncertainty in Artificial Intelligence (UAI1995)"]], "COMMENTS": "Appears in Proceedings of the Eleventh Conference on Uncertainty in Artificial Intelligence (UAI1995)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["peter haddawy", "anhai doan", "richard goodwin"], "accepted": false, "id": "1302.4952"}, "pdf": {"name": "1302.4952.pdf", "metadata": {"source": "CRF", "title": "Efficient Decision-T heoretic Planning: Techniques and Empirical Analysis", "authors": ["Peter Haddawy", "AnHai Doan", "Richard Goodwin"], "emails": ["@cs.", "rich@cs."], "sections": [{"heading": null, "text": "1 Introduction\nIn the framework of decision-theoretic planning, uncer tainty in the state of the world and in the effects of ac tions are represented with probabilities; and the plan ner's goals, as well as tradeoffs among them, are rep resented with a utility function over outcomes. Given this representation, the objective is to find an opti mal or near optimal plan. Finding the optimal plan requires comparing the expected utilities of all pos sible plans. Doing this explicitly is computationally prohibitive in all but the smallest of domains. This is due to the large space of possible plans that must be searched and to the fact that probabilistic plan evalu ation entails high computational cost.\nResearchers have taken various approaches to dealing with this complexity. One approach has been to focus on solving part of the problem by working with proba bilities and categorical goals [10, 6] or by planning with goal-directed utility functions but under complete cer tainty [13]. These approaches are able to gain some efficiency by exploiting the structure that arises due to the use of categorical goals, deterministic actions, or restrictions on the form of the utility function.\nA second popular approach has been to work with a constrained and highly structured problem representa-\ntion, exemplified by the discrete Markov process-based planners [2, 1]. The model assumes a finite state space and a limited class of utility functions. Even so, exist ing algorithms for both completely and partially ob servable Markov processes have exponential running time in terms of the number of domain attributes and are thus applicable for only small domains.\nA third approach uses qualitative techniques to filter out classes of obviously bad plans, thus avoiding costly plan evaluation [11]. While such qualitative domi nance proving can be highly efficient, it requires much structure and is typically not powerful enough to iden tify the optimal plan. At some point one must resort to quantitative reasoning about expected utility in order to evaluate tradeoffs.\nIn large domains we expect that even if qualitative techniques are used as a filter, the remaining space of possible plans will be too large to exhaustively exam ine. To search such a space effectively, we have devel oped the DRIPS decision-theoretic refinement planning system which obtains its efficiency by exploiting in formation provided in an abstraction hierarchy. The ability to structure actions into an abstraction hierar chy requires the domain to contain actions that can be grouped according to similarity but imposes no other requirements concerning the structure of the domain or the utility function. By using abstraction, the plan ner can eliminate suboptimal classes of plans without explicitly examining all plans in the class.\nA decision-theoretic planning problem can be charac terized in terms of a number of parameters. We have a set of states of the world, which may not be completely observable, a set of actions from which plans can be constructed, a class of utility functions for which we can plan, and some time horizon over which we will consider plans. In this paper we allow the state space to be infinite. States are only partially observable. We assume a finite set of actions and plans. A plan is a sequence of actions. We do not restrict the allowable forms of the utility function. The planning horizon is assumed to be finite. Given this framework, we are interested in finding the optimal plan.\nThe rest of this paper is organized as follows. We first\n230 Haddawy, Doan, and Goodwin\npresent the representational framework used through out the paper. We then present an overview of the DRIPS planner and of the abstraction theory used by the planner to prune the space of plans. In the next section we present two methods for efficiently control ling the plan elaboration and pruning process . We then empirically evaluate the efficiency of DRIPS by ap plying it to the medical planning problem of selecting the optimal test/treat strategy for managing patients suspected of having deep-vein thrombosis (DVT) of the lower extremities. We show that DRIPS signifi cantly outperforms a standard branch-and-bound de cision tree evaluation algorithm on this domain and compare the efficiency of the planner with and with out the search control. We finish with a discussion of future research.\n2 Representation\nWorld Model We describe the world in terms of chronicles, where a chronicle is a complete specifica tion of the world throughout time. We take time to be continuous and we describe chronicles by specify ing the values of discrete and continuous attributes at various times, for example fuel(t0) = 10. We express uncertainty concerning the state of the world with a set of probability distributions over chronicles. We ex press such a set by assigning probability intervals to (attribute, value) pairs at various times.\nAction Model An action is represented by a finite set of tuples {c;,p;, e;} called branches, where the c; are a set of mutually exclusive and exhaustive conditions, the Pi are probabilities, and the e; are effects. The intended meaning of an action is that if the condition c; is satisfied at the beginning of the action then with probability p; the effect e; will be realized immediately following the action. This representation form is used in [10] and utilized by work in Markov Decision Pro cess [2, 1]. In that work an action condition or effect is specified by a set of propositional assignments, such as painted 1\\ --, hold-block. We extend the representation\nby also allowing metric assignments in action condi tions and effects, such as fuel(t2) = fuel(tl)- 5; we further allow branch probabilities p; to be represented by intervals instead of single numeric points. These re laxations substantially enhance the expressiveness of the representation. We assume that changes to the world are limited to those effects explicitly described in the agent's action descriptions.\nFigure 1 shows an example of an action description. The action Deliver-tomato describes the activity of delivering tomatoes from a warehouse to the mar ket. The action is conditioned on the weather and the start location. The first tuple, for example, says that if the weather is sunny and the start location is at the warehouse (sunny = 1, warehouse = 1) then with the probability .8 the action takes 70 units of time (time = time + 70), consumes 5 units of fuel (fuel = fuel - 5), 10% of the tomatoes in the truck are spoiled because of the sun (ton - delivered = ton- delivered+ .9 *ton- intruck ), and after the ac tion the location of the truck is not at the warehouse (warehouse = 0). Notice that propositional assign ments such as warehouse = 0 are represented in a format identical with that of metric assignments.\n3 Decision-Theoretic Refinement Planning\n3.1 Abstracting Actions\nThe DRIPS planner primarily uses two types of abstrac tion: interaction-abstraction and sequential abstrac tion. The idea behind inter-action abstraction is to group together a set of analogous actions. The set is characterized by the features common to all the ac tions in the set. We then can plan with the abstract action and infer properties of a plan involving any of its instances. Formally, an inter-action abstraction of a set of actions {a 1, a 2, ... an} is an action that repre sents the disjunction of the actions in the set. The actions in the set are called the instantiations of the abstract action and are considered to be alternative ways of realizing the abstract action. Thus the ai are assumed to be mutually exclusive.\nTo create an inter-abstraction of a set of actions { a1 , a2, . . . ,an} we do the following. Group the branches of the action descriptions into disjoint sets such that each set contains at most one branch from each action description. For each set s that contains fewer than n branches, add n -lsi branches, each with the effect of one of the branches already in the set and with condition False and probability zero. The effect of an abstract branch is any sentence entailed by each of the effects of the branches in the set. The condition is the disjunction of the conditions on the branches in the set. The probability is specified as a range: the minimum of the probabilities of the branches in the set and the maximum of the probabilities of the branches in the set.\nEfficient Decision-T heoretic Planning: Techniques and Empirical Analysis 231\nA sequential abstraction is essentially a macro oper ator that specifies the end effects of a sequence of actions, as well as the initial conditions under which those effects are achieved, without specifying changes that occur as intermediate steps due to the individ ual actions within the sequence. Thus the information about the state of the world during the execution of the sequence of actions is abstracted away. We ab stract an action sequence a1 a2 by pairing every branch of a1 with every branch of a2 and create an abstract branch for each pairing. The condition on the ab stract branch is the conjunction of the conditions on the paired branches; the probability is the product of the probabilities on the paired branches; and the effect is the composition of the effects.\nWe have implemented tools that automatically create inter-action abstractions [5] and sequential abstrac tions [3]. For a general theory of action abstraction which includes intra-action and sequential abstraction see [4].\n3.2 The DRIPS Planner\nA planning problem is described in terms of an ini tial state distribution, a set of action descriptions, and a utility function . The space of possible plans is described by an abstraction/ decomposition network, supplied by the user . An abstract action has one or more sub-actions, which themselves may be abstrac tions or primitive actions. A decomposable action has a subplan that must be executed in sequence. The de scription of the abstract actions are created by inter action abstraction and the descriptions of the decom posable actions are created by sequential abstraction. An example network is shown in Figure 3. A plan is simply a sequence of actions obtained from the net. The planning task is to find the sequence of actions for those represented in the network that maximizes expected utility relative to the given probability and utility models.\nDRIPS finds the optimal plan by building abstract plans, comparing them, and refining only those that might yield the optimal plan. It begins with a set of abstract plans at the highest abstraction level, and subsequently refines the plans from more general to more specific. Since projecting abstract plans results in inferring probability intervals and attribute ranges, an abstract plan is assigned an expected utility inter val, which includes the expected utilities of all possible instances of that abstract plan. An abstract plan can be eliminated if the upper bound of its expected utility interval is lower than the lower bound of the expected utility interval for any other plan. Eliminating an ab stract plan eliminates all its possible instantiations. When abstract plans have overlapping expected util ity intervals, the planner refines one of the plans by instantiating one of its actions. Successively instanti ating abstract plans will narrow the range of expected utility and allow more plans to be pruned.\nGiven the abstraction/ decomposition network, we evaluate plans at the abstract level, eliminate subop timal plans, and refine remaining candidate plans fur ther until only optimal plans remain. The algorithm works as follows.\n1. Create a plan consisting of the single top-level ac tion and put it into the set plans.\n2. Until there is no abstract plan left in plans,\n\u2022 Choose an abstract plan P. Refine P by re placing an abstract action in P with all its instantiations, or its decomposition, creating a set of lower level plans {P1, P2, ... , Pn}\u00b7\n\u2022 Compute the expected utility of all newly cre ated plans. \u2022 Remove P from plans and add {PI, P2, ... , Pn}.\n\u2022 Eliminate suboptimal plans in plans.\n3. Return plans as the set of optimal plans.\nSince DRIPS only eliminates plans that it can prove are suboptimal and if run to completion it explores the entire space of possible plans, it is guaranteed to find the optimal plan or plans. Notice that the algorithm can be stopped at any time to yield the current set of candidate plans. This feature can be exploited to flexibly respond to time constraints.\n4 Control Strategies\nThe run time efficiency of the DRIPS planner depends on effectively controlling the search through the space of abstract plans. The DRIPS algorithm contains two non-deterministic choice points in its second step. The first choice is to select a plan from the set of abstract plans with overlapping expected utility. The second choice is to select an abstract action within the plan for expansion.\nConsider selection of the plan to be refined. There are two ways a potentially optimal plan can be elim inated from consideration: either the upper bound of the plan is lowered below the highest lower bound or the highest lower bound is raised above the level of the upper bound of the plan. Notice that since the abstract plan with the maximal upper bound on ex pected utility may contain an optimal primitive plan, that abstract plan must be expanded to insure that we have found the complete set of optimal plans. So at any point in the search the abstract plan with the current maximal upper bound will eventually need to be expanded. Thus the strategy of always expanding a non-primitive plan with the maximum upper bound on expected utility will lead to the optimal solution length.\nThe selection of an action to expand is more problem atic. Selecting actions that when expanded produce plans with greater reductions in the range of expected\n232 Haddawy, Doan, and Goodwin\nutility facilitates pruning and leads to more efficient planning . In this section we present and discuss three approaches to selecting actions for expansion. The first approach uses a simple heuristic, the second uses sup plied priorities, and the third uses sensitivity analysis.\nThe default action selection method uses a simple heuristic that chooses the first abstract action in the plan for expansion, since picking a specific initial ac tion can help to differentiate the set of abstract plans. This method is domain independent, and requires no additional effort on the part of the domain designer. In practice, we have found that the heuristic performs sig nificantly better than random action selection. How ever, the first action heuristic is not a well informed heuristic and cannot take advantage of the structure of the domain to guide the search. For the purposes of this paper, we use this heuristic as a strawman to provide a baseline against which to compare the per formance of the other two action selection methods.\nA fixed priority action selection method allows the do main designer to assign a priority to each abstract ac tion. At each choice point, the action with the high est priority is selected for expansion. Ties are broken by selecting the first action with the highest priority. This method allows the domain designer to encode ex tra information about the domain that can server as a better informed heuristic. Like the default method, it is cheap to compute . The disadvantage of this method is that it places an extra burden on the domain de signer to set the priorities . One method we have used to set priorities is to assign low priority to actions that have similar instantiations and higher priority to actions with dissimilar instantiations. Preferentially refining actions with dissimilar instantiations should lead to less overlap in the expected utility of the sub plans. We observe the performance of the planner on example problems to validate the priority assignments.\n4.1 Sensitivity Analysis\nThe third method of selecting actions for expansion uses a sensitivity analysis to select actions to which the bounds on expected utility are most sensitive. The sensitivity analysis uses the structure of the actions in the domain and the utility function to adapt the search control to the specific abstract plan to be expanded. Tailoring the search control in this way produces a more informed heuristic and should lead to less search. The disadvantage of this method is that the sensitivity analysis involves some computational overhead. The added cost must be traded off against any reduction in the amount of search needed.\nThe sensitivity analysis used is structural, based on the method used to select plans for expansion. Plans se lected for expansion are those with the highest bound on expected utility. If an action expansion creates sub plans with the same upper bound on expected utility, then the sub plans will be immediately selected for fur ther expansion. Preferentially expanding actions that\ncan cause larger changes in the upper bound of ex pected utility should reduce the likelihood that the sub-plans will be chosen for further expansion. This should lead to increased search efficiency.\nIn the rest of this section, we present sensitivity anal ysis for a general utility model proposed [7]. The ex pected utility of a plan p is the sum of the utilities of the possible chronicles weighted by the probability of each chronicle EU(p) = LcE{chronic/es} U(c) \u00b7 P(c). Utility of each chronicle, U( c), is the weighted sum of the utility of goal satisfaction UG and residual utility UR, U(c) = UG(c) + krU R(c).\nThe utility functions, UG and UR, form part of the problem description input to the planner. The sensi tivity analysis requires two additional functions that give the possible change in the upper bound of the utility functions as a result of expanding an action. The L.UG+(chronicle,action,plan) function returns the maximum change in the upper bound on utility of goal achievement for a chronicle if the given ac tion in the given plan is expanded. A second function, f:::.U R+(chronicle, action, plan), similarly returns the maximum change in the upper bound on the resid ual utility. The b.UG+ and f:::.U R+ functions can be derived from the UG and UR functions respectively. However, since the UG and UR functions can be arbi trarily complex, the two additional functions must be supplied by the domain designer.\nTest_Actioo\nFigure 2: Abstract test action representing tests with different costs and different false negative probabili ties.\nTo get an idea of what is involved in creating the f:::.U c+ and f:::.U R+ functions, consider the abstract test action in figure 2. The abstract test action has sev eral possible instantiations that account for the range in the cost and the range in the probability of a false negative. Further suppose that the UR function is: U R(c) =-(cost + COST _FATALITY) if the patient dies and U R(c) = -(cost) otherwise. The chronicle passed to the L.U R+ can be used to determine which branch of the action the chronicle corresponds to. The assignments of cost and TestResult in that branch give the effect that the action can have on the plan. In this example, the possible change in the UR value corre-\nEfficient Decision\u00b7 Theoretic Planning: Techniques and Empirical Analysis 233\nsponds to the difference in the costs of the tests ($300- $120) = $180.\nA third function, 6.P(chronicle, action, plan), returns the maximum change in the upper and lower bound of the probability of a chronicle that can result from expanding the given action. This function depends only on the structure of the actions and not on the form of the utility function. It is implemented domain independently in the planner. In the medical example above, refining the test action could reduce the range in the probability of a false negative.\nThe overall sensitivity of the upper bound on expected utility can be calculated by combining the 6. functions. The following equation gives the least upper bound on utility\nfJ(c, a, p) = (uc+(c)- 6.UG+(c, a, p)) + Kr \u00b7 (U R+(c)- 6.U R+(c)),\nwhere uc+ and U R+ represent the current upper bounds on UG and U R, respectively. Calculating the effect on probability is more complicated. The upper bound on expected utility can be lowered either by de creasing upper bound on the probability of high utility chronicles or increasing the lower bound on the P!oba bility of low utility chronicles. Let the function P give the probability of each chronicle, with the probabil ity bounds adjusted by up to !::J.P and subject to the condition that the sum of the probabilities be 1. The overall sensitivity is then the upper bound on expected utility minus the least upper bound on the expected utility after action expansion,\nsensitivity( a, p) = EU+- min { ub ( \ufffd fJ(c, a,p) \u00b7 P(c, a,p)) } .\nWhen selecting an action for expansion, the compu tation needed to expand the action and evaluate the subplans needs to be taken into account. The final weighting for each action is the ratio of the sensitivity divided by the cost of expanding the action. For sim plicity, we estimate the cost by counting the number of sub-plans that would be have to be evaluated, which is equal to the number of instantiations of the action. The action with the highest weighting is then selected for expansion.\n5 Empirical Analysis\n5.1 Comparing DRIPS with Branch and Bound Algorithms\nAppropriate management of patients with suspected acute deep venous thrombosis (DVT) of the lower ex tremities is an important. and complex clinical prob lem. To evaluate the effectiveness of DRIPS, we con-\nstructed a model for diagnosis and treatment of DVT1, based on data from an article that compared various different management strategies [8] . To encompass all of the strategies described in the original model, our model incorporated up to four tests, with a maximum of three 7-day waiting periods between tests. The test procedures included contrast venography (Veno) and two non-invasive tests (NIT): impedance plethys mography (lPG) and real-time ultrasonography (RUS). Treatment, which consisted solely of anticoagulation therapy, included unconditional actions (e.g., Treat All) and conditional actions (e.g., Treat if thigh DVT seen on venography [Treat if Veno Thigh+]). The util ity function used for the analysis was defined as the sum of the costs of tests and treatment and the costs associated with the state of the patient at the end of the plan.\nA portion of the abstraction/decomposition network for the DVT domain is shown in Figure 32. The most abstract action, Manage DVT, is an abstrac tion of six actions: No_Tests_and_Treat, Veno_Tests, NIT_Tests, Two_Tests, Three_Tests, Four_Tests. (The number of tests represents the length of the longest al lowed sequence of tests.) Each of these actions further decomposes into a sequence of actions. For example, NIT_Tests decomposes into NIT, TreaLNIT. NIT can be instantiated as lPG or RUS. Our model for manage ment of suspected DVT encompassed 6,206 concrete plans; for example, one complete plan (an instance of the Two_Tests action) is \"lPG, WaiL7d_iLNIT-, Veno_iLNIT-, TreaLiLVeno_Any+.\"\nWe ran DRIPS with several variations of the utility function and in all cases it successfully identified the optimal plan. This was verified by comparison with a decision-tree evaluation algorithm. The results pro duced by DRIPS differed from those reported in the reference manuscript [8]. In reviewing these results, we discovered that DRIPS had uncovered an error in the original study [9].\nIn evaluating this model, DRIPS evaluated only 655 abstract and concrete plans out of a total of 6,206, yielding a pruning rate of 89%.3 In order to demon strate the efficiency of DRIPS in practice, we compared its performance on several variations of this problem to that of a standard branch-and-bound algorithm for evaluating decision trees. Figure 4 .a shows the run ning time for DRIPS and the running time for the deci sion tree branch-and-bound algorithlll at values of cost of fatality ranging from $50,000 to $500,000. DRIPS\n1The DRIPS code and the DVT domain are available via www at http:/ jwww.cs.uwm.edu/faculty /haddawy.\n2It should be noted that the network structure followed naturally from our understanding of the problem and thus took very little time to produce, but producing the abstract action descriptions was a rather laborious task.\n30n the clinical planning problem of finding the optimal test/treat strategy for diabetic patients suspected of having a foot infection, DRIPS evaluated only 13 out of 258 possible plans, achieving a pruning rate of 95%.\n234 Haddawy, Doan, and Goodwin\nManageDVT\n.. .. .... .... . \u2022\u2022 .. \u00b7 .. \u2022 .. ::: :\ufffd:\ufffd\u00b7 .... :\ufffd.\ufffd.:\ufffd:: .. :: .. = .. : ::::::: .. ...... ..::\u00b7 .........\nA A Tw;,Thsts Th;..,.,Thsts. \u00b7.;.;,;..Tests No Tests and Treat\n\ufffd No Tests Treat None/AU Veno Treat Veno NIT Treat NIT Maybe Wait ... - ; .. .. .. Two Tests\n\ufffd NIT Maybe Wait Test if Treat Veno NIT Don't WaJt W:Ut 7d Wait 7d if NIT-\nTr\ufffd'-\ufffd-\ufffd\ufffd\ufffd\ufffd. . . \ufffd:\ufffd\ufffd\ufffdcno\n./\ufffd1\ufffd\u00b7 ... Tr\ufffdt None T.Ut All\n\ufffd-;s,!.i:\nTreat Non'e/AII T:\ufffd1\ufffd\ufffd\ufffdno IPG RUS\nTr0:t if T;\ufffd if ,#.. .. ....\n-\ufffd\ufffd!{\ufffd\ufffd- V;;,o ifNIT+\nVeno/;..,n_ \ufffdTifNIT-\nVcno Thigh+ Veno Any+\nTreat Veno NIT .. \u00b7\u00b7:\u00b7\u00b7 ..\nTreat None/All Treat it Veno Treat if NIT or Veno IPG if NIT- RUS if NIT-\nFigure 3: Abstraction/decomposition network. Abstraction relations are shown with dashed lines and decom position relations are shown with solid lines. Actions shown in bold have decompositions or abstractions which are displayed elsewhere in the figure.\noutperformed the branch-and-bound algorithm at all values. In the most extreme case, the running time of DRIPS was only 15% that of the branch-and-bound algorithm.\nTo examine how the efficiency of the two approaches varies as a function of problem size, we applied each approach to four versions of the DVT domain of in creasing size. Figure 4.b shows the running times per plan for DRIPS and the branch-and-bound algorithm for each of the domains. Notice that the running time per plan for the branch-and-bound algorithm in creases markedly as a function of problem size while the running time per plan for DRIPS actually decreases. This means that for this domain the DRIPS algorithm scales up much more effectively then the branch-and bound algorithm. Figure 4.c shows that the memory usage of DRIPS also compares favorably to that of the branch-and-bound algorithm over this same suite of problems. In the most extreme case, DRIPS uses only 4.4% as much memory as the branch-and-bound algo rithm. This can be explained by the fact that at any time DRIPS projects and evaluates only a small, con stant number of plans, while evaluating the decision tree requires keeping track of all subtrees projected.\n5.2 Comparing Control Strategies\nThe comparisons of the DRIPS algorithm with the deci sion tree algorithm in the previous section made use of the fixed priority control strategy. In this section, we repeat some of the tests to compare the different DRIPS control strategies. The results are shown in Figure .5.\nFor a small domain size, search control has little ef fect on efficiency. The results for the smallest DVT domain given in Figure 5.a show that all the strategies expand about the same number of plans and that run ning times are comparable. For this particular domain, the optimal strategy evaluates from 10 to 16 plans and all of the strategies perform nearly optimally.\nIn larger domains, seareh control beeomes more erit ieal. The results for the largest DVT domain, Fig ure 5.b, show a wide divergence in both the number of plans evaluated and in the running time. In the larger domain, pruning can significantly reduce the amount of search needed and effective search control leads to better pruning.\nIn larger versions of the DVT domain, the fixed prior ity control strategy does significantly better than the default first action heuristic. Fixed priority control adds little overhead and evaluates significantly fewer plans to produce a much improved running time. The performance of the strategy is significantly better for utility funetions with a high cost of fatality, as is the default strategy. This can be partly aceounted for by the fact that the domain designer only assigned prior ities to some of the more significant abstract actions. In cases where priorities are equal or not assigned, the fixed priority strategy falls back to the default strategy. The first action heuristic does well for utility functions with a high cost of fatality because the value of better information inereases since the cost of making a mis take is so high. The first actions in a treatment plan tend to be tests, and creating plans that use differ ent tests can significantly differentiate their expected\nEfficient Decision-T heoretic Planning: Techniques and Empirical Analysis 235\n1-0r-------------------------------------.\n'! 12000 .\ufffd - 10000\n50 100 150 200 300 500 (a) Cost of fatality ($ thousands)\nutilities and lead to better pruning.\nThe sensitivity analysis based control strategy also does significantly better than the default control strat egy over the entire range of utility functions for large domains. The performance of this strategy is almost constant since the strategy adapts the search control to the changing utility function. As a result, the sen sitivity analysis strategy does significantly better than the fixed priority strategy for lower costs of fatality, es pecially in terms of the number of plans evaluated. For higher costs of fatality, the fixed priority scheme only expands a few more plans and since it has a lower over head, the running time is better. The running time of the sensitivity analysis strategy could be improved by optimizing the sensitivity analysis code or by doing only a partial sensitivity analysis. For. example, the sensitivity could be calculated relative to some frac tion of the most likely chronicles. The speedup would be linear in the inverse of the fraction of chronicles used, but this would have to be traded off against any degradation in the quality of search control .\n6 Discussion and Future Research\nThe efficiency of our approach depends largely on how domain regularities are exploited to build the abstrac tion hierarchy. The applicability and the performance of the planner would be improved if methods could be devised to perform tight abstraction, and loss due to abstraction could be quantified. Devising such proce dures and loss estimates has been shown to be possible for a limited class of domains [1]. In more complex do mains with more expressive utility functions it is much harder to work out efficient abstraction procedures, al though relatively good abstraction hierarchy can still be built by exploiting simple regularities in the domain and heuristics given by domain experts. If we know, for example , that two alternative actions differ only in the value of an attribute, say cost, and the change in the value of cost produces very little change in the value of the utility function, then the abstraction of the two actions will be tight. The sensitivity analysis pre sented in Section 4.1 exploites such simple domain and utility regularities to control plan elaboration. We are currently working on methods for automatically gener ating good abstractions for use by the DRIPS planner. The method starts by assigning weights to the domain attributes by analyzing the utility function and the primitive action descriptions. A clustering algorithm then uses the primitive action descriptions and weights to group together similar actions.\nA significant contribution of our approach is the ability to perform decision theoretic planning in richer do mains and utility models than those in the Markov approach. Since existing algorithms for the Markov models have exponential running time in the number of domain attributes, and do not exploit much of the domain regularities it would be interesting to compare our approach with these methods.\nTo further improve the efficiency of DRIPS, we are cur rently working on a technique that exploits stochas tic dominance to eliminate suboptimal plans without computing their expected utilities. A relation called stochastic dominance can be established between the probability distributions of two random variables if the two distributions satisfy certain constraints [12]. Ran dom variables representing domain attributes at dif ferent time points are typically related to one another by formulas via action effect assignments, and trans formations caused by actions often create dominance situations, which can be verified fairly easily without knowing the exact probability distributions of the ran dom variables. For any two plans p1 and P2 we can then try to locate two joint probability distributions P and Q over a subset of domain attributes such that P and Q are obtained at some timepoint during pro jecting p1 and p2, respectively, and P dominates Q. The dominance of P over Q can be used to to prove that Pl has a higher expected utility than P2 (or vice versa) [12]; p2 can then be eliminated from further consideration.\n236 Haddawy, Doan, and Goodwin\n1111111 the first action heuristics\n\ufffd 2100 \"' i 1900 -\ufffd 1700 -\ufffd 1500 . \u00b7' '\n1300 50 1500\ncost of fatality ($000) '0 \"' til 20 \ufffd \ufffd 1 5 \"' Ia 10 \"S.. '0 5 .. \"' \ufffd 0 s 50\ncost of fatality ($000) 1500\n(a)\n- fixed priority D sensitivity analysis\n\ufffd 4300000 ,, (.) ., ! 3300000 ', -\ufffd 2300000 ' ' '\n\u00b7I ' 1300000 \"-------\n300000 50 1500\ncost of fatality ($000) '0 \"' 5000 til \ufffd 4000 \ufffd ij 3000 -a 2000 '0 .. 1000\n\ufffd 0 s 50\ncost of fatality ($000) 1500\n(b)\nFigure 5: Results showing running time and number of plans evaluated versus the cost of fatality (a) for a small DVT domain (b) for a DVT domain of 6,206 plans.\nWe have successfully applied this technique to a vari ety of domains to reduce the number of plans before applying the DRIPS algorithm. For example, in the DVT domain the number is reduced from 6,206 to 232. Further results and detail will be reported in a future paper.\nReferences\n[1] C. Boutilier and R. Dearden. Using abstractions for decision-theoretic planning with time constraints. In Proceedings of the Twelfth National Conference on Artificial Intelligence, pages 1016-1022, Seattle, July 1994. [2] T. Dean, L. Pack Kaelbling, J. Kirman, and A. Nichol son. Planning with deadlines in stochastic domains. In Proceedings of the Eleventh National Conference on Artificial Intelligence, pages 574-579, July 1993. [3] A. Doan and P. Haddawy. Generating macro opera tors for decision-theoretic planning. In Working Notes of the AAAI Spring Symposium on Extending Theo ries of Action, Stanford, March 1995. [4] A.H. Doan and P. Haddawy. Decision-theoretic refine ment planning: Principles and application. Technical Report TR-95-01-01, Dept. of Elect. Eng. & Com puter Science, University of Wisconsin-Milwaukee, January 1995. Available via anonymous FTP from pub/tech_reports at ftp. cs. uwm. edu. [5] M.G. Finigan. Knowledge acquisition for decision theoretic planning. In Proceedings MAICSS'95, pages 98-102, Carbondale, IL, April 1995. (6] R.P. Goldman and M.S. Boddy. Epsilon-safe planning. In Proceedings of the Tenth Conference on Uncertainty\nin Artificial Intelligence, pages 253-261, Seattle, July 1994. [7] P. Haddawy and S. Hanks. Utility models for goal directed decision-theoretic planners. Technical Re port 93-06-04, Department of Computer Science and Engineering, University of Washington, June 1993. Available via anonymous FTP from -ftp/pub/ai/ at cs.washington.edu. [8] Hillner BE, Philbrick JT, Becker DM. Optimal management of suspected lower-extremity deep vein thrombosis: an evaluation with cost assessment of 24 management strategies. Arch Intern Med, 152:165- 175, 1992. (9] CE Kahn, Jr and P Haddawy. Management of sus pected lower-extremity deep venous thrombosis (let ter). Archives of Internal Medicine, 155:426, February 1995. [10] N. Kushmerick, S. Hanks, and D. Weld. An algorithm for probabilistic least-commitment planning. In Pro ceedings of the Twelfth National Conference on Arti ficial Intelligence, pages 1073-1078, Seattle, 1994. [11] M.P. Wellman. Formulation of Tradeoffs in Planning Under Uncertainty. Pitman, London,UK, 1990. [12] G. A. Whitmore and M. C. Findlay. Stochastic Domi nance: An Approach to Decision Making Under Risk. D. C. Health and Company, Lexington, MA, 1978. [13] M. Williamson and S. Hanks. Optimal planning with a goal-directed utility model. In Proceedings of the Second International Conference on Artificial Intel ligence Planning Systems, pages 176-181, Chicago, June 1994."}], "references": [{"title": "Using abstractions for decision-theoretic planning with time constraints", "author": ["C. Boutilier", "R. Dearden"], "venue": "In Proceedings of the Twelfth National Conference on Artificial Intelligence,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1994}, {"title": "Planning with deadlines in stochastic domains", "author": ["T. Dean", "L. Pack Kaelbling", "J. Kirman", "A. Nichol\u00ad son"], "venue": "In Proceedings of the Eleventh National Conference on Artificial Intelligence,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1993}, {"title": "Generating macro opera\u00ad tors for decision-theoretic planning", "author": ["A. Doan", "P. Haddawy"], "venue": "In Working Notes of the AAAI Spring Symposium on Extending Theo\u00ad ries of Action,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1995}, {"title": "Decision-theoretic refine\u00ad ment planning: Principles and application", "author": ["A.H. Doan", "P. Haddawy"], "venue": "Technical Report TR-95-01-01, Dept. of Elect. Eng. & Com\u00ad puter Science, University of Wisconsin-Milwaukee, January", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1995}, {"title": "Knowledge acquisition for decision\u00ad theoretic planning", "author": ["M.G. Finigan"], "venue": "In Proceedings MAICSS'95,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1995}], "referenceMentions": [{"referenceID": 1, "context": "tion, exemplified by the discrete Markov process-based planners [2, 1].", "startOffset": 64, "endOffset": 70}, {"referenceID": 0, "context": "tion, exemplified by the discrete Markov process-based planners [2, 1].", "startOffset": 64, "endOffset": 70}, {"referenceID": 1, "context": "This representation form is used in [10] and utilized by work in Markov Decision Pro\u00ad cess [2, 1].", "startOffset": 91, "endOffset": 97}, {"referenceID": 0, "context": "This representation form is used in [10] and utilized by work in Markov Decision Pro\u00ad cess [2, 1].", "startOffset": 91, "endOffset": 97}, {"referenceID": 4, "context": "We have implemented tools that automatically create inter-action abstractions [5] and sequential abstrac\u00ad tions [3].", "startOffset": 78, "endOffset": 81}, {"referenceID": 2, "context": "We have implemented tools that automatically create inter-action abstractions [5] and sequential abstrac\u00ad tions [3].", "startOffset": 112, "endOffset": 115}, {"referenceID": 3, "context": "For a general theory of action abstraction which includes intra-action and sequential abstraction see [4].", "startOffset": 102, "endOffset": 105}, {"referenceID": 0, "context": "Devising such proce\u00ad dures and loss estimates has been shown to be possible for a limited class of domains [1].", "startOffset": 107, "endOffset": 110}], "year": 2011, "abstractText": "This paper discusses techniques for perform\u00ad ing efficient decision-theoretic planning. We give an overview of the DRIPS decision\u00ad theoretic refinement planning system, which uses abstraction to efficiently identify opti\u00ad mal plans. We present techniques for au\u00ad tomatically generating search control infor\u00ad mation, which can significantly improve the planner's performance. We evaluate the effi\u00ad ciency of DRIPS both with and without the search control rules on a complex medical planning problem and compare its perfor\u00ad mance to that of a branch-and-bound deci\u00ad sion tree algorithm.", "creator": "pdftk 1.41 - www.pdftk.com"}}}