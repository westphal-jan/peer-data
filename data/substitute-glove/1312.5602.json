{"id": "1312.5602", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Dec-2013", "title": "Playing Atari with Deep Reinforcement Learning", "abstract": "We upon and successful turns learning model though successfully learn control criticized specifically taking high - 3-d excitation parameters that reinforcement learning. The styling as next joystick lesions entertainment, hired put though h5n1 important Q - learning, much input is raw rectangle and whose 4.5 is a substantial function estimating future expertise. We enable our used but were Atari snes preseason, over Arcade Learning Environment, with no adjustment large as painting while work discrete. We yet it it outperforms none end mechanisms on six much as games only one-tenth a human expert on eleven of them.", "histories": [["v1", "Thu, 19 Dec 2013 16:00:08 GMT  (221kb,D)", "http://arxiv.org/abs/1312.5602v1", "NIPS Deep Learning Workshop 2013"]], "COMMENTS": "NIPS Deep Learning Workshop 2013", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["volodymyr mnih", "koray kavukcuoglu", "david silver", "alex graves", "ioannis antonoglou", "daan wierstra", "martin riedmiller"], "accepted": false, "id": "1312.5602"}, "pdf": {"name": "1312.5602.pdf", "metadata": {"source": "CRF", "title": "Playing Atari with Deep Reinforcement Learning", "authors": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Alex Graves", "Ioannis Antonoglou", "Daan Wierstra", "Martin Riedmiller"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Learning to control agents directly from high-dimensional sensory inputs like vision and speech is one of the long-standing challenges of reinforcement learning (RL). Most successful RL applications that operate on these domains have relied on hand-crafted features combined with linear value functions or policy representations. Clearly, the performance of such systems heavily relies on the quality of the feature representation.\nRecent advances in deep learning have made it possible to extract high-level features from raw sensory data, leading to breakthroughs in computer vision [11, 22, 16] and speech recognition [6, 7]. These methods utilise a range of neural network architectures, including convolutional networks, multilayer perceptrons, restricted Boltzmann machines and recurrent neural networks, and have exploited both supervised and unsupervised learning. It seems natural to ask whether similar techniques could also be beneficial for RL with sensory data.\nHowever reinforcement learning presents several challenges from a deep learning perspective. Firstly, most successful deep learning applications to date have required large amounts of handlabelled training data. RL algorithms, on the other hand, must be able to learn from a scalar reward signal that is frequently sparse, noisy and delayed. The delay between actions and resulting rewards, which can be thousands of timesteps long, seems particularly daunting when compared to the direct association between inputs and targets found in supervised learning. Another issue is that most deep learning algorithms assume the data samples to be independent, while in reinforcement learning one typically encounters sequences of highly correlated states. Furthermore, in RL the data distribution changes as the algorithm learns new behaviours, which can be problematic for deep learning methods that assume a fixed underlying distribution.\nThis paper demonstrates that a convolutional neural network can overcome these challenges to learn successful control policies from raw video data in complex RL environments. The network is trained with a variant of the Q-learning [26] algorithm, with stochastic gradient descent to update the weights. To alleviate the problems of correlated data and non-stationary distributions, we use\nar X\niv :1\n31 2.\n56 02\nv1 [\ncs .L\nG ]\n1 9\nD ec\nan experience replay mechanism [13] which randomly samples previous transitions, and thereby smooths the training distribution over many past behaviors.\nWe apply our approach to a range of Atari 2600 games implemented in The Arcade Learning Environment (ALE) [3]. Atari 2600 is a challenging RL testbed that presents agents with a high dimensional visual input (210 \u00d7 160 RGB video at 60Hz) and a diverse and interesting set of tasks that were designed to be difficult for humans players. Our goal is to create a single neural network agent that is able to successfully learn to play as many of the games as possible. The network was not provided with any game-specific information or hand-designed visual features, and was not privy to the internal state of the emulator; it learned from nothing but the video input, the reward and terminal signals, and the set of possible actions\u2014just as a human player would. Furthermore the network architecture and all hyperparameters used for training were kept constant across the games. So far the network has outperformed all previous RL algorithms on six of the seven games we have attempted and surpassed an expert human player on three of them. Figure 1 provides sample screenshots from five of the games used for training."}, {"heading": "2 Background", "text": "We consider tasks in which an agent interacts with an environment E , in this case the Atari emulator, in a sequence of actions, observations and rewards. At each time-step the agent selects an action at from the set of legal game actions, A = {1, . . . ,K}. The action is passed to the emulator and modifies its internal state and the game score. In general E may be stochastic. The emulator\u2019s internal state is not observed by the agent; instead it observes an image xt \u2208 Rd from the emulator, which is a vector of raw pixel values representing the current screen. In addition it receives a reward rt representing the change in game score. Note that in general the game score may depend on the whole prior sequence of actions and observations; feedback about an action may only be received after many thousands of time-steps have elapsed.\nSince the agent only observes images of the current screen, the task is partially observed and many emulator states are perceptually aliased, i.e. it is impossible to fully understand the current situation from only the current screen xt. We therefore consider sequences of actions and observations, st = x1, a1, x2, ..., at\u22121, xt, and learn game strategies that depend upon these sequences. All sequences in the emulator are assumed to terminate in a finite number of time-steps. This formalism gives rise to a large but finite Markov decision process (MDP) in which each sequence is a distinct state. As a result, we can apply standard reinforcement learning methods for MDPs, simply by using the complete sequence st as the state representation at time t.\nThe goal of the agent is to interact with the emulator by selecting actions in a way that maximises future rewards. We make the standard assumption that future rewards are discounted by a factor of \u03b3 per time-step, and define the future discounted return at time t as Rt = \u2211T t\u2032=t \u03b3\nt\u2032\u2212trt\u2032 , where T is the time-step at which the game terminates. We define the optimal action-value function Q\u2217(s, a) as the maximum expected return achievable by following any strategy, after seeing some sequence s and then taking some action a, Q\u2217(s, a) = max\u03c0 E [Rt|st = s, at = a, \u03c0], where \u03c0 is a policy mapping sequences to actions (or distributions over actions).\nThe optimal action-value function obeys an important identity known as the Bellman equation. This is based on the following intuition: if the optimal value Q\u2217(s\u2032, a\u2032) of the sequence s\u2032 at the next time-step was known for all possible actions a\u2032, then the optimal strategy is to select the action a\u2032\nmaximising the expected value of r + \u03b3Q\u2217(s\u2032, a\u2032), Q\u2217(s, a) = Es\u2032\u223cE [ r + \u03b3max\na\u2032 Q\u2217(s\u2032, a\u2032) \u2223\u2223\u2223s, a] (1) The basic idea behind many reinforcement learning algorithms is to estimate the actionvalue function, by using the Bellman equation as an iterative update, Qi+1(s, a) = E [r + \u03b3maxa\u2032 Qi(s\u2032, a\u2032)|s, a]. Such value iteration algorithms converge to the optimal actionvalue function, Qi \u2192 Q\u2217 as i \u2192 \u221e [23]. In practice, this basic approach is totally impractical, because the action-value function is estimated separately for each sequence, without any generalisation. Instead, it is common to use a function approximator to estimate the action-value function, Q(s, a; \u03b8) \u2248 Q\u2217(s, a). In the reinforcement learning community this is typically a linear function approximator, but sometimes a non-linear function approximator is used instead, such as a neural network. We refer to a neural network function approximator with weights \u03b8 as a Q-network. A Q-network can be trained by minimising a sequence of loss functions Li(\u03b8i) that changes at each iteration i,\nLi (\u03b8i) = Es,a\u223c\u03c1(\u00b7) [ (yi \u2212Q (s, a; \u03b8i))2 ] , (2)\nwhere yi = Es\u2032\u223cE [r + \u03b3maxa\u2032 Q(s\u2032, a\u2032; \u03b8i\u22121)|s, a] is the target for iteration i and \u03c1(s, a) is a probability distribution over sequences s and actions a that we refer to as the behaviour distribution. The parameters from the previous iteration \u03b8i\u22121 are held fixed when optimising the loss function Li (\u03b8i). Note that the targets depend on the network weights; this is in contrast with the targets used for supervised learning, which are fixed before learning begins. Differentiating the loss function with respect to the weights we arrive at the following gradient,\n\u2207\u03b8iLi (\u03b8i) = Es,a\u223c\u03c1(\u00b7);s\u2032\u223cE [( r + \u03b3max\na\u2032 Q(s\u2032, a\u2032; \u03b8i\u22121)\u2212Q(s, a; \u03b8i)\n) \u2207\u03b8iQ(s, a; \u03b8i) ] . (3)\nRather than computing the full expectations in the above gradient, it is often computationally expedient to optimise the loss function by stochastic gradient descent. If the weights are updated after every time-step, and the expectations are replaced by single samples from the behaviour distribution \u03c1 and the emulator E respectively, then we arrive at the familiar Q-learning algorithm [26]. Note that this algorithm is model-free: it solves the reinforcement learning task directly using samples from the emulator E , without explicitly constructing an estimate of E . It is also off-policy: it learns about the greedy strategy a = maxaQ(s, a; \u03b8), while following a behaviour distribution that ensures adequate exploration of the state space. In practice, the behaviour distribution is often selected by an -greedy strategy that follows the greedy strategy with probability 1 \u2212 and selects a random action with probability ."}, {"heading": "3 Related Work", "text": "Perhaps the best-known success story of reinforcement learning is TD-gammon, a backgammonplaying program which learnt entirely by reinforcement learning and self-play, and achieved a superhuman level of play [24]. TD-gammon used a model-free reinforcement learning algorithm similar to Q-learning, and approximated the value function using a multi-layer perceptron with one hidden layer1.\nHowever, early attempts to follow up on TD-gammon, including applications of the same method to chess, Go and checkers were less successful. This led to a widespread belief that the TD-gammon approach was a special case that only worked in backgammon, perhaps because the stochasticity in the dice rolls helps explore the state space and also makes the value function particularly smooth [19].\nFurthermore, it was shown that combining model-free reinforcement learning algorithms such as Qlearning with non-linear function approximators [25], or indeed with off-policy learning [1] could cause the Q-network to diverge. Subsequently, the majority of work in reinforcement learning focused on linear function approximators with better convergence guarantees [25].\n1In fact TD-Gammon approximated the state value function V (s) rather than the action-value function Q(s, a), and learnt on-policy directly from the self-play games\nMore recently, there has been a revival of interest in combining deep learning with reinforcement learning. Deep neural networks have been used to estimate the environment E ; restricted Boltzmann machines have been used to estimate the value function [21]; or the policy [9]. In addition, the divergence issues with Q-learning have been partially addressed by gradient temporal-difference methods. These methods are proven to converge when evaluating a fixed policy with a nonlinear function approximator [14]; or when learning a control policy with linear function approximation using a restricted variant of Q-learning [15]. However, these methods have not yet been extended to nonlinear control.\nPerhaps the most similar prior work to our own approach is neural fitted Q-learning (NFQ) [20]. NFQ optimises the sequence of loss functions in Equation 2, using the RPROP algorithm to update the parameters of the Q-network. However, it uses a batch update that has a computational cost per iteration that is proportional to the size of the data set, whereas we consider stochastic gradient updates that have a low constant cost per iteration and scale to large data-sets. NFQ has also been successfully applied to simple real-world control tasks using purely visual input, by first using deep autoencoders to learn a low dimensional representation of the task, and then applying NFQ to this representation [12]. In contrast our approach applies reinforcement learning end-to-end, directly from the visual inputs; as a result it may learn features that are directly relevant to discriminating action-values. Q-learning has also previously been combined with experience replay and a simple neural network [13], but again starting with a low-dimensional state rather than raw visual inputs.\nThe use of the Atari 2600 emulator as a reinforcement learning platform was introduced by [3], who applied standard reinforcement learning algorithms with linear function approximation and generic visual features. Subsequently, results were improved by using a larger number of features, and using tug-of-war hashing to randomly project the features into a lower-dimensional space [2]. The HyperNEAT evolutionary architecture [8] has also been applied to the Atari platform, where it was used to evolve (separately, for each distinct game) a neural network representing a strategy for that game. When trained repeatedly against deterministic sequences using the emulator\u2019s reset facility, these strategies were able to exploit design flaws in several Atari games."}, {"heading": "4 Deep Reinforcement Learning", "text": "Recent breakthroughs in computer vision and speech recognition have relied on efficiently training deep neural networks on very large training sets. The most successful approaches are trained directly from the raw inputs, using lightweight updates based on stochastic gradient descent. By feeding sufficient data into deep neural networks, it is often possible to learn better representations than handcrafted features [11]. These successes motivate our approach to reinforcement learning. Our goal is to connect a reinforcement learning algorithm to a deep neural network which operates directly on RGB images and efficiently process training data by using stochastic gradient updates.\nTesauro\u2019s TD-Gammon architecture provides a starting point for such an approach. This architecture updates the parameters of a network that estimates the value function, directly from on-policy samples of experience, st, at, rt, st+1, at+1, drawn from the algorithm\u2019s interactions with the environment (or by self-play, in the case of backgammon). Since this approach was able to outperform the best human backgammon players 20 years ago, it is natural to wonder whether two decades of hardware improvements, coupled with modern deep neural network architectures and scalable RL algorithms might produce significant progress.\nIn contrast to TD-Gammon and similar online approaches, we utilize a technique known as experience replay [13] where we store the agent\u2019s experiences at each time-step, et = (st, at, rt, st+1) in a data-set D = e1, ..., eN , pooled over many episodes into a replay memory. During the inner loop of the algorithm, we apply Q-learning updates, or minibatch updates, to samples of experience, e \u223c D, drawn at random from the pool of stored samples. After performing experience replay, the agent selects and executes an action according to an -greedy policy. Since using histories of arbitrary length as inputs to a neural network can be difficult, our Q-function instead works on fixed length representation of histories produced by a function \u03c6. The full algorithm, which we call deep Q-learning, is presented in Algorithm 1.\nThis approach has several advantages over standard online Q-learning [23]. First, each step of experience is potentially used in many weight updates, which allows for greater data efficiency.\nAlgorithm 1 Deep Q-learning with Experience Replay Initialize replay memory D to capacity N Initialize action-value function Q with random weights for episode = 1,M do\nInitialise sequence s1 = {x1} and preprocessed sequenced \u03c61 = \u03c6(s1) for t = 1, T do\nWith probability select a random action at otherwise select at = maxaQ\u2217(\u03c6(st), a; \u03b8) Execute action at in emulator and observe reward rt and image xt+1 Set st+1 = st, at, xt+1 and preprocess \u03c6t+1 = \u03c6(st+1) Store transition (\u03c6t, at, rt, \u03c6t+1) in D Sample random minibatch of transitions (\u03c6j , aj , rj , \u03c6j+1) from D\nSet yj = { rj for terminal \u03c6j+1 rj + \u03b3maxa\u2032 Q(\u03c6j+1, a\n\u2032; \u03b8) for non-terminal \u03c6j+1 Perform a gradient descent step on (yj \u2212Q(\u03c6j , aj ; \u03b8))2 according to equation 3\nend for end for\nSecond, learning directly from consecutive samples is inefficient, due to the strong correlations between the samples; randomizing the samples breaks these correlations and therefore reduces the variance of the updates. Third, when learning on-policy the current parameters determine the next data sample that the parameters are trained on. For example, if the maximizing action is to move left then the training samples will be dominated by samples from the left-hand side; if the maximizing action then switches to the right then the training distribution will also switch. It is easy to see how unwanted feedback loops may arise and the parameters could get stuck in a poor local minimum, or even diverge catastrophically [25]. By using experience replay the behavior distribution is averaged over many of its previous states, smoothing out learning and avoiding oscillations or divergence in the parameters. Note that when learning by experience replay, it is necessary to learn off-policy (because our current parameters are different to those used to generate the sample), which motivates the choice of Q-learning.\nIn practice, our algorithm only stores the lastN experience tuples in the replay memory, and samples uniformly at random from D when performing updates. This approach is in some respects limited since the memory buffer does not differentiate important transitions and always overwrites with recent transitions due to the finite memory size N . Similarly, the uniform sampling gives equal importance to all transitions in the replay memory. A more sophisticated sampling strategy might emphasize transitions from which we can learn the most, similar to prioritized sweeping [17]."}, {"heading": "4.1 Preprocessing and Model Architecture", "text": "Working directly with raw Atari frames, which are 210\u00d7 160 pixel images with a 128 color palette, can be computationally demanding, so we apply a basic preprocessing step aimed at reducing the input dimensionality. The raw frames are preprocessed by first converting their RGB representation to gray-scale and down-sampling it to a 110\u00d784 image. The final input representation is obtained by cropping an 84\u00d7 84 region of the image that roughly captures the playing area. The final cropping stage is only required because we use the GPU implementation of 2D convolutions from [11], which expects square inputs. For the experiments in this paper, the function \u03c6 from algorithm 1 applies this preprocessing to the last 4 frames of a history and stacks them to produce the input to theQ-function.\nThere are several possible ways of parameterizing Q using a neural network. Since Q maps historyaction pairs to scalar estimates of their Q-value, the history and the action have been used as inputs to the neural network by some previous approaches [20, 12]. The main drawback of this type of architecture is that a separate forward pass is required to compute the Q-value of each action, resulting in a cost that scales linearly with the number of actions. We instead use an architecture in which there is a separate output unit for each possible action, and only the state representation is an input to the neural network. The outputs correspond to the predicted Q-values of the individual action for the input state. The main advantage of this type of architecture is the ability to compute Q-values for all possible actions in a given state with only a single forward pass through the network.\nWe now describe the exact architecture used for all seven Atari games. The input to the neural network consists is an 84\u00d7 84\u00d7 4 image produced by \u03c6. The first hidden layer convolves 16 8\u00d7 8 filters with stride 4 with the input image and applies a rectifier nonlinearity [10, 18]. The second hidden layer convolves 32 4\u00d7 4 filters with stride 2, again followed by a rectifier nonlinearity. The final hidden layer is fully-connected and consists of 256 rectifier units. The output layer is a fullyconnected linear layer with a single output for each valid action. The number of valid actions varied between 4 and 18 on the games we considered. We refer to convolutional networks trained with our approach as Deep Q-Networks (DQN)."}, {"heading": "5 Experiments", "text": "So far, we have performed experiments on seven popular ATARI games \u2013 Beam Rider, Breakout, Enduro, Pong, Q*bert, Seaquest, Space Invaders. We use the same network architecture, learning algorithm and hyperparameters settings across all seven games, showing that our approach is robust enough to work on a variety of games without incorporating game-specific information. While we evaluated our agents on the real and unmodified games, we made one change to the reward structure of the games during training only. Since the scale of scores varies greatly from game to game, we fixed all positive rewards to be 1 and all negative rewards to be \u22121, leaving 0 rewards unchanged. Clipping the rewards in this manner limits the scale of the error derivatives and makes it easier to use the same learning rate across multiple games. At the same time, it could affect the performance of our agent since it cannot differentiate between rewards of different magnitude.\nIn these experiments, we used the RMSProp algorithm with minibatches of size 32. The behavior policy during training was -greedy with annealed linearly from 1 to 0.1 over the first million frames, and fixed at 0.1 thereafter. We trained for a total of 10 million frames and used a replay memory of one million most recent frames.\nFollowing previous approaches to playing Atari games, we also use a simple frame-skipping technique [3]. More precisely, the agent sees and selects actions on every kth frame instead of every frame, and its last action is repeated on skipped frames. Since running the emulator forward for one step requires much less computation than having the agent select an action, this technique allows the agent to play roughly k times more games without significantly increasing the runtime. We use k = 4 for all games except Space Invaders where we noticed that using k = 4 makes the lasers invisible because of the period at which they blink. We used k = 3 to make the lasers visible and this change was the only difference in hyperparameter values between any of the games."}, {"heading": "5.1 Training and Stability", "text": "In supervised learning, one can easily track the performance of a model during training by evaluating it on the training and validation sets. In reinforcement learning, however, accurately evaluating the progress of an agent during training can be challenging. Since our evaluation metric, as suggested by [3], is the total reward the agent collects in an episode or game averaged over a number of games, we periodically compute it during training. The average total reward metric tends to be very noisy because small changes to the weights of a policy can lead to large changes in the distribution of states the policy visits . The leftmost two plots in figure 2 show how the average total reward evolves during training on the games Seaquest and Breakout. Both averaged reward plots are indeed quite noisy, giving one the impression that the learning algorithm is not making steady progress. Another, more stable, metric is the policy\u2019s estimated action-value function Q, which provides an estimate of how much discounted reward the agent can obtain by following its policy from any given state. We collect a fixed set of states by running a random policy before training starts and track the average of the maximum2 predicted Q for these states. The two rightmost plots in figure 2 show that average predicted Q increases much more smoothly than the average total reward obtained by the agent and plotting the same metrics on the other five games produces similarly smooth curves. In addition to seeing relatively smooth improvement to predicted Q during training we did not experience any divergence issues in any of our experiments. This suggests that, despite lacking any theoretical convergence guarantees, our method is able to train large neural networks using a reinforcement learning signal and stochastic gradient descent in a stable manner.\n2The maximum for each state is taken over the possible actions."}, {"heading": "5.2 Visualizing the Value Function", "text": "Figure 3 shows a visualization of the learned value function on the game Seaquest. The figure shows that the predicted value jumps after an enemy appears on the left of the screen (point A). The agent then fires a torpedo at the enemy and the predicted value peaks as the torpedo is about to hit the enemy (point B). Finally, the value falls to roughly its original value after the enemy disappears (point C). Figure 3 demonstrates that our method is able to learn how the value function evolves for a reasonably complex sequence of events."}, {"heading": "5.3 Main Evaluation", "text": "We compare our results with the best performing methods from the RL literature [3, 4]. The method labeled Sarsa used the Sarsa algorithm to learn linear policies on several different feature sets handengineered for the Atari task and we report the score for the best performing feature set [3]. Contingency used the same basic approach as Sarsa but augmented the feature sets with a learned representation of the parts of the screen that are under the agent\u2019s control [4]. Note that both of these methods incorporate significant prior knowledge about the visual problem by using background subtraction and treating each of the 128 colors as a separate channel. Since many of the Atari games use one distinct color for each type of object, treating each color as a separate channel can be similar to producing a separate binary map encoding the presence of each object type. In contrast, our agents only receive the raw RGB screenshots as input and must learn to detect objects on their own.\nIn addition to the learned agents, we also report scores for an expert human game player and a policy that selects actions uniformly at random. The human performance is the median reward achieved after around two hours of playing each game. Note that our reported human scores are much higher than the ones in Bellemare et al. [3]. For the learned methods, we follow the evaluation strategy used in Bellemare et al. [3, 5] and report the average score obtained by running an -greedy policy with = 0.05 for a fixed number of steps. The first five rows of table 1 show the per-game average scores on all games. Our approach (labeled DQN) outperforms the other learning methods by a substantial margin on all seven games despite incorporating almost no prior knowledge about the inputs.\nWe also include a comparison to the evolutionary policy search approach from [8] in the last three rows of table 1. We report two sets of results for this method. The HNeat Best score reflects the results obtained by using a hand-engineered object detector algorithm that outputs the locations and\ntypes of objects on the Atari screen. The HNeat Pixel score is obtained by using the special 8 color channel representation of the Atari emulator that represents an object label map at each channel. This method relies heavily on finding a deterministic sequence of states that represents a successful exploit. It is unlikely that strategies learnt in this way will generalize to random perturbations; therefore the algorithm was only evaluated on the highest scoring single episode. In contrast, our algorithm is evaluated on -greedy control sequences, and must therefore generalize across a wide variety of possible situations. Nevertheless, we show that on all the games, except Space Invaders, not only our max evaluation results (row 8), but also our average results (row 4) achieve better performance.\nFinally, we show that our method achieves better performance than an expert human player on Breakout, Enduro and Pong and it achieves close to human performance on Beam Rider. The games Q*bert, Seaquest, Space Invaders, on which we are far from human performance, are more challenging because they require the network to find a strategy that extends over long time scales."}, {"heading": "6 Conclusion", "text": "This paper introduced a new deep learning model for reinforcement learning, and demonstrated its ability to master difficult control policies for Atari 2600 computer games, using only raw pixels as input. We also presented a variant of online Q-learning that combines stochastic minibatch updates with experience replay memory to ease the training of deep networks for RL. Our approach gave state-of-the-art results in six of the seven games it was tested on, with no adjustment of the architecture or hyperparameters."}], "references": [{"title": "Residual algorithms: Reinforcement learning with function approximation", "author": ["Leemon Baird"], "venue": "In Proceedings of the 12th International Conference on Machine Learning (ICML", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1995}, {"title": "Sketch-based linear value function approximation", "author": ["Marc Bellemare", "Joel Veness", "Michael Bowling"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "The arcade learning environment: An evaluation platform for general agents", "author": ["Marc G Bellemare", "Yavar Naddaf", "Joel Veness", "Michael Bowling"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Investigating contingency awareness using atari 2600 games", "author": ["Marc G Bellemare", "Joel Veness", "Michael Bowling"], "venue": "In AAAI,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Bayesian learning of recursively factored environments", "author": ["Marc G. Bellemare", "Joel Veness", "Michael Bowling"], "venue": "In Proceedings of the Thirtieth International Conference on Machine Learning (ICML", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Context-dependent pre-trained deep neural networks for large-vocabulary speech recognition. Audio, Speech, and Language Processing", "author": ["George E. Dahl", "Dong Yu", "Li Deng", "Alex Acero"], "venue": "IEEE Transactions on,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alex Graves", "Abdel-rahman Mohamed", "Geoffrey E. Hinton"], "venue": "In Proc. ICASSP,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "A neuro-evolution approach to general atari game playing", "author": ["Matthew Hausknecht", "Risto Miikkulainen", "Peter Stone"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Actor-critic reinforcement learning with energy-based policies", "author": ["Nicolas Heess", "David Silver", "Yee Whye Teh"], "venue": "In European Workshop on Reinforcement Learning,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "What is the best multi-stage architecture for object recognition", "author": ["Kevin Jarrett", "Koray Kavukcuoglu", "MarcAurelio Ranzato", "Yann LeCun"], "venue": "In Proc. International Conference on Computer Vision and Pattern Recognition (CVPR", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoff Hinton"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Deep auto-encoder neural networks in reinforcement learning", "author": ["Sascha Lange", "Martin Riedmiller"], "venue": "In Neural Networks (IJCNN), The 2010 International Joint Conference on,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Reinforcement learning for robots using neural networks", "author": ["Long-Ji Lin"], "venue": "Technical report, DTIC Document,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1993}, {"title": "Convergent Temporal-Difference Learning with Arbitrary Smooth Function Approximation", "author": ["Hamid Maei", "Csaba Szepesvari", "Shalabh Bhatnagar", "Doina Precup", "David Silver", "Rich Sutton"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}, {"title": "Toward off-policy learning control with function approximation", "author": ["Hamid Maei", "Csaba Szepesv\u00e1ri", "Shalabh Bhatnagar", "Richard S. Sutton"], "venue": "In Proceedings of the 27th International Conference on Machine Learning (ICML", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2010}, {"title": "Machine Learning for Aerial Image Labeling", "author": ["Volodymyr Mnih"], "venue": "PhD thesis, University of Toronto,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Prioritized sweeping: Reinforcement learning with less data and less real time", "author": ["Andrew Moore", "Chris Atkeson"], "venue": "Machine Learning,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1993}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Vinod Nair", "Geoffrey E Hinton"], "venue": "In Proceedings of the 27th International Conference on Machine Learning (ICML", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2010}, {"title": "Why did td-gammon work", "author": ["Jordan B. Pollack", "Alan D. Blair"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1996}, {"title": "Neural fitted q iteration\u2013first experiences with a data efficient neural reinforcement learning method", "author": ["Martin Riedmiller"], "venue": "In Machine Learning: ECML", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2005}, {"title": "Reinforcement learning with factored states and actions", "author": ["Brian Sallans", "Geoffrey E. Hinton"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2004}, {"title": "Pedestrian detection with unsupervised multi-stage feature learning", "author": ["Pierre Sermanet", "Koray Kavukcuoglu", "Soumith Chintala", "Yann LeCun"], "venue": "In Proc. International Conference on Computer Vision and Pattern Recognition", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Reinforcement Learning: An Introduction", "author": ["Richard Sutton", "Andrew Barto"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1998}, {"title": "Temporal difference learning and td-gammon", "author": ["Gerald Tesauro"], "venue": "Communications of the ACM,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1995}, {"title": "An analysis of temporal-difference learning with function approximation", "author": ["John N Tsitsiklis", "Benjamin Van Roy"], "venue": "Automatic Control, IEEE Transactions on,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1997}], "referenceMentions": [{"referenceID": 10, "context": "Recent advances in deep learning have made it possible to extract high-level features from raw sensory data, leading to breakthroughs in computer vision [11, 22, 16] and speech recognition [6, 7].", "startOffset": 153, "endOffset": 165}, {"referenceID": 21, "context": "Recent advances in deep learning have made it possible to extract high-level features from raw sensory data, leading to breakthroughs in computer vision [11, 22, 16] and speech recognition [6, 7].", "startOffset": 153, "endOffset": 165}, {"referenceID": 15, "context": "Recent advances in deep learning have made it possible to extract high-level features from raw sensory data, leading to breakthroughs in computer vision [11, 22, 16] and speech recognition [6, 7].", "startOffset": 153, "endOffset": 165}, {"referenceID": 5, "context": "Recent advances in deep learning have made it possible to extract high-level features from raw sensory data, leading to breakthroughs in computer vision [11, 22, 16] and speech recognition [6, 7].", "startOffset": 189, "endOffset": 195}, {"referenceID": 6, "context": "Recent advances in deep learning have made it possible to extract high-level features from raw sensory data, leading to breakthroughs in computer vision [11, 22, 16] and speech recognition [6, 7].", "startOffset": 189, "endOffset": 195}, {"referenceID": 12, "context": "an experience replay mechanism [13] which randomly samples previous transitions, and thereby smooths the training distribution over many past behaviors.", "startOffset": 31, "endOffset": 35}, {"referenceID": 2, "context": "We apply our approach to a range of Atari 2600 games implemented in The Arcade Learning Environment (ALE) [3].", "startOffset": 106, "endOffset": 109}, {"referenceID": 22, "context": "Such value iteration algorithms converge to the optimal actionvalue function, Qi \u2192 Q\u2217 as i \u2192 \u221e [23].", "startOffset": 95, "endOffset": 99}, {"referenceID": 23, "context": "Perhaps the best-known success story of reinforcement learning is TD-gammon, a backgammonplaying program which learnt entirely by reinforcement learning and self-play, and achieved a superhuman level of play [24].", "startOffset": 208, "endOffset": 212}, {"referenceID": 18, "context": "This led to a widespread belief that the TD-gammon approach was a special case that only worked in backgammon, perhaps because the stochasticity in the dice rolls helps explore the state space and also makes the value function particularly smooth [19].", "startOffset": 247, "endOffset": 251}, {"referenceID": 24, "context": "Furthermore, it was shown that combining model-free reinforcement learning algorithms such as Qlearning with non-linear function approximators [25], or indeed with off-policy learning [1] could cause the Q-network to diverge.", "startOffset": 143, "endOffset": 147}, {"referenceID": 0, "context": "Furthermore, it was shown that combining model-free reinforcement learning algorithms such as Qlearning with non-linear function approximators [25], or indeed with off-policy learning [1] could cause the Q-network to diverge.", "startOffset": 184, "endOffset": 187}, {"referenceID": 24, "context": "Subsequently, the majority of work in reinforcement learning focused on linear function approximators with better convergence guarantees [25].", "startOffset": 137, "endOffset": 141}, {"referenceID": 20, "context": "Deep neural networks have been used to estimate the environment E ; restricted Boltzmann machines have been used to estimate the value function [21]; or the policy [9].", "startOffset": 144, "endOffset": 148}, {"referenceID": 8, "context": "Deep neural networks have been used to estimate the environment E ; restricted Boltzmann machines have been used to estimate the value function [21]; or the policy [9].", "startOffset": 164, "endOffset": 167}, {"referenceID": 13, "context": "These methods are proven to converge when evaluating a fixed policy with a nonlinear function approximator [14]; or when learning a control policy with linear function approximation using a restricted variant of Q-learning [15].", "startOffset": 107, "endOffset": 111}, {"referenceID": 14, "context": "These methods are proven to converge when evaluating a fixed policy with a nonlinear function approximator [14]; or when learning a control policy with linear function approximation using a restricted variant of Q-learning [15].", "startOffset": 223, "endOffset": 227}, {"referenceID": 19, "context": "Perhaps the most similar prior work to our own approach is neural fitted Q-learning (NFQ) [20].", "startOffset": 90, "endOffset": 94}, {"referenceID": 11, "context": "NFQ has also been successfully applied to simple real-world control tasks using purely visual input, by first using deep autoencoders to learn a low dimensional representation of the task, and then applying NFQ to this representation [12].", "startOffset": 234, "endOffset": 238}, {"referenceID": 12, "context": "Q-learning has also previously been combined with experience replay and a simple neural network [13], but again starting with a low-dimensional state rather than raw visual inputs.", "startOffset": 96, "endOffset": 100}, {"referenceID": 2, "context": "The use of the Atari 2600 emulator as a reinforcement learning platform was introduced by [3], who applied standard reinforcement learning algorithms with linear function approximation and generic visual features.", "startOffset": 90, "endOffset": 93}, {"referenceID": 1, "context": "Subsequently, results were improved by using a larger number of features, and using tug-of-war hashing to randomly project the features into a lower-dimensional space [2].", "startOffset": 167, "endOffset": 170}, {"referenceID": 7, "context": "The HyperNEAT evolutionary architecture [8] has also been applied to the Atari platform, where it was used to evolve (separately, for each distinct game) a neural network representing a strategy for that game.", "startOffset": 40, "endOffset": 43}, {"referenceID": 10, "context": "By feeding sufficient data into deep neural networks, it is often possible to learn better representations than handcrafted features [11].", "startOffset": 133, "endOffset": 137}, {"referenceID": 12, "context": "In contrast to TD-Gammon and similar online approaches, we utilize a technique known as experience replay [13] where we store the agent\u2019s experiences at each time-step, et = (st, at, rt, st+1) in a data-set D = e1, .", "startOffset": 106, "endOffset": 110}, {"referenceID": 22, "context": "This approach has several advantages over standard online Q-learning [23].", "startOffset": 69, "endOffset": 73}, {"referenceID": 24, "context": "It is easy to see how unwanted feedback loops may arise and the parameters could get stuck in a poor local minimum, or even diverge catastrophically [25].", "startOffset": 149, "endOffset": 153}, {"referenceID": 16, "context": "A more sophisticated sampling strategy might emphasize transitions from which we can learn the most, similar to prioritized sweeping [17].", "startOffset": 133, "endOffset": 137}, {"referenceID": 10, "context": "The final cropping stage is only required because we use the GPU implementation of 2D convolutions from [11], which expects square inputs.", "startOffset": 104, "endOffset": 108}, {"referenceID": 19, "context": "Since Q maps historyaction pairs to scalar estimates of their Q-value, the history and the action have been used as inputs to the neural network by some previous approaches [20, 12].", "startOffset": 173, "endOffset": 181}, {"referenceID": 11, "context": "Since Q maps historyaction pairs to scalar estimates of their Q-value, the history and the action have been used as inputs to the neural network by some previous approaches [20, 12].", "startOffset": 173, "endOffset": 181}, {"referenceID": 9, "context": "The first hidden layer convolves 16 8\u00d7 8 filters with stride 4 with the input image and applies a rectifier nonlinearity [10, 18].", "startOffset": 121, "endOffset": 129}, {"referenceID": 17, "context": "The first hidden layer convolves 16 8\u00d7 8 filters with stride 4 with the input image and applies a rectifier nonlinearity [10, 18].", "startOffset": 121, "endOffset": 129}, {"referenceID": 2, "context": "Following previous approaches to playing Atari games, we also use a simple frame-skipping technique [3].", "startOffset": 100, "endOffset": 103}, {"referenceID": 2, "context": "Since our evaluation metric, as suggested by [3], is the total reward the agent collects in an episode or game averaged over a number of games, we periodically compute it during training.", "startOffset": 45, "endOffset": 48}, {"referenceID": 2, "context": "We compare our results with the best performing methods from the RL literature [3, 4].", "startOffset": 79, "endOffset": 85}, {"referenceID": 3, "context": "We compare our results with the best performing methods from the RL literature [3, 4].", "startOffset": 79, "endOffset": 85}, {"referenceID": 2, "context": "The method labeled Sarsa used the Sarsa algorithm to learn linear policies on several different feature sets handengineered for the Atari task and we report the score for the best performing feature set [3].", "startOffset": 203, "endOffset": 206}, {"referenceID": 3, "context": "Contingency used the same basic approach as Sarsa but augmented the feature sets with a learned representation of the parts of the screen that are under the agent\u2019s control [4].", "startOffset": 173, "endOffset": 176}, {"referenceID": 2, "context": "[3].", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3, 5] and report the average score obtained by running an -greedy policy with = 0.", "startOffset": 0, "endOffset": 6}, {"referenceID": 4, "context": "[3, 5] and report the average score obtained by running an -greedy policy with = 0.", "startOffset": 0, "endOffset": 6}, {"referenceID": 7, "context": "We also include a comparison to the evolutionary policy search approach from [8] in the last three rows of table 1.", "startOffset": 77, "endOffset": 80}, {"referenceID": 2, "context": "4 157 110 179 Sarsa [3] 996 5.", "startOffset": 20, "endOffset": 23}, {"referenceID": 3, "context": "2 129 \u221219 614 665 271 Contingency [4] 1743 6 159 \u221217 960 723 268 DQN 4092 168 470 20 1952 1705 581 Human 7456 31 368 \u22123 18900 28010 3690 HNeat Best [8] 3616 52 106 19 1800 920 1720 HNeat Pixel [8] 1332 4 91 \u221216 1325 800 1145 DQN Best 5184 225 661 21 4500 1740 1075", "startOffset": 34, "endOffset": 37}, {"referenceID": 7, "context": "2 129 \u221219 614 665 271 Contingency [4] 1743 6 159 \u221217 960 723 268 DQN 4092 168 470 20 1952 1705 581 Human 7456 31 368 \u22123 18900 28010 3690 HNeat Best [8] 3616 52 106 19 1800 920 1720 HNeat Pixel [8] 1332 4 91 \u221216 1325 800 1145 DQN Best 5184 225 661 21 4500 1740 1075", "startOffset": 148, "endOffset": 151}, {"referenceID": 7, "context": "2 129 \u221219 614 665 271 Contingency [4] 1743 6 159 \u221217 960 723 268 DQN 4092 168 470 20 1952 1705 581 Human 7456 31 368 \u22123 18900 28010 3690 HNeat Best [8] 3616 52 106 19 1800 920 1720 HNeat Pixel [8] 1332 4 91 \u221216 1325 800 1145 DQN Best 5184 225 661 21 4500 1740 1075", "startOffset": 193, "endOffset": 196}], "year": 2013, "abstractText": "We present the first deep learning model to successfully learn control policies directly from high-dimensional sensory input using reinforcement learning. The model is a convolutional neural network, trained with a variant of Q-learning, whose input is raw pixels and whose output is a value function estimating future rewards. We apply our method to seven Atari 2600 games from the Arcade Learning Environment, with no adjustment of the architecture or learning algorithm. We find that it outperforms all previous approaches on six of the games and surpasses a human expert on three of them.", "creator": "LaTeX with hyperref package"}}}