{"id": "1312.6199", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Dec-2013", "title": "Intriguing properties of neural networks", "abstract": "Deep spinal advertisers can highly expressive conventional come none recently reaching north of the galleries play and questions with cognition shown essential. While rather expressiveness is where reason they himself, it once causes them because learn uninterpretable functionality that could while counter - effortless properties. In this it we quoted two primarily larger.", "histories": [["v1", "Sat, 21 Dec 2013 03:36:08 GMT  (9313kb,D)", "http://arxiv.org/abs/1312.6199v1", null], ["v2", "Fri, 3 Jan 2014 04:37:34 GMT  (9312kb,D)", "http://arxiv.org/abs/1312.6199v2", null], ["v3", "Thu, 13 Feb 2014 17:40:08 GMT  (9313kb,D)", "http://arxiv.org/abs/1312.6199v3", null], ["v4", "Wed, 19 Feb 2014 16:33:14 GMT  (9313kb,D)", "http://arxiv.org/abs/1312.6199v4", null]], "reviews": [], "SUBJECTS": "cs.CV cs.LG cs.NE", "authors": ["christian szegedy", "wojciech zaremba", "ilya sutskever", "joan bruna", "dumitru erhan", "ian goodfellow", "rob fergus"], "accepted": true, "id": "1312.6199"}, "pdf": {"name": "1312.6199.pdf", "metadata": {"source": "CRF", "title": "Intriguing properties of neural networks", "authors": ["Christian Szegedy", "Wojciech Zaremba", "Ilya Sutskever"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Deep neural networks are powerful learning models that achieve excellent performance on visual and speech recognition problems [9, 8]. Neural networks achieve high performance because they can express arbitrary computation that consists of a modest number of massively parallel nonlinear steps. But as the resulting computation is automatically discovered by backpropagation via supervised learning, it can be difficult to interpret and can have counter-intuitive properties. In this paper, we discuss two counter-intuitive properties of deep neural networks.\nThe first property is concerned with the semantic meaning of individual units. Previous works [6, 13, 7] analyzed the semantic meaning of various units by finding the set of inputs that maximally activate a given unit. The inspection of individual units makes the implicit assumption that the units of the last feature layer form a distinguished basis which is particularly useful for extracting semantic information. Instead, we show in section 3 that random projections of \u03c6(x) are semantically indistinguishable from the coordinates of \u03c6(x). Moreover, this puts into question the conjecture that neural networks disentangle variation factors across coordinates. Generally, it seems that it is the entire space of activations, rather than the individual units, that contains the bulk of the semantic information. A similar, but even stronger conclusion was reached recently by Mikolov et al. [12] for word representations, where the various directions in the vector space representing the words are shown to give rise to a surprisingly rich semantic encoding of relations and analogies. At the same\nar X\niv :1\n31 2.\n61 99\nv1 [\ncs .C\nV ]\n2 1\nD ec\ntime, the vector representations are well-defined up to a rotation of the space, so the individual units of the vector representations are unlikely to contain semantic information.\nThe second property is concerned with the stability of neural networks with respect to small perturbations to their inputs. Consider a state-of-the-art deep neural network that generalizes well on an object recognition task. We expect such network to be robust to small perturbations of its input, because small perturbation cannot change the object category of an image. However, we find that applying an imperceptible non-random perturbation to a test image, it is possible to arbitrarily change the network\u2019s prediction (see figure 5). These perturbations are found by optimizing the input to maximize the prediction error. We term the so perturbed examples \u201cadversarial examples\u201d.\nIt is natural to expect that the precise configuration of the minimal necessary perturbations is a random artifact of the normal variability that arises in different runs of backpropagation learning. Yet, we found that adversarial examples are relatively robust, and are shared by neural networks with varied number of layers, activations or trained on different subsets of the training data. That is, if we use one neural to generate a set of adversarial examples, we find that these examples are still statistically hard for another neural network even when it was trained with different hyperparemeters or, most surprisingly, when it was trained on a different set of examples.\nThese results suggest that the deep neural networks that are learned by backpropagation have nonintuitive characteristics and intrinsic blind spots, whose structure is connected to the data distribution in a non-obvious way."}, {"heading": "2 Framework", "text": "Notation We denote by x \u2208 Rm an input image, and \u03c6(x) activations values of some layer. We first examine properties of the image of \u03c6(x), and then we search for its blind spots.\nWe perform a number of experiments on a few different networks and three datasets :\n\u2022 For the MNIST dataset, we used the following architectures [11] \u2013 A simple fully connected, single layer network with a softmax classifier on top of it.\nWe refer to this network as \u201csoftmax\u201d. \u2013 A simple fully connected network with two hidden layers and a classifier. We refer to\nthis network as \u201cFC\u201d. \u2013 A classifier trained on top of autoencoder. We refer to this network as \u201cAE\u201d. \u2013 A standard convolutional network that achieves good performance on this dataset:\nit has one convolution layer, followed by max pooling layer, fully connected layer, dropout layer, and final softmax classifier. Referred to as \u201cConv\u201d.\n\u2022 The ImageNet dataset [3]. \u2013 Krizhevsky et. al architecture [9]. We refer to it as \u201cAlexNet\u201d.\n\u2022 \u223c 10M image samples from Youtube (see [10]) \u2013 Unsupervised trained network with \u223c 1 billion learnable parameters. We refer to it as\n\u201cQuocNet\u201d.\nFor the MNIST experiments, we use regularization with a weight decay of \u03bb. Moreover, in some experiments we split the MNIST training dataset into two disjoint datasets P1, and P2, each with 30000 training cases."}, {"heading": "3 Units of: \u03c6(x)", "text": "Traditional computer vision systems rely on feature extraction: often a single feature is easily interpretable, e.g. a histogram of colors, or quantized local derivatives. This allows one to inspect the individual coordinates of the feature space, and link them back to meaningful variations in the input domain. Similar reasoning was used in previous work that attempted to analyze neural networks that were applied to computer vision problems. These works interpret an activation of a hidden unit as a meaningful feature. They look for input images which maximize the activation value of this single feature [6, 13, 7, 4].\nThe aforementioned technique can be formally stated as visual inspection of images x\u2032, which satisfy (or are close to maximum attainable value):\nx\u2032 = arg max x\u2208image set \u3008\u03c6(x), ei\u3009\nHowever, our experiments show that any random direction v \u2208 Rn gives rise to similarly interpretable semantic properties. More formally, that maximize the activations in a random direction are also semantically related.\nx\u2032 = arg max x\u2208image set \u3008\u03c6(x), v\u3009\nThis suggest that the natural basis is not better than a random basis in for inspecting the properties of \u03c6(x). Moreover, it puts into question the notion that neural networks disentangle variation factors across coordinates.\nFirst, we evaluated the above claim using a convolutional neural network trained on MNIST. For the \u201dimage set\u201d we used test set. Figure 1 shows images that maximize the activations in the natural basis, and Figure 2 shows images that maximize the activation in random directions. In both cases the resulting images share many high-level similarities.\nNext, we repeated our experiment on an AlexNet, where we used the validation set for the \u201dimage set\u201d. Figures 3 and 4 compare the natural basis to the random basis on the trained network. The rows appear to be semantically meaningful for both the single unit and the combination of units.\nAlthough such analysis gives insight on the capacity of \u03c6 to generate invariance on a particular subset of the input distribution, it does not explain the behavior on the rest of its domain. We shall see in the next section that \u03c6 has counterintuitive properties in the neighbourhood of almost every point form data distribution."}, {"heading": "4 Blind Spots in Neural Networks", "text": "So far, unit-level inspection methods had relatively little utility beyond confirming certain intuitions regarding the complexity of the representations learned by a deep neural network [6, 13, 7, 4]. Global, network level inspection methods can be useful in the context of explaining classification\ndecisions made by a model [1] and can be used to, for instance, identify the parts of the input which led to a correct classification of a given visual input instance (in other words, one can use a trained model for weakly-supervised localization). Such global analyses are useful in that they can make us understand better the input-to-output mapping represented by the trained network.\nGenerally speaking, the output layer unit of a neural network is a highly nonlinear function of its input. When it is trained with the cross-entropy loss (using the softmax activation function), it represents a conditional distribution of the label given the input (and the training set presented so far). It has been argued [2] that the deep stack of non-linear layers in between the input and the output unit of a neural network are a way for the model to encode a non-local generalization prior over the input space. In other words, it is possible for the output unit to assign non-significant (and, presumably, non-epsilon) probabilities to regions of the input space that contain no training examples in their vicinity. Such regions can represent, for instance, the same objects from different viewpoints, which are relatively far (in pixel space), but which share nonetheless both the label and the statistical structure of the original inputs.\nIt is implicit in such arguments that local generalization\u2014in the very proximity of the training examples\u2014works as expected. And that in particular, for a small enough radius \u03b5 in the vicinity of a given training input x, an x\u03b5 which satisfies ||x \u2212 x\u03b5|| < \u03b5 will get assigned a high probability of the correct class by the model. This kind of smoothness prior is typically valid for computer vision problems, where imperceptibly tiny perturbations of a given image do not normally change the underlying class.\nOur main result is that for deep neural networks, the smoothness assumption that underlies many kernel methods does not hold. Specifically, we show that by using a simple optimization procedure, we are able to find adversarial examples, which are obtained by imperceptibly small perturbations to a correctly classified input image, so that it is no longer classified correctly. This can never occur with smooth classifiers by their definition.\nIn some sense, what we describe is a way to traverse the manifold represented by the network in an efficient way (by optimization) and finding adversarial examples in the input space. The adversarial\nexamples represent low-probability (high-dimensional) \u201cpockets\u201d in the manifold, which are hard to efficiently find by simply randomly sampling the input around a given example. Already, a variety of recent state of the art computer vision models employ input deformations during training for increasing the robustness and convergence speed of the models [9, 13]. These deformations are, however, statistically inefficient, for a given example: they are highly correlated and are drawn from the same distribution throughout the entire training of the model. We propose a scheme to make this process adaptive in a way that exploits the model and its deficiencies in modeling the local space around the training data.\nWe make the connection with hard-negative mining explicitly, as it is close in spirit: hard-negative mining, in computer vision, consists of identifying training set examples (or portions thereof) which are given low probabilities by the model, but which should be high probability instead, cf. [5]. The training set distribution is then changed to emphasize such hard negatives and a further round of model training is performed. As shall be described, the optimization problem proposed in this work can also be used in a constructive way, similar to the hard-negative mining principle."}, {"heading": "4.1 Formal description", "text": "We denote by f : Rm \u2212\u2192 {1 . . . k} a classifier mapping image pixel value vectors to a discrete label set. We also assume that f has an associated continuous loss function denoted by lossf : Rm \u00d7 {1 . . . k} \u2212\u2192 R+. For a given x \u2208 Rm image and target label l \u2208 {1 . . . k}, we aim to solve the following box-constrained optimization problem:\n\u2022 Minimize \u2016r\u20162 subject to: 1. f(x+ r) = l 2. x+ r \u2208 [0, 1]m\nThe minimizer r might not be unique, but we denote one such x + r for an arbitrarily chosen minimizer by D(x, l). Informally, x + r is the closest image to x classified as l by f . Obviously, D(x, f(x)) = f(x), so this task is non-trivial only if f(x) 6= l. In general, the exact computation of D(x, l) is a hard problem, so we approximate it by using a box-constrained L-BFGS. Concretely, we find an approximation ofD(x, l) by performing line-search to find the minimum c > 0 for which the minimizer r of the following problem satisfies f(x+ r) = l.\n\u2022 Minimize c|r|+ lossf (x+ r, l) subject to x+ r \u2208 [0, 1]m"}, {"heading": "4.2 Experimental results", "text": "Our \u201cminimimum distortion\u201d function D has the following intriguing properties, which we will demonstrate with qualitative and quantitative experiments in this section:\n1. For all the networks we studied (MNIST, QuocNet [10], AlexNet [9]), for each sample, we always manage to generate very close, visually indistinguishable, adversarial examples that are misclassified by the original network (see figure 5 for examples).\n2. Cross model generalization: a relatively large fraction of examples will be misclassified by networks trained from scratch with different hyper-parameters (number of layers, regularization or initial weights).\n3. Cross training-set generalization a relatively large fraction of examples will be misclassified by networks trained from scratch trained on a disjoint training set.\nThe above observations suggest that adversarial examples are somewhat universal and not just the results of overfitting to a particular model or to the specific selection of the training set. They also suggest that back-feeding adversarial examples to training might improve generalization of the resulting models. Our preliminary experiments have yielded positive evidence on MNIST to support this hypothesis as well: We have successfully trained a two layer 100-100-10 non-convolutional neural network with a test error below 1.2% by keeping a pool of adversarial examples a random subset of which is continuously replaced by newly generated adversarial examples and which is mixed into the original training set all the time. For comparison, a network of this size gets to 1.6% errors when regularized by weight decay alone and can be improved to around 1.3% by using carefully applied dropout. A subtle, but essential detail is that adversarial examples are generated for each layer output and are used to train all the layers above. Adversarial examples for the higher layers seem to be more useful than those on the input or lower layers.\nFor space considerations, we just present results for a representative subset (see table 1) of the MNIST experiments we perfomed. The results presented here are consistent with those on a larger variety of non-convolutional models. For MNIST, we do not have results for convolutional models yet, but our first qualitative experiments with AlexNet gives us reason to believe that convolutional networks may behave similarly as well. Each of our models were trained with L-BFGS until convergence. The first three models are linear classifiers that work on the pixel level with various weight decay parameters \u03bb. All our examples use quadratic weight decay on the connection weights: lossdecay = \u03bb \u2211 w2i /k added to the total loss, where k is the number of units in the layer. One of the models is trained with extremely high \u03bb = 1 in order to test whether it is still possible to generate adversarial examples in this extreme setting as well. Two other models are a simple sigmoidal neural network with two hidden layers and a classifier. The last model consists of a single layer sparse autoencoder with sigmoid activations and 400 nodes with a softmax classifier. This network has been trained until it got very high quality first layer filters and this layer was not fine-tuned. The last column measures the minimum average pixel level distortion necessary to reach 0% accuracy\non the training set. The distortion is measure by \u221a\u2211\n(x\u2032i\u2212xi)2 n between the original x and distorted\nx\u2032 images, where n = 784 is the number of image pixels. The pixel intensities are scaled to be in the range [0, 1].\nIn our first experiment, we generate a set of adversarial instances for a given network and feed these examples for each other network to measure the ratio of misclassified instances. The last column shows the average minimum distortion that was necessary to reach 0% accuracy on the whole training set. The experimental results are presented in table 2. The columns of the table show the error (ratio of disclassified instances) on the so distorted training sets. The last two rows are special and show the error induced when distorting by Gaussian noise. Note that even the noise\nwith stddev 0.1 is greater than the stddev of our adversarial noise for all but one of the models. Figure 7 shows a visualization of the generated adversarial instances for two of the networks used in this experiment The general conclusion is that adversarial examples tend to stay hard even for models trained with different hyperparameters. Although the autoencoder based version seems most resilient to adversarial examples, it is not fully immune either.\nStill, this experiment leaves open the question of dependence over the training set. Does the hardness of the generated examples rely solely on the particular choice of our training set as a sample or does this effect generalize even to models trained on completely different training sets?\nTo study cross-training-set generalization, we have partitioned the 60000 MNIST training images into two parts P1 and P2 of size 30000 each and trained three non-convolutional networks with\nsigmoid activations on them: Two, M1 and M \u20321, on P1 and M2 and P2. The reason we trained two networks for P1 is to study the cumulative effect of changing the hypermarameters and the training sets at the same time. Models M1 and M2 share the same hyperparameters: both of them are 100- 100-10 networks, while M \u20321 is a 123-456-10 network. In this experiment, we were distorting the elements of the test set rather than the training set. Table 3 summarizes the basic facts about these models. After we generate adversarial examples with 100% error rates with minimum distortion for the test set, we feed these examples to the each of the models. The error for each model is displayed in the corresponding column of the upper part of table 4. In the last experiment, we magnify the effect of our distortion by using the examples x + 0.1 x\n\u2032\u2212x \u2016x\u2032\u2212x\u20162 rather than x \u2032. This magnifies the distortion on average by 40%, from stddev 0.06 to 0.1. The so distorted examples are fed back to each of the models and the error rates are displayed in the lower part of table 4. The intriguing conclusion is that the adversarial examples remain hard for models trained even on a disjoint training set, although their effectiveness decreases considerably."}, {"heading": "4.3 Spectral Analysis of Instability", "text": "The previous section showed that the networks resulting from supervised learning are unstable with respect to a particular family of perturbations. The instability is expressed mathematically as a collection of pairs (xi, ni)i such that \u2016ni\u2016 \u2264 \u03b4 but \u2016\u03c6(xi; W ) \u2212 \u03c6(xi + ni; W )\u2016 \u2265 M > 0 for a small value of \u03b4, and for generic values of trainable parameters W . This suggests that the class of unstable perturbations ni depends on the architecture of \u03c6, but does not depend upon the particular training parameters W .\nThe instability of \u03c6(x; W ) can be partly explained by inspecting the upper Lipschitz constant of each layer, defined as Lk > 0 such that \u2200x, x\u2032 , \u2016\u03c6k(x)\u2212 \u03c6k(x\u2032)\u2016 \u2264 Lk\u2016x\u2212 x\u2032\u2016 . The rectified layers (both convolutional or fully connected) are defined by the mapping \u03c6k(x) = max(0,Wkx+ bk). Let \u03bb\u2212(W ) and \u03bb+(W ) denote respectively the lower and upper frame bounds of W (i.e., its lowest and largest singular values). Since max(0, x) is contractive, it results that Lk \u2264 \u2016Wk\u2016 = \u03bb+(Wk). It results that a first measure of the instability of the network can be obtained by simply computing the frame bounds of each of the linear operators. The max-pooling layers are contractive, which implies that they do not increase the upper bounds, although they can decrease the lower bounds. This effect is not considered in the present work.\nIf W denotes a generic 4-tensor convolutional layer with stride \u2206,\nWx =\n{ C\u2211\nc=1\nxc ? wc,f [n1\u2206, n2\u2206] ; f = 1 . . . , F\n} ,\nwhere xc denotes the c input feature image, then one can verify that its operator norm is given by \u2016W\u2016 = sup\n\u03c9 \u2016A(\u03c9)\u2016 ,\nwhere A(\u03c9) is the matrix whose rows are \u2200 f = 1 . . . F , A(\u03c9)f = ( w\u0302c,f (\u03c9 + l\u03c0\u2206 \u22121) ; c = 1 . . . C , l = (0 . . .\u2206\u2212 1)2 ) .\nTable 5 shows the upper and lower bounds computed from the ImageNet deep convolutional network of [9]. It shows that instabilities can appear as soon as in the first convolutional layer."}, {"heading": "5 Discussion", "text": "We demonstrated that deep neural networks have counter-intuitive properties both with respect to the semantic meaning of individual units and with respect to their discontinuities. The existence of the adversarial negatives appears to be in contradiction with the network\u2019s ability to achieve high generalization performance. Indeed, if the network can generalize well, how can it be confused by these adversarial negatives, which are indistinguishable from the regular examples? The explanation is that the set of adversarial negatives is of extremely low probability, and thus is never (or rarely) observed in the test set, yet it is dense (much like the rational numbers, and so it is found near every virtually every test case."}], "references": [{"title": "How to explain individual classification decisions", "author": ["David Baehrens", "Timon Schroeter", "Stefan Harmeling", "Motoaki Kawanabe", "Katja Hansen", "Klaus- Robert M\u00fcller"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "Learning deep architectures for ai", "author": ["Yoshua Bengio"], "venue": "Foundations and trends\u00ae in Machine Learning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Imagenet: A large-scale hierarchical image database", "author": ["Jia Deng", "Wei Dong", "Richard Socher", "Li-Jia Li", "Kai Li", "Li Fei-Fei"], "venue": "In Computer Vision and Pattern Recognition,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Visualizing higher-layer features of a deep network", "author": ["Dumitru Erhan", "Yoshua Bengio", "Aaron Courville", "Pascal Vincent"], "venue": "Technical Report 1341,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "A discriminatively trained, multiscale, deformable part model", "author": ["Pedro Felzenszwalb", "David McAllester", "Deva Ramanan"], "venue": "In Computer Vision and Pattern Recognition,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Rich feature hierarchies for accurate object detection and semantic segmentation", "author": ["Ross Girshick", "Jeff Donahue", "Trevor Darrell", "Jitendra Malik"], "venue": "arXiv preprint arXiv:1311.2524,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Measuring invariances in deep networks", "author": ["Ian Goodfellow", "Quoc Le", "Andrew Saxe", "Honglak Lee", "Andrew Y Ng"], "venue": "Advances in neural information processing systems,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups", "author": ["Geoffrey E. Hinton", "Li Deng", "Dong Yu", "George E. Dahl", "Abdel rahman Mohamed", "Navdeep Jaitly", "Andrew Senior", "Vincent Vanhoucke", "Patrick Nguyen", "Tara N. Sainath", "Brian Kingsbury"], "venue": "IEEE Signal Process. Mag.,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoff Hinton"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Building high-level features using large scale unsupervised learning", "author": ["Quoc V Le", "Marc\u2019Aurelio Ranzato", "Rajat Monga", "Matthieu Devin", "Kai Chen", "Greg S Corrado", "Jeff Dean", "Andrew Y Ng"], "venue": "arXiv preprint arXiv:1112.6209,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "The mnist database of handwritten digits", "author": ["Yann LeCun", "Corinna Cortes"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1998}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "arXiv preprint arXiv:1301.3781,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2013}, {"title": "Visualizing and understanding convolutional neural networks", "author": ["Matthew D Zeiler", "Rob Fergus"], "venue": "arXiv preprint arXiv:1311.2901,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}], "referenceMentions": [{"referenceID": 8, "context": "Deep neural networks are powerful learning models that achieve excellent performance on visual and speech recognition problems [9, 8].", "startOffset": 127, "endOffset": 133}, {"referenceID": 7, "context": "Deep neural networks are powerful learning models that achieve excellent performance on visual and speech recognition problems [9, 8].", "startOffset": 127, "endOffset": 133}, {"referenceID": 5, "context": "Previous works [6, 13, 7] analyzed the semantic meaning of various units by finding the set of inputs that maximally activate a given unit.", "startOffset": 15, "endOffset": 25}, {"referenceID": 12, "context": "Previous works [6, 13, 7] analyzed the semantic meaning of various units by finding the set of inputs that maximally activate a given unit.", "startOffset": 15, "endOffset": 25}, {"referenceID": 6, "context": "Previous works [6, 13, 7] analyzed the semantic meaning of various units by finding the set of inputs that maximally activate a given unit.", "startOffset": 15, "endOffset": 25}, {"referenceID": 11, "context": "[12] for word representations, where the various directions in the vector space representing the words are shown to give rise to a surprisingly rich semantic encoding of relations and analogies.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "\u2022 For the MNIST dataset, we used the following architectures [11] \u2013 A simple fully connected, single layer network with a softmax classifier on top of it.", "startOffset": 61, "endOffset": 65}, {"referenceID": 2, "context": "\u2022 The ImageNet dataset [3].", "startOffset": 23, "endOffset": 26}, {"referenceID": 8, "context": "al architecture [9].", "startOffset": 16, "endOffset": 19}, {"referenceID": 9, "context": "\u2022 \u223c 10M image samples from Youtube (see [10]) \u2013 Unsupervised trained network with \u223c 1 billion learnable parameters.", "startOffset": 40, "endOffset": 44}, {"referenceID": 5, "context": "They look for input images which maximize the activation value of this single feature [6, 13, 7, 4].", "startOffset": 86, "endOffset": 99}, {"referenceID": 12, "context": "They look for input images which maximize the activation value of this single feature [6, 13, 7, 4].", "startOffset": 86, "endOffset": 99}, {"referenceID": 6, "context": "They look for input images which maximize the activation value of this single feature [6, 13, 7, 4].", "startOffset": 86, "endOffset": 99}, {"referenceID": 3, "context": "They look for input images which maximize the activation value of this single feature [6, 13, 7, 4].", "startOffset": 86, "endOffset": 99}, {"referenceID": 5, "context": "So far, unit-level inspection methods had relatively little utility beyond confirming certain intuitions regarding the complexity of the representations learned by a deep neural network [6, 13, 7, 4].", "startOffset": 186, "endOffset": 199}, {"referenceID": 12, "context": "So far, unit-level inspection methods had relatively little utility beyond confirming certain intuitions regarding the complexity of the representations learned by a deep neural network [6, 13, 7, 4].", "startOffset": 186, "endOffset": 199}, {"referenceID": 6, "context": "So far, unit-level inspection methods had relatively little utility beyond confirming certain intuitions regarding the complexity of the representations learned by a deep neural network [6, 13, 7, 4].", "startOffset": 186, "endOffset": 199}, {"referenceID": 3, "context": "So far, unit-level inspection methods had relatively little utility beyond confirming certain intuitions regarding the complexity of the representations learned by a deep neural network [6, 13, 7, 4].", "startOffset": 186, "endOffset": 199}, {"referenceID": 0, "context": "decisions made by a model [1] and can be used to, for instance, identify the parts of the input which led to a correct classification of a given visual input instance (in other words, one can use a trained model for weakly-supervised localization).", "startOffset": 26, "endOffset": 29}, {"referenceID": 1, "context": "It has been argued [2] that the deep stack of non-linear layers in between the input and the output unit of a neural network are a way for the model to encode a non-local generalization prior over the input space.", "startOffset": 19, "endOffset": 22}, {"referenceID": 8, "context": "Figure 5: Adversarial examples generated for AlexNet [9].", "startOffset": 53, "endOffset": 56}, {"referenceID": 8, "context": "Already, a variety of recent state of the art computer vision models employ input deformations during training for increasing the robustness and convergence speed of the models [9, 13].", "startOffset": 177, "endOffset": 184}, {"referenceID": 12, "context": "Already, a variety of recent state of the art computer vision models employ input deformations during training for increasing the robustness and convergence speed of the models [9, 13].", "startOffset": 177, "endOffset": 184}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "x+ r \u2208 [0, 1]", "startOffset": 7, "endOffset": 13}, {"referenceID": 0, "context": "\u2022 Minimize c|r|+ lossf (x+ r, l) subject to x+ r \u2208 [0, 1]", "startOffset": 51, "endOffset": 57}, {"referenceID": 9, "context": "Figure 6: Adversarial examples for QuocNet [10].", "startOffset": 43, "endOffset": 47}, {"referenceID": 9, "context": "For all the networks we studied (MNIST, QuocNet [10], AlexNet [9]), for each sample, we always manage to generate very close, visually indistinguishable, adversarial examples that are misclassified by the original network (see figure 5 for examples).", "startOffset": 48, "endOffset": 52}, {"referenceID": 8, "context": "For all the networks we studied (MNIST, QuocNet [10], AlexNet [9]), for each sample, we always manage to generate very close, visually indistinguishable, adversarial examples that are misclassified by the original network (see figure 5 for examples).", "startOffset": 62, "endOffset": 65}, {"referenceID": 0, "context": "The pixel intensities are scaled to be in the range [0, 1].", "startOffset": 52, "endOffset": 58}, {"referenceID": 8, "context": "Table 5 shows the upper and lower bounds computed from the ImageNet deep convolutional network of [9].", "startOffset": 98, "endOffset": 101}], "year": 2013, "abstractText": "Deep neural networks are highly expressive models that have recently achieved state of the art performance on speech and visual recognition tasks. While their expressiveness is the reason they succeed, it also causes them to learn uninterpretable solutions that could have counter-intuitive properties. In this paper we report two such properties. First, we find that there is no distinction between individual high level units and random linear combinations of high level units, according to various methods of unit analysis. It suggests that it is the space, rather than the individual units, that contains of the semantic information in the high layers of neural networks. Second, we find that deep neural networks learn input-output mappings that are fairly discontinuous to a significant extend. Specifically, we find that we can cause the network to misclassify an image by applying a certain imperceptible perturbation, which is found by maximizing the network\u2019s prediction error. In addition, the specific nature of these perturbations is not a random artifact of learning: the same perturbation can cause a different network, that was trained on a different subset of the dataset, to misclassify the same input.", "creator": "LaTeX with hyperref package"}}}