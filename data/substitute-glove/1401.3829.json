{"id": "1401.3829", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2014", "title": "RoxyBot-06: Stochastic Prediction and Optimization in TAC Travel", "abstract": "In would sheet, we any our autonomous lobbying chapman, RoxyBot, know emerged victorious years by travelling overall mainly though 31 Trading Agent Competition while making cover climb. At goes running technical, two sophisticated of work career trading arrest rather be phrased own current: (i) drops sobering: build a hybrid significant trade prices; more (army) debugging: solve for an approximately outcomes a of bids, given for modeled. To predict, RoxyBot builds taking stochastic features of market declines believed simulate simultaneous diameters auctioneer. To calibrate, RoxyBot furthermore on own normally 2.2 formula_5 variations, close stochastic optimization analytical.", "histories": [["v1", "Thu, 16 Jan 2014 04:47:45 GMT  (354kb)", "http://arxiv.org/abs/1401.3829v1", null]], "reviews": [], "SUBJECTS": "cs.GT cs.LG", "authors": ["amy greenwald", "seong jae lee", "victor naroditskiy"], "accepted": false, "id": "1401.3829"}, "pdf": {"name": "1401.3829.pdf", "metadata": {"source": "CRF", "title": "RoxyBot-06: Stochastic Prediction and Optimization in TAC Travel", "authors": ["Amy Greenwald", "Seong Jae Lee", "Victor Naroditskiy"], "emails": ["amy@cs.brown.edu", "seongjae@u.washington.edu", "vnarodit@cs.brown.edu"], "sections": [{"heading": "1. Introduction", "text": "The annual Trading Agent Competition (TAC) challenges its entrants to design and build autonomous agents capable of effective trading in an online travel1 shopping game. The first TAC, held in Boston in 2000, attracted 16 entrants from six countries in North America, Europe, and Asia. Excitement generated from this event led to refinement of the game rules, and continuation of regular tournaments with increasing levels of competition over the next six years. Year-by-year, entrants improved their designs, developing new ideas and building on previously successful techniques. Since TAC\u2019s inception, the lead author has entered successive modifications of her autonomous trading agent, RoxyBot. This paper reports on RoxyBot-06, the latest incarnation and the top scorer in the TAC-06 tournament.\nThe key feature captured by the TAC travel game is that goods are highly interdependent (e.g., flights and hotels must be coordinated), yet the markets for these goods operate independently. A second important feature of TAC is that agents trade via three different kinds of market mechanisms, each of which presents distinct challenges. Flights are traded in a posted-price environment, where a designated party sets a price that the other parties\n1. There are now four divisions of TAC: Travel, Supply Chain Management (SCM), CAT (TAC backwards), and Ad Auctions (AA). This paper is concerned only with the first; for a description of the others, see the papers by Arunachalam and Sadeh (2005), Cai et al. (2009), Jordan and Wellman (2009), respectively. In this paper, when we say TAC, we mean TAC Travel.\nc\u00a92009 AI Access Foundation. All rights reserved.\nmust \u201ctake or leave.\u201d Hotels are traded in simultaneous ascending auctions, like the FCC spectrum auctions. Entertainment tickets are traded in continuous double auctions, like the New York Stock Exchange. In grappling with all three mechanisms while constructing their agent strategies, participants are confronted by a number of interesting problems.\nThe success of an autonomous trading agent such as a TAC agent often hinges upon the solutions to two key problems: (i) price prediction, in which the agent builds a model of market prices; and (ii) optimization, in which the agent solves for an approximately optimal set of bids, given this model. For example, at the core of RoxyBot\u2019s 2000 architecture (Greenwald & Boyan, 2005) was a deterministic optimization problem, namely how to bid given price predictions in the form of point estimates. In spite of its effectiveness in the TAC-00 tournament, a weakness of the 2000 design was that RoxyBot could not explicitly reason about variance within prices. In the years since 2000, we recast the key challenges faced by TAC agents as several different stochastic bidding problems (see, for example, the paper by Greenwald & Boyan, 2004), whose solutions exploit price predictions in the form of distributions. In spite of our perseverance, RoxyBot fared unimpressively in tournament conditions year after year, until 2006. Half a decade in the laboratory spent searching for bidding heuristics that can exploit stochastic information at reasonable computational expense finally bore fruit, as RoxyBot emerged victorious in TAC-06. In a nutshell, the secret of RoxyBot-06\u2019s success is: (hotel) price prediction by simulating simultaneous ascending auctions, and optimization based on the sample average approximation method. Details of our approach are the subject of the present article.\nOverview This paper is organized as follows. Starting in Section 2, we summarize the TAC market game. Next, in Section 3, we present a high-level view of RoxyBot\u2019s 2006 architecture. In Section 4, we describe RoxyBot\u2019s price prediction techniques for flights, hotels, and entertainment, in turn. Perhaps of greatest interest is our hotel price prediction method. Following Wellman et al. (2005), we predict hotel prices by computing approximate competitive equilibrium prices. Only, instead of computing those prices by running the ta\u0302tonnement process, we simulate simultaneous ascending auctions. Our procedure is simpler to implement than ta\u0302tonnement, yet achieves comparable performance, and runs sufficiently fast. In Section 5, we describe RoxyBot\u2019s optimization technique: sample average approximation. We argue that this approach is optimal in pseudo-auctions, an abstract model of auctions. In Section 6.1, we describe simulation experiments in a controlled testing environment which show that our combined approach\u2014simultaneous ascending auctions for hotel price prediction and sample average approximation for bid optimization\u2014performs well in practice in comparison with other reasonable bidding heuristics. In Section 6.2, we detail the results of the TAC-06 tournament, further validating the success of RoxyBot-06\u2019s strategy, and reporting statistics that shed light on the bidding strategies of other participating agents. Finally, in Section 7, we evaluate the collective behavior of the autonomous agents in the TAC finals since 2002. We find that the accuracy of competitive equilibrium calculations has varied from year to year and is highly dependent on the particular agent pool. Still, generally speaking, the collective appears to be moving toward competitive equilibrium behavior."}, {"heading": "2. TAC Market Game: A Brief Summary", "text": "In this section, we summarize the TAC game. For more details, see http://www.sics.se/ tac/.\nEight agents play the TAC game. Each is a simulated travel agent whose task is to organize itineraries for its clients to travel to and from \u201cTACTown\u201d during a five day (four night) period. In the time allotted (nine minutes), each agent\u2019s objective is to procure travel goods as inexpensively as possible, trading off against the fact that those goods are ultimately compiled into feasible trips that satisfy its client preferences to the greatest extent possible. The agents know the preferences of their own eight clients only, not the other 56.\nTravel goods are sold in simultaneous auctions as follows:\n\u2022 Flight tickets are sold by \u201cTACAir\u201d in dynamic posted-pricing environments. There are flights both to and from TACTown on each applicable day. No resale of flight tickets by agents is permitted.\nFlight price quotes are broadcast by the TAC server every ten seconds.\n\u2022 Hotel reservations are sold by the \u201cTAC seller\u201d in multi-unit ascending call markets. Specifically, 16 hotel reservations are sold in each hotel auction to the 16 highest bidders at the 16th highest price. The TAC seller runs eight hotel auctions, one per night-hotel combination (recall that travel takes place during a four night period; moreover, there are two hotels: a good one and a bad one). No resale of hotel reservations by agents is permitted. Nor is bid withdrawal allowed.\nMore specifically, the eight hotel auctions clear on the minute with exactly one auction closing at each of minutes one through eight. (The precise auction to close is chosen at random, with all open auctions equally likely to be selected.) For the auction that closes, the TAC server broadcasts the final closing price, and informs each agent of its winnings. For the others, the TAC server reports the current ask price, and informs each agent of its \u201chypothetical quantity won\u201d (HQW).\n\u2022 Agents are allocated an initial endowment of entertainment tickets, which they trade among themselves in continuous double auctions (CDAs). There are three entertainment events scheduled each day.\nAlthough the event auctions clear continuously, price quotes are broadcast only every 30 seconds.\nOne of the primary challenges posed by TAC is to design and build autonomous agents that bid effectively on interdependent (i.e., complementary or substitutable) goods that are sold in separate markets. Flight tickets and hotel reservations are complementary because flights are not useful to a client without the corresponding hotel reservations, nor vice versa. Tickets to entertainment events (e.g., the Boston Red Sox and the Boston Symphony Orchestra) are substitutable because a client cannot attend multiple events simultaneously."}, {"heading": "3. RoxyBot-06\u2019s Architecture: A High-Level View", "text": "In our approach to the problem of bidding on interdependent goods in the separate TAC markets, we adopt some simplifying assumptions. Rather than tackle the game-theoretic problem of characterizing strategic equilibria, we focus on a single agent\u2019s (decision-theoretic) problem of optimizing its own bidding behavior, assuming the other agents\u2019 strategies are fixed. In addition, we assume that the environment can be modeled in terms of the agent\u2019s predictions about market clearing prices. These prices serve to summarize the relevant information hidden in other agents\u2019 bidding strategies. These two assumptions\u2014fixed otheragent behaviors and market information encapsulated by prices\u2014support the modular design of RoxyBot-06 and many other successful TAC agents, which consists of two key stages: (i) price prediction; and (ii) optimization.\nThe optimization problem faced by TAC agents is a dynamic one that incorporates aspects of sequentiality as well as simultaneity in auctions. The markets operate simultaneously, but in addition, prices are discovered incrementally over time. In principle, a clairvoyant agent\u2014one with knowledge of future clearing prices\u2014could justifiably employ an open-loop strategy: it could solve the TAC optimization problem once at the start of the game and place all its bids accordingly, never reconsidering those decisions. A more practical alternative (and the usual approach taken in TAC2), is to incorporate into an agent\u2019s architecture a closed loop, or bidding cycle, enabling the agent to condition its behavior on the evolution of prices. As price information is revealed, the agent improves its price predictions, and reoptimizes its bidding decisions, repeatedly.\nOne distinguishing feature of RoxyBot-06 is that it builds stochastic models of market clearing prices, rather than predicting clearing prices as point estimates. Given its stochastic price predictions, stochastic optimization lies at the heart of RoxyBot-06. Assuming time is\n2. An exception is livingagents (Fritschi & Dorer, 2002), the winner of TAC 2001.\ndiscretized into stages, or bid intervals, during each iteration of its bidding cycle, RoxyBot-06 faces an n-stage stochastic optimization problem, where n is the number of stages remaining in the game. The key input to this optimization problem is a sequence of n\u2212 1 stochastic models of future prices, each one a joint probability distribution over all goods conditioned on past prices and past hotel closings. The solution to this optimization problem, and the output of each iteration of the bidding cycle, is a vector of bids, one per good (or auction).\nTable 1 presents a high-level view of RoxyBot-06\u2019s architecture, emphasizing its bidding cycle. At the start of each bid interval, current prices and winnings are downloaded from the TAC server. Next, the key prediction and optimization routines are run. In the prediction module, stochastic models of flight, hotel, and entertainment prices are built. In the optimization module, bids are constructed as an approximate solution to an n-stage stochastic optimization problem. Prior to the end of each bid interval, the agents\u2019 bids are uploaded to the TAC server using three separate threads: (i) the flight thread bids on a flight only if its price is near its predicted minimum; (ii) the hotel thread bids on open hotels only if it is moments before the end of a minute; and (iii) the entertainment thread places bids immediately.\nWe discuss the details of RoxyBot-06\u2019s price prediction module first, and its optimization module second."}, {"heading": "4. Price Prediction", "text": "In this section, we describe how RoxyBot-06 builds its stochastic models of flight, hotel, and event prices. Each model is a discrete probability distribution, represented by a set of \u201cscenarios.\u201d Each scenario is a vector of \u201cfuture\u201d prices\u2014prices at which goods can be bought and sold after the current stage. For flights, the price prediction model is not stochastic: the future buy price is simply RoxyBot-06\u2019s prediction of the expected minimum price during the current stage. For hotels, the future buy prices are predicted by Monte Carlo simulations of simultaneous ascending auctions to approximate competitive equilibrium prices. There are no current buy prices for hotels. For entertainment, RoxyBot-06 predicts future buy and sell prices based on historical data. Details of these price prediction methods are the focus of this section."}, {"heading": "4.1 Flights", "text": "Efforts to deliberate about flight purchasing start with understanding the TAC model of flight price evolution."}, {"heading": "4.1.1 TAC Flight Prices\u2019 Stochastic Process", "text": "Flight prices follow a biased random walk. They are initialized uniformly in the range [250, 400], and constrained to remain in the range [150, 800]. At the start of each TAC game instance, a bound z on the final perturbation value is selected for each flight. These bounds are not revealed to the agents. What is revealed to the agents is a sequence of random flight prices. Every ten seconds, TACAir perturbs the price of each flight by a random value that depends on the hidden parameter z and the current time t as follows: given constants c, d \u2208 R and T > 0, each (intermediate) bound on the perturbation value\nis a linear function of t:\nx(t, z) = c+ t\nT (z \u2212 c) (1)\nThe perturbation value at time t is drawn uniformly from one of the following ranges (see Algorithm 1):\n\u2022 U [\u2212c, x(t, z)], if x(t, z) > 0\n\u2022 U [\u2212c,+c], if x(t, z) = 0\n\u2022 U [x(t, z),+c], if x(t, z) < 0\nObserve that the expected perturbation value in each case is simply the average of the corresponding upper and lower bounds. In particular,\n\u2022 if x(t, z) > c, then the expected perturbation is positive;\n\u2022 if x(t, z) \u2208 (0, c), then the expected perturbation is negative;\n\u2022 if x(t, z) \u2208 (\u2212c, 0), then the expected perturbation is positive;\n\u2022 otherwise, if x(t, z) \u2208 {\u2212c, 0, c}, then the expected perturbation is zero.\nMoreover, using Equation 1, we can compute the expected perturbation value conditioned on z:\n\u2022 if z \u2208 [0, c], then x(t, z) \u2208 [0, c], so prices are expected not to increase;\n\u2022 if z \u2208 [c, c+ d], then x(t, z) \u2208 [c, c+ d], so prices are expected not to decrease;\n\u2022 if z \u2208 [\u2212c, 0], then x(t, z) \u2208 [\u2212c, c], so prices are expected not to increase while t \u2264 cT c\u2212z\nand they are expected not to decrease while t \u2265 cT c\u2212z .\nThe TAC parameters are set as follows: c = 10, d = 30, T = 540, and z uniformly distributed in the range [\u2212c, d]. Based on the above discussion, we note the following: given no further information about z, TAC flight prices are expected to increase (i.e., the expected perturbation is positive); however, conditioned on z, TAC flight prices may increase or decrease (i.e., the expected perturbation can be positive or negative)."}, {"heading": "4.1.2 RoxyBot-06\u2019s Flight Prices Prediction Method", "text": "Although the value of the hidden parameter z is never revealed to the agents, recall that the agents do observe sample flight prices, say y1, . . . , yt, that depend on this value. This information can be used to model the probability distribution Pt[z] \u2261 P [z | y1, . . . , yt]. Such a probability distribution can be estimated using Bayesian updating. Before RoxyBot06, agents Walverine (Cheng et al., 2005) and Mertacor (Toulis et al., 2006) took this approach. Walverine uses Bayesian updating to compute the next expected price perturbation and then compares that value to a threshold, postponing its flight purchases if prices are not expected to increase by more than that threshold. Mertacor uses Bayesian updating to estimate the time at which flight prices will reach their minimum value. RoxyBot uses Bayesian updating to compute the expected minimum price, as we now describe.\nAlgorithm 1 getRange(c, t, z)\ncompute x(t, z) {Equation 1} if x(t, z) > 0 then a = \u2212c; b = \u2308x(t, z)\u2309 else if x(t, z) < 0 then a = \u230ax(t, z)\u230b; b = +c\nelse\na = \u2212c; b = +c end if return [a, b] {range}\nRoxyBot-06\u2019s implementation of Bayesian updating is presented in Algorithm 2. Letting Q0[z] = 1 c+d = P [z], the algorithm estimates Pt+1[z] = P [z | y1, . . . , yt+1] as usual:\nP [z | y1, . . . , yt] = P [y1, . . . , yt | z]P [z] \u2211\nz\u2032 P [y1, . . . , yt | z \u2032]P [z\u2032] dz\u2032\n(2)\nwhere\nP [y1, . . . , yt | z] = t\u220f\ni=1\nP [yi | y1, . . . , yi\u22121, z] (3)\n=\nt\u220f\ni=1\nP [yi | z] (4)\nEquation 4 follows from the fact that future observations are independent of past observations; observations depend only on the hidden parameter z.\nThe only thing left to explain is how to set the values P [yi | z], for i = 1, . . . , t. As described in the pseudocode, this is done as follows: if yt+1 is within the appropriate range at that time, then this probability is set uniformly within the bounds of that range; otherwise, it is set to 0. Presumably, Walverine\u2019s and Mertacor\u2019s implementations of Bayesian updating are not very different from this one.3 However, as alluded to above, how the agents make use of the ensuing estimated probability distributions does differ.\nRoxyBot-06 predicts each flight\u2019s price to be its expected minimum price. This value is computed as follows (see Algorithm 3): for each possible value of the hidden parameter z, RoxyBot simulates an \u201cexpected\u201d random walk, selects the minimum price along this walk, and then outputs as its prediction the expectation of these minima, averaging according to Pt[z]. We call this random walk \u201cexpected,\u201d since the perturbation value \u2206 is an expectation (i.e., \u2206 = b\u2212a2 ) instead of a sample (i.e., \u2206 \u223c U [a, b]). By carrying out this computation, RoxyBot generates flight price predictions that are point estimates. The implicit decision to make only RoxyBot-06\u2019s hotel and event price predictions stochastic was made based on our intuitive sense of the time vs. accuracy tradeoffs in RoxyBot\u2019s optimization module, and hence warrants further study.\n3. We provide details here, because corresponding details for the other agents do not seem to be publicly available.\nAlgorithm 2 Flight Prediction(c, d, t, yt+1, Qt)\nfor all z \u2208 {\u2212c,\u2212c+ 1, . . . , d} do [a, b] = getRange(c, t, z) if yt+1 \u2208 [a, b] then P [yt+1 | z] = 1 b\u2212a\nelse\nP [yt+1 | z] = 0 end if\nQt+1[z] = P [yt+1 | z]Qt[z] end for{update probabilities} for all z \u2208 {\u2212c,\u2212c+ 1, . . . , d} do\nPt+1[z] = Qt+1[z] P\nz\u2032 Qt+1[z \u2032] dz\u2032\nend for{normalize probabilities} return Pt+1 {probabilities}\nAlgorithm 3 Expected Minimum Price(c, t, t\u2032, pt, Pt)\nfor all z \u2208 R do min[z] = +\u221e for \u03c4 = t+ 1, . . . , t\u2032 do [a, b] = getRange(c, \u03c4, z) \u2206 = b\u2212a2 {expected perturbation} p\u03c4 = p\u03c4\u22121 +\u2206 {perturb price} p\u03c4 = max(150,min(800, p\u03c4 )) if p\u03c4 < min[z] then min[z] = p\u03c4\nend if\nend for\nend for return \u2211\nz Pt[z] min[z] dz"}, {"heading": "4.2 Hotels", "text": "In a competitive market where each individual\u2019s effect on prices is negligible, equilibrium prices are prices at which supply equals demand, assuming all producers are profitmaximizing and all consumers are utility-maximizing. RoxyBot-06 predicts hotel prices by simulating simultaneous ascending auctions (SimAA) (Cramton, 2006), in an attempt to approximate competitive equilibrium (CE) prices. This approach is inspired by Walverine\u2019s (Cheng et al., 2005), where the ta\u0302tonnement method (Walras, 1874) is used for the same purpose."}, {"heading": "4.2.1 Simultaneous Ascending Auctions", "text": "Let ~p denote a vector of prices. If ~y(~p) denotes the cumulative supply of all producers, and if ~x(~p) denotes the cumulative demand of all consumers, then ~z(~p) = ~x(~p)\u2212~y(~p) denotes the\nexcess demand in the market. The ta\u0302tonnement process adjusts the price vector at iteration n + 1, given the price vector at iteration n and an adjustment rate \u03b1n as follows: ~pn+1 = ~pn + \u03b1n~z(~pn). SimAA adjusts the price vector as follows: ~pn+1 = ~pn + \u03b1max{~z(~pn), 0}, for some fixed value of \u03b1. Both of these processes continue until excess demand is non-positive: i.e., supply exceeds demand.\nAlthough competitive equilibrium prices are not guaranteed to exist in TAC markets (Cheng et al., 2003), the SimAA adjustment process, is still guaranteed to converge: as prices increase, demand decreases while supply increases; hence, supply eventually exceeds demand. The only parameter to the SimAA method is the magnitude \u03b1 of the price adjustment. The smaller this value, the more accurate the approximation (assuming CE prices exist), so the value of \u03b1 can be chosen to be the lowest value that time permits.\nThe ta\u0302tonnement process, on the other hand, is more difficult to apply as it is not guaranteed to converge. The Walverine team dealt with the convergence issue by decaying an initial value of \u03b1. However, careful optimization was required to ensure convergence to a reasonable solution in a reasonable amount of time. In fact, Walverine found it helpful to set initial prices to certain non-zero values. This complexity is not present when using simultaneous ascending auctions to approximate competitive equilibrium prices."}, {"heading": "4.2.2 Prediction Quality", "text": "In TAC, cumulative supply is fixed. Hence, the key to computing excess demand is to compute cumulative demand. Each TAC agent knows the preferences of its own clients, but must estimate the demand of the others. Walverine computes a single hotel price prediction (a point estimate) by considering its own clients\u2019 demands together with those of 56 \u201cexpected\u201d clients. Briefly, the utility of an expected client is an average across travel dates and hotel types augmented with fixed entertainment bonuses that favor longer trips (see the paper by Cheng et al., 2005, for details). In contrast, RoxyBot-06 builds a stochastic model of hotel prices consisting of S scenarios by considering its own clients\u2019 demands together with S random samples of 56 clients. A (random or expected) client\u2019s demand is simply the quantity of each good in its optimal package, given current prices. The cumulative demand is the sum total of all client\u2019s individual demands.\nIn Figure 1, we present two scatter plots that depict the quality of various hotel price predictions at the beginning of the TAC 2002 final games. All price predictions are evaluated using two metrics: Euclidean distance and the \u201cexpected value of perfect prediction\u201d (EVPP). Euclidean distance is a measure of the difference between two vectors, in this case the actual and the predicted prices. The value of perfect prediction (VPP) for a client is the difference between its surplus (value of its preferred package less price) based on actual and predicted prices. EVPP is the VPP averaged over the distribution of client preferences.4\nOn the left, we plot the predictions generated using the competitive equilibrium approximation methods, ta\u0302tonnement and SimAA, both with fixed \u03b1 = 124 , making expected, random, and exact predictions. The \u201cexact\u201d predictions are computed based on the actual clients in the games, not just the client distribution; hence, they serve as a lower bound on the performance of these techniques on this data set. Under both metrics, and for both expected and random, SimAA\u2019s predictions outperform ta\u0302tonnement\u2019s.\n4. See the paper by Wellman et al. (2004) for details.\nSince \u03b1 is fixed, and ta\u0302tonnement is not guaranteed to converge under this condition, this outcome is not entirely surprising. What is interesting, though, is that SimAA expected performs comparably to Walverine (see the right plot).5 This is interesting because SimAA has fewer parameter settings than ta\u0302tonnement\u2014only a single \u03b1 value as compared to an initial \u03b1 value together with a decay schedule\u2014and moreover, we did not optimize its parameter setting. Walverine\u2019s parameter settings, on the other hand, were highly optimized.\nWe interpret each prediction generated using randomly sampled clients as a sample scenario, so that a set of such scenarios represents draws from a probability distribution over CE prices. The corresponding vector of predicted prices that is evaluated is actually the average of multiple (40) such predictions; that is, we evaluate an estimate of the mean of this probability distribution. The predictions generated using sets of random clients are not as good as the predictions with expected clients (see Figure 1 left), although with more than 40 sets of random clients, the results might improve. Still, the predictions with random clients comprise RoxyBot-06\u2019s stochastic model of hotel prices, which is key to its bidding strategy. Moreover, using random clients helps RoxyBot-06 make better interim predictions later in the game as we explain next."}, {"heading": "4.2.3 Prediction Quality over Time: Interim Price Prediction", "text": "The graphs depicted in Figure 1 pertain to hotel price predictions made at the beginning of the game, when all hotel auctions are open. In those CE computations, prices are initialized to 0. As hotel auctions close, RoxyBot-06 updates the predicted prices of the hotel auctions\n5. With the exception of the RoxyBot-06 data point (i.e., SimAA random), this plot was produced by the Walverine team (Wellman et al., 2004).\nthat remain open. We experimented with two ways of constructing interim price predictions. The first is to initialize and lower bound the prices in the hotel markets at their closing (for closed auctions) or current ask (for open auctions) prices while computing competitive equilibrium prices.6 The second differs in its treatment of closed auctions: we simulate a process of distributing the goods in the closed auctions to the clients who want them most, and then exclude the closed markets (i.e., fix prices at \u221e) from further computations of competitive equilibrium prices.\nRegarding the second method\u2014the distribution method\u2014we determine how to distribute goods by computing competitive equilibrium prices again. As explained in Algorithm 4, all hotels (in both open and closed auctions) are distributed to random clients by determining who is willing to pay the competitive equilibrium prices for what. It is not immediately obvious how to distribute goods to expected clients; hence, we enhanced only the prediction methods with random clients with distribution.\nFigure 2, which depicts prediction quality over time, shows that the prediction methods enhanced with distribution are better than the predictions obtained by merely initializing the prices of closed hotel auctions at their closing prices. Hotels that close early tend to sell for less than hotels that close late; hence, the prediction quality of any method that makes decent initial predictions is bound to deteriorate if those predictions remain relatively constant throughout the game."}, {"heading": "4.2.4 Run Time", "text": "Table 2 shows the run times of the CE prediction methods on the TAC 2002 (60 games) and TAC 2006 (165 games) finals data set at minute 0, as well as their run times during\n6. At first blush, it may seem more sensible to fix the prices of closed hotels at their closing prices, rather than merely lower bound them (i.e., allow them to increase). If some hotel closed at an artificially low price, however, and if that price were not permitted to increase, then the predicted prices of the hotels complementing the hotel in question would be artificially high.\nAlgorithm 4 Distribute\n1: for all hotel auctions h do 2: initialize price to 0 3: initialize supply to 16 4: end for 5: compute competitive equilibrium prices {Ta\u0302tonnement or SimAA} 6: for all closed hotel auctions h do 7: distribute units of h to those who demand them at the computed competitive equilibrium prices 8: distribute any leftover units of h uniformly at random 9: end for\nminutes 1\u20137 on the TAC 2006 finals data set. What the numbers in this table convey is that SimAA\u2019s run time, even with distribution, is reasonable. For example, at minute 0, SimAA sample takes on the order of 0.1 seconds. At minutes 1-7, this method without distribution runs even faster. This speed increase occurs because CE prices are bounded below by current ask prices and above by the maximum price a client is willing to pay for a hotel, and current ask prices increase over time, correspondingly reducing the size of the search space. SimAA sample with distribution at minutes 1-7 takes twice as long as SimAA sample without distribution at minute 0 because of the time it takes to distribute goods, but the run time is still only (roughly) 0.2 seconds. Our implementation of ta\u0302tonnement runs so slowly because we fixed \u03b1 instead of optimizing the tradeoff between convergence rate and accuracy, so the process did not converge, and instead ran for the maximum number of iterations (10,000). In summary, SimAA is simpler than ta\u0302tonnement to implement, yet performs comparably to an optimized version of ta\u0302tonnement (i.e., Walverine), and runs sufficiently fast."}, {"heading": "4.2.5 Summary", "text": "The simulation methods discussed in this section\u2014the ta\u0302tonnement process and simultaneous ascending auctions\u2014were employed to predict hotel prices only. (In our simulations, flight prices are fixed at their expected minima, and entertainment prices are fixed at 80.) In principle, competitive equilibrium (CE) prices could serve as predictions in all TAC markets. However, CE prices are unlikely to be good predictors of flight prices, since flight prices are determined exogenously. With regard to entertainment tickets, CE prices might\nhave predictive power; however, incorporating entertainment tickets into the ta\u0302tonnement and SimAA calculations would have been expensive. (In our simulations, following Wellman et al., 2004, client utilities are simply augmented with fixed entertainment bonuses that favor longer trips.) Nonetheless, in future work, it could be of interest to evaluate the success of these or related methods in predicting CDA clearing prices.\nFinally, we note that we refer to our methods of computing excess demand as \u201cclientbased\u201d because we compute the demands of each client on an individual basis. In contrast, one could employ an \u201cagent-based\u201d method, whereby the demands of agents, not clients, would be calculated. Determining an agent\u2019s demands involves solving so-called completion, a deterministic (prices are known) optimization problem at the heart of RoxyBot-00\u2019s architecture (Greenwald & Boyan, 2005). As TAC completion is NP-hard, the agent-based method of predicting hotel prices is too expensive to be included in RoxyBot-06\u2019s inner loop. In designing RoxyBot-06, we reasoned that an architecture based on a stochastic pricing model generated using the client-based method and randomly sampled clients would outperform one based on a point estimate pricing model generated using the agent-based method and some form of expected clients, but we did not verify our reasoning empirically."}, {"heading": "4.3 Entertainment", "text": "During each bid interval, RoxyBot-06 predicts current and future buy and sell prices for tickets to all entertainment events. These price predictions are optimistic: the agent assumes it can buy (or sell) goods at the least (or most) expensive prices that it expects to see before the end of the game. More specifically, each current price prediction is the best predicted price during the current bid interval.\nRoxyBot-06\u2019s estimates of entertainment ticket prices are based on historical data from the past 40 games. To generate a scenario, a sample game is drawn at random from this collection, and the sequences of entertainment bid, ask, and transaction prices are extracted. Given such a history, for each auction a, let tradeai denote the price at which the last trade before time i transacted; this value is initialized to 200 for buying and 0 for selling. In addition, let bidai denote the bid price at time i, and let askai denote the ask price at time i.\nRoxyBot-06 predicts the future buy price in auction a after time t as follows:\nfuture buyat = min i=t+1,...,T min{tradeai, askai} (5)\nIn words, the future buy price at each time i = t+1, . . . , T is the minimum of the ask price after time i and the most recent trade price. The future buy price at time t is the minimum across the future buy prices at all later times. The future sell price after time t is predicted analogously:\nfuture sellat = max i=t+1,...,T max{tradeai, bidai} (6)\nArguably, RoxyBot-06\u2019s entertainment predictions are made in the simplest possible way: past data are future predictions. It is likely one could improve upon this naive approach by using a generalization technique capable of \u201clearning\u201d a distribution over these data, and then sampling from the learned distribution."}, {"heading": "4.4 Summary", "text": "In this section, we described RoxyBot-06\u2019s price prediction methods. The key ideas, which may be transferable if not beyond TAC, at least to other TAC agents, are as follows:\n1. RoxyBot makes stochastic price predictions. It does so by generating a set of so-called \u201cscenarios,\u201d where each scenario is a vector of future prices.\n2. For each flight, RoxyBot uses Bayesian updating to predict its expected minimum price.\n3. For hotels, RoxyBot-uses a method inspired by Walverine\u2019s: it approximates competitive equilibrium prices by simulating simultaneous ascending auctions, rather than the usual ta\u0302tonnement process."}, {"heading": "5. Optimization", "text": "Next, we characterize RoxyBot-06\u2019s optimization routine. It is (i) stochastic, (ii) global, and (iii) dynamic. It takes as input stochastic price predictions; it considers its flight, hotel, and entertainment bidding decisions in unison; and it simultaneously reasons about bids to be placed in both current and future stages of the game."}, {"heading": "5.1 Abstract Auction Model", "text": "Recall that our treatment of bidding is decision-theoretic, rather than game-theoretic. In particular, we focus on a single agent\u2019s problem of optimizing its own bidding behavior, assuming the other agents\u2019 strategies are fixed. In keeping with our basic agent architecture, we further assume that the environment can be modeled in terms of the agent\u2019s predictions about market clearing prices. We introduce the term pseudo-auction to refer to a market mechanism defined by these two assumptions\u2014fixed other-agent behaviors and market information encapsulated by prices. The optimization problem that RoxyBot solves is one of bidding in pseudo-auctions, not (true) auctions. In this section, we formally develop this abstract auction model and relate it to TAC auctions; in the next, we define and propose heuristics to solve various pseudo-auction bidding problems."}, {"heading": "5.1.1 Basic Formalism", "text": "In this section, we formalize the basic concepts needed to precisely formulate bidding under uncertainty as an optimization problem, including: packages\u2014sets of goods, possibly multiple units of each; a function that describes how much the agent values each package; pricelines\u2014data structures in which to store the prices of each unit of each good; and bids\u2014pairs of vectors corresponding to buy and sell offers.\nPackages Let G denote an ordered set of n distinct goods and let N \u2208 Nn represent the multiset of these goods in the marketplace, with Ng denoting the number of units of each good g \u2208 G. A package M is a collection of goods, that is, a \u201csubmultiset\u201d of N . We write M \u2286 N whenever Mg \u2264 Ng for all g \u2208 G.\nIt is instructive to interpret this notation in the TAC domain. The flights, hotel rooms, and entertainment events up for auction in TAC comprise an ordered set of 28 distinct\ngoods. In principle, the multiset of goods in the TAC marketplace is:\nNTAC = \u3008\u221e, . . . ,\u221e \ufe38 \ufe37\ufe37 \ufe38\n8 flights\n, 16, . . . , 16 \ufe38 \ufe37\ufe37 \ufe38\n8 hotels\n, 8, . . . , 8 \ufe38 \ufe37\ufe37 \ufe38\n12 events\n\u3009 \u2208 N28\nIn practice, however, since each agent works to satisfy the preferences of only eight clients, it suffices to consider the multiset of goods:\nNTAC8 = \u30088 . . . , 8 \ufe38 \ufe37\ufe37 \ufe38\n8 flights\n, 8, . . . , 8 \ufe38 \ufe37\ufe37 \ufe38\n8 hotels\n, 8, . . . , 8 \ufe38 \ufe37\ufe37 \ufe38\n12 events\n\u3009 \u2286 NTAC\nA trip corresponds to a package, specifically some M \u2286 NTAC8 that satisfies the TAC feasibility constraints.\nGiven A,B \u2286 N , we rely on the two basic operations, \u2295 and \u2296, defined as follows: for all g \u2208 G,\n(A\u2295B)g \u2261 Ag +Bg\n(A\u2296B)g \u2261 Ag \u2212Bg\nFor example, if G = {\u03b1, \u03b2, \u03b3} and N = \u30081, 2, 3\u3009, then A = \u30080, 1, 2\u3009 \u2286 N and B = \u30081, 1, 1\u3009 \u2286 N . Moreover, (A \u2295 B)\u03b1 = 1, (A \u2295 B)\u03b2 = 2, and (A \u2295 B)\u03b3 = 3; and (A \u2296 B)\u03b1 = \u22121, (A\u2296B)\u03b2 = 0, and (A\u2296B)\u03b3 = 1.\nValue Let N denote the set of all submultisets of N : i.e., packages comprised of the goods in N . We denote v : N \u2192 R a function that describes the value the bidding agent attributes to each viable package.\nIn TAC, each agent\u2019s objective is to compile packages for m = 8 individual clients. As such, the agent\u2019s value function takes special form. Each client c is characterized by its own value function vc : N \u2192 R, and the agent\u2019s value for a collection of packages is the sum of its clients\u2019 respective values for those packages: given a vector of packages ~X = (X1, . . . , Xm),\nv( ~X) = m\u2211\nc=1\nvc(Xc). (7)\nPricelines A buyer priceline for good g is a vector ~pg \u2208 R Ng + , where the kth component, pgk, stores the marginal cost to the agent of acquiring the kth unit of good g. For example, if an agent currently holds four units of a good g\u0303, and if four additional units of g\u0303 are available at costs of $25, $40, $65, and $100, then the corresponding buyer priceline (a vector of length 8) is given by ~pg\u0303 = \u30080, 0, 0, 0, 25, 40, 65, 100\u3009. The leading zeros indicate that the four goods the agent holds may be \u201cacquired\u201d at no cost.\nWe assume buyer pricelines are nondecreasing. Note that this assumption is WLOG, since an optimizing agent buys cheaper goods before more expensive ones.\nGiven a set of buyer pricelines P = {~pg | g \u2208 G}, we define costs additively, that is, the cost of the goods in multiset Y \u2286 N is given by:\n\u2200g, Costg(Y, P ) =\nYg\u2211\nk=1\npgk,\nCost(Y, P ) = \u2211\ng\u2208G\nCostg(Y, P ). (8)\nA seller priceline for good g is a vector ~\u03c0g \u2208 R Ng + . Much like a buyer priceline, the kth component of a seller priceline for g stores the marginal revenue that an agent could earn from the kth unit it sells. For example, if the market demands four units of good g\u0303, which can be sold at prices of $20, $15, $10, and $5, then the corresponding seller priceline is given by ~\u03c0g\u0303 = \u300820, 15, 10, 5, 0, 0, 0, 0\u3009. Analogously to buyer pricelines, the tail of zero revenues indicates that the market demands only four of those units.\nWe assume seller pricelines are nonincreasing. Note that this assumption is WLOG, since an optimizing agent sells more expensive goods before cheaper ones.\nGiven a set of seller pricelines \u03a0 = {~\u03c0g | g \u2208 G}, we define revenue additively, that is, the revenue associated with multiset Z \u2286 N is given by:\n\u2200g, Revenueg(Z,\u03a0) =\nZg\u2211\nk=1\n\u03c0gk, (9)\nRevenue(Z,\u03a0) = \u2211\ng\u2208G\nRevenueg(Z,\u03a0). (10)\nIf a priceline is constant, we say that prices are linear. We refer to the constant value as a unit price. With linear prices, the cost of acquiring k units of good g is k times the unit price of good g.\nBids An agent submits a bid \u03b2 expressing offers to buy or sell various units of the goods in the marketplace. We divide \u03b2 into two components \u3008~b,~a\u3009, where for each good g the bid consists of a buy offer, ~bg = \u3008bg1, . . . , bgNg\u3009, and a sell offer, ~ag = \u3008ag1, . . . , agNg\u3009. The bid price bgk \u2208 R+ (resp. agk \u2208 R+) represents an offer to buy (sell) the kth unit of good g at that price.\nBy definition, the agent cannot buy (sell) the kth unit unless it also buys (sells) units 1, . . . , k\u22121. To accommodate this fact, we impose the following constraint: Buy offers must be nonincreasing in k, and sell offers nondecreasing. In addition, an agent may not offer to sell a good for less than the price at which it is willing to buy that good: i.e., bg1 < ag1. Otherwise, it would simultaneously buy and sell good g. We refer to these restrictions as bid monotonicity constraints."}, {"heading": "5.1.2 Pseudo-Auction Rules", "text": "Equipped with this formalism, we can specify the rules that govern pseudo-auctions. As in a true auction, the outcome of a pseudo-auction dictates the quantity of each good to exchange, and at what prices, conditional on the agent\u2019s bid. The quantity issue is resolved by the winner determination rule whereas the price issue is resolved by the payment rule.\nDefinition 5.1 [Pseudo-Auction Winner Determination Rule] Given buyer and seller pricelines P and \u03a0, and bid \u03b2 = \u3008~b,~a\u3009, the agent buys the multiset of goods Buy(\u03b2, P ) and sells the multiset of goods Sell(\u03b2,\u03a0), where\nBuyg(\u03b2, P ) = max k k such that bgk \u2265 pgk\nSellg(\u03b2,\u03a0) = max k k such that agk \u2264 \u03c0gk\nNote that the monotonicity restrictions on bids ensure that the agent\u2019s offer is better than or equal to the price for every unit it exchanges, and that the agent does not simultaneously buy and sell any good.\nThere are at least two alternative payment rules an agent may face. In a first-price pseudo-auction, the agent pays its bid price (for buy offers, or is paid its bid price for sell offers) for each good it wins. In a second-price pseudo-auction, the agent pays (or is paid) the prevailing prices, as specified by the realized buyer and seller pricelines. This terminology derives by analogy from the standard first- and second-price sealed bid auctions (Krishna, 2002; Vickrey, 1961). In these mechanisms, the high bidder for a single item pays its bid (the first price), or the highest losing bid (the second price), respectively. The salient property is that in first-price pseudo-auctions, the price is set by the bid of the winner, whereas in second-price pseudo-auctions an agent\u2019s bid price determines whether or not it wins but not the price it pays.\nIn this paper, we focus on the second-price model. That is, our basic problem definitions presume second-price auctions; however, our bidding heuristics are not tailored to this case. As in true auctions, adopting the second-price model in pseudo-auctions simplifies the problem for the bidder. It also provides a reasonable approximation to the situation faced by TAC agents, as we now argue:\n\u2022 In TAC entertainment auctions, agents submit bids (i.e., buy and sell offers) of the form specified above. If we interpret an agent\u2019s buyer and seller pricelines as the current order book (not including the agent\u2019s own bid), then the agent\u2019s immediate winnings are as determined by the winner determination rule, and payments are according to the second-price rule (i.e., the order-book prices prevail).\n\u2022 In TAC hotel auctions, only buy bids are allowed. Assuming once again an order book that reflects all outstanding bids other than the agent\u2019s own, an accurate buyer priceline would indicate that the agent can win k units of a good if it pays\u2014for all k units\u2014a price just above the (17 \u2212 k)th existing (other-agent) offer. The actual price it pays will be that of the 16th-highest unit offer (including its own offer). Since the agent\u2019s own bid may affect the price,7 this situation lies between the first- and second-price characterizations of pseudo-auctions described above.\n\u2022 In TAC flight auctions, agents may buy any number of units at the posted price. The situation at any given time is modeled exactly by the second-price pseudo-auction abstraction."}, {"heading": "5.2 Bidding Problems", "text": "We are now ready to discuss the optimization module repeatedly employed by RoxyBot-06 within its bidding cycle to construct its bids. The key bidding decisions are: what goods to bid on, at what price, and when?\n7. It can do so in two ways. First, the agent may submit the 16th-highest unit offer, in which case it sets the price. Second, when it bids for multiple units, the number it wins determines the price-setting unit, thus affecting the price for all winning units. Note that this second effect would be present even if the auction cleared at the 17th-highest price.\nAlthough RoxyBot technically faces an n-stage stochastic optimization problem, it solves this problem by collapsing those n stages into only two relevant stages, \u201ccurrent\u201d and \u201cfuture,\u201d necessitating only one stochastic model of future prices (current prices are known). This simplification is achieved by ignoring the potentially useful information that hotel auctions close one by one in a random, unspecified order, and instead operating (like most TAC agents) under the assumption that all hotel auctions close at the end of the current stage. Hence, there is only one model of hotel prices: a stochastic model of future prices. Moreover, the only pressing decisions regarding hotels are what goods to bid on now and at what price. There is no need to reason about the timing of hotel bid placement.\nIn contrast, since flight and entertainment auctions clear continuously, a trading agent should reason about the relevant tradeoffs in timing its placement of bids on these goods. Still, under the assumption that all hotel auctions close at the end of the current stage, in future stages, hotel prices, and hence hotel winnings, are known, so the only remaining decisions are what flight and entertainment tickets to buy. A rational agent will time its bids in these markets to capitalize on the \u201cbest\u201d prices. (The best prices are the minima for buying and the maxima for selling.) Hence, it suffices for an agent\u2019s model of future prices in these markets to predict only the best prices (conditioned on current prices). That is, it suffices to consider only one stochastic pricing model. No further information is necessary.\nHaving established that it suffices for RoxyBot to pose and solve a two-stage, rather than an n-stage, stochastic optimization problem, we now proceed to define an abstract series of such problems that is designed to capture the essence of bidding under uncertainty in TAC-like hybrid markets that incorporate aspects of simultaneous and sequential, one-shot and continuously-clearing, auctions. More specifically, we formulate these problems as twostage stochastic programs with integer recourse (see the book by Birge & Louveaux, 1997, for an introduction to stochastic programming).\nIn a two-stage stochastic program, there are two decision-making stages, and hence two sets of variables: first- and second-stage variables. The objective is to maximize the sum of the first-stage objectives (which depend only on the first-stage variables) and the expected value of the ensuing second-stage objectives (which can depend on both the first- and secondstage variables). The objective value in the second stage is called the recourse value, and if any of the second-stage variables are integer-valued, then the stochastic program is said to have integer recourse.\nAt a high-level, the bidding problem can be formulated as a two-stage stochastic program as follows: in the first stage, when current prices are known but future prices are uncertain, bids are selected; in the second stage, all uncertainty is resolved, and goods are exchanged. The objective is to maximize the expected value of the second-stage objective, namely the sum of the inherent value of final holdings and any profits earned, less any first-stage costs. Since the second stage involves integer-valued decisions (the bidder decides what goods to buy and sell at known prices), the bidding problem is one with integer recourse.\nIn this section, we formulate a series of bidding problems as two-stage stochastic programs with integer recourse, each one tailored to a different type of auction mechanism, illustrating a different type of bidding decision. The mechanisms we study, inspired by TAC, are one-shot and continuously-clearing variants of second-price pseudo-auctions. In the former, bids can only be placed in the first stage; in the latter, there is an opportunity\nfor recourse. Ultimately, we combine all decision problems into one unified problem that captures what we mean by bidding under uncertainty.\nIn our formal problem statements, we rely on the following notation:\n\u2022 Variables:\n\u2013 Q1 is a multiset of goods to buy now\n\u2013 Q2 is a multiset of goods to buy later\n\u2013 R1 is a multiset of goods to sell now\n\u2013 R2 is a multiset of goods to sell later\n\u2022 Constants:\n\u2013 P 1 is a set of current buyer pricelines\n\u2013 P 2 is a set of future buyer pricelines\n\u2013 \u03a01 is a set of current seller pricelines\n\u2013 \u03a02 is a set of future seller pricelines\nNote that P 1 and \u03a01 are always known, whereas P 2 and \u03a02 are uncertain in the first stage but their uncertainty is resolved in the second stage.\nFlight Bidding Problem An agent\u2019s task in bidding in flight auctions is to decide how many flights to buy now at current prices and later at the lowest future prices, given (known) current prices and a stochastic model of future prices. Although in TAC all units of each flight sell for the same price at any one time, we state the flight bidding problem more generally: we allow for different prices for different units of the same flight.\nDefinition 5.2 [Continuously-Clearing, Buying] Given a set of current buyer pricelines P 1 and a probability distribution f over future buyer pricelines P 2,\nFLT(f) = max Q1\u2208Zn EP 2\u223cf\n[\nmax Q2\u2208Zn\nv(Q1 \u2295Q2)\u2212 ( Cost(Q1, P 1) + Cost(Q1 \u2295Q2, P 2)\u2212 Cost(Q1, P 2)\n) ]\n(11)\nNote that there are two cost terms referring to future pricelines (Cost(\u00b7, P 2)). The first of these terms adds the total cost of the goods bought in the first and second stages. The second term subtracts the cost of the goods bought in just the first stage. This construction ensures that, if an agent buys k units of a good now, any later purchases of that good incur the charges of units (k + 1, k + 2, ...) in the good\u2019s future priceline.\nEntertainment Bidding Problem Abstractly, the entertainment buying problem is the same as the flight bidding problem. An agent must decide how many entertainment tickets to buy now at current prices and later at the lowest future prices. The entertainment selling problem is the opposite of this buying problem. An agent must decide how many tickets to sell now at current prices and later at the highest future prices.\nDefinition 5.3 [Continuously-Clearing, Buying and Selling] Given a set of current buyer and seller pricelines (P,\u03a0)1 and a probability distribution f over future buyer and seller pricelines (P,\u03a0)2,\nENT(f) = max Q1,R1\u2208Zn E(P,\u03a0)2\u223cf\n[\nmax Q2,R2\u2208Zn\nv((Q1 \u2295Q2)\u2296 (R1 \u2295R2))\n\u2212 ( Cost(Q1, P 1) + Cost(Q1 \u2295Q2, P 2)\u2212 Cost(Q1, P 2) ) + ( Revenue(R1,\u03a01) + Revenue(R1 \u2295R2,\u03a02)\u2212 Revenue(R1,\u03a02) )] (12)\nsubject to Q1 \u2287 R1 and Q1 \u2295Q2 \u2287 R1 \u2295R2, for all (P,\u03a0)2.\nThe constraints ensure that an agent does not sell more units of any good than it buys.\nHotel Bidding Problem Hotel auctions close at fixed times, but in an unknown order. Hence, during each iteration of an agent\u2019s bidding cycle, one-shot auctions approximate these auctions well. Unlike in the continuous setup, where decisions are made in both the first and second stages, in the one-shot setup, bids can only be placed in the first stage; in the second stage, winnings are determined and evaluated.\nDefinition 5.4 [One-Shot, Buying] Given a probability distribution f over future buyer pricelines P 2,\nHOT(f) = max \u03b21=\u3008~b,0\u3009 EP 2\u223cf\n[ v(Buy(\u03b21, P 2))\u2212 Cost(Buy(\u03b21, P 2), P 2) ] (13)\nHotel Bidding Problem, with Selling Although it is not possible for agents to sell TAC hotel auctions, one could imagine an analogous auction setup in which it were possible to sell goods as well as buy them.\nDefinition 5.5 [One-Shot, Buying and Selling] Given a probability distribution f over future buyer and seller pricelines (P,\u03a0)2,\nmax \u03b21=\u3008~b,~a\u3009 E(P,\u03a0)2\u223cf\n[ v(Buy(\u03b21, P 2)\u2296 Sell(\u03b21,\u03a02))\u2212 Cost(Buy(\u03b21, P 2), P 2) + Revenue(Sell(\u03b21,\u03a02),\u03a02) ]\n(14)\nsubject to Buy(\u03b21, P 2) \u2265 Sell(\u03b21,\u03a02), for all (P,\u03a0)2.\nBidding Problem Finally, we present (a slight generalization of) the TAC bidding problem by combining the four previous stochastic optimization problems into one. This abstract problem models bidding to buy and sell goods both via continuously-clearing and one-shot second-price pseudo-auctions, as follows:\nDefinition 5.6 [Bidding Under Uncertainty] Given a set of current buyer and seller pricelines (P,\u03a0)1 and a probability distribution f over future buyer and seller pricelines (P,\u03a0)2,\nBID(f) =\nmax Q1,R1\u2208Zn,\u03b21=\u3008~b,~a\u3009 E(P,\u03a0)2\u223cf\n[\nmax Q2,R2\u2208Zn\nv((Q1 \u2295Q2)\u2296 (R1 \u2295R2)\u2295 Buy(\u03b21, P 2)\u2296 Sell(\u03b21, P 2))\n\u2212 ( Cost(Q1, P 1) + Cost(Q1 \u2295Q2, P 2)\u2212 Cost(Q1, P 2) + Cost(Buy(\u03b21, P 2), P 2) )\n+ ( Revenue(R1,\u03a01) + Revenue(R1 \u2295R2,\u03a02)\u2212 Revenue(R1,\u03a02) + Revenue(Sell(\u03b21,\u03a02),\u03a02) )]\n(15)\nsubject to Q1 \u2287 R1 and Q1 \u2295Q2 \u2287 R1 \u2295R2 and Buy(\u03b21, P 2) \u2265 Sell(\u03b21,\u03a02), for all (P,\u03a0)2.\nOnce again, this bidding problem is (i) stochastic: it takes as input a stochastic model of future prices; (ii) global: it seamlessly integrates flight, hotel, and entertainment bidding decisions; and (iii) dynamic: it facilitates simultaneous reasoning about current and future stages of the game.\nNext, we describe various heuristic approaches to solving the problem of bidding under uncertainty."}, {"heading": "5.3 Bidding Heuristics", "text": "In this section, we discuss two heuristic solutions to the bidding problem: specifically, the expected value method (EVM), an approach that collapses stochastic information, and sample average approximation (SAA), an approach that exploits stochastic information and characterizes RoxyBot-06."}, {"heading": "5.3.1 Expected Value Method", "text": "The expected value method (Birge & Louveaux, 1997) is a standard way of approximating the solution to a stochastic optimization problem. First, the given distribution is collapsed into a point estimate (e.g., the mean); then, a solution to the corresponding deterministic optimization problem is output as an approximate solution to the original stochastic optimization problem. Applying this idea to the problem of bidding under uncertainty yields:\nDefinition 5.7 [Expected Value Method] Given a probability distribution f over buyer and seller pricelines, with expected values P\u0304 2 and \u03a0\u03042, respectively,\nBID EVM(P\u0304 2, \u03a0\u03042) =\nmax Q1,R1\u2208Zn,\u03b21=\u3008~b,~a\u3009,Q2,R2\u2208Zn\nv((Q1 \u2295Q2)\u2296 (R1 \u2295R2)\u2295 (Buy(\u03b21, P\u0304 2)\u2296 Sell(\u03b21, P\u0304 2))\n\u2212 ( Cost(Q1, P 1) + Cost(Q1 \u2295Q2, P\u0304 2)\u2212 Cost(Q1, P\u0304 2) + Cost(Buy(\u03b21, P\u0304 2), P\u0304 2) )\n+ ( Revenue(R1,\u03a01) + Revenue(R1 \u2295R2, \u03a0\u03042)\u2212 Revenue(R1, \u03a0\u03042) + Revenue(Sell(\u03b21, \u03a0\u03042), \u03a0\u03042) )\n(16)\nsubject to Q1 \u2287 R1 and Q1 \u2295Q2 \u2287 R1 \u2295R2.\nIn practice, without full knowledge of the distribution f , we cannot implement the expected value method; in particular, we cannot compute P\u0304 2 or \u03a0\u03042 so we cannot solve BID EVM(P\u0304 2, \u03a0\u03042) exactly. We can, however, solve an approximation of this problem in which the expected buyer and seller pricelines P\u0304 2 and \u03a0\u03042 are replaced by an average scenario (P\u0302 2, \u03a0\u03022) (i.e., average buyer and seller pricelines), defined as follows:\nP\u0302 2 = 1\nS\nS\u2211\ni=1\nP 2i , \u03a0\u0302 2 =\n1\nS\nS\u2211\ni=1\n\u03a02i .\nAlgorithm 5 EVM(G,N, f, S)\n1: sample S scenarios (P,\u03a0)21, . . . , (P,\u03a0) 2 S \u223c f 2: \u03b2 \u21d0 BID EVM ( \u2211S\ni=1 P 2 i , \u2211S i=1\u03a0 2 i\n)\n3: return \u03b2"}, {"heading": "5.3.2 Sample Average Approximation", "text": "Like the expected value method, sample average approximation is an intuitive way of approximating the solution to a stochastic optimization problem. The idea is simple: (i) generate a set of sample scenarios, and (ii) solve an approximation of the problem that incorporates only the sample scenarios. Applying the SAA heuristic (see Algorithm 6) involves solving the following approximation of the bidding problem:\nDefinition 5.8 [Sample Average Approximation] Given a set of S scenarios, (P,\u03a0)21, . . . , (P,\u03a0) 2 S \u223c f ,\nBID SAA((P,\u03a0)21, . . . , (P,\u03a0) 2 S) =\nmax Q1,R1\u2208Zn,\u03b21=\u3008~b,~a\u3009\nS\u2211\ni=1\nmax Q2,R2\u2208Zn\nv((Q1 \u2295Q2)\u2296 (R1 \u2295R2)\u2295 (Buy(\u03b21, P 2i )\u2296 Sell(\u03b2 1, P 2i ))\n\u2212 ( Cost(Q1, P 1) + Cost(Q1 \u2295Q2, P 2i )\u2212 Cost(Q 1, P 2i ) + Cost(Buy(\u03b2 1, P 2i ), P 2 i ) )\n+ ( Revenue(R1,\u03a01) + Revenue(R1 \u2295R2,\u03a02i )\u2212 Revenue(R 1,\u03a02i ) + Revenue(Sell(\u03b2 1,\u03a02i ),\u03a0 2 i ) )\n(17)\nsubject to Q1 \u2287 R1 and Q1 \u2295Q2 \u2287 R1 \u2295R2.\nAlgorithm 6 SAA(G,N, f, S)\n1: sample S scenarios (P,\u03a0)21, . . . , (P,\u03a0) 2 S \u223c f 2: \u03b2 \u21d0 BID SAA((P,\u03a0)21, . . . , (P,\u03a0) 2 S) 3: return \u03b2\nUsing the theory of large deviations, Ahmed and Shapiro (2002) establish the following result: as S \u2192 \u221e, the probability that an optimal solution to the sample average approximation of a stochastic program with integer recourse is an optimal solution to the original stochastic optimization problem approaches 1 exponentially fast. Given hard time and space constraints, however, it is not always possible to sample sufficiently many scenarios to infer any reasonable guarantees about the quality of a solution to a sample average approximation. Hence, we propose a modified SAA heuristic, in which SAA is fed some tailor-made \u201cimportant\u201d scenarios, and we apply this idea to the bidding problem."}, {"heading": "5.3.3 Modified Sample Average Approximation", "text": "The bids that SAA places are sample prices that appear in its scenarios. SAA never bids higher on any good than its highest sampled price, because as far as it knows, bidding that price is enough to win that good in all scenarios. However, there is some chance that the\nhighest sampled price falls below the clearing price. Let us compute this probability in the case of a single-unit auction, or a uniform-price multi-unit auction: i.e., one in which all units of the good being auctioned off clear at the same price.\nLet F denote the cumulative distribution function over the predicted prices, let f denote the corresponding density function, and let G denote the cumulative distribution function over the clearing prices. Using this notation, the term 1 \u2212 G(x) is the probability the clearing price is greater than x. Further, let X be a random variable that represents the highest value among S sample price predictions. Then P (X \u2264 x) = F (x)S is the probability that all S samples (and hence the highest among them) are less than x; and P (X = x) = (F (x)S)\u2032 = S(F (x))S\u22121f(x) is the probability that the highest value among the S samples equals x. Putting these two terms together\u2014namely, the probability the highest sample price prediction is exactly x, and the probability the clearing price is greater than x\u2014we can express the probability the highest of SAA\u2019s sample price predictions is less than the clearing price as follows:\n\u222b \u221e\u0304\n\u2212\u221e\u0304 S(F (x))S\u22121f(x)(1\u2212G(x))dx (18)\nAssuming perfect prediction (so that G = F ), this complex expression simplies as follows:\n\u222b \u221e\n\u2212\u221e S(F (x))S\u22121f(x)(1\u2212 F (x))dx\n= S\n\u222b \u221e\n\u2212\u221e (F (x))S\u22121f(x)dx \u2212 S\n\u222b \u221e\n\u2212\u221e (F (x))Sf(x)dx\n= S\n[ (F (x))S\nS\n]\u221e\n\u2212\u221e\n\u2212 S\n[ (F (x))S+1\nS + 1\n]\u221e\n\u2212\u221e\n= 1\nS + 1\nHence, the probability that all SAA\u2019s sample price predictions are less than the clearing price is 1/(S+1). In particular, assuming perfect prediction and that the clearing prices in the TAC hotel auctions are independent, the probability that an SAA agent with 49 scenarios bidding in TAC Travel has any chance of winning all eight hotels (i.e., the probability that a sample price in at least one of its scenarios is greater than the clearing price) is only (\n1\u2212 149+1\n)8 = 0.988 \u2248 0.85.\nTo remedy this situation, we designed and implemented a simple variant of SAA in RoxyBot-06. The SAA* heuristic (see Algorithm 7) is a close cousin of SAA, the only difference arising in their respective scenario sets. Whereas SAA samples S scenarios, SAA* samples only S \u2212 |N | scenarios, where |N | = \u2211\ng Ng. SAA* creates an additional |N | scenarios as follows: for each unit k of each good g \u2208 G, it sets the price of the kth unit of good g to the upper limit of its range of possible prices and, after conditioning on this price setting, it sets the prices of the other goods to their mean values. Next, we describe experiments with a test suite of bidding heuristics, including SAA and SAA*, in a controlled testing environment.\nAlgorithm 7 SAA\u2217(G,N, f, S)\nRequire: S \u2265 |N | 1: hard-code |N | scenarios (P,\u03a0)21, . . . , (P,\u03a0) 2 |N |\n2: sample S \u2212 |N | scenarios (P,\u03a0)2|N |+1, . . . , (P,\u03a0) 2 S \u223c f 3: \u03b2 \u21d0 BID SAA((P,\u03a0)21, . . . , (P,\u03a0) 2 S) 4: return \u03b2"}, {"heading": "5.4 Summary", "text": "In this section, we developed a series of bidding problems, and heuristics solutions to those problems, that captures the essence of bidding in the one-shot and continuously-clearing auctions that characterize TAC. The bulk of our presentation was deliberately abstract, so as to suggest that our problems and their solutions are applicable well beyond the realm of TAC: e.g., to bidding for interdependent goods in separate eBay auctions. Still, it remains to validate our approach in other application domains."}, {"heading": "6. Experiments", "text": "We close this paper with two sets of experimental results, the first in a controlled testing environment, and the second the results from the final round of the 2006 TAC Travel competition. The combined strategy of hotel price prediction via SimAA and bid optimization via SAA emerged victorious in both settings."}, {"heading": "6.1 Controlled Experiments", "text": "To some extent at least, our approach to bidding has been validated by the success of RoxyBot-06 in TAC-06. Nonetheless, we ran simulations in a controlled testing environment to further validate our approach. These results are reported by Lee (2007) and Greenwald et al. (2008), but we summarize them here as well.\nWe built a test suite of agents, all of which predict using RoxyBot-06\u2019s SimAA random mechanism with distribution. The agents differ in their bidding strategies; the possibilities include SAA,8 SAA*, and the six marginal-utility-based heuristics studied by Wellman et al. (2007), and summarized in Table 3.\nOur experiments were conducted in a TAC Travel-like setting, modified to remove any aspects of the game that would obscure a controlled study of bidding. Specifically, we eliminated flight and entertainment trading, and endowed all agents with eight flights in and eight flights out on each day. Further, we assumed all hotels closed after one round of bidding (i.e., hotel auctions are one-shot, so that the ensuing bid optimization problem adheres to Definition 5.4).\nWe designed two sets of experiments: one decision-theoretic and one game-theoretic. In the former, hotel clearing prices are the outcome of a simulation of simultaneous ascending auctions, but depend on the actual clients in each game, not a random sampling. (Our simulator is more informed than the individual agents.) In the latter, hotel clearing prices are determined by the bids the agents submit using the same mechanism as in TAC Travel: the clearing price is the 16th highest bid (or zero, if fewer than 16 bids are submitted).\nWe first ran experiments with 8 agents per game, but found that hotel prices were often zero: i.e., there was insufficient competition. We then changed the setup to include a random number of agents drawn from a binomial distribution with n = 32 and p = 0.5, with the requisite number of agents sampled uniformly with replacement from the set of possible agents. The agents first sample the number of competitors from the binomial distribution, and then generate scenarios assuming the sampled number of competitors.\nBecause of the game-theoretic nature of TAC, an individual agent\u2019s performance can depend heavily on the other agents included in the agent pool. In our experiments, we attempted to mitigate any artificial effects of the specific agents we chose to include in our pool by sampling agents from the pool to play each game, with replacement. Thus, an agent\u2019s average score from the games is a measure of the agent\u2019s performance against various combinations of opponents.\nIn Figures 3(a) and 3(b), we plot the mean scores obtained by each agent type in each setting, along with 95% confidence intervals. These averages were computed based on 1000 independent observations, obtained by playing 1000 games. Scores were averaged across agent types in each game to account for any game dependencies. SAAB and SAAT9 are the best performing agents in the game-theoretic experiments and among the best in the decision-theoretic setting."}, {"heading": "6.2 TAC 2006 Competition Results", "text": "Table 4 lists the agents entered in TAC-06 and Table 5 summarizes the outcome. The TAC-06 finals comprised 165 games over three days, with the 80 games on the last day weighted 1.5 times as much as the 85 over the first two days. On the first day of the finals, RoxyBot finished third, behind Mertacor and Walverine\u2014the top scorers in 2005. As it happens, RoxyBot\u2019s optimization routine, which was designed for stochastic hotel and entertainment\n8. The particular implementation details explaining how RoxyBot-06 applied SAA in the TAC domain are relegated to Appendix A. 9. SAAB is SAA, and SAAT is a slight variant of SAA*. See the paper by Greenwald et al. (2008) for details.\nprice predictions, was accidentally fed deterministic predictions (i.e., point price estimates) for entertainment. Moreover, these predictions were fixed, rather than adapted based on recent game history.\nOn days 2 and 3, RoxyBot ran properly, basing its bidding in all auctions on stochastic information. Moreover, the agent was upgraded after day 1 to bid on flights not just once, but twice, during each minute. This enabled the agent to delay its bidding somewhat at the end of a game for flights whose prices are decreasing. No doubt this minor modification enabled RoxyBot to emerge victorious in 2006, edging out Walverine by a whisker, below the integer precision reported in Table 5. The actual margin was 0.22\u2014a mere 22 parts in 400,000. Adjusting for control variates (Ross, 2002) spreads the top two finishers a bit further.10\n10. Kevin Lochner computed these adjustment factors using the method described by Wellman et al. (2007, ch. 8).\nMean scores, utilities, and costs (with 95% confidence intervals) for the last day of the TAC-06 finals (80 games) are plotted in Figure 4 and detailed statistics are tabulated in Table 6. There is no single metric such as low hotel or flight costs that is responsible for RoxyBot\u2019s success. Rather its success derives from the right balance of contradictory goals. In particular, RoxyBot incurs high hotel and mid-range flight costs while achieving mid-range trip penalty and high event profit.11\nLet us compare RoxyBot with two closest rivals: Walverine and WhiteDolphin. Comparing to Walverine first, Walverine bids lower prices (by 55) on fewer hotels (49 less), yet wins more (0.8) and wastes less (0.42). It would appear that Walverine\u2019s hotel bidding strategy outperforms RoxyBot\u2019s, except that RoxyBot earns a higher hotel bonus (15 more). RoxyBot also gains an advantage by spending 40 less on flights and earning 24 more in total entertainment profit.\nA very different competition takes place between RoxyBot and WhiteDolphin. WhiteDolphin bids lower prices (120 less) on more hotels (by 52) than RoxyBot. RoxyBot spends much more (220) on hotels than WhiteDolphin but makes up for it by earning a higher hotel bonus (by 96) and a lower trip penalty (by 153). It seems that WhiteDolphin\u2019s strategy is to minimize costs even if that means sacrificing utility."}, {"heading": "6.3 Summary", "text": "As already noted, TAC Travel bidding, viewed as an optimization problem, is an n-stage decision problem. We solve this n-stage decision problem as a sequence of 2-stage decision problems. The controlled experiments reported in this section establish that our bidding strategy, SAA, is the best in our test suite in the setting for which it was designed, with only 2 stages. The TAC competition results establish that this strategy is also effective in an n-stage setting."}, {"heading": "7. Collective Behavior", "text": "The hotel price prediction techniques described in Section 4.2 are designed to compute (or at least approximate) competitive equilibrium prices without full knowledge of the client pop-\n11. An agent suffers trip penalties to the extent that it assigns its clients packages that differ from their preferred.\nulation. In this section, we assume this knowledge and view the output of the ta\u0302tonnement and SimAA calculations not as predictions but as ground truth. We compare the actual prices in the final games to this ground truth in respective years since 2002 to determine whether TAC market prices resemble CE prices. What we find is depicted in Figure 5. Because of the nature of our methods, these calculations pertain to hotel prices only.\nThe results are highly correlated on both metrics (Euclidean distance and EVPP). We observe that the accuracy of CE price calculations has varied from year to year. 2003 was the year in which TAC Supply Chain Management (SCM) was introduced. Many participants diverted their attention away from Travel towards SCM that year, perhaps leading to degraded performance in Travel. Things seem to improve in 2004 and 2005. We\ncannot explain the setback in 2006, except by noting that performance is highly dependent on the particular agent pool, and in 2006 there were fewer agents in that pool."}, {"heading": "8. Conclusion", "text": "The foremost aim of trading agent research is to develop a body of techniques for effective design and analysis of trading agents. Contributions to trading agent design include the invention of trading strategies, together with models and algorithms for realizing their computation and methods to measure and evaluate the performance of agents characterized by those strategies. Researchers seek both specific solutions to particular trading problems and general principles to guide the development of trading agents across market scenarios. This paper purports to contribute to this research agenda. We described the design and implementation of RoxyBot-06, an able trading agent as demonstrated by its performance in TAC-06.\nAlthough automated trading in electronic markets has not yet fully taken hold, the trend is well underway. Through TAC, the trading agent community is demonstrating the potential for autonomous bidders to make pivotal trading decisions in a most effective way. Such agents offer the potential to accelerate the automation of trading more broadly, and thus shape the future of commerce."}, {"heading": "Acknowledgments", "text": "This paper extends the work of Lee et al. (2007). The material in Section 5.1 is based on the book by Wellman et al. (2007). We are grateful to several anonymous reviewers whose constructive criticisms enhanced the quality of this work. This research was supported by NSF Career Grant #IIS-0133689."}, {"heading": "Appendix A. TAC Bidding Problem: SAA", "text": "The problem of bidding in the simultaneous auctions that characterize TAC can be formulated as a two-stage stochastic program. In this appendix, we present the implementation details of the integer linear program (ILP) encoded in RoxyBot-06 that approximates an optimal solution to this stochastic program.12\nWe formulate this ILP assuming current prices are known, and future prices are uncertain in the first stage but revealed in the second stage. Note that whenever prices are known, it suffices for an agent to make decisions about the quantity of each good to buy, rather than about bid amounts, since choosing to bid an amount that is greater than or equal to the price of a good is equivalent to a decision to buy that good.\nUnlike in the main body of the paper, this ILP formulation of bidding in TAC assumes linear prices. Table 7 lists the price constants and decision variables for each auction type. For hotels, the only decisions pertain to buy offers; for flights, the agent decides how many tickets to buy now and how many to buy later; for entertainment events, the agent chooses sell quantities as well as buy quantities.\nA.1 Index Sets\na \u2208 A indexes the set of goods, or auctions.\naf \u2208 Af indexes the set of flight auctions.\nah \u2208 Ah indexes the set of hotel auctions.\nae \u2208 Ae indexes the set of event auctions.\nc \u2208 C indexes the set of clients.\np \u2208 P indexes the set of prices.\n12. The precise formulation of RoxyBot-06\u2019s bidding ILP appears in the paper by Lee et al. (2007). The formulation here is slightly simplified, but we expect it would perform comparably in TAC. The key differences are in flight and entertainment bidding.\nq \u2208 Q indexes the set of quantities (i.e., the units of each good in each auction).\ns \u2208 S indexes the set of scenarios.\nt \u2208 T indexes the set of trips.\nA.2 Constants\nGat indicates the quantity of good a required to complete trip t.\nMa indicates the current buy price of af , ae.\nNa indicates the current sell price of ae.\nYas indicates the future buy price of af , ah, ae in scenario s.\nZas indicates the future sell price of ae in scenario s.\nHa indicates the hypothetical quantity won of hotel ah.\nOa indicates the quantity of good a the agent owns.\nUct indicates client c\u2019s value for trip t.\nA.3 Decision Variables\n\u0393 = {\u03b3cst} is a set of boolean variables indicating whether or not client c is allocated trip t in scenario s.\n\u03a6 = {\u03c6apq} is a set of boolean variables indicating whether to bid price p on the qth unit of ah.\nM = {\u00b5a} is a set of integer variables indicating how many units of af , ae to buy now.\nN = {\u03bda} is a set of integer variables indicating how many units of ae to sell now.\nY = {\u03c5as} is a set of integer variables indicating how many units of af , ae to buy later in scenario s.\nZ = {\u03b6as} is a set of integer variables indicating how many units of ae to sell later in scenario s.\nA.4 Objective Function\nmax \u0393,\u03a6,M,N,Y,Z\n\u2211\nS\n\n      trip value \ufe37 \ufe38\ufe38 \ufe37 \u2211 C,T Uct\u03b3cts\u2212\nflight cost \ufe37 \ufe38\ufe38 \ufe37\n\u2211\nAf\n\n\ncurrent \ufe37 \ufe38\ufe38 \ufe37 Ma\u00b5a+ future \ufe37 \ufe38\ufe38 \ufe37 Yas\u03c5as\n\n\u2212\nhotel cost \ufe37 \ufe38\ufe38 \ufe37\n\u2211\nAh,Q,p\u2265Yas\nYas\u03c6apq + (19)\n\u2211\nAe\n\n     \nevent revenue \ufe37 \ufe38\ufe38 \ufe37 current \ufe37 \ufe38\ufe38 \ufe37 Na\u03bda + future \ufe37 \ufe38\ufe38 \ufe37 Zas\u03b6as\u2212 event cost \ufe37 \ufe38\ufe38 \ufe37 current \ufe37 \ufe38\ufe38 \ufe37 Ma\u00b5a\u2212 future \ufe37 \ufe38\ufe38 \ufe37 Yas\u03c5as\n\n     \n\n     \nA.5 Constraints\n\u2211\nT\n\u03b3cst \u2264 1 \u2200c \u2208 C, s \u2208 S (20)\nallocation \ufe37 \ufe38\ufe38 \ufe37 \u2211\nC,T\n\u03b3cstGat \u2264\nown \ufe37\ufe38\ufe38\ufe37\nOa +\nbuy \ufe37 \ufe38\ufe38 \ufe37 (\u00b5a + \u03c5as) \u2200a \u2208 Af , s \u2208 S (21)\nallocation \ufe37 \ufe38\ufe38 \ufe37 \u2211\nC,T\n\u03b3cstGat \u2264\nown \ufe37\ufe38\ufe38\ufe37\nOa +\nbuy \ufe37 \ufe38\ufe38 \ufe37 \u2211\nQ,p\u2265Yas\n\u03c6apq \u2200a \u2208 Ah, s \u2208 S (22)\nallocation \ufe37 \ufe38\ufe38 \ufe37 \u2211\nC,T\n\u03b3cstGat \u2264\nown \ufe37\ufe38\ufe38\ufe37\nOa +\n\n\nbuy \ufe37 \ufe38\ufe38 \ufe37 \u00b5a + \u03c5as\n\n\u2212\n\n\nsell \ufe37 \ufe38\ufe38 \ufe37 \u03bda + \u03b6as\n\n\n\u2200a \u2208 Ae, s \u2208 S (23) \u2211\nP,Q\n\u03c6apq \u2265 Ha \u2200a \u2208 Ah (24)\n\u2211\nP\n\u03c6apq \u2264 1 \u2200a \u2208 Ah, q \u2208 Q (25)\nEquation (20) limits each client to one trip in each scenario. Equation (21) prevents the agent from allocating flights that it does not own or buy. Equation (22) prevents the agent from allocating hotels that it does not own or buy. Equation (23) prevents the agent from allocating event tickets that it does not own or buy and not sell. Equation (24) ensures the agent bids on at least HQW units in each hotel auction. Equation (25) prevents the agent from placing more than one buy offer per unit in each hotel auction.\nAn agent might also be constrained not to place sell offers on more units of each good than it owns, and/or not to place buy (sell) offers for more units of each good than the market supplies (demands).\nNote that there is no need to explicitly enforce the bid monotonicity constraints in this ILP formulation:\n\u2022 \u201cBuy offers must be nonincreasing in k, and sell offers nondecreasing.\u201d\nThe ILP does not need this constraint because prices are assumed to be linear. In effect, the only decisions the ILP makes are how many units of each good to bid on. Hence, the bids (10, 15, 20) and (20, 15, 10) are equivalent.\n\u2022 \u201cAn agent may not offer to sell for less than the price it is willing to buy.\u201d\nThe ILP would not choose to place both a buy offer and a sell offer on a good if the buy price of that good exceeds the sell price, because that would be unprofitable."}], "references": [{"title": "The sample average approximation method for stochastic programs with integer recourse. Optimization Online, http://www. optimization-online.org", "author": ["S. Ahmed", "A. Shapiro"], "venue": null, "citeRegEx": "Ahmed and Shapiro,? \\Q2002\\E", "shortCiteRegEx": "Ahmed and Shapiro", "year": 2002}, {"title": "The supply chain trading agent competition", "author": ["R. Arunachalam", "N.M. Sadeh"], "venue": "Electronic Commerce Research and Applications,", "citeRegEx": "Arunachalam and Sadeh,? \\Q2005\\E", "shortCiteRegEx": "Arunachalam and Sadeh", "year": 2005}, {"title": "A trading agent built on constraint programming. In Eighth International Conference of the Society for Computational Economics: Computing in Economics and Finance, Aix-en-Provence", "author": ["E. Aurell", "M. Boman", "M. Carlsson", "J. Eriksson", "N. Finne", "S. Janson", "P. Kreuger", "L. Rasmusson"], "venue": null, "citeRegEx": "Aurell et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Aurell et al\\.", "year": 2002}, {"title": "Introduction to Stochastic Programming", "author": ["J. Birge", "F. Louveaux"], "venue": null, "citeRegEx": "Birge and Louveaux,? \\Q1997\\E", "shortCiteRegEx": "Birge and Louveaux", "year": 1997}, {"title": "Overview of CAT: A market design competition", "author": ["K. Cai", "E. Gerding", "P. McBurney", "J. Niu", "S. Parsons"], "venue": "S.Phelps", "citeRegEx": "Cai et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Cai et al\\.", "year": 2009}, {"title": "Walverine: A Walrasian trading agent", "author": ["S. Cheng", "E. Leung", "K. Lochner", "K.O\u2019Malley", "D. Reeves", "L. Schvartzman", "M. Wellman"], "venue": "In Proceedings of the Second International Joint Conference on Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "Cheng et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 2003}, {"title": "Walverine: A Walrasian trading agent", "author": ["S. Cheng", "E. Leung", "K. Lochner", "K.O\u2019Malley", "D. Reeves", "L. Schvartzman", "M. Wellman"], "venue": "Decision Support Systems,", "citeRegEx": "Cheng et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 2005}, {"title": "Simultaneous ascending auctions", "author": ["P. Cramton"], "venue": "Cramton, P., Shoham, Y., & Steinberg, R. (Eds.), Combinatorial Auctions. MIT Press.", "citeRegEx": "Cramton,? 2006", "shortCiteRegEx": "Cramton", "year": 2006}, {"title": "Agent-oriented software engineering for successful TAC participation", "author": ["C. Fritschi", "K. Dorer"], "venue": "In Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems,", "citeRegEx": "Fritschi and Dorer,? \\Q2002\\E", "shortCiteRegEx": "Fritschi and Dorer", "year": 2002}, {"title": "Bidding marginal utility in simultaneous auctions", "author": ["A. Greenwald"], "venue": "Workshop on Trading Agent Design and Analysis.", "citeRegEx": "Greenwald,? 2003", "shortCiteRegEx": "Greenwald", "year": 2003}, {"title": "Bidding under uncertainty: Theory and experiments", "author": ["A. Greenwald", "J. Boyan"], "venue": "In Proceedings of the 20th Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Greenwald and Boyan,? \\Q2004\\E", "shortCiteRegEx": "Greenwald and Boyan", "year": 2004}, {"title": "Bidding heuristics for simultaneous auctions: Lessons from tac travel", "author": ["A. Greenwald", "V. Naroditskiy", "S. Lee"], "venue": "InWorkshop on Trading Agent Design and Analysis", "citeRegEx": "Greenwald et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Greenwald et al\\.", "year": 2008}, {"title": "Bidding algorithms for simultaneous auctions: A case study", "author": ["A. Greenwald", "J. Boyan"], "venue": "Journal of Autonomous Agents and Multiagent Systems,", "citeRegEx": "Greenwald and Boyan,? \\Q2005\\E", "shortCiteRegEx": "Greenwald and Boyan", "year": 2005}, {"title": "SouthamptonTAC: Designing a successful trading agent", "author": ["M. He", "N. Jennings"], "venue": "In Proceedings of the Fifteenth European Conference on Artificial Intelligence,", "citeRegEx": "He and Jennings,? \\Q2002\\E", "shortCiteRegEx": "He and Jennings", "year": 2002}, {"title": "Designing an ad auctions game for the trading agent competition", "author": ["P.R. Jordan", "M.P. Wellman"], "venue": "In Workshop on Trading Agent Design and Analysis", "citeRegEx": "Jordan and Wellman,? \\Q2009\\E", "shortCiteRegEx": "Jordan and Wellman", "year": 2009}, {"title": "A long-term profit seeking strategy for continuous double auctions in a trading agent competition", "author": ["D. Kehagias", "P. Toulis", "P. Mitkas"], "venue": "In Fourth Hellenic Conference on Artificial Intelligence, Heraklion", "citeRegEx": "Kehagias et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Kehagias et al\\.", "year": 2006}, {"title": "Auction Theory", "author": ["V. Krishna"], "venue": "Academic Press.", "citeRegEx": "Krishna,? 2002", "shortCiteRegEx": "Krishna", "year": 2002}, {"title": "Comparison of bidding algorithms in simultaneous auctions", "author": ["S.J. Lee"], "venue": "B.S. honors thesis, Brown University, http://list.cs.brown.edu/publications/theses/ ugrad/. Lee, S., Greenwald, A., & Naroditskiy, V. (2007). Roxybot-06: An (SAA)2 TAC travel agent. In Proceedings of the 20th International Joint Conference on Artificial Intelligence,", "citeRegEx": "Lee,? 2007", "shortCiteRegEx": "Lee", "year": 2007}, {"title": "Simulation (Third edition)", "author": ["S.M. Ross"], "venue": "Academic Press.", "citeRegEx": "Ross,? 2002", "shortCiteRegEx": "Ross", "year": 2002}, {"title": "An agent based architecture for highly competitive electronic markets", "author": ["Sardinha", "J.A.R. P", "R.L. Milidi\u00fa", "P.M. Paranhos", "P.M. Cunha", "C.J.P. de Lucena"], "venue": "In Proceedings of the Eighteenth International Florida Artificial Intelligence Research Society Conference,", "citeRegEx": "Sardinha et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Sardinha et al\\.", "year": 2005}, {"title": "Mertacor: A successful autonomous trading agent", "author": ["P. Toulis", "D. Kehagias", "P. Mitkas"], "venue": "In Fifth International Joint Conference on Autonomous Agents and Multiagent Systems,", "citeRegEx": "Toulis et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Toulis et al\\.", "year": 2006}, {"title": "WhiteBear: An empirical study of design tradeoffs for autonomous trading agents. InWorkshop on Game-Theoretic Decision-Theoretic Agents", "author": ["I. Vetsikas", "B. Selman"], "venue": null, "citeRegEx": "Vetsikas and Selman,? \\Q2002\\E", "shortCiteRegEx": "Vetsikas and Selman", "year": 2002}, {"title": "Counterspeculation, auctions, and competitive sealed tenders", "author": ["W. Vickrey"], "venue": "Journal of Finance, 16, 8\u201337.", "citeRegEx": "Vickrey,? 1961", "shortCiteRegEx": "Vickrey", "year": 1961}, {"title": "El\u00e9ments d\u2019\u00e9conomie politique pure", "author": ["L. Walras"], "venue": "L. Corbaz, Lausanne.", "citeRegEx": "Walras,? 1874", "shortCiteRegEx": "Walras", "year": 1874}, {"title": "Autonomous Bidding Agents: Strategies and Lessons from the Trading Agent Competition", "author": ["M.P. Wellman", "A. Greenwald", "P. Stone"], "venue": null, "citeRegEx": "Wellman et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Wellman et al\\.", "year": 2007}, {"title": "Searching for Walverine", "author": ["M.P. Wellman", "D.M. Reeves", "K.M. Lochner", "R. Suri"], "venue": "In Workshop on Trading Agent Design and Analysis,", "citeRegEx": "Wellman et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Wellman et al\\.", "year": 2005}, {"title": "Price prediction in a Trading Agent Competition", "author": ["M. Wellman", "D. Reeves", "K. Lochner", "Y. Vorobeychik"], "venue": "Artificial Intelligence Research,", "citeRegEx": "Wellman et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Wellman et al\\.", "year": 2004}], "referenceMentions": [{"referenceID": 1, "context": "This paper is concerned only with the first; for a description of the others, see the papers by Arunachalam and Sadeh (2005), Cai et al.", "startOffset": 96, "endOffset": 125}, {"referenceID": 1, "context": "This paper is concerned only with the first; for a description of the others, see the papers by Arunachalam and Sadeh (2005), Cai et al. (2009), Jordan and Wellman (2009), respectively.", "startOffset": 96, "endOffset": 144}, {"referenceID": 1, "context": "This paper is concerned only with the first; for a description of the others, see the papers by Arunachalam and Sadeh (2005), Cai et al. (2009), Jordan and Wellman (2009), respectively.", "startOffset": 96, "endOffset": 171}, {"referenceID": 9, "context": "For example, at the core of RoxyBot\u2019s 2000 architecture (Greenwald & Boyan, 2005) was a deterministic optimization problem, namely how to bid given price predictions in the form of point estimates. In spite of its effectiveness in the TAC-00 tournament, a weakness of the 2000 design was that RoxyBot could not explicitly reason about variance within prices. In the years since 2000, we recast the key challenges faced by TAC agents as several different stochastic bidding problems (see, for example, the paper by Greenwald & Boyan, 2004), whose solutions exploit price predictions in the form of distributions. In spite of our perseverance, RoxyBot fared unimpressively in tournament conditions year after year, until 2006. Half a decade in the laboratory spent searching for bidding heuristics that can exploit stochastic information at reasonable computational expense finally bore fruit, as RoxyBot emerged victorious in TAC-06. In a nutshell, the secret of RoxyBot-06\u2019s success is: (hotel) price prediction by simulating simultaneous ascending auctions, and optimization based on the sample average approximation method. Details of our approach are the subject of the present article. Overview This paper is organized as follows. Starting in Section 2, we summarize the TAC market game. Next, in Section 3, we present a high-level view of RoxyBot\u2019s 2006 architecture. In Section 4, we describe RoxyBot\u2019s price prediction techniques for flights, hotels, and entertainment, in turn. Perhaps of greatest interest is our hotel price prediction method. Following Wellman et al. (2005), we predict hotel prices by computing approximate competitive equilibrium prices.", "startOffset": 57, "endOffset": 1585}, {"referenceID": 6, "context": "Before RoxyBot06, agents Walverine (Cheng et al., 2005) and Mertacor (Toulis et al.", "startOffset": 35, "endOffset": 55}, {"referenceID": 20, "context": ", 2005) and Mertacor (Toulis et al., 2006) took this approach.", "startOffset": 21, "endOffset": 42}, {"referenceID": 7, "context": "RoxyBot-06 predicts hotel prices by simulating simultaneous ascending auctions (SimAA) (Cramton, 2006), in an attempt to approximate competitive equilibrium (CE) prices.", "startOffset": 87, "endOffset": 102}, {"referenceID": 6, "context": "This approach is inspired by Walverine\u2019s (Cheng et al., 2005), where the t\u00e2tonnement method (Walras, 1874) is used for the same purpose.", "startOffset": 41, "endOffset": 61}, {"referenceID": 23, "context": ", 2005), where the t\u00e2tonnement method (Walras, 1874) is used for the same purpose.", "startOffset": 38, "endOffset": 52}, {"referenceID": 5, "context": "Although competitive equilibrium prices are not guaranteed to exist in TAC markets (Cheng et al., 2003), the SimAA adjustment process, is still guaranteed to converge: as prices increase, demand decreases while supply increases; hence, supply eventually exceeds demand.", "startOffset": 83, "endOffset": 103}, {"referenceID": 24, "context": "See the paper by Wellman et al. (2004) for details.", "startOffset": 17, "endOffset": 39}, {"referenceID": 26, "context": ", SimAA random), this plot was produced by the Walverine team (Wellman et al., 2004).", "startOffset": 62, "endOffset": 84}, {"referenceID": 16, "context": "This terminology derives by analogy from the standard first- and second-price sealed bid auctions (Krishna, 2002; Vickrey, 1961).", "startOffset": 98, "endOffset": 128}, {"referenceID": 22, "context": "This terminology derives by analogy from the standard first- and second-price sealed bid auctions (Krishna, 2002; Vickrey, 1961).", "startOffset": 98, "endOffset": 128}, {"referenceID": 0, "context": "Using the theory of large deviations, Ahmed and Shapiro (2002) establish the following result: as S \u2192 \u221e, the probability that an optimal solution to the sample average approximation of a stochastic program with integer recourse is an optimal solution to the original stochastic optimization problem approaches 1 exponentially fast.", "startOffset": 38, "endOffset": 63}, {"referenceID": 15, "context": "These results are reported by Lee (2007) and Greenwald et al.", "startOffset": 30, "endOffset": 41}, {"referenceID": 9, "context": "These results are reported by Lee (2007) and Greenwald et al. (2008), but we summarize them here as well.", "startOffset": 45, "endOffset": 69}, {"referenceID": 23, "context": "The agents differ in their bidding strategies; the possibilities include SAA,8 SAA*, and the six marginal-utility-based heuristics studied by Wellman et al. (2007), and summarized in Table 3.", "startOffset": 142, "endOffset": 164}, {"referenceID": 9, "context": "See the paper by Greenwald et al. (2008) for details.", "startOffset": 17, "endOffset": 41}, {"referenceID": 18, "context": "Adjusting for control variates (Ross, 2002) spreads the top two finishers a bit further.", "startOffset": 31, "endOffset": 43}, {"referenceID": 17, "context": "Acknowledgments This paper extends the work of Lee et al. (2007). The material in Section 5.", "startOffset": 47, "endOffset": 65}, {"referenceID": 17, "context": "Acknowledgments This paper extends the work of Lee et al. (2007). The material in Section 5.1 is based on the book by Wellman et al. (2007). We are grateful to several anonymous reviewers whose constructive criticisms enhanced the quality of this work.", "startOffset": 47, "endOffset": 140}, {"referenceID": 17, "context": "The precise formulation of RoxyBot-06\u2019s bidding ILP appears in the paper by Lee et al. (2007). The formulation here is slightly simplified, but we expect it would perform comparably in TAC.", "startOffset": 76, "endOffset": 94}], "year": 2009, "abstractText": "In this paper, we describe our autonomous bidding agent, RoxyBot, who emerged victorious in the travel division of the 2006 Trading Agent Competition in a photo finish. At a high level, the design of many successful trading agents can be summarized as follows: (i) price prediction: build a model of market prices; and (ii) optimization: solve for an approximately optimal set of bids, given this model. To predict, RoxyBot builds a stochastic model of market prices by simulating simultaneous ascending auctions. To optimize, RoxyBot relies on the sample average approximation method, a stochastic optimization technique.", "creator": null}}}