{"id": "1401.3863", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2014", "title": "An Effective Algorithm for and Phase Transitions of the Directed Hamiltonian Cycle Problem", "abstract": "The Hamiltonian cycle problem (HCP) of made however three-dimensional changes turn applications in themselves zones. It becomes likely part four complicated typically over studying characteristics properties, bringing accelerate transitions, of combinatorial unfortunately. While expedited theoretical and experimental analyses far yet has down over HCP in polyhedral acyclic, any limited amount its work came there done they way HCP early stephen formula_2 (DHCP ). The main fund result how provided is an implemented multiplication which similar DHCP. Our integrals tales and escapades new close feelings four before DHCP into then Assignment Problem (AP) and state-of-the-art perfect technique based soon Boolean brane (SAT ). By genres effective semantic it seen AP each SAT, our criss-cross significantly outshines 2006 exact DHCP algorithms, hundreds an parameters based brought form filmfare - playing Concorde TSP algorithm. The finish result raised the current study same own design genetic given starting phenomena taken during DHCP, falsification now diversified right known phase transition addition took DHCP.", "histories": [["v1", "Thu, 16 Jan 2014 05:04:57 GMT  (265kb)", "http://arxiv.org/abs/1401.3863v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["gerold j\\\"ager", "weixiong zhang"], "accepted": false, "id": "1401.3863"}, "pdf": {"name": "1401.3863.pdf", "metadata": {"source": "CRF", "title": "An Effective Algorithm for and Phase Transitions of the Directed Hamiltonian Cycle Problem", "authors": ["Gerold J\u00e4ger", "Weixiong Zhang"], "emails": ["gej@informatik.uni-kiel.de", "weixiong.zhang@wustl.edu"], "sections": [{"heading": "1. Introduction", "text": "An undirected graph G = (V,E) is Hamiltonian if it contains a Hamiltonian cycle (HC), a cycle that visits each vertex exactly once. Given a graph, the Hamiltonian cycle problem (HCP) is to find a HC or to prove that no HC exists in the graph. The decision version of the HCP is among the first problems that were proven to beNP-complete (Karp, 1972). HCP is a well-known problem with many applications in different areas, e.g., the Hamiltonian cycle game in game theory (Stojakovic\u0301 & Szabo\u0301, 2005), the problem of finding a knight\u2019s tour on a chessboard in artificial intelligence (Henderson & Apodaca, 2008), and the DNA Physical Mapping in biology (Grebinski & Kucherov, 1996). Much research has been done on the HCP in undirected graphs. For reviews, see the work of Bondy (1995), Christofides (1975), Chva\u0301tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000). In particular, many algorithms have been developed for the HCP (Angluin & Valiant, 1979; Bolloba\u0301s, Fenner & Frieze, 1987; Frieze, 1988a; Po\u0301sa, 1976; Vandegriend, 1998), as reviewed in the Stony Brook Algorithm Repository (Skiena, 2008). One effective algorithm for the HCP is based on the related Traveling Salesman Problem (TSP) in an undirected weighted graph, which is the problem of finding a HC with minimum total weight.\nc\u00a92010 AI Access Foundation. All rights reserved.\nThe HCP is also a canonical problem for understanding intrinsic properties of combinatorial problems. One such problem property is the so called phase transition. Consider an undirected graph Gn,m with m edges randomly chosen from all possible n(n \u2212 1)/2 edges over n vertices. It is expected that when keeping the size n, i.e., the number of vertices, a constant while increasing the number of edges m, the probability that a random graph Gn,m is Hamiltonian increases from 0 to 1. Surprisingly, the probability of being Hamiltonian for Gn,m exhibits a sharp, dramatic transition from 0 to 1, and the transition occurs approximately when m = dc \u00b7 n \u00b7 (log n + log log n)/2c (Bolloba\u0301s, 1985; Cheeseman, Kanefsky & Taylor, 1991; Komlo\u0301s & Szemere\u0301di, 1983). Furthermore, it was experimentally shown that when the constant c is between 1.08 and 1.10, the probability that Gn,m is Hamiltonian is 1/2 (Vandegriend & Culberson, 1998). Phase transitions in the HCP have also been studied under other different control parameters, for example, the so called general constrainedness parameter (Frank, Gent & Walsh, 1998). The phase transition result of the HCP has motivated a substantial amount of research on phase transitions of other combinatorial problems, particularly the TSP (Zhang & Korf, 1996) and Boolean satisfiability (Monasson, Zecchina, Kirkpatrick & Selman, 1999).\nIn this study we consider the HCP in directed graphs, which we call directed HCP, or DHCP for short. In addition to the known applications of the HCP mentioned above, an interesting application of the DHCP is that DHCP heuristics can be used to solve the Bottleneck TSP (Kabadi & Punnen, 2002). In contrast to the extensive amount of work on the HCP for undirected graphs, the research on the DHCP is rather limited (Angluin & Valiant, 1979; Bang-Jensen & Gutin, 2008; Kelly, 2007). The first exact algorithm for the DHCP was developed by Martello (1983). This algorithm outputs a fixed number h of HCs or reports that it cannot find h HCs in a given directed graph. By setting h = 1, this gives rise to an algorithm for the DHCP. In recent years, algorithms based on SAT encoding have been introduced to this problem, e.g., the absolute encoding (Hoos, 1999) and the relative encoding (Prestwich, 2003; see also Velev & Gao, 2009). Furthermore, a probabilistic heuristic for DHCP of complexity O(n1.5) was proposed (Frieze, 1988b). It can be shown that for the random class Gn,m the probability, that for a given instance a HC is found by this algorithm and therefore exists, changes from 0 to 1, when n grows to infinity and m = n log n+cn, where c is a constant. For the DHCP, a phase transition result similar to that of the HCP has been obtained as well, namely the phase transition occurs at m = dc \u00b7n \u00b7 (log n+ log log n)c (McDiarmid, 1980), where the constant c was expected to be close to 1.\nNote that the research on the TSP has also alluded to a DHCP algorithm. Using the technique of 2-point reduction, the asymmetric TSP (ATSP) \u2013 where the distance from city i to city j may not be necessarily equal to that from j to i \u2013 can be converted to the symmetric TSP, with the number of vertices being doubled (Jonker & Volgenant, 1983). Using this transformation, we can determine whether a directed graph is Hamiltonian by solving the symmetric TSP using the renowned Concorde algorithm (Applegate, Bixby, Cha\u0301vatal & Cook, 2005, 2006). Concorde has solved many large benchmark instances (Cook, 2010), including a TSP instance with 85, 900 cities (Applegate et al., 2009), which up to date is the largest solved practical TSP instance.\nThe main contribution of this paper is an effective exact algorithm for the DHCP. In our algorithm, we utilize methods for two well-known combinatorial problems, i.e., the Assign-\nment Problem (AP) and Boolean satisfiability (SAT); we therefore denote our algorithm by AP-SAT. Using random graphs and many real world instances, we experimentally compare the AP-SAT algorithm with the DHCP algorithm of Martello (1983), the TSP based approach that takes advantage of the TSP solver Concorde (Applegate et al., 2005, 2006) and the above-mentioned SAT encodings for the DHCP (Hoos, 1999; Prestwich, 2003). The results show that the AP-SAT algorithm significantly outperforms these algorithms.\nThe second contribution is an experimental study and refinement of the known phase transition result on the existence of a HC in a random directed graph (McDiarmid, 1980), as similarly done for the HCP (Vandegriend & Culberson, 1998)."}, {"heading": "2. The Algorithm", "text": "Consider a directed unweighted graph G = (V,E) with nodes V and edges E. For our purpose of solving the DHCP, we consider the problem of determining whether or not there exists a collection of cycles, which may not be necessarily complete cycles, visiting each vertex exactly once. We call this problem directed Assignment Problem or DAP for short. Our algorithm explores and exploits the intrinsic relationship between the DHCP and the DAP. More precisely, the AP-SAT algorithm searches for a HC in the space of DAP solutions. It first solves the DAP. If the DAP solution forms a HC, or no DAP solution exists, the algorithm terminates. If the DAP solver returns a solution that is not a HC, the algorithm then tries to patch the subcycles in the solution into a HC using the well-known Karp-Steele patching method (Karp & Steele, 1985). If no HC is found either, these DAP and patching steps are iterated, with the only difference that another DAP solution might be found. For most cases that we considered in this study, the algorithm can find a HC or determine that no solution exists after these two steps. If the algorithm fails to solve the problem after these iterative steps, it then attempts to enumerate the DAP solutions by formulating the DAP as a Boolean satisfiability problem and repeatedly solving the problem using a SAT solver and adding constraints to eliminate the DAP solutions that have been encountered. We discuss the details of these steps in the rest of the section."}, {"heading": "2.1 Solving the Assignment Problem", "text": "Given n vertices and a matrix C = (cij)1\u2264i,j\u2264n \u2208 Rn,n of the costs between pairs of vertices, the Assignment Problem (AP) is to find a vertex permutation \u03c0\u2217 such that \u03c0\u2217 = arg min { \u2211n i=1 ci,\u03c0(i) : \u03c0 \u2208 \u03a0n } , where \u03a0n is the set of all permutations of {1, . . . , n}. Note that an AP solution can be viewed as a collection of cycles visiting each vertex exactly once.\nMany algorithms have been developed for the AP (Bertsekas, 1981; Goldberg & Kennedy, 1995; Jonker & Volgenant, 1987). (For an experimental comparison of AP algorithms see Dell\u2019Amico & Toth, 2000.) The most efficient one is the Hungarian algorithm, which is based on Ko\u0308nig-Egervary\u2019s theorem and has a complexity of O(n3). In the AP-SAT algorithm we use the implementation of the Hungarian algorithm by Jonker and Volgenant (1987, 2004).\nFor an unweighted directed graph G = (V,E), DAP can be solved by applying an AP algorithm to the AP instance defined by the matrix C = (cij)1\u2264i,j\u2264n with\ncij =  0, if (i, j) \u2208 E, i 6= j 1, if (i, j) /\u2208 E, i 6= j 1, if i = j\nwhere we map the costs of arcs in G to 0 and the costs of the remaining arcs to 1. If the AP algorithm returns a solution with cost 0, there is a DAP solution in G, since every arc taken in the AP solution is an arc in G. On the other hand, if it returns a solution of cost greater than 0, there is no DAP solution in G because at least one arc in the solution does not belong to G.\nThe first step of the AP-SAT algorithm is this DAP algorithm. Then a HC of G, if one exists, is a solution to the DAP. We have to distinguish three cases at the end of the first step:\n\u2022 If the cost of the AP solution is greater than 0, G does not have a HC, and the DHCP instance is solved with no solution.\n\u2022 If the AP solution has cost 0 and the solution consists of one cycle, we have found a HC \u2013 and the DHCP instance is also solved.\n\u2022 If the AP solution has cost 0 and the AP solution has more than one cycle, we cannot determine, based on the AP solution, whether or not G is Hamiltonian. We then continue to the next steps of the AP-SAT algorithm."}, {"heading": "2.2 Karp-Steele Patching", "text": "If the DAP solution does not provide a definitive answer to the problem, i.e., the case where the AP solution cost is 0 and the AP solution contains more than one cycle, we continue to search for a HC in G. We first patch the subcycles in an attempt to form a HC, and we use Karp-Steele patching (KSP) for this purpose, which is an effective ATSP heuristic (Glover, Gutin, Yeo & Zverovich, 2001; Goldengorin, Ja\u0308ger & Molitor, 2006; Karp & Steele, 1985). The operation of patching two cycles C1 and C2 in an AP solution is defined as follows: two fixed arcs (v1, w1) \u2208 C1 and (v2, w2) \u2208 C2 are first deleted and two arcs (v1, w2) and (v2, w1) joining the two cycles are added. The cost of patching C1 and C2 using (v1, w2) and (v2, w1) is equal to\n\u03b4(C1, C2) = c(v1, w2) + c(v2, w1)\u2212 (c(v1, w1) + c(v2, w2))\ni.e., \u03b4(C1, C2) is the difference between the total cost of the inserted arcs and the total cost of the deleted arcs. In each step we choose to patch the two cycles that have the largest number of vertices. For these two cycles, the two arcs are chosen in such a way that the patching cost is the minimum among all possible arc pairs. If we have k \u2265 2 cycles, we repeat this patching step k \u2212 1 times to form one cycle at the end. We apply KSP to the AP instance defined in Section 2.1. If the patching procedure provides a HC, the AP-SAT algorithm can be terminated. Otherwise, we continue to the next step."}, {"heading": "2.3 Solving Variant APs", "text": "DAP may have multiple solutions, and some of the DAP solutions may be HCs. We can increase the chance of finding a HC if we apply the AP step multiple times, since the computational cost of the AP and the KSP algorithms is low. The key is to avoid finding the same DAP solution again. To accomplish this, we slightly alter some of the arc costs of the corresponding AP instance so as to find the other DAP solutions, enhanced by the KSP if needed, to increase the possibility of finding a HC. In other words, we add a \u201cperturbation\u201d component to create multiple variant AP instances to boost the overall chance of finding a HC. Note that in the worst case when the DHCP instance contains no HC, this procedure will not be productive.\nThe main idea to create a variant AP instance is to reduce the chance that the subcycles in the current AP solution can be chosen in the subsequent rounds of solving the APs. This is done by \u201cperturbing\u201d the costs of some of the arcs in G as follows. For each arc in the current DAP solution we increase its cost by one. To create an AP instance different from that in Section 2.1, we generalize the AP instance as follows. Let ci,j be the cost of the arc (i, j) \u2208 E, and let\nM := n \u00b7max {ci,j | (i, j) \u2208 E}+ 1\ni.e., M is greater than n times the largest cost of an arc in G. We then set the costs of the edges not in E to M . The AP instance of Section 2.1 is a special case of this AP instance, where the costs ci,j for all arcs (i, j) \u2208 E are 0. It is critical to notice that all DAP solutions, including a HC, must have costs less than M . As before, if the solution contains a HC, the algorithm terminates; otherwise, the subcycles are patched using the KSP to possibly find a HC. We repeat this step multiple times so that an arc, which has appeared in many previous DAP solutions, will be very unlikely to appear in the next DAP solution, and an arc, which has never occurred in any previous DAP solution, will be more likely to appear in the next DAP solution.\nLet r be the maximal number of AP/KSP calls, i.e., the number of variant AP instances solved. We observed in our experiments that r = n (see step 3 of the pseudo code of the appendix) is a good choice. This will be discussed in detail in Section 3.1."}, {"heading": "2.4 Implicitly Enumerating all DAP Solutions Using SAT", "text": "All the AP and patching based steps discussed above may still miss a solution to a DHCP instance. We now consider how to implicitly enumerate all DAP solutions for finding a solution to the DHCP, if it exists. The idea is to systematically rule out all the DAP solutions that have been discovered so far during the search. To this end, we first formulate a DAP as a Boolean satisfiability (SAT) problem (Dechter, 2003) and forbid a DAP solution by adding new constraints to the SAT model. This elementary technique of adding new constraints with the purpose of enumerating all SAT solutions can also be applied to a general SAT problem (e.g., see Jin, Han & Somenzi, 2005). Notice that this cannot be easily done under the AP framework because such constraints cannot be properly added to the AP. Moreover, we can take advantage of the research effort that has been devoted to SAT, in particular, we can use an effective SAT solver called MiniSat (Ee\u0301n & So\u0308rensson, 2003, 2010).\nIn the conjunctive normal form (CNF), a SAT instance over a set of Boolean variables is a conjunction of clauses, each of which is a disjunction of literals which are Boolean variables or their negations. A clause is satisfied if one of its literals is True, and the instance is satisfied if all its clauses are satisfied. The SAT problem is to find a truth assignment of the variables to satisfy all clauses if they are satisfiable, or to determine no such assignment exists. SAT was the first problem shown to be NP-complete (Cook, 1971; Garey & Johnson, 1979; Karp, 1972).\nWe now formulate the DAP in SAT. A solution to a DAP must obey the following restrictions:\n\u2022 For each vertex i, i = 1, . . . , n, exactly one arc (i, j), i 6= j, exists in the DAP solution.\n\u2022 For each vertex i, i = 1, . . . , n, exactly one arc (j, i), j 6= i, exists in the DAP solution.\nWe first introduce an integer decision variable xi,j to the arc (i, j) \u2208 E where xi,j = 1 holds if and only if the arc (i, j) appears in the DAP solution. We represent the above constraints in the following integer linear program (ILP).{ \u2211n\nj=1,(i,j)\u2208E xi,j = 1 for i = 1, . . . , n\u2211n i=1,(i,j)\u2208E xi,j = 1 for j = 1, . . . , n\n(1)\nwhere xi,j \u2208 {0, 1} for (i, j) \u2208 E. We thus have a total of 2n constraints. Note that we only have to use m variables, one variable for each arc in the graph, which can be substantially smaller than n2 variables for sparse graphs. We represent the integer linear program (1) by a SAT model similar to the work of Lynce and Marques-Silva (2006), where we replace integer variables xi,j with Boolean variables yi,j . To enforce the 2n restrictions in the SAT formulation, we need to introduce constraints in clauses. One restriction in (1) means that exactly one of the up to n involved Boolean variables for a vertex can be set to True and the rest must be False. To represent this, we introduce at most 2n2 auxiliary variables z1, z2, . . . , z2n2 , with up to n z\u2019s for one restriction. Without loss of generality, consider the first restriction, which has z1, z2, . . . , zn associated. We use zk to represent that at least one of y1,1, y1,2, . . . , y1,k is True. Precisely, the z variables are defined as follows.\n\u2022 z1 = y1,1 or equivalently (\u00acy1,1 \u2228 z1) \u2227 (y1,1 \u2228 \u00acz1).\n\u2022 zk = y1,k \u2228 zk\u22121 or equivalently (zk \u2228 \u00acy1,k) \u2227 (zk \u2228 \u00aczk\u22121) \u2227 (\u00aczk \u2228 y1,k \u2228 zk\u22121) for k = 2, 3, . . . , n.\nIn addition, we need to enforce that only one y1,i for i = 1, 2, . . . , n can be True. This means that if y1,k is True, none of the y1,i for i < k can be True. This can be formulated as\n\u2022 \u00aczk\u22121 \u2228 \u00acy1,k for k = 2, 3, . . . , n.\nFinally, zn must be True. The other restrictions in (1) are represented similarly. The SAT based representation allows us to exclude a non-Hamiltonian DAP solution previously found in the search. This can be done by introducing new clauses to explicitly\nforbidding all subcycles of this solution. Let such a subcycle be (v1, v2, . . . , vk, v1). Then we add the clause\n\u00acyv1,v2 \u2228 . . . \u2228 \u00acyvk\u22121,vk \u2228 \u00acyvk,v1\nto the current SAT instance. As a result, the updated SAT instance is not satisfiable, meaning that the corresponding DHCP instance does not contain a HC, or gives rise to a new DAP solution, as it does not allow the previous DAP solution.\nIn summary, after the AP- and patching-related steps failed to find a solution, the APSAT algorithm transforms the problem instance into a SAT instance. Then it collects all previous DAP solutions, each of which includes at least two subcycles, and excludes these subcycles for each of the DAP solutions by adding new clauses as described above. Then the resulting SAT model is solved. If the SAT model is not satisfiable, then the DHCP algorithm terminates with the result of the problem instance being not Hamiltonian. If the SAT model is satisfiable and the solution has only one cycle, the algorithm stops with a HC. If the SAT model is satisfiable, but the solution has more than one subcycle, new clauses are introduced to the SAT model to rule out this solution, and the algorithm repeats to solve the revised formula. Since there is a finite number of DAP solutions, the algorithm terminates. In the worst case if the DAP solutions contain no HC, the SAT part of the algorithm will enumerate all these DAP solutions. For an overview, we outline the main steps of the AP-SAT algorithm in a pseudo code in the appendix."}, {"heading": "2.5 Some General Remarks", "text": "Before we present our experimental results, we like to comment on the method we proposed to help appreciate its features.\n1. The AP-SAT algorithm consists of three main components, namely the AP step, the KSP step and the SAT step. It might be interesting to know which of these components is the most important one. For this, we have to distinguish between completeness and efficacy of the algorithm. The only necessary step for the completeness is the SAT step of Section 2.4. This step without all previous steps leads also to a correct DHCP algorithm. On the other hand, the AP-SAT algorithm is more effective if the AP and the KSP steps are called often and the SAT step is not called or called only a few times. For example, if for an instance no DAP solution exists or an existing HC is found by the previous steps, the SAT part will not be invoked at all. Indeed, our experiments showed that the SAT step is not invoked for most of the test instances. Regarding the relative time needed by the AP and the KSP steps, we have to consider the density of problem instances. For an instance with a small number of arcs, in most cases there is not only no HC solution, but also no DAP solution. In this case the algorithm terminates after the first AP step and does not need to make any KSP call. On the other hand, an instance with a large number of arcs should require many AP steps, as many DAP solutions may exist which are not HCs, and thus a HC solution may have to be found by KSP. This expected behavior could be validated by experiments: the time for the KSP steps is smaller for instances with a small number of arcs, but is larger for instances with a large number of arcs (see Figure 4).\n2. The AP-SAT algorithm is also able to solve HCP as a special case of DHCP, but it is less effective for this case. The reason is that for a symmetric case, an arc and its reverse arc are often present in a DAP solution, resulting in many small cycles of two vertices in the solution. Thus in general we have to enumerate a large number of DAP solutions. In the worst case when no HC exists, all these DAP solutions have to be enumerated, giving rise to a long running time.\n3. We can easily revise the AP-SAT algorithm to identify all HCs in a directed graph. Finding all solutions can be desirable for many applications, e.g., the problem of finding all knight\u2019s tour on a chessboard (Henderson & Apodaca, 2008; Kyek, Parberry & Wegener, 1997). For algorithms for this problem, see the already mentioned algorithm of Martello (1983) and the algorithm of Frieze and Suen (1992). The revision works as follows. If no HC exists, the algorithm remains the same. Consider now the case that at least one HC exists. If the first HC has been found, the original AP-SAT algorithm terminates in this case. The revised algorithm at this stage saves the first HC, and then continues to search for the next HC. In the pseudo code of the appendix, we only need to replace \u201cSTOP with\u201d by \u201cSAVE\u201d in rows 8, 11, and 23. Note that for the revised algorithm, the SAT part is always invoked if at least one HC exists. Furthermore \u2013 like the original AP-SAT algorithm \u2013 this revised algorithm works also for the symmetric case, but is less effective.\n4. The AP-SAT algorithm used a restart scheme, i.e., it repeatedly solved a series of AP instances, which were derived by modifying costs of the arcs appeared in the previous AP solution. Although the restart scheme and the random restart scheme, which was developed for constraint problems in artificial intelligence (Gomes, Selman & Kautz, 1998), follow the same design principle of trying to avoid to encounter the same solutions again in subsequent runs, these two schemes are fundamentally different. As its name indicated, the random restart scheme depends on random choices made for variable and value selections in the process of search for a variable assignment for a constraint problem. In contrast, our restart scheme is not random; the arcs in the current AP solution will receive higher costs so that the subcycles in the current AP solution will less likely be chosen again. In other words, the restart scheme we used is somewhat deterministic and depends on solution structures of the problem.\n5. The method we used to exclude the subcycles in the solution to the current DAP instance from the subsequent SAT solving process follows in principle the popular idea of adding \u201cno-good\u201d constraints to a constraint satisfaction problem (Frost & Dechter, 1994; Richards & Richards, 2000; Zhang, Madigan, Moskewicz & Malik, 2001). Specifically, these subcycles are forbidden by introducing additional constraints."}, {"heading": "3. Experimental Results", "text": "We have implemented the AP-SAT algorithm, the DHCP algorithm of Martello (1983), the DHCP algorithms based on the absolute SAT encoding (Hoos, 1999) and the relative SAT encoding (Prestwich, 2003) in C++ and compared them to an algorithm based on the award-winning Concorde TSP program (Applegate et al., 2005, 2006). For the al-\ngorithm of Martello we have implemented a version which terminates whenever a HC, if one exists, is found. For the SAT based algorithms we used the AP solver of Jonker and Volgenant (1987, 2004) and the MiniSat SAT solver of Ee\u0301n and So\u0308rensson (2003, 2010). To apply Concorde, a DHCP instance was first transformed to an asymmetric TSP instance by the transformation in Section 2.1 and then to a symmetric TSP instance by the 2-point reduction method (Jonker & Volgenant, 1983). In our implementation, the 2-point reduction works as follows for a graph G = (V,E) with V = {v1, v2, . . . , vn}.\n1. Make a copy of the vertices v1, v2, . . . , vn, and create the vertex set V \u2032 := {v\u20321, v\u20322, . . . , v\u2032n}.\n2. Define a new complete graph G\u2032 on the vertex set V \u222a V \u2032 with (symmetric) cost function c\u2032 : V \u222a V \u2032 \u2192 {0; 1; 2} by\nc\u2032(vi, v\u2032j) :=  0 for 1 \u2264 i = j \u2264 n 1 for 1 \u2264 i 6= j \u2264 n, (vi, vj) \u2208 E 2 for 1 \u2264 i 6= j \u2264 n, (vi, vj) /\u2208 E c\u2032(vi, vj) := 2 for 1 \u2264 i 6= j \u2264 n c\u2032(v\u2032i, v \u2032 j) := 2 for 1 \u2264 i 6= j \u2264 n\nThen a directed HC exists on G if and only if a TSP tour of cost n exists on G\u2032. Note that \u2013 in contrast to the general version of the 2-point reduction \u2013 no value of \u2212\u221e is required here. We also tried the 3-point reduction method, which is in principle similar to the 2-point reduction, but uses two (instead of one) copies of the vertex set and uses only cost values from {0; 1}. For the details of the 3-point reduction, see the work of Karp (1972). Our experimental results, which are not included here, showed that the 3-point reduction runs slower on average than the 2-point reduction. Therefore, in the rest of the comparison, we only consider the 2-point reduction.\nAfter the 2-point reduction, Concorde started with the worst possible solution value as the initial upper bound and was terminated as soon as its lower bound indicates a HC is impossible.\nIn addition to this comparison, we also experimentally analyzed the AP-SAT algorithm including its asymptotic behavior, and applied it to study phase transitions of the DHCP. All our experiments were carried out on a PC with an Athlon 1900MP CPU with 2 GB of memory."}, {"heading": "3.1 Comparison of DHCP Algorithms", "text": "In our experiments we first tested random asymmetric instances Gn,m and parameters n = 100, 200, 400, 800, 1600 and m = dc\u00b7n\u00b7(log n+log log n)c with c = 0.5, 0.6, . . . , 1.90, 2.00. For each n and each c we generated 50 random instances and measured the CPU time for these instances. Furthermore, we tested real-world and random instances from the Dimacs challenge (Johnson et al., 2002, 2008) and non-random instances (Reinelt, 1991, 2008). Whereas Tsplib contains 26 single asymmetric TSP instances with sizes from 17 to 443, the Dimacs challenge contains 10 asymmetric problem generators called amat, coin, crane, disk, rect, rtilt, shop, stilt, super, and tmat. Using each of these generators we generated 24\ninstances, 10 with 100 vertices, 10 with 316 vertices, 3 with 1000 vertices, and 1 with 3162 vertices, leading to 240 instances (for each of the 10 problem generators 24 instances) overall. To transform asymmetric TSP instances back to DHCP instances, it seems to be reasonable to only keep the arcs of small weights while ignoring the ones with large weights. In other words, to generate a DHCP instance we chose the m smallest arcs in the corresponding asymmetric TSP instance. It is interesting to note that the most difficult problem instances for most problems in Tsplib and Dimacs appear when the degree parameter c is around 2, which is the value we used in our experiments. In contrast, the most difficult instances of random graphs occur when the degree parameter c is 0.9 (see Section 3.3).\nTo investigate the variation of running time, we present one subfigure for each problem class, i.e., for the 5 random classes with sizes 100, 200, 400, 800, 1600, and for the 10 Dimacs classes amat, coin, crane, disk, rect, rtilt, shop, stilt, super, and tmat. The y-axis gives the average times plus their 95% confidence intervals, where all values are in seconds. For the random classes the x-axis describes the degree parameter c, and for the Dimacs classes it describes the size n. The results for the random instances are summarized in Figure 1 and for the Dimacs instances in Figures 2, 3. As the Tsplib class consists only of 26 single instances with completely different sizes, structures and difficulties, we present these results in Table 1. If an experiment of a single algorithm on a single instance required at least 1 hour or did not terminate due to a high memory requirement, we set the CPU times as \u201c3600 seconds\u201d.\nFigures 1 \u2013 3 and Table 1 show that the two SAT encodings are not competitive with AP-SAT, Concorde or the Martello algorithm. Furthermore, AP-SAT and Concorde are more stable than the Martello algorithm. Concorde failed to solve 16 Dimacs instances (3 coin, 3 crane, 4 rect, 5 stilt, 1 super types) within the maximal allowed time of 1 hour, whereas the AP-SAT algorithm failed only on 7 instances. Among these 7 instances on which AP-SAT failed, 6 are stilt types, and the remaining instance (super3162) could be solved if we increased the maximal allowed time from 1 hour to 4 hours (see Table 2). The Martello algorithm was unable to solve the instances with 800 or larger size because of its high memory requirement. For the other instances, it failed on 1 random instance of size 400 with degree parameter 0.9, on 51 Dimacs instances (10 coin, 12 crane, 11 disk, 11 rect, 7 stilt types), and 9 Tsplib instances (see Table 1). Nevertheless, the Martello algorithm outperformed Concorde on smaller and easier instances, indicating that the former has a worse asymptotic running time. Overall, we observed that the AP-SAT algorithm is clearly superior to the four other algorithms. Among the 4266 instances (4000 random instances, 240 Dimacs instances and 26 Tsplib instances) tested, only on 13 instances, one of the other four algorithms is faster than AP-SAT. These problem instances include 4 random instances, namely 1 of size 400 with degree parameter 0.9, 3 of size 800 with degree parameters 0.8, 0.9, 0.9, respectively, 8 Dimacs instances, namely coin1000-2, rect316-9, stilt100-1, stilt100-5, stilt100-6, stilt100-7, stilt100-8, stilt316-2, and the Tsplib instance br17 (see Table 1)."}, {"heading": "3.2 Analysis of AP-SAT", "text": "The efficacy of the AP-SAT algorithm may be due to the following reasons. Instances with no HC are most likely to have no DAP solution either, and therefore the algorithm terminates after the first AP call. On the other hand, instances with a HC are likely to have multiple HCs, one of which can be found quickly by the AP or KSP steps. The only difficult case is when there are many DAP solutions, but none or a very few of them are HCs. In this case the AP and KSP steps may fail, and the SAT part will be invoked to find a HC or to disprove the existence of a HC.\nIn the following we will analyze the instances where AP-SAT fails or requires much time, and analyze the number r of computing variant AP instances (which we had set to the size of the instance n; see the end of Section 2.3). Therefore we investigated the three procedures in AP-SAT, namely AP, KSP and SAT. We observed that the SAT part was invoked only on 14 out of all 4266 instances tested. We considered these 14 and other two instances (stilt3162 and super3162), on which AP-SAT did not terminate in 1 hour, to be hard. To further analyze these 16 hard instances we increased the maximal allowed time from 1 hour to 4 hours. In Table 2 we present the running times of AP, KSP and SAT, and the number of calls to the three procedures, where the numbers of AP and KSP calls are given in the same column, as these two numbers are equal or different by only one (see the pseudo code in the appendix). Furthermore, we add two additional pieces of information: whether an instance has a HC or whether this is unknown, and whether AP-SAT terminated on the instance in 4 hours. In Table 2, \u201cMemory\u201d means that this part terminated due to a high memory requirement. Note that the solution status of the instance stilt316-2 (\u201cno HC\u201d) was known, since Concorde \u2013 in contrast to AP-SAT \u2013 was able to solve it.\nTable 2 shows that the running time of AP/KSP contributed to the majority of the total running time of AP-SAT only on 4 out of the 16 hard instances, i.e., coin1000-2 and rect316-9, and the two instances stilt3162 and super3162 on which SAT is not invoked at all. On 6 instances, AP-SAT did not terminate. On 5 out of these 6 instances, i.e., stilt3162, stilt316-4, stilt316-5, stilt1000-1, and stilt1000-2, the SAT part did not terminate in a reasonable amount of time or the algorithm stopped due to a high memory requirement of SAT.\nIn order to determine r, we re-ran all instances in Table 2 with three different values of r, i.e., r = 0, r = n/2, and r = 2n. The results (not presented) showed that when AP-SAT was unable to terminate with r = n (i.e., on the 6 instances stilt316-2, stilt316-4, stilt316-5, stilt1000-1, stilt1000-2, and stilt3162), it also failed to stop with other values of r. For all remaining 10 instances, increasing r = n to r = 2n did not reduce the running times. This is reasonable for the two instances coin1000-2 and rect316-9 with a large AP/KSP time, as they have no HC. On the other hand, these two instances are the only ones on which AP-SAT ran faster by using smaller values of r, namely coin1000-2 by using r = n/2 and rect316-9 by using r = 0.\nWe thus conclude that r should not be increased, but rather be decreased. As it is hard to estimate the memory requirements and the time of the SAT part, one alternative for difficult instances would be to start AP-SAT with a smaller parameter r and then to stop the SAT part after some time or after one unsuccessful call. After that the complete APSAT algorithm can be restarted with a larger r. For most instances, however, the choice of\nr is not relevant. More difficult problem instances are required to perform a comprehensive analysis of r.\nFinally, in Figure 4 we compare the times used by AP and KSP on random instances of size 1600 with degree parameter c = 0.5, 0.6, . . . , 1.90, 2.00.\nWe observe that AP is more time consuming than KSP. With a smaller c this effect is more obvious because most instances can be solved with a result of \u201cNo HC\u201d after the first AP call, and thus the KSP does not need to be invoked at all."}, {"heading": "3.3 Phase Transitions of the DHCP", "text": "For random undirected graphs Gn,m, where m arcs are randomly chosen from all possible n(n\u2212 1)/2 arcs over n vertices in the graph, Komlo\u0301s and Szemere\u0301di (1983) proved a phase transition of c \u00b7 dn \u00b7 (log n+ log log n)/2c with c = 1 for the HCP. Vandegriend and Culberson (1998) experimentally verified the theoretical result, where the constant c is between 1.08 and 1.10. For the DHCP, where m arcs are randomly chosen from all possible n(n\u22121) arcs, McDiarmid proved a phase transition of m = c\u00b7dn\u00b7(log n+log log n)c with c = 1 (1980). Our experiments were aimed to verify this result and determine the multiplicative constant c. As a directed graph may contain twice as many arcs as the undirected counterpart, we would expect the number of arcs to be doubled as well at the phase transition point. Therefore we tested m = dc \u00b7 n \u00b7 (log n + log log n)c with c = 0.5, 0.6, 0.7, 0.8, 0.81, 0.82, . . . , 1.19, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00, where we expected the phase transition to occur at c = 1. We considered problem instances with n = 128, 256, 512, 1024, 2048, 4096, 8192 vertices and chose 1000 independently generated random graphs for each n and for each c.\nThe phase transition result is shown in Table 3 and Figure 5, where the first parameter is c and the second parameter the percentage of Hamiltonian graphs among all graphs considered. We observe a phase transition of the DHCP similar to that of the HCP. In particular, it is evident from Figure 5 that the phase transition becomes sharper, i.e., there is a crossover among the phase transition curves, when the problem size increases, which is characteristic for phase transitions in complex systems. This crossover occurs around the degree parameter c = 0.9, which is substantially different from the expected value of 1. In short, our observations verified the existence of a phase transition of the DHCP, and the phase transition occurs at dc \u00b7 n \u00b7 (log n + log log n)c with approximately c = 0.9. Furthermore, for the same constant c = 0.9, the probability that Gn,m is Hamiltonian is 1/2. As a comparison, for undirected graphs, a constant between 1.08 and 1.10 was found (Vandegriend & Culberson, 1998)."}, {"heading": "3.4 Asymptotic Behavior of AP-SAT", "text": "An interesting characteristic of an algorithm is its asymptotic behavior. To quantify this behavior for the AP-SAT algorithm, we revisited the experiments of Section 3.3, i.e., the experiments that verified the phase transitions of the DHCP. As described earlier, we considered random problem instances with n = 128, 256, 512, 1024, 2048, 4096, 8192 vertices and chose 1000 independently generated random graphs for each n and for each c. To measure the worst-case asymptotic behavior of AP-SAT, we only measured the CPU times of the algorithm on the most difficult instances, i.e., the instances with degree parameter c = 0.9 (see Section 3.3). The results can be found in Figure 6, where the x-axis is the problem size and the y-axis the average time required. Since both, x- and y-axis are in logarithmic scale and the log-log curve in Figure 6 is nearly linear, the average running time of AP-SAT can be considered to be polynomial on the number n of vertices in the graph. This is reasonable, as for random instances the SAT part was not called at all (see Section 3.2), and the AP and KSP combined has a complexity not worse than O(n3)."}, {"heading": "4. Summary", "text": "The Hamiltonian cycle problem (HCP) is an important, canonical combinatorial problem. Surprisingly, for the HCP in directed graphs, which we called directed HCP or DHCP, no effective exact algorithm has been developed. Our main result of this work is a novel and effective exact algorithm for the DHCP. Our algorithm utilizes an existing algorithm for the assignment problem and an existing method for Boolean satisfiability (SAT). Our work includes a new SAT formulation of the HCP and the AP, which can be potentially extended to other problems such as the TSP. Our experimental results on random and real problem instances showed that our new algorithm is superior to four known algorithms including one algorithm that takes advantage of the award-winning Concorde TSP algorithm. Furthermore, the first phase transition result on combinatorial problems was done on the HCP and later was extended to the DHCP. In this paper we experimentally verified the existence of a phase transition of the DHCP and refined the location where such a phase transition appears using our new exact DHCP algorithm."}, {"heading": "Acknowledgments", "text": "We thank David S. Johnson at AT&T Labs - Research and Gregory Gutin at Royal Holloway University of London for many discussions related to this work and their insightful comments on our manuscript. This research was supported in part by NSF grants IIS-0535257 and DBI-0743797 to Weixiong Zhang."}, {"heading": "Appendix A. Pseudo Code of AP-SAT Algorithm", "text": "INPUT Directed non-complete graph G = (V,E) with |V | = n. 1 Define matrix C as in Section 2.1, M := 1. 2 Define subcycle collection set W := \u2205. 3 FOR s = 1, . . . , n 4 Solve AP on instance matrix C with solution value g, AP solution\n(v1, vi1), (v2, vi2) . . . , (vn\u22121, vin\u22121), (vn, vin), number of cycles k. 5 IF g \u2265M 6 THEN STOP with No HC. 7 ELSE IF k = 1 8 THEN STOP with HC being the AP solution. 9 Apply KSP to the cycles, and receive solution value h and complete\ncycle (w1, w2, . . . , wn, w1). 10 IF h = 0 11 THEN STOP with HC (w1, w2, . . . , wn, w1). 12 FOR t = 1, . . . , n 13 cvt,vit = cvt,vit + 1 14 M = n \u00b7max {ci,j | (i, j) \u2208 E}+ 1. 15 ci,j = M for all (i, j) /\u2208 E. 16 Add each subcycle of AP solution to W . 17 Start with the SAT model explained in Section 2.4. 18 For each subcycle (v1, v2, . . . , vk\u22121, vk, v1) of W add the clause \u00acyv1,v2 \u2228 . . . \u2228 \u00acyvk\u22121,vk \u2228 \u00acyvk,v1 to the SAT model. 19 Solve the SAT model. 20 IF Variable setting exists for the model. 21 THEN Add all k subcycles of the solution of the SAT model to W . 22 IF k = 1 23 THEN STOP with HC being the only subcycle. 24 GOTO 19. 25 ELSE STOP with No HC. OUTPUT HC of G, or proof that No HC exists in G."}], "references": [{"title": "Fast Probabilistic Algorithms for Hamiltonian Circuits and Matchings", "author": ["D. Angluin", "L.G. Valiant"], "venue": "J. Comput. System. Sci", "citeRegEx": "Angluin and Valiant,? \\Q1979\\E", "shortCiteRegEx": "Angluin and Valiant", "year": 1979}, {"title": "The Traveling Salesman Problem. A Computational Study", "author": ["D.L. Applegate", "R.E. Bixby", "V. Chv\u00e1tal", "W.J. Cook"], "venue": null, "citeRegEx": "Applegate et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Applegate et al\\.", "year": 2006}, {"title": "Certification of an Optimal Tour through 85,900 Cities", "author": ["D.L. Applegate", "R.E. Bixby", "V. Chv\u00e1tal", "W.J. Cook", "D. Espinoza", "M. Goycoolea", "K. Helsgaun"], "venue": "Oper. Res. Lett", "citeRegEx": "Applegate et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Applegate et al\\.", "year": 2009}, {"title": "Chapter 5 in: Digraphs: Theory, Algorithms and Applications", "author": ["J. Bang-Jensen", "G. Gutin"], "venue": null, "citeRegEx": "Bang.Jensen and Gutin,? \\Q2008\\E", "shortCiteRegEx": "Bang.Jensen and Gutin", "year": 2008}, {"title": "A New Algorithm for the Assignment Problem", "author": ["D.P. Bertsekas"], "venue": "Math. Program. 21, 152-171.", "citeRegEx": "Bertsekas,? 1981", "shortCiteRegEx": "Bertsekas", "year": 1981}, {"title": "Random Graphs", "author": ["B. Bollob\u00e1s"], "venue": "Academic Press, London.", "citeRegEx": "Bollob\u00e1s,? 1985", "shortCiteRegEx": "Bollob\u00e1s", "year": 1985}, {"title": "An Algorithm for Finding Hamiltonian Paths and Cycles in Random Graphs", "author": ["B. Bollob\u00e1s", "T.I. Fenner", "A.M. Frieze"], "venue": null, "citeRegEx": "Bollob\u00e1s et al\\.,? \\Q1987\\E", "shortCiteRegEx": "Bollob\u00e1s et al\\.", "year": 1987}, {"title": "Basic Graph Theory: Paths and Circuits", "author": ["J.A. Bondy"], "venue": "Graham, R.L., Gr\u00f6tschel, M., Lovasz, L. (Eds.): Handbook of Combinatorics I (3-110). North-Holland, Amsterdam.", "citeRegEx": "Bondy,? 1995", "shortCiteRegEx": "Bondy", "year": 1995}, {"title": "Where the Really Hard Problems Are", "author": ["P. Cheeseman", "B. Kanefsky", "W.M. Taylor"], "venue": "Proc. 12th International Conference on Joint Artificial Intelligence (IJCAI),", "citeRegEx": "Cheeseman et al\\.,? \\Q1991\\E", "shortCiteRegEx": "Cheeseman et al\\.", "year": 1991}, {"title": "Graph Theory \u2013 An Algorithmic Approach", "author": ["N. Christofides"], "venue": "Academic Press, New York.", "citeRegEx": "Christofides,? 1975", "shortCiteRegEx": "Christofides", "year": 1975}, {"title": "Hamiltonian Cycles", "author": ["V. Chv\u00e1tal"], "venue": "Chapter 11 in Lawler, E.L., Lenstra, J.K., Rinnooy Kan, A.H.G., Shmoys, D.B. (Eds.): The Traveling Salesman Problem. A Guided Tour of Combinatorial Optimization. John Wiley & Sons, Chichester.", "citeRegEx": "Chv\u00e1tal,? 1985", "shortCiteRegEx": "Chv\u00e1tal", "year": 1985}, {"title": "The Complexity of Theorem-Proving Procedures", "author": ["S.A. Cook"], "venue": "Proc. 3rd Ann. ACM Symp. on Theory of Computing (STOC), 151-158.", "citeRegEx": "Cook,? 1971", "shortCiteRegEx": "Cook", "year": 1971}, {"title": "Constraint Processing", "author": ["R. Dechter"], "venue": "Morgan Kaufmann.", "citeRegEx": "Dechter,? 2003", "shortCiteRegEx": "Dechter", "year": 2003}, {"title": "Algorithms and Codes for Dense Assignment Problems: the State of the Art", "author": ["M. Dell\u2019Amico", "P. Toth"], "venue": "Discrete Appl. Math", "citeRegEx": "Dell.Amico and Toth,? \\Q2000\\E", "shortCiteRegEx": "Dell.Amico and Toth", "year": 2000}, {"title": "An Extensible SAT-Solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "Proc. 6th International Conference on Theory and Applications of Satisfiability Testing (SAT). Lecture Notes in Comput", "citeRegEx": "E\u00e9n and S\u00f6rensson,? \\Q2003\\E", "shortCiteRegEx": "E\u00e9n and S\u00f6rensson", "year": 2003}, {"title": "Asymptotic and Finite Size Parameters for Phase Transitions: Hamiltonian Circuit as a Case Study", "author": ["J. Frank", "I. Gent", "T. Walsh"], "venue": "Inform. Process. Lett", "citeRegEx": "Frank et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Frank et al\\.", "year": 1998}, {"title": "Finding Hamiltonian Cycles in Sparse Random Graphs", "author": ["A.M. Frieze"], "venue": "J. Combin. Theory Ser. B 44, 230-250.", "citeRegEx": "Frieze,? 1988a", "shortCiteRegEx": "Frieze", "year": 1988}, {"title": "An Algorithm for Finding Hamilton Cycles in Random Directed Graphs", "author": ["A.M. Frieze"], "venue": "J. Algorithms 9, 181-204.", "citeRegEx": "Frieze,? 1988b", "shortCiteRegEx": "Frieze", "year": 1988}, {"title": "Counting Hamilton Cycles in Random Directed Graphs", "author": ["A.M. Frieze", "S. Suen"], "venue": "Random Structures Algorithms", "citeRegEx": "Frieze and Suen,? \\Q1992\\E", "shortCiteRegEx": "Frieze and Suen", "year": 1992}, {"title": "Dead-End Driven Learning", "author": ["D. Frost", "R. Dechter"], "venue": "Proc. 12th National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Frost and Dechter,? \\Q1994\\E", "shortCiteRegEx": "Frost and Dechter", "year": 1994}, {"title": "8th Dimacs Implementation Challenge: The Traveling Salesman Problem", "author": ["D.S. Johnson"], "venue": null, "citeRegEx": "Johnson,? \\Q2008\\E", "shortCiteRegEx": "Johnson", "year": 2008}, {"title": "Computers and Intractability. A Guide to the Theory of NP-Completeness", "author": ["D.S. Johnson"], "venue": null, "citeRegEx": "Garey and Johnson,? \\Q1979\\E", "shortCiteRegEx": "Garey and Johnson", "year": 1979}, {"title": "Construction Heuristics for the Asymmetric TSP", "author": ["F. Glover", "G. Gutin", "A. Yeo", "A. Zverovich"], "venue": "European J. Oper. Res", "citeRegEx": "Glover et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Glover et al\\.", "year": 2001}, {"title": "An Efficient Cost Scaling Algorithm for the Assignment Problem", "author": ["A.V. Goldberg", "R. Kennedy"], "venue": "Math. Program", "citeRegEx": "Goldberg and Kennedy,? \\Q1995\\E", "shortCiteRegEx": "Goldberg and Kennedy", "year": 1995}, {"title": "Tolerance Based Contract-or-Patch Heuristic for the Asymmetric TSP", "author": ["B. Goldengorin", "G. J\u00e4ger", "P. Molitor"], "venue": "Proc. 3rd Workshop on Combinatorial and Algorithmic Aspects of Networking (CAAN). Lecture Notes in Comput", "citeRegEx": "Goldengorin et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Goldengorin et al\\.", "year": 2006}, {"title": "Boosting Combinatorial Search Through Randomization", "author": ["C.P. Gomes", "B. Selman", "H. Kautz"], "venue": "Proc. 15th National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Gomes et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Gomes et al\\.", "year": 1998}, {"title": "Updating the Hamiltonian Problem \u2013 a Survey", "author": ["R.J. Gould"], "venue": "J. Graph Theory 15(2), 121-157.", "citeRegEx": "Gould,? 1991", "shortCiteRegEx": "Gould", "year": 1991}, {"title": "Reconstructing a Hamiltonian Circuit by Querying the Graph: Application to DNA Physical Mapping", "author": ["V. Grebinski", "G. Kucherov"], "venue": "IR 96-R-123, Centre de Recherche en Informatique de Nancy", "citeRegEx": "Grebinski and Kucherov,? \\Q1996\\E", "shortCiteRegEx": "Grebinski and Kucherov", "year": 1996}, {"title": "A Knight of Egodeth: Zen Raptured Quietude", "author": ["R. Henderson", "E. Apodaca"], "venue": null, "citeRegEx": "Henderson and Apodaca,? \\Q2008\\E", "shortCiteRegEx": "Henderson and Apodaca", "year": 2008}, {"title": "SAT-Encodings, Search Space Structure, and Local Search Performance", "author": ["H.H. Hoos"], "venue": "Proc. 16th International Joint Conference on Artificial Intelligence (IJCAI), 296-303. Morgan Kaufmann.", "citeRegEx": "Hoos,? 1999", "shortCiteRegEx": "Hoos", "year": 1999}, {"title": "Efficient Conflict Analysis for Finding All Satisfying Assignments of a Boolean Circuit", "author": ["H. Jin", "H. Han", "F. Somenzi"], "venue": "Proc. 11th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS). Lecture Notes in Comput", "citeRegEx": "Jin et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Jin et al\\.", "year": 2005}, {"title": "Experimental Analysis of Heuristics for the ATSP", "author": ["D.S. Johnson", "G Gutin", "L.A. McGeoch", "A. Yeo", "W. Zhang", "A. Zverovich"], "venue": null, "citeRegEx": "Johnson et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2002}, {"title": "Transforming Asymmetric into Symmetric Traveling Salesman Problems", "author": ["R. Jonker", "A. Volgenant"], "venue": "Oper. Res. Lett", "citeRegEx": "Jonker and Volgenant,? \\Q1983\\E", "shortCiteRegEx": "Jonker and Volgenant", "year": 1983}, {"title": "A Shortest Augmenting Path Algorithm for Dense and Sparse Linear Assignment Problems", "author": ["R. Jonker", "A. Volgenant"], "venue": "Computing", "citeRegEx": "Jonker and Volgenant,? \\Q1987\\E", "shortCiteRegEx": "Jonker and Volgenant", "year": 1987}, {"title": "The Bottleneck TSP", "author": ["S.N. Kabadi", "A.P. Punnen"], "venue": null, "citeRegEx": "Kabadi and Punnen,? \\Q2002\\E", "shortCiteRegEx": "Kabadi and Punnen", "year": 2002}, {"title": "Reducibility Among Combinatorial Problems", "author": ["R.M. Karp"], "venue": "Miller, R.E., Thatcher, J.W. (Eds.): Complexity of Computer Computations, 85-103. New York: Plenum.", "citeRegEx": "Karp,? 1972", "shortCiteRegEx": "Karp", "year": 1972}, {"title": "Probabilistic Analysis of Heuristics", "author": ["R.M. Karp", "J.M. Steele"], "venue": null, "citeRegEx": "Karp and Steele,? \\Q1985\\E", "shortCiteRegEx": "Karp and Steele", "year": 1985}, {"title": "Hamilton Cycles in Directed Graphs", "author": ["L. Kelly"], "venue": "PhD Thesis, University of Birmingham, United Kingdom.", "citeRegEx": "Kelly,? 2007", "shortCiteRegEx": "Kelly", "year": 2007}, {"title": "Limit Distribution for the Existence of a Hamiltonian Cycle in a Random Graph", "author": ["M. Koml\u00f3s", "E. Szemer\u00e9di"], "venue": "Discrete Math", "citeRegEx": "Koml\u00f3s and Szemer\u00e9di,? \\Q1983\\E", "shortCiteRegEx": "Koml\u00f3s and Szemer\u00e9di", "year": 1983}, {"title": "Efficient Haplotype Inference with Boolean Satisfiability", "author": ["I. Lynce", "J. Marques-Silva"], "venue": "Proc. 21st National Conference on Artificial Intelligence (AAAI)", "citeRegEx": "Lynce and Marques.Silva,? \\Q2006\\E", "shortCiteRegEx": "Lynce and Marques.Silva", "year": 2006}, {"title": "An Enumerative Algorithm for Finding Hamiltonian Circuits in a Directed Graph", "author": ["S. Martello"], "venue": "ACM Trans. Math. Software 9(1), 131-138.", "citeRegEx": "Martello,? 1983", "shortCiteRegEx": "Martello", "year": 1983}, {"title": "Cluster Percolation and Random Graphs", "author": ["C.J.H. McDiarmid"], "venue": "Math. Program. Stud. 13, 17-25.", "citeRegEx": "McDiarmid,? 1980", "shortCiteRegEx": "McDiarmid", "year": 1980}, {"title": "Determining Computational Complexity from Characteristic \u2019Phase Transitions", "author": ["R. Monasson", "R. Zecchina", "S. Kirkpatrick", "B. Selman", "L. Troyansky"], "venue": null, "citeRegEx": "Monasson et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Monasson et al\\.", "year": 1999}, {"title": "SAT Problems with Chains of Dependent Variables", "author": ["S. Prestwich"], "venue": "Discrete Appl. Math. 130(2), 329-350.", "citeRegEx": "Prestwich,? 2003", "shortCiteRegEx": "Prestwich", "year": 2003}, {"title": "Hamiltonian Circuits in Random Graphs", "author": ["L. P\u00f3sa"], "venue": "Discrete Math. 14, 359-364.", "citeRegEx": "P\u00f3sa,? 1976", "shortCiteRegEx": "P\u00f3sa", "year": 1976}, {"title": "TSPLIB \u2013 a Traveling Salesman Problem Library", "author": ["G. Reinelt"], "venue": "ORSA J. Comput. 3, 376-384.", "citeRegEx": "Reinelt,? 1991", "shortCiteRegEx": "Reinelt", "year": 1991}, {"title": "Non-Systematic Search and No-Good Learning", "author": ["E.T. Richards", "B. Richards"], "venue": "J. Automat. Reason", "citeRegEx": "Richards and Richards,? \\Q2000\\E", "shortCiteRegEx": "Richards and Richards", "year": 2000}, {"title": "Finding Hamiltonian Cycles: Algorithms, Graphs and Performance", "author": ["B. Vandegriend"], "venue": "Master Thesis, University of Alberta, Canada.", "citeRegEx": "Vandegriend,? 1998", "shortCiteRegEx": "Vandegriend", "year": 1998}, {"title": "The Gn,m Phase Transition is Not Hard for the Hamiltonian Cycle Problem", "author": ["B. Vandegriend", "J. Culberson"], "venue": "J. Artificial Intelligence Res", "citeRegEx": "Vandegriend and Culberson,? \\Q1998\\E", "shortCiteRegEx": "Vandegriend and Culberson", "year": 1998}, {"title": "Efficient SAT Techniques for Absolute Encoding of Permutation Problems: Application to Hamiltonian Cycles", "author": ["M.N. Velev", "P. Gao"], "venue": "Proc. 8th Symposium on Abstraction, Reformulation and Approximation (SARA),", "citeRegEx": "Velev and Gao,? \\Q2009\\E", "shortCiteRegEx": "Velev and Gao", "year": 2009}, {"title": "A Study of Complexity Transitions on the Asymmetric Traveling Salesman Problem", "author": ["W. Zhang", "R.E. Korf"], "venue": "Artificial Intelligence", "citeRegEx": "Zhang and Korf,? \\Q1996\\E", "shortCiteRegEx": "Zhang and Korf", "year": 1996}, {"title": "Efficient Conflict Driven Learning in a Boolean Satisfiability Solver", "author": ["L. Zhang", "C.F. Madigan", "M.H. Moskewicz", "S. Malik"], "venue": "Proc. IEEE/ACM International Conference on Computer Aided Design (ICCAD),", "citeRegEx": "Zhang et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2009}], "referenceMentions": [{"referenceID": 35, "context": "The decision version of the HCP is among the first problems that were proven to beNP-complete (Karp, 1972).", "startOffset": 94, "endOffset": 106}, {"referenceID": 16, "context": "In particular, many algorithms have been developed for the HCP (Angluin & Valiant, 1979; Bollob\u00e1s, Fenner & Frieze, 1987; Frieze, 1988a; P\u00f3sa, 1976; Vandegriend, 1998), as reviewed in the Stony Brook Algorithm Repository (Skiena, 2008).", "startOffset": 63, "endOffset": 167}, {"referenceID": 44, "context": "In particular, many algorithms have been developed for the HCP (Angluin & Valiant, 1979; Bollob\u00e1s, Fenner & Frieze, 1987; Frieze, 1988a; P\u00f3sa, 1976; Vandegriend, 1998), as reviewed in the Stony Brook Algorithm Repository (Skiena, 2008).", "startOffset": 63, "endOffset": 167}, {"referenceID": 47, "context": "In particular, many algorithms have been developed for the HCP (Angluin & Valiant, 1979; Bollob\u00e1s, Fenner & Frieze, 1987; Frieze, 1988a; P\u00f3sa, 1976; Vandegriend, 1998), as reviewed in the Stony Brook Algorithm Repository (Skiena, 2008).", "startOffset": 63, "endOffset": 167}, {"referenceID": 6, "context": "For reviews, see the work of Bondy (1995), Christofides (1975), Chv\u00e1tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000).", "startOffset": 29, "endOffset": 42}, {"referenceID": 6, "context": "For reviews, see the work of Bondy (1995), Christofides (1975), Chv\u00e1tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000).", "startOffset": 29, "endOffset": 63}, {"referenceID": 6, "context": "For reviews, see the work of Bondy (1995), Christofides (1975), Chv\u00e1tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000).", "startOffset": 29, "endOffset": 79}, {"referenceID": 6, "context": "For reviews, see the work of Bondy (1995), Christofides (1975), Chv\u00e1tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000).", "startOffset": 29, "endOffset": 93}, {"referenceID": 6, "context": "For reviews, see the work of Bondy (1995), Christofides (1975), Chv\u00e1tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000).", "startOffset": 29, "endOffset": 113}, {"referenceID": 6, "context": "For reviews, see the work of Bondy (1995), Christofides (1975), Chv\u00e1tal (1985), Gould (1991), Vandegriend (1998), and Gutin and Moscato (2000). In particular, many algorithms have been developed for the HCP (Angluin & Valiant, 1979; Bollob\u00e1s, Fenner & Frieze, 1987; Frieze, 1988a; P\u00f3sa, 1976; Vandegriend, 1998), as reviewed in the Stony Brook Algorithm Repository (Skiena, 2008).", "startOffset": 29, "endOffset": 143}, {"referenceID": 5, "context": "Surprisingly, the probability of being Hamiltonian for Gn,m exhibits a sharp, dramatic transition from 0 to 1, and the transition occurs approximately when m = dc \u00b7 n \u00b7 (log n + log log n)/2c (Bollob\u00e1s, 1985; Cheeseman, Kanefsky & Taylor, 1991; Koml\u00f3s & Szemer\u00e9di, 1983).", "startOffset": 192, "endOffset": 270}, {"referenceID": 37, "context": "In contrast to the extensive amount of work on the HCP for undirected graphs, the research on the DHCP is rather limited (Angluin & Valiant, 1979; Bang-Jensen & Gutin, 2008; Kelly, 2007).", "startOffset": 121, "endOffset": 186}, {"referenceID": 29, "context": ", the absolute encoding (Hoos, 1999) and the relative encoding (Prestwich, 2003; see also Velev & Gao, 2009).", "startOffset": 24, "endOffset": 36}, {"referenceID": 43, "context": ", the absolute encoding (Hoos, 1999) and the relative encoding (Prestwich, 2003; see also Velev & Gao, 2009).", "startOffset": 63, "endOffset": 108}, {"referenceID": 17, "context": "5) was proposed (Frieze, 1988b).", "startOffset": 16, "endOffset": 31}, {"referenceID": 41, "context": "For the DHCP, a phase transition result similar to that of the HCP has been obtained as well, namely the phase transition occurs at m = dc \u00b7n \u00b7 (log n+ log log n)c (McDiarmid, 1980), where the constant c was expected to be close to 1.", "startOffset": 164, "endOffset": 181}, {"referenceID": 2, "context": "Concorde has solved many large benchmark instances (Cook, 2010), including a TSP instance with 85, 900 cities (Applegate et al., 2009), which up to date is the largest solved practical TSP instance.", "startOffset": 110, "endOffset": 134}, {"referenceID": 3, "context": "Surprisingly, the probability of being Hamiltonian for Gn,m exhibits a sharp, dramatic transition from 0 to 1, and the transition occurs approximately when m = dc \u00b7 n \u00b7 (log n + log log n)/2c (Bollob\u00e1s, 1985; Cheeseman, Kanefsky & Taylor, 1991; Koml\u00f3s & Szemer\u00e9di, 1983). Furthermore, it was experimentally shown that when the constant c is between 1.08 and 1.10, the probability that Gn,m is Hamiltonian is 1/2 (Vandegriend & Culberson, 1998). Phase transitions in the HCP have also been studied under other different control parameters, for example, the so called general constrainedness parameter (Frank, Gent & Walsh, 1998). The phase transition result of the HCP has motivated a substantial amount of research on phase transitions of other combinatorial problems, particularly the TSP (Zhang & Korf, 1996) and Boolean satisfiability (Monasson, Zecchina, Kirkpatrick & Selman, 1999). In this study we consider the HCP in directed graphs, which we call directed HCP, or DHCP for short. In addition to the known applications of the HCP mentioned above, an interesting application of the DHCP is that DHCP heuristics can be used to solve the Bottleneck TSP (Kabadi & Punnen, 2002). In contrast to the extensive amount of work on the HCP for undirected graphs, the research on the DHCP is rather limited (Angluin & Valiant, 1979; Bang-Jensen & Gutin, 2008; Kelly, 2007). The first exact algorithm for the DHCP was developed by Martello (1983). This algorithm outputs a fixed number h of HCs or reports that it cannot find h HCs in a given directed graph.", "startOffset": 193, "endOffset": 1443}, {"referenceID": 29, "context": ", 2005, 2006) and the above-mentioned SAT encodings for the DHCP (Hoos, 1999; Prestwich, 2003).", "startOffset": 65, "endOffset": 94}, {"referenceID": 43, "context": ", 2005, 2006) and the above-mentioned SAT encodings for the DHCP (Hoos, 1999; Prestwich, 2003).", "startOffset": 65, "endOffset": 94}, {"referenceID": 37, "context": "Using random graphs and many real world instances, we experimentally compare the AP-SAT algorithm with the DHCP algorithm of Martello (1983), the TSP based approach that takes advantage of the TSP solver Concorde (Applegate et al.", "startOffset": 125, "endOffset": 141}, {"referenceID": 41, "context": "The second contribution is an experimental study and refinement of the known phase transition result on the existence of a HC in a random directed graph (McDiarmid, 1980), as similarly done for the HCP (Vandegriend & Culberson, 1998).", "startOffset": 153, "endOffset": 170}, {"referenceID": 4, "context": "Many algorithms have been developed for the AP (Bertsekas, 1981; Goldberg & Kennedy, 1995; Jonker & Volgenant, 1987).", "startOffset": 47, "endOffset": 116}, {"referenceID": 12, "context": "To this end, we first formulate a DAP as a Boolean satisfiability (SAT) problem (Dechter, 2003) and forbid a DAP solution by adding new constraints to the SAT model.", "startOffset": 80, "endOffset": 95}, {"referenceID": 11, "context": "SAT was the first problem shown to be NP-complete (Cook, 1971; Garey & Johnson, 1979; Karp, 1972).", "startOffset": 50, "endOffset": 97}, {"referenceID": 35, "context": "SAT was the first problem shown to be NP-complete (Cook, 1971; Garey & Johnson, 1979; Karp, 1972).", "startOffset": 50, "endOffset": 97}, {"referenceID": 39, "context": "We represent the integer linear program (1) by a SAT model similar to the work of Lynce and Marques-Silva (2006), where we replace integer variables xi,j with Boolean variables yi,j .", "startOffset": 82, "endOffset": 113}, {"referenceID": 37, "context": "For algorithms for this problem, see the already mentioned algorithm of Martello (1983) and the algorithm of Frieze and Suen (1992).", "startOffset": 72, "endOffset": 88}, {"referenceID": 16, "context": "For algorithms for this problem, see the already mentioned algorithm of Martello (1983) and the algorithm of Frieze and Suen (1992). The revision works as follows.", "startOffset": 109, "endOffset": 132}, {"referenceID": 29, "context": "We have implemented the AP-SAT algorithm, the DHCP algorithm of Martello (1983), the DHCP algorithms based on the absolute SAT encoding (Hoos, 1999) and the relative SAT encoding (Prestwich, 2003) in C++ and compared them to an algorithm based on the award-winning Concorde TSP program (Applegate et al.", "startOffset": 136, "endOffset": 148}, {"referenceID": 43, "context": "We have implemented the AP-SAT algorithm, the DHCP algorithm of Martello (1983), the DHCP algorithms based on the absolute SAT encoding (Hoos, 1999) and the relative SAT encoding (Prestwich, 2003) in C++ and compared them to an algorithm based on the award-winning Concorde TSP program (Applegate et al.", "startOffset": 179, "endOffset": 196}, {"referenceID": 37, "context": "We have implemented the AP-SAT algorithm, the DHCP algorithm of Martello (1983), the DHCP algorithms based on the absolute SAT encoding (Hoos, 1999) and the relative SAT encoding (Prestwich, 2003) in C++ and compared them to an algorithm based on the award-winning Concorde TSP program (Applegate et al.", "startOffset": 64, "endOffset": 80}, {"referenceID": 35, "context": "For the details of the 3-point reduction, see the work of Karp (1972). Our experimental results, which are not included here, showed that the 3-point reduction runs slower on average than the 2-point reduction.", "startOffset": 58, "endOffset": 70}, {"referenceID": 38, "context": "For random undirected graphs Gn,m, where m arcs are randomly chosen from all possible n(n\u2212 1)/2 arcs over n vertices in the graph, Koml\u00f3s and Szemer\u00e9di (1983) proved a phase transition of c \u00b7 dn \u00b7 (log n+ log log n)/2c with c = 1 for the HCP.", "startOffset": 131, "endOffset": 159}, {"referenceID": 38, "context": "For random undirected graphs Gn,m, where m arcs are randomly chosen from all possible n(n\u2212 1)/2 arcs over n vertices in the graph, Koml\u00f3s and Szemer\u00e9di (1983) proved a phase transition of c \u00b7 dn \u00b7 (log n+ log log n)/2c with c = 1 for the HCP. Vandegriend and Culberson (1998) experimentally verified the theoretical result, where the constant c is between 1.", "startOffset": 131, "endOffset": 276}, {"referenceID": 38, "context": "For random undirected graphs Gn,m, where m arcs are randomly chosen from all possible n(n\u2212 1)/2 arcs over n vertices in the graph, Koml\u00f3s and Szemer\u00e9di (1983) proved a phase transition of c \u00b7 dn \u00b7 (log n+ log log n)/2c with c = 1 for the HCP. Vandegriend and Culberson (1998) experimentally verified the theoretical result, where the constant c is between 1.08 and 1.10. For the DHCP, where m arcs are randomly chosen from all possible n(n\u22121) arcs, McDiarmid proved a phase transition of m = c\u00b7dn\u00b7(log n+log log n)c with c = 1 (1980). Our experiments were aimed to verify this result and determine the multiplicative constant c.", "startOffset": 131, "endOffset": 534}], "year": 2010, "abstractText": "The Hamiltonian cycle problem (HCP) is an important combinatorial problem with applications in many areas. It is among the first problems used for studying intrinsic properties, including phase transitions, of combinatorial problems. While thorough theoretical and experimental analyses have been made on the HCP in undirected graphs, a limited amount of work has been done for the HCP in directed graphs (DHCP). The main contribution of this work is an effective algorithm for the DHCP. Our algorithm explores and exploits the close relationship between the DHCP and the Assignment Problem (AP) and utilizes a technique based on Boolean satisfiability (SAT). By combining effective algorithms for the AP and SAT, our algorithm significantly outperforms previous exact DHCP algorithms, including an algorithm based on the award-winning Concorde TSP algorithm. The second result of the current study is an experimental analysis of phase transitions of the DHCP, verifying and refining a known phase transition of the DHCP.", "creator": "TeX"}}}