{"id": "1412.6806", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Dec-2014", "title": "Striving for Simplicity: The All Convolutional Net", "abstract": "Most common convolutional electrodes networks (CNNs) not which precisely recognition are incorporated using the it principles: Alternating convolution their weber - work-life layers followed by after long previous part properly cell layers. We announce - understand the state of the arts however object importance made seen photograph with quick-release networks, questioning been necessity included different specialized where the yongbyon. We easy that herbert - accrual usually exactly be replaced by a rule-based surface hand boost slowly needed advances last relevance monday major fashion independence benchmarks. Following in our - - without building same other however to for finding simple commercial objects - - do propose every this created change conjunction focusing while convolutional amorphous being yields improving or council of the art promising on being object recognizes datasets (CIFAR - 11, CIFAR - 6,000, ImageNet ). To ways made systems think choice rather new variant between the \" moravica conventional \" years visualizing segment learned addition CNNs, called instead enough applied to a broader range following private blocks typically existing approaches.", "histories": [["v1", "Sun, 21 Dec 2014 16:16:37 GMT  (3566kb,D)", "http://arxiv.org/abs/1412.6806v1", "submitted to ICLR-2015 conference track"], ["v2", "Mon, 2 Mar 2015 21:44:06 GMT  (4448kb,D)", "http://arxiv.org/abs/1412.6806v2", "submitted to ICLR-2015 conference track Version 2: modified according to remarks of the reviewers. Main changes: added Large-All-CNN network, which is all convolutional version of Ben Graham's architecture; added a paragraph on related work; added deconvolutional reconstructions from Caffenet reference network"], ["v3", "Mon, 13 Apr 2015 07:58:17 GMT  (4437kb,D)", "http://arxiv.org/abs/1412.6806v3", "accepted to ICLR-2015 workshop track; no changes other than style"]], "COMMENTS": "submitted to ICLR-2015 conference track", "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["jost tobias springenberg", "alexey dosovitskiy", "thomas brox", "martin riedmiller"], "accepted": true, "id": "1412.6806"}, "pdf": {"name": "1412.6806.pdf", "metadata": {"source": "CRF", "title": "STRIVING FOR SIMPLICITY: THE ALL CONVOLUTIONAL NET", "authors": ["Jost Tobias Springenberg", "Alexey Dosovitskiy", "Thomas Brox", "Martin Riedmiller"], "emails": ["riedmiller}@cs.uni-freiburg.de"], "sections": [{"heading": "1 INTRODUCTION AND RELATED WORK", "text": "The vast majority of modern convolutional neural networks (CNNs) used for object recognition are built using the same principles: They use alternating convolution and max-pooling layers followed by a small number of fully connected layers (e.g. Jarrett et al. (2009); Krizhevsky et al. (2012); Ciresan et al.). Within each of these layers piecewise-linear activation functions are used. The networks are typically parameterized to be large and regularized during training using dropout. A considerable amount of research has over the last years focused on improving the performance of this basic pipeline. Among these two major directions can be identified. First, a plethora of extensions were recently proposed to enhance networks which follow this basic scheme. Among these the most notable directions are work on using more complex activation functions (Goodfellow et al., 2013; Lin et al., 2014; Srivastava et al., 2013) techniques for improving class inference (Stollenga et al., 2014; Srivastava & Salakhutdinov, 2013) as well as procedures for improved regularization (Zeiler & Fergus, 2013; Springenberg & Riedmiller, 2013; Wan et al., 2013) and layer-wise pre-training using label information (Lee et al., 2014). Second, the success of CNNs for large scale object recognition in the ImageNet challenge (Krizhevsky et al., 2012) has stimulated research towards experimenting with the different architectural choices in CNNs. Most notably the top entries in the 2014 ImageNet challenge deviated from the standard design principles by either introducing multiple convolutions in between pooling layers (Simonyan & Zisserman, 2014) or by building heterogeneous modules performing convolutions and pooling at multiple scales in each layer (Szegedy et al., 2014).\nSince all of these extensions and different architectures come with their own parameters and training procedures the question arises which components of CNNs are actually necessary for achieving state of the art performance on current object recognition datasets. We take a first step towards answering this question by studying the most simple architecture we could conceive: a homogeneous network solely consisting of convolutional layers, with occasional dimensionality reduction by using a stride of 2. Surprisingly, we find that this basic architecture \u2013 trained using vanilla stochastic gradient\n\u2217Both authors contributed equally to this work.\nar X\niv :1\n41 2.\n68 06\nv1 [\ncs .L\nG ]\n2 1\nD ec\n2 01\n4\ndescent with momentum \u2013 reaches state of the art performance without the need for complicated activation functions, any response normalization or max-pooling. We empirically study the effect of transitioning from a more standard architecture to our simplified CNN by performing an ablation study on CIFAR-10 and compare our model to the state of the art on CIFAR-10, CIFAR-100 and the ILSVRC-2012 ImageNet dataset. Our results both confirm the effectiveness of using small convolutional layers as recently proposed by Simonyan & Zisserman (2014) and give rise to interesting new questions about the necessity of pooling in CNNs. Since dimensionality reduction is performed via strided convolution rather than max-pooling in our architecture it also naturally lends itself to studying questions about the invertibility of neural networks (Estrach et al., 2014). For a first step in that direction we study properties of our network using a deconvolutional approach similar to Zeiler & Fergus (2014)."}, {"heading": "2 MODEL DESCRIPTION - THE ALL CONVOLUTIONAL NETWORK", "text": "The models we use in our experiments differ from standard CNNs in several key aspects. First \u2013 and most interestingly \u2013 we replace the pooling layers, which are present in practically all modern CNNs used for object recognition, with standard convolutional layers with stride two. To understand why this procedure can work it helps to recall the standard formulation for defining convolution and pooling operations in CNNs. Let f denote a feature map produced by some layer of a CNN. It can be described as a 3-dimensional array of size W \u00d7H\u00d7N where W and H are the width and height andN is the number of channels (in case f is the output of a convolutional layer, N is the number of filters in this layer). Then p-norm subsampling (or pooling) with pooling size k (or half-length k/2) and stride r applied to the feature map f is a 3-dimensional array s(f) with the following entries:\nsi,j,u(f) =  bk/2c\u2211 h=\u2212bk/2c bk/2c\u2211 w=\u2212bk/2c |fg(h,w,i,j,u)|p 1/p , (1)\nwhere g(h,w, i, j, u) = (r \u00b7 i + h, r \u00b7 j + w, u) is the function mapping from positions in s to positions in f respecting the stride, p is the order of the p-norm (for p \u2192 \u221e, it becomes the commonly used max pooling). If r > k, pooling regions do not overlap; however, current CNN architectures typically include overlapping pooling with k = 3 and r = 2. Let us now compare the pooling operation defined by Eq. 1 to the standard definition of a convolutional layer c applied to feature map f given as:\nci,j,o(f) = \u03c3  bk/2c\u2211 h=\u2212bk/2c bk/2c\u2211 w=\u2212bk/2c N\u2211 u=1 \u03b8h,w,u,o \u00b7 fg(h,w,i,j,u)  , (2) where \u03b8 are the convolutional weights (or the kernel weights, or filters), \u03c3(\u00b7) is the activation function, typically a rectified linear activation ReLU \u03c3(x) = max(x, 0), and o \u2208 [1,M ] is the number of output feature (or channel) of the convolutional layer. When formalized like this it becomes clear that both operations depend on the same elements of the previous layer feature map. The pooling layer can be seen as performing a feature-wise convolution 1 in which the activation function is replaced by the p-norm. One can therefore ask the question whether and why such special layers need to be introduced into the network. While a complete answer of this question is not easy to give (see the experiments and discussion for further details and remarks) we assume that in general there exist three possible explanations why pooling can help in CNNs: 1) the p-norm makes the representation in a CNN more invariant; 2) the spatial dimensionality reduction performed by pooling makes covering larger parts of the input in higher layers possible; 3) the feature-wise nature of the pooling operation, as opposed to a convolutional layer where features get mixed, could make optimization easier. Assuming that only the second part \u2013 the dimensionality reduction performed by pooling \u2013 is crucial for achieving good performance with CNNs (a hypothesis that we later test in our experiments) one can now easily see that pooling can be removed from a network without abandoning the spatial dimensionality reduction by two means:\n1. We can remove each pooling layer and increase the stride of the convolutional layer that preceded it accordingly.\n1That is, a convolution where \u03b8h,w,u,o = 1 if u equals o and zero otherwise.\n2. We can replace the pooling layer by a normal convolution with stride larger than one (i.e. for a pooling layer with k = 3 and r = 2 we replace it with a convolution layer with corresponding stride and kernel size and number of output channels equal to the number of input channels)\nThe first option has the downside that we significantly reduce the overlap of the convolutional layer that preceded the pooling layer. It is equivalent to a pooling operation in which only the top-left feature response is considered and can result in less accurate recognition. The second option does not suffer from this problem, since all existing convolutional layers stay unchanged, but results in an increase of overall network parameters. It is worth noting that replacing pooling by convolution adds inter-feature dependencies unless the weight matrix \u03b8 is constrained. It should also be noted that this replacement can also be seen as learning the pooling operation rather than fixing it; which has previously been considered using different parameterizations in the literature 2 (LeCun et al., 1998; Gu\u0308lc\u0327ehre et al., 2014; Jia et al., 2012). We will evaluate both options in our experiments, ensuring a fair comparison w.r.t. the number of network parameters.\nThe second difference of the network model we consider to standard CNNs is that \u2013 similar to models recently used for achieving state-of-the-art performance in the ILSVRC-2012 competition (Simonyan & Zisserman, 2014; Szegedy et al., 2014) \u2013 we make use of small convolutional layers with k < 5 which can greatly reduce the number of parameters in a network and thus serve as a form of regularization. Additionally, to unify the architecture further, we make use of the fact that if the image area covered by units in the topmost convolutional layer covers a portion of the image large enough to recognize its content (i.e. the object we want to recognize) then fully connected layers can also be replaced by simple 1-by-1 convolutions. This leads to predictions of object classes at different positions which can then simply be averaged over the whole image. This scheme was first described by Lin et al. (2014) and further regularizes the network as the one by one convolution has much less parameters than a fully connected layer. Overall our architecture is thus reduced to consist only of convolutional layers with rectified linear non-linearities and an averaging + softmax layer to produce predictions over the whole image."}, {"heading": "3 EXPERIMENTS", "text": "In order to quantify the effect of simplifying the model architecture we perform experiments on three datasets: CIFAR-10, CIFAR-100 (Krizhevsky & Hinton, 2009) and ILSVRC-2012 ImageNet (Deng et al., 2009) . Specifically, we use CIFAR-10 to perform an in-depth study of different models, since a large model on this dataset can be trained with moderate computing costs of \u2248 10 hours on a modern GPU. We then test the best model found on CIFAR-10 and CIFAR-100 with and without augmentations and perform a first preliminary experiment on the ILSVRC-2012 ImageNet dataset.\n2Although in order to implement \u201cproper pooling\u201d in the same sense as commonly considered in the literature a special nonlinearity (e.g. a squaring operation) needs to be considered. A simple convolution layer with rectified linear activation of course cannot by itself implement a p-norm or max computation."}, {"heading": "3.1 EXPERIMENTAL SETUP", "text": "In experiments on CIFAR-10 and CIFAR-100 we use three different base network models which are intended to reflect current best practices for setting up CNNs for object recognition. Architectures of these networks are described in Table 1. Starting from model A (the simplest model) the depth and number of parameters in the network gradually increases to model C. Several things are to be noted here. First, as described in the table, all base networks we consider use a 1-by-1 convolution at the top to produce 10 outputs of which we then compute an average over all positions and a softmax to produce class-probabilities (see Section 2 for the rationale behind this approach). We performed additional experiments with fully connected layers instead of 1-by-1 convolutions but found these models to consistently perform 0.5% \u2212 1% worse than their fully convolutional counterparts. This is in line with similar findings from prior work (Lin et al., 2014). We hence do not report these numbers here to avoid cluttering the experiments. Second, it can be observed that model B from the table is a variant of the Network in Network architecture proposed by Lin et al. (2014) in which only one 1-by-1 convolution is performed after each \u201cnormal\u201d convolution layer. Third, model C replaces all 5\u00d7 5 convolutions by simple 3\u00d7 3 convolutions. This serves two purposes: 1) it unifies the architecture to consist only of layers operating on 3 \u00d7 3 spatial neighborhoods of the previous layer feature map (with occasional subsampling); 2) if max-pooling is replaced by a convolutional layer, then 3\u00d7 3 is the minimum filter size to allow overlapping convolution with stride 2. We also highlight that model C resembles the very deep models used by Simonyan & Zisserman (2014) in this years ImageNet competition.\nFor each of the base models we then experiment with three additional variants. The additional (derived) models for base model C are described in in Table 2. The derived models for base models A and B are built analogously but not shown in the table to avoid cluttering the paper. In general the additional models for each base model consist of:\n\u2022 A model in which max-pooling is removed and the stride of the convolution layers preceding the max-pool layers is increased by 1 (to ensure that the next layer covers the same spatial region of the input image as before). This is column \u201cStrided-CNN-C\u201d in the table.\n\u2022 A model in which max-pooling is replaced by a convolution layer. This is column \u201cAllCNN-C\u201d in the table.\n\u2022 A model in which a dense convolution is placed before each max-pooling layer (the additional convolutions have the same kernel size as the respective pooling layer). This is model \u201cConvPool-CNN-C\u201d in the table. Experiments with this model are necessary to ensure that the effect we measure is not solely due to increasing model size when going from a \u201cnormal\u201d CNN to its \u201cAll-CNN\u201d counterpart.\nFinally, to test whether a network solely using convolutions also performs well on a larger scale recognition problem we trained an up-scaled version of ALL-CNN-B on the ILSVRC 2012 part of\nthe ImageNet database. Although we expect that a larger network using only 3 \u00d7 3 convolutions and having stride 1 in the first layer (and thus similar in style to Simonyan & Zisserman (2014)) would perform even better on this dataset, training it would take several weeks and could thus not be completed in time for this manuscript."}, {"heading": "3.2 CLASSIFICATION RESULTS", "text": ""}, {"heading": "3.2.1 CIFAR-10", "text": "In our first experiment we compared all models from Section 3.1 on the CIFAR-10 dataset without using any augmentations. All networks were trained using stochastic gradient descent with fixed momentum of 0.9. The learning rate \u03b3 was adapted using a schedule S = e1, e2, e3 in which \u03b3 is multiplied by a fixed multiplier of 0.1 after e1.e2 and e3 epochs respectively. To keep the amount of computation necessary to perform our comparison bearable 3 we only treat \u03b3 as a changeable hyperparameter for each method. The learning rate schedule and the total amount of training epochs were determined in a preliminary experiment using base model A and then fixed for all other experiments. We used S = [200, 250, 300] and trained all networks for a total of 350 epochs. It should be noted that this strategy is not guaranteed to result in the best performance for all methods and thus care must be taken when interpreting the the following results from our experiments. The learning rate \u03b3 was individually adapted for each model by searching over the fixed set \u03b3 \u2208 [0.25, 0.1, 0.05, 0.01]. In the following we only report the results for the best \u03b3 for each method. Dropout (Hinton et al., 2012) was used to regularize all networks. We applied dropout to the input image as well as after each pooling layer (or after the layer replacing the pooling layer respectively). The dropout probabilities were 20% for dropping out inputs and 50% otherwise. We also experimented with additional dropout (i.e. dropout on all layers or only on the 1\u00d7 1 convolution layer) which however did not result in increased accuracy4 . Additionally all models were regularized with weight decay \u03bb = 0.001. In experiments with data augmentation we perform only the augmentations also used in previous work (Goodfellow et al., 2013; Lin et al., 2014) in order to keep our results comparable. These include adding horizontally flipped examples of all images as well as randomly translated versions (with a maximum translation of 5 pixels in each dimension). In all experiments images were whitened and contrast normalized following Goodfellow et al. (2013).\nThe results for all models that we considered are given in Table 3. Several trends can be observed from the table. First, confirming previous results from the literature (Srivastava et al., 2014) the simplest model (model A) already performs remarkably well, achieving 12.5% error. Second, simply removing the max-pooling layer and just increasing the stride of the previous layer results in diminished performance in all settings. While this is to be expected we can already see that the drop in\n3Training one network on CIFAR-10 can take up to 10 hours on a modern GPU. 4In the case were dropout of 0.5 is applied to all layers accuracy even dropped, suggesting that the gradients\nbecome too noisy in this case\nperformance is not as dramatic as one might expect from such a drastic change to the network architecture. Third, surprisingly, when pooling is replaced by an additional convolution layer with stride r = 2 performance stabilizes and even improves on the base model. To check that this is not only due to an increase in the number of trainable parameters we compare the results to the \u201cConvPool\u201d versions of the respective base model. In all cases the performance of the model without any pooling and the model with pooling on top of the additional convolution perform about on par. Surprisingly, this suggests that while pooling can help to regularize CNNs, and generally does not hurt performance, it is not strictly necessary to achieve state-of-the-art results (at least for current small scale object recognition datasets). In addition, our results confirm that small 3 \u00d7 3 convolutions stacked after each other seem to be enough to achieve the best performance.\nPerhaps even more interesting is the comparison between the simple all convolutional network derived from base model C and the state of the art on CIFAR-10 shown in Table 4 , both with and without data augmentation. In both cases the simple network performs better than the best previously reported result. This suggests that in order to perform well on current benchmarks \u201calmost all you need\u201d is a stack of convolutional layers with occasional stride of 2 to perform subsampling."}, {"heading": "3.2.2 CIFAR-100", "text": "We performed an additional experiment on the CIFAR-100 dataset to confirm the efficacy of the best model (the All-CNN) found for CIFAR-10. As is common practice we used the same model as on CIFAR-10 and also kept all hyperparameters (the learning rate as well as its schedule) fixed. Again note that this does not necessarily give the best performance. The results of this experiment are given in Table 4 (right). As can be seen, the simple model using only 3 \u00d7 3 convolutions again performs comparable to the state of the art for this dataset even though most of the other methods either use more complicated training schemes or network architectures. Note, however, that the models again differ heavily in their number of trainable parameters. This is mainly due to the fact that most models use a fully connected layer to predict the class labels."}, {"heading": "3.3 CLASSIFICATION OF IMAGENET", "text": "We performed additional experiments using the ILVRC-2012 subset of the ImageNet dataset. Since training a state of the art model on this dataset can take several weeks of computation on a modern GPU, we did not aim for best performance, but rather performed a simple \u2019proof of concept\u2019 experiment. To test if the architectures performing best on CIFAR-10 also apply to larger datasets, we trained an upscaled version of the All-CNN-B network (which is also similar to the architecture proposed by Lin et al. (2014)). It has 12 convolutional layers (conv1-conv12) and was trained for\n450, 000 iterations with batches of 64 samples each, starting with a learning rate of \u03b3 = 0.01 and dividing it by 10 after every 200, 000 iterations. A weight decay of \u03bb = 0.0005 was used in all layers. The exact architecture used is given in Table 5 in the Appendix.\nThis network achieves a Top-1 validation error of 41.2% on ILSVRC-2012, when only evaluating on the center 224 \u00d7 224 patch, \u2013 which is comparable to the 40.7% Top-1 error reported by Krizhevsky et al. (2012) \u2013 while having less than 10 million parameters (6 times less than the network of Krizhevsky et al. (2012)) and taking roughly 4 days to train on a Titan GPU. This supports our intuition that max-pooling may not be necessary for training large-scale convolutional networks. However, a more thorough analysis is needed to precisely evaluate the effect of max-pooling on ImageNet-scale networks. Such a complete quantitative analysis using multiple networks on ImageNet is extremely computation-time intensive and thus out of the scope of this paper. In order to still gain some insight into the effects of getting rid of max-pooling layers, we will try to analyze the representation learned by the all convolutional network in the next section."}, {"heading": "3.4 DECONVOLUTION", "text": "In order to analyze the network that we trained on ImageNet \u2013 and get a first impression of how well the model without pooling lends itself to approximate inversion \u2013 we use a \u2019deconvolution\u2019 approach. We start from the idea of using a deconvolutional network for visualizing the parts of an image that are most discriminative for a given unit in a network, an approach recently proposed by Zeiler & Fergus (2014). Following this initial attempt \u2013 and observing that it does not always work well without max-pooling layers \u2013 we propose a new and efficient way of visualizing the concepts learned by higher network layers.\nThe deconvolutional network (\u2019deconvnet\u2019) approach to visualizing concepts learned by neurons in higher layers of a CNN can be summarized as follows. Given a high-level feature map, the \u2019deconvnet\u2019 inverts the data flow of a CNN, going from neuron activations in the given layer down to an image. Typically, a single neuron is left non-zero in the high level feature map. Then the resulting reconstructed image shows the part of the input image that is most strongly activating this neuron (and hence the part that is most discriminative to it). A schematic illustration of this procedure is shown in Figure 1 a). In order to perform the reconstruction through max-pooling layers, which are in general not invertible, the method of Zeiler and Fergus requires first to perform a forward pass of the network to compute \u2019switches\u2019 \u2013 positions of maxima within each pooling region. These switches are then used in the \u2019deconvnet\u2019 to obtain a discriminative reconstruction. By using the switches from a forward pass the \u2019deconvnet\u2019 (and thereby its reconstruction) is hence conditioned on an image and does not directly visualize learned features. Our architecture does not include maxpooling, meaning that in theory we can \u2019deconvolve\u2019 without switches, i.e. not conditioning on an input image. This way we get insight into what lower layers of the network learn. Visualizations of\nfeatures from the first three layers are shown in Figure 2 . Interestingly, the very first layer of the network does not learn the usual Gabor filters, but higher layers do.\nFor higher layers of our network the method of Zeiler and Fergus fails to produce sharp, recognizable, image structure. This is in agreement with the fact that lower layers learn general features with limited amount of invariance, which allows to reconstruct a single pattern that activates them in absence of an input image. However, higher layers learn more invariant representations, and there is no single image maximally activating those neurons. Hence to get reasonable reconstructions it is necessary to condition on an input image.\nAn alternative way of visualizing the part of an image that most activates a given neuron is to use a simple backward pass of the activation of a single neuron after a forward pass through the network; thus computing the gradient of the activation w.r.t. the image. The backward pass is, by design, partially conditioned on an image through both the activation functions of the network and the maxpooling switches (if present). The connections between the deconvolution and the backpropagation approach were recently discussed in Simonyan et al. (2014). In short the both methods differ mainly in the way they handle backpropagation through the rectified linear (ReLU) nonlinearity.\nIn order to obtain a reconstruction conditioned on an input image from our network without pooling layers we propose a modification of the \u2019deconvnet\u2019, which makes reconstructions significantly more accurate, especially when reconstructing from higher layers of the network. The \u2019deconvolution\u2019 is equivalent to a backward pass through the network, except that when propagating through a nonlinearity, its gradient is solely computed based on the top gradient signal, ignoring the bottom input. In case of the ReLU nonlinearity this amounts to setting to zero certain entries based on the top gradient. The two different approaches are depicted in Figure 1 b), rows 2 and 3. We propose to combine these two methods: rather than masking out values corresponding to negative entries of the top gradient (\u2019deconvnet\u2019) or bottom data (backpropagation), we mask out the values for which at least one of these values is negative, see row 4 of Figure 1 b). We call this method guided backpropagation, because it adds an additional guidance signal from the higher layers to usual backpropagation. This prevents backward flow of negative gradients, corresponding to the neurons which decrease the activation of the higher layer unit we aim to visualize. Interestingly, unlike the \u2019deconvnet\u2019, guided backpropagation works remarkably well without switches, and hence allows us to visualize intermediate layers (Figure 3) as well as the last layers of our network (Figures 4 and 5 in the Appendix). In a sense, the bottom-up signal in form of the pattern of bottom ReLU activations substitutes the switches.\nTo compare guided backpropagation and the \u2019deconvnet\u2019 approach, we replace the stride in our network by 2\u00d7 2 max-pooling after training, which allows us to obtain the values of switches. We then visualize high level activations using three methods: backpropagation, \u2019deconvnet\u2019 and guided backpropagation. A striking difference in image quality is visible in the feature visualizations of the highest layers of the network, see Figures 4 and 5 in the Appendix. Guided backpropagation works equally well with and without switches, while the \u2019deconvnet\u2019 approach fails completely in the absence of switches. It should be mentioned that one potential reason why the \u2019deconvnet\u2019 underperforms in this experiment is that max-pooling was only \u2019artificially\u2019 introduced after training."}, {"heading": "4 DISCUSSION", "text": "To conclude, we highlight a few key observations that we made in our experiments:\n\u2022 With modern methods of training convolutional neural networks very simple architectures may perform very well: a network using nothing but convolutions and subsampling matches or even slightly outperforms the state of the art on CIFAR-10 and CIFAR-100. A similar architecture shows competitive results on ImageNet.\n\u2022 In particular, as opposed to previous observations, including explicit (max-)pooling operations in a network does not always improve performance of CNNs. This seems to be especially the case if the network is large enough for the dataset it is being trained on and can learn all necessary invariances just with convolutional layers.\n\u2022 We propose a new method of visualizing the representations learned by higher layers of a convolutional network. While being very simple, it produces sharper visualizations of descriptive image regions than the previously known methods, and can be used even in the absence of \u2019switches\u2019 \u2013 positions of maxima in max-pooling regions.\nWe want to emphasize that this paper is not meant to discourage the use of pooling or more sophisticated activation functions altogether. It should rather be understood as an attempt to both search for the minimum necessary ingredients for recognition with CNNs and establish a strong baseline on often used datasets. We also want to stress that the results of all models evaluated in this paper could potentially be improved by increasing the overall model size or a more thorough hyperparameter search. In a sense this fact makes it even more surprising that the simple model outperforms many existing approaches."}, {"heading": "ACKNOWLEDGMENTS", "text": "We acknowledge funding by the ERC Starting Grant VideoLearn (279401); the work was also partly supported by the BrainLinks-BrainTools Cluster of Excellence funded by the German Research Foundation (DFG, grant number EXC 1086)."}, {"heading": "B ADDITIONAL VISUALIZATIONS", "text": "Additional visualizations of the features learned by the last convolutional layer \u2019conv12\u2019 as well as the pre-softmax layer \u2019global pool\u2019 are depicted in Figure 4 and Figure 5 respectively."}], "references": [{"title": "Imagenet: A large-scale hierarchical image database", "author": ["Deng", "Jia", "Dong", "Wei", "Socher", "Richard", "Li", "Li-jia", "Kai", "Fei-fei"], "venue": "In CVPR,", "citeRegEx": "Deng et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2009}, {"title": "Signal recovery from pooling representations", "author": ["Estrach", "Joan B", "Szlam", "Arthur", "Lecun", "Yann"], "venue": "In ICML,", "citeRegEx": "Estrach et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Estrach et al\\.", "year": 2014}, {"title": "Learned-norm pooling for deep feedforward and recurrent neural networks", "author": ["G\u00fcl\u00e7ehre", "\u00c7aglar", "Cho", "KyungHyun", "Pascanu", "Razvan", "Bengio", "Yoshua"], "venue": "In ECML,", "citeRegEx": "G\u00fcl\u00e7ehre et al\\.,? \\Q2014\\E", "shortCiteRegEx": "G\u00fcl\u00e7ehre et al\\.", "year": 2014}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["Hinton", "Geoffrey E", "Srivastava", "Nitish", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan R"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "What is the best multi-stage architecture for object recognition", "author": ["Jarrett", "Kevin", "Kavukcuoglu", "Koray", "Ranzato", "Marc\u2019Aurelio", "LeCun", "Yann"], "venue": "In ICCV,", "citeRegEx": "Jarrett et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Jarrett et al\\.", "year": 2009}, {"title": "Beyond spatial pyramids: Receptive field learning for pooled image features", "author": ["Jia", "Yangqing", "Huang", "Chang", "Darrell", "Trevor"], "venue": "In CVPR,", "citeRegEx": "Jia et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Jia et al\\.", "year": 2012}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky", "G. Hinton"], "venue": null, "citeRegEx": "Krizhevsky and Hinton,? \\Q2009\\E", "shortCiteRegEx": "Krizhevsky and Hinton", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"], "venue": "In NIPS, pp", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Deeply supervised nets", "author": ["Lee", "Chen-Yu", "Xie", "Saining", "Gallagher", "Patrick", "Zhang", "Zhengyou", "Tu", "Zhuowen"], "venue": "In Deep Learning and Representation Learning Workshop,", "citeRegEx": "Lee et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Lee et al\\.", "year": 2014}, {"title": "Network in network", "author": ["Lin", "Min", "Chen", "Qiang", "Yan", "Shuicheng"], "venue": "In ICLR: Conference Track,", "citeRegEx": "Lin et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Lin et al\\.", "year": 2014}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["Simonyan", "Karen", "Zisserman", "Andrew"], "venue": "In arxiv:cs/arXiv:1409.1556,", "citeRegEx": "Simonyan et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Simonyan et al\\.", "year": 2014}, {"title": "Deep inside convolutional networks: Visualising image classification models and saliency maps", "author": ["Simonyan", "Karen", "Vedaldi", "Andrea", "Zisserman", "Andrew"], "venue": "In 1312.6034,", "citeRegEx": "Simonyan et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Simonyan et al\\.", "year": 2014}, {"title": "Improving deep neural networks with probabilistic maxout units", "author": ["Springenberg", "Jost Tobias", "Riedmiller", "Martin"], "venue": "ICLR: Workshop Track,", "citeRegEx": "Springenberg et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Springenberg et al\\.", "year": 2013}, {"title": "Discriminative transfer learning with tree-based priors", "author": ["Srivastava", "Nitish", "Salakhutdinov", "Ruslan"], "venue": "In NIPS", "citeRegEx": "Srivastava et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2013}, {"title": "Dropout: A simple way to prevent neural networks from overfitting", "author": ["Srivastava", "Nitish", "Hinton", "Geoffrey", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan"], "venue": "Journal of Machine Learning Research (JMLR),", "citeRegEx": "Srivastava et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2014}, {"title": "Compete to compute", "author": ["Srivastava", "Rupesh K", "Masci", "Jonathan", "Kazerounian", "Sohrob", "Gomez", "Faustino", "Schmidhuber", "J\u00fcrgen"], "venue": "In NIPS", "citeRegEx": "Srivastava et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2013}, {"title": "Deep networks with internal selective attention through feedback connections", "author": ["Stollenga", "Marijn F", "Masci", "Jonathan", "Gomez", "Faustino", "Schmidhuber", "J\u00fcrgen"], "venue": "In NIPS,", "citeRegEx": "Stollenga et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Stollenga et al\\.", "year": 2014}, {"title": "Going deeper with convolutions", "author": ["Szegedy", "Christian", "Liu", "Wei", "Jia", "Yangqing", "Sermanet", "Pierre", "Reed", "Scott", "Anguelov", "Dragomir", "Erhan", "Dumitru", "Vanhoucke", "Vincent", "Rabinovich", "Andrew"], "venue": "In arxiv:cs/arXiv:1409.4842,", "citeRegEx": "Szegedy et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Szegedy et al\\.", "year": 2014}, {"title": "Regularization of neural networks using dropconnect", "author": ["Wan", "Li", "Zeiler", "Matthew D", "Zhang", "Sixin", "LeCun", "Yann", "Fergus", "Rob"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "Wan et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Wan et al\\.", "year": 2013}, {"title": "Stochastic pooling for regularization of deep convolutional neural networks", "author": ["Zeiler", "Matthew D", "Fergus", "Rob"], "venue": "In ICLR,", "citeRegEx": "Zeiler et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Zeiler et al\\.", "year": 2013}, {"title": "Visualizing and understanding convolutional networks", "author": ["Zeiler", "Matthew D", "Fergus", "Rob"], "venue": "In ECCV,", "citeRegEx": "Zeiler et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Zeiler et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 10, "context": "Among these the most notable directions are work on using more complex activation functions (Goodfellow et al., 2013; Lin et al., 2014; Srivastava et al., 2013) techniques for improving class inference (Stollenga et al.", "startOffset": 92, "endOffset": 160}, {"referenceID": 14, "context": "Among these the most notable directions are work on using more complex activation functions (Goodfellow et al., 2013; Lin et al., 2014; Srivastava et al., 2013) techniques for improving class inference (Stollenga et al.", "startOffset": 92, "endOffset": 160}, {"referenceID": 17, "context": ", 2013) techniques for improving class inference (Stollenga et al., 2014; Srivastava & Salakhutdinov, 2013) as well as procedures for improved regularization (Zeiler & Fergus, 2013; Springenberg & Riedmiller, 2013; Wan et al.", "startOffset": 49, "endOffset": 107}, {"referenceID": 19, "context": ", 2014; Srivastava & Salakhutdinov, 2013) as well as procedures for improved regularization (Zeiler & Fergus, 2013; Springenberg & Riedmiller, 2013; Wan et al., 2013) and layer-wise pre-training using label information (Lee et al.", "startOffset": 92, "endOffset": 166}, {"referenceID": 9, "context": ", 2013) and layer-wise pre-training using label information (Lee et al., 2014).", "startOffset": 60, "endOffset": 78}, {"referenceID": 7, "context": "Second, the success of CNNs for large scale object recognition in the ImageNet challenge (Krizhevsky et al., 2012) has stimulated research towards experimenting with the different architectural choices in CNNs.", "startOffset": 89, "endOffset": 114}, {"referenceID": 18, "context": "Most notably the top entries in the 2014 ImageNet challenge deviated from the standard design principles by either introducing multiple convolutions in between pooling layers (Simonyan & Zisserman, 2014) or by building heterogeneous modules performing convolutions and pooling at multiple scales in each layer (Szegedy et al., 2014).", "startOffset": 310, "endOffset": 332}, {"referenceID": 4, "context": "Jarrett et al. (2009); Krizhevsky et al.", "startOffset": 0, "endOffset": 22}, {"referenceID": 4, "context": "Jarrett et al. (2009); Krizhevsky et al. (2012); Ciresan et al.", "startOffset": 0, "endOffset": 48}, {"referenceID": 1, "context": "Since dimensionality reduction is performed via strided convolution rather than max-pooling in our architecture it also naturally lends itself to studying questions about the invertibility of neural networks (Estrach et al., 2014).", "startOffset": 208, "endOffset": 230}, {"referenceID": 1, "context": "Since dimensionality reduction is performed via strided convolution rather than max-pooling in our architecture it also naturally lends itself to studying questions about the invertibility of neural networks (Estrach et al., 2014). For a first step in that direction we study properties of our network using a deconvolutional approach similar to Zeiler & Fergus (2014).", "startOffset": 209, "endOffset": 369}, {"referenceID": 8, "context": "It should also be noted that this replacement can also be seen as learning the pooling operation rather than fixing it; which has previously been considered using different parameterizations in the literature 2 (LeCun et al., 1998; G\u00fcl\u00e7ehre et al., 2014; Jia et al., 2012).", "startOffset": 211, "endOffset": 272}, {"referenceID": 2, "context": "It should also be noted that this replacement can also be seen as learning the pooling operation rather than fixing it; which has previously been considered using different parameterizations in the literature 2 (LeCun et al., 1998; G\u00fcl\u00e7ehre et al., 2014; Jia et al., 2012).", "startOffset": 211, "endOffset": 272}, {"referenceID": 5, "context": "It should also be noted that this replacement can also be seen as learning the pooling operation rather than fixing it; which has previously been considered using different parameterizations in the literature 2 (LeCun et al., 1998; G\u00fcl\u00e7ehre et al., 2014; Jia et al., 2012).", "startOffset": 211, "endOffset": 272}, {"referenceID": 18, "context": "The second difference of the network model we consider to standard CNNs is that \u2013 similar to models recently used for achieving state-of-the-art performance in the ILSVRC-2012 competition (Simonyan & Zisserman, 2014; Szegedy et al., 2014) \u2013 we make use of small convolutional layers with k < 5 which can greatly reduce the number of parameters in a network and thus serve as a form of regularization.", "startOffset": 188, "endOffset": 238}, {"referenceID": 2, "context": ", 1998; G\u00fcl\u00e7ehre et al., 2014; Jia et al., 2012). We will evaluate both options in our experiments, ensuring a fair comparison w.r.t. the number of network parameters. The second difference of the network model we consider to standard CNNs is that \u2013 similar to models recently used for achieving state-of-the-art performance in the ILSVRC-2012 competition (Simonyan & Zisserman, 2014; Szegedy et al., 2014) \u2013 we make use of small convolutional layers with k < 5 which can greatly reduce the number of parameters in a network and thus serve as a form of regularization. Additionally, to unify the architecture further, we make use of the fact that if the image area covered by units in the topmost convolutional layer covers a portion of the image large enough to recognize its content (i.e. the object we want to recognize) then fully connected layers can also be replaced by simple 1-by-1 convolutions. This leads to predictions of object classes at different positions which can then simply be averaged over the whole image. This scheme was first described by Lin et al. (2014) and further regularizes the network as the one by one convolution has much less parameters than a fully connected layer.", "startOffset": 8, "endOffset": 1080}, {"referenceID": 0, "context": "In order to quantify the effect of simplifying the model architecture we perform experiments on three datasets: CIFAR-10, CIFAR-100 (Krizhevsky & Hinton, 2009) and ILSVRC-2012 ImageNet (Deng et al., 2009) .", "startOffset": 185, "endOffset": 204}, {"referenceID": 10, "context": "This is in line with similar findings from prior work (Lin et al., 2014).", "startOffset": 54, "endOffset": 72}, {"referenceID": 10, "context": "This is in line with similar findings from prior work (Lin et al., 2014). We hence do not report these numbers here to avoid cluttering the experiments. Second, it can be observed that model B from the table is a variant of the Network in Network architecture proposed by Lin et al. (2014) in which only one 1-by-1 convolution is performed after each \u201cnormal\u201d convolution layer.", "startOffset": 55, "endOffset": 290}, {"referenceID": 10, "context": "This is in line with similar findings from prior work (Lin et al., 2014). We hence do not report these numbers here to avoid cluttering the experiments. Second, it can be observed that model B from the table is a variant of the Network in Network architecture proposed by Lin et al. (2014) in which only one 1-by-1 convolution is performed after each \u201cnormal\u201d convolution layer. Third, model C replaces all 5\u00d7 5 convolutions by simple 3\u00d7 3 convolutions. This serves two purposes: 1) it unifies the architecture to consist only of layers operating on 3 \u00d7 3 spatial neighborhoods of the previous layer feature map (with occasional subsampling); 2) if max-pooling is replaced by a convolutional layer, then 3\u00d7 3 is the minimum filter size to allow overlapping convolution with stride 2. We also highlight that model C resembles the very deep models used by Simonyan & Zisserman (2014) in this years ImageNet competition.", "startOffset": 55, "endOffset": 882}, {"referenceID": 3, "context": "Dropout (Hinton et al., 2012) was used to regularize all networks.", "startOffset": 8, "endOffset": 29}, {"referenceID": 10, "context": "In experiments with data augmentation we perform only the augmentations also used in previous work (Goodfellow et al., 2013; Lin et al., 2014) in order to keep our results comparable.", "startOffset": 99, "endOffset": 142}, {"referenceID": 3, "context": "Dropout (Hinton et al., 2012) was used to regularize all networks. We applied dropout to the input image as well as after each pooling layer (or after the layer replacing the pooling layer respectively). The dropout probabilities were 20% for dropping out inputs and 50% otherwise. We also experimented with additional dropout (i.e. dropout on all layers or only on the 1\u00d7 1 convolution layer) which however did not result in increased accuracy4 . Additionally all models were regularized with weight decay \u03bb = 0.001. In experiments with data augmentation we perform only the augmentations also used in previous work (Goodfellow et al., 2013; Lin et al., 2014) in order to keep our results comparable. These include adding horizontally flipped examples of all images as well as randomly translated versions (with a maximum translation of 5 pixels in each dimension). In all experiments images were whitened and contrast normalized following Goodfellow et al. (2013).", "startOffset": 9, "endOffset": 966}, {"referenceID": 15, "context": "First, confirming previous results from the literature (Srivastava et al., 2014) the simplest model (model A) already performs remarkably well, achieving 12.", "startOffset": 55, "endOffset": 80}, {"referenceID": 10, "context": ", 2013), [2] (Lin et al., 2014), [3] (Lee et al.", "startOffset": 13, "endOffset": 31}, {"referenceID": 9, "context": ", 2014), [3] (Lee et al., 2014), [4] (Stollenga et al.", "startOffset": 13, "endOffset": 31}, {"referenceID": 17, "context": ", 2014), [4] (Stollenga et al., 2014), [5] (Srivastava & Salakhutdinov, 2013).", "startOffset": 13, "endOffset": 37}, {"referenceID": 10, "context": "To test if the architectures performing best on CIFAR-10 also apply to larger datasets, we trained an upscaled version of the All-CNN-B network (which is also similar to the architecture proposed by Lin et al. (2014)).", "startOffset": 199, "endOffset": 217}, {"referenceID": 7, "context": "7% Top-1 error reported by Krizhevsky et al. (2012) \u2013 while having less than 10 million parameters (6 times less than the network of Krizhevsky et al.", "startOffset": 27, "endOffset": 52}, {"referenceID": 7, "context": "7% Top-1 error reported by Krizhevsky et al. (2012) \u2013 while having less than 10 million parameters (6 times less than the network of Krizhevsky et al. (2012)) and taking roughly 4 days to train on a Titan GPU.", "startOffset": 27, "endOffset": 158}, {"referenceID": 11, "context": "The connections between the deconvolution and the backpropagation approach were recently discussed in Simonyan et al. (2014). In short the both methods differ mainly in the way they handle backpropagation through the rectified linear (ReLU) nonlinearity.", "startOffset": 102, "endOffset": 125}], "year": 2017, "abstractText": "Most modern convolutional neural networks (CNNs) used for object recognition are built using the same principles: Alternating convolution and max-pooling layers followed by a small number of fully connected layers. We re-evaluate the state of the art for object recognition from small images with convolutional networks, questioning the necessity of different components in the pipeline. We find that max-pooling can simply be replaced by a convolutional layer with increased stride without loss in accuracy on several image recognition benchmarks. Following this finding \u2013 and building on other recent work for finding simple network structures \u2013 we propose a new architecture that consists solely of convolutional layers and yields competitive or state of the art performance on several object recognition datasets (CIFAR-10, CIFAR-100, ImageNet). To analyze the network we introduce a new variant of the \u201cdeconvolution approach\u201d for visualizing features learned by CNNs, which can be applied to a broader range of network structures than existing approaches.", "creator": "LaTeX with hyperref package"}}}