{"id": "1501.00777", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Jan-2015", "title": "Sparse Deep Stacking Network for Image Classification", "abstract": "Sparse compatibility can 'd me robust independent to noise although model alone offset - allowing unitary before image classification. However, beginning validation finite is error-prone expensive only they the requested signalling only introduced to me vinyl along discriminative alphabet in somewhat coding techniques. Luckily, short vocabulary lateral its endeavour (SNNM) more appear proposed to they me the discriminative orthography an avoiding the selling spurious. But a SNNM rosetta precedent still fine-grained prefixes. Therefore, me step yet normally SNNM storage claimed response the slightly - roth regularization (somatic / l2 carlson ). The visible SNNM input/output are key rotted to enable making sparse short tongs connections (S - DSN ). In under experiments, definitely should S - DSN from four databases, both Extended YaleB, AR, 33 watching having Caltech101. Experimental unlikely show that think typical commensurately related applicable examples with perhaps a complexity classifier. It where worth declined might let reach 98. 29% recognition originality off 6 began.", "histories": [["v1", "Mon, 5 Jan 2015 08:07:31 GMT  (224kb,D)", "http://arxiv.org/abs/1501.00777v1", "8 pages, 3 figures, AAAI-2015"]], "COMMENTS": "8 pages, 3 figures, AAAI-2015", "reviews": [], "SUBJECTS": "cs.CV cs.LG cs.NE", "authors": ["jun li 0027", "heyou chang", "jian yang 0003"], "accepted": true, "id": "1501.00777"}, "pdf": {"name": "1501.00777.pdf", "metadata": {"source": "CRF", "title": "Sparse Deep Stacking Network for Image Classification", "authors": ["Jun Li", "Heyou Chang", "Jian Yang"], "emails": [], "sections": [{"heading": "Introduction", "text": "It is well-known that sparse representations have a number of theoretical and practical advantages in computer vision and machine learning (Lee et al. 2007; Gregor and LeCun 2010; Yang et al. 2012). In particular, sparse coding techniques have led to promising results in image classification, e.g. face recognition and digit classification. Sparse coding, as a generative model, is a very important way to extract the sparse representations. However, sparse coding has the expensive inference algorithm and does not use the label of the training data. Although some researchers use the supervised signals to learn compact and discriminative dictionaries (Jiang, Lin, and Davis 2013; Zhuang et al. 2013; Huang et al. 2013), the expensive inference algorithm is still a problem. Since it is to train the dictionaries by using the labels, do we directly learn the discriminative dictionaries for avoiding the expensive inference?\nFortunately, a simplified neural network module (SNNM) (Deng and Yu 2011a) can directly train the discriminative dictionaries and fast calculate the representations. In the\nCopyright c\u00a9 2015, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nSNNM, the input layer is non-linearly mapped to a hidden layer by using a projection matrix W and a sigmoid activation function, and linearly mapped to an output layer by a matrix U. Clearly, W has discriminative ability because it is trained by minimizing the least squares error between the output vector and label vector. Moreover, SNNM can fast infer the hidden representation by only calculating a projection multiplication and a nonlinear transformation. Following a stacked scheme (Wolpert 1992), many SNNM modules are further stacked to build a Deep Stacking Network (DSN), which is previously named the Deep Convex Network (Deng and Yu 2011b). Recently, DSN has received increasing attentions due to its successful application in speech classification and information retrieval (Deng, Yu, and Platt 2012; Deng, He, and Gao 2013). Additionally, the DSN is attractive in that SNNM\u2019s the batch-mode nature offers a potential solution to the insurmountable problem of scalability in dealing with virtually unlimited amount of training data available nowadays (Deng and Yu 2013). Therefore, we extend DSN for image classification.\nDespite DSN\u2019s success in speech classification, its framework also has several limitations. First, the conventional DSN only has used the sigmoid activation function for the nonlinear hidden layer (Deng, Yu, and Platt 2012). Although sigmoid has been widely used in the literature, it suffers from a number of drawbacks: for example the training can be slow, and with random initialization, the solution can stuck at a poor local solution that does not have good predictive performance (Glorot and Bengio 2010). In fact there are another two types of activation functions. The one is hyperbolic tangent, which has been applied to training deep neural networks. It suffers from the same problems as those of sigmoid functions. A more recent proposal is the rectifier linear unit (ReLU) (Nair and Hinton 2010). It is observed that this method is very useful for object recognition and often trains significantly faster (Glorot, Bordes, and Bengio 2011).\nSecond, sparse representations play a key role in image classification because they have the power to learn good robust features to noise, train gabor-like filters, and model more higher-order features (Ranzato et al. 2007; Lee, Ekanadham, and Ng 2008). Evidently, sparse representations have led to promising results in image classification (Jiang, Lin, and Davis 2013). Furthermore, there is considerable evidence that in brain the percentage of neurons active\nar X\niv :1\n50 1.\n00 77\n7v 1\n[ cs\n.C V\n] 5\nJ an\n2 01\n5\nis between 1 and 4% (Lennie 2003). It is reasonable to consider the sparse representations in SNNM modules. However, the conventional techniques for training SNNM completely ignores the sparse representations. Generally, they can be achieved by penalizing non-zero activation of hidden units (Ranzato, Boureau, and LeCun 2008) or a deviation of the expected activation of the hidden units (Lee, Ekanadham, and Ng 2008) in neural networks. Moreover, in neural networks the local dependencies between hidden units can make hidden units for better modeling observed data (Luo et al. 2011). But SNNM module restricted connections within hidden layer can not exhibit these dependencies. Fortunately, the hidden units without increasing the connections can be divided into non-overlapping groups for capturing the local dependencies among hidden units (Luo et al. 2011). The local dependencies can be implemented by using l1/l2 regularization upon the activation possibilities of hidden units in SNNM module.\nIn light of the above argument, this paper exploits a Sparse Deep Stacking Network (S-DSN) for image classification. S-DSN is obtained by stacking the sparse SNNM modules, which consider the two activation function: ReLU and sigmoid; and use the group sparse penalties (l1/l2 regularization) to penalize the hidden representations in SNNM modular. Our S-DSN has many explicit advantages. First, compared with sparse coding technique (LC-KSVD (Jiang, Lin, and Davis 2013)), one-layer S-DSN can learn the projection dictionaries, which lead to a faster inference. Second, compared with DSN, S-DSN can extract sparse representations for learning good features in image classification. Last, SDSN can retain the scalable structure of DSN. To conform the advantages of the S-DSN for image classification, extensive experiments have been performed on the four databases, including Extended YaleB, AR, 15 scene and Caltech101. Compared with multiple related methods, the experiments show that our model gets better classification results than other benchmark methods. In particular, we reach 98.8% recognition accuracy on 15 scene."}, {"heading": "Deep Stacking Network", "text": "The DSN architecture is originally presented in the literature (Deng and Yu 2011b). Deng and Yu explore an original strategy for building deep networks, based on stacking layers of the basic SNNM modules, which take the simplified form of multilayer perceptron. We mathematically describe as follow:\nLet the target vectors ti = [t1i, \u00b7 \u00b7 \u00b7 , tji, \u00b7 \u00b7 \u00b7 , tCi]T be arranged to form the columns of T = [t1, \u00b7 \u00b7 \u00b7 , ti, \u00b7 \u00b7 \u00b7 , tN ] \u2208 RC\u00d7N . Let the input data vectors xi = [x1i, \u00b7 \u00b7 \u00b7 , xji, \u00b7 \u00b7 \u00b7 , xDi]T be arranged to form the columns of X = [x1, \u00b7 \u00b7 \u00b7 , xi, \u00b7 \u00b7 \u00b7 , xN ] \u2208 RD\u00d7N . Formally, in the basic module, the lower-layer weight matrix, which is denoted by W \u2208 RD\u00d7L, connects the linear input layer and the nonlinear hidden layer. The upper-layer weight matrix, which is denoted by U \u2208 RL\u00d7C , connects the nonlinear hidden layer with the linear output layer. The outputs of upper-layer is Y = UT H, where H = \u03c3(WT X) \u2208 RL\u00d7N is the hidden layer outputs and \u03c3(a) = 1/(1 + e\u2212a)\nis the sigmoid activation function (Deng and Yu 2011a; Deng and Yu 2011b). The parameters U and W are learned to minimize the least squares objective:\nmin U,W\nfdsn = \u2016UT H\u2212 T\u20162F + \u03b1\u2016U\u20162F (1)\nwhere \u03b1 is a regularization parameter of upper-layer weight matrix U.\nClearly, U has a closed-form solution:\nU = (HHT + \u03b1I)\u22121HTT (2)\nBy using a gradient descent (Deng and Yu 2011b) algorithm to minimize the the least squares objective in (1) and deriving the gradient of W in the basic module, we obtain\n\u2202fdsn \u2202W\n= 2X [ HT \u25e6 (I\u2212HT ) \u25e6 (UUT H\u2212 UT)T ] (3)\nwhere \u25e6 denotes element-wise multiplication and I is the matrix of all ones.\nThe \u201dconvex\u201d solution accentuates the role of convex optimization in learning the output network weights U in each basic module (Deng and Yu 2011a). Many basic modules are often stacked up with one on top of another to form a deep model. More specifically, the input units of a higher module can include the output units of the lowest module and optionally the raw input feature in the DSN (Deng and Yu 2011b). For obtaining the higher-order information in the data, DSN has recently been extended to Tensor-DSN (TDSN) (Hutchinson, Deng, and Yu 2013), which\u2019s the basic module is to replace a linear map from hidden representation to output with a bilinear mapping. It retains the scalable structure of DSN and provides the higher-order feature interactions missing in DSN."}, {"heading": "Sparse Deep Stacking Network", "text": "The S-DSN is a sparse case of the DSN. The stacking operation of the S-DSN is the same as that for the DSN described in (Deng and Yu 2011b). The general paradigm is to use the output vector of lower module and the original input vector to form the expanded \u201dinput\u201d vector for the higher module of the DSN. The modular architecture of S-DSN is different from that of DSN. We consider the sigmoid function and the ReLU function; and the sparse penalties are added into the hidden units of modular architecture."}, {"heading": "Sparse Module", "text": "The output of upper-layer is Y = UT H\u0302 and the hidden layer output is as follow:\nH\u0302 = \u03c6(WT X) \u2208 RL\u00d7N (4)\nwhere \u03c6(a) is the sigmoid activation function \u03c3(a) or the ReLU activation function max(0, a). For simplicity, letH = {1, 2, \u00b7 \u00b7 \u00b7 , L} denote the set of all hidden units. H is are divided into G groups, where G is the number of groups. The gth group is denoted by Gg , where H =\n\u22c3G g=1 Gg and\u22c2G\ng=1 Gg = \u2205. So, H\u0302 = [H\u0302G1,:; \u00b7 \u00b7 \u00b7 ; H\u0302Gg,:; \u00b7 \u00b7 \u00b7 ; H\u0302GG,:].\nThe parameters U and W are learned to minimize the least squares objective:\nmin U,W\nfsdsn = \u2016UT H\u0302\u2212 T\u20162F + \u03b1\u2016U\u20162F + \u03b2\u03a8(H\u0302) (5)\nwhere \u03b1 is a regularization parameter of upper-layer weight matrix U, \u03b2 is a regularization constant of the activation of the hidden units and \u03a8(H\u0302) represents the imposed penalty over sparse representations H\u0302. Typically, the l1 norm is conducted as a penalty to explicitly enforce sparsity on each sparse representation. It is described as:\n\u03a8(H\u0302) = N\u2211 i=1 \u2016h\u0302i\u20161 (6)\nwhere h\u0302i is the representation of ith example (i = 1, \u00b7 \u00b7 \u00b7 , N).\nIn neural networks, sparse representations are advantageous for classification (Ranzato et al. 2007). Moreover, group sparse representations (Bengio et al. 2009) can learn the statistical dependencies between hidden units and lead to better performance (Luo et al. 2011). To implement the dependencies, we averagely divide hidden units into nonoverlapping groups to restrain the dependencies within these groups and force hidden units in a group to compete with each other (Luo et al. 2011). Luckily, a mixed-norm regularization (l1/l2-norm) can be conducted in the modular architecture to achieve group sparse representations. Following (Luo et al. 2011), we consider the mixed-norm regularization, which is as follows:\n\u03a8(H\u0302) = G\u2211\ng=1\n\u2016H\u0302Gg,:\u20161,2 (7)\nwhere H\u0302Gg,: is the representation matrix associated to those intra-modality data belonging to the gth group and the l1/l2norm is defined as\n\u2016H\u0302Gg,:\u20161,2 = N\u2211 i=1 \u221a\u2211 j\u2208Gg h\u03022j,i (8)"}, {"heading": "Learning Weights- Algorithm", "text": "Once the lower-layer weight matrix W are fixed, H\u0302 are also determined uniquely. Then solving the upper-layer weight matrix U can be formulated as a convex optimization problem:\nmin U fusdsn = \u2016UT H\u0302\u2212 T\u20162F + \u03b1\u2016U\u20162F (9)\nwhich has a closed-form solution:\nU = (H\u0302H\u0302 T + \u03b1I)\u22121H\u0302TT (10)\nThere are two algorithms for learning the lower-layer weight matrix W. First, given fixed current U, W can be optimized using a gradient descent algorithm (Deng and Yu 2011a) to minimize the squared error objective:\nmin W\nf1sdsn = \u2016UT H\u0302\u2212 T\u20162F + \u03b2\u03a8(H\u0302) (11)\nAlgorithm 1 Training Algorithm of Sparse Modular 1: Input: Data matrix X, label matrix T, parameters \u03b8 = { , \u03b1, \u03b2,G} and training epochs E.\n2: Initialize: Projection Matrix W are initialized with small random values. 3: Given W, calculate H\u0302 by Eq. (4). 4: Update W by Eq. (16). 5: Repeat 3-4 E epochs (or until convergence). 6: Output weight matrix W.\nand deriving the gradient, we obtain\n\u2202f1sdsn \u2202W\n=2X [ d\u03c6(H\u0302 T ) \u25e6 (UUT H\u0302\u2212 UT)T ] + 2\u03b2X [ d\u03c6(H\u0302 T ) \u25e6 H\u0302 T \u25e6 /H\u0303 T ]\n(12)\nwhere \u25e6 denotes element-wise multiplication, \u25e6/ denotes element-wise division, H\u0303 that it\u2019s element is h\u0303j,i =\u221a\u2211\nj\u2208Gg h\u0302 2 j,i, d\u03c6(H\u0302\nT ) denotes element-wise gradient com-\nputation, d\u03c6(a) is the gradient of the activation function. When \u03c6(a) is the sigmoid activation function, d\u03c6(a) = \u03c3(a) \u00d7 (1 \u2212 \u03c3(a)) and when \u03c6(a) is the ReLU activation function, d\u03c6(a) is described as:\nd\u03c6(a) = { 1, a > 0; 0, a \u2264 0. (13)\nTo ReLU activation function, we follow the hypothesis (Glorot, Bordes, and Bengio 2011) that the hard non-linearities do not hurt the optimization so long as the gradient can be propagated to many hidden units.\nSecond, for faster moving W towards a direction that finds the optimal points, the deterministic nonlinear relationship between U and W is used to compute the gradient. By plugging (10) into criterion (5), the least squares objective is rewritten as:\nmin W\nf2sdsn =\u2016[(H\u0302H\u0302 T + \u03b1I)\u22121H\u0302TT ]T H\u0302\u2212 T\u20162F +\n\u03b1\u2016(H\u0302H\u0302 T + \u03b1I)\u22121H\u0302TT \u20162F + \u03b2\u03a8(H\u0302) (14) However, when regularization is used in the objective function (5) (i.e. \u03b1 > 0), the gradient of f2sdsn can be very complicated. To simplify the gradient we assume \u03b1 = 0 in f2sdsn. So, second term of f 2 sdsn is equivalent to zero. Similar to (Deng and Yu 2011b), then we derive the gradient \u2202f 2 sdsn \u2202W and obtain \u2202f2sdsn \u2202W =2X [ d\u03c6(H\u0302 T ) \u25e6 [H\u0302 \u2020 (H\u0302TT )(TH\u0302 \u2020 )\u2212 TT (TH\u0302 \u2020 )] ]\n+ 2\u03b2X [ d\u03c6(H\u0302 T ) \u25e6 H\u0302 T \u25e6 /H\u0303 T ]\n(15)\nwhere H\u0302 \u2020 = H\u0302 T (H\u0302H\u0302 T\n)\u22121 and d\u03c6(\u00b7) and H\u0303 are defined in (12).\nThe algorithm then updates W using the gradient defined in (12) and (15) as\nW = W\u2212 \u2202f 1 sdsn \u2202W or W = W\u2212 \u2202f 2 sdsn \u2202W (16)\nAlgorithm 2 Training Algorithm of S-DSN 1: Input: Data X, label T, parameters \u03b8 = { , \u03b1, \u03b2,G},\ntraining epochs E and the number of layers K. 2: Initialize: X1 = X and k = 1. 3: while k \u2264 K 4: Given Xk, T, \u03b8 and E, optimize Wk by Algorithm 1. 5: Given Xk and Wk, calculate H\u0302 k by Eq. (4), Uk by Eq.\n(10) and Yk = ( Uk )T H\u0302 k .\n6: Xk+1 = [X; Yk]. 7: end while 8: Output weight matrix Wk(k = 1, \u00b7 \u00b7 \u00b7 ,K).\nwhere is a learning rate. The weight matrix learning process is outlined in Algorithm 1."}, {"heading": "The S-DSN Architecture", "text": "The spare SNNM module described in the above subsection is used to construct the K-layers S-DSN architecture, where K is the number of layers. In kth spare module we denote the input by Xk, hidden representations by H\u0302 k , output by Yk, label matrix by T and weight matrix by Wk and Uk. Given input data X and label T, when k = 1, X1 = X. Then the general paradigm of S-DSN can be decomposed in three phases:\n\u2022 Step 1: Train the kth sparse module to minimize the least squares error between Yk and T.\n\u2022 Step 2: Generate the input Xk+1 of the k + 1th sparse module by adding the output Yk of kth sparse module.\n\u2022 Step 3: Iterate as in Step 1 and Step 2 to construct the S-DSN architecture.\nWe summarize the optimization of S-DSN in Algorithm 2. For capturing the spare representation from raw data, this paper proposes the S-DSN, which is implemented by penalizing the hidden unit activations and rectifying the negative of outputs of hidden units activations. Due to the simple structure of each module, the S-DSN still retains the computational advantage of the DSN in parallelism and scalability during learning all parameters."}, {"heading": "Experiments", "text": "We present experimental results on four databases: the Extended YaleB database, the AR face database, Caltech101 and 15 scene categories.\n\u2022 Extended YaleB database: this database contains 2,414 frontal face images of 38 people. There are about 64 images for each person. The original images were cropped and normalized to 192\u00d7 168 pixels.\n\u2022 AR database: this database consists of over 4,000 color images of 126 people. Each person has 26 face images taken during two sessions. These images include more facial variations, including different illumination conditions, different expressions, and different facial \u201ddisguises\u201d (sunglasses and scarves). Following the standard\nevaluation procedure, we use a subset of the database consisting of 2,600 images from 50 male subjects and 50 female subjects. Each face image was also cropped and normalized to 165\u00d7 120 pixels.\n\u2022 Caltech-101: this database [10] contains 9144 images belonging to 101 classes, with about 40 to 800 images per class. Most images of Caltech-101 are with medium resolution, i.e., about 300\u00d7 300.\n\u2022 15-Scene: this data set, compiled by several researchers [11, 20, 24], contains a total of 4485 images falling into 15 categories, with the number of images per category ranging from 200 to 400. The categories include living room, bedroom, kitchen, highway, mountain and et al.\nAccording to (Jiang, Lin, and Davis 2013), the four databases are preprocessed 1: in the Extended YaleB database and AR face database, each face image is projected onto a n-dimensional feature vector with a randomly generated matrix from a zero-mean normal distribution. The dimension of a random-face feature in Extended YaleB is 504 while the dimension in AR face is 540. In face databases the n-dimensional features of each image are normalized to [\u22121, 1]. For the Caltech101 database, we first extract sift descriptors from 16 \u00d7 16 patches, which are densely sampled from each image on a dense grid with 6-pixels stepsize; then we extract the spatial pyramid feature based on the extracted sift features with three grids of size 1\u00d71, 2\u00d72 and 4\u00d74. To train the codebook for spatial pyramid, we use the standard k-means clustering with k = 1024. For the 15 scene category database, we compute the spatial pyramid feature using a four-level spatial pyramid and a SIFT-descriptor codebook with a size of 200. Finally, the spatial pyramid features are reduced to 3000 dimensions by PCA.\nThe matrix parameters are initialized with small random values sampled from a normal distribution with zero mean and standard deviation of 0.01. For simplicity, we use the constant learning rate chosen from {20, 15, 5, 2, 1, 0.2, 0.1, 0.05, 0.01, 0.001}, the regularization parameter \u03b1 chosen from {1, 0.5, 0.1}, the sparse regularization parameter \u03b2 chosen from {0.1, 0.05, 0.01, 0.001, 0.0001} and the group number G chosen from {2, 4, 5, 10, 20}. In all experiments, we only train 5 epochs, the number of hidden units is 500 and the number of layers is 2. For each data set, each experiment is repeated 10 times with random selected training and testing images, and the average precision is reported. In the rest of this paper, we denote that S-DSN(sigm) indicates S-DSN with sigmoid function; S-DSN(relu) indicates S-DSN with ReLU function; DSN-1, S-DSN(sigm)-1 and S-DSN(relu)1 respectively indicate one-layer DSN, S-DSN(sigm) and S-DSN(relu); DSN-2, S-DSN(sigm)-2 and S-DSN(relu)-2 respectively indicate two-layer DSN, S-DSN(sigm) and SDSN(relu)."}, {"heading": "Sparseness Comparisons", "text": "Before presenting classification results, we first show the sparseness of S-DSN(sigm) and S-DSN(relu) compared to DSN. We use Hoyer\u2019s sparseness measure (HSM) (Hoyer 2004) to figure out how sparse representations learned by the S-DSN(sigm), S-DSN(relu) and DSN. This measure has good properties, which is in the interval [0, 1] and on a normalized scale. Its value more close to 1 means that there are more zero components in the vector. We perform comparisons on Extended YaleB and AR databases, and results are reported in Table 1. The sparseness results show that S-DSN(sigm) and S-DSN(relu) have higher sparseness and higher recognition accuracy. Table 1 compares the network HSM of the S-DSN(sigm) and the S-DSN(relu) to that of DSN. We observe that the average sparseness of two layers S-DSN(sigm) is about 0.105 (Extended YaleB) and the average sparseness of two layers S-DSN(relu) is about 0.291 (AR). In contract, the average sparseness of two layers DSN is on average below 0.02 in the databases. It can be seen that the S-DSN can learn sparser representations. Due to space reasons, Figure 1 only visualizes the activation probabilities of first hidden layer, which are computed under the SDSN(relu) and the DSN given an image from test set of AR."}, {"heading": "Results", "text": "Face Recognition Extended YaleB: We randomly select half (32) of the images per category as training and the other half for testing. The parameters are selected as follow: in DSN\n1they can be downloaded from: http://www.umiacs.umd.edu/\u223czhuolin/projectlcksvd.html\n= 0.1 and \u03b1 = 0.5; in S-DSN(sigm) = 0.1, \u03b1 = 0.5, G = 2, and \u03b2 = 0.01; in S-DSN(relu) = 0.01, \u03b1 = 2, G = 5, and \u03b2 = 0.001. AR: For each person, we randomly select 20 images for training and the other 6 for testing. In our experiments, = 0.1 and \u03b1 = 0.5 are used in DSN; = 0.1, \u03b1 = 0.5, G = 4, and \u03b2 = 0.001 are used in SDSN(sigm); = 0.01, \u03b1 = 1, G = 4, and \u03b2 = 0.001 are used in S-DSN(relu).\nWe compare S-DSN with DSN (Deng and Yu 2011b), and LC-KSVD (Jiang, Lin, and Davis 2013) and SRC (Wright et al. 2009) algorithms, which reported state-of-the-art results on those two databases. The experimental results are summarized in Table 2 and Table 3, respectively. S-DSN(sigm) achieves better results than DSN, LC-KSVD and SRC. From Table 2 S-DSN(sigm)-1 is better than LC-KSVD and has about 0.2% improvement in Extended YaleB. From Table 3, S-DSN(sigm)-1 and S-DSN(sigm)-2 are also better than LC-KSVD and have about 0.1% and 0.3% improvement in AR, respectively. In addition, we compare with LC-KSVD in terms of the computation time for classifying one test image. S-DSN has a faster inference because it can directly learn projection dictionaries. As shown in Table 4, S-DSN is 7 times faster than LC-KSVD.\n15 Scene Category: Following the common experimental settings, we randomly choose 100 images from each class for training data and the rest for test data. In our experiments, = 20 and \u03b1 = 0.1 are used in DSN; = 20, \u03b1 = 0.1, G = 4, and \u03b2 = 0.05 are used in S-DSN(sigm); = 15, \u03b1 = 0.1, G = 4, and \u03b2 = 0.001 are used in S-DSN(relu).\nWe compare our results with SRC (Wright et al. 2009),\nLC-KSVD (Jiang, Lin, and Davis 2013), DeepSC (He et al. 2014), DSN (Deng and Yu 2011b) and other state-of-the-art approaches: ScSPM (Yang et al. 2009), LLC (Wang et al. 2010), ITDL (Qiu, Patel, and Chellappa 2014), ISPR+IFV (Lin et al. 2014), SR-LSR (Li and Guo 2014), DeCAF (Donahue et al. 2014), DSFL+DeCAF (Zuo et al. 2014). The detailed comparison results are shown in Table 5. Compared to LC-KSVD, S-DSN(relu)-1\u2019s performance is much better, since it makes a 5.9% improvement. It also registers about 1.8% improvement over the deep models: DeepSC, DeCAF, DSFL+DeCAF and DSN. As Table 5 shows, we see that SDSN(relu) performs best among all existing methods. The confusion matrix for the S-DSN(relu) are further shown in Figure 2, from which we can see that the misclassification errors of industrial and store are higher than others.\nCaltech101: Following the common experimental settings, we train on 5, 10, 15, 20, 25, and 30 samples per category and test on the rest. Due to space reasons, we only give the parameters for 30 training samples per category: = 0.2 and \u03b1 = 0.5 are used in DSN; = 0.2, \u03b1 = 0.5, G = 4, and \u03b2 = 0.01 are used in S-DSN(sigm); = 0.05, \u03b1 = 0.5, G = 2, and \u03b2 = 0.001 are used in S-DSN(relu).\nWe evaluate our approach using spatial pyramid features and compare with with SRC (Wright et al. 2009), LC-KSVD (Jiang, Lin, and Davis 2013), DeepSC (He et al. 2014), DSN (Deng and Yu 2011b) and other approaches ScSPM (Yang et al. 2009), LLC (Wang et al. 2010), LRSC (Zhang et al. 2013), LCLR (Jiang, Guo, and Peng 2014). The average classification rates are reported in Table 6. From these results, S-DSN(relu)-1 outperforms the other competing dictionary learning approaches, including LC-KSVD, LRSC, and SRC; and has 1.6% improvement. S-DSN(relu) also reg-\nisters about 1.5% improvement over a deep model: DSN. Note that 76.5% accuracy achieved by our method (the number of hidden units is 1000) is also competitive with the 78.4% reported in DeepSC.\nWe examine how performance of the proposed S-DSN changes when varying the number of hidden units. We randomly select 30 images per category for training data and the rest for test data. We consider six settings where the number of hidden units changes from 100 to 3000 and compare the results with DSN. As reported the results in Figure 3, our approaches maintain high classification accuracies and outperform the DSN model. When increasing the number of hidden units, the accuracy of the system improves for SDSN(sigm), S-DSN(relu) and DSN.\nEffects of Number of Layers: The deep framework utilizes multiple-layers of feature abstraction to get a better representation for images. From Tables 2, 3, 5 and 6, we check the effect of varying the number of layers and the classification accuracy improves as the number of layers increases. In addition, compared to the dictionary learning approaches, S-DSN has a faster inference and a deep architecture. Moreover, S-DSN has a good performance in image classification."}, {"heading": "Conclusion", "text": "In this paper, we present an improved DSN model, S-DSN, for image classification. S-DSN is constructed by stacking many sparse SNNM modules. In each sparse SNNM module, the lower-layer weights and the upper-layer weights are solved by using the convex optimization and the gradient\ndescent algorithm. We use the S-DSN to further extract the sparse representations from the random face features and spatial pyramid features for image classification. Experimental results show that S-DSN yields very good classification results on four public databases with only a linear classifier."}, {"heading": "Acknowledgments", "text": "This work was partially supported by the National Science Fund for Distinguished Young Scholars under Grant Nos. 61125305, 61472187, 61233011 and 61373063, the Key Project of Chinese Ministry of Education under Grant No. 313030, the 973 Program No. 2014CB349303, Fundamental Research Funds for the Central Universities No. 30920140121005, and Program for Changjiang Scholars and Innovative Research Team in University No. IRT13072."}], "references": [{"title": "Group sparse coding", "author": ["Bengio"], "venue": "In Proceedings of the Neural Info. Processing Systems,", "citeRegEx": "Bengio,? \\Q2009\\E", "shortCiteRegEx": "Bengio", "year": 2009}, {"title": "Accelerated parallelizable neural network learning algorithm for speech recognition", "author": ["Deng", "L. Yu 2011a] Deng", "D. Yu"], "venue": "In Proceedings of the Interspeech,", "citeRegEx": "Deng et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2011}, {"title": "Deep convex networks: A scalable architecture for speech pattern classification", "author": ["Deng", "L. Yu 2011b] Deng", "D. Yu"], "venue": "In Proceedings of the Interspeech,", "citeRegEx": "Deng et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2011}, {"title": "Deep learning for signal and information processing. Foundations and Trends in Signal Processing 2-3:197\u2013387", "author": ["Deng", "L. Yu 2013] Deng", "D. Yu"], "venue": null, "citeRegEx": "Deng et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2013}, {"title": "Deep stacking networks for information retrieval", "author": ["He Deng", "L. Gao 2013] Deng", "X. He", "J. Gao"], "venue": "In Proceedings of IEEE Conf. on Acoustics, Speech, and Signal Processing,", "citeRegEx": "Deng et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2013}, {"title": "Scalable stacking and learning for building deep architectures", "author": ["Yu Deng", "L. Platt 2012] Deng", "D. Yu", "J. Platt"], "venue": "In Proceedings of IEEE Conf. on Acoustics, Speech, and Signal Processing,", "citeRegEx": "Deng et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2012}, {"title": "Decaf: A deep convolutional activation feature for generic visual recognition", "author": ["Donahue"], "venue": "In Proceedings of the Int\u2019l Conf. Machine Learning,", "citeRegEx": "Donahue,? \\Q2014\\E", "shortCiteRegEx": "Donahue", "year": 2014}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Glorot", "X. Bengio 2010] Glorot", "Y. Bengio"], "venue": "In Proceedings of the Int\u2019l Conf. Artificial Intelligence and Statistics,", "citeRegEx": "Glorot et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2010}, {"title": "Deep sparse rectifier neural networks", "author": ["Bordes Glorot", "X. Bengio 2011] Glorot", "A. Bordes", "Y. Bengio"], "venue": "In Proceedings of the Int\u2019l Conf. Artificial Intelligence and Statistics,", "citeRegEx": "Glorot et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2011}, {"title": "Learning fast approximations of sparse coding", "author": ["Gregor", "K. LeCun 2010] Gregor", "Y. LeCun"], "venue": "In Proceedings of the Int\u2019l Conf. Machine Learning,", "citeRegEx": "Gregor et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2010}, {"title": "Unsupervised feature learning by deep sparse coding", "author": ["He"], "venue": "In Proceedings of SIAM Int\u2019l Conf. on Data Mining,", "citeRegEx": "He,? \\Q2014\\E", "shortCiteRegEx": "He", "year": 2014}, {"title": "Supervised and projected sparse coding for image classification", "author": ["Huang"], "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,", "citeRegEx": "Huang,? \\Q2013\\E", "shortCiteRegEx": "Huang", "year": 2013}, {"title": "Tensor deep stacking networks", "author": ["Deng Hutchinson", "B. Yu 2013] Hutchinson", "L. Deng", "D. Yu"], "venue": "IEEE Trans. on Pattern Analysis and Machine Intelligence", "citeRegEx": "Hutchinson et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Hutchinson et al\\.", "year": 2013}, {"title": "Locality-constrained low-rank coding for image classification", "author": ["Guo Jiang", "Z. Peng 2014] Jiang", "P. Guo", "L. Peng"], "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,", "citeRegEx": "Jiang et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Jiang et al\\.", "year": 2014}, {"title": "Label consistent k-svd learning a discriminative dictionary for recognition", "author": ["Lin Jiang", "Z. Davis 2013] Jiang", "Z. Lin", "L. Davis"], "venue": "IEEE Trans. on Pattern Analysis and Machine Intelligence", "citeRegEx": "Jiang et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Jiang et al\\.", "year": 2013}, {"title": "Efficient sparse coding algorithms", "author": ["Lee"], "venue": "In Proceedings of the Neural Info. Processing Systems,", "citeRegEx": "Lee,? \\Q2007\\E", "shortCiteRegEx": "Lee", "year": 2007}, {"title": "Sparse deep belief net model for visual area v2", "author": ["Ekanadham Lee", "H. Ng 2008] Lee", "C. Ekanadham", "A. Ng"], "venue": "In Proceedings of the Neural Info. Processing Systems,", "citeRegEx": "Lee et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Lee et al\\.", "year": 2008}, {"title": "Latent semantic representation learning for scene classification", "author": ["Li", "X. Guo 2014] Li", "Y. Guo"], "venue": "In Proceedings of the Int\u2019l Conf. Machine Learning,", "citeRegEx": "Li et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Li et al\\.", "year": 2014}, {"title": "Learning important spatial pooling regions for scene classification", "author": ["Lin"], "venue": "In Proceedings of the IEEE Conf. Computer Vision and Pattern Recognition,", "citeRegEx": "Lin,? \\Q2014\\E", "shortCiteRegEx": "Lin", "year": 2014}, {"title": "Sparse group restricted boltzmann machines", "author": ["Luo"], "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,", "citeRegEx": "Luo,? \\Q2011\\E", "shortCiteRegEx": "Luo", "year": 2011}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Nair", "V. Hinton 2010] Nair", "G. Hinton"], "venue": "In Proceedings of the Int\u2019l Conf. Machine Learning,", "citeRegEx": "Nair et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Nair et al\\.", "year": 2010}, {"title": "Information-theoretic dictionary learning for image classification", "author": ["Patel Qiu", "Q. Chellappa 2014] Qiu", "V. Patel", "R. Chellappa"], "venue": "IEEE Trans. on Pattern Analysis and Machine Intelligence", "citeRegEx": "Qiu et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Qiu et al\\.", "year": 2014}, {"title": "Efficient learning of sparse representations with an energy-based model", "author": ["Ranzato"], "venue": "In Proceedings of the Neural Info. Processing Systems,", "citeRegEx": "Ranzato,? \\Q2007\\E", "shortCiteRegEx": "Ranzato", "year": 2007}, {"title": "Sparse feature learning for deep belief networks", "author": ["Boureau Ranzato", "M. LeCun 2008] Ranzato", "Y. Boureau", "Y. LeCun"], "venue": "In Proceedings of the Neural Info. Processing Systems,", "citeRegEx": "Ranzato et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2008}, {"title": "Locality-constrained linear coding for image classification", "author": ["Wang"], "venue": "In Proceedings of the IEEE Conf. Computer Vision and Pattern Recognition,", "citeRegEx": "Wang,? \\Q2010\\E", "shortCiteRegEx": "Wang", "year": 2010}, {"title": "Robust face recognition via sparse representation", "author": ["Wright"], "venue": "IEEE Trans. on Pattern Analysis and Machine Intelligence", "citeRegEx": "Wright,? \\Q2009\\E", "shortCiteRegEx": "Wright", "year": 2009}, {"title": "Linear spatial pyramid matching using sparse coding for image", "author": ["Yang"], "venue": null, "citeRegEx": "Yang,? \\Q2009\\E", "shortCiteRegEx": "Yang", "year": 2009}, {"title": "Beyond sparsity: The role of l1-optimizer in pattern classification", "author": ["Yang"], "venue": "Pattern Recognition", "citeRegEx": "Yang,? \\Q2012\\E", "shortCiteRegEx": "Yang", "year": 2012}, {"title": "Low-rank sparse coding for image classification", "author": ["Zhang"], "venue": "In Proceedings of the IEEE Int\u2019l Conf. Computer Vision,", "citeRegEx": "Zhang,? \\Q2013\\E", "shortCiteRegEx": "Zhang", "year": 2013}, {"title": "Supervised coupled dictionary learning with group structures for multi-modal retrieval", "author": ["Zhuang"], "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,", "citeRegEx": "Zhuang,? \\Q2013\\E", "shortCiteRegEx": "Zhuang", "year": 2013}, {"title": "Learning discriminative and shareable features for scene classification", "author": ["Zuo"], "venue": "In Proceedings of the Euro. Conf. Computer Vision,", "citeRegEx": "Zuo,? \\Q2014\\E", "shortCiteRegEx": "Zuo", "year": 2014}], "referenceMentions": [], "year": 2015, "abstractText": "Sparse coding can learn good robust representation to noise and model more higher-order representation for image classification. However, the inference algorithm is computationally expensive even though the supervised signals are used to learn compact and discriminative dictionaries in sparse coding techniques. Luckily, a simplified neural network module (SNNM) has been proposed to directly learn the discriminative dictionaries for avoiding the expensive inference. But the SNNM module ignores the sparse representations. Therefore, we propose a sparse SNNM module by adding the mixed-norm regularization (l1/l2 norm). The sparse SNNM modules are further stacked to build a sparse deep stacking network (S-DSN). In the experiments, we evaluate S-DSN with four databases, including Extended YaleB, AR, 15 scene and Caltech101. Experimental results show that our model outperforms related classification methods with only a linear classifier. It is worth noting that we reach 98.8% recognition accuracy on 15 scene.", "creator": "LaTeX with hyperref package"}}}