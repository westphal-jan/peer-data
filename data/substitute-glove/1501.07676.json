{"id": "1501.07676", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jan-2015", "title": "Towards Resolving Software Quality-in-Use Measurement Challenges", "abstract": "Software fairly - in - use comprehends the besides from phone ' s perspectives. It part gained larger importance in aol - curriculum user, computers separate based networking and project healthcare design. User ' ultimate whatever later computers retail are and ad hoc can based instead respect owing taking greatly three analysed provisions communications enhanced - in - use. However, nobody physical - following - use sampling called difficult? Although some one not enabled quality equipped only help opportunity, actually works study the potential reasons may software quality - with - use measurement. This paper has two main amount; 38) special particularly issues and challenges beginning richter software appropriate - its - use although full context of the ISO SQuaRE sequel took aspects files quality modeling, 3) Presents was musical cooperation similar can that being to risk open-source quality - first - use, and 17) presents postponed finish its standards - 1999 - carry topic consensus. Concisely, its besides their involved time has illustrate similar instead the standard models and which limitations which suguri of was innovative software requires designed. The introduce framework 7,000 steady techniques use to predict networks quality - time - use.", "histories": [["v1", "Fri, 30 Jan 2015 06:51:42 GMT  (402kb)", "http://arxiv.org/abs/1501.07676v1", "9 pages, 4 figures, Journal of Emerging Trends in Computing and Information Sciences, Vol. 5, No. 11, November 2014"]], "COMMENTS": "9 pages, 4 figures, Journal of Emerging Trends in Computing and Information Sciences, Vol. 5, No. 11, November 2014", "reviews": [], "SUBJECTS": "cs.SE cs.CL", "authors": ["issa atoum", "chih how bong", "narayanan kulathuramaiyer"], "accepted": false, "id": "1501.07676"}, "pdf": {"name": "1501.07676.pdf", "metadata": {"source": "CRF", "title": "Towards Resolving Software Quality-in-Use Measurement Challenges", "authors": ["Issa Atoum", "Chih How Bong", "Narayanan Kulathuramaiyer", "Kota Samarahan", "Sarawak", "Malaysia"], "emails": [], "sections": [{"heading": null, "text": "applications, mobile service based applications and project management tools. User\u2019s decisions on software acquisitions are often ad hoc or based on preference due to difficulty in quantitatively measure software quality-in-use. However, why qualityin-use measurement is difficult? Although there are many software quality models to our knowledge, no works surveys the challenges related to software quality-in-use measurement. This paper has two main contributions; 1) presents major issues and challenges in measuring software quality-in-use in the context of the ISO SQuaRE series and related software quality models, 2) Presents a novel framework that can be used to predict software quality-in-use, and 3) presents preliminary results of quality-in-use topic prediction. Concisely, the issues are related to the complexity of the current standard models and the limitations and incompleteness of the customized software quality models. The proposed framework employs sentiment analysis techniques to predict software quality-in-use.\nKeywords: Software Quality-in-use; ISO 25010; SQUARE series; Sentiment analysis; Quality Measurement"}, {"heading": "1. INTRODUCTION", "text": "With thousands of software published online, it is essential for users to find the software that matches their stated or implied needs. Users often seek better software quality. Garvin [1] identified five views/approaches of quality. The nearest definition in this paper is the user based approach definition \u201cmeeting customer needs\u201d. If the customer is satisfied, then product or service has good quality. It has been implemented in mobile-based applications[2]\u2013[4] and Web applications[5]\u2013[7].\nSoftware quality can be conceptualized from three\ndimensions; the quality characteristics, the quality model, and software quality requirements. A Quality characteristic is \u201dcategory of software quality attributes that bears on software quality\u201d [8, p. 9]. Quality requirements are what the user needs in the software such as performance, user interface or security requirements. The quality model is how quality characteristics are related to each other and to the final product quality. Measuring the software quality will check if user requirements are met and decide the degree of quality.\nThe ISO/IEC 25010:2010 standard (ISO 25010\nhereafter), a part of a series known as the Software Quality Requirements and Evaluation (SQuaRE), defines systems\u2019 quality as \u201cthe degree to which the system satisfies the stated and implied needs of its various stakeholders, and thus provides value\u201d [9, p. 8]. The ISO 25010 has two major dimensions: Quality-in-use (QinU) and Product Quality. The former specifies characteristics related to the human interaction with the system and the latter specifies characteristics intrinsic to the product. QinU is defined as \u201ccapability of a software product to influence users' effectiveness, productivity, safety and satisfaction to satisfy their actual needs when using the software product to achieve their goals in a specified context of use\u201d [8, p. 17].The QinU model consists of five characteristics:\neffectiveness, efficiency, satisfaction, freedom from risk and context coverage. Table 1 illustrates the definition of these characteristics."}, {"heading": "1.1 Problem Statement", "text": "many challenges that need to be tackled in order to measure QinU systematically. However, current literature reviews on software QinU does not identify or explain them. To the best of our knowledge this is the first work that specifically identifies and explains the problems towards measuring QinU. 2) Insufficient research on other possible research\ndirections to tackle the first problem. To our knowledge, little work target to resolve QinU problem [10]."}, {"heading": "1.2 Research Contributions", "text": " This paper identifies and explains several problems while measuring software QinU using the standard\nand customized quality models. This paper is the first that surveys several quality models and explains various challenges to measure QinU. In brief, most of the challenges in ISO standard models are related to the complication and incompleteness of the documents. On the other hand, customized quality models are subject to incomplete models that are designed for their own specific needs.\n Proposes a novel framework to predict software QinU from software reviews. Given the issues\nrelated to measuring QinU a framework is presented to resolve these issues. The framework is based on sentiment analysis, an emerging branch of Natural Language Processing. Sentiment analysis or opinion mining targets to analyze textual user judgments about products or services[11], [12]\nFirst major software quality-in-use related models\nare illustrated. Then, the quality-in-use measurement challenges are explained. Next, a proposed approach is presented and finally, the paper is concluded."}, {"heading": "2. SOFTWARE QUALITY-IN-USE MODELS", "text": "There have been many works in software quality\nmodels but to our knowledge, no research has been conducted to summarize the main problems in measuring quality-in-use. Measuring software quality-in-use can be divided in two main frameworks; the standard and customized model frameworks."}, {"heading": "2.1 Standard Frameworks", "text": "There have been many standards that can support software quality, but many of them are rather check list guide. For example, the ISO 9000 family has been criticized in literature not to be used for software [13]. The ANSI/IEEE 730-2002[14] support quality assurance plans. ISO/IEC 15504[15] or as it is known Software Process Improvement and Capability Determination (SPICE), is a set of technical standards documents for the computer software development process and related business management functions. These standards are not designed to address quality-in-use nor specific characteristics of software product quality.\nRecently, the Software Product Quality\nRequirements and Evaluation (SQuaRE) ISO standard series are a result of blending the ISO/IEC 9126 and ISO/IEC 14598 series of standards. The purpose of the SQuaRE series of standards is to assist developing and\nacquiring software products with the specification of quality requirements and evaluation. From the viewpoint of the stakeholders the quality requirements are specified, the quality of the product is evaluated based on this specification utilizing chosen quality model, quality measurement and quality management process.\nTo measure QinU effectively, five divisions of the\nSQuaRE series have to be considered the ISO 2502n to ISO 25024 and in line with the ISO 25010 model as shown in Fig. 1. Technically and, more precisely, the QinU Measurement Standard ISO 25022 has to be considered in the context of four other standards: the Measurement Reference Model and Guide ISO 25020; the Measurement of Data Quality 25024, the Measurement of System and Software Product Quality ISO 25023, and Quality Measure Elements Standards ISO 25021. Fig. 2 depicts the relationship between the ISO/IEC 25022 and other ISO/IEC 2502n division of standards.\nWhile these standards provide the freedom of\ncustomization, they need careful quality assurance to provide apparent integration between related standards. They also suffer to detail how the customization need to be carried out."}, {"heading": "2.2 Customized Software Quality Models", "text": "Below are some of related models grouped in logical groups.\n2.2.1 Hierarchical Models\nThese models link various quality characteristics\ntogether at different levels, which in turn are finally linked with the root product quality. Activity based models can adopt these models to measure software quality. Activity based models provide an interrelation between system properties and the activities carried out by the various stakeholders. Activity based models usually tracks development or testing activities rather than user activities .Famous hierarchical models are McCall\u2019s Quality Model [16], Boehm\u2019s Quality Model [17], Dromey\u2019s Quality Model [18], and The Software Quality In Development (SQUID) approach [19]."}, {"heading": "2.2.2 One-Quality-Aspect Models", "text": "These models measure one aspect of software\nquality. This category includes predictive quality models[20]\u2013[23], quality metrics models[24]\u2013[27] and software reliability models.\nPredictive quality models[20]\u2013[23]use the product\nattributes or its properties and product users to predict the quality of the software. Exploiting ideas in COCOMO[20]the Constructive Quality Model [21], [22] (COQUAMO) helps project managers to manage, assess and predict product during the development lifecycle. Software Metrics Models are concerned with quality evaluation of a specific quality metric, quality assurance, or prediction. Many researchers have shown that these metrics are not certain indicators of faults[28], line code dependent [28] or programming dependent[29][30].Software Reliability Models target to measure the reliability of software systems based on failures intensity and software history profiles. Example of such models are [31], [32]. The application of these models to get quality-in-use is not feasible because the software will be in operation phase for users. I.e., there is neither history nor source code for investigation"}, {"heading": "2.2.3 Provider-Specific Models", "text": "There are specific quality models to certain\nprogramming language or implementation platforms. FURPS Quality Model was presented by Grady[33] and later extended and owned by IBM Rational Software [34]\u2013 [36]. Quamoco Product Quality Model[37] was initially designed for German Software and is a multipurpose quality model based on ISO 25010.\nFrom previously studied models several challenges must be tackled. Section 3 below discusses a list of these challenges."}, {"heading": "3 QUALITY-IN-USE MEASUREMENT CHALLENGES", "text": "Below are major challenges while measuring\nsoftware quality-in-use in general, measuring quality-in-use using standard frameworks, and measuring quality-in-use using customized models."}, {"heading": "3.1 General Challenges", "text": ""}, {"heading": "3.1.1 Task Measurement", "text": "To measure QinU there is a need to agree with the\nsoftware user on a set of tasks that he/she need to do in order to accomplish a pragmatic goal (\u201cdo goals\u201d to achieve the task such as pay a bill). This means the user should be involved in the quality requirements specification which might not be applicable in all times. Other issues related to task measurement embraces the variety of tasks from one software function to another and from software to another. For example, a task to open a file for writing is different than a task of removing special characters from a text file. Worse on this, defining what are the tasks is by itself a major challenge. Hedonic tasks (the \u201cbe goals\u201d) that imply user satisfaction cannot be specified, thus cannot be measured directly."}, {"heading": "3.1.2 The Web Software Development Life Cycle", "text": "Users of publicly available online software are never asked to be part of the system development life cycle, but usually the developers and software designer are making assumptions on user needs. In cases where software is designed to be used by global users such as operating systems or antivirus software, then software publishers have to find other ways to collect user needs. However, it might be a disaster when users start using the software. Not because of software bugs, but because users are not satisfied. Users need to see software doing what they were thinking of without draining their mind with all the lifecycle of the software."}, {"heading": "3.1.3 Dynamic Customer Needs", "text": "Customer needs are dynamic and they can change\nfrom time to time, so quantitative measures might not be suitable. Ishikawa [38] states that \"International standards established by the International Organization for Standardization (ISO) or the International Electro technical Commission (IEC) are not perfect. They contain many shortcomings. Consumers may not be satisfied with a product which meets these standards. Consumer requirements change from year to year and even frequently updated standards cannot keep the pace with consumer requirements\". These needs are usually resolved by building new software versions, however software might get complicated or buggy due to extra feature added that were not planned ahead. If users are involved ahead of time, these needs will be incorporated. Therefore, this problem returns us to the first and second unsolved issues above."}, {"heading": "3.2 Challenges Related to Standard Quality Frameworks", "text": ""}, {"heading": "3.2.1 Quality Models Critiques", "text": "There are problems that are intrinsic to quality models. In a comprehensive study of software quality models,[39] identified critiques to many software quality models; they are unclear of their purposes, not satisfying users of how to use the quality models, and there is no uniform terminology between different models. Masip et\nal.[40]stated that user experience is implied in ISO 25010 but is not defined."}, {"heading": "3.2.2 Evaluation Requirements", "text": "Looking into the mathematical formulas of qualityin-use in the ISO 25022 standard and the proposed methods to measure quality-in-use, quality managers find it a hard job. For example, to measure the effectiveness; task completion, task effectiveness and error frequency has to be calculated. Moreover, Integrating related quality processes of various standards (Fig. 1, Fig. 2) is a problem for quality engineers. The reason behind this problem is the need of experienced engineers given limited information in the standard models on how to customize them, especially for small sized companies. In an extension to the ISO 25010 Lew et al. [41] suggest adding data quality inside the ISO 25010 instead of being separate. Monitoring user actions or usage statistics to measure quality-in-use are not enough. A wide range of measuring methods needs an acceptable level of experts in each domain as shown in ISO 25022 standard."}, {"heading": "3.2.3 QinU Environmental Factors", "text": "While quality-in-use model tries to measure the human computer system interaction there are many factors that affect quality-in-use according to the ISO QinU model: the information system, target computer system, target software, target data, usage environment, and user type (primary, secondary, or indirect user). Measuring or estimating these factors is a complex process."}, {"heading": "3.3 ChallengesRelated to Customized Models", "text": ""}, {"heading": "3.3.1 Limitation of Quality-in-use Models", "text": "Although there are many software quality models\nsuch as McCall, Boehm, Dromey and FURUPS [16], [18] , most of them target the software product or process characteristics and does not suit software quality-in-use or require manual user involvement [42], [43]. The McCabe(1976) and Halstead(1977), are used since 1970\u2019s while Chidamber& Kemerer metrics[26] triggers its use in 1994. These metrics depend on programming style objectoriented[26] versus procedure programming approaches[24], [25]. Moreover, results from COQUAMO model concluded that there were no software product metrics that were, in general, likely to be good predictors of final product qualities .Thus metrics used in measuring product quality cannot be utilized to measure quality-in-use directly."}, {"heading": "4. PROPOSED FRAMEWORK", "text": "Opinion mining or sentiment analysis is an emerging research direction based on Natural Language Processing that targets to analyze textual user judgments about products or service[11], [12]. Reviews text snippets are good sources for users to decide software purchase and they are a goldmine for product providers. It is obvious that, the average human reader will have difficulty accurately summarizing relevant information and identifying opinions\ncontained in reviews about a product. Moreover, human analysis of textual information is subject to considerable biases resulted from preferences and different understanding of written textual expressions. Therefore, opinion mining provided an alternative to identify important reviews and opinions to answer users\u2019 queries[44], [45].\nDespite the difficulties of sentiment analysis\napproach[46], [47][48], it can be used to overcome issues discussed in Section 3. The sentiment analysis can seemingly work on user reviews without active user involvement. Moreover, by sentiment analysis the software trends can be analyzed and future software quality can be predicted.\nNext are the details of the framework."}, {"heading": "4.1 Proposed Quality-in-use Prediction Framework", "text": "Fig. 3 shows a general framework to predict software Quality-in-use. We reemphasize that the purpose of this framework is to present a conceptual model to highlight high level details of the proposed framework. In this figure processes are marked by the letter p followed by process number and the input is marked by input1 and input2 respectively. The general idea of the framework is to utilize software reviews and ISO standard documents in order to process review text snippets into QinU characteristics.\nThe proposed framework has two inputs, the ISO\nQinU documents (input1) and the software reviews (input2). In this framework, the ISO documents have the quality-in-use description, modeling, specification and evaluation process components. These components will be used to 1) describe QinU for annotators, 2) to get the QinU characteristics, 3) to score QinU using formulas, and 4) to help validate the proposed model. The software reviews text is fed into a data preparation process (p1) in order to get a set of annotated/classified sentences that would be used as a gold standard.\nIn the data preparation process, first reviews are\ncrawled from software, websites such as Amazon and CNET. These reviews have a star rating from 1 to 5, where 1 stands for bad comment about the software and 5 stands for excellent comment. To balance the input data, for each star rating the top 10 reviews are selected for the next step. This process ensures that the input comments covers the whole star rating range of comments. Next, the reviews from the previous step are split into sentences using a combined automatic method and manual method to cover long sentences or sentences that are missing punctuated. Taking a sentence at a time and within the context of the review the annotator assigns a topic to the sentence. If the sentence is topic related, the annotator will assign the keyword that makes that sentence for a certain topic. For example the annotator might select the word fast from the sentence \u201cthis software is fast\u201d as a keyword for the topic efficiency. Additionally the annotator will choose why a sentence is positive or negative by choosing an opinion, expression word and a modifier if available. Finally the classified sentences are saved in the database for the next step which is QinU extraction.\nThe core of this framework is the QinU extraction.\nIn this step it is proposed to use a sentence semantic similarity measure to map testing sentences into QinU characteristics (p2). In this step the sentences are classified into 3 topics; effectives, efficiency, and risk mitigation using a proposed sentence similarity. In the next step, each sentence is assigned a polarity by using data from the gold standard data set (p1). QinU is scored in process p4 by using linear combination of Qin Characteristics described in the ISO QinU Measurement Standard ISO 25022.\nTo evaluate the efficiency of the proposed sentence\nmeasure in process p2, it can be compared with other famous approaches. Several methods can be used for comparison. This paper chooses to compare with the below methods. The reason for choosing these methods is to have different measures from different spectrums. Li and google tri-grams [49] as sentence measures, Multinomial Naive Bayes text classification (NB) [50]\u2013[52] and SVM[53] for text classification, LSA [54] for semantic space classification. These methods are evaluated in terms of standard classification performance measures: f-measure, accuracy and ROC analysis shown in process p6. In order to validate the framework a Use Case is built in p7 to validate the model."}, {"heading": "5. PRELIMINARY RESULTS", "text": "First the F-measure experiments are shown. Then the top 5 topic words are shown."}, {"heading": "5.1 F-measur Results", "text": "To show the validity of this work, 600 software\nsentences were labelled to QinU topics. Then 3 algorithms were run; the Multinomial Naive Bayes (NB) Measure\nalgorithm[55], The Multiclass SVM[56], and the Latent semantic analysis[57]. These methods were able to detect a test sentence topic (illustrated in the P2 step of the Fig.3). The experiment was run on 3 fold cross validation. Fig. Fig. 4 shows the F-measure of these measures. The figure\nshows that the sentence length has a direct effect on the final F-measure. Short sentences will tend to have less common words and thus low F-measure."}, {"heading": "5.2 Top Five Keywords", "text": "Table 2 shows the top 5 keywords in each topic.\nFrom the table, we can see that the words in effectiveness are talking about doing the job, the words in efficiency are talking about expenditure of resources. The risk keywords are talking about the possibility of losing data."}, {"heading": "6. RELATED WORKS", "text": "Feature or topic extraction has been discussed in literature in many works such as [48], [58]\u2013[61]. Most of these works use the language semantics to extract features such as nouns and noun phrases along with their frequencies subject to predefined thresholds. Qiu et al. [45], [61] suggested to extract both features and opinion by propagating information between them using grammatical syntactic relations.\nLeopairote, Surarerks, and Prompoon[10] proposed\na model that can extract and summarize software reviews in order to predict software \u201cquality-in-use\u201d. The model depends on a manually built ontology of ISO 9126 \u201cqualityin-use\u201d keywords and Word Net 3.0 synonyms expansion. We consider the work of [10] the most nearby to this paper.\nThe difference from proposed work is that the proposed framework employs word similarity and relatedness rather than rule based classification and ontologies."}, {"heading": "7. CONCLUSION", "text": "Quality-in-use represents software quality in the viewpoint of a user. This paper presents the major issues in measuring software quality-in-use. Quality-in-use can be measured using standard SQuaRE series while many characteristics of software quality-in-use are scattered in many customized software quality models. Measuring quality-in-use is challenging, due to the complexity of current standard models and the incompleteness of other related customized models. The viewpoint of the software users is hard to be implemented within the software lifecycle ahead of time especially for hedonic tasks. This paper proposes to process software reviews in order to get software quality-in-use. The framework employs sentence semantic relatedness to get a score for QinU characteristics."}, {"heading": "8. ACKNOWLEDGMENT", "text": "This study was supported in part by University Malaysia Sarawak' Zamalah Graduate Scholarship and grant ERGS/ICT07 (01) /1018/2013 (15) Minister of Education Malaysia."}], "references": [{"title": "What does product quality really mean", "author": ["D.A. Garvin"], "venue": "Sloan Manage. Rev., vol. 26, no. 1, pp. 25\u2013 43, 1984.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1984}, {"title": "Attributes for the quality in use of mobile government systems", "author": ["N.B. Osman", "I.M. Osman"], "venue": "2013 International Conference on Computing, Electrical and Electronics Engineering (ICCEEE), 2013, pp. 274\u2013279.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "A New Methodology (CON-INFO) for Context- Based Development of a Mobile User Interface in Healthcare Applications", "author": ["R. Alnanih", "O. Ormandjieva", "T. Radhakrishnan"], "venue": "Pervasive Health SE - 13, 1st ed., A. Holzinger, M. Ziefle, and C. R\u00f6cker, Eds. London: Springer London, 2014, pp. 317\u2013342.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "A model of qualityin-use for service-based mobile ecosystem", "author": ["H.H.J. La", "S.D.S. Kim"], "venue": "2013 1st International Workshop on the Engineering of Mobile-Enabled Systems (MOBS), 2013, pp. 13\u201318.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Evaluating the perceived and estimated quality in use of Web 2.0 applications", "author": ["T. Orehova\u010dki", "A. Grani\u0107", "D. Kermek"], "venue": "J. Syst. Softw., vol. 86, no. 12, pp. 3039\u20133059, Dec. 2013.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Development of a Methodology for Evaluating the Quality in Use of Web 2.0  Applications", "author": ["T. Orehova\u010dki"], "venue": "Human-Computer Interaction \u2013 INTERACT 2011 SE - 38, vol. 6949, P. Campos, N. Graham, J. Jorge, N. Nunes, P. Palanque, and M. Winckler, Eds. Springe rBerlin Heidelberg, 2011, pp. 382\u2013385.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "SWET-QUM: a quality in use extension model for semantic web exploration tools", "author": ["J.L. Gonz\u00e1lez", "R. Garc\u00eda", "J.M. Brunetti", "R. Gil", "J.M. Gimeno"], "venue": "Proceedings of the 13th International Conference on Interacci\\\u00f3n Persona-Ordenador, 2012, pp. 15:1\u201315:8.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}, {"title": "ISO/IEC 25000:2014, Software and system engineering--Software product Quality Requirements and Evaluation (SQuaRE)--Guide to SQuaRE", "author": ["ISO"], "venue": "Geneva, Switzerland, 214AD.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 0}, {"title": "ISO/IEC 25010: 2011, Systems and software engineering--Systems and software Quality Requirements and Evaluation (SQuaRE)-- System and software quality models", "author": ["ISO/IEC"], "venue": "International Organization for Standardization, Geneva, Switzerland, 2011.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "Software quality in use characteristic mining from customer reviews", "author": ["W. Leopairote", "A. Surarerks", "N. Prompoon"], "venue": "2012 Second International Conference on Digital Information and Communication Technology and it\u2019s Applications (DICTAP), 2012, pp. 434\u2013439.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Lexicon-based methods for sentiment analysis", "author": ["M. Taboada", "J. Brooke", "M. Tofiloski", "K. Voll", "M. Stede"], "venue": "Comput. Linguist., vol. 37, no. 2, pp. 267\u2013307, Jun. 2011.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "Topic sentiment mixture: modeling facets and opinions in weblogs", "author": ["Q. Mei", "X. Ling", "M. Wondra", "H. Su", "C. Zhai"], "venue": "Proceedings of the 16th international conference on World Wide Web, 2007, pp. 171\u2013180.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2007}, {"title": "A critical look at ISO 9000 for software quality management", "author": ["D. Stelzer", "W. Mellis", "G. Herzwurm"], "venue": "Softw. Qual. J., vol. 6, no. 2, pp. 65\u2013 79, 1997.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1997}, {"title": "ISO/IEC 15504", "author": ["R.M. Poston", "\u201cIEEE 730: a guide for writing successful SQA plans", "\u201d IEEE Softw.", "pp. 86\u201388", "1985. K. El-Emam", "I. Garro"], "venue": "Int.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 0}, {"title": "Factors in software quality :Preliminary Handbook on Software Quality for an Acquisition Manager", "author": ["J.A. McCall", "P.K. Richards", "G.F. Walters"], "venue": "General Electric, National Technical Information Service., Sunnyvale,CA, 1977.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1977}, {"title": "A model for software product quality", "author": ["R.G. Dromey"], "venue": "IEEE Trans. Softw. Eng., vol. 21, no. 2, pp. 146\u2013162, Feb. 1995.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1995}, {"title": "The SQUID approach to defining a quality model", "author": ["B. Kitchenham", "S. Linkman", "A. Pasquini", "V. Nanni"], "venue": "Softw. Qual. J., vol. 6, no. 3, pp. 211\u2013233, 1997.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1997}, {"title": "Software engineering economics", "author": ["B.W. Boehm"], "venue": "IEEE Trans. Softw. Eng., no. 1, pp. 4\u201321, 1984.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1984}, {"title": "Towards a constructive quality model. Part 1: Software quality modelling, measurement and prediction", "author": ["B. Kitchenham"], "venue": "Softw. Eng. J., vol. 2, no. 4, pp. 105\u2013126, 1987.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1987}, {"title": "Towards a constructive quality model. Part 2: Statistical techniques for modelling software quality in the ESPRIT REQUEST project", "author": ["B. Kitchenham", "L. Pickard"], "venue": "Softw. Eng. J., vol. 2, no. 4, pp. 114\u2013126, 1987.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1987}, {"title": "Bayesian analysis of software cost and uality models", "author": ["D.-C. Sunita"], "venue": "UNIVERSITY OF SOUTHERN CALIFORNIA, 1999.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 1999}, {"title": "A complexity measure", "author": ["T.J. McCabe"], "venue": "IEEE Trans. Softw. Eng., no. 4, pp. 308\u2013320, 1976.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1976}, {"title": "Elements of Software Science (Operating and programming systems series)", "author": ["M.H. Halstead"], "venue": "Elsevier Science Inc.,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1977}, {"title": "A metrics suite for object oriented design", "author": ["S.R. Chidamber", "C.F. Kemerer"], "venue": "IEEE Trans. Softw. Eng., vol. 20, no. 6, pp. 476\u2013493, 1994.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1994}, {"title": "Maintainability Index Technique for Measuring Program Maintainability", "author": ["E. VanDoren"], "venue": "SEI STR Rep., 2002.", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2002}, {"title": "Software metrics: a rigorous and practical approach, 2nd ed", "author": ["N.E. Fenton", "S.L. Pfleeger"], "venue": "PWS Publishing Co.,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1998}, {"title": "Quantifying the quality of object-oriented design: the factor-strategy model", "author": ["R. Marinescu", "D. Ratiu"], "venue": "Proceedings of the 11th Working Conference on Reverse Engineering, 2004, pp. 192\u2013 201.", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2004}, {"title": "A hierarchical model for object-oriented design quality assessment", "author": ["J. Bansiya", "C.G. Davis"], "venue": "IEEE Trans. Softw. Eng., vol. 28, no. 1, pp. 4\u201317, 2002.", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2002}, {"title": "A Logarithmic Poisson Execution Time Model for Software Reliability Measurement", "author": ["J.D. Musa", "K. Okumoto"], "venue": "Proceedings of the 7th International Conference on Software Engineering, 1984, pp. 230\u2013238.", "citeRegEx": "31", "shortCiteRegEx": null, "year": 1984}, {"title": "The Littlewood-Verrall model for software reliability compared with some rivals", "author": ["B. Littlewood"], "venue": "J. Syst. Softw., vol. 1, no. 0, pp. 251\u2013258, 1980. R. B. Grady, Practical software metrics for project", "citeRegEx": "32", "shortCiteRegEx": null, "year": 1980}, {"title": "The quamoco product quality modelling and assessment approach", "author": ["S. Wagner", "K. Lochmann", "L. Heinemann", "M. Kl\u00e4s", "A. Trendowicz", "R. Pl\u00f6sch", "A. Seidl", "A. Goeb", "J. Streit"], "venue": "Proceedings of the 2012 International Conference on Software Engineering, 2012, pp. 1133\u20131142. K. Ishikawa, What is total quality control? the", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2012}, {"title": "Software quality models: Purposes, usage scenarios and requirements", "author": ["F. Deissenboeck", "E. Juergens", "K. Lochmann", "S. Wagner"], "venue": "IEEE Workshop on Software Quality WOSQ \u201909, 2009, pp. 9\u201314.", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2009}, {"title": "User experience specification through quality attributes", "author": ["L. Masip", "M. Oliva", "T. Granollers"], "venue": "Proceedings of the 13th IFIP TC 13 international  conference on Human-computer interaction - Volume Part IV, 2011, pp. 656\u2013660.", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2011}, {"title": "Integrating quality, quality in use, actual usability and user experience", "author": ["P. Lew", "L. Olsina", "L. Zhang"], "venue": "Software Engineering Conference (CEE-SECR), 2010 6th Central and Eastern European, 2010, no. 978, pp. 117\u2013123.", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2010}, {"title": "Quality models: Role and value in software engineering", "author": ["D. Samadhiya", "S.-H. Wang", "D. Chen"], "venue": "2010 2nd International Conference on Software Technology and Engineering (ICSTE), 2010, vol. 1, pp. V1\u2013320 \u2013V1\u2013324.", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2010}, {"title": "Quality models in software engineering literature: an analytical and comparative study", "author": ["R.E. Al-Qutaish"], "venue": "J. Am. Sci., vol. 6, no. 3, pp. 166\u2013175, 2010.", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2010}, {"title": "Weakness Finder: Find product weakness from Chinese reviews by using aspects based sentiment analysis", "author": ["W. Zhang", "H. Xu", "W. Wan"], "venue": "Expert Syst. Appl., vol. 39, no. 11, pp. 10283\u201310291, Sep. 2012.", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2012}, {"title": "Expanding domain sentiment lexicon through double propagation", "author": ["G. Qiu", "B. Liu", "J. Bu", "C. Chen"], "venue": "Proceedings of the 21st international jont conference on Artifical intelligence, 2009, pp. 1199\u20131204.", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2009}, {"title": "Thumbs up or thumbs down?: semantic orientation applied to unsupervised classification of reviews", "author": ["P.D. Turney"], "venue": "Proceedings of the 40th Annual Meeting on Association for Computational Linguistics, 2002, no. July, pp. 417\u2013 424.", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2002}, {"title": "Sentiment Classification Based on Ontology and SVM Classifier", "author": ["K.P.P. Shein", "T.T.S. Nyunt"], "venue": "Second International Conference on Communication Software and Networks, 2010, pp. 169\u2013172.", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2010}, {"title": "Extracting and ranking product features in opinion documents", "author": ["L. Zhang", "B. Liu", "S.H.S.H. Lim", "E. O\u2019Brien- Strain"], "venue": "Proceedings of the 23rd International Conference on Computational Linguistics: Posters, 2010, no. August, pp. 1462\u2013 1470.", "citeRegEx": "48", "shortCiteRegEx": null, "year": 2010}, {"title": "Text similarity using google tri-grams", "author": ["A. Islam", "E. Milios", "V. Ke\u0161elj"], "venue": "Advances in Artificial Intelligence, vol. 7310, L. Kosseim and D. Inkpen, Eds. Springer, 2012, pp. 312\u2013317.", "citeRegEx": "49", "shortCiteRegEx": null, "year": 2012}, {"title": "A Sequential Algorithm for Training Text Classifiers", "author": ["D.D. Lewis", "W.A. Gale"], "venue": "Proceedings of the 17th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, 1994, pp. 3\u201312.", "citeRegEx": "50", "shortCiteRegEx": null, "year": 1994}, {"title": "Multinomial naive bayes for text categorization revisited", "author": ["A.M. Kibriya", "E. Frank", "B. Pfahringer", "G. Holmes"], "venue": "AI 2004: Advances in Artificial Intelligence, Springer, 2005, pp. 488\u2013499.", "citeRegEx": "51", "shortCiteRegEx": null, "year": 2004}, {"title": "Naive Bayes text classifiers: a locally weighted learning approach", "author": ["L. Jiang", "Z. Cai", "H. Zhang", "D. Wang"], "venue": "J. Exp. &amp; Theor. Artif. Intell., vol. 25, no. 2, pp. 273\u2013286, 2013.", "citeRegEx": "52", "shortCiteRegEx": null, "year": 2013}, {"title": "On the Algorithmic Implementation of Multiclass Kernel-based Vector Machines", "author": ["K. Crammer", "Y. Singer"], "venue": "J. Mach. Learn. Res., vol. 2, pp. 265\u2013 292, Mar. 2002.", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2002}, {"title": "A Comparative Study of Two Short Text Semantic Similarity Measures", "author": ["J. O\u2019Shea", "Z. Bandar", "K. Crockett", "D. McLean"], "venue": "Agent and Multi-Agent Systems: Technologies and Applications, vol. 4953, N. Nguyen, G. Jo, R. Howlett, and L. Jain, Eds. Springer Berlin Heidelberg, 2008, pp. 172\u2013181.", "citeRegEx": "54", "shortCiteRegEx": null, "year": 2008}, {"title": "A comparison of event models for naive bayes text classification", "author": ["A. McCallum", "K. Nigam"], "venue": "Association for the Advancement of Artificial Intelligenceworkshop on learning for text categorization, 1998, vol. 752, pp. 41\u201348.", "citeRegEx": "55", "shortCiteRegEx": null, "year": 1998}, {"title": "A Training Algorithm for Optimal Margin Classifiers", "author": ["B.E. Boser", "I.M. Guyon", "V.N. Vapnik"], "venue": "Proceedings of the Fifth Annual Workshop on Computational Learning Theory, 1992, pp. 144\u2013152.", "citeRegEx": "56", "shortCiteRegEx": null, "year": 1992}, {"title": "Indexing by latent semantic analysis", "author": ["S.C. Deerwester", "S.T.S.T. Dumais", "T.K. Landauer", "G.W. Furnas", "R.A. Harshman"], "venue": "J. Am. Soc. Inf. Sci., vol. 41, no. 6, pp. 391\u2013407, Sep. 1990.", "citeRegEx": "57", "shortCiteRegEx": null, "year": 1990}, {"title": "aspect extraction through Semi-Supervised modeling", "author": ["A. Mukherjee", "B. Liu"], "venue": "Proceedings of 50th anunal meeting of association for computational Linguistics (ACL-2012), 2012, no. July, pp. 339\u2013348.", "citeRegEx": "58", "shortCiteRegEx": null, "year": 2012}, {"title": "Opinion extraction, summarization and tracking in news and blog corpora", "author": ["L.W. Ku", "Y.T. Liang", "H.H. Chen"], "venue": "Proceedings of AAAI-2006 Spring Symposium on Computational Approaches to Analyzing Weblogs, 2006, pp. 100\u2013107.", "citeRegEx": "59", "shortCiteRegEx": null, "year": 2006}, {"title": "An unsupervised framework for extracting and normalizing product attributes from multiple web sites", "author": ["T.-L.T.-S. Wong", "W. Lam"], "venue": "Proceedings of the 31st annual international ACM SIGIR conference on Research and development in information retrieval, 2008, pp. 35\u201342.", "citeRegEx": "60", "shortCiteRegEx": null, "year": 2008}, {"title": "Opinion word expansion and target extraction through double propagation", "author": ["G. Qiu", "B. Liu", "J. Bu", "C. Chen"], "venue": "Comput. Linguist., vol. 37, no. 1, pp. 9\u201327, 2011.", "citeRegEx": "61", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Garvin [1] identified five views/approaches of quality.", "startOffset": 7, "endOffset": 10}, {"referenceID": 1, "context": "It has been implemented in mobile-based applications[2]\u2013[4] and Web applications[5]\u2013[7].", "startOffset": 52, "endOffset": 55}, {"referenceID": 3, "context": "It has been implemented in mobile-based applications[2]\u2013[4] and Web applications[5]\u2013[7].", "startOffset": 56, "endOffset": 59}, {"referenceID": 4, "context": "It has been implemented in mobile-based applications[2]\u2013[4] and Web applications[5]\u2013[7].", "startOffset": 80, "endOffset": 83}, {"referenceID": 6, "context": "It has been implemented in mobile-based applications[2]\u2013[4] and Web applications[5]\u2013[7].", "startOffset": 84, "endOffset": 87}, {"referenceID": 9, "context": "To our knowledge, little work target to resolve QinU problem [10].", "startOffset": 61, "endOffset": 65}, {"referenceID": 10, "context": "Sentiment analysis or opinion mining targets to analyze textual user judgments about products or services[11], [12]", "startOffset": 105, "endOffset": 109}, {"referenceID": 11, "context": "Sentiment analysis or opinion mining targets to analyze textual user judgments about products or services[11], [12]", "startOffset": 111, "endOffset": 115}, {"referenceID": 12, "context": "For example, the ISO 9000 family has been criticized in literature not to be used for software [13].", "startOffset": 95, "endOffset": 99}, {"referenceID": 13, "context": "The ANSI/IEEE 730-2002[14] support quality assurance plans.", "startOffset": 22, "endOffset": 26}, {"referenceID": 14, "context": "Famous hierarchical models are McCall\u2019s Quality Model [16], Boehm\u2019s Quality Model [17], Dromey\u2019s Quality Model [18], and The Software Quality In Development (SQUID) approach [19].", "startOffset": 54, "endOffset": 58}, {"referenceID": 15, "context": "Famous hierarchical models are McCall\u2019s Quality Model [16], Boehm\u2019s Quality Model [17], Dromey\u2019s Quality Model [18], and The Software Quality In Development (SQUID) approach [19].", "startOffset": 111, "endOffset": 115}, {"referenceID": 16, "context": "Famous hierarchical models are McCall\u2019s Quality Model [16], Boehm\u2019s Quality Model [17], Dromey\u2019s Quality Model [18], and The Software Quality In Development (SQUID) approach [19].", "startOffset": 174, "endOffset": 178}, {"referenceID": 17, "context": "This category includes predictive quality models[20]\u2013[23], quality metrics models[24]\u2013[27] and software reliability models.", "startOffset": 48, "endOffset": 52}, {"referenceID": 20, "context": "This category includes predictive quality models[20]\u2013[23], quality metrics models[24]\u2013[27] and software reliability models.", "startOffset": 53, "endOffset": 57}, {"referenceID": 21, "context": "This category includes predictive quality models[20]\u2013[23], quality metrics models[24]\u2013[27] and software reliability models.", "startOffset": 81, "endOffset": 85}, {"referenceID": 24, "context": "This category includes predictive quality models[20]\u2013[23], quality metrics models[24]\u2013[27] and software reliability models.", "startOffset": 86, "endOffset": 90}, {"referenceID": 17, "context": "Predictive quality models[20]\u2013[23]use the product attributes or its properties and product users to predict the quality of the software.", "startOffset": 25, "endOffset": 29}, {"referenceID": 20, "context": "Predictive quality models[20]\u2013[23]use the product attributes or its properties and product users to predict the quality of the software.", "startOffset": 30, "endOffset": 34}, {"referenceID": 17, "context": "Exploiting ideas in COCOMO[20]the Constructive Quality Model [21], [22] (COQUAMO) helps project managers to manage, assess and predict product during the development lifecycle.", "startOffset": 26, "endOffset": 30}, {"referenceID": 18, "context": "Exploiting ideas in COCOMO[20]the Constructive Quality Model [21], [22] (COQUAMO) helps project managers to manage, assess and predict product during the development lifecycle.", "startOffset": 61, "endOffset": 65}, {"referenceID": 19, "context": "Exploiting ideas in COCOMO[20]the Constructive Quality Model [21], [22] (COQUAMO) helps project managers to manage, assess and predict product during the development lifecycle.", "startOffset": 67, "endOffset": 71}, {"referenceID": 25, "context": "Many researchers have shown that these metrics are not certain indicators of faults[28], line code dependent [28] or programming dependent[29][30].", "startOffset": 83, "endOffset": 87}, {"referenceID": 25, "context": "Many researchers have shown that these metrics are not certain indicators of faults[28], line code dependent [28] or programming dependent[29][30].", "startOffset": 109, "endOffset": 113}, {"referenceID": 26, "context": "Many researchers have shown that these metrics are not certain indicators of faults[28], line code dependent [28] or programming dependent[29][30].", "startOffset": 138, "endOffset": 142}, {"referenceID": 27, "context": "Many researchers have shown that these metrics are not certain indicators of faults[28], line code dependent [28] or programming dependent[29][30].", "startOffset": 142, "endOffset": 146}, {"referenceID": 28, "context": "Example of such models are [31], [32].", "startOffset": 27, "endOffset": 31}, {"referenceID": 29, "context": "Example of such models are [31], [32].", "startOffset": 33, "endOffset": 37}, {"referenceID": 30, "context": "Quamoco Product Quality Model[37] was initially designed for German Software and is a multipurpose quality model based on ISO 25010.", "startOffset": 29, "endOffset": 33}, {"referenceID": 31, "context": "In a comprehensive study of software quality models,[39] identified critiques to many software quality models; they are unclear of their purposes, not satisfying users of how to use the quality models, and there is no uniform terminology between different models.", "startOffset": 52, "endOffset": 56}, {"referenceID": 32, "context": "[40]stated that user experience is implied in ISO 25010 but is not defined.", "startOffset": 0, "endOffset": 4}, {"referenceID": 33, "context": "[41] suggest adding data quality inside the ISO 25010 instead of being separate.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "1 Limitation of Quality-in-use Models Although there are many software quality models such as McCall, Boehm, Dromey and FURUPS [16], [18] ,", "startOffset": 127, "endOffset": 131}, {"referenceID": 15, "context": "1 Limitation of Quality-in-use Models Although there are many software quality models such as McCall, Boehm, Dromey and FURUPS [16], [18] ,", "startOffset": 133, "endOffset": 137}, {"referenceID": 34, "context": "most of them target the software product or process characteristics and does not suit software quality-in-use or require manual user involvement [42], [43].", "startOffset": 145, "endOffset": 149}, {"referenceID": 35, "context": "most of them target the software product or process characteristics and does not suit software quality-in-use or require manual user involvement [42], [43].", "startOffset": 151, "endOffset": 155}, {"referenceID": 23, "context": "The McCabe(1976) and Halstead(1977), are used since 1970\u2019s while Chidamber& Kemerer metrics[26] triggers its use in 1994.", "startOffset": 91, "endOffset": 95}, {"referenceID": 23, "context": "These metrics depend on programming style objectoriented[26] versus procedure programming approaches[24], [25].", "startOffset": 56, "endOffset": 60}, {"referenceID": 21, "context": "These metrics depend on programming style objectoriented[26] versus procedure programming approaches[24], [25].", "startOffset": 100, "endOffset": 104}, {"referenceID": 22, "context": "These metrics depend on programming style objectoriented[26] versus procedure programming approaches[24], [25].", "startOffset": 106, "endOffset": 110}, {"referenceID": 10, "context": "Opinion mining or sentiment analysis is an emerging research direction based on Natural Language Processing that targets to analyze textual user judgments about products or service[11], [12].", "startOffset": 180, "endOffset": 184}, {"referenceID": 11, "context": "Opinion mining or sentiment analysis is an emerging research direction based on Natural Language Processing that targets to analyze textual user judgments about products or service[11], [12].", "startOffset": 186, "endOffset": 190}, {"referenceID": 36, "context": "Therefore, opinion mining provided an alternative to identify important reviews and opinions to answer users\u2019 queries[44], [45].", "startOffset": 117, "endOffset": 121}, {"referenceID": 37, "context": "Therefore, opinion mining provided an alternative to identify important reviews and opinions to answer users\u2019 queries[44], [45].", "startOffset": 123, "endOffset": 127}, {"referenceID": 38, "context": "Despite the difficulties of sentiment analysis approach[46], [47][48], it can be used to overcome issues discussed in Section 3.", "startOffset": 55, "endOffset": 59}, {"referenceID": 39, "context": "Despite the difficulties of sentiment analysis approach[46], [47][48], it can be used to overcome issues discussed in Section 3.", "startOffset": 61, "endOffset": 65}, {"referenceID": 40, "context": "Despite the difficulties of sentiment analysis approach[46], [47][48], it can be used to overcome issues discussed in Section 3.", "startOffset": 65, "endOffset": 69}, {"referenceID": 41, "context": "Li and google tri-grams [49] as sentence measures, Multinomial Naive Bayes text classification (NB) [50]\u2013[52] and SVM[53] for text classification, LSA [54] for semantic space classification.", "startOffset": 24, "endOffset": 28}, {"referenceID": 42, "context": "Li and google tri-grams [49] as sentence measures, Multinomial Naive Bayes text classification (NB) [50]\u2013[52] and SVM[53] for text classification, LSA [54] for semantic space classification.", "startOffset": 100, "endOffset": 104}, {"referenceID": 44, "context": "Li and google tri-grams [49] as sentence measures, Multinomial Naive Bayes text classification (NB) [50]\u2013[52] and SVM[53] for text classification, LSA [54] for semantic space classification.", "startOffset": 105, "endOffset": 109}, {"referenceID": 45, "context": "Li and google tri-grams [49] as sentence measures, Multinomial Naive Bayes text classification (NB) [50]\u2013[52] and SVM[53] for text classification, LSA [54] for semantic space classification.", "startOffset": 117, "endOffset": 121}, {"referenceID": 46, "context": "Li and google tri-grams [49] as sentence measures, Multinomial Naive Bayes text classification (NB) [50]\u2013[52] and SVM[53] for text classification, LSA [54] for semantic space classification.", "startOffset": 151, "endOffset": 155}, {"referenceID": 47, "context": "Then 3 algorithms were run; the Multinomial Naive Bayes (NB) Measure algorithm[55], The Multiclass SVM[56], and the Latent semantic analysis[57].", "startOffset": 78, "endOffset": 82}, {"referenceID": 48, "context": "Then 3 algorithms were run; the Multinomial Naive Bayes (NB) Measure algorithm[55], The Multiclass SVM[56], and the Latent semantic analysis[57].", "startOffset": 102, "endOffset": 106}, {"referenceID": 49, "context": "Then 3 algorithms were run; the Multinomial Naive Bayes (NB) Measure algorithm[55], The Multiclass SVM[56], and the Latent semantic analysis[57].", "startOffset": 140, "endOffset": 144}, {"referenceID": 40, "context": "Feature or topic extraction has been discussed in literature in many works such as [48], [58]\u2013[61].", "startOffset": 83, "endOffset": 87}, {"referenceID": 50, "context": "Feature or topic extraction has been discussed in literature in many works such as [48], [58]\u2013[61].", "startOffset": 89, "endOffset": 93}, {"referenceID": 53, "context": "Feature or topic extraction has been discussed in literature in many works such as [48], [58]\u2013[61].", "startOffset": 94, "endOffset": 98}, {"referenceID": 37, "context": "[45], [61]", "startOffset": 0, "endOffset": 4}, {"referenceID": 53, "context": "[45], [61]", "startOffset": 6, "endOffset": 10}, {"referenceID": 9, "context": "Leopairote, Surarerks, and Prompoon[10] proposed a model that can extract and summarize software reviews in order to predict software \u201cquality-in-use\u201d.", "startOffset": 35, "endOffset": 39}, {"referenceID": 9, "context": "We consider the work of [10] the most nearby to this paper.", "startOffset": 24, "endOffset": 28}], "year": 2015, "abstractText": "Software quality-in-use comprehends the quality from user\u2019s perspectives. It has gained its importance in e-learning applications, mobile service based applications and project management tools. User\u2019s decisions on software acquisitions are often ad hoc or based on preference due to difficulty in quantitatively measure software quality-in-use. However, why qualityin-use measurement is difficult? Although there are many software quality models to our knowledge, no works surveys the challenges related to software quality-in-use measurement. This paper has two main contributions; 1) presents major issues and challenges in measuring software quality-in-use in the context of the ISO SQuaRE series and related software quality models, 2) Presents a novel framework that can be used to predict software quality-in-use, and 3) presents preliminary results of quality-in-use topic prediction. Concisely, the issues are related to the complexity of the current standard models and the limitations and incompleteness of the customized software quality models. The proposed framework employs sentiment analysis techniques to predict software quality-in-use.", "creator": "Microsoft\u00ae Word 2013"}}}