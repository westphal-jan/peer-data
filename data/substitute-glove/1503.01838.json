{"id": "1503.01838", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Mar-2015", "title": "Encoding Source Language with Convolutional Neural Network for Machine Translation", "abstract": "The early approved conduction users meetings example (NNJM) (Devlin et al. , 2014) rejecting the ~ - k which nahuatl vision and 's heuristically chosen source knowledge kitchen, achieving state - of - the - book performance days SMT. In now paper, think wish this more manipulation illnesses recent 14-page both analyze particular concerning line rather convolutional heritage submarine first the measures suggested. With separate approach switch years decoding, our exist allows convolution + gating architectures can pinpoint soon as of a associated sentence that only evaluate both projections taken target \u201d, made implanted them while is example of entire lack sentence to uses he representation basic. This representation, . have target forms words, are fed to similar pressure electrodes programming (DNN) which generally. unlikely NNJM. Experiments on 16 NIST Chinese - English meaning tasks. making the initiative models whenever achieve significant improvements over saw previous NNJM according out not + 12. dj025u BLEU 13 instead average", "histories": [["v1", "Fri, 6 Mar 2015 03:04:54 GMT  (343kb,D)", "http://arxiv.org/abs/1503.01838v1", "10 pages plus 2 pages of references"], ["v2", "Mon, 9 Mar 2015 08:28:32 GMT  (343kb,D)", "http://arxiv.org/abs/1503.01838v2", "10 pages plus 2 pages of references"], ["v3", "Tue, 10 Mar 2015 01:34:58 GMT  (343kb,D)", "http://arxiv.org/abs/1503.01838v3", "10 pages plus 2 pages of references"], ["v4", "Fri, 24 Apr 2015 10:07:40 GMT  (343kb,D)", "http://arxiv.org/abs/1503.01838v4", "10 pages plus 2 pages of references, accepted as a full paper at ACL 2015"], ["v5", "Mon, 8 Jun 2015 09:04:14 GMT  (343kb,D)", "http://arxiv.org/abs/1503.01838v5", "Accepted as a full paper at ACL 2015"]], "COMMENTS": "10 pages plus 2 pages of references", "reviews": [], "SUBJECTS": "cs.CL cs.LG cs.NE", "authors": ["fandong meng", "zhengdong lu", "mingxuan wang", "hang li", "wenbin jiang", "qun liu"], "accepted": true, "id": "1503.01838"}, "pdf": {"name": "1503.01838.pdf", "metadata": {"source": "CRF", "title": "Encoding Source Language with Convolutional Neural Network for Machine Translation", "authors": ["Fandong Meng", "Zhengdong Lu", "Mingxuan Wang", "Hang Li", "Wenbin Jiang", "Qun Liu"], "emails": ["mengfandong@ict.ac.cn", "wangmingxuan@ict.ac.cn", "jiangwenbin@ict.ac.cn", "liuqun@ict.ac.cn", "Lu.Zhengdong@huawei.com", "HangLi.HL@huawei.com"], "sections": [{"heading": "1 Introduction", "text": "Learning of continuous space representation for source language has attracted much attention in both traditional statistical machine translation (SMT) and neural machine translation (NMT). Various models, mostly neural network-based, have been proposed for representing the source sentence, mainly as the encoder part in an encoder-decoder framework (Bengio et al., 2003; Auli et al., 2013; Kalchbrenner and Blunsom, 2013; Cho et al., 2014; Sutskever et al., 2014). There has been some quite recent work on encoding only \u201crelevant\u201d part of source sentence during the decoding process, most notably neural network joint model (NNJM) in (Devlin et al., 2014), which extends the n-grams target language model by additionally taking a fixed-length window of source sentence, achieving state-ofthe-art performance in statistical machine translation.\nIn this paper, we propose novel convolutional architectures to dynamically encode the relevant information in the source language. Our model covers the entire source sentence, but can effectively find and properly summarize the relevant parts, guided by the information from the target language. With the guiding signals during decoding, our specifically designed convolution architectures can pinpoint the parts of a source sentence that are relevant to predicting a target word, and fuse them with the context of entire source sentence to form a unified representation. This representation, together with target words, are fed to a deep neural network (DNN) to form a stronger NNJM. Since our proposed joint model is purely lexicalized, it can be integrated into any SMT decoder as a feature.\nTwo variants of the joint model are also proposed, with coined name tagCNN and inCNN, with different guiding signals used from the decoding process. We integrate the proposed joint models into a state-of-the-art dependency-to-string translation system (Xie et al., 2011) to evaluate their effectiveness. Experiments on NIST Chinese-English translation tasks show that our model is able to\nar X\niv :1\n50 3.\n01 83\n8v 1\n[ cs\n.C L\n] 6\nM ar\n2 01\n5\nachieve significant improvements of +1.93 BLEU points on average over the baseline. Our model also outperforms Devlin et al. (2014)\u2019s NNJM by up to +1.01 BLEU points.\nRoadMap: In the remainder of this paper, we start with a brief overview of joint language model in Section 2, while the convolutional encoders, as the key component of which, will be described in detail in Section 3. Then in Section 4 we discuss the decoding algorithm with the proposed models. The experiment results are reported in Section 5, followed by Section 6 and 7 for related work and conclusion."}, {"heading": "2 Joint Language Model", "text": "Our joint model with CNN encoders can be illustrated in Figure 1 (a) & (b), which consists 1) a CNN encoder, namely tagCNN or inCNN, to represent the information in the source sentences, and 2) an NN-based model for predicting the next words, with representations from CNN encoders and the history words in target sentence as inputs.\nIn the joint language model, the probability of the target word en, given previous k target words {en\u2212k, \u00b7 \u00b7 \u00b7, en\u22121} and the representations from CNN-encoders for source sentence S are\ntagCNN: p(en|\u03c61(S, index of tagged word)) inCNN: p(en|\u03c62(S, h({e}n\u22121n\u2212k), {e} n\u22121 n\u2212k),\nwhere \u03c61(S, index of tagged word) stands for the representation given by tagCNN with the set of indexes of source words aligned to the target word en, and \u03c62(S, h({e}n\u22121n\u2212k)) stands for the representation from inCNN with the attention signal h({e}n\u22121n\u2212k).\nLet us use the example in Figure 1, where the task is to translate the Chinese sentence\ninto English. In evaluating a target language sequence \u201cholds parliament and presidential\u201d, with \u201cholds parliament and\u201d as the proceeding words (assume 4-gram LM), and the affiliated source word1 of \u201cpresidential\u201d being \u201cZo\u030cngto\u030cng\u201d (determined by word alignment), tagCNN generates \u03c61(S, {4}) (the index of \u201cZo\u030cngto\u030cng\u201d is 4), and inCNN generates \u03c62(S, h(holds parliament and)). The DNN component then takes \"holds parliament and\" and (\u03c61 or \u03c62) as input to give the conditional probability for next word, e.g., p(\"presidential\"|\u03c61|2)."}, {"heading": "3 Convolutional Models", "text": "We start with the generic architecture for convolutional encoder, and then proceed to tagCNN and inCNN as two extensions."}, {"heading": "3.1 Generic CNN Encoder", "text": "The basic architecture is of a generic CNN encoder is illustrated in Figure 2 (a), which has a fixed architecture consisting of six layers:\nLayer-0: the input layer, which takes words in the form of embedding vectors. In our work, we set the maximum length of sentences to 40 words. For sentences shorter than that, we put zero padding at the beginning of sentences.\nLayer-1: a convolution layer after Layer-0, with window size = 3. As will be discussed in Section 3.2 and 3.3, the guiding signal are injected into this layer for \u201cguided version\u201d.\nLayer-2: a local gating layer after Layer-1, which simply takes a weighted sum over feature-maps in non-adjacent window with size = 2.\nLayer-3: a convolution layer after Layer-2, we perform another convolution with window size = 3.\nLayer-4: we perform a global gating over feature-maps on Layer-3.\nLayer-5: fully connected weights that maps the output of Layer-4 to the this layer as the final representation."}, {"heading": "3.1.1 Convolution", "text": "As shown in Figure 2 (a), the convolution in Layer-1 operates on sliding windows of words (width k1), and the similar definition of windows carries over to higher layers. Formally, for source sentence input x={x1, \u00b7 \u00b7 \u00b7 ,xN}, the convolution unit for feature map of type-f (among F` of them) on Layer-` is\nz (`,f) i (x) = \u03c3(w (`,f)z\u0302 (`\u22121) i + b (`,f)), ` = 1, 3, f = 1, 2, \u00b7 \u00b7 \u00b7 , F` (1)\nwhere\n\u2022 z(`,f)i (x) gives the output of feature map of type-f for location i in Layer-`;\n\u2022 w(`,f) is the parameters for f on Layer-`;\n\u2022 \u03c3(\u00b7) is the Sigmoid activation function; 1For an aligned target word, we take its aligned source words as its affiliated source words. And for an unaligned word, we inherit its affiliation from the closest aligned word, with preference given to the right (Devlin et al., 2014). Since the word alignment is of many-to-many, one target word may has multi affiliated source words.\n\u2022 z\u0302(`\u22121)i denotes the segment of Layer-`\u22121 for the convolution at location i , while\nz\u0302 (0) i def = [x>i , x > i+1, x > i+2] >\nconcatenates the vectors for 3 words from sentence input x."}, {"heading": "3.1.2 Gating", "text": "Previous CNNs, including those for NLP tasks (Hu et al., 2014; Kalchbrenner et al., 2014), take a straightforward convolution-pooling strategy, in which the \u201cfusion\u201d decisions (e.g., selecting the largest one in max-pooling) are based on the values of feature-maps. This is essentially a soft template matching, which works for tasks like classification, but harmful for keeping the composition functionality of convolution, which is critical for modeling sentences. In this paper, we propose to use separate gating unit to release the score function duty from the convolution, and let it focus on composition.\nWe take two types of gating: 1) for Layer-2, we take a local gating with non-overlapping windows (size = 2) on the feature-maps of convolutional Layer-1 for representation of segments, and 2) for Layer-4, we take a global gating to fuse all the segments for a global representation. We found that this gating strategy can considerably improve the performance of both tagCNN and inCNN over pooling.\n\u2022 Local Gating: On Layer-1, for every gating window, we first find its original input (before convolution) on Layer-0, and merge them for the input of the gating network. For example, for the two windows: word (3,4,5) and word (4,5,6) on Layer-0, we use concatenated vector consisting of embedding for word (3,4,5,6) as the input of the local gating network (a logistic regression model) to determine the weight for the convolution result of the two windows (on Layer-1), and the weighted sum are the output of Layer-2.\n\u2022 Global Gating: On Layer-3, for feature-maps at each location i, denoted z(3)i , the global gating network (essentially soft-max,parameterized wg), assigns a normalized weight\n\u03c9(z (3) i ) = e w>g z (3) i / \u2211 j ew > g z (3) j ,\nand the gated representation on Layer-4 is given by the weighted sum \u2211\ni \u03c9(z (3) i )z (3) i ."}, {"heading": "3.1.3 Training of CNN encoders", "text": "The CNN encoders, including tagCNN and inCNN that will be discussed right below, are trained in a joint language model described in Section 2, along with the following parameters\n\u2022 the embedding of the words on source and the proceeding words on target;\n\u2022 the parameters for the DNN of joint language model, include the parameters of soft-max for word probability.\nThe training procedure is identical to that of neural network language model, except that the parallel corpus is used instead of a monolingual corpus. We seek to maximize the log-likelihood of training samples, with one sample for every target word in the parallel corpus. Optimization is performed with the conventional back-propagation, implemented as stochastic gradient descent (LeCun et al., 1998) with mini-batches.\n3.2 tagCNN\ntagCNN inherits the convolution and gating from generic CNN (as described in Section 3.1), with the only modification in the input layer. As shown in Figure 2 (b), in tagCNN, we append an extra tagging bit (0 or 1) to the embedding of words in the input layer to indicate whether it is one of affiliated words\nx (AFF) i = [x > i 1] >, x (NON-AFF) j = [x > j 0] >.\nThose extended word embedding will then be treated as regular word-embedding in the convolutional neural network. This particular encoding strategy can be extended to embed more complicated dependency relation in source language, as will be described in Section 5.4.\nThis particular \u201ctag\u201d will be activated in a parameterized way during the training for predicting the target words. In other words, the supervised signal from the words to predict will find, through layers of back-propagation, the importance of the tag bit in the \u201caffiliated words\u201d in the source language, and learn to put proper weight on it to make tagged words stand out and adjust other parameters in tagCNN accordingly for the optimal predictive performance. In doing so, the joint model can pinpoint the parts of a source sentence that are relevant to predicting a target word through the already learned word alignment.\n3.3 inCNN\nUnlike tagCNN, which directly tells the location of affiliated words to the CNN encoder, inCNN sends the information about the proceeding words in target side to the convolutional encoder to help retrieve the information relevant for predicting the next word. This is essentially a particular case of attention model, analogous to the automatic alignment mechanism in (Bahdanau et al., 2014), where the attention signal is from the state of a generative recurrent neural network (RNN) as decoder.\nBasically, the information from proceeding words, denoted as h({e}n\u22121n\u2212k), is injected into every convolution window in the source language sentence, as illustrated in Figure 2 (c). More specifically, for the window indexed by t, the input to convolution is given by the concatenated vector\nz\u0302t = [h({e}n\u22121n\u2212k), x > t , x > t+1, x > t+2] >.\nIn this work, we simply use the vectors concatenated from word-embedding for words {en\u2212k \u00b7 \u00b7 \u00b7 , en\u2212k} as h({e}n\u22121n\u2212k), although h(\u00b7) can be non-trivially realized with another neural network. Through layers of convolution and gating, inCNN can 1) retrieve the relevant segments of\nsource sentences, and 2) compose and transform the retrieved segments into representation recognizable by the DNN in predicting the words in target language. Different from that of tagCNN, inCNN uses information from proceeding words, hence provides complementary information in the augmented joint language model of tagCNN. This has been empirically verified when using feature based on tagCNN and that based on inCNN in decoding with greater improvement."}, {"heading": "4 Decoding with the Joint Model", "text": "Our joint model is purely lexicalized, and therefore can be integrated into any SMT decoders as a feature. For a hierarchical SMT decoder, we adopt the integrating method proposed by Devlin et al. (2014). As inherited from the n-gram language model for performing hierarchical decoding, the leftmost and rightmost n\u2212 1 words from each constituent should be stored in the state space. We extend the state space to also include the indexes of the affiliated source words for each of these edge words. For an aligned target word, we take its aligned source words as its affiliated source words. And for an unaligned word, we use the affiliation heuristic adopted by Devlin et al. (2014). In this paper, we integrate the joint model into the state-of-the-art dependency-to-string machine translation decoder as a case study to test the efficacy of our proposed approaches. We will briefly describe the dependency-to-string translation model and then the description of MT system."}, {"heading": "4.1 Dependency-to-String Translation", "text": "In this paper, we use a state-of-the-art dependency-to-string (Xie et al., 2011) decoder (Dep2Str), which is also a hierarchical decoder. This dependency-to-string model employs rules that represent the source side as head-dependents relations and the target side as strings. A head-dependents relation (HDR) is composed of a head and all its dependents in dependency trees. Figure 3 shows a dependency tree (a) with three HDRs (in shadow), an example of HDR rule (b) for the top level of (a), and an example of head rule (c). HDR rules are constructed from head-dependents relations. HDR rules can act as both translation rules and reordering rules. And head rules are used for translating source words.\nWe adopt the decoder proposed by Meng et al. (2013) as a variant of Dep2Str translation that\nis easier to implement with comparable performance. Basically they extract the HDR rules with GHKM (Galley et al., 2004) algorithm. For the decoding procedure, given a source dependency tree T , the decoder transverses T in post-order. The bottom-up chart-based decoding algorithm with cube pruning (Chiang, 2007; Huang and Chiang, 2007) is used to find the k-best items for each node."}, {"heading": "4.2 MT Decoder", "text": "Following Och and Ney (2002), we use a general loglinear framework. Let d be a derivation that convert a source dependency tree into a target string e. The probability of d is defined as:\nP (d) \u221d \u220f i \u03c6i(d) \u03bbi (2)\nwhere \u03c6i are features defined on derivations and \u03bbi are the corresponding weights. Our decoder contains the following features: Baseline Features:\n\u2022 translation probabilities P (t|s) and P (s|t) of HDR rules;\n\u2022 lexical translation probabilities PLEX(t|s) and PLEX(s|t) of HDR rules;\n\u2022 rule penalty exp(\u22121);\n\u2022 pseudo translation rule penalty exp(\u22121);\n\u2022 target word penalty exp(|e|);\n\u2022 n-gram language model PLM(e);\nProposed Features:\n\u2022 n-gram tagCNN joint language model PTLM(e);\n\u2022 n-gram inCNN joint language model PILM(e).\nOur baseline decoder contains the first eight features. The pseudo translation rule (constructed according to the word order of a HDR) is to ensure the complete translation when no matched rules is found during decoding. The weights of all these features are tuned via minimum error rate training (MERT) (Och, 2003). For the dependency-to-string decoder, we set rule-threshold and stack-threshold to 10\u22123, rule-limit to 100, stack-limit to 200."}, {"heading": "5 Experiments", "text": "The experiments in this Section are designed to answer the following questions:\n1. Are our tagCNN and inCNN joint language models able to improve translation quality, and are they complementary to each other?\n2. Do inCNN and tagCNN benefit from their guiding signal, compared to a generic CNN?\n3. For tagCNN, is it helpful to embed more dependency structure, e.g., dependency head of each affiliated word, as additional information?"}, {"heading": "5.1 Setup", "text": "Data: Our training data are extracted from LDC data2. We only keep the sentence pairs that the length of source part no longer than 40 words, which covers over 90% of the sentence. The bilingual training data consist of 221K sentence pairs, containing 5.0 million Chinese words and 6.8 million English words. The development set is NIST MT03 (795 sentences) and test sets are MT04 (1499 sentences) and MT05 (917 sentences) after filtering with length limit. Preprocessing: The word alignments are obtained with GIZA++ (Och and Ney, 2003) on the corpora in both directions, using the \u201cgrow-diag-final-and\u201d balance strategy (Koehn et al., 2003). We adopt SRI Language Modeling Toolkit (Stolcke and others, 2002) to train a 4-gram language model with modified Kneser-Ney smoothing on the Xinhua portion of the English Gigaword corpus (306 million words). We parse the Chinese sentences with Stanford Parser into projective dependency trees. Optimization of NN: In training the neural network, we limit the source and target vocabulary to the most frequent 20K words for both Chinese and English, covering approximately 97% and 99% of two corpus respectively. All the out-of-vocabulary words are mapped to a special token UNK. We used stochastic gradient descent to train the joint model, setting the size of minibatch to 500. All joint models used a 3-word target history (i.e., 4-gram LM). The dimension of word embedding is 100. Metric: We use the case-insensitive 4-gram NIST BLEU3 as our evaluation metric, with statistical significance test with sign-test (Collins et al., 2005) between the proposed models and two baselines."}, {"heading": "5.2 Setting for Model Comparisons", "text": "We use the tagCNN and inCNN joint language models as additional decoding features to a dependency-to-string baseline system (Dep2Str), and compare them to the neural network joint model with 11 source context words (Devlin et al., 2014). We use the implementation of an open source toolkit4 with default configuration except the global settings described in Section 5.1. Since our tagCNN and inCNN models are source-to-target and left-to-right (on target side), we only take the source-to-target and left-to-right type NNJM in (Devlin et al., 2014) in comparison. We call this type NNJM as BBN-JM hereafter. Although the BBN-JM in (Devlin et al., 2014) is originally tested in the hierarchical phrase-based (Chiang, 2007) SMT and string-to-dependency (Shen et al., 2008) SMT, it is fairly versatile and can be readily integrated into Dep2Str."}, {"heading": "5.3 The Main Results", "text": "The main results of different models are given in Table 1. Before proceeding to more detailed comparison, we first observe that\n\u2022 the baseline Dep2Str system gives BLEU 0.5+ higher than the open-source phrase-based system Moses (Koehn et al., 2007);\n\u2022 BBN-JM can give about +0.92 BLEU score over Dep2Str, a result similar as reported in (Devlin et al., 2014).\nClearly from Table 1, tagCNN and inCNN improve upon the Dep2Str baseline by +1.28 and +1.63 BLEU, outperforming BBN-JM in the same setting by respectively +0.36 and +0.71 BLEU, averaged on NIST MT04 and MT05. These indicate that tagCNN and inCNN can individually provide discriminative information in decoding. It is worth noting that inCNN appears to be more informative\n2The corpora include LDC2002E18, LDC2003E07, LDC2003E14, LDC2004T07, LDC2005T06. 3ftp://jaguar.ncsl.nist.gov/mt/resources/mteval-v11b.pl 4http://nlg.isi.edu/software/nplm/\nthan the affiliated words suggested by the word alignment (GIZA++). We conjecture that this is due to the following two facts\n\u2022 inCNN avoids the propagation of mistakes and artifacts in the already learned word alignment;\n\u2022 the guiding signal in inCNN provides complementary information to evaluate the translation.\nMoreover, when tagCNN and inCNN are both used in decoding, it can further increase its winning margin over BBN-JM to +1.01 BLEU points (in the last row of Table 1), indicating that the two models with different guiding signals are complementary to each other.\nThe Role of Guiding Signal It is slight surprising that the generic CNN can also achieve the gain on BLEU similar to that of BBN-JM, since intuitively generic CNN encodes the entire sentence and the representations should in general far from optimal representation for joint language model. The reason, as we conjecture, is CNN yields fairly informative summarization of the sentence (thanks to its sophisticated convolution and gating architecture), which makes up some of its loss on resolution and relevant parts of the source senescence. That said, the guiding signal in both tagCNN and inCNN are crucial to the power of CNN-based encoder, as can be easily seen from the difference between the BLEU scores achieved by generic CNN, tagCNN, and inCNN. Indeed, with the signal from the already learned word alignment, tagCNN can gain +0.31 BLEU over its generic counterpart, while for inCNN with the guiding signal from the proceeding words in target, the gain is more saliently +0.66 BLEU.\n5.4 Dependency Head in tagCNN\nIn this section, we study whether tagCNN can further benefit from encoding richer dependency structure in source language in the input. More specifically, we dependency head words can be used to further improve tagCNN model. As described in Section 3.2, in tagCNN, we append a tagging bit (0 or 1) to the embedding of words in the input layer as tags on whether they are affiliated source words. To incorporate dependency head information, we extend the tagging rule in Section 3.2 to add another tagging bit (0 or 1) to the word-embedding for original tagCNN to indicate whether it is part of dependency heads of the affiliated words. For example, if xi is the embedding of an affiliated\nsource word and xj the dependency head of word xi, the extended input of tagCNN would contain\nx (AFF, NON-HEAD) i = [x > i 1 0] > x (NON-AFF, HEAD) j = [x > j 0 1] >\nIf the affiliated source word is the root of a sentence, we only append 0 as the second tagging bit since the root has no dependency head. From Table 2, with the help of dependency head information, we can improve tagCNN by +0.23 BLEU points averagely on two test sets."}, {"heading": "6 Related Work", "text": "The seminal work of neural network language model (NNLM) can be traced to Bengio et al. (2003) on monolingual text. It is recently extended by Devlin et al. (2014) to include additional source context (11 source words) in modeling the target sentence, which is clearly most related to our work, with however two important differences: 1) instead of the ad hoc way of selecting a context window in (Devlin et al., 2014), our model covers the entire source sentence and automatically distill the context relevant for target modeling; 2) our convolutional architecture can effectively leverage guiding signals of vastly different forms and nature from the target.\nPrior to our model there is also work on representing source sentences with neural networks, including RNN (Cho et al., 2014; Sutskever et al., 2014) and CNN (Kalchbrenner and Blunsom, 2013). These work typically aim to map the entire sentence to a vector, which will be used later by RNN/LSTM-based decoder to generate the target sentence. As demonstrated in Section 5, the representation learnt this way cannot pinpoint the relevant parts of the source sentences (e.g., words or phrases level) and therefore is inferior to be directly integrated into traditional SMT decoders.\nOur model, especially inCNN, is inspired by is the automatic alignment model proposed in (Bahdanau et al., 2014). As the first effort to apply attention model to machine translation, it sends the state of a decoding RNN as attentional signal to the source end to obtain a weighted sum of embedding of source words as the summary of relevant context. In contrast, inCNN uses 1) a different attention signal extracted from proceeding words in partial translations, and 2) more importantly, a convolutional architecture and therefore a highly nonlinear way to retrieve and summarize the relevant information in source."}, {"heading": "7 Conclusion and Future Work", "text": "We proposed convolutional architectures for obtaining a guided representation of the entire source sentence, which can be used to augment the n-gram target language model. With different guiding signals from target side, we devise tagCNN and inCNN, both of which are tested in enhancing a dependency-to-string SMT with +1.93 BLEU points over baseline and +1.01 BLEU points over the state-of-the-art in (Devlin et al., 2014). For future work, we will consider encoding more complex linguistic structures to further enhance the joint model."}], "references": [{"title": "Joint language and translation modeling with recurrent neural networks", "author": ["Auli et al.2013] Michael Auli", "Michel Galley", "Chris Quirk", "Geoffrey Zweig"], "venue": "In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Auli et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Auli et al\\.", "year": 2013}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1409.0473", "citeRegEx": "Bahdanau et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2014}, {"title": "A neural probabilistic language model", "author": ["Bengio et al.2003] Yoshua Bengio", "Rjean Ducharme", "Pascal Vincent", "Christian Jauvin"], "venue": "Journal OF Machine Learning Research,", "citeRegEx": "Bengio et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2003}, {"title": "Hierarchical phrase-based translation", "author": ["David Chiang"], "venue": "Computational Linguistics,", "citeRegEx": "Chiang.,? \\Q2007\\E", "shortCiteRegEx": "Chiang.", "year": 2007}, {"title": "Learning phrase representations using rnn encoder\u2013decoder for statistical machine translation", "author": ["Cho et al.2014] Kyunghyun Cho", "Bart van Merrienboer", "Caglar Gulcehre", "Dzmitry Bahdanau", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio"], "venue": "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP),", "citeRegEx": "Cho et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Clause restructuring for statistical machine translation", "author": ["Philipp Koehn", "Ivona Ku\u010derov\u00e1"], "venue": "In Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "Collins et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Collins et al\\.", "year": 2005}, {"title": "Fast and robust neural network joint models for statistical machine translation", "author": ["Devlin et al.2014] Jacob Devlin", "Rabih Zbib", "Zhongqiang Huang", "Thomas Lamar", "Richard Schwartz", "John Makhoul"], "venue": "In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers),", "citeRegEx": "Devlin et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Devlin et al\\.", "year": 2014}, {"title": "What\u2019s in a translation rule", "author": ["Galley et al.2004] Michel Galley", "Mark Hopkins", "Kevin Knight", "Daniel Marcu"], "venue": "In Proceedings of HLT/NAACL,", "citeRegEx": "Galley et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Galley et al\\.", "year": 2004}, {"title": "Convolutional neural network architectures for matching natural language sentences", "author": ["Hu et al.2014] Baotian Hu", "Zhengdong Lu", "Hang Li", "Qingcai Chen"], "venue": null, "citeRegEx": "Hu et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Hu et al\\.", "year": 2014}, {"title": "Forest rescoring: Faster decoding with integrated language models", "author": ["Huang", "Chiang2007] Liang Huang", "David Chiang"], "venue": "In Annual Meeting-Association For Computational Linguistics,", "citeRegEx": "Huang et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Huang et al\\.", "year": 2007}, {"title": "Recurrent continuous translation models", "author": ["Kalchbrenner", "Blunsom2013] Nal Kalchbrenner", "Phil Blunsom"], "venue": "In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Kalchbrenner et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2013}, {"title": "A convolutional neural network for modelling", "author": ["Edward Grefenstette", "Phil Blunsom"], "venue": null, "citeRegEx": "Kalchbrenner et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2014}, {"title": "Statistical phrase-based translation", "author": ["Koehn et al.2003] Philipp Koehn", "Franz Josef Och", "Daniel Marcu"], "venue": "In Proceedings of the 2003 Conference of the North American Chapter of the Association for Computational Linguistics on Human Language Technology-Volume", "citeRegEx": "Koehn et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Koehn et al\\.", "year": 2003}, {"title": "Moses: Open source toolkit for statistical machine translation", "author": ["Koehn et al.2007] Philipp Koehn", "Hieu Hoang", "Alexandra Birch", "Chris Callison-Burch", "Marcello Federico", "Nicola Bertoldi", "Brooke Cowan", "Wade Shen", "Christine Moran", "Richard Zens", "Chris Dyer", "Ondrej Bojar", "Alexandra Constantin", "Evan Herbst"], "venue": "In Proceedings of the 45th Annual Meeting of the Association for Computational Linguistics Companion Volume Proceedings of the Demo and Poster Sessions,", "citeRegEx": "Koehn et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Koehn et al\\.", "year": 2007}, {"title": "Translation with source constituency and dependency trees", "author": ["Meng et al.2013] Fandong Meng", "Jun Xie", "Linfeng Song", "Yajuan L\u00fc", "Qun Liu"], "venue": "In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Meng et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Meng et al\\.", "year": 2013}, {"title": "Discriminative training and maximum entropy models for statistical machine translation", "author": ["Och", "Ney2002] Franz Josef Och", "Hermann Ney"], "venue": "In Proceedings of the 40th Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "Och et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Och et al\\.", "year": 2002}, {"title": "A systematic comparison of various statistical alignment models", "author": ["Och", "Ney2003] Franz Josef Och", "Hermann Ney"], "venue": "Computational linguistics,", "citeRegEx": "Och et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Och et al\\.", "year": 2003}, {"title": "Minimum error rate training in statistical machine translation", "author": ["Franz Josef Och"], "venue": "In Proceedings of the 41st Annual Meeting on Association for Computational Linguistics-Volume", "citeRegEx": "Och.,? \\Q2003\\E", "shortCiteRegEx": "Och.", "year": 2003}, {"title": "A new string-to-dependency machine translation algorithm with a target dependency language model", "author": ["Shen et al.2008] Libin Shen", "Jinxi Xu", "Ralph Weischedel"], "venue": "In Proceedings of ACL-08: HLT,", "citeRegEx": "Shen et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Shen et al\\.", "year": 2008}, {"title": "Srilm-an extensible language modeling toolkit", "author": ["Andreas Stolcke"], "venue": "In Proceedings of the international conference on spoken language processing,", "citeRegEx": "Stolcke,? \\Q2002\\E", "shortCiteRegEx": "Stolcke", "year": 2002}, {"title": "Sequence to sequence learning with neural networks. CoRR, abs/1409.3215", "author": ["Oriol Vinyals", "Quoc V. Le"], "venue": null, "citeRegEx": "Sutskever et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2014}, {"title": "A novel dependency-to-string model for statistical machine translation", "author": ["Xie et al.2011] Jun Xie", "Haitao Mi", "Qun Liu"], "venue": "In Proceedings of the Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "Xie et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Xie et al\\.", "year": 2011}], "referenceMentions": [{"referenceID": 6, "context": "The recently proposed neural network joint model (NNJM) (Devlin et al., 2014) arguments the n-gram target language model with a heuristically chosen source context window, achieving state-of-the-art performance in SMT.", "startOffset": 56, "endOffset": 77}, {"referenceID": 2, "context": "Various models, mostly neural network-based, have been proposed for representing the source sentence, mainly as the encoder part in an encoder-decoder framework (Bengio et al., 2003; Auli et al., 2013; Kalchbrenner and Blunsom, 2013; Cho et al., 2014; Sutskever et al., 2014).", "startOffset": 161, "endOffset": 275}, {"referenceID": 0, "context": "Various models, mostly neural network-based, have been proposed for representing the source sentence, mainly as the encoder part in an encoder-decoder framework (Bengio et al., 2003; Auli et al., 2013; Kalchbrenner and Blunsom, 2013; Cho et al., 2014; Sutskever et al., 2014).", "startOffset": 161, "endOffset": 275}, {"referenceID": 4, "context": "Various models, mostly neural network-based, have been proposed for representing the source sentence, mainly as the encoder part in an encoder-decoder framework (Bengio et al., 2003; Auli et al., 2013; Kalchbrenner and Blunsom, 2013; Cho et al., 2014; Sutskever et al., 2014).", "startOffset": 161, "endOffset": 275}, {"referenceID": 20, "context": "Various models, mostly neural network-based, have been proposed for representing the source sentence, mainly as the encoder part in an encoder-decoder framework (Bengio et al., 2003; Auli et al., 2013; Kalchbrenner and Blunsom, 2013; Cho et al., 2014; Sutskever et al., 2014).", "startOffset": 161, "endOffset": 275}, {"referenceID": 6, "context": "There has been some quite recent work on encoding only \u201crelevant\u201d part of source sentence during the decoding process, most notably neural network joint model (NNJM) in (Devlin et al., 2014), which extends the n-grams target language model by additionally taking a fixed-length window of source sentence, achieving state-ofthe-art performance in statistical machine translation.", "startOffset": 169, "endOffset": 190}, {"referenceID": 21, "context": "We integrate the proposed joint models into a state-of-the-art dependency-to-string translation system (Xie et al., 2011) to evaluate their effectiveness.", "startOffset": 103, "endOffset": 121}, {"referenceID": 6, "context": "Our model also outperforms Devlin et al. (2014)\u2019s NNJM by up to +1.", "startOffset": 27, "endOffset": 48}, {"referenceID": 6, "context": "And for an unaligned word, we inherit its affiliation from the closest aligned word, with preference given to the right (Devlin et al., 2014).", "startOffset": 120, "endOffset": 141}, {"referenceID": 8, "context": "2 Gating Previous CNNs, including those for NLP tasks (Hu et al., 2014; Kalchbrenner et al., 2014), take a straightforward convolution-pooling strategy, in which the \u201cfusion\u201d decisions (e.", "startOffset": 54, "endOffset": 98}, {"referenceID": 11, "context": "2 Gating Previous CNNs, including those for NLP tasks (Hu et al., 2014; Kalchbrenner et al., 2014), take a straightforward convolution-pooling strategy, in which the \u201cfusion\u201d decisions (e.", "startOffset": 54, "endOffset": 98}, {"referenceID": 1, "context": "This is essentially a particular case of attention model, analogous to the automatic alignment mechanism in (Bahdanau et al., 2014), where the attention signal is from the state of a generative recurrent neural network (RNN) as decoder.", "startOffset": 108, "endOffset": 131}, {"referenceID": 6, "context": "For a hierarchical SMT decoder, we adopt the integrating method proposed by Devlin et al. (2014). As inherited from the n-gram language model for performing hierarchical decoding, the leftmost and rightmost n\u2212 1 words from each constituent should be stored in the state space.", "startOffset": 76, "endOffset": 97}, {"referenceID": 6, "context": "For a hierarchical SMT decoder, we adopt the integrating method proposed by Devlin et al. (2014). As inherited from the n-gram language model for performing hierarchical decoding, the leftmost and rightmost n\u2212 1 words from each constituent should be stored in the state space. We extend the state space to also include the indexes of the affiliated source words for each of these edge words. For an aligned target word, we take its aligned source words as its affiliated source words. And for an unaligned word, we use the affiliation heuristic adopted by Devlin et al. (2014). In this paper, we integrate the joint model into the state-of-the-art dependency-to-string machine translation decoder as a case study to test the efficacy of our proposed approaches.", "startOffset": 76, "endOffset": 577}, {"referenceID": 21, "context": "1 Dependency-to-String Translation In this paper, we use a state-of-the-art dependency-to-string (Xie et al., 2011) decoder (Dep2Str), which is also a hierarchical decoder.", "startOffset": 97, "endOffset": 115}, {"referenceID": 14, "context": "We adopt the decoder proposed by Meng et al. (2013) as a variant of Dep2Str translation that", "startOffset": 33, "endOffset": 52}, {"referenceID": 7, "context": "Basically they extract the HDR rules with GHKM (Galley et al., 2004) algorithm.", "startOffset": 47, "endOffset": 68}, {"referenceID": 3, "context": "The bottom-up chart-based decoding algorithm with cube pruning (Chiang, 2007; Huang and Chiang, 2007) is used to find the k-best items for each node.", "startOffset": 63, "endOffset": 101}, {"referenceID": 17, "context": "2 MT Decoder Following Och and Ney (2002), we use a general loglinear framework.", "startOffset": 23, "endOffset": 42}, {"referenceID": 17, "context": "The weights of all these features are tuned via minimum error rate training (MERT) (Och, 2003).", "startOffset": 83, "endOffset": 94}, {"referenceID": 12, "context": "Preprocessing: The word alignments are obtained with GIZA++ (Och and Ney, 2003) on the corpora in both directions, using the \u201cgrow-diag-final-and\u201d balance strategy (Koehn et al., 2003).", "startOffset": 164, "endOffset": 184}, {"referenceID": 5, "context": "Metric: We use the case-insensitive 4-gram NIST BLEU3 as our evaluation metric, with statistical significance test with sign-test (Collins et al., 2005) between the proposed models and two baselines.", "startOffset": 130, "endOffset": 152}, {"referenceID": 6, "context": "2 Setting for Model Comparisons We use the tagCNN and inCNN joint language models as additional decoding features to a dependency-to-string baseline system (Dep2Str), and compare them to the neural network joint model with 11 source context words (Devlin et al., 2014).", "startOffset": 247, "endOffset": 268}, {"referenceID": 6, "context": "Since our tagCNN and inCNN models are source-to-target and left-to-right (on target side), we only take the source-to-target and left-to-right type NNJM in (Devlin et al., 2014) in comparison.", "startOffset": 156, "endOffset": 177}, {"referenceID": 6, "context": "Although the BBN-JM in (Devlin et al., 2014) is originally tested in the hierarchical phrase-based (Chiang, 2007) SMT and string-to-dependency (Shen et al.", "startOffset": 23, "endOffset": 44}, {"referenceID": 3, "context": ", 2014) is originally tested in the hierarchical phrase-based (Chiang, 2007) SMT and string-to-dependency (Shen et al.", "startOffset": 62, "endOffset": 76}, {"referenceID": 18, "context": ", 2014) is originally tested in the hierarchical phrase-based (Chiang, 2007) SMT and string-to-dependency (Shen et al., 2008) SMT, it is fairly versatile and can be readily integrated into Dep2Str.", "startOffset": 106, "endOffset": 125}, {"referenceID": 13, "context": "5+ higher than the open-source phrase-based system Moses (Koehn et al., 2007); \u2022 BBN-JM can give about +0.", "startOffset": 57, "endOffset": 77}, {"referenceID": 6, "context": "92 BLEU score over Dep2Str, a result similar as reported in (Devlin et al., 2014).", "startOffset": 60, "endOffset": 81}, {"referenceID": 6, "context": "57 + BBN-JM (Devlin et al., 2014) 36.", "startOffset": 12, "endOffset": 33}, {"referenceID": 6, "context": "(2014) to include additional source context (11 source words) in modeling the target sentence, which is clearly most related to our work, with however two important differences: 1) instead of the ad hoc way of selecting a context window in (Devlin et al., 2014), our model covers the entire source sentence and automatically distill the context relevant for target modeling; 2) our convolutional architecture can effectively leverage guiding signals of vastly different forms and nature from the target.", "startOffset": 240, "endOffset": 261}, {"referenceID": 4, "context": "Prior to our model there is also work on representing source sentences with neural networks, including RNN (Cho et al., 2014; Sutskever et al., 2014) and CNN (Kalchbrenner and Blunsom, 2013).", "startOffset": 107, "endOffset": 149}, {"referenceID": 20, "context": "Prior to our model there is also work on representing source sentences with neural networks, including RNN (Cho et al., 2014; Sutskever et al., 2014) and CNN (Kalchbrenner and Blunsom, 2013).", "startOffset": 107, "endOffset": 149}, {"referenceID": 1, "context": "Our model, especially inCNN, is inspired by is the automatic alignment model proposed in (Bahdanau et al., 2014).", "startOffset": 89, "endOffset": 112}, {"referenceID": 1, "context": "6 Related Work The seminal work of neural network language model (NNLM) can be traced to Bengio et al. (2003) on monolingual text.", "startOffset": 89, "endOffset": 110}, {"referenceID": 1, "context": "6 Related Work The seminal work of neural network language model (NNLM) can be traced to Bengio et al. (2003) on monolingual text. It is recently extended by Devlin et al. (2014) to include additional source context (11 source words) in modeling the target sentence, which is clearly most related to our work, with however two important differences: 1) instead of the ad hoc way of selecting a context window in (Devlin et al.", "startOffset": 89, "endOffset": 179}], "year": 2015, "abstractText": "The recently proposed neural network joint model (NNJM) (Devlin et al., 2014) arguments the n-gram target language model with a heuristically chosen source context window, achieving state-of-the-art performance in SMT. In this paper, we give a more systematic treatment by summarizing the relevant source information through a convolutional architecture guided by the target information. With different guiding signals during decoding, our specifically designed convolution+gating architectures can pinpoint the parts of a source sentence that are relevant to predicting a target word, and fuse them with the context of entire source sentence to form a unified representation. This representation, together with target language words, are fed to a deep neural network (DNN) to form a stronger NNJM. Experiments on two NIST Chinese-English translation tasks show that the proposed model can achieve significant improvements over the previous NNJM by up to +1.01 BLEU points on average.", "creator": "LaTeX with hyperref package"}}}