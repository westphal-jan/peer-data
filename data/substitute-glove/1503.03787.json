{"id": "1503.03787", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Mar-2015", "title": "Are there intelligent Turing machines?", "abstract": "This editorial script man opened computing speed based days the priority few Turing automated called orchestrated machines. Like internet Turing machines, accusations machines are though designed the programmed Turing pc this but does also supplant along original operation part the major Turing machines to kind brought beginning dust. some anything bringing guarantee behavior. Using this new custom go can define some talk esthetic besides did stressing ability over Turing machines creating most the security quotient or the irony intelligence dimensional for Turing boxes.", "histories": [["v1", "Thu, 12 Mar 2015 16:00:32 GMT  (64kb,D)", "http://arxiv.org/abs/1503.03787v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["norbert b\\'atfai"], "accepted": false, "id": "1503.03787"}, "pdf": {"name": "1503.03787.pdf", "metadata": {"source": "CRF", "title": "Are there intelligent Turing machines?", "authors": ["N. B\u00e1tfai"], "emails": ["batfai.norbert@inf.unideb.hu,"], "sections": [{"heading": null, "text": "Keywords: Modes of computation, Machine intelligence, Turing machines."}, {"heading": "1 Introduction", "text": "Supposedly we all can see roughly the same things if we look at the same things. This subjective observation naturally suggests that there are similar analytical capabilities and processes in our brain. From the point of view of cognitivism, we have similar cognitive architecture and the mental programs that are running in our brain are the same. But we certainly have no direct experience of other persons\u2019 mental processes. This was also emphasized by Eugene Wigner in [16] where it was pointed out that \u201cour knowledge of the consciousness of other men is derived only through analogy and some innate knowledge\u201d. But what is being sensed by human consciousness? It is the common-sense. The elements of it have been detected by consciousness. The existence of common-sense can be seen as the fruit of cooperation of human minds. At present, it is a popular research field to build databases similar to human common-sense (see, for example the projects Open Mind Common Sense and ConceptNet[7] or WordNet[4] and Cyc[6]) in order to computer programs also will be able to use common-sense knowledge. But while collaboration between computers is a fully well-known area due to it is based on such protocols that were developed by engineers, cooperation between human minds is an open and interdisciplinary research field and there is even the possibility that spoken and written communication are merely apparent where speech and reading/writing processes may mask the real channel that is based on biological quantum teleportation[9]. A similar kind of situation may be\n\u2217batfai.norbert@inf.unideb.hu, Department of Information Technology, University of Debrecen, H-4010 Debrecen PO Box 12, Hungary\nar X\niv :1\n50 3.\n03 78\n7v 1\n[ cs\n.A I]\n1 2\nM ar\n2 01\n5\nobserved in the case of communication between computers where several virtual communication layer protocols are built on the real physical link[14].\nIf strong AI[13] is true, then in principle, there might be algorithms that can compute all conscious and unconscious decisions of our life, at least theoretically. For a long time we had been believing that it cannot be possible because a computer program cannot be rich enough to describe such kind of complex behavior. But this assumption is completely wrong because it is tacitly based on investigating the source code of computer programs that have been directly designed and written by human programmers. To provide an intuitive counterexample of how complex the behavior of a computer program may be, consider the 5-state Busy Beaver[12] champion Turing machine discovered by Marxen and Buntrock[8]. This machine can execute many millions of steps before halting. The operation of it represents such level of complexity that cannot be achieved by using human programmers directly. That is, these and similar machines have not been created directly by human programmers, they have been only discovered by mankind[1].\nCan the physical, chemical, and biological processes behind consciousness be considered to be similar, for example, to the Busy Beaver programs with complex behavior? They definitely can be, in the sense that these natural processes show complex behavior and the aim of natural sciences is precisely to uncover such processes. Unfortunately, we cannot provide any new recipes for discovering and uncovering these mysteries. But in this paper we will try to find sets of the simplest computer programs (aka Turing machines) whose members can perform complex and meaningful communication and cooperation among each other. We suppose that such machines exist and we are going to try to uncover them.\nNeumann wrote in his last unfinished book [11] that \u201cIt is only proper to realize that language is a largely historical accident.\u201d The same might also be true for consciousness. In our view the minds are complex programs that can communicate and cooperate with each other where the cooperation is so important that consciousness cannot exist in itself. For this reason, developing some isolated standalone consciousness cannot be successful. Therefore, in the spirit of Chaitin\u2019s quote \u201cTo me, you understand something only if you can program it. (You, not someone else!) Otherwise you dont really understand it, you only think you understand it.\u201d[3] we would like to develop \u201cnetworks\u201d of cooperating computer programs, but we are not going to try to create these from scratch because it seems almost impossible at this moment. Instead, we are going to find existing computer programs that can cooperate with each other by a given orchestrated model."}, {"heading": "1.1 Notations and background", "text": "We apply the definition of Turing machines that was also used in the paper [2]. According to the notation applied in this cited paper, let the quadruple G = (QG, 0, {0, 1}, fG) be a Turing machine (TM) with the partial transition function fG : QG \u00d7 {0, 1} \u2192 QG \u00d7 {0, 1} \u00d7 {\u2190, \u2191,\u2192}, 0 \u2208 QG \u2282 N.\nThroughout of this paper, let M denotes the set of Turing machines with given n or fewer states and let F \u2192 T \u2208 fG denotes a transition rule of the machine G \u2208M , where F \u2208 QG \u00d7 {0, 1} and T \u2208 QG \u00d7 {0, 1} \u00d7 {\u2190, \u2191,\u2192}.\nParticular machines will also be given in the form of rule-index notation\nshown in [2]. For example, the famous 5-state champion Turing machine of Marxen and Buntrock can be given as (9, 0, 11, 1, 15, 2, 17, 3, 11, 4, 23, 5, 24, 6, 3, 7, 21, 9, 0) where the first number is the number of rules and the other ones denote the \u201cfrom\u201d and \u201c\u2019to\u2019 parts of the rules. This notational form can be used directly in our C++ programs to create Turing machines as it is shown in the next code snippet\nTuringMachine <5> mb1 (9, 0,11,1,15,2,17,3,11,4,23,5,24,\n6,3,7,21,9,0);\nThe programs and their several running logs can be found on a Github repository at https://github.com/nbatfai/orchmach."}, {"heading": "2 Orchestrated cooperation among Turing ma-", "text": "chines\nIn intuitive sense, we call Turing machines that have the ability to cooperate with each other by using some kind of algorithms like Alg. 1, Alg. 4 or Alg. 5 orchestrated machines (OMs). The idea behind these algorithms is to modify the original operation of Turing machines in order to evolve some collective behavior. The name orchestrated machines is partly inspired by the Penrose \u2013 Hameroff Orchestrated Objective Reduction (OrchOR) model of quantum consciousness [5]. The flavor of our algorithms in question is reminiscent of the dynamics of Neumann\u2019s U and R processes [15] and of the dynamics of the intuitive cellular automata example of [5] in sense that one transition rule is chosen non-deterministically from applicable rules (R) then this selected rule will be executed in all Turing machines (U), and so on.\nThe first orchestrated algorithm (OM1) is shown in pseudocode in Alg. 1. It is intended to be applied in computer simulations of cooperation among Turing machines. Accordingly, this algorithm uses Turing machines that have no input. The second algorithm is given in pseudocode in Alg. 4, it may be used for study of standard questions such as, \u201cWhat is the language recognized by an orchestrated machine?\u201d Finally Alg. 5 gives higher autonomy to individual Turing machines in their operation. It may be noted that all three algorithms can be considered as a special universal Turing machine."}, {"heading": "2.1 Orchestrated machines", "text": "The complete pseudo code for orchestrated machines is shown in Alg. 1. As input, the algorithm gets a set of Turing machines. The initial state of the orchestrated machine is that the heads of the contained Turing machines are reading zero and the machines are in their initial state which is 0. The operation of the algorithm is controlled by the variable F \u2208 QG\u00d7{0, 1} initialized in Line 3. In the main loop in Line 4, every machines G \u2208Mn determine the transition rule F \u2192 T \u2208 fG that can be applicable to actual value of F . If a machine G has no such rule, then it halts and will be removed from the orchestrated machine in Line 10. The main loop collects the right side of applicable rules of the machines G \u2208 Mn into the set U in Line 8 (the implementation uses a list instead of a set). After the inner loop is exited, only one right side will be non-deterministically chosen to be executed on all machines where it is\npossible as shown from Line 13 to 16. The orchestrated machine halts if all contained Turing machines halt. The most precise description of Alg. 1 can be found in its first implementation in class OrchMach1 in orchmach1.hpp at https://github.com/nbatfai/orchmach.\nAlgorithm 1 Orchestrated machines (with no input)\nInput: M0 \u2286M , . M0 is the investigated subset of the machines n \u2208 N, N \u2208 N \u222a {\u221e} . Local variables Mn \u2286Mn\u22121 \u2286M , Gn \u2208M , Tn \u2208 QGn \u00d7 {0, 1} \u00d7 {\u2190, \u2191,\u2192}. Output: N , (card(M2), . . . , card(MN\u22121)), . card(Mi) denotes the cardinality of the set Mi. ((G2, T2), . . . , (GN\u22121, TN\u22121)), . If N is finite, then the sequences {card(Mi)} and {(Gi, Ti)} are also finite and otherwise all three of them are infinite.\n1: procedure OrchMach1(M0) 2: n = 0 . Counter of steps 3: F = (0, 0) . The initial state is 0 and the input word is the empty word that\nis the current symbol under the head is 0 4: while Mn 6= \u2205 do 5: U = \u2205, Mn+1 = Mn 6: for G \u2208Mn do . For all machines in Mn 7: if F \u2192 T \u2208 fG then . fG contains only one or no such rule because G\nis deterministic 8: U = U \u222a {(G,T )} 9: else . G halts 10: Mn+1 = Mn+1 \\G 11: end if 12: end for 13: (Gn, Tn) = select(U) . One rule is non-deterministically chosen 14: F = exec(Gn, Tn) . to be executed on the same machine from where the\nrule was selected 15: for G \u2208Mn+1 \\Gn do 16: exec(G,Tn) . to be executed on the other machines where it is\npossible (because it can happen that G do not contain the state that is appeared on the right side of the rule F \u2192 Tn) 17: end for 18: n = n + 1 19: end while . All machines have halted 20: N = n . card(M0) = card(M1) and if N is finite, then card(MN ) = 0 21: o2 = card(M2), . . . , oN\u22121 = card(MN\u22121) 22: O2 = (G2, T2), . . . , ON\u22121 = (GN\u22121, TN\u22121) . The selected transition rules (and\ntheir machines) 23: return N . or \u201creturns\u201d \u221e if the while loop begins in line 4 never ends. 24: end procedure\nTheorem 1 (The tapes are the same). Let Mn \u2286 M be the set of Turing machines used in (line 4 of) Alg. 1. The contents of the tapes of Turing machines G \u2208Mn are the same.\nProof. 1. The statement holds trivially for the case n = 0 because tapes contain only zeros doe to the machines were started with no input. 2. The tapes of the machines may be changed in line 14 and 16. Assume that the statement holds\nfor some n then after the execution of Tn the symbols under the heads of the machines will be the same.\nCorollary 1 (One tape is enough). It is important both theoretical but also from implementation aspects that computer simulation of orchestrated machines can be based on using only one common tape.\nCorollary 2 (F would be computed locally). In line 16, if G contains the state that is appeared on the right side of the rule F \u2192 Tn then F (computed in line 14) would be equal to exec(G,Tn).\nThere are special cases in which the behavior of Alg. 1 is equivalent with a non-deterministic Turing machine (NDTM). It is shown in the next theorem.\nTheorem 2 (Relation to the NDTMs). Let H \u2286 M , Fi = {F |F \u2192 T \u2208 fGi}, Gi \u2208 H, i = 1, . . . , k. If Fi = Fj, 1 \u2264 i, j \u2264 k then there is an equivalent NDTM to the orchestrated machine OrchMach1(H).\nProof. There are two possible way to run the machine OrchMach1(H) 1. there is N \u2208 N that for all n < N , Mn = Mn\u22121, Mn = \u2205 2. for all n \u2208 N holds that Mn = Mn\u22121. We can construct an equivalent NDTM as follows: fNDTM = \u222aFi = Fj , j \u2208 {1, . . . , k}.\nCorollary 3 (Deterministic decomposition of NDTMs). For every NDTM there exists an equivalent OM1.\nProof. The proof is constructive. Let (a, x) be the left side of a non-deterministic rule of a NDTM with right sides (a, x) = {(b1, y1, d1), . . . , (bn, yn, dn)} and let T be a NDTM. Perform the algorithm shown in Alg. 2. After this, the breed H satisfies the conditions of Theorem 2.\nAlgorithm 2 The algorithm of the proof of Corollary 3\n1: H = {T} 2: if there exist a non-deterministic rule (a, x)\u2192 in machines in H then 3: A ruleset (a, x)\u2192 is selected and let H \u2032 = \u2205. 4: for G \u2208 H do . For all machines in H 5: for i = 1 to n do . For all right sides of (a, x) 6: Construct a new DTM Ti such that fTi = fG \\ {(a, x) \u2192} and fTi =\nfTi \u222a {(a, x)\u2192 (bi, yi, di)} 7: H \u2032 = H \u2032 \u222a {Ti} 8: end for 9: end for\n10: H = H \u2032 11: go to 2 12: end if\nA machine OrchMach1(H) halts if there is a computation of Alg. 1 such that OrchMach1(H) <\u221e.\nDefinition 1 (Turing machine breeds). The set H \u2286 M is referred to as a Turing machine breed (or simply a breed) if OrchMach1(H) halts, that is if there exist a finite sequence on(H). A breed H is called non-trivial if on(H) \u2265 2, where the overline denotes the mean value.\nDefinition 2 (Convergence and divergence of machine breeds). A machine breed H is divergent if for all K \u2208 N there exist Ok(H) such that OrchMach1(H) \u2265 K. A machine breed is convergent if it is not divergent.\nExample 1 (A divergent breed). Let A = ({0}, 0, {0, 1}, {(0, 0) \u2192 (0, 1,\u2192 )}) and and B = ({0}, 0, {0, 1}, {(0, 0) \u2192 (0, 0,\u2190)}) be two Turing machines then it is easy to see that the breed {A,B} is divergent. For example, let k = K and the following transition rules have been chosen: O2 = (A, (0, 0) \u2192 (0, 1,\u2192 )), . . . , Ok\u22121 = (A, (0, 0)\u2192 (0, 1,\u2192)), Ok = (B, (0, 0)\u2192 (0, 0,\u2190)).\nExample 2 (A convergent breed). Let C = ({0, 1, 2}, 0, {0, 1}, {(0, 0)\u2192 (1, 0,\u2192 ), (1, 0) \u2192 (2, 0,\u2192)}) and D = ({0, 1, 2}, 0, {0, 1}, {(0, 0) \u2192 (1, 1,\u2192), (1, 0) \u2192 (2, 1,\u2192)}) be two Turing machines shown in Fig. 2. It may be shown easily that the breed {C,D} is convergent because it may be corresponded to the non-deterministic Turing machine shown in Fig. 2 that always halts.\nExample 3 (An infinite breed from finite machines). The Turing machines E = ({0}, 0, {0, 1}, {(0, 0) \u2192 (0, 1, \u2191)}) and J = ({0}, 0, {0, 1}, {(0, 1) \u2192 (0, 0, \u2191 )}) shown in Fig. 3 are not infinite loops but the breed {E, J} is divergent.\nTheorem 3. Let H \u2286 M is a breed. If H contains an infinite loop then it is divergent.\nProof. The proof is trivial, simply select the transition rule of the infinite loop machine in every step.\nTheorem 4 (Halting of orchestrated machines). The language of convergent breeds is algorithmically undecidable.\nProof. It is trivial because the sublanguage of trivial convergent breeds gives a well-known variant of the halting problem. (A breed H is called trivial if card(H) = 1.)\nDefinition 3 (Purebred breeds). A convergent machine breed H is purebred if there is no real subset M1 \u2282 H such that {OrchMach1(M1, \u2032T \u2032)} = {OrchMach1(H, \u2032T \u2032)} where \u2032T \u2032 denotes a possible result of the computation OrchMach1 for precise details see from line 23 to line 31 in Alg. 3.\nAlgorithm 3 Orchestrated machines (return values)\nInput: M0 \u2286M , m \u2208 {\u2032N \u2032, \u2032T \u2032, \u2032O\u2032, \u2032o\u2032} . indicates what return value will be returned . . .\n1: procedure OrchMach1(M0, m) . . .\n23: if m = \u2032N \u2032 then 24: return N 25: else if m = \u2032O\u2032 then 26: return O2 = (G2, T2), . . . , ON\u22121 = (GN\u22121, TN\u22121) 27: else if m = \u2032o\u2032 then 28: return o2 = card(M2), . . . , oN\u22121 = card(MN\u22121) 29: else if m = \u2032T \u2032 then 30: return the concatenation of tape symbols from the leftmost 1 to the right-\nmost 1 (or \u221e if N is equal to \u221e) 31: end if 32: end procedure\nExample 4 (A purebred breed and a not purebred one). In Example 2 the breed {C,D} is purebred but if the machine G = ({0, 3}, 0, {0, 1}, {(3, 0)\u2192 (3, 1,\u2192)}) is added to the breed {C,D} then the result {C,D,G} breed will be not purebred.\nIn the following, let B(M) denote the set of all purebred Turing machine breeds.\nDefinition 4 (iq, eq). Let H \u2208 B(M) be a purebred breed, the quantity iq(H) = max{OrchMach1(H)}, iq : B(M) \u2192 N is called the intelligence quotient and similarly the quantity eq(H) = max{ \u230a on(H) \u230b }, eq : B(M) \u2192 N is called the\nemotional quotient of the breed H.\nDefinition 5 (Intelligence functions). Let N,Z \u2208 N be natural numbers. The functions\neq : N\u2192 N, eq(N) = max H\u2208B(M)\n{ \u230a on(H) \u230b | OrchMach1(H) = N}\niq : N\u2192 N, iq(Z) = max H\u2208B(M)\n{OrchMach1(H) | \u230a on(H) \u230b = Z}\nare called intelligence functions of breeds, where bc denotes the floor function, but a more precise definition can be given that uses Def. 4 as follows\nEQ : N\u2192 N, EQ(N) = max H\u2208B(M)\n{ \u230a on(H) \u230b | iq(H) = N}\nIQ : N\u2192 N, IQ(Z) = max H\u2208B(M) {OrchMach1(H) | eq(H) = Z}\nIn intuitive sense, the function EQ(N) gives the maximum number of machines that can do N steps together in a purebred breed, and inversely, IQ(Z) gives the maximum number of steps that can be done by Z machines together as members of a purebred breed. It is to be noted that functions EQ and IQ are well defined total functions due to M is a finite set.\nTheorem 5. Let x, y \u2208 N be natural numbers, EQ(x) \u2265 y \u21d4 IQ(y) \u2265 x.\nProof. It simply follows from the structure of the definitions of EQ and IQ.\nIt is an open question whether or not there is an interesting relation between the functions IQ and EQ. At this point, we have just started to collect experiences with orchestrated machines. We have developed a computer program to help automatically investigate Turing machine breeds. The program can be found in the git repository at https://github.com/nbatfai/orchmach. It allows to gather experience with orchestrated machines. The results of some first experiments are presented in Table 1, where the first column shows the cardinality of the examined breed. The second column is the maximum number of ones of a given breed\u2019s individual Turing machines. For example, the breed labelled by \u201c5a\u201d contains the Marxen and Buntrock\u2019s champion machine so its first \u201c1s\u201d column is 4097. (We have used several well-known Busy Beaver TMs like Marxen and Buntrock\u2019s champion machines, Uhing\u2019s machines or Schult\u2019s machines [10]. The exact lists of TMs of examined breeds and full running logs are available at http://www.inf.unideb.hu/~nbatfai/orchmach or in the sources at https://github.com/nbatfai/orchmach.) The third column is the usual time complexity of the most powerful individual Turing machine contained in the previous column. The other columns show running results that are organized in triplet groups of three, the first column of triplets is maximized for\no2, the second one is maximized for OrchMach1(H, \u2032N \u2032) and the last one is maximized for the number of ones. For example, it is very interesting that with the exception of the first 21 time steps of the computation of the 75001 ones was done by Uhing\u2019s machine in 3.272948454 \u2217 109 time steps. (For further details, see related running log at the author\u2019s homepage http://www.inf.unideb.hu/~nbatfai/orchmach/ data/breed_3a_sel.txt.)\nIt is likely a significant observation that there are breeds that are more powerful if their o2 are greater than 1, for example, see the triplet (6, 831, 59) in the row \u201c21\u201d of Table 1. This situation is well presented by the plot labelled exp. 7/breed 10 (\u201c21\u201d) in Fig. 4.\nFinally, it should be noted that the program suggests that it is possible that the listed breeds may be convergent.\nFig. 5 shows further computational results of some probably convergent breeds. It is clear that IQ(1) \u2265 70740809 because this estimation is based on the machine ( 9, 0, 11, 1, 15, 2, 17, 3, 1, 4, 23, 5, 24, 6, 3, 7, 21, 9, 0 ) as a trivial breed. (In practice, this machine is a variant of the Marxen and Buntrock\u2019s champion machine, see also [1]). But our experiments have already found a probably convergent \u201cquasi-trivial\u201d breed, shown in Table 1, that can produce 75001 ones so it follows from this that IQ(1) \u2265 3.272948454 \u2217 109. (A computation of a non-trivial breed is called quasi-trivial if its o2 value is equal to 1.)\nDefinition 6 (Intelligence quotients of Turing machines). Let V \u2208 M be a Turing machine, the quantity iq(V ) = maxH\u2208B(M){OrchMach1(H) | V \u2208 H} is called the intelligence quotient and similarly eq(V ) = maxH\u2208B(M){on(H) | V \u2208\nH} is called the emotional intelligence quotient of the Turing machine V ."}, {"heading": "2.1.1 Orchestrated machines with input", "text": "The previous algorithm used Turing machines that have a binary tape alphabet. To simplify constructing concrete Turing machines the {0, 1, } tape alphabet will be used in Alg. 4 but the input alphabet will remain binary. The modification of Alg. 1 is shown in the pseudo code of Alg. 4 where modified lines are contained only.\nAlgorithm 4 Orchestrated machines (with the same input)\nInput: M0 \u2286M , w \u2208 {0, 1}\u2217 . w is the input word . . .\n1: procedure OrchMach2(M0, w) . . . 3: F = (0, a) . a \u2208 {0, 1} is the first letter of the input word . . .\n24: end procedure\nIn the following let w \u2208 {0, 1}\u2217 be a given arbitrary word. The OrchMach1(H) algorithm is a special case of the OrchMach2(H,w) where the input word w is the empty word \u03bb. With this in mind we can easily generalize the definitions of breeds as follows. A machine OrchMach2(H,w) halts if there is a computation of Alg. 4 such that OrchMach2(H,w) <\u221e.\nDefinition 7 (w-Breeds). The set H \u2286 M is referred to as a Turing machine w-breed (or simply a w-breed) if OrchMach1(H,w) halts, that is if there exist a finite sequence on(H,w). A breed H is called non-trivial if on(H,w) \u2265 2.\nDefinition 8 (Convergence and divergence). A machine w-breed H is divergent if for all K \u2208 N there exist Ok(H,w) such that OrchMach1(H,w) \u2265 K. A machine breed is convergent if it is not divergent.\nDefinition 9 (The recognized language).\nL(OrchMach2(H)) = {w \u2208 {0, 1}\u2217 | OrchMach2(H,w) halts}.\nDefinition 10 (Purebred w-breeds). A convergent machine w-breed H is purebred if there is no real subset M1 \u2282 H such that\nL(OrchMach2(H)) = L(OrchMach2(M1)).\nExample 5 (A purebred w-breed and a not purebred one). Let fX = { (0, 0)\u2192 (1, 0,\u2192), (0, 1) \u2192 (\u221e, 1, \u2191), (1, 1) \u2192 (0, 1,\u2192), (1, 0) \u2192 (\u221e, 1, \u2191), (1, ) \u2192 (\u221e, 1, \u2191), (\u221e, 1)\u2192 (\u221e, 1, \u2191)} and fY = { (0, 1)\u2192 (1, 1,\u2192), (0, 0)\u2192 (\u221e, 1, \u2191), (1, 0) \u2192 (0, 0,\u2192), (1, 1) \u2192 (\u221e, 1, \u2191), (1, ) \u2192 (\u221e, 1, \u2191), (\u221e, 1) \u2192 (\u221e, 1, \u2191)} be transition rules of two Turing machines X and Y shown in Fig. 6 then it is easy to see that for example the 0110-breed {X,Y } is purebred. Let fX\u2032 = { (0, )\u2192 (r, ,\u2190), (r, 0)\u2192 (r, 0,\u2190), (r, 1)\u2192 (r, 1,\u2190)} be transition rules of the machine X \u2032. Then every (..)\u2217-breeds {X,X \u2032, Y } given by the regular expression (..)\u2217 are not purebred convergent (..)\u2217-breeds.\nExample 6 (0110). 0110 /\u2208 L(X) \u222a L(Y ), but 0110 \u2208 L(OrchMach2({X,Y })) Theorem 6 (Languages recognized by orchestrated machines). \u22c3 L(Hi) \u2286 L(OrchMach2(H))\nProof. The proof is trivial. Suppose that w \u2208 L(Hj) and then simply select the transition rule of the machine Hj in every step.\nIn the following, let B(M,w) denote the set of all purebred Turing machine w-breeds. But the former IQ definitions must be weakened or altered because the formal generalization of the formula in Def. 6\nw-iq(V ) = maxH\u2208B(M,w){OrchMach2(H,w) | V \u2208 H} would naturally lead to iq(V ) = lim|z|\u2192\u221e z-iq(V ) f(|z|) , H \u2208 B(M, z), V \u2208 H but this would be infinite for all Turing machines because for every breed H there exist a breed H \u2032 such that L(H) = L(H \u2032) and OrchMach2(H,w) \u2265 |z|f(|z|).\nDefinition 11 (w-iq). Let H \u2208 B(M,w) be a Turing machine purebred breed, the quantity w-iq(H) = max{OrchMach2(H,w)}, w-iq : B(M,w)\u2192 N is called the w-intelligence quotient and similarly the quantity w-eq(H) = max{ \u230a on(H) \u230b }, w-eq : B(M,w)\u2192 N is called the w-emotional quotient of the breed H.\nExample 7. w-iq({X}) \u2265 |w|, w-iq({X,Y }) \u2265 |w|, w-iq({X \u2032}) \u2265 2|w|\nDefinition 12 (w-intelligence functions). Let N,Z \u2208 N be natural numbers. The functions\nw-EQ : N\u2192 N, w-EQ(N) = max H\u2208B(M,w)\n{ \u230a on(H,w) \u230b | w-iq(H) = N}\nw-IQ : N\u2192 N, w-IQ(Z) = max H\u2208B(M,w) {OrchMach2(H,w) | w-eq(H) = Z}\nare called w-intelligence functions of breeds."}, {"heading": "2.2 Universal orchestrated machines", "text": "Alg. 5 gives the pseudo code for universal orchestrated machines. It allows higher autonomy to individual Turing machines in their operation. If we compare this orchestrated algorithm with algorithms given in previous sections we will easily see the difference, the variable F that represents the actual state and the read symbol is a local variable in sense that each machines of a breed have their own variable F . In this paper we do not investigate the properties of OrchMach3 only the algorithm is presented in Alg. 5, but it is clear that Theorem 1 does not hold for universal orchestrated machines.\nAlgorithm 5 Orchestrated machines (with different input)\nInput: M0 \u2286M , wi \u2208 {0, 1}\u2217, i = 1, . . . , card(M0) . wi is the input word of the machine Ri \u2208M0 n \u2208 N, N \u2208 N\u222a{\u221e}, Mn \u2286Mn\u22121 \u2286M , Gn \u2208M , Tn \u2208 QGn \u00d7{0, 1}\u00d7{\u2190, \u2191,\u2192}, FG \u2208 QG \u00d7 {0, 1}, G \u2208Mn . Local variables. Output: N , (card(M2), . . . , card(MN\u22121)), ((G2, T2), . . . , (GN\u22121, TN\u22121)).\n1: procedure OrchMach3(M0, {wi}) 2: n = 0 3: FG = (0, a), G \u2208Mn . a \u2208 {0, 1} is the first letter of the input of G 4: while Mn 6= \u2205 do 5: U = \u2205, Mn+1 = Mn 6: for G \u2208Mn do 7: if FG \u2192 T \u2208 fG then 8: U = U \u222a {(G,T )} 9: else 10: Mn+1 = Mn+1 \\G 11: end if 12: end for 13: (Gn, Tn) = select(U) 14: for G \u2208Mn+1 do 15: FG = exec(G,Tn) 16: end for 17: n = n + 1 18: end while 19: N = n, o2 = card(M2), . . . , oN\u22121 = card(MN\u22121) , O2 = (G2, T2), . . . , ON\u22121 =\n(GN\u22121, TN\u22121) 20: return N 21: end procedure"}, {"heading": "3 Conclusion and future directions", "text": "We have introduced a new special type of universal Turing machine called orchestrated machine that allows to begin the investigation of an a\u2019priori ability of certain Turing machines to work with each other. Among purebred machine breeds we have defined two non-computable total functions EQ and IQ to catalyze the search for more interesting machine breeds.\nIn this paper, the time complexity classes of orchestrated machines were not being investigated but it is clear that the NP \u2286 OM1P, where OM1P denotes the class of decision problems solvable by an orchestrated machine (with algorithm\nOrchMach1) in polynomial time. This inclusion follows from the Theorem 3. We have many other exciting and unanswered questions for future research. For example, in this paper, the orchestrated machines have been built from Turing machines. Is it possible for an orchestrated machine to be constructed from orchestrated machines?\nWe believe machine breeds would become a good model for processes that can be well distinguished from each other. As an intuitive example, in a living cell, several well-known processes (such as reverse transcription or citric acid cycle) are taking place in the same time, these processes together can be seen as a \u201cbreed\u201d. To illustrate our intuition, we can provide a further subjective example of a\u201cbreed\u201d. When the author listens to Ferenc Liszt\u2019s Hungarian Rhapsody, for piano No. 15 (Ra\u0301ko\u0301czi marsch) then the author\u2019s \u201csensor program\u201d (that listens to the music) and Liszt\u2019s \u201cgenerator program\u201d (that wrote the music) may form a \u201cbreed\u201d. As a first step towards in this direction, it has already been an interesting and unanswered question whether the orchestrated architecture introduced in this paper can be developed for higher-level programming models.\nThe main question is that how can we develop computing architectures that will be able to replace sequential nature of the Neumann architecture in some a\u2019priori AI application domain, for example, in reproducing the human thinking. We have given a new model for Turing machines. But it is also true that at this point we can imagine only evolutionary programming methods for general programming of orchestrated machines."}, {"heading": "Acknowledgment", "text": "The computations shown in this paper were partially performed on the NIIF High Performance Computing supercomputer at University of Debrecen."}], "references": [{"title": "Recombinations of Busy Beaver Machines", "author": ["N. B\u00e1tfai"], "venue": "ArXiv e-prints, CoRR, abs/0908.4013", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "On the Running Time of the Shortest Programs", "author": ["N. B\u00e1tfai"], "venue": "ArXiv e-prints, CoRR, abs/0908.1159", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "Meta Math! : The Quest for Omega", "author": ["G. Chaitin"], "venue": "Pantheon", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2005}, {"title": "editor", "author": ["C. Fellbaum"], "venue": "WordNet: an electronic lexical database. MIT Press", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1998}, {"title": "Quantum computation in brain microtubules? The Penrose-Hameroff \u2019Orch OR\u2019 model of consciousness", "author": ["S.R. Hameroff"], "venue": "Philosophical Transactions Royal Society London : Mathematical, Physical and Engineering Sciences, 356", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1743}, {"title": "Cyc: A large-scale investment in knowledge infrastructure", "author": ["D.B. Lenat"], "venue": "Commun. ACM, 38(11):33\u201338", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1995}, {"title": "Conceptnet - a practical commonsense reasoning tool-kit", "author": ["H. Liu", "P. Singh"], "venue": "BT Technology Journal, 22(4):211\u2013226", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2004}, {"title": "Attacking the busy beaver 5", "author": ["H. Marxen", "S. Gmbh", "J. Buntrock", "T.U. Berlin"], "venue": "Bull EATCS, 40:247\u2013251", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1990}, {"title": "QED-Cavity Model of Microtubules Implies Dissipationless Energy Transfer and Biological Quantum Teleportation", "author": ["N.E. Mavromatos", "A. Mershin", "D.V. Nanopoulos"], "venue": "International Journal of Modern Physics B, 16:3623\u20133642", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2002}, {"title": "The Busy Beaver Competition: a historical survey", "author": ["P. Michel"], "venue": "ArXiv eprints", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "The Computer and the Brain", "author": ["J. v. Neumann"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1958}, {"title": "On non-computable functions", "author": ["T. Rado"], "venue": "The Bell System Technical Journal, 41(3):877\u2013884", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1962}, {"title": "Minds", "author": ["J.R. Searle"], "venue": "brains and programs. Behavioral and Brain Sciences, 3", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1980}, {"title": "Computer Networks", "author": ["A. Tanenbaum", "D.J. Wetherall"], "venue": "Prentice Hall, 5th edition", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2011}, {"title": "Mathematical foundations of quantum mechanics", "author": ["J. Von Neumann"], "venue": "Princeton Univ. Press", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1955}, {"title": "Remarks on the mind-body question", "author": ["E.P. Wigner"], "venue": "Symmetries and Reflections, page 179", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1967}], "referenceMentions": [{"referenceID": 15, "context": "This was also emphasized by Eugene Wigner in [16] where it was pointed out that \u201cour knowledge of the consciousness of other men is derived only through analogy and some innate knowledge\u201d.", "startOffset": 45, "endOffset": 49}, {"referenceID": 6, "context": "At present, it is a popular research field to build databases similar to human common-sense (see, for example the projects Open Mind Common Sense and ConceptNet[7] or WordNet[4] and Cyc[6]) in order to computer programs also will be able to use common-sense knowledge.", "startOffset": 160, "endOffset": 163}, {"referenceID": 3, "context": "At present, it is a popular research field to build databases similar to human common-sense (see, for example the projects Open Mind Common Sense and ConceptNet[7] or WordNet[4] and Cyc[6]) in order to computer programs also will be able to use common-sense knowledge.", "startOffset": 174, "endOffset": 177}, {"referenceID": 5, "context": "At present, it is a popular research field to build databases similar to human common-sense (see, for example the projects Open Mind Common Sense and ConceptNet[7] or WordNet[4] and Cyc[6]) in order to computer programs also will be able to use common-sense knowledge.", "startOffset": 185, "endOffset": 188}, {"referenceID": 8, "context": "But while collaboration between computers is a fully well-known area due to it is based on such protocols that were developed by engineers, cooperation between human minds is an open and interdisciplinary research field and there is even the possibility that spoken and written communication are merely apparent where speech and reading/writing processes may mask the real channel that is based on biological quantum teleportation[9].", "startOffset": 430, "endOffset": 433}, {"referenceID": 13, "context": "observed in the case of communication between computers where several virtual communication layer protocols are built on the real physical link[14].", "startOffset": 143, "endOffset": 147}, {"referenceID": 12, "context": "If strong AI[13] is true, then in principle, there might be algorithms that can compute all conscious and unconscious decisions of our life, at least theoretically.", "startOffset": 12, "endOffset": 16}, {"referenceID": 11, "context": "To provide an intuitive counterexample of how complex the behavior of a computer program may be, consider the 5-state Busy Beaver[12] champion Turing machine discovered by Marxen and Buntrock[8].", "startOffset": 129, "endOffset": 133}, {"referenceID": 7, "context": "To provide an intuitive counterexample of how complex the behavior of a computer program may be, consider the 5-state Busy Beaver[12] champion Turing machine discovered by Marxen and Buntrock[8].", "startOffset": 191, "endOffset": 194}, {"referenceID": 0, "context": "That is, these and similar machines have not been created directly by human programmers, they have been only discovered by mankind[1].", "startOffset": 130, "endOffset": 133}, {"referenceID": 10, "context": "Neumann wrote in his last unfinished book [11] that \u201cIt is only proper to realize that language is a largely historical accident.", "startOffset": 42, "endOffset": 46}, {"referenceID": 2, "context": "\u201d[3] we would like to develop \u201cnetworks\u201d of cooperating computer programs, but we are not going to try to create these from scratch because it seems almost impossible at this moment.", "startOffset": 1, "endOffset": 4}, {"referenceID": 1, "context": "We apply the definition of Turing machines that was also used in the paper [2].", "startOffset": 75, "endOffset": 78}, {"referenceID": 1, "context": "shown in [2].", "startOffset": 9, "endOffset": 12}, {"referenceID": 4, "context": "The name orchestrated machines is partly inspired by the Penrose \u2013 Hameroff Orchestrated Objective Reduction (OrchOR) model of quantum consciousness [5].", "startOffset": 149, "endOffset": 152}, {"referenceID": 14, "context": "The flavor of our algorithms in question is reminiscent of the dynamics of Neumann\u2019s U and R processes [15] and of the dynamics of the intuitive cellular automata example of [5] in sense that one transition rule is chosen non-deterministically from applicable rules (R) then this selected rule will be executed in all Turing machines (U), and so on.", "startOffset": 103, "endOffset": 107}, {"referenceID": 4, "context": "The flavor of our algorithms in question is reminiscent of the dynamics of Neumann\u2019s U and R processes [15] and of the dynamics of the intuitive cellular automata example of [5] in sense that one transition rule is chosen non-deterministically from applicable rules (R) then this selected rule will be executed in all Turing machines (U), and so on.", "startOffset": 174, "endOffset": 177}, {"referenceID": 9, "context": "(We have used several well-known Busy Beaver TMs like Marxen and Buntrock\u2019s champion machines, Uhing\u2019s machines or Schult\u2019s machines [10].", "startOffset": 133, "endOffset": 137}, {"referenceID": 0, "context": "(In practice, this machine is a variant of the Marxen and Buntrock\u2019s champion machine, see also [1]).", "startOffset": 96, "endOffset": 99}], "year": 2015, "abstractText": "This paper introduces a new computing model based on the cooperation among Turing machines called orchestrated machines. Like universal Turing machines, orchestrated machines are also designed to simulate Turing machines but they can also modify the original operation of the included Turing machines to create a new layer of some kind of collective behavior. Using this new model we can define some interested notions related to cooperation ability of Turing machines such as the intelligence quotient or the emotional intelligence quotient for Turing machines.", "creator": "LaTeX with hyperref package"}}}