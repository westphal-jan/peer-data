{"id": "1505.03996", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-May-2015", "title": "Norm Monitoring under Partial Action Observability", "abstract": "In the context much e.g. conventions than within multi - agent system, from vitally any question clearly being wanted however involved referred in the literature problem be strengthening of approaches up improve formula_8 commitments initially cancellation action constrictive. This letters proposes the reconstruction of postdate perceived with running this example. In particular, better formalise put reason present salvaging unobserved actions, and considering but questions model and algorithms for mechanisms norms into partial action observability types two different processes for complicates decomposable actions. Our detailed showing nothing reconstructing unbothered intentions increases significantly the four of everett violations by fulfilments observed.", "histories": [["v1", "Fri, 15 May 2015 09:16:07 GMT  (106kb,D)", "https://arxiv.org/abs/1505.03996v1", null], ["v2", "Thu, 21 Apr 2016 08:30:04 GMT  (106kb,D)", "http://arxiv.org/abs/1505.03996v2", "Accepted at the IEEE Transaction on Cybernetics"]], "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["natalia criado", "jose m such"], "accepted": false, "id": "1505.03996"}, "pdf": {"name": "1505.03996.pdf", "metadata": {"source": "CRF", "title": "Norm Monitoring under Partial Action Observability", "authors": ["Natalia Criado"], "emails": ["n.criado@ljmu.ac.uk.", "j.such@lancaster.ac.uk."], "sections": [{"heading": null, "text": "Index Terms\u2014Norm Monitoring, Action Observability.\nI. INTRODUCTION Within the Multi-agent System (MAS) area, norms are understood as means to coordinate and regulate the activity of autonomous agents interacting in a given social context [19]. The existence of autonomous agents that are capable of violating norms entails the development of norm control mechanisms that implement norms in agent societies.\nIn the existing literature, several authors have proposed infrastructures to observe agent actions and detect norm violations upon them [1], [21]. The majority of these proposals have focused on providing efficient and scalable methods to monitor norms in dynamic agent societies, but they assume that all actions of agents are observable. However, this assumption is too strong because it is not necessarily true that all actions to be controlled can always be observed. One reason for this is that observing actions usually entails high costs. For example, the costs of setting, maintaining, and managing traffics radars to detect car speeds are very high, so traffic authorities usually decide to install a few of them in specific and critical locations. Another reason is that illegal actions may take place outside the institution controlled by the monitor; however, the effects of these actions can still be detected within the institution. For example, black market transactions cannot be directly observed by legal authorities, yet the corresponding money laundering transactions can be detected and sanctioned by these authorities.\nVery recent work on norm monitoring under partial action observability proposes solutions to ensure complete action observability by increasing the actions that are observed, either by adding more monitors [5] or by adapting the norms to what can be observed [2]. However, these solutions are not always appropriate or feasible. For instance, in e-markets, such as eBAY1 or Amazon2, it is not possible to change trading\nN. Criado is with the School of Computing and Mathematical Sciences, Liverpool John Moores University, UK, e-mail: n.criado@ljmu.ac.uk.\nJ. M. Such is with the School of Computing and Communications Infolab21, Lancaster University, UK, email:j.such@lancaster.ac.uk.\n1http://www.ebay.com 2http://www.amazon.com\nlaws to what can be observed. This paper goes beyond these approaches by also considering actions that were not observed but that can be reconstructed from what was observed.\nThe main contributions of this paper are: (i) a formalisation of the problem of reconstructing unobserved actions from observed actions for the purpose of norm monitoring; (ii) an exhaustive and an approximation solution to this problem; and (iii) an information model and algorithms used to monitor norms under partial action observability. Through an extensive empirical evaluation, we show that reconstructing unobserved actions increases noticeably the number of norm violations and fulfilments detected.\nThis paper is organised as follows: Section II contains the preliminary definitions used in this paper. Section III describes the information model of norm monitor proposed in this paper. Section IV contains the algorithms executed by norm monitors. Our proposal is evaluated in SectionV. Related word is discussed in Section VI. Finally, conclusions are contained in Section VII."}, {"heading": "II. PRELIMINARY DEFINITIONS", "text": "L is a first-order language containing a finite set of predicate and constant symbols, the logical connective \u00ac, the equality (inequality) symbol = (6=), the true (>) and false propositions (\u22a5), and an infinite set of variables. The predicate and constant symbols are written as any sequence of alphanumeric characters beginning with a lower case letter. Variables are written as any sequence of alphanumeric characters beginning with a capital letter. We also assume the standard notion of substitution of variables [13]; i.e., a substitution \u03c3 is a finite and possibly empty set of pairs Y/y where Y is a variable and y is a term.\nThe set of grounded atomic formulas of L is built of a finite set of predicates and objects that characterise the properties of the world relevant to norm monitoring. By a situation, we mean the properties that are true at a particular moment. Some of these properties are static and not altered by action execution, whereas other properties are dynamic and changed due to agent actions. Specifically, we represent static properties as a set3 of atomic grounded formulas of L, denoted by g. A state s is a set of grounded atomic formulas of L, describing dynamic properties which hold on state s. Thus, a situation is built on a \u201cclosed assumption\u201d and defined by a set of static properties g and a state s. Moreover, there is a set of inference rules (O) representing domain knowledge.\nEXAMPLE. In this paper we will use a running example in which there are three robots that should attend requests at six offices in a building. The goal of the robots is to attend these requests as soon as possible. Figure 1a depicts our initial\n3In this paper sets are to be interpreted as the conjunction of their elements.\nar X\niv :1\n50 5.\n03 99\n6v 2\n[ cs\n.M A\n] 2\n1 A\npr 2\n01 6\n2 a b c\nd e f\nr1\nr2 r3\n(a) Initial State s0\na b c\nd e f\nr1r2 r3\n(b) State s1\na b c\nd e f\nr1\nr2\nr3\n(c) State s2\nFig. 1: Example Scenario. Offices are represented by squares, agents are represented by circles and the corridors are represented by arrows. Black arrows correspond to corridors observed by the Norm Monitor (NM) and grey arrows correspond to corridors not observed by the NM.\nscenario. In our example, the language L contains: 4 predicate symbols (robot, office, in, corridor), used to represent the robots and offices, the positions of the robots and the connections between offices in the building; 3 constant symbols to represent the robots (r1, r2, r3); and 6 constant symbols to represent the offices (a, b, c, d, e, f ). The information about the robots, offices and corridors between offices is static and represented as follows:\ng = {robot(r1), robot(r2), robot(r3), office(a), ..., office(f), corridor(a, b), corridor(b, a), ..., corridor(e, a)}\nThe information about the location of the robots is dynamic. Specifically, the initial state s0 is defined as follows:\ns0 = {in(r1, a), in(r2, d), in(r3, e)}\nIn this domain there is an inference rule (O) representing that a robot cannot be in two different offices at the same time:\nO = {{in(R1, OA), in(R1, OB), OA 6= OB} ` \u22a5}\nA. Action Definitions\nD is a finite set of action descriptions that induce state transitions. An action description d is represented using preconditions and postconditions. If a situation does not satisfy the preconditions, then the action cannot be applied in this situation. In contrast, if the preconditions are satisfied, then the action can be applied transforming the current state into a new state in which all negative literals appearing in the postconditions are deleted and all positive literals in the postconditions are added. Moreover, actions are executed in a MAS and, as a consequence, we need to be able to represent concurrent actions with interacting effects. For the sake of simplicity, we will represent concurrent actions without an explicit representation of time4 as proposed in [4]. The main idea beyond this representation is that individual agent actions do interact (i.e., one action might only achieve the intended effect if another action is executed concurrently). Specifically, each action is also represented by a (possibly empty) concurrent\n4An explicit representation of time may play a role on other problems like scheduling concurrent actions, but is not strictly necessary for monitoring the effects of interaction.\ncondition that describes the actions that must (or cannot) be executed concurrently5.\nDefinition 1. An action description d is a tuple \u3008name, pre, con, post\u3009 where: \u2022 name is the action name; \u2022 pre is the precondition, i.e., a set of positive and negative\nliterals of L (containing both dynamic and static properties) as well as equality and inequality constraints on the variables; \u2022 con is the concurrent condition; i.e., a set of positive and negative action schemata6, some of which can be partially instantiated or constrained; \u2022 post is the postcondition; i.e., a set of positive and negative literals of L (containing dynamic properties only).\nGiven an action description d, we denote by pre(d), con(d), post(d) the action precondition, concurrent condition and postcondition.\nEXAMPLE. In our example, there is only one action that can be executed by robots:\u2329\nmove, {robot(R), office(O1), office(O2), in(R,O1), corridor(O1, O2)}, {}, {\u00acin(R,O1), in(R,O2)} \u232a This action represents the movement of a robot from one office to another. The parameters of this action are the robot (R), the source office (O1), the destination office (O2). To execute this action, the robot should be located at the source office and the two offices should be connected. Once the operation has been applied, the robot is no longer at the source office and it is at the destination office.\nDefinition 2. Given a situation represented by the state s and a set of static properties g, and an action description d = \u3008name, pre, con, post\u3009; an action instance (or action) is a tuple \u3008name, pre\u2032, con\u2032, post\u2032\u3009 such that: \u2022 There is a substitution \u03c3 of variables in pre, such that the\nprecondition is satisfied (i.e., entalied by) the situation; i.e., s, g ` \u03c3 \u00b7 pre; \u2022 \u03c3 \u00b7 pre, \u03c3 \u00b7 post are grounded; \u2022 pre\u2032 is a set of grounded literals in \u03c3 \u00b7 pre containing\ndynamic properties only; \u2022 post\u2032 = \u03c3 \u00b7 post and con\u2032 = \u03c3 \u00b7 con.\nGiven an action a, we denote by actor(a) the agent performing the action, and by pre(a), con(a), post(a) the precondition, concurrent condition and postcondition.\nEXAMPLE. In state s0, the robot r1 moves from office a to office b. This is formalised as follows:\u2329\nmove, {robot(r1), office(a), office(b), in(r1, a), corridor(a, b)}, {}, {\u00acin(r1, a), in(r1, b)} \u232a 5A more sophisticated definition of the concurrent condition would allow actions to have conditional effects according to the actions that are executed concurrently. Without loss of expressiveness, we will not consider conditional effects in action descriptions (note that any action with conditional effects can be represented by a set of actions with non conditional effects).\n6An action schema contains an action name and the parameters of this action. Note that positive action schemata are implicitly existentially quantified \u2013i.e., one instance of each positive schema must occur concurrently\u2013 and negative schemata are implicitly universally quantified.\n3 In a MAS, concurrent actions7 define state transitions. More formally, a concurrent action A = {a1, ..., an} is a set of individual actions. Given a set of actions A = {a1, ..., an}, we define pre(A) = \u22c3 pre(ai), post(A) = \u22c3 post(ai) and\nactor(A) = \u22c3 actor(ai).\nGiven a concurrent action A = {a1, ..., an} we say that the concurrent condition of an individual action ai of A is satisfied when for all positive schema in the concurrent condition exists an action aj (i 6= j) in A, such that aj is an instance of the schema; and for all negative schema none of the elements in A is an instance of the schema. For the sake of simplicity, we assume that each agent performs one action at a time8.\nDefinition 3. (Consistency [4]) Given a concurrent action A = {a1, ..., an} it is consistent if: \u2022 pre(A) is consistent (i.e, pre(A) 6` \u22a5); \u2022 post(A) is consistent (i.e, post(A) 6` \u22a5); \u2022 the concurrent condition of each action is satisfied; \u2022 the concurrent action is complete (i.e., each agent per-\nforms one action in A).\nEXAMPLE. The concurrent action A = {move(r1, a, b), move(r2, d, a),move(r3, e, a)}9 is consistent since: \u2022 pre(A) = {in(r1, a), in(r2, d), in(r3, e)} which is con-\nsistent; \u2022 post(A) = {in(r1, b), in(r2, a), in(r3, a),\u00acin(r1, a), \u00acin(r2, d),\u00acin(r3, e)} which is consistent; \u2022 the concurrent conditions of both actions are satisfied; \u2022 each robot performs one action. A concurrent action A = {a1, ..., an} is applicable in a situation if A is consistent and each individual action ai \u2208 A is applicable in this situation.\nGiven a consistent action, we define its effects as the postconditions of its individual actions and the preconditions not invalidated by the postconditions. More formally, given a concurrent action A = {a1, ..., an} its effects are a set of grounded literals as follows:\neff (A) = ( \u22c3\n\u2200pre\u2208pre(A): pre,post(A) 6`\u22a5\npre) \u22c3 ( \u22c3\n\u2200post\u2208post(A)\npost)\nB. Norm Definitions\nWe consider norms as formal statements that define patterns of behaviour by means of deontic modalities (i.e., obligations and prohibitions). Specifically, our proposal is based on the notion of norm as a conditional rule of behaviour that defines under which circumstances a pattern of behaviour becomes relevant and must be fulfilled [21], [29], [19], [11].\nDefinition 4. A norm is defined as a tuple \u3008deontic, condition, action\u3009, where: \u2022 deontic \u2208 {O,P} is the deontic modality of the norm,\ndetermining if the norm is an obligation (O) or prohibition (P);\n7Concurrent action means actions that occur at the same time and does not necessarily imply agent cooperation or coordination.\n8This limitation can be relaxed by decomposing agents into groups of agents corresponding to agents\u2019 actuators [4].\n9For simplicity, we represent actions by their schemata.\n\u2022 condition is a set of literals of L as well as equality and inequality constraints that represents the norm condition, i.e., it denotes the situations in which the norm is relevant. \u2022 action is a positive action schema that represents the action controlled by the norm.\nEXAMPLE. In our example, there is a norm that avoids collisions by forbidding any robot to move into an office when the office is occupied by another robot:\n\u3008P, in(R1, L2),move(R2, L1, L2)\u3009\nThis norm states that when a robot R1 is located in office O2 other robots are forbidden to move from any office L1 to L2.\nIn line with related literature [1], [20], [2], we consider a closed legal system, where everything is considered permitted by default, and obligation and prohibition norms define exceptions to this default permission rule. We also define that a norm is relevant to a specific situation if the norm condition is satisfied in the situation. Besides, we define that a norm condition is satisfied in a given situation when there is a substitution of the variables in the norm condition such that the constraints in the norm condition are satisfied and the positive (vs. negative) literals in the norm condition are true (vs. false) in the situation.\nDefinition 5. Given a specific situation denoted by a state s and a set of static properties g, and a norm \u3008deontic, condition, action\u3009; a norm instance is a tuple \u3008deontic, action\u2032\u3009 such as: \u2022 There is a substitution \u03c3 such that the condition is\nsatisfied in the situation; i.e., s, g ` \u03c3 \u00b7 condition; \u2022 action\u2032 = \u03c3 \u00b7 action. EXAMPLE. In state s0 the norm that forbids robots to move\ninto occupied offices is instantiated as follows:\n\u3008P,move(R2, L1, d)\u3009 where \u03c3 = {L2/d} \u3008P,move(R2, L1, a)\u3009 where \u03c3 = {L2/a} \u3008P,move(R2, L1, e)\u3009 where \u03c3 = {L2/e}\nThe semantics of instances (and norms in general) depends on their deontic modality. An obligation instance is fulfilled when the mandatory action is performed and violated otherwise, while a prohibition instance is violated when the forbidden action is performed and fulfilled otherwise. We classify detected violations (vs. fulfilments) into: identified violations (vs. fulfilment), which refers to when the monitor knows the specific action that an agent executed and violates (vs. fulfils) an instance; and discovered violations (vs. fulfilment), which refers to when the monitor knows that an agent violated (vs. fulfilment) some instance but does not know the forbidden (vs. mandatory) action executed by the agent."}, {"heading": "III. NM INFORMATION MODEL", "text": "Let us assume a set of agents Ag to be monitored, a set of norms N that regulate the actions of agents, and a set D of action descriptions that represent the actions that can be performed by agents. For the sake of simplicity, we assume that there is a single Norm Monitor (NM) that observes the\n4 actions performed by agents and monitors norm compliance10. We also assume that actions are deterministic and that the current state evolves due to action execution only11. The goal of the NM is to analyse a partial sequence of action observations to detect norm violations. The enforcement of norms is out of the scope of this work and we assume that once the NM detects a norm violation (vs. fulfilment), it applies the corresponding sanction (vs. reward).\nA. State Representation As the NM only observes a subset of the actions performed by agents, it has partial information about the state of the world. The NM represents each partial state of the world, denoted by p, using an \u201copen world assumption\u201d as a set of grounded literals that are known in the state. Thus, a partial state contains positive (vs. negative) grounded literals representing dynamic properties known to be true (vs. false) in the state. The rest of dynamic properties are unknown.\nTo begin with, assume that the NM monitor has complete knowledge of the initial state (this will be relaxed later). Thus, at t0 the NM knows which grounded atomic formulas are true or false in the initial state (p0 \u2261 s0). From that moment on, the NM monitors the actions performed by agents at each point in time. At time t0 the NM carries out a monitoring activity and observes some of the actions performed by agents (Act0). These actions have evolved s0 into a new state s1. As previously mentioned, the NM has limited capabilities for observing the actions performed by agents. Thus, it is possible that the NM observes a subset of the actions performed by agents. Specifically, if all actions have been observed (|Act0| = |Ag|), then the resulting partial state p1 can be constructed by considering the effects of actions in Act0 on p0 so p1 \u2261 s1. A different case arises when the NM observes a subset of the actions performed by the agents (|Act0| < |Ag|). In this case, the agent cannot be sure about the effects of unobserved actions. Thus, the new partial state p1 is constructed by assuming that the postconditions of the observed actions must hold on state s1 (i.e., positive postconditions are positive literals in p1 and negative postconditions are negative literals in p1) and the rest of dynamic propositions are unknown. If the NM takes into account the next sequence of actions that it observes at time t1 (Act1), then the NM can also infer that the preconditions of these actions must hold on state s1, and, as a consequence, new propositions can be taken for sure in the partial state p1, retrospectively. Partial states in the general case are defined as:\nDefinition 6. Given a partial state description pt corresponding to time t, and two consecutive sequences of observed actions Actt and Actt+1 executed by agents at times t and t + 1, respectively; the new partial state pt+1 resulting from executing actions Actt in pt and actions Actt+1 in pt+1 is obtained as follows:\npt+1 =\n{ post(Actt) \u22c3 pre(Actt+1) if |Actt| < |Ag|\np\u2217t \u22c3 eff (Actt) \u22c3 pre(Actt+1) otherwise\n10However, our model can be used by a team of monitors as well. 11This assumption could be relaxed if NMs have capabilities for observing\nboth state changes and actions.\nwhere p\u2217t is the set of invariant literals; i.e., literals of pt that have not been modified by the actions in Actt and it is defined as follows:\np\u2217t = \u22c3 \u2200l\u2208pt:\nl,eff (Actt) 6`\u22a5\nl\nEXAMPLE. In our example, the NM knows which grounded atomic formulas are true or false in the initial state:\np0 = {in(r1, a),\u00acin(r1, b),\u00acin(r1, c),\u00acin(r1, d),\u00acin(r1, e), \u00acin(r1, f), in(r2, d),\u00acin(r2, a),\u00acin(r2, b),\u00acin(r2, c), \u00acin(r2, e),\u00acin(r2, f), in(r3, e),\u00acin(r3, a),\u00acin(r3, b), \u00acin(r3, c),\u00acin(r3, d),\u00acin(r3, f)}\nThe NM has some surveillance cameras to monitor the movement of robots in the building. Specifically, the corridors that are monitored are the ones between offices: a and b; b and c; and b and f . These corridors are represented by black arrows in Figure 1, whereas non-monitored corridors are represented by grey arrows. In the initial state (s0) depicted in Figure 1a, the robots execute the actions move(r1, a, b),move(r2, d, a) and move(r3, e, a) resulting in a new state (s1) depicted in Figure 1b. However, the NM only observes the action of robot r1, because this action takes place in a monitored corridor; i.e., Act0 = {move(r1, a, b)}. In the next state s1, the robots execute actions move(r1, b, c),move(r2, a, e) and move(r3, a, b) resulting in a new state (s2) depicted in Figure 1c. In this case the NM observes two actions; i.e., Act1 = {move(r1, b, c),move(r3, a, b)}. Considering these two sets of observed actions the NM is able to infer the dynamic propositions that are known in s1 as follows:\np1 = {in(r1, b),\u00acin(r1, a), in(r3, a)}\nIf the NM uses the information about the states and the observed actions, then no violation of the norm is detected and no robot is sanctioned. However, r2 and r3 have violated the norm, since they have moved into an occupied office through non-monitored corridors.\nB. Action Reconstruction\nNMs use Definition 6 to generate partial state descriptions based on the observed actions. Additionally, we propose that NMs reconstruct the actions that have not been observed. This reconstruction process entails: (i) searching for the actions that have been performed by unobserved agents; and (ii) using the actions found to increase the knowledge about the state of the world. The reconstruction process must be sound, e.g., it cannot indicate that a violation has occurred when it has not in fact occurred. In the following, we introduce full and approximate methods for reconstructing unobserved actions.\n1) Full Reconstruction: Full reconstruction tries to find exhaustively the actions performed by all the agents that have not been observed. To this aim, the full reconstruction performs a search to identify all solutions to the reconstruction problem.\n5 Definition 7. Given a partial state description pt corresponding to time t (named initial state), a set of observed actions Actt at time t, and an partial resulting state pt+1 corresponding to time t + 1 (named final state); we define search as a function that computes sets of solutions S = {S1, ..., Sk} such that each solution Si in S is a set of actions such that: \u2022 the concurrent action Si \u222aActt is consistent; \u2022 the initial state induced by the concurrent action Si\u222aActt\nis consistent (i.e., g, pt, pre(Si \u222aActt),O 6` \u22a5); \u2022 the final state induced by the concurrent action Si\u222aActt\nis consistent (i.e., g, pt+1, post(Si \u222aActt),O 6` \u22a5).\nThus, a solution is a set of actions performed by the agents that have not been observed12 that are consistent with the states of the world before and after the execution of the actions. Given that the NM has a partial knowledge of the states, we do not require that the preconditions (vs. postconditions) of actions in a solution are met in the initial (vs. final) state, since it is possible that the preconditions (vs. postconditions) are true, but the NM is unaware of it.\nEXAMPLE. Given the partial state description p0, the set of observed actions Act0, and the partial resulting state p1, the search function looks for actions of agents r2 and r3 (since they are the agents that have not been observed). According to the initial position of r2, the NM can infer that r2 may have performed two different actions move(r2, d, a) and move(r2, d, e) \u2014these two actions are the only ones consistent with p0. Similarly, the NM can infer that r3 may have performed three different actions move(r3, e, a), move(r3, e, d) and move(r3, e, f) \u2014these three actions are the only ones consistent with p0. However, the actions move(r3, e, d) and move(r3, e, f) are not consistent with the final state \u2014recall that these two actions have as postcondition the fact that r3 is in offices d and f , respectively; that p1 defines that r3 is in office a; and that O defines as inconsistent states where any robot is at two different locations. As a result, the solution set for this problem is defined as:\nS = {{move(r2, d, a),move(r3, e, a)}, {move(r2, d, e),move(r3, e, a)}}\nOnce all solutions are found, the NM uses this information to extend the information about the actions performed by unobserved agents and the state of the world. To ensure that the reconstruction is sound, the NM calculates the intersection of actions in the solutions to select actions it is completely sure about (i.e., actions belonging to all solutions). Given a set of search solutions S = {S1, ..., Sk} for some initial and final states, we define the reconstruction action set as follows:\nR = \u22c2 \u2200Si\u2208S Si\nIf R 6= \u2205, then the NM expands its knowledge about the actions performed by agents and it uses this information to increase the knowledge about the initial and final states. More formally, the set of actions observed in t is updated as:\nActt = Actt \u222aR 12If all actions were observed, no reconstruction would be needed.\nThe initial state pt is updated as follows: pt = pt \u22c3 pre(R)\nFinally, the final state is updated as follows:\npt+1 =\n{ pt+1 \u22c3 post(R) \u22c3 p\u2022t if |Actt| < |Ag|\npt+1 \u22c3 p\u2217t \u22c3 eff (Actt) otherwise\nwhere p\u2217t is defined as before and p \u2022 t is the set of extended invariant literals; i.e., literals in pt that have not been modified since there is not a solution Si \u2208 S such that the concurrent action Si \u222aActt changes any of these literals:\np\u2022t = \u22c3 \u2200l\u2208pt:\n@Si\u2208S:l,post(Actt\u222aSi)6`\u22a5\nl\nEXAMPLE. The reconstruction set for the example is:\nR = {move(r3, e, a)}\nThis action belongs to all solutions, so the NM can be absolutely sure about the performance of this action, even when the NM has not observed it. As a consequence, the NM extends its information as follows:\nAct0 = {move(r1, a, b),move(r3, e, a)}\nand p0 remains unchanged and p1 is updated as follows:\np1 = {in(r1, b),\u00acin(r1, a),\u00acin(r1, c),\u00acin(r1, d),\u00acin(r1, e), \u00acin(r1, f),\u00acin(r2, b),\u00acin(r2, c),\u00acin(r2, f), in(r3, a), \u00acin(r3, b),\u00acin(r3, c),\u00acin(r3, d),\u00acin(r3, e),\u00acin(r3, f)}\nThe main disadvantage of full reconstruction is that, for many real-world problems, the number of candidate solutions that needs to be explored is prohibitively large, as shown later in Section IV. In response to this problem, we provide a polynomial approximation below.\n2) Approximate Reconstruction: Approximate reconstruction includes an approximate search that finds the actions performed by unobserved agents that are consistent with the states of the world before and after action execution. Specifically, approximate reconstruction identifies actions that do not necessarily include the specific actions performed by unobserved agents but that allow the NM to control norms. The main intuition beyond approximate reconstruction is as follows: imagine that at a given initial state an agent can perform just one action and that this action is forbidden (vs. mandatory). In this case, the NM identifies that the agent has violated (vs. fulfilled) a norm. Besides that, if an agent can perform n different actions and all these actions are forbidden (vs. mandatory), the NM does not need to know which action has been executed to conclude that a norm has been violated (vs. fulfilled)13. Hence, we say that a violation has been discovered (instead of identified). Given a set of\n13Note that the propose of this paper is to monitor norms, not to determine whether agents are responsible for norm violations/fulfilments. Monitoring situations where agents can only execute forbidden/obligatory actions can help to detect norm-design problems. Additionally, the fact that an agent can only execute forbidden actions may be explained by the agent putting itself into these illegal situations (e.g., I am allowed to overtake but overtaking may put me in a situation where I can only exceed the speed limit).\n6 prohibition instances P and an action a, we define that the action a is forbidden (denoted by forbidden(P, a)) when \u2203p \u2208 P : \u2203\u03c3 : \u03c3 \u00b7 action(p) = a. Similarly, given a set of obligation instances O and an action a, we define that the action a is mandatory (denoted by mandatory(O, a)) when \u2203o \u2208 O : \u2203\u03c3 : \u03c3 \u00b7 action(o) = a.\nDefinition 8. Given a partial state pt, a set of observed actions Actt at time t, and a partial resulting state pt+1; we define approximate search as a function that calculates the set of all unobserved applicable actions S\u0303 = {ai, ..., an} such that: \u2022 the preconditions of each action in S\u0303 are consistent with\nthe initial state (i.e., \u2200ai \u2208 S\u0303 : g, pt, pre(ai),O 6` \u22a5); \u2022 the postconditions of each action in S\u0303 are consistent with\nthe final state (i.e., \u2200ai \u2208 S\u0303 : g, pt+1, post(ai),O 6` \u22a5); \u2022 actions in S\u0303 are performed by unobserved agents (i.e., actor(S\u0303) \u2229 actor(Actt) = \u2205); \u2022 all unobserved agents perform at least one action in S\u0303 .\nEXAMPLE. Given the partial state description p0, the set of observed actions Act0, and the partial resulting state p1, the approximate search function looks for actions of agents r2 and r3 (since they are the agents that have not been observed). According to the initial position of r2, the NM can infer that r2 may have performed two different actions move(r2, d, a) and move(r2, d, e). Again, r3 may have performed action move(r3, e, a). The approximate solution for this problem is defined as:\nS\u0303 = {move(r2, d, a),move(r2, d, e),move(r3, e, a)}\nAs in full reconstruction, the NM uses approximate search solutions (S\u0303) to expand its knowledge about the actions performed by unobserved agents and to increase the knowledge about the initial and final states. When an unobserved agent may have executed only one action, then the NM knows for sure that this action was executed. More formally, the reconstruction action set is defined as follows:\nR = \u22c3\n\u2200a\u2208S\u0303:6\u2203a\u2032\u2208S\u0303: a 6=a\u2032\u2227actor(a)=actor(a\u2032)\na\nThe set of actions observed in t is updated as:\nActt = Actt \u222aR\nThen the initial state pt is updated as follows: pt = pt \u22c3 pre(R)\nThe final state is updated as follows:\npt+1 =\n{ pt+1 \u22c3 post(R) \u22c3 p\u25e6t if |Actt| < |Ag|\npt+1 \u22c3 p\u2217t \u22c3 eff (Actt) otherwise\nwhere p\u2217t is defined as before and p \u25e6 t is the set of extended invariant literals in pt; i.e., literals that have not been modified since there is not an observed action or an applicable action that changes them:\np\u25e6t = ( \u22c3 \u2200l\u2208pt:\nl,post(Actt)6`\u22a5\nl )\u22c2( \u22c3 \u2200l\u2208pt:\nl,post(S\u0303)6`\u22a5\nl\n)\nFinally, the set of discovered violations and fulfilments is a set of actions defined as follows:\nD = {a1, ..., aj}\nwhere for each action ai in D: ai is in S\u0303 and the agent that performs ai (i.e., actor(ai) ) is: \u2022 able to execute more than one action (i.e., \u2203aj \u2208 S\u0303 : ai 6= aj \u2227 actor(ai) = actor(aj));\n\u2022 only able to execute forbidden (vs. mandatory) actions and ai is one of these forbidden (vs. mandatory) actions; When an agent is only able to perform forbidden (vs. mandatory) actions, an action among these can be selected according to various criteria. For example, in a normative system where the presumption of innocence principle holds, the NM should assume that the agent has violated (vs. fulfilled) the least (vs. most) important norm and the action that violates (vs. fulfils) this norm is selected. Note discovering violations is very useful in many practical applications, in which it would allow the NM to ban offender agents (e.g., Intrusion Detection/Prevention Systems [3]), to stop the execution of any offender agent (e.g., Business Process Compliance monitoring [27]), or to put offender agents under close surveillance (e.g., ModelBased Diagnosis Systems [22]), even when the specific action performed ins not known.\nEXAMPLE. In case of the approximate reconstruction, r3 is only able to perform one action, which entails that the NM can be absolute sure about the performance of this action and the reconstruction set is defined as:\nR = {move(r3, e, a)}\nAs a consequence, the NM extends its information as follows:\nAct0 = {move(r1, a, b),move(r3, e, a)}\np0 remains unchanged and p1 is updated as follows:\np1 = {in(r1, b),\u00acin(r1, a),\u00acin(r1, c),\u00acin(r1, d),\u00acin(r1, e), \u00acin(r1, f),\u00acin(r2, b),\u00acin(r2, c),\u00acin(r2, f), in(r3, a), \u00acin(r3, b),\u00acin(r3, c),\u00acin(r3, d),\u00acin(r3, e),\u00acin(r3, f)}\nIn this situation, r2 is only able to execute forbidden actions \u2014recall that the instances \u3008P,move(R2, L1, a)\u3009 and \u3008P,move(R2, L1, e)\u3009 forbid any robot to move into offices a and e and that r2 may have been executed actions move(r2, d, a) and move(r2, d, e). Thus, the set of discovered violations and fulfilments is defined as follows:\nD = {move(r2, d, e)}\nnote that the discovered violation does not correspond to the action executed by r2, however, it allows the NM to determine that r2 must have violated an instance.\nC. Norm Monitoring\nOnce all the information about the actions performed by the agents and the partial states has been reconstructed, the NM checks the actions of agents to determine which instances have been violated or fulfilled. Recall that norms in our model are defined as conditional rules that state which actions\n7 are obligatory or forbidden. Given that the NM has partial knowledge about the state of the world, the NM should control norms only when it is completely sure that the norms are relevant to ensure that the norm monitoring process is sound. In particular, we define that a norm is relevant to a partial situation when the norm condition is satisfied by the partial situation \u2014i.e., a norm \u3008deontic, condition, action\u3009 is relevant to a partial situation represented by a partial state p, the static properties g and the domain knowledge O if \u2203\u03c3 such that p, g,O ` \u03c3 \u00b7 condition.\nEXAMPLE. In state p0 the norm that forbids robots to move into occupied offices is instantiated three times as follows:\n\u3008P,move(R2, L1, d)\u3009 where \u03c3 = {L2/d} \u3008P,move(R2, L1, a)\u3009 where \u03c3 = {L2/a} \u3008P,move(R2, L1, a)\u3009 where \u03c3 = {L2/e}\nOnce the NM has determined which norm instances hold in a given situation, it has to check the actions of agents to determine which instances have been violated and which ones have been fulfilled.\nObligation Instance. In presence of partial knowledge about the actions performed by agents, the NM can only determine that an obligation instance has been fulfilled. If the NM knows all the actions performed by agents, then it can determine whether an obligation has been fulfilled or violated.\nDefinition 9. Given an obligation instance \u3008O, action\u2032\u3009 and a set of observed actions Act, then the obligation is defined as: fulfilled iff \u2203\u03c3 : \u03c3 \u00b7 action \u2032 \u2208 Act violated iff ( 6 \u2203\u03c3 : \u03c3 \u00b7 action\u2032 \u2208 Act) \u2227 |Act| = |Ag| unknown otherwise\nProhibition Instance. In presence of partial knowledge about the actions performed by agents, the NM can only determine that a prohibition instance has been violated. If the NM knows all the actions performed by agents then it can determine whether a prohibition has been fulfilled or violated.\nDefinition 10. Given a prohibition instance \u3008P, action\u2032\u3009 and a set of observed actions Act, then the prohibition is defined as: violated iff \u2203\u03c3 : \u03c3 \u00b7 action \u2032 \u2208 Act fulfilled iff ( 6 \u2203\u03c3 : \u03c3 \u00b7 action\u2032 \u2208 Act) \u2227 |Act| = |Ag| unknown otherwise\nFinally, the set of discovered violations and fulfilments is used to identify those agents that have violated or fulfilled an instance.\nEXAMPLE. Taking into account the set of actions Act0, the NM can identify that robot r3 has violated the instance \u3008P,move(R2, L1, a)\u3009, even though this forbidden action has not been observed by the NM. Specifically, there is \u03c3 = {R2/r3, L1/e} such that \u03c3(move(R2, L1, a)) \u2208 Act0. Besides that, the approximate reconstruction discovers that robot r2 has violated a prohibition instance though it doe snot know the exact action performed\u2014recall that D =\n{move(r2, d, e)}. Had the NM not performed the proposed reconstruction processes, none of these violations would have been detected."}, {"heading": "IV. NM ALGORITHMS", "text": "Algorithm 1 contains the NM pseudocode. In each step, the NM observes the actions of agents and uses this information to update the current and the previous partial states (lines 4- 9). If all the actions have not been observed in the previous state, then the NM executes the reconstruction function to reconstruct unobserved actions (lines 11-14). Then, the checkNorms function is executed to determine which norms have been violated and fulfilled in the previous state (line 15) according to Definitions 9 and 10.\nNote that the NM code can be executed while actions are performed without delaying agents. Regarding the temporal cost of the algorithm executed by NMs, it is determined by the cost of the reconstruction function, the implementations of which (full and approximate) are discussed below.\nAlgorithm 1 NM Algorithm Require: Ag,N,D,O, g\n1: p0 = \u2205 . p0 is an empty conjunction of literals 2: t\u2190 0 3: while true do 4: Actt \u2190 observeActions() 5: if |Actt| < |Ag| then 6: pt+1 \u2190 post(Actt) 7: else 8: pt+1 \u2190 p\u2217t \u2227 eff (Actt)\n9: pt \u2190 pt \u2227 pre(Actt)\n10: if t > 0 then 11: if |Actt\u22121| < |Ag| then 12: TA\u2190 Ag \\ actors(Actt\u22121) . Target Agents 13: D \u2190 \u2205 . Discovered violations and fuflilments 14: reconstruction(pt\u22121, pt, Actt\u22121, TA,D)"}, {"heading": "15: checkNorms(pt\u22121, Actt\u22121)", "text": ""}, {"heading": "16: t\u2190 t+ 1", "text": "Full Reconstruction (Algorithm 2). This pseudocode corresponds to the full reconstruction function. This function calls the function search to search the actions of target agents (line 2). Then, for all the solutions found, the NM checks if they are consistent according to Definition 7 (lines 4-6). Finally, consistent solutions are used to extend the set of observed actions and the knowledge about the initial and final states (lines 7-14). The temporal cost of this algorithm is given by the cost of the search function discussed below.\nAlgorithm 3 contains the pseudocode of the recursive search function that computes all the sequences of consistent actions that may have been executed by the agents that have not been observed. It starts by checking that there is at least one target agent (line 2). If so, it identifies all actions that might have been executed by one target agent (lines 3- 4). An action might have been executed if it is consistent according to the static properties, the domain knowledge, and the initial and final states. For each consistent action, it reconstructs the actions of the remaining agents recursively (lines 5-13). In the worst case, the temporal cost of this\n8 Algorithm 2 Full Reconstruction Function 1: function FULLRECONSTRUCTION(i, f, Act, TA,D) 2: S \u2032 \u2190 search(i, f, Act, TA) . Candidate Solutions 3: S \u2190 \u2205 . Consistent Solutions 4: for all Sj \u2208 S \u2032 do 5: if checkSolutionConsistency(Act, Sj , i, f) then 6: S \u2190 S \u222a Sj 7: R\u2190 \u22c2 \u2200Si\u2208S Si\n8: if R 6= \u2205 then 9: Act\u2190 Act \u222aR 10: i\u2190 i \u2227 pre(R) 11: if |Act| < |Ag| then 12: f \u2190 f \u2227 post(R) \u2227 i\u2022 13: else 14: f \u2190 i\u2217 \u2227 f \u2227 eff (Act)\nfunction is O(|Ag||D|\u00d7ID ), where Ag is the set of agents, D is the set of action descriptions and ID is the maximum number of instantiations per action. This situation arises when no action is observed and all actions are applicable for all agents.\nAlgorithm 3 Search Function 1: function SEARCH(i, f, Act, TA) 2: if TA 6= \u2205 then 3: for all d \u2208 D do . Identify consistent actions 4: if \u2203\u03c3 : checkActionConsitency(\u03c3 \u00b7 d, i, f) \u2227 actor(\u03c3 \u00b7 d) \u2208 TA then\n5: \u03b1 = actor(\u03c3 \u00b7 d) 6: i\u2032 \u2190 i \u2227 pre(\u03c3 \u00b7 d)\n7: f \u2032 \u2190 f \u2227 post(\u03c3 \u00b7 d) 8: Act\u2032 \u2190 Act \u222a \u03c3 \u00b7 d 9: TA\u2032 \u2190 TA \\ {\u03b1}\n10: S \u2190 search(i\u2032, f \u2032, Act\u2032, TA\u2032) 11: for all Si \u2208 S do 12: Si \u2190 Si \u222a \u03c3 \u00b7 d 13: return S 14: else 15: return \u2205\nApproximate Reconstruction Function (Algorithm 4). This function calls the function ApproximateSearch to search the applicable actions per each target agent (line 2). Then, the list of applicable actions per each agent is checked (lines 3-12). Specifically, if an agent may have executed one action only, then the NM knows that this action was executed and it updates the reconstructed action set (lines 3-5). Then, the set of observed actions and the knowledge about the initial and final states is updated (lines 6-12). Finally, discovered violations and fulfilments are calculated (lines 14-19). The temporal cost of this algorithm is given by the cost of the ApproximateSearch function discussed below.\nAlgorithm 5 contains the pseudocode of the ApproximateSearch function. It starts by initialising the list of applicable actions per agent (lines 3-4). Then it calculates the set of instances that are relevant to the initial state (line 7). The function calculates per each target agent the list of applicable actions that it may have executed (lines 9-11). Then, the list of applicable actions per each agent is checked (lines 12-18). Specifically, if an agent may have executed one action only, then the NM knows that this action\nwas executed and it updates the list of applicable actions, the initial and final states, and retracts the agent from the target agents (lines 14-17). This process is repeated until there are no more target agents or the initial and final states remain unchanged. Then the set of instances that are relevant to the initial state is calculated (line 13). Finally, the list of applicable actions per agent is updated with actions of remaining target agents (lines 19-20). The temporal cost of this function is O(|Ag|2 \u00d7 |D| \u00d7 ID).\nAlgorithm 4 Approximate Reconstruction Function 1: function APPROXIMATERECONSTRUCTION(i, f, Act, TA,D) 2: S\u0303 \u2190 approximateSearch(i, f, Act, TA) 3: for all \u03b1 \u2208 TA do 4: if |S\u0303\u03b1| = 1 then 5: R\u2190 R \u222a S\u03b1 6: if R 6= \u2205 then 7: Act\u2190 Act \u222aR 8: i\u2190 i \u2227 pre(R)\n9: if |Act| < |Ag| then 10: f \u2190 f \u2227 post(R) \u2227 i\u25e6 11: else 12: f \u2190 i\u2217 \u2227 f \u2227 eff (Act) 13: O,P \u2190 calculateInstances(i) 14: for all \u03b1 \u2208 TA do 15: if |S\u0303\u03b1| > 1 then 16: if 6 \u2203a \u2208 S\u0303\u03b1 : \u00acforbidden(P, a) then 17: D \u2190 D \u222a a . a is an action from S\u0303\u03b1 18: else if 6 \u2203a \u2208 S\u0303\u03b1 : \u00acmandatory(O, a) then 19: D \u2190 D \u222a a . a is an action from S\u0303\u03b1\nAlgorithm 5 Approximate Search Function 1: function APPROXIMATESEARCH(i, f, Act, TA) 2: continue\u2190 true 3: for all \u03b1 \u2208 TA do 4: S\u0303\u03b1 \u2190 \u2205 . List of approximate actions per agent 5: while continue \u2227 TA 6= \u2205 do 6: continue\u2190 false 7: for all \u03b1 \u2208 TA do 8: L\u03b1 \u2190 \u2205 9: for all d \u2208 D do 10: if \u2203\u03c3 : checkActionConsitency(\u03c3 \u00b7 d, i, f) \u2227 actor(\u03c3 \u00b7 d) \u2208 TA then 11: Lactor(\u03c3\u00b7d) \u2190 Lactor(\u03c3\u00b7d) \u222a \u03c3 \u00b7 d 12: for all \u03b1 \u2208 TA do 13: if |L\u03b1| = 1 then 14: S\u0303\u03b1 \u2190 L\u03b1 15: i\u2190 i \u2227 pre(L\u03b1)\n16: f \u2190 f \u2227 post(L\u03b1) 17: TA\u2190 TA \\ {\u03b1} 18: continue\u2190 true 19: for all \u03b1 \u2208 TA do 20: S\u0303\u03b1 \u2190 L\u03b1 21: return S\u0303"}, {"heading": "V. EVALUATION", "text": "This section compares the performance of a NM with full reconstruction, a NM with approximate reconstruction and a traditional norm monitor \u2014which is the method used in the majority of previous proposals [6], [23], [14], [24], [8]\u2014 that only considers the observed actions to detect violations; with\n9 respect to their capabilities to monitor norm compliance. We have evaluated our proposal in a case study, which allows us to contextualise the results and to give a meaningful interpretation to them; and in a series of random experiments, which allow us to evaluate our proposal under a wide range of different situations and parameter values.\nA. Case Study\nWe implemented in Java a simulator of the paper example in which robots attend requests in offices connected through corridors. Compliance with the collision avoidance norm is controlled by a monitor that observes surveillance cameras. In each simulation, we generate corridors and cameras randomly. In each step of the simulation, each robot chooses randomly one applicable action to be executed. The simulation is executed 100 steps and repeated 100 times to support the findings. We conducted experiments in which the number of offices O took a random value within the J3, 500K interval and the number of robots R took a random value within the J2, 250K interval. Besides that, to be able to compare with the full NM, we also considered small scenarios only, in which the number of offices O takes a random value within J3, 10K and the number of robots R takes a random value within J2, 5K, as the full reconstruction has an exponential cost and it is intractable for most of the cases with the default intervals.\n1) Action Observability: To analyse the performance and scalability of monitors with respect to their capabilities to observe actions, we defined the number of corridors C as a random value within the JO,O \u00d7 (O \u2212 1)K interval and varied the ratio of cameras to corridors (action observability). Table I shows the percentage of violations detected per each type of monitor. The higher the ratio of cameras, the more actions are observed and the better the performance of all monitors. Moreover, the approximate NM offers on average a 39% performance improvement over a traditional monitor (i.e., it identifies 16% more violations plus a further 24% of discovered violations). That is, an approximate NM outperforms a traditional monitor with the same capabilities to observe actions. When compared to full NM in small scenarios (O \u2208 J3, 10K and R \u2208 J2, 5K), approximate NM performs similarly. This is explained by the fact that there is a single norm in this scenario, actions have no concurrency conditions, and the preconditions and postconditions of actions are disjoint. In this circumstances, the approximate reconstruction process reconstructs actions similarly to the full reconstruction14.\n14Note that full reconstruction does not guarantee completeness.\n2) Action Instantiations: To analyse the performance and scalability of monitors with respect to agent capabilities to execute actions (i.e., the number of instantiations per action), we varied the ratio of corridors15 (e.g., a ratio of 0% means C = O) and defined the number of cameras as a random value within the J0, CK interval. Table II shows the results of this experiment. The approximate NM offers on average a 43% performance improvement over a traditional monitor (i.e., it identifies 29% more violations plus a further 14% of discovered violations). That is, given the same number of possible instantiations per action, an approximate NM outperforms a traditional monitor. Besides, we can see that, as in the previous experiment, the approximate NM performs similarly to the full NM. In particular, when the ratio of corridors is higher than 0%, agents are capable of executing different actions and the reconstruction process becomes more complex, which decreases the performance of full and approximate NMs. However, full and approximate NMs noticeably outperform the traditional monitor regardless of the ratio of corridors.\nB. Random Experiments\nWe implemented a simulator in Java in which there is a set of agents that perform actions in a monitored environment as defined below. In particular, our simulator does not model a specific scenario; rather it creates a different scenario in each simulation (i.e., generating randomly agent capabilities, the environment properties, actions and norms). As in the previous experiments, we have considered big and small scenarios. In particular, the number of agents G in small scenarios took a random value within the J1, 5K interval, whereas in big scenarios G took a random value within the J1, 500K interval. The number of actions A took a random value within the J1, 50K interval. Again, the simulation is executed 100 steps and repeated 1000 times to ensure that the values of the simulation parameters range over possible values16.\nAgent Definition. We modelled different types of agents with different capabilities to perform actions. In particular, the set of actions available to each agent depends on the function/s assumed by each agent in a particular simulation. To model these capabilities, a set of roles is created at the beginning of each simulation. Specifically, the number of roles created took a random value within the J1, AK interval. For each role a subset of the actions are randomly selected as the role capabilities; i.e., all agents enacting this role are able to\n15Recall that C takes values within the JO,O \u00d7 (O \u2212 1)K interval. 16Note that in the random experiments there are more simulation parameters than in the case-study simulator and a higher number of repetitions is required to support the findings.\n10\nperform these actions17. To avoid that all roles have similar capabilities, which would lead to simulations populated by homogeneous agents, the number of actions selected as role capabilities took a random value within the J1, d0.1 \u2217 AeK interval (i.e., at maximum each role is capable of performing a 10% of the actions). At the beginning of each simulation, each agent is defined as enacting a random subset of the roles. In each step of the simulation, each agent selects randomly one action among the available actions that it can execute in the current state.\nEnvironment Definition. In the simulator, the environment is described in terms of different situations or states of affairs that can be true or false. Each one of these states of affairs is represented by a grounded proposition. Thus, the state of the environment is defined in terms of a set of propositions. For simplicity, we assumed that these propositions are independent (i.e, propositions are not logically related). In our simulations, the number of propositions P took a random value within the JA, 2 \u2217 AK interval (i.e., there is at least one proposition per each action18). Besides that, there is a set of grounded atomic formulas describing the roles played by agents and the actions that can be performed by each role. The relationship between agents and roles is formally represented by a binary predicate (play). Specifically, the expression play(g, r) describes the fact that the agent identified by g enacts the role identified by r. Similarly, relationship between roles and actions is formally represented by a binary predicate (capable). Specifically, the expression capable(a, r) describes the fact that agents enacting role r are capable of performing the action identified by a. For simplicity, we assume that the roles enacted by the agents and the role capabilities are static properties of the environment.\nAction Definition. Actions allow agents to change the state of the environment. At the beginning of each simulation, a set of actions is randomly generated. For each action \u3008name, pre, con, post\u3009 the elements are defined as follows: name is initialised with a sequential identifier a; pre is defined as {play(A,R), capable(R, a), p1, ..., pn} where the elements p1, ..., pn are randomly selected from the proposition set; con is defined as {a1(A1, R1), ..., am(Am, Rm)}, where each ai is an action randomly selected from the action set such that ai 6= a and Ai, Ri are free variables representing the agent performing the action and the role capable of performing this action, respectively; and post is defined as {p1, ..., pk} where each pi is a proposition randomly selected from the proposition set. To avoid that actions have too many constraints, which would be unrealistic and make actions to be only executed on few situations, the number of propositions in pre and post takes a random value within the J1, d0.1 \u2217 P eK interval. Similalry, the number of actions in con takes a random value within the J0, d0.1 \u2217AeK interval.\nBesides these actions, a NOP action, which has no effect on the environment, was created. To maximise the number of actions executed in the simulations, which may entail more violations and fulfilments, we defined that the NOP action can only be executed by agents when none of their\n17This condition has been formulated in action preconditions as explained below.\n18Note that an action can change the truth value of several propositions.\navailable actions can be executed. However, similar results would have been obtained if this condition was relaxed19. Our simulator models scenarios where the NOP action can always be observed. This is the case in many real domains such as Intrusion Detection Systems or Autonomous Systems, where it it not always possible to analyse the data (e.g., the packages) sent by agents (e.g., hosts) to infer the actions performed, but it is always possible to know which agents have performed an action (i.e., which agents have sent packages).\nNorm Definition. Agents\u2019 actions are regulated by a set of norms. At the beginning of each simulation, a set of norms is randomly created. In particular the number of norms took a random value within the J1, AK (i.e., there is at maximum one norm per each action). For each action \u3008deontic, condition, action\u3009 the elements are defined as follows: deontic is randomly initialised with a deontic operator; condition is defined as {p1, ..., pk} where each pi is a proposition randomly selected from the proposition set; and action is randomly initialised with an action. To allow norms to be instantiated, the number of propositions in condition takes a random value within the J0, dP \u2217 0.1eK interval.\n1) Action Observability: To analyse the performance and scalability of monitors with respect to their capabilities to observe actions, we varied the observation probability. Tables III and IV show the percentage of detected fulfilments and violations, respectively. Again, the approximate NM offers a significant performance improvement over a traditional monitor; i.e., the approximate NM offers on average a 74% performance improvement over a traditional monitor. When compared to full NM in small scenarios (A \u2208 J1, 50K and G \u2208 J1, 5K), the full NM offers on average a 21% performance improvement over an approximate NM. This is explained by the fact that this experiment is more complex than the case study; i.e., there are several norms (both prohibition and obligation norms), actions have concurrent conditions and actions may have conflicting preconditions and postconditions (i.e., conditions that are defined over the same propositions). Note that the traditional monitor detects violations and fulfilments even when the observation probability is 0%. These detections correspond to situations in which none of the agents can execute any action (i.e., all agents execute the NOP action) which leads to the fulfilment of prohibition instances and the violation of obligation instances. This phenomenon is more frequent in case of small scenarios since the lower the number of agents, the higher the probability that all agents cannot execute any action.\n2) Action Possibilities: To analyse the performance and scalability of monitors with respect to agent capabilities to execute actions (i.e., the number of available actions), we defined the observation probability as a random value within the [0, 100%] interval and we varied the number of actions. Tables V and VI show the percentage of detected fulfilments and violations, respectively. In this experiment, the more actions, the more complex the reconstruction problem is. As a consequence, the improvement offered by an approximate\n19Note that the capabilities of monitors to detect violations and fulfilments do not depend on the fact that agents are allowed to perform the NOP action in any situation.\n11\nNM over a traditional monitor decreases as the number of actions increases. However, the approximate NM still offer on average a 56% performance improvement over a traditional monitor. When the number of actions is very high (e.g., when the number of actions is 128 in small scenarios), then action preconditions become very complex and most of the times the NOP action is executed by all agents, which entails that the all monitors obtain a good performance. We can see that, as in the previous experiment, the approximate NM performs slightly worse than the full NM (i.e., the full NM offers on average a 15% performance improvement over an approximate NM). However, full and approximate NMs noticeably outperform the traditional monitor regardless of the number of actions.\nC. Summary\nThe conclusions of our evaluation are threefold: 1) Both approximate and full reconstruction processes are\nmore effective (i.e., detect more norm violations and fulfilments) than traditional monitoring approaches regardless of the scenario complexity (i.e., action possibilities\nand observability). Both in the case study and in the random experiments our algorithms improved significantly the percentage of violations and fulfilments detected. 2) Approximate reconstruction is slighting less effective than full reconstruction. In the case study, where a single prohibition norm was monitored; the approximate NM obtained almost the same results as the full NM. In our random experiments, where several prohibition and obligation norms were monitored, the full NM offered an average improvement of a 18% over an approximate NM. 3) Approximate reconstruction is scalable with the scenario size (i.e., the number of agents and actions to be monitored). In particular, our experiments demonstrate that the approximate algorithm can be used to monitor a large number of agents (we simulated scenarios with up to 500 agents), actions (we simulated scenarios with up to 128 actions), and norms (we simulated scenarios with up to 128 norms)."}, {"heading": "VI. RELATED WORK", "text": "Previous work on norms for regulating MAS proposed control mechanisms for norms to have an effective influence on agent behaviours [15]. These control mechanisms are classified into two main categories [15]: regimentation mechanisms, which make the violation of norms impossible; and enforcement mechanisms, which are applied after the detection of norm violations and fulfilments, reacting upon them.\nRegimentation mechanisms prevent agents from performing forbidden actions (vs. force agents to perform obligatory actions) by mediating access to resources and the communication channel, such as Electronic Institutions (EIs) [12]. However, the regimentation of all actions is often difficult or impossible. Furthermore, it is sometimes preferable to allow agents to make flexible decisions about norm compliance [7]. In response to this need, enforcement mechanisms were developed. Proposals on the enforcement of norms can be classified according to the entity that monitors whether norms are fulfilled or not. Specifically, norm compliance can be monitored by either agents themselves or the underlying infrastructure may provide monitoring entities.\nRegarding agent monitoring, this approach is characterized by the fact that norm violations and fulfilments are monitored by agents that are involved in an interaction [30], [9], or other agents that observe an interaction in which they are not directly involved [28], [10], [32]. The main drawback of proposals based on agent monitoring is the fact that norm monitoring and enforcement must be implemented by agent programmers.\nRegarding infrastructural monitoring, several authors proposed developing entities at the infrastructure level that are in charge of both monitoring and enforcing norms. Cardoso & Oliveira [6] proposed an architecture in which the monitoring and enforcement of norms is made by a single institutional entity. This centralized implementation represents a performance limitation when dealing with a considerable number of agents. To address the performance limitation of centralized approaches, distributed mechanisms for an institutional enforcement of norms were proposed in [23], [14], [24], [8].\n12\nAll of the aforementioned proposals on monitoring assume that monitors have complete observational capabilities. Exception to these approaches is the recent work of Bulling et al. [5] and Alechina et al. [2]. In [5], the partial observability problem is addressed combining different norm monitors to build ideal monitors (i.e., monitors that together are able to detect the violation of a given set of norms). In [2], the authors propose to synthesise an approximate set of norms that can be monitored given the observational capabilities of a monitor. However, there are circumstances in which norms cannot be modified (e.g., contract and law monitoring) or ideal monitors are expensive and/or not feasible. We take a different approach in which norms and monitors\u2019 observation capabilities remain unchanged and monitors reconstruct unobserved actions.\nOur approach is also related to planning, where methods (e.g., POMDPs [18]) for choosing optimal actions in partially observable environments have been proposed. A major difference between these proposals and our proposal is that NMs do not perform practical reasoning, i.e., they do not try to optimise or achieve a practical goal. Instead, NMs perform both deductive and abductive reasoning [25] to reason from observed actions to reach a conclusion about the state of the world, and to infer unobserved actions."}, {"heading": "VII. CONCLUSION", "text": "In this paper, we propose information models and algorithms for monitoring norms under partial action observability by reconstructing unobserved actions from observed actions using two different reconstruction processes: full and approximate. Our experiments demonstrate that both reconstruction processes detect more norm violations than traditional monitoring approaches. Approximate reconstruction performs slightly worse than full reconstruction, whereas its computational cost is much cheaper, making it suitable to be applied in practice.\nThe reconstruction algorithms proposed in this paper can be applied to several domains that require action monitoring; from normative MAS [31], to intrusion detection systems [16], to control systems [26] and to intelligent surveillance systems [17]. As future work, we plan to investigate domain-dependent approximations that could speed up action reconstruction even further."}], "references": [{"title": "Reasoning about normative update", "author": ["N. Alechina", "M. Dastani", "B. Logan"], "venue": "In Proc. of IJCAI,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Norm approximation for imperfect monitors", "author": ["N. Alechina", "M. Dastani", "B. Logan"], "venue": "In Proc. of AAMAS,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Intrusion detection systems and multisensor data fusion", "author": ["T. Bass"], "venue": "Communications of the ACM,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2000}, {"title": "Partial-order planning with concurrent interacting actions", "author": ["C. Boutilier", "R.I. Brafman"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2001}, {"title": "Monitoring norm violations in multi-agent systems", "author": ["N. Bulling", "M. Dastani", "M. Knobbout"], "venue": "In Proc. of AAMAS,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Institutional reality and norms: Specifying and monitoring agent organizations", "author": ["H. Cardoso", "E. Oliveira"], "venue": "International Journal of Cooperative Information Systems,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2007}, {"title": "Formalising the informal? Dynamic social order, bottom-up social control, and spontaneous normative relations", "author": ["C. Castelfranchi"], "venue": "Journal of Applied Logic,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2003}, {"title": "Manea: A distributed architecture for enforcing norms in open mas", "author": ["N. Criado", "E. Argente", "P. Noriega", "V. Botti"], "venue": "Engineering Applications of Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Evidence-based electronic contract performance monitoring", "author": ["A. Daskalopulu", "T. Dimitrakos", "T. Maibaum"], "venue": "Group Decision and Negotiation,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2002}, {"title": "A multiagent network for peer norm enforcement", "author": ["A.P. de Pinninck", "C. Sierra", "W.M. Schorlemmer"], "venue": "Journal of Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "Autonomous agents with norms", "author": ["F. Dignum"], "venue": "Artificial Intelligence and Law,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1999}, {"title": "An agent-based middleware for electronic institutions", "author": ["M. Esteva", "B. Rosell", "J.A. Rodr\u0131\u0301guez-Aguilar", "J.L. Arcos. Ameli"], "venue": "In Proc. of AAMAS,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2004}, {"title": "First-order logic and automated theorem proving", "author": ["M. Fitting"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1996}, {"title": "Distributed norm management in regulated multiagent systems", "author": ["D. Gaertner", "A. Garcia-Camino", "P. Noriega", "J.-A. Rodriguez-Aguilar", "W. Vasconcelos"], "venue": "In Proc. of AAMAS,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}, {"title": "Ubi lex, ibi poena: Designing norm enforcement in e-institutions", "author": ["D. Grossi", "H. Aldewereld", "F. Dignum"], "venue": "In COIN II,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2007}, {"title": "Adaboost-based algorithm for network intrusion detection", "author": ["W. Hu", "S. Maybank"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2008}, {"title": "Multitarget visual tracking based effective surveillance with cooperation of multiple active cameras", "author": ["C.-M. Huang", "L.-C. Fu"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B: Cybernetics,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Planning and acting in partially observable stochastic domains", "author": ["L.P. Kaelbling", "M.L. Littman", "A.R. Cassandra"], "venue": "Journal of Artificial Intelligence,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1998}, {"title": "dInverno. A normative framework for agent-based systems", "author": ["F. L\u00f3pez y L\u00f3pez", "M. Luck"], "venue": "Computational & Mathematical Organization Theory,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2006}, {"title": "On the logical foundations of moral agency", "author": ["E. Lorini"], "venue": "In Deontic Logic in Computer Science,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Applying electronic contracting to the aerospace aftercare domain", "author": ["F. Meneguzzi", "S. Modgil", "N. Oren", "S. Miles", "M. Luck", "N. Faci"], "venue": "Engineering Applications of Artificial Intelligence,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "On-line monitoring and diagnosis of multi-agent systems: a model based approach", "author": ["R. Micalizio", "P. Torasso", "G. Torta"], "venue": "In Proc. of ECAI,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2004}, {"title": "Law-governed interaction: a coordination and control mechanism for heterogeneous distributed systems", "author": ["N. Minsky", "V. Ungureanu"], "venue": "ACM Transactions on Software Engineering and Methodology,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2000}, {"title": "A framework for monitoring agent-based normative systems", "author": ["S. Modgil", "N. Faci", "F. Meneguzzi", "N. Oren", "S. Miles", "M. Luck"], "venue": "In Proc. of AAMAS,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2009}, {"title": "Approaches to abductive reasoning: an overview", "author": ["G. Paul"], "venue": "Journal of Artificial Intelligence Review,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1993}, {"title": "Guest editorial: Introduction to the special issue on resilient control architectures and systems", "author": ["C. Rieger", "D. Scheidt", "W. Smart"], "venue": "IEEE Transactions on Cybernetics,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1994}, {"title": "Modeling control objectives for business process compliance", "author": ["S. Sadiq", "G. Governatori", "K. Namiri"], "venue": "In Business process management,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2007}, {"title": "Emergence of norms through social learning", "author": ["S. Sen", "S. Airiau"], "venue": "In Proc. of IJCAI,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2007}, {"title": "Resolving conflict and inconsistency in norm-regulated virtual organizations", "author": ["W. Vasconcelos", "M.J. Kollingbaum", "T.J. Norman"], "venue": "In Proceedings of the 6th international joint conference on Autonomous agents and multiagent systems,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2007}, {"title": "Verifying compliance with commitment protocols", "author": ["M. Venkatraman", "M. Singh"], "venue": "Journal of Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1999}, {"title": "Collective learning for the emergence of social norms in networked multiagent systems", "author": ["C. Yu", "M. Zhang", "F. Ren"], "venue": "IEEE Transactions on Cybernetics,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2014}, {"title": "Resilient distributed control in the presence of misbehaving agents in networked control systems", "author": ["W. Zeng", "M.-Y. Chow"], "venue": "IEEE Transactions on Cybernetics,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2014}], "referenceMentions": [{"referenceID": 18, "context": "Within the Multi-agent System (MAS) area, norms are understood as means to coordinate and regulate the activity of autonomous agents interacting in a given social context [19].", "startOffset": 171, "endOffset": 175}, {"referenceID": 0, "context": "In the existing literature, several authors have proposed infrastructures to observe agent actions and detect norm violations upon them [1], [21].", "startOffset": 136, "endOffset": 139}, {"referenceID": 20, "context": "In the existing literature, several authors have proposed infrastructures to observe agent actions and detect norm violations upon them [1], [21].", "startOffset": 141, "endOffset": 145}, {"referenceID": 4, "context": "Very recent work on norm monitoring under partial action observability proposes solutions to ensure complete action observability by increasing the actions that are observed, either by adding more monitors [5] or by adapting the norms to what can be observed [2].", "startOffset": 206, "endOffset": 209}, {"referenceID": 1, "context": "Very recent work on norm monitoring under partial action observability proposes solutions to ensure complete action observability by increasing the actions that are observed, either by adding more monitors [5] or by adapting the norms to what can be observed [2].", "startOffset": 259, "endOffset": 262}, {"referenceID": 12, "context": "We also assume the standard notion of substitution of variables [13]; i.", "startOffset": 64, "endOffset": 68}, {"referenceID": 3, "context": "For the sake of simplicity, we will represent concurrent actions without an explicit representation of time4 as proposed in [4].", "startOffset": 124, "endOffset": 127}, {"referenceID": 3, "context": "(Consistency [4]) Given a concurrent action", "startOffset": 13, "endOffset": 16}, {"referenceID": 20, "context": "Specifically, our proposal is based on the notion of norm as a conditional rule of behaviour that defines under which circumstances a pattern of behaviour becomes relevant and must be fulfilled [21], [29], [19], [11].", "startOffset": 194, "endOffset": 198}, {"referenceID": 28, "context": "Specifically, our proposal is based on the notion of norm as a conditional rule of behaviour that defines under which circumstances a pattern of behaviour becomes relevant and must be fulfilled [21], [29], [19], [11].", "startOffset": 200, "endOffset": 204}, {"referenceID": 18, "context": "Specifically, our proposal is based on the notion of norm as a conditional rule of behaviour that defines under which circumstances a pattern of behaviour becomes relevant and must be fulfilled [21], [29], [19], [11].", "startOffset": 206, "endOffset": 210}, {"referenceID": 10, "context": "Specifically, our proposal is based on the notion of norm as a conditional rule of behaviour that defines under which circumstances a pattern of behaviour becomes relevant and must be fulfilled [21], [29], [19], [11].", "startOffset": 212, "endOffset": 216}, {"referenceID": 3, "context": "8This limitation can be relaxed by decomposing agents into groups of agents corresponding to agents\u2019 actuators [4].", "startOffset": 111, "endOffset": 114}, {"referenceID": 0, "context": "In line with related literature [1], [20], [2], we consider a closed legal system, where everything is considered permitted by default, and obligation and prohibition norms define exceptions to this default permission rule.", "startOffset": 32, "endOffset": 35}, {"referenceID": 19, "context": "In line with related literature [1], [20], [2], we consider a closed legal system, where everything is considered permitted by default, and obligation and prohibition norms define exceptions to this default permission rule.", "startOffset": 37, "endOffset": 41}, {"referenceID": 1, "context": "In line with related literature [1], [20], [2], we consider a closed legal system, where everything is considered permitted by default, and obligation and prohibition norms define exceptions to this default permission rule.", "startOffset": 43, "endOffset": 46}, {"referenceID": 2, "context": ", Intrusion Detection/Prevention Systems [3]), to stop the execution of any offender agent (e.", "startOffset": 41, "endOffset": 44}, {"referenceID": 26, "context": ", Business Process Compliance monitoring [27]), or to put offender agents under close surveillance (e.", "startOffset": 41, "endOffset": 45}, {"referenceID": 21, "context": ", ModelBased Diagnosis Systems [22]), even when the specific action performed ins not known.", "startOffset": 31, "endOffset": 35}, {"referenceID": 5, "context": "This section compares the performance of a NM with full reconstruction, a NM with approximate reconstruction and a traditional norm monitor \u2014which is the method used in the majority of previous proposals [6], [23], [14], [24], [8]\u2014 that only considers the observed actions to detect violations; with", "startOffset": 204, "endOffset": 207}, {"referenceID": 22, "context": "This section compares the performance of a NM with full reconstruction, a NM with approximate reconstruction and a traditional norm monitor \u2014which is the method used in the majority of previous proposals [6], [23], [14], [24], [8]\u2014 that only considers the observed actions to detect violations; with", "startOffset": 209, "endOffset": 213}, {"referenceID": 13, "context": "This section compares the performance of a NM with full reconstruction, a NM with approximate reconstruction and a traditional norm monitor \u2014which is the method used in the majority of previous proposals [6], [23], [14], [24], [8]\u2014 that only considers the observed actions to detect violations; with", "startOffset": 215, "endOffset": 219}, {"referenceID": 23, "context": "This section compares the performance of a NM with full reconstruction, a NM with approximate reconstruction and a traditional norm monitor \u2014which is the method used in the majority of previous proposals [6], [23], [14], [24], [8]\u2014 that only considers the observed actions to detect violations; with", "startOffset": 221, "endOffset": 225}, {"referenceID": 7, "context": "This section compares the performance of a NM with full reconstruction, a NM with approximate reconstruction and a traditional norm monitor \u2014which is the method used in the majority of previous proposals [6], [23], [14], [24], [8]\u2014 that only considers the observed actions to detect violations; with", "startOffset": 227, "endOffset": 230}, {"referenceID": 14, "context": "Previous work on norms for regulating MAS proposed control mechanisms for norms to have an effective influence on agent behaviours [15].", "startOffset": 131, "endOffset": 135}, {"referenceID": 14, "context": "These control mechanisms are classified into two main categories [15]: regimentation mechanisms, which make the violation of norms impossible; and enforcement mechanisms, which are applied after the detection of norm violations and fulfilments, reacting upon them.", "startOffset": 65, "endOffset": 69}, {"referenceID": 11, "context": "force agents to perform obligatory actions) by mediating access to resources and the communication channel, such as Electronic Institutions (EIs) [12].", "startOffset": 146, "endOffset": 150}, {"referenceID": 6, "context": "Furthermore, it is sometimes preferable to allow agents to make flexible decisions about norm compliance [7].", "startOffset": 105, "endOffset": 108}, {"referenceID": 29, "context": "Regarding agent monitoring, this approach is characterized by the fact that norm violations and fulfilments are monitored by agents that are involved in an interaction [30], [9], or other agents that observe an interaction in which they are not directly involved [28], [10], [32].", "startOffset": 168, "endOffset": 172}, {"referenceID": 8, "context": "Regarding agent monitoring, this approach is characterized by the fact that norm violations and fulfilments are monitored by agents that are involved in an interaction [30], [9], or other agents that observe an interaction in which they are not directly involved [28], [10], [32].", "startOffset": 174, "endOffset": 177}, {"referenceID": 27, "context": "Regarding agent monitoring, this approach is characterized by the fact that norm violations and fulfilments are monitored by agents that are involved in an interaction [30], [9], or other agents that observe an interaction in which they are not directly involved [28], [10], [32].", "startOffset": 263, "endOffset": 267}, {"referenceID": 9, "context": "Regarding agent monitoring, this approach is characterized by the fact that norm violations and fulfilments are monitored by agents that are involved in an interaction [30], [9], or other agents that observe an interaction in which they are not directly involved [28], [10], [32].", "startOffset": 269, "endOffset": 273}, {"referenceID": 31, "context": "Regarding agent monitoring, this approach is characterized by the fact that norm violations and fulfilments are monitored by agents that are involved in an interaction [30], [9], or other agents that observe an interaction in which they are not directly involved [28], [10], [32].", "startOffset": 275, "endOffset": 279}, {"referenceID": 5, "context": "Cardoso & Oliveira [6] proposed an architecture in which the monitoring and enforcement of norms is made by a single institutional entity.", "startOffset": 19, "endOffset": 22}, {"referenceID": 22, "context": "To address the performance limitation of centralized approaches, distributed mechanisms for an institutional enforcement of norms were proposed in [23], [14], [24], [8].", "startOffset": 147, "endOffset": 151}, {"referenceID": 13, "context": "To address the performance limitation of centralized approaches, distributed mechanisms for an institutional enforcement of norms were proposed in [23], [14], [24], [8].", "startOffset": 153, "endOffset": 157}, {"referenceID": 23, "context": "To address the performance limitation of centralized approaches, distributed mechanisms for an institutional enforcement of norms were proposed in [23], [14], [24], [8].", "startOffset": 159, "endOffset": 163}, {"referenceID": 7, "context": "To address the performance limitation of centralized approaches, distributed mechanisms for an institutional enforcement of norms were proposed in [23], [14], [24], [8].", "startOffset": 165, "endOffset": 168}, {"referenceID": 4, "context": "[5] and Alechina et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "In [5], the partial observability problem is addressed combining different norm monitors to build ideal monitors (i.", "startOffset": 3, "endOffset": 6}, {"referenceID": 1, "context": "In [2], the authors propose to synthesise an approximate set of norms that can be monitored given the observational capabilities of a monitor.", "startOffset": 3, "endOffset": 6}, {"referenceID": 17, "context": ", POMDPs [18]) for choosing optimal actions in partially observable environments have been proposed.", "startOffset": 9, "endOffset": 13}, {"referenceID": 24, "context": "Instead, NMs perform both deductive and abductive reasoning [25] to reason from observed actions to reach a conclusion about the state of the world, and to infer unobserved actions.", "startOffset": 60, "endOffset": 64}, {"referenceID": 30, "context": "The reconstruction algorithms proposed in this paper can be applied to several domains that require action monitoring; from normative MAS [31], to intrusion detection systems [16], to control systems [26] and to intelligent surveillance systems [17].", "startOffset": 138, "endOffset": 142}, {"referenceID": 15, "context": "The reconstruction algorithms proposed in this paper can be applied to several domains that require action monitoring; from normative MAS [31], to intrusion detection systems [16], to control systems [26] and to intelligent surveillance systems [17].", "startOffset": 175, "endOffset": 179}, {"referenceID": 25, "context": "The reconstruction algorithms proposed in this paper can be applied to several domains that require action monitoring; from normative MAS [31], to intrusion detection systems [16], to control systems [26] and to intelligent surveillance systems [17].", "startOffset": 200, "endOffset": 204}, {"referenceID": 16, "context": "The reconstruction algorithms proposed in this paper can be applied to several domains that require action monitoring; from normative MAS [31], to intrusion detection systems [16], to control systems [26] and to intelligent surveillance systems [17].", "startOffset": 245, "endOffset": 249}], "year": 2016, "abstractText": "In the context of using norms for controlling multiagent systems, a vitally important question that has not yet been addressed in the literature is the development of mechanisms for monitoring norm compliance under partial action observability. This paper proposes the reconstruction of unobserved actions to tackle this problem. In particular, we formalise the problem of reconstructing unobserved actions, and propose an information model and algorithms for monitoring norms under partial action observability using two different processes for reconstructing unobserved actions. Our evaluation shows that reconstructing unobserved actions increases significantly the number of norm violations and fulfilments detected.", "creator": "LaTeX with hyperref package"}}}