{"id": "1506.06158", "review": {"conference": "ACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Jun-2015", "title": "Structured Training for Neural Network Transition-Based Parsing", "abstract": "We one hoc mediant training four neural network extend - based alleviate parsing. We learn the replication network structure any instead 24-karat washoe augmented by time tiny listed most unless overwritten prisoner. Given this rates communication decision-making, keep must piece final layering certain within complementary danum came beam - allow input/output. On within Penn Treebank, surely parser reaches 134. 52% agglomerated and 92. 41% labeled attachment superiority, which, sort analysis form soon best accuracy on Stanford Dependencies to planned. We previously provide brought - solid ablative observations to requires which aspects of my model essential over industry gains until inaccurate.", "histories": [["v1", "Fri, 19 Jun 2015 21:05:01 GMT  (2714kb,D)", "http://arxiv.org/abs/1506.06158v1", null]], "reviews": [], "SUBJECTS": "cs.CL", "authors": ["david weiss", "chris alberti", "michael collins", "slav petrov"], "accepted": true, "id": "1506.06158"}, "pdf": {"name": "1506.06158.pdf", "metadata": {"source": "CRF", "title": "Structured Training for Neural Network Transition-Based Parsing", "authors": ["David Weiss", "Chris Alberti", "Michael Collins", "Slav Petrov"], "emails": ["djweiss@google.com", "chrisalberti@google.com", "mjcollins@google.com", "slav@google.com"], "sections": [{"heading": "1 Introduction", "text": "Syntactic analysis is a central problem in language understanding that has received a tremendous amount of attention. Lately, dependency parsing has emerged as a popular approach to this problem due to the availability of dependency treebanks in many languages (Buchholz and Marsi, 2006; Nivre et al., 2007; McDonald et al., 2013) and the efficiency of dependency parsers.\nTransition-based parsers (Nivre, 2008) have been shown to provide a good balance between efficiency and accuracy. In transition-based parsing, sentences are processed in a linear left to right pass; at each position, the parser needs to choose from a set of possible actions defined by the transition strategy. In greedy models, a classifier is used to independently decide which transition to take based on local features of the current parse configuration. This classifier typically uses hand-engineered features and is trained on individual transitions extracted from the gold transition sequence. While extremely fast, these greedy models typically suffer from search errors due to the inability to recover from incorrect decisions. Zhang and Clark (2008) showed that a beamsearch decoding algorithm utilizing the structured\nperceptron training algorithm can greatly improve accuracy. Nonetheless, significant manual feature engineering was required before transitionbased systems provided competitive accuracy with graph-based parsers (Zhang and Nivre, 2011), and only by incorporating graph-based scoring functions were Bohnet and Kuhn (2012) able to exceed the accuracy of graph-based approaches.\nIn contrast to these carefully hand-tuned approaches, Chen and Manning (2014) recently presented a neural network version of a greedy transition-based parser. In their model, a feedforward neural network with a hidden layer is used to make the transition decisions. The hidden layer has the power to learn arbitrary combinations of the atomic inputs, thereby eliminating the need for hand-engineered features. Furthermore, because the neural network uses a distributed representation, it is able to model lexical, part-of-speech (POS) tag, and arc label similarities in a continuous space. However, although their model outperforms its greedy hand-engineered counterparts, it is not competitive with state-of-the-art dependency parsers that are trained for structured search.\nIn this work, we combine the representational power of neural networks with the superior search enabled by structured training and inference, making our parser one of the most accurate dependency parsers to date. Training and testing on the Penn Treebank (Marcus et al., 1993), our transition-based parser achieves 93.99% unlabeled (UAS) / 92.05% labeled (LAS) attachment accuracy, outperforming the 93.22% UAS / 91.02% LAS of Zhang and McDonald (2014) and 93.27 UAS / 91.19 LAS of Bohnet and Kuhn (2012). In addition, by incorporating unlabeled data into training, we further improve the accuracy of our model to 94.26% UAS / 92.41% LAS (93.46% ar X\niv :1\n50 6.\n06 15\n8v 1\n[ cs\n.C L\n] 1\n9 Ju\nn 20\n15\nUAS / 91.49% LAS for our greedy model).\nIn our approach we start with the basic structure of Chen and Manning (2014), but with a deeper architecture and improvements to the optimization procedure. These modifications (Section 2) increase the performance of the greedy model by as much as 1%. As in prior work, we train the neural network to model the probability of individual parse actions. However, we do not use these probabilities directly for prediction. Instead, we use the activations from all layers of the neural network as the representation in a structured perceptron model that is trained with beam search and early updates (Section 3). On the Penn Treebank, this structured learning approach significantly improves parsing accuracy by 0.8%.\nAn additional contribution of this work is an effective way to leverage unlabeled data. Neural networks are known to perform very well in the presence of large amounts of training data; however, obtaining more expert-annotated parse trees is very expensive. To this end, we generate large quantities of high-confidence parse trees by parsing unlabeled data with two different parsers and selecting only the sentences for which the two parsers produced the same trees (Section 3.3). This approach is known as \u201ctri-training\u201d (Li et al., 2014) and we show that it benefits our neural network parser significantly more than other approaches. By adding 10 million automatically parsed tokens to the training data, we improve the accuracy of our parsers by almost \u223c1.0% on web domain data.\nWe provide an extensive exploration of our model in Section 5 through ablative analysis and other retrospective experiments. One of the goals of this work is to provide guidance for future refinements and improvements on the architecture and modeling choices we introduce in this paper.\nFinally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients. Our work is also not the first to apply structured training to neural networks (see e.g. Peng et al. (2009) and Do and Artires (2010) for Conditional Random Field (CRF) training of neural networks). Our paper ex-\nh0 = [XgEg]Embedding Layer\nInput\nHidden Layers\nargmax y2GEN(x)\nmX\nj=1\nv(yj) \u00b7 (x, cj)\nh2 = max{0,W2h1 + b2}\nh1 = max{0,W1h0 + b1}\nP (y) / exp{ >y h2 + by}\n8g 2 {word, tag, label}\nBuffer\nNNDT newsThe\ndet\nNNJJVBD\nnsubj\nhad little effect\n. ROOT ROOT\nStack\n\u2026\u2026 \u2026 \u2026 \u2026\nSoftmax Layer\nPerceptron Layer\nFeatures Extracted\nearly updates (section 3). Structured learning reduces bias and significantly improves parsing accuracy by 0.6%. We demonstrate empirically that beam search based on the scores from the neural network does not work as well, perhaps because of the label bias problem.\nA second contribution of this work is an effective way to leverage unlabeled data and other parsers. Neural networks are known to perform very well in the presence of large amounts of training data. It is however unlikely that the amount of hand parsed data will increase significantly because of the high cost for syntactic annotations. To this end we generate large quantities of high-confidence parse trees by parsing an unlabeled corpus and selecting only the sentences on which two different parsers produced the same parse trees. This idea comes from tri-training (Li et al., 2014) and while applicable to other parsers as well, we show that it benefits neural network parsers more than models with discrete features. Adding 10 million automatically parsed tokens to the training data improves the accuracy of our parsers further by 0.7%. Our final greedy parser achieves an unlabeled attachment score (UAS) of 93.46% on the Penn Treebank test set, while a model with a beam of size 8 produces an UAS of 94.08% (section 4. To the best of our knowledge, these are some of the very best dependency accuracies on this corpus.\nWe provide an extensive exploration of our\nmodel in section 5. In ablation experiments we\ntease apart our various contributions and modeling\nchoices in order to shed some light on what mat-\nters in practice. Neural network representations\nhave been used in structured models before (Peng\net al., 2009; Do and Artires, 2010), and have also\nbeen used for syntactic parsing (Titov and Henderson, 2007; Titov and Henderson, 2010), alas with fairly complex architectures and constraints. Our work on the other hand introduces a general approach for structured perceptron training with a neural network representation and achieves stateof-the-art parsing results for English.\n2 Neural Network Model\nIn this section, we describe the architecture of our model, which is summarized in figure 2. Note that we separate the embedding processing to a distinct \u201cembedding layer\u201d for clarity of presentation. Our model is based upon that of Chen and Manning\nROOT had The news had little effect . DT NN VBD JJ NN P\nStack Buffer\nPartial annotations\nlittle effect .\nFeature extraction\nh0 = [XgEg | g 2 {word, tag, label}]Embedding Layer\nConfiguration\nHidden Layers\nP (y) / exp{ y hi + by},Softmax Layer\nPerceptron Layer argmax d GEN(x)\nmX\nj=1\nv(yj) \u00b7 (x, cj)\nh2 = max{0,W2h1 + b2},\nh1 = max{0,W1h0 + b1},\nFigure 1: Schematic overview of our neural network model.\nF ature Groups si, bi i 2 {1, 2, 3, 4} All lc1(si), lc2(si) i 2 {1, 2} All rc1(si), rc2(si) i 2 {1, 2} All rc1(rc1(si)) i 2 {1, 2} All lc1(lc1(si)) i 2 {1, 2} All\nTable 1: Features used in the model. si and bi are elements on the stack and buffer, respectively. lci indicates i\u2019th leftmost child and rci the i\u2019th rightmost child. Features that are included in addition to those from Chen and Manning (2014) are marked with ?. Groups indicates which values were extracted from each feature location (e.g. words, tags, labels).\n(2014) and we discuss the differences between our model and theirs in detail at the end of this section.\n2.1 Input layer Given a parse configuration c, we extract a rich set of discrete features which we feed into the neural network. Following Chen and Manning (2014), we group these features by their input source: words, POS tags, and arc labels. The full set of features is given in Table 2. The features extracted for each group are represented as a sparse F \u21e5 V matrix X, where V is the size of the vocabulary of the feature group and F is the number of features: the value of element Xfv is 1 if the f \u2019th feature takes on value v. We produce three input matrices: Xword for words features, Xtag for POS tag features, and Xlabel for arc labels.\nFor all feature groups, we add additional special\n\u2026\nFigure 1: Schematic overview of our neural network model. Atomic features are extracted from the i\u2019th elements on the stack (si) and the buffer (bi); lci indicates the i\u2019th leftmost child and rci the i\u2019th rightm st child. We use the top two elements on the stack for the arc features and the top four tokens on stack and buffer for words, tags and arc labels.\ntends this line of work to the setting of inexact search with beam decoding for dependency parsing; Zhou et a . (2015) concurrently explored a similar approach using a structured probabili tic ranking objective. Dyer et al. (2015) concurrently developed the Stack Long S ort-T rm Memory (S-LSTM) architectur , which does incorporate recurrent architecture and look-ahead, and which yields comparable accuracy on the Penn Treebank to our greedy model."}, {"heading": "2 Neural Network Model", "text": "In this section, we describe the architecture of our model, which is summarized in Figure 1. Note that we separate the embedding processing to a distinct \u201cembedding layer\u201d for clarity of presentation. Our model is based upon that of Chen and Manning (2014) and we discuss the differences between our model and theirs in detail at the end of this section. We use the arc-standard (Nivre, 2004) transition system."}, {"heading": "2.1 Input layer", "text": "Given a parse configuration c (consisting of a stack s and a buffer b), we extract a rich set of discrete features which we feed into the neural network. Following Chen and Manning (2014), we group these features by their input source: words, POS tags, and arc labels. The features extracted\nfor each group are represented as a sparse F \u00d7 V matrix X, where V is the size of the vocabulary of the feature group and F is the number of features. The value of element X f v is 1 if the f \u2019th feature takes on value v. We produce three input matrices: Xword for words features, Xtag for POS tag features, and Xlabel for arc labels, with Fword = Ftag = 20 and Flabel = 12 (Figure 1).\nFor all feature groups, we add additional special values for \u201cROOT\u201d (indicating the POS or word of the root token), \u201cNULL\u201d (indicating no valid feature value could be computed) or \u201cUNK\u201d (indicating an out-of-vocabulary item)."}, {"heading": "2.2 Embedding layer", "text": "The first learned layer h0 in the network transforms the sparse, discrete features X into a dense, continuous embedded representation. For each feature group Xg, we learn a Vg \u00d7 Dg embedding matrix Eg that applies the conversion:\nh0 = [XgEg | g \u2208 {word, tag, label}], (1)\nwhere we apply the computation separately for each group g and concatenate the results. Thus, the embedding layer has E = \u2211 g FgDg outputs, which we reshape to a vector h0. We can choose the embedding dimensionality D for each group freely. Since POS tags and arc labels have much smaller vocabularies, we show in our experiments (Section 5.1) that we can use smaller Dtag and Dlabel, without a loss in accuracy."}, {"heading": "2.3 Hidden layers", "text": "We experimented with one and two hidden layers composed of M rectified linear (Relu) units (Nair and Hinton, 2010). Each unit in the hidden layers is fully connected to the previous layer:\nhi = max{0,Wihi\u22121 + bi}, (2)\nwhere W1 is a M1 \u00d7 E weight matrix for the first hidden layer and Wi are Mi\u00d7Mi\u22121 matrices for all subsequent layers. The weights bi are bias terms. Relu layers have been well studied in the neural network literature and have been shown to work well for a wide domain of problems (Krizhevsky et al., 2012; Zeiler et al., 2013). Through most of development, we kept Mi = 200, but we found that significantly increasing the number of hidden units improved our results for the final comparison."}, {"heading": "2.4 Relationship to Chen and Manning (2014)", "text": "Our model is clearly inspired by and based on the work of Chen and Manning (2014). There are a few structural differences: (1) we allow for much smaller embeddings of POS tags and labels, (2) we use Relu units in our hidden layers, and (3) we use a deeper model with two hidden layers. Somewhat to our surprise, we found these changes combined with an SGD training scheme (Section 3.1) during the \u201cpre-training\u201d phase of the model to lead to an almost 1% accuracy gain over Chen and Manning (2014). This trend held despite carefully tuning hyperparameters for each method of training and structure combination.\nOur main contribution from an algorithmic perspective is our training procedure: as described in the next section, we use the structured perceptron for learning the final layer of our model. We thus present a novel way to leverage a neural network representation in a structured prediction setting."}, {"heading": "3 Semi-Supervised Structured Learning", "text": "In this work, we investigate a semi-supervised structured learning scheme that yields substantial improvements in accuracy over the baseline neural network model. There are two complementary contributions of our approach: (1) incorporating structured learning of the model and (2) utilizing unlabeled data. In both cases, we use the neural network to model the probability of each parsing action y as a soft-max function taking the final hidden layer as its input:\nP(y) \u221d exp{\u03b2>y hi + by}, (3)\nwhere \u03b2y is a Mi dimensional vector of weights for class y and i is the index of the final hidden layer of the network. At a high level our approach can be summarized as follows:\n\u2022 First, we pre-train the network\u2019s hidden representations by learning probabilities of parsing actions. Fixing the hidden representations, we learn an additional final output layer using the structured perceptron that uses the output of the network\u2019s hidden layers. In practice this improves accuracy by \u223c0.6% absolute.\n\u2022 Next, we show that we can supplement the gold data with a large corpus of high quality\nautomatic parses. We show that incorporating unlabeled data in this way improves accuracy by as much as 1% absolute."}, {"heading": "3.1 Backpropagation Pretraining", "text": "To learn the hidden representations, we use mini-batched averaged stochastic gradient descent (ASGD) (Bottou, 2010) with momentum (Hinton, 2012) to learn the parameters \u0398 of the network, where \u0398 = {Eg,Wi,bi, \u03b2y | \u2200g, i, y}. We use backpropagation to minimize the multinomial logistic loss:\nL(\u0398) = \u2212 \u2211\nj\nlog P(y j | c j,\u0398) + \u03bb \u2211\ni\n||Wi||22, (4)\nwhere \u03bb is a regularization hyper-parameter over the hidden layer parameters (we use \u03bb = 10\u22124 in all experiments) and j sums over all decisions and configurations {y j, c j} extracted from gold parse trees in the dataset.\nThe specific update rule we apply at iteration t is as follows:\ngt = \u00b5gt\u22121 \u2212 \u2206L(\u0398t), (5) \u0398t+1 = \u0398t + \u03b7tgt, (6)\nwhere the descent direction gt is computed by a weighted combination of the previous direction gt\u22121and the current gradient \u2206L(\u0398t). The parameter \u00b5 \u2208 [0, 1) is the momentum parameter while \u03b7t is the traditional learning rate. In addition, since we did not tune the regularization parameter \u03bb, we apply a simple exponential step-wise decay to \u03b7t; for every \u03b3 rounds of updates, we multiply \u03b7t = 0.96\u03b7t\u22121.\nThe final component of the update is parameter averaging: we maintain averaged parameters \u0398\u0304t = \u03b1t\u0398\u0304t\u22121 + (1 \u2212 \u03b1t)\u0398t, where \u03b1t is an averaging weight that increases from 0.1 to 0.9999 with 1/t. Combined with averaging, careful tuning of the three hyperparameters \u00b5, \u03b70, and \u03b3 using heldout data was crucial in our experiments."}, {"heading": "3.2 Structured Perceptron Training", "text": "Given the hidden representations, we now describe how the perceptron can be trained to utilize these representations. The perceptron algorithm with early updates (Collins and Roark, 2004) requires a feature-vector definition \u03c6 that maps a sentence x together with a configuration c to a feature vector \u03c6(x, c) \u2208 Rd. There is a one-to-one mapping between configurations c and decision sequences\ny1 . . . y j\u22121 for any integer j \u2265 1: we will use c and y1 . . . y j\u22121 interchangeably.\nFor a sentence x, define GEN(x) to be the set of parse trees for x. Each y \u2208 GEN(x) is a sequence of decisions y1 . . . ym for some integer m. We use Y to denote the set of possible decisions in the parsing model. For each decision y \u2208 Y we assume a parameter vector v(y) \u2208 Rd. These parameters will be trained using the perceptron.\nIn decoding with the perceptron-trained model, we will use beam search to attempt to find:\nargmax y\u2208GEN(x) m\u2211 j=1 v(y j) \u00b7 \u03c6(x, y1 . . . y j\u22121).\nThus each decision y j receives a score:\nv(y j) \u00b7 \u03c6(x, y1 . . . y j\u22121).\nIn the perceptron with early updates, the parameters v(y) are trained as follows. On each training example, we run beam search until the goldstandard parse tree falls out of the beam.1 Define j to be the length of the beam at this point. A structured perceptron update is performed using the gold-standard decisions y1 . . . y j as the target, and the highest scoring (incorrect) member of the beam as the negative example.\nA key idea in this paper is to use the neural network to define the representation \u03c6(x, c). Given the sentence x and the configuration c, assuming two hidden layers, the neural network defines values for h1, h2, and P(y) for each decision y. We experimented with various definitions of \u03c6 (Section 5.2) and found that \u03c6(x, c) = [h1 h2 P(y)] (the concatenation of the outputs from both hidden layers, as well as the probabilities for all decisions y possible in the current configuration) had the best accuracy on development data.\nNote that it is possible to continue to use backpropagation to learn the representation \u03c6(x, c) during perceptron training; however, we found using ASGD to pre-train the representation always led to faster, more accurate results in preliminary experiments, and we left further investigation for future work."}, {"heading": "3.3 Incorporating Unlabeled Data", "text": "Given the high capacity, non-linear nature of the deep network we hypothesize that our model can\n1If the gold parse tree stays within the beam until the end of the sentence, conventional perceptron updates are used.\nbe significantly improved by incorporating more data. One way to use unlabeled data is through unsupervised methods such as word clusters (Koo et al., 2008); we follow Chen and Manning (2014) and use pretrained word embeddings to initialize our model. The word embeddings capture similar distributional information as word clusters and give consistent improvements by providing a good initialization and information about words not seen in the treebank data.\nHowever, obtaining more training data is even more important than a good initialization. One potential way to obtain additional training data is by parsing unlabeled data with previously trained models. McClosky et al. (2006) and Huang and Harper (2009) showed that iteratively re-training a single model (\u201cself-training\u201d) can be used to improve parsers in certain settings; Petrov et al. (2010) built on this work and showed that a slow and accurate parser can be used to \u201cup-train\u201d a faster but less accurate parser.\nIn this work, we adopt the \u201ctri-training\u201d approach of Li et al. (2014): Two parsers are used to process the unlabeled corpus and only sentences for which both parsers produced the same parse tree are added to the training data. The intuition behind this idea is that the chance of the parse being correct is much higher when the two parsers agree: there is only one way to be correct, while there are many possible incorrect parses. Of course, this reasoning holds only as long as the parsers suffer from different biases.\nWe show that tri-training is far more effective than vanilla up-training for our neural network model. We use same setup as Li et al. (2014), intersecting the output of the BerkeleyParser (Petrov et al., 2006), and a reimplementation of ZPar (Zhang and Nivre, 2011) as our baseline parsers. The two parsers agree only 36% of the time on the tune set, but their accuracy on those sentences is 97.26% UAS, approaching the inter annotator agreement rate. These sentences are of course easier to parse, having an average length of 15 words, compared to 24 words for the tune set overall. However, because we only use these sentences to extract individual transition decisions, the shorter length does not seem to hurt their utility. We generate 107 tokens worth of new parses and use this data in the backpropagation stage of training."}, {"heading": "4 Experiments", "text": "In this section we present our experimental setup and the main results of our work."}, {"heading": "4.1 Experimental Setup", "text": "We conduct our experiments on two English language benchmarks: (1) the standard Wall Street Journal (WSJ) part of the Penn Treebank (Marcus et al., 1993) and (2) a more comprehensive union of publicly available treebanks spanning multiple domains. For the WSJ experiments, we follow standard practice and use sections 2-21 for training, section 22 for development and section 23 as the final test set. Since there are many hyperparameters in our models, we additionally use section 24 for tuning. We convert the constituency trees to Stanford style dependencies (De Marneffe et al., 2006) using version 3.3.0 of the converter. We use a CRF-based POS tagger to generate 5- fold jack-knifed POS tags on the training set and predicted tags on the dev, test and tune sets; our tagger gets comparable accuracy to the Stanford POS tagger (Toutanova et al., 2003) with 97.44% on the test set. We report unlabeled attachment score (UAS) and labeled attachment score (LAS) excluding punctuation on predicted POS tags, as is standard for English.\nFor the second set of experiments, we follow the same procedure as above, but with a more diverse dataset for training and evaluation. Following Vinyals et al. (2015), we use (in addition to the WSJ), the OntoNotes corpus version 5 (Hovy et al., 2006), the English Web Treebank (Petrov and McDonald, 2012), and the updated and corrected Question Treebank (Judge et al., 2006). We train on the union of each corpora\u2019s training set and test on each domain separately. We refer to this setup as the \u201cTreebank Union\u201d setup.\nIn our semi-supervised experiments, we use the corpus from Chelba et al. (2013) as our source of unlabeled data. We process it with the BerkeleyParser (Petrov et al., 2006), a latent variable constituency parser, and a reimplementation of ZPar (Zhang and Nivre, 2011), a transition-based parser with beam search. Both parsers are included as baselines in our evaluation. We select the first 107 tokens for which the two parsers agree as additional training data. For our tri-training experiments, we re-train the POS tagger using the POS tags assigned on the unlabeled data from the Berkeley constituency parser. This increases POS\naccuracy slightly to 97.57% on the WSJ."}, {"heading": "4.2 Model Initialization & Hyperparameters", "text": "In all cases, we initialized Wi and \u03b2 randomly using a Gaussian distribution with variance 10\u22124. We used fixed initialization with bi = 0.2, to ensure that most Relu units are activated during the initial rounds of training. We did not systematically compare this random scheme to others, but we found that it was sufficient for our purposes.\nFor the word embedding matrix Eword, we initialized the parameters using pretrained word embeddings. We used the publicly available word2vec2 tool (Mikolov et al., 2013) to learn CBOW embeddings following the sample configuration provided with the tool. For words not appearing in the unsupervised data and the special \u201cNULL\u201d etc. tokens, we used random initialization. In preliminary experiments we found no difference between training the word embeddings on 1 billion or 10 billion tokens. We therefore trained the word embeddings on the same corpus we used for tri-training (Chelba et al., 2013).\nWe set Dword = 64 and Dtag = Dlabel = 32 for embedding dimensions and M1 = M2 = 2048 hidden units in our final experiments. For the percep-\n2http://code.google.com/p/word2vec/\ntron layer, we used \u03c6(x, c) = [h1 h2 P(y)] (concatenation of all intermediate layers). All hyperparameters (including structure) were tuned using Section 24 of the WSJ only. When not tri-training, we used hyperparameters of \u03b3 = 0.2, \u03b70 = 0.05, \u00b5 = 0.9, early stopping after roughly 16 hours of training time. With the tri-training data, we decreased \u03b70 = 0.05, increased \u03b3 = 0.5, and decreased the size of the network to M1 = 1024, M2 = 256 for run-time efficiency, and trained the network for approximately 4 days. For the Treebank Union setup, we set M1 = M2 = 1024 for the standard training set and for the tri-training setup."}, {"heading": "4.3 Results", "text": "Table 1 shows our final results on the WSJ test set, and Table 2 shows the cross-domain results from the Treebank Union. We compare to the best dependency parsers in the literature. For (Chen and Manning, 2014) and (Dyer et al., 2015), we use reported results; the other baselines were run by Bernd Bohnet using version 3.3.0 of the Stanford dependencies and our predicted POS tags for all datasets to make comparisons as fair as possible. On the WSJ and Web tasks, our parser outperforms all dependency parsers in our comparison by a substantial margin. The Question (QTB) dataset is more sensitive to the smaller beam size we use in order to train the models in a reasonable time; if we increase to B = 32 at inference\ntime only, our perceptron performance goes up to 92.29% LAS.\nSince many of the baselines could not be directly compared to our semi-supervised approach, we re-implemented Zhang and Nivre (2011) and trained on the tri-training corpus. Although tritraining did help the baseline on the dev set (Figure 4), test set performance did not improve significantly. In contrast, it is quite exciting to see that after tri-training, even our greedy parser is more accurate than any of the baseline dependency parsers and competitive with the BerkeleyParser used to generate the tri-training data. As expected, tri-training helps most dramatically to increase accuracy on the Treebank Union setup with diverse domains, yielding 0.4-1.0% absolute LAS improvement gains for our most accurate model.\nUnfortunately we are not able to compare to several semi-supervised dependency parsers that achieve some of the highest reported accuracies on the WSJ, in particular Suzuki et al. (2009), Suzuki et al. (2011) and Chen et al. (2013). These parsers use the Yamada and Matsumoto (2003) dependency conversion and the accuracies are therefore not directly comparable. The highest of these is Suzuki et al. (2011), with a reported accuracy of 94.22% UAS. Even though the UAS is not directly comparable, it is typically similar, and this suggests that our model is competitive with some of the highest reported accuries for dependencies on WSJ."}, {"heading": "5 Discussion", "text": "In this section, we investigate the contribution of the various components of our approach through ablation studies and other systematic experiments. We tune on Section 24, and use Section 22 for comparisons in order to not pollute the official test set (Section 23). We focus on UAS as we found the LAS scores to be strongly correlated. Unless otherwise specified, we use 200 hidden units in each layer to be able to run more ablative experiments in a reasonable amount of time."}, {"heading": "5.1 Impact of Network Structure", "text": "In addition to initialization and hyperparameter tuning, there are several additional choices about model structure and size a practitioner faces when implementing a neural network model. We explore these questions and justify the particular choices we use in the following. Note that we do\nnot use a beam for this analysis and therefore do not train the final perceptron layer. This is done in order to reduce training times and because the trends persist across settings.\nVariance reduction with pre-trained embeddings. Since the learning problem is nonconvex, different initializations of the parameters yield different solutions to the learning problem. Thus, for any given experiment, we ran multiple random restarts for every setting of our hyperparameters and picked the model that performed best using the held-out tune set. We found it important to allow the model to stop training early if tune set accuracy decreased.\nWe visualize the performance of 32 random restarts with one or two hidden layers and with and without pretrained word embeddings in Figure 2, and a summary of the figure in Table 3. While adding a second hidden layer results in a large gain on the tune set, there is no gain on the dev set if pre-trained embeddings are not used. In fact, while the overall UAS scores of the tune set and dev set are strongly correlated (\u03c1 = 0.64, p < 10\u221210), they are not significantly correlated if pre-trained embeddings are not used (\u03c1 = 0.12, p > 0.3). This suggests that an additional benefit of pre-trained embeddings, aside from allowing learning to reach a more accurate solution, is to push learning towards a solution that generalizes to more data.\nDiminishing returns with increasing embedding dimensions. For these experiments, we fixed one embedding type to a high value and reduced the dimensionality of all others to very small values. The results are plotted in Figure 3, suggesting larger embeddings do not significantly improve results. We also ran tri-training on a very compact model with Dword = 8 and Dtag = Dlabel = 2 (8\u00d7 fewer parameters than our full model) which resulted in 92.33% UAS accuracy on the dev set. This is comparable to the full model without tri-training, suggesting that more training data can compensate for fewer parameters.\nIncreasing hidden units yields large gains. For these experiments, we fixed the embedding sizes Dword = 64, Dtag = Dlabel = 32 and tried increasing and decreasing the dimensionality of the hidden layers on a logarthmic scale. Improvements in accuracy did not appear to saturate even with increasing the number of hidden units by an order of magnitude, though the network became too slow to train effectively past M = 2048. These results suggest that there are still gains to be made by increasing the efficiency of larger networks, even for greedy shift-reduce parsers."}, {"heading": "5.2 Impact of Structured Perceptron", "text": "We now turn our attention to the importance of structured perceptron training as well as the impact of different latent representations.\nBias reduction through structured training. To evaluate the impact of structured training, we\ncompare using the estimates P(y) from the neural network directly for beam search to using the activations from all layers as features in the structured perceptron. Using the probability estimates directly is very similar to Ratnaparkhi (1997), where a maximum-entropy model was used to model the distribution over possible actions at each parser state, and beam search was used to search for the highest probability parse. A known problem with beam search in this setting is the label-bias problem. Table 5 shows the impact of using structured perceptron training over using the softmax function during beam search as a function of the beam size used. For reference, our reimplementation of Zhang and Nivre (2011) is trained equivalently for each setting. We also show the impact on beam size when tri-training is used. Although the beam does marginally improve accuracy for the softmax model, much greater gains are achieved when perceptron training is used.\nUsing all hidden layers crucial for structured perceptron. We also investigated the impact of connecting the final perceptron layer to all prior hidden layers (Table 6). Our results suggest that all intermediate layers of the network are indeed discriminative. Nonetheless, aggregating all of their activations proved to be the most effective representation for the structured perceptron. This suggests that the representations learned by the network collectively contain the information re-\nquired to reduce the bias of the model, but not when filtered through the softmax layer. Finally, we also experimented with connecting both hidden layers to the softmax layer during backpropagation training, but we found this did not significantly affect the performance of the greedy model."}, {"heading": "5.3 Impact of Tri-Training", "text": "To evaluate the impact of the tri-training approach, we compared to up-training with the BerkelyParser (Petrov et al., 2006) alone. The results are summarized in Figure 4 for the greedy and perceptron neural net models as well as our reimplementated Zhang and Nivre (2011) baseline.\nFor our neural network model, training on the output of the BerkeleyParser yields only modest gains, while training on the data where the two parsers agree produces significantly better results. This was especially pronounced for the greedy models: after tri-training, the greedy neural network model surpasses the BerkeleyParser in accuracy. It is also interesting to note that up-training improved results far more than tri-training for the baseline. We speculate that this is due to the a lack of diversity in the tri-training data for this model, since the same baseline model was intersected with the BerkeleyParser to generate the tritraining data."}, {"heading": "5.4 Error Analysis", "text": "Regardless of tri-training, using the structured perceptron improved error rates on some of the common and difficult labels: ROOT, ccomp, cc, conj, and nsubj all improved by >1%. We inspected the learned perceptron weights v for the softmax probabilities P(y) (see Appendix) and found that the perceptron reweights the softmax probabilities based on common confusions; e.g. a strong negative weight for the action RIGHT(ccomp) given the softmax model outputs RIGHT(conj). Note\nthat this trend did not hold when \u03c6(x, c) = [P(y)]; without the hidden layer, the perceptron was not able to reweight the softmax probabilities to account for the greedy model\u2019s biases."}, {"heading": "6 Conclusion", "text": "We presented a new state of the art in dependency parsing: a transition-based neural network parser trained with the structured perceptron and ASGD. We then combined this approach with unlabeled data and tri-training to further push state-of-the-art in semi-supervised dependency parsing. Nonetheless, our ablative analysis suggests that further gains are possible simply by scaling up our system to even larger representations. In future work, we will apply our method to other languages, explore end-to-end training of the system using structured learning, and scale up the method to larger datasets and network structures."}, {"heading": "Acknowledgements", "text": "We would like to thank Bernd Bohnet for training his parsers and TurboParser on our setup. This paper benefitted tremendously from discussions with Ryan McDonald, Greg Coppola, Emily Pitler and Fernando Pereira. Finally, we are grateful to all members of the Google Parsing Team."}], "references": [{"title": "The best of both worlds: a graph-based completion model for transition-based parsers", "author": ["Bernd Bohnet", "Jonas Kuhn."], "venue": "Proc. EACL, pages 77\u2013", "citeRegEx": "Bohnet and Kuhn.,? 2012", "shortCiteRegEx": "Bohnet and Kuhn.", "year": 2012}, {"title": "Top accuracy and fast dependency parsing is not a contradiction", "author": ["Bernd Bohnet."], "venue": "Proc. COLING, pages 89\u201397.", "citeRegEx": "Bohnet.,? 2010", "shortCiteRegEx": "Bohnet.", "year": 2010}, {"title": "Large-scale machine learning with stochastic gradient descent", "author": ["L\u00e9on Bottou."], "venue": "Proc. COMPSTAT, pages 177\u2013186.", "citeRegEx": "Bottou.,? 2010", "shortCiteRegEx": "Bottou.", "year": 2010}, {"title": "Conll-x shared task on multilingual dependency parsing", "author": ["Sabine Buchholz", "Erwin Marsi."], "venue": "Proc. CoNLL, pages 149\u2013164.", "citeRegEx": "Buchholz and Marsi.,? 2006", "shortCiteRegEx": "Buchholz and Marsi.", "year": 2006}, {"title": "One billion word benchmark for measuring progress in statistical language modeling", "author": ["Ciprian Chelba", "Tomas Mikolov", "Mike Schuster", "Qi Ge", "Thorsten Brants", "Phillipp Koehn."], "venue": "CoRR.", "citeRegEx": "Chelba et al\\.,? 2013", "shortCiteRegEx": "Chelba et al\\.", "year": 2013}, {"title": "A fast and accurate dependency parser using neural networks", "author": ["Danqi Chen", "Christopher D. Manning."], "venue": "Proc. EMNLP, pages 740\u2013750.", "citeRegEx": "Chen and Manning.,? 2014", "shortCiteRegEx": "Chen and Manning.", "year": 2014}, {"title": "Semi-supervised feature transformation for dependency parsing", "author": ["Wenliang Chen", "Min Zhang", "Yue Zhang."], "venue": "Proc. 2013 EMNLP, pages 1303\u2013 1313.", "citeRegEx": "Chen et al\\.,? 2013", "shortCiteRegEx": "Chen et al\\.", "year": 2013}, {"title": "Incremental parsing with the perceptron algorithm", "author": ["Michael Collins", "Brian Roark."], "venue": "Proc. ACL, Main Volume, pages 111\u2013118, Barcelona, Spain.", "citeRegEx": "Collins and Roark.,? 2004", "shortCiteRegEx": "Collins and Roark.", "year": 2004}, {"title": "Generating typed dependency parses from phrase structure parses", "author": ["Marie-Catherine De Marneffe", "Bill MacCartney", "Christopher D. Manning."], "venue": "Proc. LREC, pages 449\u2013454.", "citeRegEx": "Marneffe et al\\.,? 2006", "shortCiteRegEx": "Marneffe et al\\.", "year": 2006}, {"title": "Neural conditional random fields", "author": ["Trinh Minh Tri Do", "Thierry Artires."], "venue": "AISTATS, volume 9, pages 177\u2013184.", "citeRegEx": "Do and Artires.,? 2010", "shortCiteRegEx": "Do and Artires.", "year": 2010}, {"title": "Transitionbased dependency parsing with stack long shortterm memory", "author": ["Chris Dyer", "Miguel Ballesteros", "Wang Ling", "Austin Matthews", "Noah A. Smith."], "venue": "Proc. ACL.", "citeRegEx": "Dyer et al\\.,? 2015", "shortCiteRegEx": "Dyer et al\\.", "year": 2015}, {"title": "Discriminative training of a neural network statistical parser", "author": ["James Henderson."], "venue": "Proc. ACL, Main Volume, pages 95\u2013102.", "citeRegEx": "Henderson.,? 2004", "shortCiteRegEx": "Henderson.", "year": 2004}, {"title": "A practical guide to training restricted boltzmann machines", "author": ["Geoffrey E. Hinton."], "venue": "Neural Networks: Tricks of the Trade (2nd ed.), Lecture Notes in Computer Science, pages 599\u2013619. Springer.", "citeRegEx": "Hinton.,? 2012", "shortCiteRegEx": "Hinton.", "year": 2012}, {"title": "Ontonotes: The 90% solution", "author": ["Eduard Hovy", "Mitchell Marcus", "Martha Palmer", "Lance Ramshaw", "Ralph Weischedel."], "venue": "Proc. HLT-NAACL, pages 57\u2013", "citeRegEx": "Hovy et al\\.,? 2006", "shortCiteRegEx": "Hovy et al\\.", "year": 2006}, {"title": "Selftraining PCFG grammars with latent annotations across languages", "author": ["Zhongqiang Huang", "Mary Harper."], "venue": "Proc. 2009 EMNLP, pages 832\u2013841, Singapore.", "citeRegEx": "Huang and Harper.,? 2009", "shortCiteRegEx": "Huang and Harper.", "year": 2009}, {"title": "Questionbank: Creating a corpus of parseannotated questions", "author": ["John Judge", "Aoife Cahill", "Josef van Genabith."], "venue": "Proc. ACL, pages 497\u2013504.", "citeRegEx": "Judge et al\\.,? 2006", "shortCiteRegEx": "Judge et al\\.", "year": 2006}, {"title": "Simple semi-supervised dependency parsing", "author": ["Terry Koo", "Xavier Carreras", "Michael Collins."], "venue": "Proc. ACL-HLT, pages 595\u2013603.", "citeRegEx": "Koo et al\\.,? 2008", "shortCiteRegEx": "Koo et al\\.", "year": 2008}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton."], "venue": "Proc. NIPS, pages 1097\u20131105.", "citeRegEx": "Krizhevsky et al\\.,? 2012", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Ambiguity-aware ensemble training for semisupervised dependency parsing", "author": ["Zhenghua Li", "Min Zhang", "Wenliang Chen."], "venue": "Proc. ACL, pages 457\u2013467.", "citeRegEx": "Li et al\\.,? 2014", "shortCiteRegEx": "Li et al\\.", "year": 2014}, {"title": "Building a large annotated corpus of English: The Penn Treebank", "author": ["Mitchell P. Marcus", "Beatrice Santorini", "Mary Ann Marcinkiewicz."], "venue": "Computational Linguistics, 19(2):313\u2013330.", "citeRegEx": "Marcus et al\\.,? 1993", "shortCiteRegEx": "Marcus et al\\.", "year": 1993}, {"title": "Turning on the turbo: Fast third-order nonprojective turbo parsers", "author": ["Andre Martins", "Miguel Almeida", "Noah A. Smith."], "venue": "Proc. ACL, pages 617\u2013 622.", "citeRegEx": "Martins et al\\.,? 2013", "shortCiteRegEx": "Martins et al\\.", "year": 2013}, {"title": "Effective self-training for parsing", "author": ["David McClosky", "Eugene Charniak", "Mark Johnson."], "venue": "Proc. HLT-NAACL, pages 152\u2013159.", "citeRegEx": "McClosky et al\\.,? 2006", "shortCiteRegEx": "McClosky et al\\.", "year": 2006}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean."], "venue": "CoRR, abs/1301.3781.", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Vinod Nair", "Geoffrey E. Hinton."], "venue": "Proc. 27th ICML, pages 807\u2013814.", "citeRegEx": "Nair and Hinton.,? 2010", "shortCiteRegEx": "Nair and Hinton.", "year": 2010}, {"title": "The CoNLL 2007 shared task on dependency parsing", "author": ["Joakim Nivre", "Johan Hall", "Sandra K\u00fcbler", "Ryan McDonald", "Jens Nilsson", "Sebastian Riedel", "Deniz Yuret."], "venue": "Proc. CoNLL, pages 915\u2013932.", "citeRegEx": "Nivre et al\\.,? 2007", "shortCiteRegEx": "Nivre et al\\.", "year": 2007}, {"title": "Incrementality in deterministic dependency parsing", "author": ["Joakim Nivre."], "venue": "Proc. ACL Workshop on Incremental Parsing, pages 50\u201357.", "citeRegEx": "Nivre.,? 2004", "shortCiteRegEx": "Nivre.", "year": 2004}, {"title": "Algorithms for deterministic incremental dependency parsing", "author": ["Joakim Nivre."], "venue": "Computational Linguistics, 34(4):513\u2013553.", "citeRegEx": "Nivre.,? 2008", "shortCiteRegEx": "Nivre.", "year": 2008}, {"title": "Conditional neural fields", "author": ["Jian Peng", "Liefeng Bo", "Jinbo Xu."], "venue": "Proc. NIPS, pages 1419\u2013 1427.", "citeRegEx": "Peng et al\\.,? 2009", "shortCiteRegEx": "Peng et al\\.", "year": 2009}, {"title": "Overview of the 2012 shared task on parsing the web", "author": ["Slav Petrov", "Ryan McDonald."], "venue": "Notes of the First Workshop on Syntactic Analysis of NonCanonical Language (SANCL).", "citeRegEx": "Petrov and McDonald.,? 2012", "shortCiteRegEx": "Petrov and McDonald.", "year": 2012}, {"title": "Learning accurate, compact, and interpretable tree annotation", "author": ["Slav Petrov", "Leon Barrett", "Romain Thibaux", "Dan Klein."], "venue": "Proc. ACL, pages 433\u2013 440.", "citeRegEx": "Petrov et al\\.,? 2006", "shortCiteRegEx": "Petrov et al\\.", "year": 2006}, {"title": "Uptraining for accurate deterministic question parsing", "author": ["Slav Petrov", "Pi-Chuan Chang", "Michael Ringgaard", "Hiyan Alshawi."], "venue": "Proc. EMNLP, pages 705\u2013713.", "citeRegEx": "Petrov et al\\.,? 2010", "shortCiteRegEx": "Petrov et al\\.", "year": 2010}, {"title": "A linear observed time statistical parser based on maximum entropy models", "author": ["Adwait Ratnaparkhi."], "venue": "Proc. EMNLP, pages 1\u201310.", "citeRegEx": "Ratnaparkhi.,? 1997", "shortCiteRegEx": "Ratnaparkhi.", "year": 1997}, {"title": "An empirical study of semisupervised structured conditional models for dependency parsing", "author": ["Jun Suzuki", "Hideki Isozaki", "Xavier Carreras", "Michael Collins."], "venue": "Proc. 2009 EMNLP, pages 551\u2013 560.", "citeRegEx": "Suzuki et al\\.,? 2009", "shortCiteRegEx": "Suzuki et al\\.", "year": 2009}, {"title": "Learning condensed feature representations from large unsupervised data sets for supervised learning", "author": ["Jun Suzuki", "Hideki Isozaki", "Masaaki Nagata."], "venue": "Proc. ACL-HLT, pages 636\u2013641.", "citeRegEx": "Suzuki et al\\.,? 2011", "shortCiteRegEx": "Suzuki et al\\.", "year": 2011}, {"title": "Fast and robust multilingual dependency parsing with a generative latent variable model", "author": ["Ivan Titov", "James Henderson."], "venue": "Proc. EMNLP, pages 947\u2013951.", "citeRegEx": "Titov and Henderson.,? 2007", "shortCiteRegEx": "Titov and Henderson.", "year": 2007}, {"title": "A latent variable model for generative dependency pars", "author": ["Ivan Titov", "James Henderson"], "venue": null, "citeRegEx": "Titov and Henderson.,? \\Q2010\\E", "shortCiteRegEx": "Titov and Henderson.", "year": 2010}, {"title": "Feature-rich part-ofspeech tagging with a cyclic dependency network", "author": ["Kristina Toutanova", "Dan Klein", "Christopher D. Manning", "Yoram Singer."], "venue": "NAACL.", "citeRegEx": "Toutanova et al\\.,? 2003", "shortCiteRegEx": "Toutanova et al\\.", "year": 2003}, {"title": "Grammar as a foreign language", "author": ["Oriol Vinyals", "Lukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey E. Hinton."], "venue": "arXiv:1412.7449.", "citeRegEx": "Vinyals et al\\.,? 2015", "shortCiteRegEx": "Vinyals et al\\.", "year": 2015}, {"title": "Statistical dependency analysis with support vector machines", "author": ["Hiroyasu Yamada", "Yuji Matsumoto."], "venue": "Proc. IWPT, pages 195\u2013206.", "citeRegEx": "Yamada and Matsumoto.,? 2003", "shortCiteRegEx": "Yamada and Matsumoto.", "year": 2003}, {"title": "On rectified linear units for speech", "author": ["Matthew D. Zeiler", "Marc\u2019Aurelio Ranzato", "Rajat Monga", "Mark Z. Mao", "K. Yang", "Quoc Viet Le", "Patrick Nguyen", "Andrew W. Senior", "Vincent Vanhoucke", "Jeffrey Dean", "Geoffrey E. Hinton"], "venue": null, "citeRegEx": "Zeiler et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Zeiler et al\\.", "year": 2013}, {"title": "A tale of two parsers: investigating and combining graphbased and transition-based dependency parsing using beam-search", "author": ["Yue Zhang", "Stephen Clark"], "venue": "Proc. ICASSP,", "citeRegEx": "Zhang and Clark.,? \\Q2008\\E", "shortCiteRegEx": "Zhang and Clark.", "year": 2008}, {"title": "Enforcing structural diversity in cube-pruned dependency parsing", "author": ["Hao Zhang", "Ryan McDonald."], "venue": "Proc. ACL, pages 656\u2013661.", "citeRegEx": "Zhang and McDonald.,? 2014", "shortCiteRegEx": "Zhang and McDonald.", "year": 2014}, {"title": "Transition-based dependency parsing with rich non-local features", "author": ["Yue Zhang", "Joakim Nivre."], "venue": "Proc. ACL-HLT, pages 188\u2013193.", "citeRegEx": "Zhang and Nivre.,? 2011", "shortCiteRegEx": "Zhang and Nivre.", "year": 2011}, {"title": "A neural probabilistic structured-prediction model for transition-based dependency parsing", "author": ["Hao Zhou", "Yue Zhang", "Jiajun Chen."], "venue": "Proc. ACL.", "citeRegEx": "Zhou et al\\.,? 2015", "shortCiteRegEx": "Zhou et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 3, "context": "Lately, dependency parsing has emerged as a popular approach to this problem due to the availability of dependency treebanks in many languages (Buchholz and Marsi, 2006; Nivre et al., 2007; McDonald et al., 2013) and the efficiency of dependency parsers.", "startOffset": 143, "endOffset": 212}, {"referenceID": 24, "context": "Lately, dependency parsing has emerged as a popular approach to this problem due to the availability of dependency treebanks in many languages (Buchholz and Marsi, 2006; Nivre et al., 2007; McDonald et al., 2013) and the efficiency of dependency parsers.", "startOffset": 143, "endOffset": 212}, {"referenceID": 26, "context": "Transition-based parsers (Nivre, 2008) have been shown to provide a good balance between efficiency and accuracy.", "startOffset": 25, "endOffset": 38}, {"referenceID": 42, "context": "Nonetheless, significant manual feature engineering was required before transitionbased systems provided competitive accuracy with graph-based parsers (Zhang and Nivre, 2011), and only by incorporating graph-based scoring functions were Bohnet and Kuhn (2012) able to exceed the accuracy of graph-based approaches.", "startOffset": 151, "endOffset": 174}, {"referenceID": 1, "context": "Lately, dependency parsing has emerged as a popular approach to this problem due to the availability of dependency treebanks in many languages (Buchholz and Marsi, 2006; Nivre et al., 2007; McDonald et al., 2013) and the efficiency of dependency parsers. Transition-based parsers (Nivre, 2008) have been shown to provide a good balance between efficiency and accuracy. In transition-based parsing, sentences are processed in a linear left to right pass; at each position, the parser needs to choose from a set of possible actions defined by the transition strategy. In greedy models, a classifier is used to independently decide which transition to take based on local features of the current parse configuration. This classifier typically uses hand-engineered features and is trained on individual transitions extracted from the gold transition sequence. While extremely fast, these greedy models typically suffer from search errors due to the inability to recover from incorrect decisions. Zhang and Clark (2008) showed that a beamsearch decoding algorithm utilizing the structured perceptron training algorithm can greatly improve accuracy.", "startOffset": 144, "endOffset": 1015}, {"referenceID": 0, "context": "Nonetheless, significant manual feature engineering was required before transitionbased systems provided competitive accuracy with graph-based parsers (Zhang and Nivre, 2011), and only by incorporating graph-based scoring functions were Bohnet and Kuhn (2012) able to exceed the accuracy of graph-based approaches.", "startOffset": 237, "endOffset": 260}, {"referenceID": 5, "context": "In contrast to these carefully hand-tuned approaches, Chen and Manning (2014) recently presented a neural network version of a greedy transition-based parser.", "startOffset": 54, "endOffset": 78}, {"referenceID": 19, "context": "Training and testing on the Penn Treebank (Marcus et al., 1993), our transition-based parser achieves 93.", "startOffset": 42, "endOffset": 63}, {"referenceID": 17, "context": "Training and testing on the Penn Treebank (Marcus et al., 1993), our transition-based parser achieves 93.99% unlabeled (UAS) / 92.05% labeled (LAS) attachment accuracy, outperforming the 93.22% UAS / 91.02% LAS of Zhang and McDonald (2014) and 93.", "startOffset": 43, "endOffset": 240}, {"referenceID": 0, "context": "19 LAS of Bohnet and Kuhn (2012). In addition, by incorporating unlabeled data into training, we further improve the accuracy of our model to 94.", "startOffset": 10, "endOffset": 33}, {"referenceID": 5, "context": "In our approach we start with the basic structure of Chen and Manning (2014), but with a deeper architecture and improvements to the optimization procedure.", "startOffset": 53, "endOffset": 77}, {"referenceID": 18, "context": "This approach is known as \u201ctri-training\u201d (Li et al., 2014) and we show that it benefits our neural network parser significantly more than other approaches.", "startOffset": 41, "endOffset": 58}, {"referenceID": 11, "context": "Finally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients.", "startOffset": 99, "endOffset": 170}, {"referenceID": 34, "context": "Finally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients.", "startOffset": 99, "endOffset": 170}, {"referenceID": 35, "context": "Finally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients.", "startOffset": 99, "endOffset": 170}, {"referenceID": 5, "context": "Finally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients.", "startOffset": 186, "endOffset": 210}, {"referenceID": 5, "context": "Finally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients. Our work is also not the first to apply structured training to neural networks (see e.g. Peng et al. (2009) and Do and Artires (2010) for Conditional Random Field (CRF) training of neural networks).", "startOffset": 186, "endOffset": 474}, {"referenceID": 5, "context": "Finally, we also note that neural network representations have a long history in syntactic parsing (Henderson, 2004; Titov and Henderson, 2007; Titov and Henderson, 2010); however, like Chen and Manning (2014), our network avoids any recurrent structure so as to keep inference fast and efficient and to allow the use of simple backpropagation to compute gradients. Our work is also not the first to apply structured training to neural networks (see e.g. Peng et al. (2009) and Do and Artires (2010) for Conditional Random Field (CRF) training of neural networks).", "startOffset": 186, "endOffset": 500}, {"referenceID": 18, "context": "This idea comes from tri-training (Li et al., 2014) and while applicable to other parsers as well, we show that it benefits neural network", "startOffset": 34, "endOffset": 51}, {"referenceID": 27, "context": "Neural network representations have been used in structured models before (Peng et al., 2009; Do and Artires, 2010), and have also been used for syntactic parsing (Titov and Hen-", "startOffset": 74, "endOffset": 115}, {"referenceID": 9, "context": "Neural network representations have been used in structured models before (Peng et al., 2009; Do and Artires, 2010), and have also been used for syntactic parsing (Titov and Hen-", "startOffset": 74, "endOffset": 115}, {"referenceID": 5, "context": "Features that are included in addition to those from Chen and Manning (2014) are marked with ?.", "startOffset": 53, "endOffset": 77}, {"referenceID": 5, "context": "Following Chen and Manning (2014), we group these features by their input source:", "startOffset": 10, "endOffset": 34}, {"referenceID": 10, "context": "Dyer et al. (2015) concurrently developed the Stack Long S ort-T rm Memory (S-LSTM) architectur , which does incorporate recurrent architecture and look-ahead, and which yields comparable accuracy on the Penn Treebank to our greedy model.", "startOffset": 0, "endOffset": 19}, {"referenceID": 25, "context": "We use the arc-standard (Nivre, 2004) transition system.", "startOffset": 24, "endOffset": 37}, {"referenceID": 5, "context": "Our model is based upon that of Chen and Manning (2014) and we discuss the differences between our model and theirs in detail at the end of this section.", "startOffset": 32, "endOffset": 56}, {"referenceID": 5, "context": "Following Chen and Manning (2014), we group these features by their input source: words, POS tags, and arc labels.", "startOffset": 10, "endOffset": 34}, {"referenceID": 23, "context": "We experimented with one and two hidden layers composed of M rectified linear (Relu) units (Nair and Hinton, 2010).", "startOffset": 91, "endOffset": 114}, {"referenceID": 17, "context": "Relu layers have been well studied in the neural network literature and have been shown to work well for a wide domain of problems (Krizhevsky et al., 2012; Zeiler et al., 2013).", "startOffset": 131, "endOffset": 177}, {"referenceID": 39, "context": "Relu layers have been well studied in the neural network literature and have been shown to work well for a wide domain of problems (Krizhevsky et al., 2012; Zeiler et al., 2013).", "startOffset": 131, "endOffset": 177}, {"referenceID": 5, "context": "4 Relationship to Chen and Manning (2014)", "startOffset": 18, "endOffset": 42}, {"referenceID": 5, "context": "Our model is clearly inspired by and based on the work of Chen and Manning (2014). There are a few structural differences: (1) we allow for much smaller embeddings of POS tags and labels, (2) we use Relu units in our hidden layers, and (3) we use a deeper model with two hidden layers.", "startOffset": 58, "endOffset": 82}, {"referenceID": 5, "context": "Our model is clearly inspired by and based on the work of Chen and Manning (2014). There are a few structural differences: (1) we allow for much smaller embeddings of POS tags and labels, (2) we use Relu units in our hidden layers, and (3) we use a deeper model with two hidden layers. Somewhat to our surprise, we found these changes combined with an SGD training scheme (Section 3.1) during the \u201cpre-training\u201d phase of the model to lead to an almost 1% accuracy gain over Chen and Manning (2014). This trend held despite carefully tuning hyperparameters for each method of training and structure combination.", "startOffset": 58, "endOffset": 498}, {"referenceID": 2, "context": "To learn the hidden representations, we use mini-batched averaged stochastic gradient descent (ASGD) (Bottou, 2010) with momentum (Hinton, 2012) to learn the parameters \u0398 of the network, where \u0398 = {Eg,Wi,bi, \u03b2y | \u2200g, i, y}.", "startOffset": 101, "endOffset": 115}, {"referenceID": 12, "context": "To learn the hidden representations, we use mini-batched averaged stochastic gradient descent (ASGD) (Bottou, 2010) with momentum (Hinton, 2012) to learn the parameters \u0398 of the network, where \u0398 = {Eg,Wi,bi, \u03b2y | \u2200g, i, y}.", "startOffset": 130, "endOffset": 144}, {"referenceID": 7, "context": "The perceptron algorithm with early updates (Collins and Roark, 2004) requires a feature-vector definition \u03c6 that maps a sentence x together with a configuration c to a feature vector \u03c6(x, c) \u2208 Rd.", "startOffset": 44, "endOffset": 69}, {"referenceID": 16, "context": "One way to use unlabeled data is through unsupervised methods such as word clusters (Koo et al., 2008); we follow Chen and Manning (2014) and use pretrained word embeddings to initialize our model.", "startOffset": 84, "endOffset": 102}, {"referenceID": 5, "context": ", 2008); we follow Chen and Manning (2014) and use pretrained word embeddings to initialize our model.", "startOffset": 19, "endOffset": 43}, {"referenceID": 20, "context": "McClosky et al. (2006) and Huang and Harper (2009) showed that iteratively re-training a single model (\u201cself-training\u201d) can be used to improve parsers in certain settings; Petrov et al.", "startOffset": 0, "endOffset": 23}, {"referenceID": 14, "context": "(2006) and Huang and Harper (2009) showed that iteratively re-training a single model (\u201cself-training\u201d) can be used to improve parsers in certain settings; Petrov et al.", "startOffset": 11, "endOffset": 35}, {"referenceID": 14, "context": "(2006) and Huang and Harper (2009) showed that iteratively re-training a single model (\u201cself-training\u201d) can be used to improve parsers in certain settings; Petrov et al. (2010) built on this work and showed that a slow and accurate parser can be used to \u201cup-train\u201d a faster but less accurate parser.", "startOffset": 11, "endOffset": 177}, {"referenceID": 18, "context": "In this work, we adopt the \u201ctri-training\u201d approach of Li et al. (2014): Two parsers are used to process the unlabeled corpus and only sentences for which both parsers produced the same parse tree are added to the training data.", "startOffset": 54, "endOffset": 71}, {"referenceID": 29, "context": "(2014), intersecting the output of the BerkeleyParser (Petrov et al., 2006), and a reimplementation of ZPar (Zhang and Nivre, 2011) as our baseline parsers.", "startOffset": 54, "endOffset": 75}, {"referenceID": 42, "context": ", 2006), and a reimplementation of ZPar (Zhang and Nivre, 2011) as our baseline parsers.", "startOffset": 40, "endOffset": 63}, {"referenceID": 18, "context": "We use same setup as Li et al. (2014), intersecting the output of the BerkeleyParser (Petrov et al.", "startOffset": 21, "endOffset": 38}, {"referenceID": 19, "context": "We conduct our experiments on two English language benchmarks: (1) the standard Wall Street Journal (WSJ) part of the Penn Treebank (Marcus et al., 1993) and (2) a more comprehensive union of publicly available treebanks spanning multiple domains.", "startOffset": 132, "endOffset": 153}, {"referenceID": 36, "context": "We use a CRF-based POS tagger to generate 5fold jack-knifed POS tags on the training set and predicted tags on the dev, test and tune sets; our tagger gets comparable accuracy to the Stanford POS tagger (Toutanova et al., 2003) with 97.", "startOffset": 203, "endOffset": 227}, {"referenceID": 13, "context": "(2015), we use (in addition to the WSJ), the OntoNotes corpus version 5 (Hovy et al., 2006), the English Web Treebank (Petrov and McDonald, 2012), and the updated and corrected Question Treebank (Judge et al.", "startOffset": 72, "endOffset": 91}, {"referenceID": 28, "context": ", 2006), the English Web Treebank (Petrov and McDonald, 2012), and the updated and corrected Question Treebank (Judge et al.", "startOffset": 34, "endOffset": 61}, {"referenceID": 15, "context": ", 2006), the English Web Treebank (Petrov and McDonald, 2012), and the updated and corrected Question Treebank (Judge et al., 2006).", "startOffset": 111, "endOffset": 131}, {"referenceID": 34, "context": "Following Vinyals et al. (2015), we use (in addition to the WSJ), the OntoNotes corpus version 5 (Hovy et al.", "startOffset": 10, "endOffset": 32}, {"referenceID": 29, "context": "We process it with the BerkeleyParser (Petrov et al., 2006), a latent variable constituency parser, and a reimplementation of ZPar (Zhang and Nivre, 2011), a transition-based parser with beam search.", "startOffset": 38, "endOffset": 59}, {"referenceID": 42, "context": ", 2006), a latent variable constituency parser, and a reimplementation of ZPar (Zhang and Nivre, 2011), a transition-based parser with beam search.", "startOffset": 79, "endOffset": 102}, {"referenceID": 4, "context": "In our semi-supervised experiments, we use the corpus from Chelba et al. (2013) as our source of unlabeled data.", "startOffset": 59, "endOffset": 80}, {"referenceID": 10, "context": "60 1 S-LSTM (Dyer et al., 2015) 93.", "startOffset": 12, "endOffset": 31}, {"referenceID": 21, "context": "Transition-based Zhang and Nivre (2011) 93.", "startOffset": 27, "endOffset": 40}, {"referenceID": 0, "context": "95 32 Bohnet and Kuhn (2012) 93.", "startOffset": 6, "endOffset": 29}, {"referenceID": 0, "context": "95 32 Bohnet and Kuhn (2012) 93.27 91.19 40 Chen and Manning (2014) 91.", "startOffset": 6, "endOffset": 68}, {"referenceID": 25, "context": "Tri-training Zhang and Nivre (2011) 92.", "startOffset": 23, "endOffset": 36}, {"referenceID": 5, "context": "All methods except Chen and Manning (2014) and Dyer et al.", "startOffset": 19, "endOffset": 43}, {"referenceID": 5, "context": "All methods except Chen and Manning (2014) and Dyer et al. (2015) were run using predicted tags from our POS tagger.", "startOffset": 19, "endOffset": 66}, {"referenceID": 22, "context": "We used the publicly available word2vec2 tool (Mikolov et al., 2013) to learn CBOW embeddings following the sample configuration provided with the tool.", "startOffset": 46, "endOffset": 68}, {"referenceID": 4, "context": "We therefore trained the word embeddings on the same corpus we used for tri-training (Chelba et al., 2013).", "startOffset": 85, "endOffset": 106}, {"referenceID": 23, "context": "Transition-based Zhang and Nivre (2011) 91.", "startOffset": 27, "endOffset": 40}, {"referenceID": 0, "context": "46 Bohnet and Kuhn (2012) 91.", "startOffset": 3, "endOffset": 26}, {"referenceID": 25, "context": "Tri-training Zhang and Nivre (2011) 91.", "startOffset": 23, "endOffset": 36}, {"referenceID": 5, "context": "For (Chen and Manning, 2014) and (Dyer et al.", "startOffset": 4, "endOffset": 28}, {"referenceID": 10, "context": "For (Chen and Manning, 2014) and (Dyer et al., 2015), we use reported results; the other baselines were run by Bernd Bohnet using version 3.", "startOffset": 33, "endOffset": 52}, {"referenceID": 25, "context": "Since many of the baselines could not be directly compared to our semi-supervised approach, we re-implemented Zhang and Nivre (2011) and trained on the tri-training corpus.", "startOffset": 120, "endOffset": 133}, {"referenceID": 31, "context": "Unfortunately we are not able to compare to several semi-supervised dependency parsers that achieve some of the highest reported accuracies on the WSJ, in particular Suzuki et al. (2009), Suzuki et al.", "startOffset": 166, "endOffset": 187}, {"referenceID": 31, "context": "Unfortunately we are not able to compare to several semi-supervised dependency parsers that achieve some of the highest reported accuracies on the WSJ, in particular Suzuki et al. (2009), Suzuki et al. (2011) and Chen et al.", "startOffset": 166, "endOffset": 209}, {"referenceID": 6, "context": "(2011) and Chen et al. (2013). These parsers use the Yamada and Matsumoto (2003) dependency conversion and the accuracies are therefore not directly comparable.", "startOffset": 11, "endOffset": 30}, {"referenceID": 6, "context": "(2011) and Chen et al. (2013). These parsers use the Yamada and Matsumoto (2003) dependency conversion and the accuracies are therefore not directly comparable.", "startOffset": 11, "endOffset": 81}, {"referenceID": 6, "context": "(2011) and Chen et al. (2013). These parsers use the Yamada and Matsumoto (2003) dependency conversion and the accuracies are therefore not directly comparable. The highest of these is Suzuki et al. (2011), with a reported accuracy of 94.", "startOffset": 11, "endOffset": 206}, {"referenceID": 29, "context": "Using the probability estimates directly is very similar to Ratnaparkhi (1997), where a maximum-entropy model was used to model the distribution over possible actions at each parser state, and beam search was used to search for the highest probability parse.", "startOffset": 60, "endOffset": 79}, {"referenceID": 25, "context": "For reference, our reimplementation of Zhang and Nivre (2011) is trained equivalently for each setting.", "startOffset": 49, "endOffset": 62}, {"referenceID": 29, "context": "To evaluate the impact of the tri-training approach, we compared to up-training with the BerkelyParser (Petrov et al., 2006) alone.", "startOffset": 103, "endOffset": 124}, {"referenceID": 25, "context": "The results are summarized in Figure 4 for the greedy and perceptron neural net models as well as our reimplementated Zhang and Nivre (2011) baseline.", "startOffset": 128, "endOffset": 141}], "year": 2015, "abstractText": "We present structured perceptron training for neural network transition-based dependency parsing. We learn the neural network representation using a gold corpus augmented by a large number of automatically parsed sentences. Given this fixed network representation, we learn a final layer using the structured perceptron with beam-search decoding. On the Penn Treebank, our parser reaches 94.26% unlabeled and 92.41% labeled attachment accuracy, which to our knowledge is the best accuracy on Stanford Dependencies to date. We also provide indepth ablative analysis to determine which aspects of our model provide the largest gains in accuracy.", "creator": "TeX"}}}