{"id": "1506.07365", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Jun-2015", "title": "Embed to Control: A Locally Linear Latent Dynamics Model for Control from Raw Images", "abstract": "We introduce Embed to Control (E2C ), a mathematical work versions particular and needed which benefits - linear constructs systems came raw micrometre images. E2C consists brought setting past generative application, merchant to the whom much variational autoencoders, one fianc\u00e9e to generate display vacua days a predispositions tower in which given dynamics known efficiently put be locally equation. Our originally means refer directly from both equilibrium but normative in latent operating, supports its - term explanation a pictures sequences by exhibits strong consistent following yet variety years buildings any further.", "histories": [["v1", "Wed, 24 Jun 2015 13:48:51 GMT  (4350kb,D)", "https://arxiv.org/abs/1506.07365v1", null], ["v2", "Thu, 25 Jun 2015 21:08:02 GMT  (4351kb,D)", "http://arxiv.org/abs/1506.07365v2", null], ["v3", "Fri, 20 Nov 2015 14:49:18 GMT  (4346kb,D)", "http://arxiv.org/abs/1506.07365v3", "Final NIPS version"]], "reviews": [], "SUBJECTS": "cs.LG cs.CV stat.ML", "authors": ["manuel watter", "jost tobias springenberg", "joschka boedecker", "martin a riedmiller"], "accepted": true, "id": "1506.07365"}, "pdf": {"name": "1506.07365.pdf", "metadata": {"source": "CRF", "title": "Embed to Control: A Locally Linear Latent Dynamics Model for Control from Raw Images", "authors": ["Manuel Watter", "Jost Tobias Springenberg", "Joschka Boedecker", "Martin Riedmiller"], "emails": ["watterm@cs.uni-freiburg.de", "springj@cs.uni-freiburg.de", "jboedeck@cs.uni-freiburg.de", "riedmiller@google.com"], "sections": [{"heading": "1 Introduction", "text": "Control of non-linear dynamical systems with continuous state and action spaces is one of the key problems in robotics and, in a broader context, in reinforcement learning for autonomous agents. A prominent class of algorithms that aim to solve this problem are model-based locally optimal (stochastic) control algorithms such as iLQG control [1, 2], which approximate the general nonlinear control problem via local linearization. When combined with receding horizon control [3], and machine learning methods for learning approximate system models, such algorithms are powerful tools for solving complicated control problems [3, 4, 5]; however, they either rely on a known system model or require the design of relatively low-dimensional state representations. For real autonomous agents to succeed, we ultimately need algorithms that are capable of controlling complex dynamical systems from raw sensory input (e.g. images) only. In this paper we tackle this difficult problem.\nIf stochastic optimal control (SOC) methods were applied directly to control from raw image data, they would face two major obstacles. First, sensory data is usually high-dimensional \u2013 i.e. images with thousands of pixels \u2013 rendering a naive SOC solution computationally infeasible. Second, the image content is typically a highly non-linear function of the system dynamics underlying the observations; thus model identification and control of this dynamics are non-trivial.\nWhile both problems could, in principle, be addressed by designing more advanced SOC algorithms we approach the \u201coptimal control from raw images\u201d problem differently: turning the problem of locally optimal control in high-dimensional non-linear systems into one of identifying a low-dimensional latent state space, in which locally optimal control can be performed robustly and easily. To learn such a latent space we propose a new deep generative model belonging to the class of variational autoencoders [6, 7] that is derived from an iLQG formulation in latent space. The resulting Embed to Control (E2C) system is a probabilistic generative model that holds a belief over viable trajectories in sensory space, allows for accurate long-term planning in latent space, and is trained fully unsupervised. We demonstrate the success of our approach on four challenging tasks for control from raw images and compare it to a range of methods for unsupervised representation learning. As an aside, we also validate that deep up-convolutional networks [8, 9] are powerful generative models for large images. \u2217Authors contributed equally.\nar X\niv :1\n50 6.\n07 36\n5v 3\n[ cs\n.L G\n] 2\n0 N\nov 2"}, {"heading": "2 The Embed to Control (E2C) model", "text": "We briefly review the problem of SOC for dynamical systems, introduce approximate locally optimal control in latent space, and finish with the derivation of our model."}, {"heading": "2.1 Problem Formulation", "text": "We consider the control of unknown dynamical systems of the form st+1 = f(st,ut) + \u03be, \u03be \u223c N (0,\u03a3\u03be), (1) where t denotes the time steps, st \u2208 Rns the system state, ut \u2208 Rnu the applied control and \u03be the system noise. The function f(st,ut) is an arbitrary, smooth, system dynamics. We equivalently refer to Equation (1) using the notation P (st+1|st,ut), which we assume to be a multivariate normal distributionN (f(st,ut),\u03a3\u03be). We further assume that we are only given access to visual depictions xt \u2208 Rnx of state st. This restriction requires solving a joint state identification and control problem. For simplicity we will in the following assume that xt is a fully observed depiction of st, but relax this assumption later.\nOur goal then is to infer a low-dimensional latent state space model in which optimal control can be performed. That is, we seek to learn a function m, mapping from high-dimensional images xt to low-dimensional vectors zt \u2208 Rnz with nz nx, such that the control problem can be solved using zt instead of xt: zt = m(xt) + \u03c9, \u03c9 \u223c N (0,\u03a3\u03c9), (2) where\u03c9 accounts for system noise; or equivalently zt \u223c N (m(xt),\u03a3\u03c9). Assuming for the moment that such a function can be learned (or approximated), we will first define SOC in a latent space and introduce our model thereafter."}, {"heading": "2.2 Stochastic locally optimal control in latent spaces", "text": "Let zt \u2208 Rnz be the inferred latent state from image xt of state st and f lat(zt,ut) the transition dynamics in latent space, i.e., zt+1 = f lat(zt,ut). Thus f lat models the changes that occur in zt when control ut is applied to the underlying system as a latent space analogue to f(st,ut). Assuming f lat is known, optimal controls for a trajectory of length T in the dynamical system can be derived by minimizing the function J(z1:T ,u1:T ) which gives the expected future costs when following (z1:T ,u1:T ):\nJ(z1:T ,u1:T ) = Ez [ cT (zT ,uT ) +\nT\u22121\u2211 t0 c(zt,ut)\n] , (3)\nwhere c(zt,ut) are instantaneous costs, cT (zT ,uT ) denotes terminal costs and z1:T = {z1, . . . , zT } and u1:T = {u1, . . . ,uT } are state and action sequences respectively. If zt contains sufficient information about st, i.e., st can be inferred from zt alone, and f lat is differentiable, the cost-minimizing controls can be computed from J(z1:T ,u1:T ) via SOC algorithms [10]. These optimal control algorithms approximate the global non-linear dynamics with locally linear dynamics at each time step t. Locally optimal actions can then be found in closed form. Formally, given a reference trajectory z\u03041:T \u2013 the current estimate for the optimal trajectory \u2013 together with corresponding controls u\u03041:T the system is linearized as\nzt+1 = A(z\u0304t)zt + B(z\u0304t)ut + o(z\u0304t) + \u03c9, \u03c9 \u223c N (0,\u03a3\u03c9), (4) where A(z\u0304t) = \u03b4f lat(z\u0304t,u\u0304t) \u03b4z\u0304t , B(z\u0304t) = \u03b4f lat(z\u0304t,u\u0304t) \u03b4u\u0304t are local Jacobians, and o(z\u0304t) is an offset. To enable efficient computation of the local controls we assume the costs to be a quadratic function of the latent representation\nc(zt,ut) = (zt \u2212 zgoal)TRz(zt \u2212 zgoal) + uTt Ruut, (5) where Rz \u2208 Rnz\u00d7nz and Ru \u2208 Rnu\u00d7nu are cost weighting matrices and zgoal is the inferred representation of the goal state. We also assume cT (zT ,uT ) = c(zT ,uT ) throughout this paper. In combination with Equation (4) this gives us a local linear-quadratic-Gaussian formulation at each time step t which can be solved by SOC algorithms such as iterative linear-quadratic regulation (iLQR) [11] or approximate inference control (AICO) [12]. The result of this trajectory optimization step is a locally optimal trajectory with corresponding control sequence (z\u22171:T ,u \u2217 1:T ) \u2248 arg minz1:T u1:T J(z1:T ,u1:T )."}, {"heading": "2.3 A locally linear latent state space model for dynamical systems", "text": "Starting from the SOC formulation, we now turn to the problem of learning an appropriate lowdimensional latent representation zt \u223c P (Zt|m(xt),\u03a3\u03c9) of xt. The representation zt has to fulfill three properties: (i) it must capture sufficient information about xt (enough to enable reconstruction); (ii) it must allow for accurate prediction of the next latent state zt+1 and thus, implicitly, of the next observation xt+1; (iii) the prediction f lat of the next latent state must be locally linearizable for all valid control magnitudes ut. Given some representation zt, properties (ii) and (iii) in particular require us to capture possibly highly non-linear changes of the latent representation due to transformations of the observed scene induced by control commands. Crucially, these are particularly hard to model and subsequently linearize. We circumvent this problem by taking a more direct approach: instead of learning a latent space z and transition model f lat which are then linearized and combined with SOC algorithms, we directly impose desired transformation properties on the representation zt during learning. We will select these properties such that prediction in the latent space as well as locally linear inference of the next observation according to Equation (4) are easy.\nThe transformation properties that we desire from a latent representation can be formalized directly from the iLQG formulation given in Section 2.2 . Formally, following Equation (2), let the latent representation be Gaussian P (Z|X) = N (m(xt),\u03a3\u03c9). To infer zt from xt we first require a method for sampling latent states. Ideally, we would generate samples directly from the unknown true posterior P (Z|X), which we, however, have no access to. Following the variational Bayes approach (see Jordan et al. [13] for an overview) we resort to sampling zt from an approximate posterior distribution Q\u03c6(Z|X) with parameters \u03c6. Inference model for Q\u03c6. In our work this is always a diagonal Gaussian distribution Q\u03c6(Z|X) = N (\u00b5t, diag(\u03c32t )), whose mean \u00b5t \u2208 Rnz and covariance \u03a3t = diag(\u03c32t ) \u2208 Rnz\u00d7nz are computed by an encoding neural network with outputs\n\u00b5t = W\u00b5h enc \u03c6 (xt) + b\u00b5, (6) log\u03c3t = W\u03c3h enc \u03c6 (xt) + b\u03c3, (7)\nwhere henc\u03c6 \u2208 Rne is the activation of the last hidden layer and where \u03c6 is given by the set of all learnable parameters of the encoding network, including the weight matrices W\u00b5, W\u03c3 and biases b\u00b5, b\u03c3 . Parameterizing the mean and variance of a Gaussian distribution based on a neural network gives us a natural and very expressive model for our latent space. It additionally comes with the benefit that we can use the reparameterization trick [6, 7] to backpropagate gradients of a loss function based on samples through the latent distribution.\nGenerative model for P\u03b8. Using the approximate posterior distribution Q\u03c6 we generate observed samples (images) x\u0303t and x\u0303t+1 from latent samples zt and zt+1 by enforcing a locally linear relationship in latent space according to Equation (4), yielding the following generative model\nzt \u223c Q\u03c6(Z | X) = N (\u00b5t,\u03a3t), z\u0302t+1 \u223c Q\u0302\u03c8(Z\u0302 | Z,u) = N (At\u00b5t + Btut + ot,Ct),\nx\u0303t, x\u0303t+1 \u223c P\u03b8(X | Z) = Bernoulli(pt), (8)\nwhere Q\u0302\u03c8 is the next latent state posterior distribution, which exactly follows the linear form required for stochastic optimal control. With \u03c9t \u223c N (0,Ht) as an estimate of the system noise,\nC can be decomposed as Ct = At\u03a3tATt + Ht. Note that while the transition dynamics in our generative model operates on the inferred latent space, it takes untransformed controls into account. That is, we aim to learn a latent space such that the transition dynamics in z linearizes the non-linear observed dynamics in x and is locally linear in the applied controls u. Reconstruction of an image from zt is performed by passing the sample through multiple hidden layers of a decoding neural network which computes the mean pt of the generative Bernoulli distribution1 P\u03b8(X|Z) as\npt = Wph dec \u03b8 (zt) + bp, (9)\nwhere hdec\u03b8 (zt) \u2208 Rnd is the response of the last hidden layer in the decoding network. The set of parameters for the decoding network, including weight matrix Wp and bias bp, then make up the learned generative parameters \u03b8.\nTransition model for Q\u0302\u03c8 . What remains is to specify how the linearization matrices At \u2208 Rnz\u00d7nz , Bt \u2208 Rnz\u00d7nu and offset ot \u2208 Rnz are predicted. Following the same approach as for distribution means and covariance matrices, we predict all local transformation parameters from samples zt based on the hidden representation htrans\u03c8 (zt) \u2208 Rnt of a third neural network with parameters \u03c8 \u2013 to which we refer as the transformation network. Specifically, we parametrize the transformation matrices and offset as\nvec[At] = WA htrans\u03c8 (zt) + bA, vec[Bt] = WB htrans\u03c8 (zt) + bB ,\not = Wo h trans \u03c8 (zt) + bo,\n(10)\nwhere vec denotes vectorization and therefore vec[At] \u2208 R(n 2 z) and vec[Bt] \u2208 R(nz\u00b7nu). To circumvent estimating the full matrix At of size nz \u00d7 nz , we can choose it to be a perturbation of the identity matrix At = (I + vtrTt ) which reduces the parameters to be estimated for At to 2nz .\nA sketch of the complete architecture is shown in Figure 1. It also visualizes an additional constraint that is essential for learning a representation for long-term predictions: we require samples z\u0302t+1 from the state transition distribution Q\u0302\u03c8 to be similar to the encoding of xt+1 through Q\u03c6. While it might seem that just learning a perfect reconstruction of xt+1 from z\u0302t+1 is enough, we require multistep predictions for planning in Z which must correspond to valid trajectories in the observed space X . Without enforcing similarity between samples from Q\u0302\u03c8 and Q\u03c6, following a transition in latent space from zt with action ut may lead to a point z\u0302t+1, from which reconstruction of xt+1 is possible, but that is not a valid encoding (i.e. the model will never encode any image as z\u0302t+1). Executing another action in z\u0302t+1 then does not result in a valid latent state \u2013 since the transition model is conditional on samples coming from the inference network \u2013 and thus long-term predictions fail. In a nutshell, such a divergence between encodings and the transition model results in a generative model that does not accurately model the Markov chain formed by the observations."}, {"heading": "2.4 Learning via stochastic gradient variational Bayes", "text": "For training the model we use a data set D = {(x1,u1,x2), . . . , (xT\u22121,uT\u22121,xT )} containing observation tuples with corresponding controls obtained from interactions with the dynamical system. Using this data set, we learn the parameters of the inference, transition and generative model by minimizing a variational bound on the true data negative log-likelihood \u2212 logP (xt,ut,xt+1) plus an additional constraint on the latent representation. The complete loss function2 is given as\nL(D) = \u2211\n(xt,ut,xt+1)\u2208D\nLbound(xt,ut,xt+1) + \u03bb KL ( Q\u0302\u03c8(Z\u0302 | \u00b5t,ut) \u2225\u2225Q\u03c6(Z | xt+1)) . (11) The first part of this loss is the per-example variational bound on the log-likelihood\nLbound(xt,ut,xt+1) = E zt\u223cQ\u03c6 z\u0302t+1\u223cQ\u0302\u03c8 [\u2212 logP\u03b8(xt|zt)\u2212 logP\u03b8(xt+1|z\u0302t+1)]+KL(Q\u03c6||P (Z)), (12)\nwhere Q\u03c6, P\u03b8 and Q\u0302\u03c8 are the parametric inference, generative and transition distributions from Section 2.3 and P (Zt) is a prior on the approximate posterior Q\u03c6; which we always chose to be\n1A Bernoulli distribution for P\u03b8 is a common choice when modeling black-and-white images. 2Note that this is the loss for the latent state space model and distinct from the SOC costs.\nan isotropic Gaussian distribution with mean zero and unit variance. The second KL divergence in Equation (11) is an additional contraction term with weight \u03bb, that enforces agreement between the transition and inference models. This term is essential for establishing a Markov chain in latent space that corresponds to the real system dynamics (see Section 2.3 above for an in depth discussion). This KL divergence can also be seen as a prior on the latent transition model. Note that all KL terms can be computed analytically for our model (see supplementary for details).\nDuring training we approximate the expectation in L(D) via sampling. Specifically, we take one sample zt for each input xt and transform that sample using Equation (10) to give a valid sample z\u0302t+1 from Q\u0302\u03c8 . We then jointly learn all parameters of our model by minimizing L(D) using SGD."}, {"heading": "3 Experimental Results", "text": "We evaluate our model on four visual tasks: an agent in a plane with obstacles, a visual version of the classic inverted pendulum swing-up task, balancing a cart-pole system, and control of a three-link arm with larger images. These are described in detail below."}, {"heading": "3.1 Experimental Setup", "text": "Model training. We consider two different network types for our model: Standard fully connected neural networks with up to three layers, which work well for moderately sized images, are used for the planar and swing-up experiments; A deep convolutional network for the encoder in combination with an up-convolutional network as the decoder which, in accordance with recent findings from the literature [8, 9], we found to be an adequate model for larger images. Training was performed using Adam [14] throughout all experiments. The training data set D for all tasks was generated by randomly sampling N state observations and actions with corresponding successor states. For the plane we used N=3, 000 samples, for the inverted pendulum and cart-pole system we used N= 15, 000 and for the arm N=30, 000. A complete list of architecture parameters and hyperparameter choices as well as an in-depth explanation of the up-convolutional network are specified in the supplementary material. We will make our code and a video containing controlled trajectories for all systems available under http://ml.informatik.uni-freiburg.de/research/e2c .\nModel variants. In addition to the Embed to Control (E2C) dynamics model derived above, we also consider two variants: By removing the latent dynamics network htrans\u03c8 , i.e. setting its output to one in Equation (10) \u2013 we obtain a variant in which At, Bt and ot are estimated as globally linear matrices (Global E2C). If we instead replace the transition model with a network estimating the dynamics as a non-linear function f\u0302 lat and only linearize during planning, estimating At, Bt, ot as Jacobians to f\u0302 lat as described in Section 2.2, we obtain a variant with nonlinear latent dynamics.\nBaseline models. For a thorough comparison and to exhibit the complicated nature of the tasks, we also test a set of baseline models on the plane and the inverted pendulum task (using the same architecture as the E2C model): a standard variational autoencoder (VAE) and a deep autoencoder (AE) are trained on the autoencoding subtask for visual problems. That is, given a data set D used for training our model, we remove all actions from the tuples in D and disregard temporal context between images. After autoencoder training we learn a dynamics model in latent space, approximating f lat from Section 2.2. We also consider a VAE variant with a slowness term on the latent representation \u2013 a full description of this variant is given in the supplementary material.\nOptimal control algorithms. To perform optimal control in the latent space of different models, we employ two trajectory optimization algorithms: iterative linear quadratic regulation (iLQR) [11] (for the plane and inverted pendulum) and approximate inference control (AICO) [12] (all other experiments). For all VAEs both methods operate on the mean of distributions Q\u03c6 and Q\u0302\u03c8 . AICO additionally makes use of the local Gaussian covariances \u03a3t and Ct. Except for the experiments on the planar system, control was performed in a model predictive control fashion using the receding horizon scheme introduced in [3]. To obtain closed loop control given an image xt, it is first passed through the encoder to obtain the latent state zt. A locally optimal trajectory is subsequently found by optimizing (z\u2217t:t+T ,u\n\u2217 t:t+T ) \u2248 arg minzt:t+Tut:t+T J(zt:t+T ,ut:t+T ) with fixed, small horizon\nT (with T = 10 unless noted otherwise). Controls u\u2217t are applied to the system and a transition to zt+1 is observed (by encoding the next image xt+1). Then a new control sequence \u2013 with horizon\nT \u2013 starting in zt+1 is found using the last estimated trajectory as a bootstrap. Note that planning is performed entirely in the latent state without access to any observations except for the depiction of the current state. To compute the cost function c(zt,ut) required for trajectory optimization in z we assume knowledge of the observation xgoal of the goal state sgoal. This observation is then transformed into latent space and costs are computed according to Equation (5)."}, {"heading": "3.2 Control in a planar system", "text": "The agent in the planar system can move in a bounded two-dimensional plane by choosing a continuous offset in x- and y-direction. The high-dimensional representation of a state is a 40 \u00d7 40 black-and-white image. Obstructed by six circular obstacles, the task is to move to the bottom right of the image, starting from a random x position at the top of the image. The encodings of obstacles are obtained prior to planning and an additional quadratic cost term is penalizing proximity to them.\nA depiction of the observations on which control is performed \u2013 together with their corresponding state values and embeddings into latent space \u2013 is shown in Figure 2. The figure also clearly shows a fundamental advantage the E2C model has over its competitors: While the separately trained autoencoders make for aesthetically pleasing pictures, the models failed to discover the underlying structure of the state space, complicating dynamics estimation and largely invalidating costs based on distances in said space. Including the latent dynamics constraints in these end-to-end models on the other hand, yields latent spaces approaching the optimal planar embedding.\nWe test the long-term accuracy by accumulating latent and real trajectory costs to quantify whether the imagined trajectory reflects reality. The results for all models when starting from random positions at the top and executing 40 pre-computed actions are summarized in Table 1 \u2013 using a seperate test set for evaluating reconstructions. While all methods achieve a low reconstruction loss, the difference in accumulated real costs per trajectory show the superiority of the E2C model. Using the globally or locally linear E2C model, trajectories planned in latent space are as good as trajectories planned on the real state. All models besides E2C fail to give long-term predictions that result in good performance."}, {"heading": "3.3 Learning swing-up for an inverted pendulum", "text": "We next turn to the task of controlling the classical inverted pendulum system [15] from images. We create depictions of the state by rendering a fixed length line starting from the center of the image at an angle corresponding to the pendulum position. The goal in this task is to swing-up and balance an underactuated pendulum from a resting position (pendulum hanging down). Exemplary observations and reconstructions for this system are given in Figure 3(d). In the visual inverted pendulum task our algorithm faces two additional difficulties: the observed space is non-Markov, as the angular velocity cannot be inferred from a single image, and second, discretization errors due to rendering pendulum angles as small 48x48 pixel images make exact control difficult. To restore the Markov property, we stack two images (as input channels), thus observing a one-step history.\nFigure 3 shows the topology of the latent space for our model, as well as one sample trajectory in true state and latent space. The fact that the model can learn a meaningful embedding, separating\nvelocities and positions, from this data is remarkable (no other model recovered this shape). Table 1 again compares the different models quantitatively. While the E2C model is not the best in terms of reconstruction performance, it is the only model resulting in stable swing-up and balance behavior. We explain the failure of the other models with the fact that the non-linear latent dynamics model cannot be guaranteed to be linearizable for all control magnitudes, resulting in undesired behavior around unstable fixpoints of the real system dynamics, and that for this task a globally linear dynamics model is inadequate."}, {"heading": "3.4 Balancing a cart-pole and controlling a simulated robot arm", "text": "Finally, we consider control of two more complex dynamical systems from images using a six layer convolutional inference and six layer up-convolutional generative network, resulting in a 12-layer deep path from input to reconstruction. Specifically, we control a visual version of the classical cartpole system [16] from a history of two 80\u00d7 80 pixel images as well as a three-link planar robot arm based on a history of two 128 \u00d7 128 pixel images. The latent space was set to be 8-dimensional in both experiments. The real state dimensionality for the cart-pole is four and is controlled using one\naction, while for the arm the real state can be described in 6 dimensions (joint angles and velocities) and controlled using a three-dimensional action vector corresponding to motor torques.\nAs in previous experiments the E2C model seems to have no problem finding a locally linear embedding of images into latent space in which control can be performed. Figure 4 depicts exemplary images \u2013 for both problems \u2013 from a trajectory executed by our system. The costs for these trajectories (11.13 for the cart-pole, 85.12 for the arm) are only slightly worse than trajectories obtained by AICO operating on the real system dynamics starting from the same start-state (7.28 and 60.74 respectively). The supplementary material contains additional experiments using these domains."}, {"heading": "4 Comparison to recent work", "text": "In the context of representation learning for control (see Bo\u0308hmer et al. [17] for a review), deep autoencoders (ignoring state transitions) similar to our baseline models have been applied previously, e.g. by Lange and Riedmiller [18]. A more direct route to control based on image streams is taken by recent work on (model free) deep end-to-end Q-learning for Atari games by Mnih et al. [19], as well as kernel based [20] and deep policy learning for robot control [21].\nClose to our approach is a recent paper by Wahlstro\u0308m et al. [22], where autoencoders are used to extract a latent representation for control from images, on which a non-linear model of the forward dynamics is learned. Their model is trained jointly and is thus similar to the non-linear E2C variant in our comparison. In contrast to our model, their formulation requires PCA pre-processing and does neither ensure that long-term predictions in latent space do not diverge, nor that they are linearizable.\nAs stated above, our system belongs to the family of VAEs and is generally similar to recent work such as Kingma and Welling [6], Rezende et al. [7], Gregor et al. [23], Bayer and Osendorfer [24]. Two additional parallels between our work and recent advances for training deep neural networks can be observed. First, the idea of enforcing desired transformations in latent space during learning \u2013 such that the data becomes easy to model \u2013 has appeared several times already in the literature. This includes the development of transforming auto-encoders [25] and recent probabilistic models for images [26, 27]. Second, learning relations between pairs of images \u2013 although without control \u2013 has received considerable attention from the community during the last years [28, 29]. In a broader context our model is related to work on state estimation in Markov decision processes (see Langford et al. [30] for a discussion) through, e.g., hidden Markov models and Kalman filters [31, 32]."}, {"heading": "5 Conclusion", "text": "We presented Embed to Control (E2C), a system for stochastic optimal control on high-dimensional image streams. Key to the approach is the extraction of a latent dynamics model which is constrained to be locally linear in its state transitions. An evaluation on four challenging benchmarks revealed that E2C can find embeddings on which control can be performed with ease, reaching performance close to that achievable by optimal control on the real system model."}, {"heading": "Acknowledgments", "text": "We thank A. Radford, L. Metz, and T. DeWolf for sharing code, as well as A. Dosovitskiy for useful discussions. This work was partly funded by a DFG grant within the priority program \u201cAutonomous learning\u201d (SPP1597) and the BrainLinks-BrainTools Cluster of Excellence (grant number EXC 1086). M. Watter is funded through the State Graduate Funding Program of Baden-Wu\u0308rttemberg."}, {"heading": "A Supplementary to the E2C description", "text": "A.1 State transition matrix factorization and KL Divergence\nAs alluded to in the main paper, estimation of the full local state transition matrix At \u2208 Rnz\u00d7nz from Equation (8) requires the transition network to predict nz \u00d7 nz parameters. Using an arbitrary state transition matrix also \u2013 inconveniently \u2013 requires inversion of said matrix for computing the KL divergence penalty from Equation (11) (through which it is hard to backpropagate). We started our experiments using a full matrix (and only approximating all KL divergence terms), but quickly found that a rank one pertubation of the identity matrix could be used instead without loss of performance in any of our benchmarks. To the contrary, the resulting networks have fewer parameters and are thus easier to train. We here give the derivation of this process and how the KL divergence from Equation (11) can be computed. For the reformulation we represent At as At = I+vtrTt , therefore only vt and rt need to be estimated by the transition network, reducing the number of outputs for At from n2z to 2nz .\nThe KL divergence between two multivariate Gaussians is given by\nKL(N0||N1) = 1\n2\n( Tr ( \u03a3\u221211 \u03a30 ) + (\u00b51 \u2212 \u00b50)T\u03a3\u221211 (\u00b51 \u2212 \u00b50)\u2212 k + log ( det \u03a31 det \u03a30 )) . (13)\nFor a simplified notation, such that KL(N0||N1) = KL(Q\u0302||Q), let us assume\nN0 = N (\u00b50,A\u03a30AT ) = N (\u00b5t,At\u03a3tATt ) = Q\u0302, N1 = N (\u00b51,\u03a31) = N (\u00b5t+1,\u03a3t+1) = Q.\nThe main point behind the derivation presented in the following, is to make partial derivatives of the above KL divergence efficiently computable. To this end, we cannot take the trace or the determinant via numerical algorithms, because we have to be able to take the gradients in symbolic form. Aside from that, we like to process a batch of samples, so the computation should have a convenient form and not require excessive amounts of tensor products in between. We start our simplification with\nthe trace term which results in Tr ( \u03a3\u221211 \u03a30 ) = Tr ( \u03a3\u221211 A\u03a30A T )\n= Tr ( \u03a3\u221211 (I + vr T )\u03a30(I + vr T )T ) = Tr (( \u03a3\u221211 + \u03a3 \u22121 1 vr T ) ( \u03a30 + \u03a30(vr T )T\n)) = Tr ( \u03a3\u221211 \u03a30 + \u03a3 \u22121 1 \u03a30(vr T )T + \u03a3\u221211 vr T\u03a30 + \u03a3 \u22121 1 vr T\u03a30(vr T )T\n) Tr(A + B) = Tr(A) + Tr(B)\n= Tr ( \u03a3\u221211 \u03a30 ) + Tr ( \u03a3\u221211 \u03a30(vr T )T ) + Tr ( \u03a3\u221211 vr T\u03a30 ) + Tr ( \u03a3\u221211 vr T\u03a30rv T )\nTr(ABC) = Tr(CAB) = . . . = \u2211 i \u03c320,i \u03c321,i + \u2211 i \u03c320,irivi \u03c321,i + \u2211 i viri\u03c3 2 0,i \u03c321,i + Tr ( vT\u03a3\u221211 vr T\u03a30r )\n= \u2211 i \u03c320,i + 2\u03c3 2 0,iviri \u03c321,i + \u2211 i r2i \u03c3 2 i \u00b7 \u2211 i v2i \u03c32i .\nThe last equation is easy to implement and only requires summing over the non-batch dimension. The difference of means can be derived very quickly with the same summing scheme:\n(\u00b51 \u2212 \u00b50)T\u03a3\u221211 (\u00b51 \u2212 \u00b50) = \u2211 i (\u00b51 \u2212 \u00b50)2i \u03c321,i .\nIt remains the ratio of determinants, which we will simplify with the matrix determinant lemma giving\nlog\n( det \u03a31\ndet A\u03a30AT\n) = log det \u03a31 \u2212 log det ( A\u03a30A T )\n= log \u220f i \u03c321,i \u2212 log ( det A \u00b7 det \u03a30 \u00b7 det AT ) detAT = detA\n= 2 \u2211 i log \u03c31,i \u2212 log\n( (det A)2\n\u220f i \u03c320,i\n) Matrix determinant lemma\n= 2 \u2211 i log \u03c31,i \u2212 log ( 1 + vT r )2 \u2212 2\u2211 i log \u03c30,i\n= 2 (\u2211 i ( log \u03c321,i \u2212 log \u03c320,i ) \u2212 log(1 + \u2211 i viri) ) .\nPutting the above to formulas together finally yields\nKL(N0||N1) = 1\n2 (\u2211 i \u03c320,i + 2\u03c3 2 0,iviri \u03c321,i + \u2211 i r2i \u03c3 2 i \u00b7 \u2211 i v2i \u03c32i\n(14)\n+ \u2211 i (\u00b51 \u2212 \u00b50)2i \u03c321,i \u2212 k\n+ 2 (\u2211 i ( log \u03c321,i \u2212 log \u03c320,i ) \u2212 log(1 + \u2211 i viri) )) ."}, {"heading": "B Supplementary to the experimental setup", "text": ""}, {"heading": "B.1 Up-convolution", "text": "We used convolutional inference networks for the cart-pole and three-link arm task. While these networks help us overcome the problem of large input dimensionalities (i.e. 2 \u00d7 128 \u00d7 128 pixel\nimages in the three-link arm task), we still have to generate full resolution images with the decoder network. For high-dimensional images generation fully connected neural networks are simply not an option. We thus decided to use up-convolutional networks, which were recently show to be powerful models for image generation [8, 9, 33].\nTo set-up these models we basically \u201cmirror\u201d the convolutional architecture used for the encoder. More specifically for each 5 \u00d7 5 convolution followed by 2 \u00d7 2 max-pooling step in the encoder network, we introduce a 2 \u00d7 2 up-sampling and 5 \u00d7 5 convolution step in the decoder network. The complete network architecture is given below. It is similar to the up-convolution networks used in Dosovitskiy et al. [9]. The upsampling strategy we use is simple \u201cperforated\u201d upsampling as described in [34].\nB.2 Variational Autoencoder with slowness\nEnforcing temporal slowness during learning has previously been found to be a good proxy for learning representations in reinforcement learning [35, 36] and representation learning from videos [37]. We also consider a VAE variant with a slowness term on the latent representation by enforcing similarity of the encodings of temporally close images. This can be achieved by augmenting the standard VAE objective Lbound with an additional KL divergence term on the latent posterior Q\u03c6:\nLslow(xt,xt+1) = KL(Q\u03c6(zt+1|xt+1)\u2016Q\u03c6(zt|xt)). (15)\nIndeed there seems to be a slightly better coherence of similar states in the latent spaces, as e.g. depicted in Figure 8 in the main paper. Yet, our experiments show that a slowness term alone does not suffice to structure the latent space, such that locally linear predictions and control become feasible."}, {"heading": "B.3 Evaluation criteria", "text": "For comparing the performance of all variants of E2C and the baselines, the following criteria are of importance:\n\u2022 Autoencoding. Being able to reconstruct the given observations is the basic necessity for a model to work. The reconstruction cost drives a model to identify single states from its observations.\n\u2022 Decoding the next state. For any planning to be possible at all, the decoder must be able to generate the correct images from transitions the dynamics model performed. If this is not the case, we know that the latent states of the encoding and the transition model do not coincide, thus preventing any planning.\n\u2022 Optimizing latent trajectory costs. The action sequences for achieving a specified goal will be determined completely by locally linearized dynamics in the latent space. Therefore minimizing trajectory costs in latent space is, again, a necessity for successful control.\n\u2022 Optimizing real trajectory costs. While the action sequence has been determined for the latent dynamics, the deciding criterion is whether this reflects the true state trajectory costs. Therefore carrying out the \u201ddreamed\u201d plans in reality is the optimality criterion for every model. To make the different models comparable, we use the same cost matrices for evaluation, which are not necessarily the same as for optimization.\nWe reflected these four criteria in the evaluation table in the paper. For the reconstruction of the current and next state we specified the mean log loss, which is in case of the Bernoulli distributions the cross entropy error function:\nlog p(x|x\u0302) = 1 N N\u2211 n=1 nx\u2211 i=0 xn,i log x\u0302n,i + (1\u2212 xn,i) log(1\u2212 x\u0302n,i). (16)\nFor the costs a model imagines and truly achieves, we sample from different starting states and accumulate the distances in latent and true state space according to the SOC method."}, {"heading": "B.4 The three-link robot arm", "text": "The robot arm we used in the last experiment in the main paper was simulated using dynamics generated by the MapleSim http://www.maplesoft.com/products/maplesim/ simulator wrapped in Python and visualized for producing inputs to E2C using PyGame. We simulated a fairly standard robot arm with three links. The length of the links were set to 2, 1.2 and 0.7 (units were set to meters). The masses of the corresponding links were all set to 10kg.\nB.5 Evaluating the true system model\nTo compare the efficacy of different models when combined with optimal control algorithms, we always reported the cost in latent space (as used by the optimal control algorithm) as well as the \u201creal\u201d trajectory cost. To compute this real cost, we evaluated the same cost function as in the latent space (quadratic costs on the deviation from a given goal state), but using the real system states during execution and different cost matrices for a fair comparison.\nAs an upper bound on the performance achievable for control by any of the models, we also computed the true system cost by applying iLQR/AICO to a model of the real system dynamics. We have this model available since all experiments were performed in simulation."}, {"heading": "B.6 Neural Network training", "text": ""}, {"heading": "B.6.1 Experimental Setup", "text": "All the datasets were created in advance as D = {(x1,u1,x2), . . . , (xT\u22121,uT\u22121,xT )} for the training, validation and test split. While the E2C models were trained on D, the ones that do not incorporate any transition information (i.e. AE, VAE) were trained on imagesDimages = {x1, . . . ,xT } extracted from the original dataset D. The slowness VAE was trained on the pairs of images subset Dpairs = {(x1,x2), . . . , (xT\u22121,xT )} and our E2C models on the full D. In order to learn dynamics predictions for the image-only autoencoders, we extracted the latent representations and combined them with the actions from D into Ddynamics = {(z1,u1, z2), . . . , (zT\u22121,uT\u22121, zT )}. On these low-dimensional representations we trained the dynamics MLPs, thus ensuring that all methods were trained on exactly the same data.\nB.6.2 Implementation details\nWe used orthogonal weight initialization for every layer [38]. As described in the main paper, Adam [14] was used as the learning rule for all networks. We found both these techniques to be fundamentally important for stabilizing training and achieving good reconstructions for all methods. Both methods also clearly helped to cut the hyperparameter search needed for all methods to a minimum. In the process of training, we could make out three phases: the unfolding of the latent space, the overcoming of the trivial solution (the average image of the dataset) and the minimization of the latent KL term. The architectures used for our experiments were as follows (where ReLU stands for rectified linear units [39] and conv. for convolutions):"}, {"heading": "Plane", "text": "\u2022 Input: 402 image dimensions, 2 action dimensions \u2022 Latent Space dimensionality: 2 \u2022 Encoder: 150 ReLU - 150 ReLU - 150 ReLU - 4 Linear (2 for AE) \u2022 Decoder: 200 ReLU - 200 ReLU - 1600 Linear (Sigmoid for AE) \u2022 Dynamics: 100 ReLU - 100 ReLU + Output layer (except Global E2C)\n\u2013 AE, VAE, VAE with slowness, Non-linear E2C: 2 Linear \u2013 E2C: 8 Linear (2 \u00b7 2 for At, 2 \u00b7 1 for Bt, 2 for ot), \u03bb = 0.25\n\u2022 Adam: \u03b1 = 10\u22124, \u03b22 = 0.1 \u2022 Evaluation costs: Rz = 0.1 \u00b7 I, Ru = I, Ro = I\nPendulum swing-up\n\u2022 Input: 2 \u00b7 482 image dimensions, 1 action dimension \u2022 Latent Space dimensionality: 3 \u2022 Encoder: 800 ReLU - 800 ReLU - 6 Linear (3 for AE) \u2022 Decoder: 800 ReLU - 800 ReLU - 4608 Linear (Sigmoid for AE) \u2022 Dynamics: 100 ReLU - 100 ReLU + Output layer (except Global E2C)\n\u2013 AE, VAE, VAE with slowness, Non-linear E2C: 3 Linear \u2013 E2C: 12 Linear (2 \u00b7 3 for At = (I + vtrTt ), 3 \u00b7 1 for Bt, 3 for bt), \u03bb = 0.25\n\u2022 Adam: \u03b1 = 3 \u00b7 10\u22124, \u03b22 = 0.1 \u2022 Evaluation costs: Rz = I, Ru = 0.1I"}, {"heading": "Cart-Pole balancing", "text": "\u2022 Input: 2 \u00b7 802 image dimensions, 1 action dimension \u2022 Latent Space dimensionality: 8 \u2022 Encoder: 32\u00d7 5\u00d7 5 ReLU - 32\u00d7 5\u00d7 5 ReLU - 32\u00d7 5\u00d7 5 ReLU - 512 ReLU - 512 ReLU \u2022 Decoder: 512 ReLU - 512 ReLU - 2\u00d72 up-sampling - 32\u00d75\u00d75 ReLU - 2\u00d72 up-sampling\n- 32\u00d7 5\u00d7 5 ReLU - 2\u00d7 2 up-sampling - 32\u00d7 5\u00d7 5 conv. ReLU \u2022 Dynamics: 200 ReLU - 200 ReLU + 32 Linear (2 \u00b7 8 for At = (I + vtrTt ), 8 \u00b7 1 for Bt, 8\nfor bt), \u03bb = 1 \u2022 Adam: \u03b1 = 10\u22124, \u03b22 = 0.1 \u2022 Evaluation costs: Rz = I, Ru = I"}, {"heading": "Three-link arm", "text": "\u2022 Input: 2 \u00b7 1282 image dimensions, 3 action dimensions \u2022 Latent Space dimensionality: 8 \u2022 Encoder: 64 \u00d7 5 \u00d7 5 conv. ReLU - 2 \u00d7 2 max-pooling - 32 \u00d7 5 \u00d7 5 conv. ReLU - 2 \u00d7 2\nmax-pooling - 32\u00d7 5\u00d7 5 conv. ReLU - 2\u00d7 2 max-pooling - 512 ReLU - 512 ReLU \u2022 Decoder: 512 ReLU - 512 ReLU - 2\u00d72 up-sampling - 32\u00d75\u00d75 ReLU - 2\u00d72 up-sampling\n- 32\u00d7 5\u00d7 5 ReLU - 2\u00d7 2 up-sampling - 64\u00d7 5\u00d7 5 conv. ReLU \u2022 Dynamics: 200 ReLU - 200 ReLU + 48 Linear (2 \u00b7 8 for At = (I + vtrTt ), 8 \u00b7 3 for Bt, 8\nfor bt), \u03bb = 1 \u2022 Adam: \u03b1 = 10\u22124, \u03b22 = 0.1 \u2022 Evaluation costs: Rz = I, Ru = 0.001I"}, {"heading": "C Supplementary evaluations", "text": ""}, {"heading": "C.1 Trajectories for plane and pendulum", "text": "To qualitatively measure the predictive accuracy, the starting state for a trajectory is encoded and the actions are applied on the latent representation. After each transition, the predicted latent position is decoded and visualized. In this manner, multi-step predictions can be generated for the planar system in Figure 5 and for the inverted pendulum in Figures 6 and 7.\nC.2 Inverted pendulum latent space\nEncoding the pendulum depictions into a 3-dimensional latent space allows for a visual comparison in Figure 8 ."}, {"heading": "C.3 Trajectories for cart-pole and three-link arm", "text": "Finally \u2013 similar to the images in Section C.1 \u2013 Figure 9 shows multi-step predictions for the cartpole system. We depict important cases: (1) a long-term prediction with the cart-pole standing still (essentially the unstable fix-point of the underlying dynamics); (2) the cart-pole moving to the right, changing the direction of the poles angular velocity (middle column); (3) and the pole moving farthest to the right. The long-term predictions by the E2C model are all of high quality. Note that for the uncontrolled dynamics the predictions show a slight bias of the pole moving to the right (an effect that we consistently saw in trained models for the cart-pole). We attribute this problem to the fact that discretization errors in the image rendering process of the pole angle make it hard to predict small velocities accurately.\nC.4 Exemplary trajectory taken for three-link arm task\nFigure 10 shows a segment of a controlled trajectory for the three-link arm as executed by the E2C system. Note that, in contrast to other figures in this supplementary material, it does not show a long-term prediction but rather 10 steps of a trajectory (together with one-step-ahead predictions) that was taken by the E2C system when combined with model predictive control. For additional visualizations and controlled trajectories for all tasks we refer to the supplementary video.\nC.5 Comparison of different models for cart-pole and robot arm\nIn Table 2 we compare our variety of models in terms of real trajectory cost and task success percentage on the cart-pole and the robot arm. All results are averaged over 30 different starting states with a fixed goal state.\nThe cart-pole always starts in the goal state (zero angle and zero velocity) with small additive Gaussian noise (\u03c3 = 0.01). Success is defined as preventing the pole from falling below an angle of \u00b10.85 rad. The three-link arm system begins in a random configuration and the goal is to to unroll all joints (e.g. make all angles zero) and stay -close to that position.\nThe results show that only E2C and its non-linear variant can perform this task successfully, although there is still a large performance gap between the two. We conclude, that the error of linearizing non-linear dynamics after training the corresponding model grows to the point of no longer allowing accurate control for the system."}, {"heading": "No Control Moving leftMoving right", "text": "C.6 Comparison of trajectory optimizers for cart-pole and robot arm\nTo compare how well AICO deals with the covariance matrices estimated in latent space we performed an additional experiment on the cart-pole and three-link robot arm task comparing it to iLQR. We performed model predictive control using the locally linear E2C model starting in 10 different start states each. The remaining settings are as given in Section C.5.\nAs reported in Table 3, both methods performed about the same for these tasks, indicating that the covariance matrices estimated by our model do not \u201churt\u201d planning, but considering them does not improve performance either."}], "references": [{"title": "Differential dynamic programming", "author": ["D. Jacobson", "D. Mayne"], "venue": "American Elsevier,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1970}, {"title": "A generalized iterative LQG method for locally-optimal feedback control of constrained nonlinear stochastic systems", "author": ["E. Todorov", "W. Li"], "venue": "ACC. IEEE,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2005}, {"title": "Receding horizon differential dynamic programming", "author": ["Y. Tassa", "T. Erez", "W.D. Smart"], "venue": "Proc. of NIPS,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2008}, {"title": "Probabilistic differential dynamic programming", "author": ["Y. Pan", "E. Theodorou"], "venue": "Proc. of NIPS,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Variational policy search via trajectory optimization", "author": ["S. Levine", "V. Koltun"], "venue": "Proc. of NIPS,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Auto-encoding variational bayes", "author": ["D.P. Kingma", "M. Welling"], "venue": "Proc. of ICLR,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"], "venue": "Proc. of ICML,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Deconvolutional networks", "author": ["M.D. Zeiler", "D. Krishnan", "G.W. Taylor", "R. Fergus"], "venue": "CVPR,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "Learning to generate chairs with convolutional neural networks", "author": ["A. Dosovitskiy", "J.T. Springenberg", "T. Brox"], "venue": "Proc. of CVPR,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Optimal Control and Estimation", "author": ["R.F. Stengel"], "venue": "Dover Publications,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1994}, {"title": "Iterative Linear Quadratic Regulator Design for Nonlinear Biological Movement Systems", "author": ["W. Li", "E. Todorov"], "venue": "Proc. of ICINCO,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2004}, {"title": "Robot Trajectory Optimization using Approximate Inference", "author": ["M. Toussaint"], "venue": "Proc. of ICML,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "An introduction to variational methods for graphical models", "author": ["M.I. Jordan", "Z. Ghahramani", "T.S. Jaakkola", "L.K. Saul"], "venue": "Machine Learning,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1999}, {"title": "Adam: A method for stochastic optimization", "author": ["D. Kingma", "J. Ba"], "venue": "Proc. of ICLR,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2015}, {"title": "An approach to fuzzy control of nonlinear systems; stability and design issues", "author": ["H. Wang", "K. Tanaka", "M. Griffin"], "venue": "IEEE Trans. on Fuzzy Systems, 4(1),", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1996}, {"title": "Introduction to Reinforcement Learning", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT Press, Cambridge, MA, USA, 1st edition,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1998}, {"title": "Autonomous learning of state representations for control", "author": ["W. B\u00f6hmer", "J.T. Springenberg", "J. Boedecker", "M. Riedmiller", "K. Obermayer"], "venue": "KI - K\u00fcnstliche Intelligenz,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep auto-encoder neural networks in reinforcement learning", "author": ["S. Lange", "M. Riedmiller"], "venue": "Proc. of IJCNN,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski", "S. Petersen", "C. Beattie", "A. Sadik", "I. Antonoglou", "H. King", "D. Kumaran", "D. Wierstra", "S. Legg", "D. Hassabis"], "venue": "Nature, 518(7540), 02", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning of non-parametric control policies with highdimensional state features", "author": ["H. van Hoof", "J. Peters", "G. Neumann"], "venue": "In Proc. of AISTATS,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2015}, {"title": "End-to-end training of deep visuomotor policies", "author": ["S. Levine", "C. Finn", "T. Darrell", "P. Abbeel"], "venue": "CoRR, abs/1504.00702,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2015}, {"title": "From pixels to torques: Policy learning with deep dynamical models", "author": ["N. Wahlstr\u00f6m", "T.B. Sch\u00f6n", "M.P. Deisenroth"], "venue": "CoRR, abs/1502.02251,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2015}, {"title": "DRAW: A recurrent neural network for image generation", "author": ["K. Gregor", "I. Danihelka", "A. Graves", "D. Rezende", "D. Wierstra"], "venue": "Proc. of ICML,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning stochastic recurrent networks", "author": ["J. Bayer", "C. Osendorfer"], "venue": "NIPS 2014 Workshop on Advances in Variational Inference,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2014}, {"title": "Transforming auto-encoders", "author": ["G. Hinton", "A. Krizhevsky", "S. Wang"], "venue": "Proc. of ICANN,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "Nice: Non-linear independent components estimation", "author": ["L. Dinh", "D. Krueger", "Y. Bengio"], "venue": "CoRR, abs/1410.8516,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2015}, {"title": "Transformation properties of learned visual representations", "author": ["T. Cohen", "M. Welling"], "venue": "ICLR,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2015}, {"title": "Dynamical binary latent variable models for 3d human pose tracking", "author": ["G.W. Taylor", "L. Sigal", "D.J. Fleet", "G.E. Hinton"], "venue": "Proc. of CVPR,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2010}, {"title": "Learning to relate images", "author": ["R. Memisevic"], "venue": "IEEE Trans. on PAMI, 35(8):1829\u20131846,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2013}, {"title": "Learning nonlinear dynamic models", "author": ["J. Langford", "R. Salakhutdinov", "T. Zhang"], "venue": "ICML,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2009}, {"title": "Bayesian Forecasting and Dynamic Models (Springer Series in Statistics)", "author": ["M. West", "J. Harrison"], "venue": "Springer-Verlag, February", "citeRegEx": "31", "shortCiteRegEx": null, "year": 1997}, {"title": "Latent Kullback Leibler control for continuous-state systems using probabilistic graphical models", "author": ["T. Matsubara", "V. G\u00f3mez", "H.J. Kappen"], "venue": "UAI,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep convolutional inverse graphics network", "author": ["T.D. Kulkarni", "W. Whitney", "P. Kohli", "J.B. Tenenbaum"], "venue": "CoRR, abs/1503.03167,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}, {"title": "Image super-resolution with fast approximate convolutional sparse coding", "author": ["C. Osendorfer", "H. Soyer", "P. van der Smagt"], "venue": "In Proc. of ICONIP, Lecture Notes in Computer Science. Springer International Publishing,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2014}, {"title": "State representation learning in robotics: Using prior knowledge about physical interaction", "author": ["R. Jonschkowski", "O. Brock"], "venue": "Proc. of RSS,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2014}, {"title": "Reinforcement learning on slow features of high-dimensional input streams", "author": ["R. Legenstein", "N. Wilbert", "L. Wiskott"], "venue": "PLoS Computational Biology,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2010}, {"title": "Unsupervised learning of visual invariance with temporal coherence", "author": ["W. Zou", "A. Ng", "K. Yu"], "venue": "NIPS*2011 Workshop on Deep Learning and Unsupervised Feature Learning,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2011}, {"title": "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks", "author": ["A.M. Saxe", "J.L. McClelland", "S. Ganguli"], "venue": "Proc. of ICLR,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep sparse rectifier neural networks", "author": ["X. Glorot", "A. Bordes", "Y. Bengio"], "venue": "AISTATS. Journal of Machine Learning Research - Workshop and Conference Proceedings,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "A prominent class of algorithms that aim to solve this problem are model-based locally optimal (stochastic) control algorithms such as iLQG control [1, 2], which approximate the general nonlinear control problem via local linearization.", "startOffset": 148, "endOffset": 154}, {"referenceID": 1, "context": "A prominent class of algorithms that aim to solve this problem are model-based locally optimal (stochastic) control algorithms such as iLQG control [1, 2], which approximate the general nonlinear control problem via local linearization.", "startOffset": 148, "endOffset": 154}, {"referenceID": 2, "context": "When combined with receding horizon control [3], and machine learning methods for learning approximate system models, such algorithms are powerful tools for solving complicated control problems [3, 4, 5]; however, they either rely on a known system model or require the design of relatively low-dimensional state representations.", "startOffset": 44, "endOffset": 47}, {"referenceID": 2, "context": "When combined with receding horizon control [3], and machine learning methods for learning approximate system models, such algorithms are powerful tools for solving complicated control problems [3, 4, 5]; however, they either rely on a known system model or require the design of relatively low-dimensional state representations.", "startOffset": 194, "endOffset": 203}, {"referenceID": 3, "context": "When combined with receding horizon control [3], and machine learning methods for learning approximate system models, such algorithms are powerful tools for solving complicated control problems [3, 4, 5]; however, they either rely on a known system model or require the design of relatively low-dimensional state representations.", "startOffset": 194, "endOffset": 203}, {"referenceID": 4, "context": "When combined with receding horizon control [3], and machine learning methods for learning approximate system models, such algorithms are powerful tools for solving complicated control problems [3, 4, 5]; however, they either rely on a known system model or require the design of relatively low-dimensional state representations.", "startOffset": 194, "endOffset": 203}, {"referenceID": 5, "context": "To learn such a latent space we propose a new deep generative model belonging to the class of variational autoencoders [6, 7] that is derived from an iLQG formulation in latent space.", "startOffset": 119, "endOffset": 125}, {"referenceID": 6, "context": "To learn such a latent space we propose a new deep generative model belonging to the class of variational autoencoders [6, 7] that is derived from an iLQG formulation in latent space.", "startOffset": 119, "endOffset": 125}, {"referenceID": 7, "context": "As an aside, we also validate that deep up-convolutional networks [8, 9] are powerful generative models for large images.", "startOffset": 66, "endOffset": 72}, {"referenceID": 8, "context": "As an aside, we also validate that deep up-convolutional networks [8, 9] are powerful generative models for large images.", "startOffset": 66, "endOffset": 72}, {"referenceID": 9, "context": ", st can be inferred from zt alone, and f lat is differentiable, the cost-minimizing controls can be computed from J(z1:T ,u1:T ) via SOC algorithms [10].", "startOffset": 149, "endOffset": 153}, {"referenceID": 10, "context": "In combination with Equation (4) this gives us a local linear-quadratic-Gaussian formulation at each time step t which can be solved by SOC algorithms such as iterative linear-quadratic regulation (iLQR) [11] or approximate inference control (AICO) [12].", "startOffset": 204, "endOffset": 208}, {"referenceID": 11, "context": "In combination with Equation (4) this gives us a local linear-quadratic-Gaussian formulation at each time step t which can be solved by SOC algorithms such as iterative linear-quadratic regulation (iLQR) [11] or approximate inference control (AICO) [12].", "startOffset": 249, "endOffset": 253}, {"referenceID": 12, "context": "[13] for an overview) we resort to sampling zt from an approximate posterior distribution Q\u03c6(Z|X) with parameters \u03c6.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "It additionally comes with the benefit that we can use the reparameterization trick [6, 7] to backpropagate gradients of a loss function based on samples through the latent distribution.", "startOffset": 84, "endOffset": 90}, {"referenceID": 6, "context": "It additionally comes with the benefit that we can use the reparameterization trick [6, 7] to backpropagate gradients of a loss function based on samples through the latent distribution.", "startOffset": 84, "endOffset": 90}, {"referenceID": 7, "context": "We consider two different network types for our model: Standard fully connected neural networks with up to three layers, which work well for moderately sized images, are used for the planar and swing-up experiments; A deep convolutional network for the encoder in combination with an up-convolutional network as the decoder which, in accordance with recent findings from the literature [8, 9], we found to be an adequate model for larger images.", "startOffset": 386, "endOffset": 392}, {"referenceID": 8, "context": "We consider two different network types for our model: Standard fully connected neural networks with up to three layers, which work well for moderately sized images, are used for the planar and swing-up experiments; A deep convolutional network for the encoder in combination with an up-convolutional network as the decoder which, in accordance with recent findings from the literature [8, 9], we found to be an adequate model for larger images.", "startOffset": 386, "endOffset": 392}, {"referenceID": 13, "context": "Training was performed using Adam [14] throughout all experiments.", "startOffset": 34, "endOffset": 38}, {"referenceID": 10, "context": "To perform optimal control in the latent space of different models, we employ two trajectory optimization algorithms: iterative linear quadratic regulation (iLQR) [11] (for the plane and inverted pendulum) and approximate inference control (AICO) [12] (all other experiments).", "startOffset": 163, "endOffset": 167}, {"referenceID": 11, "context": "To perform optimal control in the latent space of different models, we employ two trajectory optimization algorithms: iterative linear quadratic regulation (iLQR) [11] (for the plane and inverted pendulum) and approximate inference control (AICO) [12] (all other experiments).", "startOffset": 247, "endOffset": 251}, {"referenceID": 2, "context": "Except for the experiments on the planar system, control was performed in a model predictive control fashion using the receding horizon scheme introduced in [3].", "startOffset": 157, "endOffset": 160}, {"referenceID": 14, "context": "We next turn to the task of controlling the classical inverted pendulum system [15] from images.", "startOffset": 79, "endOffset": 83}, {"referenceID": 15, "context": "Specifically, we control a visual version of the classical cartpole system [16] from a history of two 80\u00d7 80 pixel images as well as a three-link planar robot arm based on a history of two 128 \u00d7 128 pixel images.", "startOffset": 75, "endOffset": 79}, {"referenceID": 16, "context": "[17] for a review), deep autoencoders (ignoring state transitions) similar to our baseline models have been applied previously, e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "by Lange and Riedmiller [18].", "startOffset": 24, "endOffset": 28}, {"referenceID": 18, "context": "[19], as well as kernel based [20] and deep policy learning for robot control [21].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[19], as well as kernel based [20] and deep policy learning for robot control [21].", "startOffset": 30, "endOffset": 34}, {"referenceID": 20, "context": "[19], as well as kernel based [20] and deep policy learning for robot control [21].", "startOffset": 78, "endOffset": 82}, {"referenceID": 21, "context": "[22], where autoencoders are used to extract a latent representation for control from images, on which a non-linear model of the forward dynamics is learned.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "As stated above, our system belongs to the family of VAEs and is generally similar to recent work such as Kingma and Welling [6], Rezende et al.", "startOffset": 125, "endOffset": 128}, {"referenceID": 6, "context": "[7], Gregor et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 22, "context": "[23], Bayer and Osendorfer [24].", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "[23], Bayer and Osendorfer [24].", "startOffset": 27, "endOffset": 31}, {"referenceID": 24, "context": "This includes the development of transforming auto-encoders [25] and recent probabilistic models for images [26, 27].", "startOffset": 60, "endOffset": 64}, {"referenceID": 25, "context": "This includes the development of transforming auto-encoders [25] and recent probabilistic models for images [26, 27].", "startOffset": 108, "endOffset": 116}, {"referenceID": 26, "context": "This includes the development of transforming auto-encoders [25] and recent probabilistic models for images [26, 27].", "startOffset": 108, "endOffset": 116}, {"referenceID": 27, "context": "Second, learning relations between pairs of images \u2013 although without control \u2013 has received considerable attention from the community during the last years [28, 29].", "startOffset": 157, "endOffset": 165}, {"referenceID": 28, "context": "Second, learning relations between pairs of images \u2013 although without control \u2013 has received considerable attention from the community during the last years [28, 29].", "startOffset": 157, "endOffset": 165}, {"referenceID": 29, "context": "[30] for a discussion) through, e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": ", hidden Markov models and Kalman filters [31, 32].", "startOffset": 42, "endOffset": 50}, {"referenceID": 31, "context": ", hidden Markov models and Kalman filters [31, 32].", "startOffset": 42, "endOffset": 50}, {"referenceID": 0, "context": "References [1] D.", "startOffset": 11, "endOffset": 14}, {"referenceID": 1, "context": "[2] E.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[3] Y.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] Y.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] S.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] D.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[7] D.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[8] M.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "[9] A.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "[10] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[11] W.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[12] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] D.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15] H.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[16] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17] W.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[18] S.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[19] V.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20] H.", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[21] S.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[22] N.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[23] K.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "[24] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[25] G.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "[26] L.", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "[27] T.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "[28] G.", "startOffset": 0, "endOffset": 4}, {"referenceID": 28, "context": "[29] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "[30] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[31] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 31, "context": "[32] T.", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "[33] T.", "startOffset": 0, "endOffset": 4}, {"referenceID": 33, "context": "[34] C.", "startOffset": 0, "endOffset": 4}, {"referenceID": 34, "context": "[35] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 35, "context": "[36] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[37] W.", "startOffset": 0, "endOffset": 4}, {"referenceID": 37, "context": "[38] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 38, "context": "[39] X.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "We thus decided to use up-convolutional networks, which were recently show to be powerful models for image generation [8, 9, 33].", "startOffset": 118, "endOffset": 128}, {"referenceID": 8, "context": "We thus decided to use up-convolutional networks, which were recently show to be powerful models for image generation [8, 9, 33].", "startOffset": 118, "endOffset": 128}, {"referenceID": 32, "context": "We thus decided to use up-convolutional networks, which were recently show to be powerful models for image generation [8, 9, 33].", "startOffset": 118, "endOffset": 128}, {"referenceID": 8, "context": "[9].", "startOffset": 0, "endOffset": 3}, {"referenceID": 33, "context": "The upsampling strategy we use is simple \u201cperforated\u201d upsampling as described in [34].", "startOffset": 81, "endOffset": 85}, {"referenceID": 34, "context": "Enforcing temporal slowness during learning has previously been found to be a good proxy for learning representations in reinforcement learning [35, 36] and representation learning from videos [37].", "startOffset": 144, "endOffset": 152}, {"referenceID": 35, "context": "Enforcing temporal slowness during learning has previously been found to be a good proxy for learning representations in reinforcement learning [35, 36] and representation learning from videos [37].", "startOffset": 144, "endOffset": 152}, {"referenceID": 36, "context": "Enforcing temporal slowness during learning has previously been found to be a good proxy for learning representations in reinforcement learning [35, 36] and representation learning from videos [37].", "startOffset": 193, "endOffset": 197}, {"referenceID": 37, "context": "2 Implementation details We used orthogonal weight initialization for every layer [38].", "startOffset": 82, "endOffset": 86}, {"referenceID": 13, "context": "As described in the main paper, Adam [14] was used as the learning rule for all networks.", "startOffset": 37, "endOffset": 41}, {"referenceID": 38, "context": "The architectures used for our experiments were as follows (where ReLU stands for rectified linear units [39] and conv.", "startOffset": 105, "endOffset": 109}], "year": 2015, "abstractText": "We introduce Embed to Control (E2C), a method for model learning and control of non-linear dynamical systems from raw pixel images. E2C consists of a deep generative model, belonging to the family of variational autoencoders, that learns to generate image trajectories from a latent space in which the dynamics is constrained to be locally linear. Our model is derived directly from an optimal control formulation in latent space, supports long-term prediction of image sequences and exhibits strong performance on a variety of complex control problems.", "creator": "LaTeX with hyperref package"}}}