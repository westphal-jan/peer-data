{"id": "1508.04872", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Aug-2015", "title": "Warehouse Layout Method Based on Ant Colony and Backtracking Algorithm", "abstract": "Warehouse important one this entire given differences although entire company. Therefore, to but necessary return improve Warehouse Management System (WMS) once have new context characteristic there can able the layout much the storage goods. In this report come recommendations appears supply mill layout method based over ant protectorate algorithm and rooseveltian algorithm. The method important two least steps. First, it excess a solutions parameter tree first backtracking algorithm. Then second, however deducts before creating parameter by tools a effects of ant mediterranean generalizes instead disavow computational. This method was flu by slightly two went any means build the elephant without decided could start the space different were scenarios. The whereby job 4-2. 309. 38. eight speed to construct their grove had 40. 23 45 (impressive finding) for 33. 41 off (aftermath similar) all pick all several hotel. This procedure \u201d although will none an smaller alternative needed for outside layout system.", "histories": [["v1", "Thu, 20 Aug 2015 04:12:54 GMT  (304kb)", "http://arxiv.org/abs/1508.04872v1", "5 pages, published in proceeding of the 14th IAPR International Conference on Quality in Research (QIR)"]], "COMMENTS": "5 pages, published in proceeding of the 14th IAPR International Conference on Quality in Research (QIR)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ardy wibowo haryanto", "adhi kusnadi", "yustinus eko soelistio"], "accepted": false, "id": "1508.04872"}, "pdf": {"name": "1508.04872.pdf", "metadata": {"source": "CRF", "title": "Warehouse Layout Method Based on Ant Colony and Backtracking Algorithm", "authors": ["Ardy Wibowo Haryanto", "Adhi Kusnadi", "Yustinus Eko Soelistio"], "emails": ["www.awh.tb1@gmail.com,", "adhikusnadi@yahoo.com,", "yustinus.eko@umn.ac.id"], "sections": [{"heading": null, "text": "company. Therefore, it is necessary to improve Warehouse Management System (WMS) to have a simple function that can determine the layout of the storage goods. In this paper we propose an improved warehouse layout method based on ant colony algorithm and backtracking algorithm. The method works on two steps. First, it generates a solutions parameter tree from backtracking algorithm. Then second, it deducts the solutions parameter by using a combination of ant colony algorithm and backtracking algorithm. This method was tested by measuring the time needed to build the tree and to fill up the space using two scenarios. The method needs 0.294 to 33.15 seconds to construct the tree and 3.23 seconds (best case) to61.41 minutes (worst case) to fill up the warehouse. This method is proved to be an attractive alternative solution for warehouse layout system.\nKeywords\u2014warehouse layout; block stacking method; ant\ncolony algorithm; backtracking algorithm.\nI. PRELIMINARY\nWarehouse layout configuration problem is still an active area of research. One study conducted by Ahmad Hambali (2011), proposes a warehouse layout method based on block stacking and ant colony algorithm (ACA).The method works by choosing the best combination that have been produced by a group of ants that have chosen the route in stages based on the value of the function of pheromones and heuristic information best. It can explore all the possibilities that exist and adjust for changes in real time. Unfortunately its application limited by no categorization of goods and the number and size of the goods has been known. Another study conducted by Liliana, Gregorius Satia Budhi, and Arief Abadi (2010), propose a warehouse layout method based on backtracking algorithm (BA). The method work by checking each of the possible solution to get the best solution based on the similarity of category and availability. It can find the best solution however it complex and needs a considerably long processing time.\nIt is the aim of this paper to suggest another warehouse layout method that based on ACA and BA that can work that is (1) fast, (2) works with multiple goods\u2019 categories, (3) provide the flexibility for the number and size of the goods. The outline of this paper is as follows. In section II we convey the studies that have been conducted. Then in section III, we describe the proposed method.\nII. THEORIES AND PREVIOUS STUDIES"}, {"heading": "A. Ant Colony Algorithm", "text": "ACA can be used as an alternative method to solve the optimization problem of space (Hambali: 2011). ACA is a parameter searching method that mimics the behavior of ant colony to looking for food.ACA works in two steps. In the first step, the search begins with the gradually searching each state until a solution is found. The selection is based on the greatest probability value of the pheromone trail and heuristic information contained in each state that calculated using the formula:\nwhere is the probability of choosing a state, is\nintensity of the pheromone trail for inter-state, is visibility\nof a solution that would selected by ant, \u03b1 is parameter that controls the intensity of pheromone trail where \u03b1 \u2265 0, \u03b2 is parameter that control the visibility where \u03b2 \u2265 0. Pheromone trail corresponds to the quality of the solutions that have been produced by the ant from its prior movement, while heuristic information corresponds to the data input of a problem. This searching is gradually carried out by all ants in the colony (an ant colony).\nThe second step, the method select the best solution from a set of probable solutions that generated in the previous step. The searching will be processed by all colony (the process is measured by the number of cycles).The best solution obtained from an ant colony will be compared with the best solution obtained from another ant colony (other cycles). After each cycle, the method recalculate the new pheromone trail in each state using the formula:\nwhere is intensity of the pheromone trail for inter-state\nand\u03c1 is constant evaporation of pheromone trail, 0 > \u03c1 > 1."}, {"heading": "B. Backtracking Algorithm", "text": "BA can be used as an alternative solution to solve goods layout problem in a parameter space (Liliana: 2010). Arrangement begins with determining the location of the same goods as the new incoming goods to be placed. If there\nThis is the non-final version of the paper. The final version is published in the 14th IAPR International Conference on Quality in Research (QIR) on 18-22 May 2015 (http://qir.eng.ui.ac.id/front/). All citation should be directed to the final version. are goods that have not been placed at this early stage, the next stage will be called in recursion manner. Backtracking is applied when the solution has to be tracked back to its previous steps. BA has the advantages of its ability to obtain the best results from a set of combinations by exhaustively searching in all possible solution space. However, this algorithm is not efficient because the search process could take a long time when the search space is large.\nIII. PROPOSED METHOD\nThe propose warehouse layout method consists of two steps. First, the method constructs a solution tree using BA. Then second, it searches for the best solution using ACA and BA."}, {"heading": "A. TreeConstructionStep", "text": "The tree consists of five levels. The first level is the category of goods in warehouse layout (e.g. food, glassware, electronic. The second level is the storage space which is measured in terms of blocks. The block is a three dimensional storage space (in Euclidean sense) that has length x (third level), height y (fourth level), and width z (fifth level). The size of all levels can predefine. It is common that a binary tree structure is used as a solutions tree, however the binary structure will pose complexity problem when the solutions form an unbalance tree. Therefore we propose to use a tree\u2019s structure that each node has exactly five child nodes.\nEach node in the tree stores the (1) name of the node, (2) node binary status (0 = empty, 1 = full), (3) intensity of pheromone trail for inter-state( ),(4) visibility of a solution\nthat would selected by ant ( , and (5)amount of pheromone\ntrail deposited ( ).The default parameter for each node\nare , and with a value of zero, and . The visualisation\nof the construction step can be seen in figure 3.\nFig. 2. Tree construction flowchart"}, {"heading": "B. Solution Searching Step", "text": "To search the best fit solution from the tree, this method employ ACA and BA in cascading manners.ACA was first used in the search process and BA as backup when ACA cannot find a fit solution. Each ant will perform a search from the first to fifth level by tracking the amount of pheromone trail and probability exists on the each node. If ACA can not find a fit solution, then BA will be employed with leaf nodes (the solution does not fit the previously obtained) as a starting point.\nACA is used in this method provide the flexibility for the number of goods (the number of goods to be laid out unknown) and has only use one cycle.\nAll node, except the root, are initialized by using the probability of a number of possibilities existas follows:\nCategory Node\nBlock Node\nDescription, * = block volume that has the same category.\nBlock Length (x) Node\nBlock Height (y) Node\nBlock Width (z) Node\nAn incoming goods is regarded as an ant. An ant will move from node i (the parent node) to node j (child nodes)\nThis is the non-final version of the paper. The final version is published in the 14th IAPR International Conference on Quality in Research (QIR) on 18-22 May 2015 (http://qir.eng.ui.ac.id/front/). All citation should be directed to the final version. based on the greatest probability value calculation results based on the pheromone trail and heuristic information contained in each state.\nPrior to the movement from current node to one of its child nodes, do validation against the fifth child node whether the fifth child nodes and child nodes of the child nodes, and so on, have an empty space or not. If not, then value of the\nnode and value of nodefrom current node changed to zero\nand go up to the parent node of the current node. By changing the value of nodefrom current node, then the\nprobability of election of the nodes become smaller.\nFor the movement of ants from root node to category node, do addition against value of the category node if the\ngoods that entered has the same category with the category nodes. If the goods category are not in accordance with all the category node at first level, then the ants move to the parent node (added nodes) of the node category at second level, and so on.\nFor the movement of ants from category node to block node, do reduction against value of the block node to be\nzero if the goods that entered has the size (length, width, height) or volume larger than the size or volume of the block nodes. If the size or volume of the goods do not conform to any size or volume block node at first level, then automatically the ant moves to the parent node (added nodes) from block node at second level, and so on. If there is no space at all block nodes that has the same category, then in the end the ants move towards the category node that have different categories from the category of goods that entered. If that happens, then the search process is stopped (space not found).\nIf the divisor is zero (due all child node is zero), then\nrecalculate the divisor value by giving value for all child\nnodes with a default value of established, namely 0.1.\nIf found enough free space to put a goods, then the intensity of the pheromone trail for inter-state( ) and the\namount of pheromone trail deposited ( ) for every edge\nthat is passed from the root node to a leaf node until to find a leaf node to be updated. In addition, update value with a value of one and visibility of a solution that would be chosen by ( with a value of zero for all leaf nodes that describe the\nsmallest unit of storage volume has been filled goods."}, {"heading": "C. Backtracking Algorithm Flowchart", "text": "If ACA can not find a fit solution, then this method use BA as alternative with leaf nodes (thesolution does not fit the previously obtained) as a starting point. Backtracking is done until obtain space to put the pieces of the goods or all nodes that are in the same category have visited (there is not enough free space to put a goods).\nIV. TEST AND COMPARISON\nThe method is tested using two scenarios. The first scenario test the method using homogeneous goods size as input set. The second scenario test the method using heterogeneous goods size as input set.\nIn the first scenario, the number of category is determine with . Each category has the number of block which determined with . The size of each block is determine with .The size of goods is\ndetermine with .The method run until\ngoods can no longer be accommodated. To finish the first scenario, the method needs2.294 secondsto54.19 minutes with 100% space occupation.\nThe x-axis with index 1 to 18 describe the increase in the size of the space. The y-axis describe time process. An increase in the size of the space is influenced by increasing the number of categories, the number of blocks, and the size of blocks. From Fig. 6., it can be seen that the increase in the size of the space causes a greater time process for process in the arrangement of goods that have the same size\nIn the second scenario, the number of category is determine with . Each category has the number of block which determined with . The size of each block is determine with .The size of goods is = random between 1 until 1/3 , = random\nbetween1 until 1/3 , = random between1 until 1/3 .In\nthis scenario, the method needs 3.225 seconds to 61.41 minutes to be completed. The occupation from this scenario is 97.19% to 100%.\nFrom Fig. 7., it can be seen that the increase in the size of the space causes a greater time process for process in the arrangement of goods that have the random size. The arrangement of goods with the same size and the arrangement of the goods with random sizes have a similiar time process which indicates that this method can be used to arrange the goods that have the same size and different sizes.\nV. DISCUSSION\nThe method has been tested and shows a promising result. The test from both scenarios show thatthe methodhas good level of speed and occupation, works with multiple goods\u2019 categories, and provide the flexibility for the number and size of the goods.\nHowever, the performance of this method is still limited due tothe size of the tree that greatly influence the performance of search. Its usability is also still limited only for block and goods with square shape.\nVI. CONCLUSION\nA new alternative warehouse layout approach based on ACA, BA, and block stacking method successfully applied in the goods layout application. This method combines the use of BA and ACA, which in previous studies ACA used to organize a number of goods that have been known and BA used to manage the goods where it is possible to have different categories (however it is complex and needs a considerably long processing time). It is fast, works with multiple goods\u2019 categories, and provides the flexibility for the number and size of the goods.\nFor future development, exploring a new tree structure or a data structure can be can be done to increase the processing speed. The application can be modified to handle the block and goods in addition to the form of cubes and blocks."}], "references": [{"title": "Septiandri., \u201cImplementasi Algoritma BFS dan DFS dalam Penyelesaian Toke Flip Puzzle,", "author": ["A. Akbar"], "venue": "Makalah IF3051 Strategi Algoritma,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Pembangunan Aplikasi Penyusunan Jadwal Kuliah Menggunakan Algoritma Semut\u201d, Jurusan Teknik Elektro", "author": ["A. Fernandez", "S.T.E. Handoyo", "M.T", "S.T.M. Somantri"], "venue": "Fakultas Teknik, Universitas Diponegoro,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Y", "author": ["A. Hambali", "I. Prasetyaningrum"], "venue": "Yuliana,\u201cSistem Alokasi Penyimpanan Barang pada Gudang,\u201d EEPIS Final Project", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "S", "author": ["A. Leksono"], "venue": "Sarwadi\u201cAlgoritma Ant Colony Optimization (ACO) untuk menyelesaikan Traveling Salesman Problem (TSP),\u201dUniversitas Diponegoro, Semarang", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Wiryadinata, \u201cPemanfaatan Metode Heuristik Dalam Pencarian Jalur Terpendek Dengan Algoritma Semut dan Algoritma Genetik,", "author": ["I. Muthakiroh", "F. Saptono", "R.N. Hasanah"], "venue": "Seminar Nasional Aplikasi Teknologi Informasi (SNATI),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Sistem Inventori dan Pengaturan Tata Letak Barang serta Visualisasinya,", "author": ["Liliana", "G. Satia Budhi", "A. Abadi"], "venue": "Jurusan Teknik Informatika, Fakultas Teknologi Industri,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "T.Stu \u0308tzle, Ant Colony Optimization. A Bradford book.Massachusetts", "author": ["M. Dorigo"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2004}, {"title": "Artificial Intelligent A Modern Approach", "author": ["S. Russel", "P. Norvig"], "venue": "Prentice Hall", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2009}, {"title": "Penerapan Algoritma Backtracking pada", "author": ["Teneng", "J. Purwadi", "E. Kurniawan"], "venue": "Permainan Math Maze,\u201dJurnal Informatika, vol.6,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2010}, {"title": "Ant Clustering Algorithm", "author": ["U. Boryczka"], "venue": "Poland: Institute of Computer Science University of Silesia", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [], "year": 2015, "abstractText": "Warehouse is one of the important aspects of a company. Therefore, it is necessary to improve Warehouse Management System (WMS) to have a simple function that can determine the layout of the storage goods. In this paper we propose an improved warehouse layout method based on ant colony algorithm and backtracking algorithm. The method works on two steps. First, it generates a solutions parameter tree from backtracking algorithm. Then second, it deducts the solutions parameter by using a combination of ant colony algorithm and backtracking algorithm. This method was tested by measuring the time needed to build the tree and to fill up the space using two scenarios. The method needs 0.294 to 33.15 seconds to construct the tree and 3.23 seconds (best case) to61.41 minutes (worst case) to fill up the warehouse. This method is proved to be an attractive alternative solution for warehouse layout system. Keywords\u2014warehouse layout; block stacking method; ant colony algorithm; backtracking algorithm.", "creator": "Microsoft\u00ae Office Word 2007"}}}