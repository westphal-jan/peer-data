{"id": "1510.08525", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Oct-2015", "title": "Automatic Synthesis of Geometry Problems for an Intelligent Tutoring System", "abstract": "This paper theme latter visionary tutoring system, GeoTutor, but Euclidean Geometry there a automatically able but nitriles proof significant and their agendas combining given he geometric figure still made puts set brought location obvious addition it. GeoTutor do directly personalized physical concern we address colleagues deficiencies leaving the case matter.", "histories": [["v1", "Thu, 29 Oct 2015 00:10:03 GMT  (42kb)", "http://arxiv.org/abs/1510.08525v1", "A formal version of the accepted AAAI '14 paper"]], "COMMENTS": "A formal version of the accepted AAAI '14 paper", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["chris alvin", "sumit gulwani", "rupak majumdar", "supratik mukhopadhyay"], "accepted": false, "id": "1510.08525"}, "pdf": {"name": "1510.08525.pdf", "metadata": {"source": "CRF", "title": "Automatic Synthesis of Geometry Problems for an Intelligent Tutoring System", "authors": ["Chris Alvin", "Sumit Gulwani", "Rupak Majumdar", "Supratik Mukhopadhyay"], "emails": ["calvin1@lsu.edu", "sumitg@microsoft.com", "rupak@mpi-sws.org", "supratik@csc.lsu.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n51 0.\n08 52\n5v 1\n[ cs\n.A I]\n2 9\nO ct\n2 01"}, {"heading": "1 Introduction", "text": "We present an intelligent tutoring system for Euclidean Geometry that can\n\u2022 Automatically synthesize personalized proof problems based on a student\u2019s background and performance history,\n\u2022 Automatically provide practice problems that address student deficiencies in the subject matter.\nOur system GeoTutor takes as input a geometry problem given as a figure together with a set of properties true of the figure (e.g., two line segments are equal, or that an angle is 90 degrees). Internally, it represents the figure as a hypergraph whose nodes are basic propositions about geometric objects and whose hyperedges represent deductions that follow from the propositions using axioms of Euclidean geometry. We provide an algorithm to traverse the hypergraph of deductions to come up with problems related to the given template problem. Our traversal algorithm filters the state space using additional assumptions about the student\u2019s history or heuristics to limit to interesting deductions.\nWe illustrate the functionalities provided by GeoTutor through a concrete geometric problem taken from a textbook (Sinclair et. al. 2006). Consider the geometric figure in Fig 1 (Sinclair et. al. 2006) and assume that we are given (i) M is the midpoint of AC, (ii) M is the midpoint of BD, and (iii) m\u2220BCD = 90o 1.\nThe following are some statements that are provable about Fig 1 using these assumptions\nCopyright c\u00a9 2015, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\n1 m\u2220BCD refers to the measure of \u2220BCD\nA) \u2206BMC \u223c= \u2206DMA,\nB) m\u2220ADC = 90o,\nC) \u2206ADC \u223c= \u2206BCD,\nD) 2BM = AC, 2\nE) \u2206DMC is isosceles,\nF) \u2206BMC is isosceles,\nG) \u2206DMA is isosceles,\nH) BC \u2016 AD. 3\nOnly A) through D) are stated as problems (to prove) in (Sinclair et. al. 2006). When provided with this figure and assumptions (i) through (iii), GeoTutor will automatically synthesize proof problems that include all the statements A) through H) above.\nBeyond synthesizing problems based on the stated assumptions, GeoTutor will also synthesize all converse proof problems. For example, in Fig 1, if BM = DM and \u2206BMC is isosceles are given, one should be able to prove that m\u2220BCD = 90o; we call it a converse proof problem since the goal m\u2220BCD = 90o is an assumption, specifically assumption (iii), in Fig 1 while the fact \u2206BMC is isosceles is goal F) in one of the original problems.\nIn addition, GeoTutor may classify two problems as analogous; i.e., a student who is able to prove one should be able to prove the other. For example, in Fig 1, proving that F) \u2206BMC is isosceles and G) \u2206DMA are analogous in their statements and solutions. If a student struggles proving F), G) may be provided as a practice problem or as a means to master the proof technique.\nGeoTutor can also classify synthesized problems as interesting or uninteresting. While statements such as m\u2220AMD = m\u2220BMC can also be proven on Fig 1, GeoTutor would label such a problem as uninteresting since the given assumptions are not required to prove it. On the other hand, despite the fact that 2BM = 4AC can be proved on Fig 1 using the given assumptions, GeoTutor would label it as uninteresting since it can be derived from D) stated above through purely algebraic manipulation.\nGeoTutor also supports queries that a user can input to retrieve problems analogous to a given problem, problems with a certain difficulty level (in terms of length or width of proofs or the axioms used), or problems based on the type of goal (proving congruence of triangles, equality of segments/angles, etc.).\n2 AC is equal to twice BM 3 BC is parallel to AD\nIf a student is stuck at a particular step in a proof, the system can provide a hint on the next step to follow (e.g., the correct axiom, definition, or theorem to be used). If a student is able to provide the complete proof for a problem, the system can grade it as correct or incorrect; in the latter case, it can point to the possible mistakes and suggest corrective steps or a more succinct solution.\nThe system provides an intuitive GUI interface leveraging LiveGeometry (Liv ) and enables porting of the application to the web as well as deploy it as a standalone for use with a tablet. Currently, it synthesizes problems based on the immutable figure itself. For example, given an isosceles triangle, we may not alter the figure by making it scalene, nor changing any of the derivable characteristics such as the angle bisector of the angle opposite of the base intersecting the base at a point other than the midpoint. It is important to note that even though the user may provide an isosceles triangle, based on given assumptions, we may be able to prove that the triangle is, in fact, equilateral.\nWe evaluated GeoTutor on a corpus of high school geometry problems from standard geometry text books. Starting with a set of 155 textbook problems, GeoTutor automatically synthesized approximately 8000 related problems, and approximately 3000 converse problems, all of which were deemed interesting using our metric. Additionally, GeoTutor automatically classified the difficulty levels of these problems. Each problem instance required a few seconds to generate. Our evaluations indicate GeoTutor can be used as an effective component in computer-delivered personalized education in geometry education at the high school level."}, {"heading": "2 Theoretical Foundations for Problem Synthesis in Euclidean Geometry", "text": "We currently consider immutable figures in which the properties of that figure are not allowed to be modified nor any new information constructed."}, {"heading": "2.1 Geometric Classes", "text": "There are several distinct types of objects in Euclidean geometry, most notably: points, rays, segments, lines, triangles, quadrilaterals, and circles. For our purposes, we define a class for each geometric object: the class of points P , the class of segments S, the class of triangles T , etc."}, {"heading": "2.2 Theories and Figures", "text": "Let L be a logic (Chang and Lee 1997) in which properties of a geometric figure are described. We assume a finite set of geometric classes including point, segment, tri-\nangle, isosceles triangle, and equilateral triangle. Let F = {F1, . . . ,Fk} be the collection of k geometric classes. Also let F be a figure that belongs to a class F : formally, F \u2208 F . We then define the theory of a class of figures F as Th(F) = {\u03c61, . . . , \u03c6j} where each \u03c6i is a property (an L formula) and 1 \u2264 i \u2264 j, to be the minimal set of intrinsic properties of F ; i.e., \u2200\u03c6i \u2208 Th(F), {Th(Ax) \u222a Th(F) \\ \u03c6i} 2 \u03c6i where Ax is the set of Euclid\u2019s axioms (Jurgensen, Brown, and Jurgensen 1988). That is, Th(F) consists of all properties of a class F that are innate to the class, but cannot be proven. For example, for the triangle class, one can neither prove that triangles have three segments nor prove that they have three internal angles. These are the intrinsic properties of the triangle class.\nOrdering on Geometric Classes\nDefinition 1. We define the ordering operator \u2291 on classes as F1 \u2291 F2 if and only if Th(F1) Th(F2), i.e., if Th(F1) logically entails Th(F2).\nProposition 1. \u2291 defines a partial order on F .\nExample 1. Considering the class of triangles (T ), isosceles triangles (I), and equilateral triangles (E), it is clear E \u2291 I \u2291 T as E contains the most information and is thus the strongest class.\nFor a figure F to be described by a particular class F we say that the figure forces the theory of the class F : F Th(F). Thus F \u2208 F if and only if F Th(F).\nWe now need to show that a figure cannot be an element in two distinct chains in the partial order; e.g. a figure cannot be both a triangle and circle.\nLemma 1. Let F be a figure and F1,F2 be classes. If F \u2208 F1 and F \u2208 F2, then either F1 \u2291 F2 or F2 \u2291 F1.\nWe also require a figure to be defined by the most appropriate class.\nCorollary 1. For a figure F , there exists classes Fb and FB such that for F \u2208 Fb, F \u2208 FB and for all F \u2032 such that F \u2208 F \u2032, Fb \u2291 F \u2032 \u2291 FB .\nFb defines the greatest lower bound of classes for a figure F . We call Fb the strongest class corresponding to figure F and write strong(F ). FB defines the least upper bound of classes for a figure F . We call FB the weakest class corresponding to figure F and write weak(F ).\nGiven a geometric Figure F , we will construct two sets of properties that describe F . The first set of properties, I , describe the invariant characteristics of F . That is, we note the relationships among the points, lines, and shapes that are independent of specific information about F ; that is, angles and distances between points may differ but not the overall structure of the figures. Two figures G and G\u2032 are invariant if there exists a class of geometric figures C such that weak(G) = C = weak(G\u2032). We write G \u2248C G\u2032 to say figure G is invariant to figure G\u2032 with respect to class C.\nFor a figure F , we define the theory of F denoted by Th(F ) to be Th(F) where F = strong(F ). Let figure F be a right triangle \u2206ABC with m\u2220BAC = 90o. The theory of F , denoted by Th(F ) is given by\nTh(F ) = {\u2206ABC,m\u2220BAC = 90o}\n= {triangle(A,B,C), right angle(B,A,C)}\nLet T be the class of triangles and Tr be the class of right triangles, then we note for the right triangle F above, it is true that F \u2208 T and F \u2208 Tr with Tr \u2291 T .\nAxioms For Euclidean geometry, we assume modified versions of Euclid\u2019s original axioms (Jurgensen, Brown, and Jurgensen 1988); these axioms are universally quantified. Some of these axioms are stated below\n1. Segment Addition: If B is between A and C, then AB + BC = AC.\n2. Algebraic Properties of equality including addition, subtraction, multiplication, and division.\n3. Equality (=). congruence (\u223c=), and similarity (\u223c) are equivalence relations.\nThe set of axioms describing algebraic properties of equality including addition, subtraction, multiplication, and division and those describing the fact that equality (=). congruence (\u223c=), and similarity (\u223c) are equivalence relations are called the algebraic axioms and are denoted by Aa. In addition, a few existentially quantified axioms are assumed. Examples are\n1. If two parallel lines are cut by a transversal, then corresponding angles are congruent.\n2. SSS, SAS, and ASA congruency of triangles.\n3. Corresponding Parts of Congruent Triangles are Congruent (CPCTC).\n4. AA Similarity of Triangles.\nEach of the axioms above requires an encoding into a logical form. Let\u2019s consider a few examples. Consider the Segment addition axiom. For this axiom to be applied, we require two distinct pieces of information: (1) three points are collinear, (2) which of the three points lies between the other two points. Consider a segment \u03c71\u03c72 with point \u03c73 between \u03c71 and \u03c72. Then\n(\u03c71,\u03c72,\u03c73 collinear) \u2227 (\u03c73 between \u03c71 and \u03c72) \u21d2 \u03c71\u03c73 + \u03c73\u03c72 = \u03c71\u03c72\nWith CPCTC, we require two congruent triangles. We require the labeling of the respective vertices of the congruent triangles to be consistent.\n(\u2206ABC) \u2227 (\u2206DEF ) \u2227 (\u2206ABC \u223c= \u2206DEF ) \u21d2\n(\u2220ABC \u223c= \u2220DEF ) \u2227 (\u2220BCA \u223c= \u2220EFD)\u2227\n(\u2220CAB \u223c= \u2220FDE) \u2227 (AB \u223c= DE)\u2227\n(BC \u223c= EF ) \u2227 (CA \u223c= FD)\nDefinitions of Geometric Terms We presume standard definitions of common geometric terms; e.g.:\n\u2022 Collinear refers to a set of points lying on one line.\n\u2022 Midpoint of a segment refers to the point that divides a given segment into two congruent segments.\nThese definitions have ramifications because they imply more properties regarding a figure. For example, if M is the midpoint of XY , then the definition states XM = MY . However, the definitions are implicit in the theory of a figure F as well as the theory of given information. For a figure F , we call this information the theory of assumptions, Th(AFs )."}, {"heading": "2.3 Hypergraphs and Problems", "text": "The formal framework that we use to represent a geometric figure together with the assumptions is a hypergraph. Proof problems will be synthsized by exploring this hypergraph. Given only a figure, we may construct a corresponding hypergraph based solely on the intrinsic properties, axioms, and student knowledge base. The student knowledge base comprises the lemmas and theorems that the student has proven so far.\nDefinition 2 (Basic Hypergraph). Given a figure F , the basic hypergraph corresponding to F is HFb (P,E) where P is the set of nodes and E is the set of hyperedges. We define the set of nodes in the hypergraph P = Th(F)\u222a Th(Ax)\u222a Th(K) where F = strong(F ), K is the student knowledge base, and Ax is the set of Euclid\u2019s axioms. The hyperedges, E, of the the graph are defined as a set of functions mapping a set of nodes to a single node: E \u2286\n\u22c3|P | i=1 P i \u2192 P where \u3008p1, . . . , p\u2113\u3009 \u2192 p \u2208 E if Th(F)\u222aTh(Ax) |= p1\u2227. . .\u2227p\u2113 \u21d2 p holds true.\nEach node in the basic hypergraph is typed so it belongs to one discrete class in the set of types \u03c4 = {algebraic, geometric}. We make these distinctions among nodes so that later we may formally define a problem with respect to a basic hypergraph. We now define how the type of each node in a basic hypergraph is acquired.\nDefinition 3 (Algebraic and Geometric Nodes). Let n be a node in a basic hypergraph H . If n is a propositional formula associated with some a \u2208 Aa, we say n is a purely algebraic node. Let HT be the transpose of hypergraph H; that is, the nodes of HT are the same as those of H but with all edges in H reversed. Define leaves(HT ) to be the set of all nodes in HT without parents. If for all \u2113 \u2208 leaves(HT ) such that there exists a path from n to l in HT , ell is a purely algebraic node, we say n is an algebraic node. We note that purely algebraic nodes are considered algebraic nodes. We similarly define the terms purely geometric nodes and geometric nodes for Euclid\u2019s axioms, Ax.\nWe can extend our notion of the basic hypergraph HFb for a geometric figure F by including the problem statement in the corresponding hypergraph. This is accomplished by incorporating the assumptions, AFs , and the goal, G.\nDefinition 4 (Standard Hypergraph). Given a figure F and corresponding basic hypergraph, HFb (P,E), the standard hypergraph corresponding to F with assumptions AFs and\ngoalG, is given by HFs (H F b , Pg, Eg, G). We define the additional set of typed nodes in the hypergraph Pg = Th(AFs )\u222a {G}. The corresponding additional hyperedges, Eg are a result of the theories derived from all typed nodes given by P \u222a Pg where P are the typed nodes defined in HFb .\nIf we do not distinguish between a basic hypergraph or standard hypergraph we will refer to a problem hypergraph, H(P,E) where P is the set of typed nodes and E is the set of hyperedges and when it is clear from cntext, we will simply call it a hypergraph.\nIt is clear that for a figure F , HFb is a sub-hypergraph (Berge 1973) of HFs .\nGeometry Problems A traditional high school geometry problem in simplest form is a natural language statement, but more common is the combination of a description composed of mathematical relationships and natural language which describe a figure. In a problem hypergraph, we informally define a problem as a set of typed nodes that describe the assumptions of the problem and a corresponding typed goal node that follows from the assumptions. The corresponding path from the typed assumption nodes to the typed goal node is a solution to the problem (i.e., a proof of the goal).\nDefinition 5 (Basic and Standard Problems). Given a basic hypergraph HFb corresponding to a figure F , a basic problem P is a statement of the form p1 \u2227 . . . \u2227 pk \u22a2 p for some k > 0 where for all i, pi is the propositional formula corresponding to typed node ni of HFb , p is the propositional formula corresponding to typed node n of HFb , and there exists a path P from \u3008n1, . . . , nk\u3009 to n. The path P is a solution to the problem. We say that P defines the collection of all paths in hypergraph HFb . A standard problem is defined similarly for a standard hypergraph HFs .\nWe will use the general term problem in situations where the context is clear. For a goal g and a set of source nodes S in a standard hypergraph HFs (H F b , Pg, Eg, G) corresponding to figure F with assumptions A, we say that S is minimal with respect to g if S \u22a2 g is a problem and no U \u22a2 g is a problem for U \u2282 S.\nAs mentioned in the Introduction, not all problems are interesting. Interesting problems for a figure and a set of assumptions are those that require at least one or more of the assumptions, the assumptions are minimal with respect to the goal, and the goal cannot be derived from a set of algebraic expressions through purely algebraic manipulation.\nDefinition 6 (Interesting Problems). Let Hs(H F b , Pg, Eg, G) be the standard hypergraph corresponding to figure F with assumptions As F . Let P be a problem with source nodes S used to construct HFs . Also let g be the goal of P . We say that P is an interesting problem if (i) S is a minimal set with respect to g, (ii) all direct predecessors of g are not algebraic nodes, and (iii) S \u2286 AFs where |S \u2229 A F s | > 0. That is, the problem must use at least one of the assumptions used to construct HFs . In case S = AFs , we call P a strictly interesting problem\nAnalogous Problems We use the term analogous to define a problem as an independent, \u2019interesting\u2019 problem that\nmimics the difficulty and length of a given problem. For a problem P in a hypergraph H , the problem hypergraph P\u0303 is the sub-hypergraph of H induced by P . We begin with a strict view of problem analogy that looks at problem hypergraphs as graphs.\nDefinition 7 (Coarse Problem Homomorphism). Let H(V,E) and H \u2032(V \u2032, E\u2032) be problem hypergraphs. Then \u03c6 : H \u2192 H \u2032 is a coarse problem homomorphism if for all \u3008v1, . . . , vk\u3009 = ~v \u2208 P(V ) and v \u2208 V such that ~v \u2192 v \u2208 E,\n(i) v and \u03c6(v) are typed nodes in which type(v) = type(\u03c6(v)) \u2208 \u03c4 ,\n(ii) ~v and \u03c6(~v) are sets of typed nodes in which |~v|t = |\u03c6(~v)|t for each type t \u2208 \u03c4 , and\n(iii) there exists an edge \u03c6(~v) \u2192 \u03c6({v}) \u2208 E\u2032.\nWe then say \u03c6 is a coarse problem isomorphism if (i) \u03c6 is a bijection, (ii) \u03c6 is a coarse problem homomorphism, and (iii) \u03c6\u22121 is a coarse problem homomorphism. If \u03c6 is a coarse problem isomorphism between H and H \u2032, we may write H \u223c=c H \u2032. We also say two problems P1 and P2 are coarsely analogous if there exists a coarse problem isomorphism between P\u03031 and P\u03032. In Fig 1, the two problems proving that F) \u2206BMC is isosceles and G) \u2206DMA is isosceles are coarsely analogous. However, coarse analogy can be too strong a concept to formally capture the notion of \u201canalogy\u201d. To give an example, in Fig 1, a student who has been able to prove statements F) and G) should also be able to prove the statement E) since all three statements require one to prove that a particular triangle is isosceles though the task of proving E) is not coarsely analogous to that of proving F) or G). Formally capturing a weaker notion of analogy motivates the following definition\nDefinition 8 (Goal Analogous Problems). Let P1 and P2 be two problems with goals g1 and g2, respectively. Then we say problems P1 and P2 are goal analogous problems if type(g1) = type(g2). This is clearly an equivalence relation and we refer to the induced equivalence classes as goal analogous partition."}, {"heading": "3 Automatic Synthesis of Problems for Euclidean Geometry", "text": "Given a problem hypergraphH(P,E), Euclidean Geometry problems are automatically synthesized by using a pebbling technique (Dowling and Gallier 1984)."}, {"heading": "3.1 Pebbling Algorithm", "text": "The representation of the knowledge base for each figure and set of assumptions is a hypergraph in which all hyperedges are many-to-one. There are two essential phases for the synthesis of geometry problems: construction and traversal of the hypergraph. Hypergraph construction is based on deductions resulting from standard Euclidean Geometry axioms, definitions, and theorems. Consider the case where we wish to prove that two triangles are congruent using the Side-Angle-Side (SAS) congruence axiom: two pairs of congruent sides and one pair of included congruent angles must relate the two respective triangles. A hyperedge may\nbe constructed with the three congruence pairs as well as the two triangles as source nodes and the boolean fact that the two triangles are congruent as the target of the hyperedge as shown in Fig 2. Once the two triangles are determined to be congruent, the corresponding three parts of the congruent triangles (CPCTC) are then hyperedges with source being the congruent triangle node and target the CPCTC fact. It is important to note that for a complete hypergraph construction, other techniques to prove congruent triangles (AngleSide-Angle, etc.) can then be applied to a subset of the six congruence pairs.\nGiven a complete hypergraph based on the figure and provided assumptions, the synthesis phase of the algorithm has several parts. Using a breadth-first pebbling, we identify forward edges and back-edges in the hypergraph. The forward pebbling mimics the construction of the hypergraph with the restriction that a hyperedge from a pebbled node to another pebbled node implies a back-edge. Pebbling also excludes hyperedges based on any restrictions specified by the user query. That is, if a student wishes to practice problems related to congruent triangles, problems referencing similar triangles will not be generated. Any such restriction by the user query will therefore prohibit pebbling of hyperedges that are justified by axioms, definitions, and theorems related to similar triangles.\nThe second phase of pebbling seeks to identify all backhyperedges. Based on the forward pebbled nodes, we pebble in the same breadth-first manner sorting the nodes from last deduced nodes to first. It is important to recognize that no deduced hyperedges will be both forward- and backhyperedges except for hyperedges attributed to axioms. As an example of forward- and back-hyperedges, consider again the case of SAS congruence in Fig 2. The 5-to-1 hyperedge justified by SAS congruence is considered to be a forward edge. As the hypergraph is a complete representation of all facts from the figure and assumptions, there exists a hyperedge justified by Angle-Side-Angle (ASA) from the other three corresponding congruence pairs resulting from CPCTC. In this case, ASA is an example of a backhyperedge in the graph."}, {"heading": "3.2 Problem Synthesis", "text": "Given the set of hyperedges of a hypergraph H(P,E) acquired from pebbling, we can construct the associated set of all problems for a goal node. Consider a single hyperedge e with source nodes S and target g. For all s \u2208 S, we recursively construct all problems Ps with goal node s. Then, to acquire all problems Pg with goal node g, we must compose Ps for all s \u2208 S with S \u22a2 g. Formally, Pg = { ( U1 \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 U|S| ) \u22a2 g | \u2200i, Ui \u2286 P\nand Ui \u22a2 s \u2208 Ps for some s \u2208 S}."}, {"heading": "4 Implementation and Evaluation", "text": "Since figures are immutable, we may leverage the coordinates of the input figure by calculating the ways in which the figure may be strengthened (a point in the middle of two points is a midpoint, a triangle is isosceles, etc). Each of the precomputed descriptors will be used as goals for forward problems as described in 3.2. These pre-computed facts may not be found in the hypergraph since only deducible facts from the figure and assumptions are nodes in the hypergraph; for example, a midpoint may be implied by the coordinates of the figure, however, it is not a provable fact given the figure and assumptions. In the case of back-edges, we use the original problem assumptions as the respective goals. For a problem P and its induced hypergraph P\u0303 , a path from the source nodes to the goal node represents a solution to P . This solution can be matched to one developed by a student for grading purposes or can be used to provide a hint to a student stuck at a particular step.\nQuery-based Problem Synthesis GeoTutor supports the queries in Table 1; any query that requires stating the desired type of node is done so using an input menu by selecting, for example: parallel lines, congruent triangles, congruent angles, etc. For a problem P with induced hypergraph P\u0303 , we define proof width to be the width of P\u0303 (Moll, Tazari, and Thurley 2012) as well as define proof length to be the diameter of P\u0303 . We define the number of deduced steps for a problem P to be the number of hyperedges int P\u0303 .\nEvaluation Methodology For evaluation, we acquired 110 problems from standard mathematics textbooks in India for grades IX and X (Sinclair, Dikshit, et. al. 2006; Sinclair et. al. 2006) as well as several recent textbooks and workbooks that are popular in the United States (Boyd et. al. 2006; Larson et. al. 2007; Larson et. al. ;\nJurgensen, Brown, and Jurgensen 1988). Each textbook probem was hard-coded as a triple: T =< FT , AT , GT > where FT denotes the set of intrinsic properties of the figure, AT denotes the assumptions as stated in the textbook, and GT the set of goals as stated in the textbook. For each textbook problem T , we generated the set of interesting problems for T , call it PT . We then validated for all g \u2208 GT that there exists a problem p \u2208 PT such that for some F \u2286 FT where F 6= \u2205, F \u2227 AT \u22a2 g. The data based on all such validated problems is summarized in Tables 2, 3, and 4.\nResults Table 2 provides general cumulative statistics for all synthesized problems based on the 110 original textbook problems. For timing, all data were acquired on an Intel Core i5-2520M CPU at 2.5GHz with 8 GB RAM on 64-bit Windows 7 operating system and captured the entire process described in section 3 which includes coordinate-based computation, hypergraph construction, pebbling, and problem synthesis.\nTable 3 demonstrates one method by which the set of interesting or strictly interesting problems can be partitioned: based on the number of deductive steps in a given problem. That is, the value 10.61 indicates, that, on average, a typical textbook problem results in approximately 10 interesting problems that require between 6 and 10 applications of axioms, theorems, or definitions to deduce the goal. This gives us a sense that, generally, all figures provide at least a medicum level of interesting problems at every level of difficulty.\nLastly, we note that there are many interesting problems that arise from a figure that are not strictly interesting (see Definition 6). This type of problem is common in textbooks when a multi-stage problem occurs: part (a) may use one assumption and part (b) uses the remaining assumptions. This is the case in Fig 1 where proving A) does not require assumption (iii). Table 4 addresses this issue by partitioning the set of interesting problems using the percentage of givens as basis for comparison. Specifically, we look at 2.98 as the average number of problem which are interesting but use 25% of the original textbook set of givens. We note that problems that require all the assumptions in the statement for their solution are strictly interesting problems and that, on average, 19.7 strictly interesting problems are generated per textbook problem."}, {"heading": "5 Related Work", "text": "Existing automated tutoring systems provided by Wolfram Alpha (wol ), Coursera (Fast et al. 2013), and AutoTutor (aut ) cannot provide personalized feedback to the students. None of these systems can automatically synthesize analogous exercises to provide personalized practice to a student having difficulties in particular areas or types of exercises. Individualized, but analogous, assignments provided to students can mitigate cheating while maintaining fairness. None of the existent systems cover difficult topics like Geometry. Unlike GeoTutor, these systems provide problems from a predefined set that are slightly modified versions of\nTable 2: General Results Based on Textbook Problems\nFigures 110 Original Textbook Problems 155 Generated Problems 8307 Interesting Problems 4120 Strictly Interesting Problems 2168 Converse Problems 3097 Time (secs / figure) 3.90 Ave. Goal Analogous Partitions 9.04 Interesting Strictly Interesting\nAve. Proof Width 4.85 6.10 Ave. Proof Length 4.67 5.53 Ave. Deductive Steps 5.31 6.97\nthose scoured from a plethora of textbooks. GeoTutor can synthesize problems beyond those available in textbooks; the student is free to generate their own problems by creating their own figures and associated assumptions. Altogether, it provides a personalized educational experience to the student that current systems do not.\nRecently automatic problem generation has gained new interest with novel approaches in problem generation for natural deduction (Ahmed, Gulwani, and Karkare 2013), algebraic proof problems (Singh, Gulwani, and Rajamani 2012), mathematical procedural problems (Andersen, Gulwani, and Popovic 2013), embedded systems (Sadigh, Seshia, and Gupta 2012), Geometry constructions (Gulwani, Korthikanti, and Tiwari 2011), etc. All of them apply a similar technique: they first generalize an existing problem into a template, and then explore a space of possible solutions that fit this template. However, the specific approaches vary. Ahmed et al. build templates automatically, Andersen et al. and Singh et al. do it semiautomatically, and Sadigh et al. write templates manually. In contrast to this line of work, we do not use any manually written templates."}, {"heading": "6 Conclusions", "text": "We described and evaluated a technique for automatic problem synthesis for GeoTutor, an intelligent tutoring system for Euclidean Geometry. GeoTutor has the ability to synthesize personalized assignments for students, generate analogous, but different, exercises to curb cheating, and provide the educator with the ability to generate interesting assign-\nments, exam questions, and their solutions automatically. Generating problems for assignments or exams is a difficult and tedious process for an educator and the gift of time for a teacher is the most valuable asset to educating all chidren. Time means more individual attention for each student so that teachers can do what they do best: teach students. In the future, we plan to deploy GeoTutor in high schools and conduct user studies to understand its effectiveness in an educational environment."}], "references": [{"title": "U", "author": ["Ahmed"], "venue": "Z.; Gulwani, S.; and Karkare, A.", "citeRegEx": "Ahmed. Gulwani. and Karkare 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "A trace-based framework for analyzing and synthesizing educational progressions", "author": ["Gulwani Andersen", "E. Popovic 2013] Andersen", "S. Gulwani", "Z. Popovic"], "venue": null, "citeRegEx": "Andersen et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Andersen et al\\.", "year": 2013}, {"title": "R", "author": ["Chang", "C.-L.", "Lee"], "venue": "C.-T.", "citeRegEx": "Chang and Lee 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "J", "author": ["W.F. Dowling", "Gallier"], "venue": "H.", "citeRegEx": "Dowling and Gallier 1984", "shortCiteRegEx": null, "year": 1984}, {"title": "M", "author": ["E. Fast", "C. Lee", "A. Aiken", "Bernstein"], "venue": "S.; Koller, D.; and Smith, E.", "citeRegEx": "Fast et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "V", "author": ["Gulwani, S.", "Korthikanti"], "venue": "A.; and Tiwari, A.", "citeRegEx": "Gulwani. Korthikanti. and Tiwari 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Jurgensen; Brown; and Jurgensen", "author": ["Jurgensen", "Brown"], "venue": null, "citeRegEx": "Jurgensen et al\\.,? \\Q1988\\E", "shortCiteRegEx": "Jurgensen et al\\.", "year": 1988}, {"title": "Geometry (NJ Edition)", "author": ["Boyd et. al"], "venue": "Boyd et. al", "citeRegEx": "al.,? \\Q2006\\E", "shortCiteRegEx": "al.", "year": 2006}, {"title": "et", "author": ["Sinclair", "Dikshit"], "venue": "al.", "citeRegEx": "Sinclair. Dikshit. et. al. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Computing hypergraph width measures exactly", "author": ["Tazari Moll", "L. Thurley 2012] Moll", "S. Tazari", "M. Thurley"], "venue": null, "citeRegEx": "Moll et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Moll et al\\.", "year": 2012}, {"title": "S", "author": ["Sadigh, D.", "Seshia"], "venue": "A.; and Gupta, M.", "citeRegEx": "Sadigh. Seshia. and Gupta 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "S", "author": ["R. Singh", "S. Gulwani", "Rajamani"], "venue": "K.", "citeRegEx": "Singh. Gulwani. and Rajamani 2012", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [], "year": 2015, "abstractText": "This paper presents an intelligent tutoring system, GeoTutor, for Euclidean Geometry that is automatically able to synthesize proof problems and their respective solutions given a geometric figure together with a set of properties true of it. GeoTutor can provide personalized practice problems that address student deficiencies in the subject matter.", "creator": "LaTeX with hyperref package"}}}