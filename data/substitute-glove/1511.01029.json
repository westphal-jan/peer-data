{"id": "1511.01029", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Nov-2015", "title": "Understanding symmetries in deep networks", "abstract": "Recent literary have highlighted adjustment relativistic all symmetry taken three that weight space years second type sea network and the implications effect which far on both Euclidean salinity based relativistic formula_5 norse gameplay. In this doing, we performances suggested a commonly used deep provides, latter instrument decomposition, harvest resolving, reLU, pratt - extracting, and sub - sampling pipeline, uniquely better complex involves in duality involving then scaling - consulting reparameterization country although distribution allowable. We require them tackle way suggested over the full space regulative by constraining set ultrasonic to lie on the combined - mahoney manifold. Consequently, mission first outlets thickened down way required stochastic gradient movements tuesday month the unit - norm formula_20. Our methods actual based on early MNIST cross-validation viewing reason beginning proposed quotes improve one only promising beyond what is achieved with batch strengthening and allowed instill although combinatorial efficiency of place weight updates.", "histories": [["v1", "Tue, 3 Nov 2015 18:50:03 GMT  (1040kb,D)", "http://arxiv.org/abs/1511.01029v1", "Accepted at the 8th NIPS Workshop on Optimization for Machine Learning (OPT2015) to be held at Montreal, Canada on December 11, 2015"]], "COMMENTS": "Accepted at the 8th NIPS Workshop on Optimization for Machine Learning (OPT2015) to be held at Montreal, Canada on December 11, 2015", "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.CV", "authors": ["vijay badrinarayanan", "bamdev mishra", "roberto cipolla"], "accepted": false, "id": "1511.01029"}, "pdf": {"name": "1511.01029.pdf", "metadata": {"source": "CRF", "title": "Understanding symmetries in deep networks", "authors": ["Vijay Badrinarayanan", "Bamdev Mishra", "Roberto Cipolla"], "emails": ["vb292@cam.ac.uk", "bamdevm@amazon.com", "cipolla@cam.ac.uk"], "sections": [{"heading": null, "text": "Recent works have highlighted scale invariance or symmetry present in the weight space of a typical deep network and the adverse effect it has on the Euclidean gradient based stochastic gradient descent optimization. In this work, we show that a commonly used deep network, which uses convolution, batch normalization, reLU, max-pooling, and sub-sampling pipeline, possess more complex forms of symmetry arising from scaling-based reparameterization of the network weights. We propose to tackle the issue of the weight space symmetry by constraining the filters to lie on the unit-norm manifold. Consequently, training the network boils down to using stochastic gradient descent updates on the unit-norm manifold. Our empirical evidence based on the MNIST dataset shows that the proposed updates improve the test performance beyond what is achieved with batch normalization and without sacrificing the computational efficiency of the weight updates."}, {"heading": "1 Introduction", "text": "Stochastic gradient descent (SGD) has been the workhorse for optimization of deep networks [1]. The most well-known form uses the Euclidean gradients with a varying learning rate to optimize the weights. In this regard, the recent work [2] has brought to light scale invariance properties in the weight space which commonly used deep networks possess. These symmetries or invariance to reparameterizations of the weights imply that even though the loss function remains unchanged, the Euclidean gradient varies based on the chosen parameterization. Consequently, optimization trajectories can vary significantly for different reparameterizations [2].\nAlthough these issues have been raised recently, the precursor to these methods is the early work of Amari [3], who proposed the use of natural gradients to tackle weight space symmetries in neural networks. The idea is to compute the steepest descent direction for the weight update on the manifold defined by these symmetries and use this direction to update the weights [4, 5, 6, 7]. Most of theses proposals are either computationally expensive to implement or they need modifications to the architecture. On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].\nIn Section 2, our analysis into a commonly used network shows that there exists more complex forms of symmetries which can affect optimization, and hence there is a need to define simpler weight updates which take into account these invariances. Accordingly, in Section 3, we look at one\n\u2217This work was initiated while the author was with the Department of Electrical Engineering and Computer Science, University of Lie\u0300ge, 4000 Lie\u0300ge, Belgium and was visiting the Department of Engineering (Control Group), University of Cambridge, Cambridge, UK.\nar X\niv :1\n51 1.\n01 02\n9v 1\n[ cs\n.L G\n] 3\nN ov\n2 01\nparticular way of resolving the symmetries by constraining the filters to lie on the unit-norm manifold. This results from a geometric viewpoint on the manifold of the search space. The proposed updates, shown in Table 1, are symmetry-invariant and are numerically efficient to implement.\nThe stochastic gradient descent algorithms with the proposed updates are implemented in Matlab and Manopt [15]. The codes are available at http://bamdevmishra.com/codes/ deepnetworks."}, {"heading": "2 Architecture and symmetry analysis", "text": "A two layer deep architecture, ArchBN, is shown in Figure 1. Each layer in ArchBN has typical components commonly found in convolutional neural networks [16] such as multiplication with a trainable weight matrix (W1,W2), a batch normalization layer (b1, b2) [17], element-wise rectification ReLU, 2\u00d7 1 max-pooling with stride 2, and sub-sampling. The final layer is a K-way soft-max classifier \u03b8. The network is trained with a cross-entropy loss. The rows of the weight matrices W1 and W2 correspond to filters in layers 1 and 2, respectively. The dimension of each row corresponds to the input dimension of the layer. For the MNIST digits dataset, the input is a 784 dimensional vector. With 64 filters in each of the layers, the dimensionality of W1 is 64 \u00d7 784 and of W2 is 32\u00d7 64. The dimension of \u03b8 is 10\u00d7 32, where each row corresponds to a trainable class vector.\nThe batch normalization [17] layer normalizes each feature (element) in the h1 and h2 layers to have zero-mean unit variance over each mini-batch. Then a separate and trainable scale and shift is applied to the resulting features to obtain b1 and b2, respectively. This effectively models the distribution of the features in h1 and h2 as Gaussian whose mean and variance are learnt during training. Empirical results in [17] show that this significantly improves convergence and our experiments also support this claim. A key observation is that the normalization of h1 and h2 allows for complex symmetries to exist in the network. To this end, consider the reparameterizations\nW\u03031 = \u03b1W1 and W\u03032 = \u03b2W2, (1)\nwhere \u03b1 = Diag(\u03b11, \u03b12, \u03b13, \u03b14, \u03b15, \u03b16, \u03b17, \u03b18) and \u03b2 = Diag(\u03b21, \u03b22, \u03b23, \u03b24, \u03b25, \u03b26, \u03b27, \u03b28) and the elements of \u03b1 and \u03b2 can be any real number. Diag(\u00b7) is an operator which creates a diagonal matrix with its argument placed along the diagonal. Due to batch normalization which makes h1 and h2 unit-variance, y is unchanged, and hence the loss is invariant to reparameterizations (1) of the weights. Equivalently, there exists continuous symmetries or reparameterizations of W1 and W2, which leave the loss function unchanged. It should be stressed that our analysis differs from [2], where the authors deal with a simpler case of \u03b1 = \u03b10, \u03b2 = 1\u03b10 , and \u03b10 is a non-zero scalar.\nUnfortunately, the Euclidean gradient of the weights (used in standard SGD) is not invariant to reparameterizations of the weights [2]. Consequently, optimization trajectories can vary significantly based on the chosen parameterizations. This issue can be resolved either by defining a suitable nonEuclidean gradient which is invariant to reparameterizations (1) or by placing appropriate constraints on the filter weights as we show in the following section.\n1 ,W t+1 2 , \u03b8\nt+1) is the updated weight, \u03bb is the learning rate, and\n\u2207W1L(W t1 ,W t2 , \u03b8t), \u2207W2L(W t1 ,W t2 , \u03b8t), and \u2207\u03b8L(W t1 ,W t2 , \u03b8t) are the partial derivatives of the loss L with respect to W1, W2, and \u03b8, respectively at (W t1 ,W t2 , \u03b8t). The operator Orth(\u00b7) normalizes the rows of the input argument. \u03a0W (\u00b7) is the linear projection operation that projects an arbitrary matrix onto the tangent space of the oblique manifold at an element W . It is defined as \u03a0W (Z) = Z \u2212Diag(diag((ZWT ))W [15]."}, {"heading": "3 Resolving symmetry issues using manifold optimization", "text": "An efficient way to resolve the symmetries that exist in ArchBN is to constrain the weight vectors (filters) in W1 and W2 to lie on the oblique manifold [8, 15], i.e., each filter in the fully connected layers is constrained to have unit norm (abbreviated UN). Equivalently, we impose the constraints diag(W1W T 1 ) = 1 and diag(W2W T 2 ) = 1, where diag(\u00b7) is an operator which extracts the diagonal elements of the argument matrix. To this end, consider a weight vector w \u2208 Rn with the constraint wTw = 1. (For example, wT is a row of W1.) The steepest descent direction for a loss `(w) with w on the unit-norm manifold is computed \u2207\u0303`(w) = \u2207`(w) \u2212 (wT\u2207`(w))w, where \u2207`(w) is the Euclidean gradient and \u2207\u0303`(w) is the Riemannian gradient on the unit-norm manifold [8, Chapter 3]. Effectively, the normal component of the Euclidean gradient, i.e., (wT\u2207`(w))w, is subtracted to result in the tangential (to the unit-norm manifold) component. Following the tangential direction takes the update out of the manifold, which is then pulled back to the manifold with a retraction operation [8, Example 4.1.1]. Finally, an update of w on the unit-norm manifold is of the form\n\u2207\u0303`(w) = \u2207`(w)\u2212 (wT\u2207`(w))w w\u0303t+1 = wt \u2212 \u03bb\u2207\u0303`(w) wt+1 = w\u0303t+1/\u2016w\u0303t+1\u2016,\n(2)\nwhere wt is the current weight, wt+1 is the updated weight, \u2207`(w) is the Euclidean gradient, and \u03bb is the learning rate. It should be noted that when W1 and W2 are constrained, the \u03b8 variable is reparameterization free.\nThe proposed weight update (2) can be used in a stochastic gradient descent (SGD) setting which we use in our experiments described in the following section. It should be emphasized that the proposed update is numerically efficient to implement. The formulas are shown in Table 1. The convergence analysis of SGD on manifolds follows the developments in [1, 18]."}, {"heading": "4 Experiments and results", "text": "We train both two and four layer deep ArchBN to perform digit classification on the MNIST dataset (60K training and 10K testing images). We use 64 features per layer. The digit images are rasterized into a 784 dimensional vector as input to the network(s). No input pre-processing is performed. The weights in each layer are drawn from a standard Gaussian and each filter is unit-normalized. The class vectors are also drawn from a standard Gaussian and unit-normalized.\nWe use SGD-based optimization and use choose the base learning rate from the set 10\u2212p for p \u2208 {2, 3, 4, 5} for each training run. For finding the base learning rate, we create a validation set of 500 images from the training set. We then train the network with a fixed learning rate using a randomly chosen set of 1000 images for 50 epochs. At the start of each epoch, the training set is randomly permuted and mini-batches are sampled in a sequence ensuring each training sample is used only once within an epoch. We record the validation error measured as the error per training sample for each candidate base learning rate. We then choose the candidate rate which corresponds to the lowest validation error and use this for training the network on the full training set. We repeat this whole process for 10 training runs for each network to measure the mean and variance of the test\nerror. We ignore the runs where the validation error diverged. For each full dataset training run, we use the bold-driver protocol [19] to anneal the learning rate. We choose 50000 randomly chosen samples as the training set and the remaining 10000 samples for validation. We train for a minimum of 25 epochs and a maximum of 60 epochs. Training is terminated if either the training error is less than 10\u22125 or the validation error increases with respect to the one measured before 5 epochs or successive validation error measurements differ less than 10\u22125.\nFrom Table 2 we see that for both two and four layer deep networks, the mean test error is lower for UN as compared to balanced SGD (B-SGD) which is simply the Euclidean update, but where the starting values of filters and class vectors are unit-normalized. The lowest mean and variance in the test error is obtained when UN weight update is used for training a four layer deep network. The difference between the B-SGD and UN updates is more significant for the four layer deep network, thereby highlighting the performance improvement over what is achieved by standard batch normalization in deeper networks. The use UN can also be seen as a way to regularize the weights of the network during training without introducing any hyper-parameters, e.g., a weight decay term. It should also be noted that the performance difference between the two and four layer networks is not very large. This raises the question for future research as to whether some deep networks necessarily have to be that deep or it can be made shallower (and efficient) by better optimization [20]."}, {"heading": "5 Application to image segmentation", "text": "We apply SGD with the proposed UN weight updates in Table 1 for training SegNet, a deep convolutional network proposed for road scene image segmentation into multiple classes [21]. This network, although convolutional, possesses the same symmetries as those analyzed for ArchBN in (1). The network is trained for 100 epochs on the CamVid [22] training set of 367 images. The predictions on some sample test images from CamVid are shown in Figure 2. These qualitative results indicate the usefulness of symmetry-invariant weight updates for larger networks that arise in practice."}, {"heading": "6 Conclusion", "text": "We have highlighted the symmetries that exist in the weight space of deep neural network architectures which are currently popular. These symmetries can be absorbed into gradient descent by applying a unit-norm constraint on the filter weights. This takes into account the manifold structure on which the weights of the network reside. The empirical results show the test performance can be improved using our proposed weight update technique on a modern architecture. As a future research direction, we would like to explore other efficient symmetry-invariant weight update techniques and exploit them for deep convolutional neural network used in practical applications."}, {"heading": "Acknowledgments", "text": "Bamdev Mishra was supported as an FNRS research fellow (Belgian Fund for Scientific Research). The scientific responsibility rests with its authors."}], "references": [{"title": "Large-scale machine learning with stochastic gradient descent", "author": ["L. Bottou"], "venue": "International Conference on Computational Statistics (COMPSTAT), pages 177\u2013186", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2010}, {"title": "Path-sgd: Path-normalized optimization in deep neural networks", "author": ["B. Neyshabur", "R. Salakhutdinov", "N. Srebro"], "venue": "Advances in Neural Information Processing Systems 29 (NIPS)", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Natural gradient works efficiently in learning", "author": ["S.-I. Amari"], "venue": "Neural computation, 10(2):251\u2013276", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1998}, {"title": "Revisiting natural gradient for deep networks", "author": ["R. Pascanu", "Y. Bengio"], "venue": "Technical report, arXiv:1301.3584", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Natural neural networks", "author": ["G. Desjardins", "K. Simonyan", "R. Pascanu", "K. Kavukcuoglu"], "venue": "Technical report, arXiv:1507.00210", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Riemannian metrics for neural networks I: Feedforward networks", "author": ["Y. Ollivier"], "venue": "Information and Inference, 4(2):108\u2013153", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Riemannian metrics for neural networks II: Recurrent networks and learning symbolic data sequences", "author": ["Y. Ollivier"], "venue": "Information and Inference, 4(2):154\u2013193", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "Optimization Algorithms on Matrix Manifolds", "author": ["P.-A. Absil", "R. Mahony", "R. Sepulchre"], "venue": "Princeton University Press, Princeton, NJ", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2008}, {"title": "Riemannian preconditioning", "author": ["B. Mishra", "R. Sepulchre"], "venue": "Technical report, arXiv:1405.6055", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2014}, {"title": "Low-rank matrix completion via preconditioned optimization on the Grassmann manifold", "author": ["N. Boumal", "P.-A. Absil"], "venue": "Linear Algebra and its Applications, 475:200\u2013239", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "Low-rank optimization on the cone of positive semidefinite matrices", "author": ["M. Journ\u00e9e", "F. Bach", "P.-A. Absil", "R. Sepulchre"], "venue": "SIAM Journal on Optimization, 20(5):2327\u20132351", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2010}, {"title": "Riemannian geometry of Grassmann manifolds with a view on algorithmic computation", "author": ["P.-A. Absil", "R. Mahony", "R. Sepulchre"], "venue": "Acta Applicandae Mathematicae, 80(2):199\u2013220", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2004}, {"title": "The geometry of algorithms with orthogonality constraints", "author": ["A. Edelman", "T.A. Arias", "S.T. Smith"], "venue": "SIAM Journal on Matrix Analysis and Applications, 20(2):303\u2013353", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1998}, {"title": "Optimization algorithms exploiting unitary constraints", "author": ["J.H Manton"], "venue": "IEEE Transactions on Signal Processing, 50(3):635\u2013650", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2002}, {"title": "Manopt", "author": ["N. Boumal", "B. Mishra", "P.-A. Absil", "R. Sepulchre"], "venue": "a matlab toolbox for optimization on manifolds. The Journal of Machine Learning Research, 15(1):1455\u20131459", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep learning", "author": ["Y. LeCun", "Y. Bengio", "G. Hinton"], "venue": "Nature, 521(7553):436\u2013444", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "International Conference on Machine learning (ICML)", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2015}, {"title": "Stochastic gradient descent on Riemannian manifolds", "author": ["S. Bonnabel"], "venue": "IEEE Transactions on Automatic Control, 58(9):2217\u20132229", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Lecture notes", "author": ["G. Hinton"], "venue": "Technical report, University of Toronto", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2008}, {"title": "Do deep nets really need to be deep? In Advances in Neural Information Processing Systems 28 (NIPS)", "author": ["J. Ba", "R. Caruana"], "venue": "pages 2654\u20132662", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2014}, {"title": "Segnet: A deep convolutional encoder-decoder architecture for robust semantic pixel-wise labelling", "author": ["V. Badrinarayanan", "A. Handa", "R. Cipolla"], "venue": "Technical report, arXiv:1505.07293", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2015}, {"title": "Semantic object classes in video: A high-definition ground truth database", "author": ["G. Brostow", "J. Fauqueur", "R. Cipolla"], "venue": "Pattern Recognition Letters, 30(2):88\u201397", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "Stochastic gradient descent (SGD) has been the workhorse for optimization of deep networks [1].", "startOffset": 91, "endOffset": 94}, {"referenceID": 1, "context": "In this regard, the recent work [2] has brought to light scale invariance properties in the weight space which commonly used deep networks possess.", "startOffset": 32, "endOffset": 35}, {"referenceID": 1, "context": "Consequently, optimization trajectories can vary significantly for different reparameterizations [2].", "startOffset": 97, "endOffset": 100}, {"referenceID": 2, "context": "Although these issues have been raised recently, the precursor to these methods is the early work of Amari [3], who proposed the use of natural gradients to tackle weight space symmetries in neural networks.", "startOffset": 107, "endOffset": 110}, {"referenceID": 3, "context": "The idea is to compute the steepest descent direction for the weight update on the manifold defined by these symmetries and use this direction to update the weights [4, 5, 6, 7].", "startOffset": 165, "endOffset": 177}, {"referenceID": 4, "context": "The idea is to compute the steepest descent direction for the weight update on the manifold defined by these symmetries and use this direction to update the weights [4, 5, 6, 7].", "startOffset": 165, "endOffset": 177}, {"referenceID": 5, "context": "The idea is to compute the steepest descent direction for the weight update on the manifold defined by these symmetries and use this direction to update the weights [4, 5, 6, 7].", "startOffset": 165, "endOffset": 177}, {"referenceID": 6, "context": "The idea is to compute the steepest descent direction for the weight update on the manifold defined by these symmetries and use this direction to update the weights [4, 5, 6, 7].", "startOffset": 165, "endOffset": 177}, {"referenceID": 7, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 8, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 9, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 10, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 11, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 12, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 13, "context": "On the other hand, optimization over a manifold with symmetries or invariances has been a topic of much research and provides guidance to other simpler metric constructions [8, 9, 10, 11, 12, 13, 14].", "startOffset": 173, "endOffset": 199}, {"referenceID": 16, "context": "Figure 1: ArchBN: a two layer deep architecture for classification with batch normalization [17].", "startOffset": 92, "endOffset": 96}, {"referenceID": 14, "context": "The stochastic gradient descent algorithms with the proposed updates are implemented in Matlab and Manopt [15].", "startOffset": 106, "endOffset": 110}, {"referenceID": 15, "context": "Each layer in ArchBN has typical components commonly found in convolutional neural networks [16] such as multiplication with a trainable weight matrix (W1,W2), a batch normalization layer (b1, b2) [17], element-wise rectification ReLU, 2\u00d7 1 max-pooling with stride 2, and sub-sampling.", "startOffset": 92, "endOffset": 96}, {"referenceID": 16, "context": "Each layer in ArchBN has typical components commonly found in convolutional neural networks [16] such as multiplication with a trainable weight matrix (W1,W2), a batch normalization layer (b1, b2) [17], element-wise rectification ReLU, 2\u00d7 1 max-pooling with stride 2, and sub-sampling.", "startOffset": 197, "endOffset": 201}, {"referenceID": 16, "context": "The batch normalization [17] layer normalizes each feature (element) in the h1 and h2 layers to have zero-mean unit variance over each mini-batch.", "startOffset": 24, "endOffset": 28}, {"referenceID": 16, "context": "Empirical results in [17] show that this significantly improves convergence and our experiments also support this claim.", "startOffset": 21, "endOffset": 25}, {"referenceID": 1, "context": "It should be stressed that our analysis differs from [2], where the authors deal with a simpler case of \u03b1 = \u03b10, \u03b2 = 1 \u03b10 , and \u03b10 is a non-zero scalar.", "startOffset": 53, "endOffset": 56}, {"referenceID": 1, "context": "Unfortunately, the Euclidean gradient of the weights (used in standard SGD) is not invariant to reparameterizations of the weights [2].", "startOffset": 131, "endOffset": 134}, {"referenceID": 14, "context": "It is defined as \u03a0W (Z) = Z \u2212Diag(diag((ZW ))W [15].", "startOffset": 47, "endOffset": 51}, {"referenceID": 7, "context": "An efficient way to resolve the symmetries that exist in ArchBN is to constrain the weight vectors (filters) in W1 and W2 to lie on the oblique manifold [8, 15], i.", "startOffset": 153, "endOffset": 160}, {"referenceID": 14, "context": "An efficient way to resolve the symmetries that exist in ArchBN is to constrain the weight vectors (filters) in W1 and W2 to lie on the oblique manifold [8, 15], i.", "startOffset": 153, "endOffset": 160}, {"referenceID": 0, "context": "The convergence analysis of SGD on manifolds follows the developments in [1, 18].", "startOffset": 73, "endOffset": 80}, {"referenceID": 17, "context": "The convergence analysis of SGD on manifolds follows the developments in [1, 18].", "startOffset": 73, "endOffset": 80}, {"referenceID": 20, "context": "Figure 2: SGD with the proposed UN weight updates, shown in Table 1, for training SegNet [21].", "startOffset": 89, "endOffset": 93}, {"referenceID": 18, "context": "For each full dataset training run, we use the bold-driver protocol [19] to anneal the learning rate.", "startOffset": 68, "endOffset": 72}, {"referenceID": 19, "context": "This raises the question for future research as to whether some deep networks necessarily have to be that deep or it can be made shallower (and efficient) by better optimization [20].", "startOffset": 178, "endOffset": 182}, {"referenceID": 20, "context": "We apply SGD with the proposed UN weight updates in Table 1 for training SegNet, a deep convolutional network proposed for road scene image segmentation into multiple classes [21].", "startOffset": 175, "endOffset": 179}, {"referenceID": 21, "context": "The network is trained for 100 epochs on the CamVid [22] training set of 367 images.", "startOffset": 52, "endOffset": 56}], "year": 2015, "abstractText": "Recent works have highlighted scale invariance or symmetry present in the weight space of a typical deep network and the adverse effect it has on the Euclidean gradient based stochastic gradient descent optimization. In this work, we show that a commonly used deep network, which uses convolution, batch normalization, reLU, max-pooling, and sub-sampling pipeline, possess more complex forms of symmetry arising from scaling-based reparameterization of the network weights. We propose to tackle the issue of the weight space symmetry by constraining the filters to lie on the unit-norm manifold. Consequently, training the network boils down to using stochastic gradient descent updates on the unit-norm manifold. Our empirical evidence based on the MNIST dataset shows that the proposed updates improve the test performance beyond what is achieved with batch normalization and without sacrificing the computational efficiency of the weight updates.", "creator": "LaTeX with hyperref package"}}}