{"id": "1512.05484", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Dec-2015", "title": "Deep Active Object Recognition by Joint Label and Action Prediction", "abstract": "An active characteristic recognition example has the quick this latter 'll to protection over all efficient both capture depicting but places more comparatively those training different that opening whether means creative at test time. In far material, we initiatives is deep technic neural commercial for formed concept establish no simultaneously impact the identity label, without empanel the put decision to special on the object with since aim means better acceptance performance. We medicine active existence recognition turn turn exercises learning but and derive the improvements function to taxi first platforms the joint prediction of took object dub same the action. A electrotherapy model this object contexts based on the Dirichlet resource is implementation and embedded has itself network for encoding the major of the it. The planning is had saw by appear reducing the label and action numerical errors using wavelength descent. We ascertained show that similar cuts platforms is allowed while might both the sphere label turn with responding saw GERMS, has dataset given active object recognition. We learn is safety version prediction accuracy related the re whereas with Dirichlet that Naive Bayes state syntax. The results of microgravity widely suggested the its model equipped five Dirichlet state encoding takes considered in credited, often qualifies depict that past the they professional and higher precise example classics prediction about clear turn.", "histories": [["v1", "Thu, 17 Dec 2015 07:33:45 GMT  (5400kb,D)", "http://arxiv.org/abs/1512.05484v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mohsen malmir", "karan sikka", "deborah forster", "ian fasel", "javier r movellan", "garrison w cottrell"], "accepted": false, "id": "1512.05484"}, "pdf": {"name": "1512.05484.pdf", "metadata": {"source": "CRF", "title": "Deep Active Object Recognition by Joint Label and Action Prediction", "authors": ["Mohsen Malmira", "Karan Sikkab", "Deborah Forsterc", "Ian Faseld", "Javier R. Movelland", "Garrison W. Cottrella"], "emails": ["mmalmir@eng.ucsd.edu", "ksikka@eng.ucsd.edu", "forster@ucsd.edu", "ian@emotient.com", "javier@emotient.com", "gary@eng.ucsd.edu"], "sections": [{"heading": null, "text": "An active object recognition system has the advantage of being able to act in the environment to capture images that are more suited for training and that lead to better performance at test time. In this paper, we propose a deep convolutional neural network for active object recognition that simultaneously predicts the object label, and selects the next action to perform on the object with the aim of improving recognition performance. We treat active object recognition as a reinforcement learning problem and derive the cost function to train the network for joint prediction of the object label and the action. A generative model of object similarities based on the Dirichlet distribution is proposed and embedded in the network for encoding the state of the system. The training is carried out by simultaneously minimizing the label and action prediction errors using gradient descent. We empirically show that the proposed network is able to predict both the object label and the actions on GERMS, a dataset for active object recognition. We compare the test label prediction accuracy of the proposed model with Dirichlet and Naive Bayes state encoding. The results of experiments suggest that\n\u2217Corresponding Author Email addresses: mmalmir@eng.ucsd.edu (Mohsen Malmir),\nksikka@eng.ucsd.edu (Karan Sikka), forster@ucsd.edu (Deborah Forster), ian@emotient.com (Ian Fasel), javier@emotient.com (Javier R. Movellan), gary@eng.ucsd.edu (Garrison W. Cottrell)\nPreprint submitted to Computer Vision and Image Understanding December 18, 2015\nar X\niv :1\n51 2.\n05 48\n4v 1\n[ cs\n.A I]\nthe proposed model equipped with Dirichlet state encoding is superior in performance, and selects images that lead to better training and higher accuracy of label prediction at test time.\nKeywords: Active Object Recognition, Deep Learning, Q-learning"}, {"heading": "1. Introduction", "text": "A robot interacting with its environment can collect large volumes of dynamic sensory input to overcome many challenges presented by static data. A robot manipulating an object with the capability to control its camera orientation, for example, is an example of an active object recognition system. In such dynamic interactions, the robot can select the training data for its models of the environment, with the goal of maximizing the accuracy with which it perceives its surroundings. In this paper, we focus on active object recognition (AOR) with the goal of developing a model that can be used by a robot to recognize an object held in its hand.\nThere are a variety of approaches to active object recognition, the goal of which is to re-position sensors or change the environment so that the new inputs to the system become less ambiguous for label prediction [1, 2, 19]. An issue with previous approaches to active object recognition is that they mostly used small simplistic datasets, which were not reflective of challenges in real-world applications [15]. To avoid this problem, we have collected a large dataset for active object recognition, called GERMS1, which contains more than 120K high resolution (1920x1080) RGB images of 136 different plush toys. This paper extends our previous work, Deep Q-learning [15], where an action selection network was trained on top of a pre-trained convolutional neural network. In this paper we extend the model to train the network end-to-end using GERMS images to jointly predict object labels and action values.\nThis paper makes two primary contributions: First, we develop a deep active object recognition (DAOR) model to jointly predict the label and the best next action on an input image. We propose a deep convolutional neural network that outputs the object labels and action-values in different layers of the network. We use reinforcement learning to teach the network to predict the action values, and minimize the action value prediction error along with the label prediction cross\n1Available at http://rubi.ucsd.edu/GERMS/\nentropy. The visual features in early stages of this network are learned to minimize both errors. The second contribution of this work is to embed a generative Dirichlet model of objects similarities for encoding the state of the system. This model integrates information from different images into a vector, based on which actions are calculated to optimize performance. We embed this model as a layer in the network and derive the learning rule for updating the Dirichlet parameters using gradient descent. We conduct a series of experiments on the GERMS dataset to test (1) if the model can be trained jointly for label and action prediction, and (2) how effective is the proposed Dirichlet state encoding compared to more traditional Naive Bayes approach, and (3) discuss some of the properties of the learned policies.\nIn the next section, we review some of the previous approaches to active object recognition and examine the datasets they used. Next we introduce the GERMS dataset and describe the training and testing data used for the experiments in this paper. After that, we describe the details of the proposed network and Dirichlet state encoding, going into the details of cost functions and update rules for different layers of the network. In the results section, we report the properties of the proposed network and compare its performance in different scenarios. The following section is the concluding remarks."}, {"heading": "2. Literature Review", "text": "Active object recognition systems include two modules: A recognition module and a control module. Given a sequence of images, the recognition module produces a belief state about the objects that generated those images. Given this belief state, the control module produces actions that will affect the images observed in the future [19]. The controller is typically designed to improve the speed and accuracy of the recognition module.\nOne of the earliest active systems for object recognition was developed by Wilkes and Tsotsos [3]. They used a heuristic procedure to bring the object into a \u2018standard\u2019 view by a robotic-arm-mounted camera. In a series of experiments on 8 Origami objects, they qualitatively report promising results for achieving the standard view and retrieving the correct object labels. Seibert and Waxman explicitly model the views of an object by clustering the images acquired from the view-sphere of the object into aspects [4]. The correlation matrices between these aspects are then used in an aspect network to predict the correct object label. Using three model aircraft objects, they show that the belief over the correct\nobject improves with the number of observed transitions compared to randomly generated paths on the view sphere of these objects.\nSchiele and Crowley developed a framework for active object recognition by making an analogy between object recognition and information transmission [5]. They try to minimize the conditional entropy H(O|M) between the original object O and the observed signal M. They used the COIL-100 dataset for their experiments, which consists of 7200 images of 100 toy objects rotated in depth [6]. This dataset has been appealing for active object recognition because it provides systematically defined views of objects. At test time, by sequentially moving to the most and second most discriminative views of each object, Schiele and Crowley achieved almost perfect recognition accuracy on this dataset.\nBorotschnig et al. formulate the observation planning in terms of maximization of the expected entropy loss over actions [7]. Larger entropy loss is equivalent to less ambiguity in interpreting the image. With an active vision system consisting of a turntable and a moving camera, they report improvements in object recognition over random selection of the next viewing pose on a small set of objects. Callari and Ferrie take into account the object modeling error and search for actions that simultaneously minimize both modeling variance and uncertainty of belief over objects [9]. Using a set of 10 custom clay objects, they report decrease in the entropy of the classifier output and Kullback-Leibler divergence between the posterior distribution of each object and the corresponding true distribution.\nBrowatzki et al. use a particle filter approach to determine the viewing pose of an object held in-hand by an iCub humanoid robot [10, 11]. For selecting the next best action, instead of maximizing the expected information gain, which is computationally expensive, they maximize a measure of variance of observations across different objects. They show that their method is superior to random action selection on small sets of custom objects. Atanasov et al. focus on the comparison of myopic greedy action selection that looks ahead only one step and non-myopic action selection which considers several time steps into the future [12]. They formulate the problem as a Partially Observable Markov Decision Process, showing their method is superior to random and greedy selection of actions on a small set of household objects.\nRebguns et al. used acoustic properties of objects to learn an infomax controller to recognize a set of 10 objects [18]. In this work, they proposed a Dirichlet based model to fuse information from different observations into a single belief vector. Using this latent variable mixture model for acoustic similarities, the robot learned to rapidly reduce uncertainty about the categories of the objects in a room. The state encoding of our system is similar to the mixture model of this\nwork, however we embed this model into the network and train its parameters using gradient descent which is more suited for neural networks.\nPaletta & Pinz [8] treat active object recognition as an instance of a reinforcement learning problem, using Q-learning to find the optimal policy. They used an RBF neural network with the reward function depending on the amount of entropy loss between the current and the next state.\nA common trend in many of these approaches is the use of small, sometimes custom- designed sets of objects. There are medium sized datasets such as COIL100, which consists of 7200 images of 100 toy objects rotated in depth [6]. This dataset is not an adequately challenging dataset for several reasons, including the simplicity of the image background, and the high similarity of different views of the objects due to single-track recording sessions. What is missing is a challenging dataset for active object recognition with inherent similarities among different object categories. The dataset should be large enough to train models with large number of parameters, such as deep convolutional neural networks. In the next section, we describe GERMS, a large and challenging dataset for active object recognition that we used for experiments in this paper."}, {"heading": "3. The GERMS Dataset", "text": "The GERMS dataset was collected in the context of the RUBI project, whose goal is to develop robots that interact with toddlers in early childhood education environments [13, 14, 15]. This dataset consists of 1365 video recordings of giveand-take trials using 136 different objects. The objects are soft toys depicting various human cell types, microbes and disease-related organisms. Figure 1 shows the entire set of these toys. Each video consists of the robot (RUBI) bringing the grasped object to its center of view, rotating it by 180\u25e6 and then returning it. The dataset was recorded from RUBI\u2019s head-mounted camera at 30 frames per second.\nThe data for GERMS were collected in two days. On the first day, each object was handed to RUBI in one of 6 pre-determined poses, 3 to each arm, after which RUBI grabbed the object and captured images while rotating it. The robot also captured the positions of its joints for every capture image. On the second day, we asked a set of human subjects to hand the GERM objects to RUBI in poses they considered natural. A total of 12 subjects participated in test data collection, each subject handing between 10 and 17 objects to RUBI. For each object, at least 4 different test poses were captured. The background of the GERMS dataset was provided by a large screen TV displaying video scenes from the classroom in which RUBI operates, including toddlers and adults moving around.\nWe use half of the data collected in day 1 and 2 for training and the other half of each day for testing. More specifically, three random tracks out of six tracks for each object in Day 1 and two randomly selected tracks for each object from Day 2 were used for training the network and the rest was used for testing. Table 1 shows the statistics of training and testing data for the experiments in this paper."}, {"heading": "4. Proposed Network", "text": "The traditional view of an active object recognition pipeline usually treats the visual recognition and action learning problems separately, with visual features being fixed when learning actions. In this work, we try to solve both problems simultaneously to reduce the training time of an AOR model. By incorporating the errors from action prediction into visual feature extraction, we hope to acquire features that are suited for both label and action prediction.\nThe proposed network is shown in figure 2. The input image is first transformed to a set of beliefs over different object labels by a classification network. The belief is then combined with the the previously belief vectors to produce an\nencoding of the state of the system. This is done by the Mixture belief update layer in the network. The accumulated belief is then transformed into action-values, that are used to select the next input image.\nWe next detail each part of the network, describing the challenges and their corresponding solution. We first address the transformation of images into beliefs over object classes. Then we tackle belief accumulation over observed images,followed by the action learning and,finally, present the full description of the algorithm to train this model."}, {"heading": "4.1. Single Image Classification", "text": "The goal of this part of the network is to transform a single image into beliefs over different object labels. The feature extraction stage is comprised of 3 convolution layers followed by 3 fully connected layers. The dimensions of each layer are shown in figure 2. The convolution layers use filters of 3\u00d7 7\u00d7 7, 64\u00d7 5\u00d7 5 and 128\u00d7 3\u00d7 3 respectively for layers 1,2 and 3. The number of parameters in each layer of the network is shown in table 2. The operations of each layer are inspired by the model proposed in [17]. Each convolution layer is followed by rectification, normalization across channels and max pooling over a neighborhood of 2\u00d72 with stride of 1. The dropout for ReLU1 and ReLU2 uses P = 0.5.\nWe shall denote the GERMS dataset by D= {Ii,yi,Pi}Ni=1, where Ii \u2208R64\u00d764\u00d73 is the image captured by the robot camera, yi \u2208 {o1,o2, ...,oc} is the object label and Pi is an integer number denoting the pose of the robot\u2019s gripper as positive\nintegers [15]. In order to learn the weights of the single image classification part, we perform gradient decent on action prediction and cross-entropy costs, denoted by CRL and CCL respectively. The cross-entropy classification cost CCL is:\nCCL =\u2212\u2211 i\nC\n\u2211 j=1 I(yi = c) logBi j. (1)\nHere I is the indicator function for the class of the object and Bi j = P(o j|Ii) is the predicted label belief for the ith image corresponding to the jth class. The next subsection describes the action prediction cost CRL."}, {"heading": "4.2. Action Value Prediction", "text": "Active object recognition can be treated as a reinforcement learning problem, whose goal is to learn an optimal policy \u03c0\u2217 : S\u2192 A from states S to actions A. The optimal policy is expected to maximize the total reward for every interaction sequence s\u03c00:T with the environment,\ns0 \u03c0(s0)\u2212\u2212\u2212\u2192 s1 \u03c0(s1)\u2212\u2212\u2212\u2192 s2 \u03c0(s2)\u2212\u2212\u2212\u2192 . . . \u03c0(sT\u2212\u22121)\u2212\u2212\u2212\u2212\u2212\u2192 sT\nwhere si \u03c0(si)\u2212\u2212\u2212\u2192 si+1 is the transition from si to si+1 by performing the action ai = \u03c0(si). The total reward for an interaction sequence s\u03c00:T is T R(s \u03c0 0:T ) =\u2211 T t=0 \u03b3 tR(st) where R : S\u2192 R is a reward function and \u03b3, 0 < \u03b3 < 1 is a discount factor used\nto emphasize rewards closer in time. For an AOR system, an interaction sequence starts by observing image of the object with the initial orientation in the robot\u2019s gripper. The state of the system is then updated by the observed image, and an action is selected to perform on the object to maximize the total reward. The reward in each step is determined by the accuracy of predicted label for the observed images up to that step.\nIn order to learn the optimal policy, we use the Q(\u03bb )algorithm to train the network to predict actions for improved classification [16]. This is a model-free method that learns to predict the expected reward of actions in each state. More specifically, let Q\u03c0(s,a) be the action value for state s and action a,\nQ\u03c0(s,a) = E\u03c0 {T R(s\u03c00:T )|s0 = s,a0 = a} ,\nwhich is the expected reward for doing action a in state s. Let the agent interact with the environment to produce a set of interaction sequences {s\u03c00:T}. Then Q(\u03bb )learns a policy by applying the following update rule to every observed transition T R\u03c0(st ,st+1) = st \u03c0(st)\u2212\u2212\u2212\u2192 st+1,\nQ\u03c0(st ,at)\u2190 (1\u2212\u03b1)Q\u03c0(st ,at)+\u03b1 [ R(st+1)+ \u03b3 max\na Q\u03c0(st+1,a)\n] (2)\nwhere 0 < \u03b1 < 1 is the learning rate, and action at is selected using an epsilongreedy version of the learned policy. We interpret this iterative update in the following way to be useful for training a neural network. Let the output layer of the network predict Q(s,a) for the learned policy \u03c0 for every possible action a in s. Then a practical approximation of the optimal policy is obtained by minimizing the reinforcement learning cost,\nCRL = \u2211 T R\u03c0 (st ,st+1)\u2208{s\u03c00:T }\n[ R(st+1)+ \u03b3 max\na Q\u03c0(st+1,a)\u2212Q\u03c0(st ,at)\n]2 (3)\nIn the proposed network, action value prediction is done by transforming the state of the system St at tth through layers ReLU3,ReLU4 and LU2. We train the weights of the network in these layers by minimize CRL. In the next subsection, we go into the details of state encoding, and after that we describe the set of actions."}, {"heading": "4.3. State Encoding", "text": "State encoding has a prominent effect on the performance of an AOR system. Based on the current state of the system, an action is selected that is expected to\ndecrease the ambiguity about the object label. An appealing choice is to transform images into beliefs over different target classes and use them as the state of the system. Based on the target label beliefs, the system decides to perform an action to improve its target label prediction. What we expect from the AOR system is to guide the robot to pick object views that are more discriminative among target classes.\nWe first transform the input image Ii into a belief vector Bi = [Bi j]Cj=1 using the the first 7 layers of the network, where\nBi j \u2265 0, C\n\u2211 j=1 Bi j = 1,\nThe produced label belief vector is then combined with the previously observed belief vectors from this interaction sequence to form the state of the system. The motivation for this encoding is that the combined belief encodes the ambiguity of the system about target classes and thus can be used to navigate to more discriminative views of objects. Active object recognition methods usually adapt a Naive Bayes approach to combining beliefs from different observations. Assume that in an interaction sequence, a sequence of images I0:t = {I0, I1, . . . , It} have been observed and their corresponding beliefs B0:t = {B0,B1, . . . ,Bt} have been calculated. The state of the system at time t is calculated using Naive Bayes belief combination, which is to take the product of the individual belief vectors and then normalize,\nst = P(O|I0:t) = P(O, I0:t)\nP(I0:t)\n\u221d P(O) t\n\u220f i=0 P(Ii|O)\n\u221d t\n\u220f i=0 P(O|Ii) (4)\nwhere O is the target label, and P(O|Ii) is the vector of beliefs produced using single image classification. Here we assumed a uniform prior over images and target labels. The problem with Naive Bayes is that if an image is observed repeatedly in I1:t , the result will change based on the number of repetitions. This is undesirable since the state of the system changes with repeated observations of an image where no new information is added to the system. If a specific image is good for classification, the system can visit that image more often to artificially increase the\nperformance of the system. To avoid this problem, we adapt a generative model based on Dirichlet distribution to combine different belief vectors.\nWe use a generative model similar to [18] to calculate the state of the system given a set of images. The intuition behind this model is that performing an action on an object will produce a distribution of belief vectors. We model the observed belief vectors given the object and action as a Dirichlet distribution, parameters of which are learned from the data. The model is shown in figure 3. Here A is a discrete variable representing the action from the repertoire of actions {a1,a2, . . . ,aH}, O \u2208 {o1,o2, . . . ,oC} represents the object label and \u03b1 \u2208 RC is the vector of parameters of the Dirichlet distribution from which the belief vector B \u2208 RC over target labels is drawn,\nP(B|\u03b1) = Dir(B;\u03b1)\n= \u0393(\u2211Cj=1[\u03b1] j)\n\u220fCj=1 \u0393([\u03b1] j)\nC\n\u220f j=1\n[B][\u03b1] j\u22121j (5)\nThe state of the system is calculated by computing the posterior probability of object-action beliefs using the model in figure 3. Let POa (ai,Bi) = P(O,a|ai,Bi) denote the posterior probability of an object-action pair given the performed action and the observed belief vector. Assuming uniform prior over object and \u03b1 and a deterministic policy for choosing actions,\nP(o,a|B) =\n=\n\u222b \u03b1 P(O,a,B,\u03b1)d\u03b1\nP(B) \u221d \u222b\n\u03b1 P(O)P(a)P(\u03b1|O,a)P(B|\u03b1)d\u03b1 \u221d \u222b\n\u03b1Oa Dir(B;\u03b1Oa ))d\u03b1 O a (6)\nThe notation \u03b1Oa is to make clear that there is an \u03b1 for each pair of object-action. Instead of full posterior probability, we use \u03b1\u0302Oa , maximum likelihood estimate of \u03b1 , and replace the integral above by ,\nP(o,a|B)\u2248 Dir(B|\u03b1\u0302Oa ) (7)\nFor an interaction sequence B0:t and A0:t = {a0,a1, . . . ,at}, the posterior probabil-\nity of object-action pair is,\nP(O,a|A0:t ,B0:t) = t\n\u220f i=0 P(O,a|Bi)I(a,ai) (8)\nThe state of the system is comprised of the vector of object posterior beliefs for every object and action, plus the features and belief extracted from the latest image It ,\nst = {[P(O,a|A0:t ,B0:t)],Bt}, (9) O \u2208 {o1,o2, . . . ,oC} a \u2208 {a1,a2, . . . ,aH}\nNote that st \u2208 RCH is a vector of length C\u00d7H."}, {"heading": "4.4. Training Network for Joint Label and Action Prediction", "text": "Our goal is to train the network jointly for action and label prediction. We achieved this by minimizing the total cost which is sum of the costs for both label (1) and action prediction (3). Note that the errors for action value prediction are backpropagated through the entire network, reaching visual feature extraction units. The total cost function for action value and label prediction is,\nCost = CRL +CCL (10)\nThe weights of the network in the visual feature extraction layers (Conv1, Conv2, Conv3, ReLU1, ReLU2, LU1) are trained using backpropagation on (10), while the action prediction layers (ReLU3, ReLU4 and LU2) are trained by gradient descent on the action prediction error (3).\nTo learn the parameters of the belief update, that is \u03b1Oa , we use gradient descent on maximum likelihood of the data. The maximum likelihood of Dirichlet distribution is a convex function of its parameters and can be minimized using gradient descent. For a set of beliefs B1:N observed by performing action a on the object O, the gradient of the log-likelihood with respect to the parameters are,\n\u2202 logP(B1:N |\u03b1Oa ) \u2202 [\u03b1Oa ]k = N d d[\u03b1Oa ]k log\u0393( C \u2211 j=1 [\u03b1Oa ] j)\u2212 d d[\u03b1Oa ]k log\u0393([\u03b1Oa ]k)+ logBk\n= N\u03a8( C\n\u2211 j=1 [\u03b1Oa ] j)\u2212N\u03a8([\u03b1Oa ]k)+ logBk (11)\nwhere \u03a8(x) = d/d(x) log\u0393(x) is the digamma function. We use one unit per Dirichlet distribution Dir(|\u03b1Oa ) in the belief update. These units receive the current belief and their output for the previously observed belief, and produce an updated belief. An schematic of the belief update layer of the network is shown in figure 3. Learning \u03b1Ok is carried out simultaneously with the rest of the network weights in one training procedure."}, {"heading": "4.5. Reward Function", "text": "Another component that has an important effect on the performance of our AOR system is the reward function which maps state of the system (4) into rewards. A simple choice for reward function is\nR(st) = {\n+1 if argmaxi[Bt ]i = Target-Label(It)) \u22121 otherwise (12)\nWe call this the correct-label reward function. A reward of +1(\u22121) is given to the system if at time step t the action at brings the object to a pose for which the predicted label is correct (wrong). The intention behind this reward function is to drive the AOR system to pick actions that lead to best next view of the object in terms of label prediction."}, {"heading": "4.6. Action Coding", "text": "In order to be able to reach every position in the robot\u2019s joint gripper range, we use a set of relative rotations as the actions of the system. More specifically, we use 10 actions to rotate the gripper from its current position by any of the following offset values: {\u00b1\u03c04 ,\u00b1 \u03c0 8 ,\u00b1 \u03c0 16 ,\u00b1 \u03c0 32 ,\u00b1 \u03c0 64}. The total range of rotation for each of the robot\u2019s grippers is \u00b1\u03c0 . The actions are selected to be fine grained enough so that the robot can reach any position with minimum number of movements possible. This encoding is simple and flexible in the range of positions that the robot can reach, however we found that the policies can become stuck with a few actions without trying the rest. Encoding the states with the Dirichlet belief update helps alleviate this issue to some degree, however, it doesn\u2019t completely remove the problem. We deal with this problem by forcing the algorithm to pick the next best action whenever the best action leads to an image which has already been seen."}, {"heading": "5. Experimental Results", "text": ""}, {"heading": "5.1. Training Details", "text": "We trained the network by minimizing the costs of classification, action value prediction (3) and negative of log-likelihood of Dirichlet distributions (11). We used backpropagation with minibatches of size 128 to train the network. For Q(\u03bb ), we used initial learning rate of 0.1 which was multiplied by 0.5 after iterations 400,800,1200,1500 and then remained constant. The total number of training iterations is 4000. For each iteration, an interaction sequence of length 5 is followed. The full training algorithm is shown in algorithm 1. For Q(\u03bb ), we used \u03b5-greedy policy in the training stage, with \u03b5 decreasing step-wise from 0.9 to 0.1. We found that using an \u03b5 > 0 at the test stage hurts the performance, therefore we used \u03b5 = 0 during testing. The number of actions is 10 as described above, and there are a total of 136 object classes, resulting in a total of 1360 Dirichlet distributions for state encoding 9."}, {"heading": "5.2. Learning the Parameters of Dirichlet Distributions", "text": "Figure 4 shows the average negative log-likelihood of the data under Dirichlet distributions for training of a DN model. This figure shows that the neg-loglikelihood of data decreases after the first 1000 iterations, after which is the rate of change is decreased but not stopped.\nAlgorithm 1 Training the network for joint label and action prediction. 1: procedure TRAIN 2: R\u2190 1 3: for iteration=1 To N do 4: I1,y\u2190 NextImage(iteration) 5: s0\u2190 [0] 6: Actions\u2190 RandomActions(NumActions) 7: for t=1 To NumMoves do 8: st ,predictedActions\u2190 FeedForward(It ,st\u22121,Actions) 9: It+1, \u2190 NextImage(It ,predictedActions) 10: targetActionVals, y\u0302\u2190 LookAhead(It+1,st ,Actions) 11: if t = NumMoves then 12: targetActionVals\u2190 targetActionVals+R(st) 13: for W \u2208 {ReLU3,ReLU4,LU} do 14: W \u2190W \u2212\u03bbW \u2202\u2202W {CRL} 15: for W \u2208 {Conv1,Conv2,Conv3,ReLU1,ReLU2,So f tmax} do 16: W \u2190W \u2212\u03bbW \u2202\u2202W {CRL +CCL} 17: for O \u2208 {o1,o2, . . . ,oC},a \u2208 {a1,a2, . . . ,aH} do 18: \u03b1Oa \u2190 \u03b1Oa +\u03bb \u2202\u2202\u03b1Oa logP(Bt |\u03b1 O a )"}, {"heading": "5.3. Label Prediction Accuracy", "text": ""}, {"heading": "5.3.1. Comparing Naive Bayes and Dirichlet State Encoding", "text": "In the first experiment, we compare the effectiveness of the Dirichlet and Naive Bayes state encodings in terms of label prediction accuracy. For Naive Bayes models (NB), the state of the system is updated using (4), while the size and configuration of the rest of the network remains the same. Dirichlet state encoding is implemented using (9). We refer to Dirichlet models as (DR). For each encoding and for each arm, we train 10 different models and report the average test label prediction accuracy as a function of number of observed images, comparing the Deep Active Object Recognition (DAOR) and Random (Rnd) action selection policies. Figure 5 plots the performance for these models. It is obvious that the Dirichlet model is superior to Naive Bayes in label prediction accuracy.\nThe first point to notice in figure 5 is the performance difference between Naive Bayes and Dirichlet belief updates on single images (action 0). NB models achieve a performance less than 35%, while Dirichlet achieves higher than 40%. One interpretation of this result is that the Naive Bayes models pick actions that\nbounce between a subset of train images, leading to underfitting of the model. In the next subsection, we provide some evidence for this justification. On the other\nhand, the performance of DR-DAOR model tends to saturate after 3 actions, while DR-Rnd keeps improving for subsequent actions. This might be due to the fact that DR-DAOR also bounces between subsets of images at the test time. We can avoid such behavior by forcing the policies to pick actions that lead to joint poses that haven\u2019t already been visited in the same interaction sequence."}, {"heading": "5.3.2. Removing Duplicate Visits", "text": "We train a set of models using Dirichlet state encoding, while forcing the policy to pick non-duplicate joint poses in every action of an interaction sequence. This approach is easy to implement by keeping a history of visited joint poses during an interaction sequence and picking actions with highest action value that don\u2019t lead to the visited joint positions. We refer to this model as Dirichlet with non-repeated visits (DN). Comparison between DN and DR for Rnd and DAOR policies (both forced to visit novel poses) is shown in figure 6.\nComparison between the models mentioned above is shown in table 3. We see that the best performing model is DN-DAOR with the exception of action 1 for the right arm, which DR-DAOR achieves the best performance. For both arms, Dirichlet models perform significantly better than Naive Bayes, improving the\nmodel\u2019s performance on average by 10% for the right arm and 14% for the left arm."}, {"heading": "5.3.3. Visualizing Policies", "text": "It may help us understand the weakness and strength of different models if we take a closer look into the learned policies. For this purpose, we visualize the consecutive actions in the interactions sequences of length 5, as shown for training data in figures 7 and for test data in figure 8. Each plot represents actions in different rows, with the magnitude and orientation of the action begin depicted by the length and direction of the corresponding arrow on the left side. Each time step of the interaction sequence is shown as a numbered column. The colored lines in each plot connect one action in column i to another action in column i+1 only if those actions appeared consecutively in interaction sequences at these time steps. The thickness of lines depicts the relative frequency by which two actions were observed on the data.\nFigure 7 visualizes the policies DN-DAOR and NB-DAOR on the training data. This figure helps clarify the lower performance of NB models as described before. For NB-DAOR shown on the left side of figure 7, we see thick lines connecting actions that rotate the object with the largest magnitude in opposite\ndirections. The relative thickness of these lines indicates that the model tends to go to one end of joint\u2019s rotation range, go back with one large rotation and then repeat. Despite presence of other actions, this back and forth action dominates the training process, leading to lower accuracy on test label prediction for single images. On the right side of figure 7 we see that DN-DAOR picks a wide range of actions, which leads to better examination of training images and thus higher performance on single images.\nFigure 8 visualizes the learned policies at test time for NB-DAOR and DNDAOR. We see on the left side that NB-DAOR only swings between the two large rotations in the opposite direction, while DN-DAOR prefers to do a few larger\nactions (thick purple and blues lines connecting columns 2, 3 and 4) followed by few smaller actions in different directions. There is no back and forth for DNDAOR between visited joint positions, which leads to better performance on the test set."}, {"heading": "6. CONCLUSIONS", "text": "In this paper, we proposed a model for deep active object recognition based convolutional neural networks. The model is trained by jointly minimizing the action and label prediction simultaneously. The visual features in early stages of\nthis network were trained by minimizing action and label prediction costs. The difference between the work presented here and deeply supervised networks [20] is that in the latter, the training is carried out by minimizing the classification error in different layers, while in our approach we minimized the action learning costs along with classification error.\nWe also adapted an alternative to the common Naive Bayes belief update rule for state encoding of the system. Naive Bayes has the potential to overfit to subsets of training images, which could lead to lower accuracy at the test time. We used a generative model based on Dirichlet distribution to model the belief over target classes and actions performed on them. This model was embedded into the network, which allowed training the network in one pass jointly for label and action prediction. The results of experiments confirmed that the proposed Dirichlet model is superior in test label prediction to the Naive Bayes approach for system\u2019s state encoding.\nA common trend we observed in the models trained in this paper was the strong preference for a few actions, which led to limited examination of the objects, and thus lower performance on label prediction. This preference was the strongest in the Naive Bayes state encoding models. Employing Dirichlet for state encoding helped alleviate this problem, mainly for the training data and less for test data. We observed that the strong preference for a limited set of actions weakens in the training stage for the DR-DAOR model, and as a result of this the test label prediction accuracy was improved. We hypothesize that in addition to state encoding, learning actions on the training images which have high label prediction accuracy, leads to this strong preference. In training our models, the training accuracy reaches above 90% after 1000 iterations. This may cause the Q(\u03bb )to reward every action, which finally may lead to one action taking over and always producing the highest action value."}, {"heading": "7. Acknowledgments", "text": "The research presented here was funded by NSF IIS 0968573 SoCS, IIS INT2Large 0808767, and NSF SBE-0542013 and in part by US NSF ACI-1541349 and OCI-1246396, the University of California Office of the President, and the California Institute for Telecommunications and Information Technology (Calit2)."}, {"heading": "8. References", "text": "[1] J. Aloimonos, J. I. Weiss, and A. Bandyopadhyay, Active vision, International J. Computer Vision, vol. 1, no. 4, pp. 333-356, 1988.\n[2] R. Bajcsy, Active perception, Proceedings of the IEEE, vol. 76, no. 8, pp. 966-1005, 1988.\n[3] D. Wilkes and J. K. Tsotsos, Active object recognition, Proceedings CVPR\u201992., 1992 IEEE Computer Society Conference on, pp. 136-141. IEEE, 1992.\n[4] M. Seibert and A. M. Waxman, Adaptive 3-D object recognition from multiple views, IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 14, no. 2, pp. 107-124, 1992.\n[5] B. Schiele and J. L. Crowley, Transinformation for active object recognition, In Computer Vision, Sixth International Conference on, pp. 249-254. IEEE, 1998.\n[6] S. A. Nene, S. K. Nayar and H. Murase, Columbia object image library (COIL-100), Technical Report CUCS-006-96, Columbia University, 1996.\n[7] H. Borotschnig, L. Paletta, M. Prantl and A. Pinz, Appearance-based active object recognition, Image and Vision Computing, vol. 18, no. 9, pp. 715-727, 2000.\n[8] L. Paletta and A. Pinz, Active object recognition by view integration and reinforcement learning, Robotics and Autonomous Systems, vol. 31, no. 1, pp. 71-86, 2000.\n[9] F. G. Callari and F. P. Ferrie, Active object recognition: Looking for differences, International J. Computer Vision, vol. 43, no. 3, pp. 189-204, 2001.\n[10] B. Browatzki, V. Tikhanoff, G. Metta, H. H. Bulthoff and C. Wallraven, Active object recognition on a humanoid robot, In Robotics and Automation (ICRA), 2012 IEEE International Conference on, pp. 2021-2028, IEEE, 2012.\n[11] B. Browatzki, V. Tikhanoff, G. Metta, H. H. Bulthoff, C. Wallraven, Active In-Hand Object Recognition on a Humanoid Robot, Robotics, IEEE Transactions on , vol. 30, no. 99, pp. 1-9, 2014.\n[12] N. Atanasov, B. Sankaran, J. L. Ny, G. J. Pappas and K. Daniilidis, Nonmyopic View Planning for Active Object Classification and Pose Estimation, Robotics, IEEE Transactions on , vol. 30, no. 99, pp. 1078-1090, 2014.\n[13] M. Malmir, D. Forster, K. Youngstrom, L. Morrison and J. R. Movellan, Home Alone: Social Robots for Digital Ethnography of Toddler Behavior, Computer Vision Workshops (ICCVW), 2013 IEEE International Conference on, pp. 762-768, 2013.\n[14] J. R. Movellan, M. Malmir and D. Forester, HRI as a tool to monitor socioemotional development in early childhood education, In proc. HRI 2nd Workshop on Applications for Emotional Robots, Bielefeld, Germany, 2014.\n[15] M. Malmir, K. Sikka, D. Forster, J. Movellan and G. W. Cottrell. Deep Qlearning for Active Recognition of GERMS: Baseline performance on a standardized dataset for active learning. In Xianghua Xie, Mark W. Jones, and Gary K. L. Tam, editors, Proceedings of the British Machine Vision Conference (BMVC), pages 161.1-161.11. BMVA Press, September 2015.\n[16] Watkins, C. J. C. H. (1989). Learning from Delayed Rewards. Ph.D. thesis, Cambridge University.\n[17] Krizhevsky, Alex, Ilya Sutskever, and Geoffrey E. Hinton. \u201dImagenet classification with deep convolutional neural networks.\u201d In Advances in neural information processing systems, pp. 1097-1105. 2012.\n[18] Rebguns, Antons, Daniel Ford, and Ian R. Fasel. \u201dInfomax control for acoustic exploration of objects by a mobile robot.\u201d In Workshops at the TwentyFifth AAAI Conference on Artificial Intelligence. 2011.\n[19] Denzler, Joachim, Christopher M. Brown, and Heinrich Niemann. \u201dOptimal camera parameter selection for state estimation with applications in object recognition.\u201d In Pattern Recognition, pp. 305-312. Springer Berlin Heidelberg, 2001.\n[20] Chen-Yu Lee, Saining Xie, Patrick Gallagher, Zhengyou Zhang, Zhuowen Tu, Deeply-Supervised Nets, In Proceedings of AISTATS 2015."}], "references": [{"title": "Active vision", "author": ["J. Aloimonos", "J.I. Weiss", "A. Bandyopadhyay"], "venue": "International J. Computer Vision, vol. 1, no. 4, pp. 333-356", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1988}, {"title": "Active perception", "author": ["R. Bajcsy"], "venue": "Proceedings of the IEEE, vol. 76, no. 8, pp. 966-1005", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1988}, {"title": "Active object recognition", "author": ["D. Wilkes", "J.K. Tsotsos"], "venue": "Proceedings CVPR\u201992., 1992 IEEE Computer Society Conference on, pp. 136-141. IEEE", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1992}, {"title": "Adaptive 3-D object recognition from multiple views", "author": ["M. Seibert", "A.M. Waxman"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 14, no. 2, pp. 107-124", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1992}, {"title": "Transinformation for active object recognition", "author": ["B. Schiele", "J.L. Crowley"], "venue": "Computer Vision, Sixth International Conference on, pp. 249-254. IEEE", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1998}, {"title": "Columbia object image library (COIL-100)", "author": ["S.A. Nene", "S.K. Nayar", "H. Murase"], "venue": "Technical Report CUCS-006-96, Columbia University", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1996}, {"title": "Appearance-based active object recognition", "author": ["H. Borotschnig", "L. Paletta", "M. Prantl", "A. Pinz"], "venue": "Image and Vision Computing, vol. 18, no. 9, pp. 715-727", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2000}, {"title": "Active object recognition by view integration and reinforcement learning", "author": ["L. Paletta", "A. Pinz"], "venue": "Robotics and Autonomous Systems, vol. 31, no. 1, pp. 71-86", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2000}, {"title": "Active object recognition: Looking for differences", "author": ["F.G. Callari", "F.P. Ferrie"], "venue": "International J. Computer Vision, vol. 43, no. 3, pp. 189-204", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2001}, {"title": "Active object recognition on a humanoid robot", "author": ["B. Browatzki", "V. Tikhanoff", "G. Metta", "H.H. Bulthoff", "C. Wallraven"], "venue": "Robotics and Automation (ICRA), 2012 IEEE International Conference on, pp. 2021-2028, IEEE", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Active In-Hand Object Recognition on a Humanoid Robot", "author": ["B. Browatzki", "V. Tikhanoff", "G. Metta", "H.H. Bulthoff", "C. Wallraven"], "venue": "Robotics, IEEE Transactions on , vol. 30, no. 99, pp. 1-9", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Nonmyopic View Planning for Active Object Classification and Pose Estimation", "author": ["N. Atanasov", "B. Sankaran", "J.L. Ny", "G.J. Pappas", "K. Daniilidis"], "venue": "Robotics, IEEE Transactions on , vol. 30, no. 99, pp. 1078-1090", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2014}, {"title": "Home Alone: Social Robots for Digital Ethnography of Toddler Behavior", "author": ["M. Malmir", "D. Forster", "K. Youngstrom", "L. Morrison", "J.R. Movellan"], "venue": "Computer Vision Workshops (ICCVW), 2013 IEEE International Conference on, pp. 762-768", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "HRI as a tool to monitor socioemotional development in early childhood education", "author": ["J.R. Movellan", "M. Malmir", "D. Forester"], "venue": "proc. HRI 2nd Workshop on Applications for Emotional Robots, Bielefeld, Germany", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep Qlearning for Active Recognition of GERMS: Baseline performance on a standardized dataset for active learning", "author": ["M. Malmir", "K. Sikka", "D. Forster", "J. Movellan", "G.W. Cottrell"], "venue": "Proceedings of the British Machine Vision Conference (BMVC),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "Learning from Delayed Rewards", "author": ["Watkins", "C.J.C. H"], "venue": "Ph.D. thesis,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1989}, {"title": "Imagenet classification with deep convolutional neural networks.", "author": ["Krizhevsky", "Alex", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2012}, {"title": "Infomax control for acoustic exploration of objects by a mobile robot.", "author": ["Rebguns", "Antons", "Daniel Ford", "Ian R. Fasel"], "venue": "In Workshops at the Twenty- Fifth AAAI Conference on Artificial Intelligence", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2011}, {"title": "Optimal camera parameter selection for state estimation with applications in object recognition.", "author": ["Denzler", "Joachim", "Christopher M. Brown", "Heinrich Niemann"], "venue": "In Pattern Recognition,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}], "referenceMentions": [{"referenceID": 0, "context": "There are a variety of approaches to active object recognition, the goal of which is to re-position sensors or change the environment so that the new inputs to the system become less ambiguous for label prediction [1, 2, 19].", "startOffset": 214, "endOffset": 224}, {"referenceID": 1, "context": "There are a variety of approaches to active object recognition, the goal of which is to re-position sensors or change the environment so that the new inputs to the system become less ambiguous for label prediction [1, 2, 19].", "startOffset": 214, "endOffset": 224}, {"referenceID": 18, "context": "There are a variety of approaches to active object recognition, the goal of which is to re-position sensors or change the environment so that the new inputs to the system become less ambiguous for label prediction [1, 2, 19].", "startOffset": 214, "endOffset": 224}, {"referenceID": 14, "context": "An issue with previous approaches to active object recognition is that they mostly used small simplistic datasets, which were not reflective of challenges in real-world applications [15].", "startOffset": 182, "endOffset": 186}, {"referenceID": 14, "context": "This paper extends our previous work, Deep Q-learning [15], where an action selection network was trained on top of a pre-trained convolutional neural network.", "startOffset": 54, "endOffset": 58}, {"referenceID": 18, "context": "Given this belief state, the control module produces actions that will affect the images observed in the future [19].", "startOffset": 112, "endOffset": 116}, {"referenceID": 2, "context": "One of the earliest active systems for object recognition was developed by Wilkes and Tsotsos [3].", "startOffset": 94, "endOffset": 97}, {"referenceID": 3, "context": "Seibert and Waxman explicitly model the views of an object by clustering the images acquired from the view-sphere of the object into aspects [4].", "startOffset": 141, "endOffset": 144}, {"referenceID": 4, "context": "Schiele and Crowley developed a framework for active object recognition by making an analogy between object recognition and information transmission [5].", "startOffset": 149, "endOffset": 152}, {"referenceID": 5, "context": "They used the COIL-100 dataset for their experiments, which consists of 7200 images of 100 toy objects rotated in depth [6].", "startOffset": 120, "endOffset": 123}, {"referenceID": 6, "context": "formulate the observation planning in terms of maximization of the expected entropy loss over actions [7].", "startOffset": 102, "endOffset": 105}, {"referenceID": 8, "context": "Callari and Ferrie take into account the object modeling error and search for actions that simultaneously minimize both modeling variance and uncertainty of belief over objects [9].", "startOffset": 177, "endOffset": 180}, {"referenceID": 9, "context": "use a particle filter approach to determine the viewing pose of an object held in-hand by an iCub humanoid robot [10, 11].", "startOffset": 113, "endOffset": 121}, {"referenceID": 10, "context": "use a particle filter approach to determine the viewing pose of an object held in-hand by an iCub humanoid robot [10, 11].", "startOffset": 113, "endOffset": 121}, {"referenceID": 11, "context": "focus on the comparison of myopic greedy action selection that looks ahead only one step and non-myopic action selection which considers several time steps into the future [12].", "startOffset": 172, "endOffset": 176}, {"referenceID": 17, "context": "used acoustic properties of objects to learn an infomax controller to recognize a set of 10 objects [18].", "startOffset": 100, "endOffset": 104}, {"referenceID": 7, "context": "Paletta & Pinz [8] treat active object recognition as an instance of a reinforcement learning problem, using Q-learning to find the optimal policy.", "startOffset": 15, "endOffset": 18}, {"referenceID": 5, "context": "There are medium sized datasets such as COIL100, which consists of 7200 images of 100 toy objects rotated in depth [6].", "startOffset": 115, "endOffset": 118}, {"referenceID": 12, "context": "The GERMS dataset was collected in the context of the RUBI project, whose goal is to develop robots that interact with toddlers in early childhood education environments [13, 14, 15].", "startOffset": 170, "endOffset": 182}, {"referenceID": 13, "context": "The GERMS dataset was collected in the context of the RUBI project, whose goal is to develop robots that interact with toddlers in early childhood education environments [13, 14, 15].", "startOffset": 170, "endOffset": 182}, {"referenceID": 14, "context": "The GERMS dataset was collected in the context of the RUBI project, whose goal is to develop robots that interact with toddlers in early childhood education environments [13, 14, 15].", "startOffset": 170, "endOffset": 182}, {"referenceID": 16, "context": "The operations of each layer are inspired by the model proposed in [17].", "startOffset": 67, "endOffset": 71}, {"referenceID": 14, "context": "integers [15].", "startOffset": 9, "endOffset": 13}, {"referenceID": 15, "context": "In order to learn the optimal policy, we use the Q(\u03bb )algorithm to train the network to predict actions for improved classification [16].", "startOffset": 132, "endOffset": 136}, {"referenceID": 17, "context": "We use a generative model similar to [18] to calculate the state of the system given a set of images.", "startOffset": 37, "endOffset": 41}], "year": 2015, "abstractText": "An active object recognition system has the advantage of being able to act in the environment to capture images that are more suited for training and that lead to better performance at test time. In this paper, we propose a deep convolutional neural network for active object recognition that simultaneously predicts the object label, and selects the next action to perform on the object with the aim of improving recognition performance. We treat active object recognition as a reinforcement learning problem and derive the cost function to train the network for joint prediction of the object label and the action. A generative model of object similarities based on the Dirichlet distribution is proposed and embedded in the network for encoding the state of the system. The training is carried out by simultaneously minimizing the label and action prediction errors using gradient descent. We empirically show that the proposed network is able to predict both the object label and the actions on GERMS, a dataset for active object recognition. We compare the test label prediction accuracy of the proposed model with Dirichlet and Naive Bayes state encoding. The results of experiments suggest that \u2217Corresponding Author Email addresses: mmalmir@eng.ucsd.edu (Mohsen Malmir), ksikka@eng.ucsd.edu (Karan Sikka), forster@ucsd.edu (Deborah Forster), ian@emotient.com (Ian Fasel), javier@emotient.com (Javier R. Movellan), gary@eng.ucsd.edu (Garrison W. Cottrell) Preprint submitted to Computer Vision and Image Understanding December 18, 2015 ar X iv :1 51 2. 05 48 4v 1 [ cs .A I] 1 7 D ec 2 01 5 the proposed model equipped with Dirichlet state encoding is superior in performance, and selects images that lead to better training and higher accuracy of label prediction at test time.", "creator": "LaTeX with hyperref package"}}}