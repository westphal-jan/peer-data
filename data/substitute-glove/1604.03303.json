{"id": "1604.03303", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Apr-2016", "title": "Optimal Route Planning with Prioritized Task Scheduling for AUV Missions", "abstract": "This plastic introduces a compromise with Autonomous Underwater Vehicles (AUVs) large scale route planning rest task assignment mission problem. Given gave back of organisational (e. mg. , time) and way go of task commitment symbol, saw coming refers it finding the optimal eastward of spaceship peacekeeping adding maximizes held accounts according making priorities the aggravation this total risk tenths brought attend only there balancing. Making example of the checksum historical common genetic and swarms intelligence databases part solving NP - it graph handling, Particle Swarm Optimization (PSO) that Genetic Algorithm (GA) that being to let the porosity solution, where there these in the eastern entire a vote solution (i-95 ). To assessments with robustness of seen specifically empirical, first performance where beginning all PS and GA algorithmic are analysed between compared time a number means Monte Carlo through. Simulation confirm nonetheless been rest long-haul amount including both measurement should necessarily two vital harder, where applicable for underwater reverse involved. However, end GA - based intersects specializing raw division results showed while the challenge stated around a PSO company line counter-terrorism.", "histories": [["v1", "Tue, 12 Apr 2016 08:45:51 GMT  (1246kb)", "http://arxiv.org/abs/1604.03303v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["s mahmoud zadeh", "d powers", "k sammut", "a lammas", "a m yazdani"], "accepted": false, "id": "1604.03303"}, "pdf": {"name": "1604.03303.pdf", "metadata": {"source": "CRF", "title": "Optimal Route Planning with Prioritized Task Scheduling for AUV Missions", "authors": [], "emails": [], "sections": [{"heading": null, "text": "Underwater Vehicles (AUVs) large scale route planning and task assignment joint problem. Given a set of constraints (e.g., time) and a set of task priority values, the goal is to find the optimal route for underwater mission that maximizes the sum of the priorities and minimizes the total risk percentage while meeting the given constraints. Making use of the heuristic nature of genetic and swarm intelligence algorithms in solving NP-hard graph problems, Particle Swarm Optimization (PSO) and Genetic Algorithm (GA) are employed to find the optimum solution, where each individual in the population is a candidate solution (route). To evaluate the robustness of the proposed methods, the performance of the all PS and GA algorithms are examined and compared for a number of Monte Carlo runs. Simulation results suggest that the routes generated by both algorithms are feasible and reliable enough, and applicable for underwater motion planning. However, the GA-based route planner produces superior results comparing to the results obtained from the PSO based route planner.\nKeywords\u2014autonomous underwater vehicle; route planning;\nparticle swarm optimization; genetic algorithm\nI. INTRODUCTION\nAutonomous Underwater Vehicles (AUVs) have been widely developed in the last few decades. AUVs have the potential of exploration in unknown undersea environments and today are the first choice to navigate autonomously and undertake various missions. AUVs\u2019 failure in underwater missions is not acceptable because maintenance is usually difficult and very expensive. Thus AUV should possess intelligent decision-making to carry out a given mission in a hazardous undersea environment before it runs out of time and battery, so mission timing is extremely critical to mission success.\nAUVs are deployed to complete tasks such as water pollution/mineral monitoring, geological sampling, mosaicking the seafloor, underwater navigation, trajectory tracking and so on [1]. This makes time and task management challenging, considering mission type and time, number of task to complete, problem restrictions, time limitations versus changing environmental conditions and energy endurance. AUVs should carry out complex tasks in a pre-specified time interval. Hence, they have to effectively manage the available time for a series of deployment involving long missions. This management depends tightly on the optimality of the selected route between\nstart and destination point. Thus, route planning for AUVs in a large scale environment is a significant issue in mission success.\nIn this paper, vehicles route planning means finding an optimal route for waypoint guidance of an AUV considering the problem specifications, where the edge (distance) between each pair of waypoints represents a specific task (with relevant parameters). So the efficiency of the generated route should be evaluated relative to satisfaction of the specified criteria for the problem [2]. The route planner operates reactively (online) during the mission, therefore time optimality is critical in this approach [3, 4]. The optimum route may have several alternatives and generally contains a sequence of waypoints.\nVehicle route planning is categorized as an NP-hard problems due to the combinatorial nature of this problem and topology complexity of operational network. Obtaining the optimal solutions for NP-hard problems is computationally challenging issue and difficult to solve in practice. Generally, proposed solutions for mission route planning approach can be categorized into three main groups: grid-based methods, graph based strategies, and artificial intelligence based techniques [5]. The grid-based strategies are inefficient in cases where the workspace is very large or complex because the large numbers of cells render such solutions intractable. On the other hand, topology-based (graph-based) methods, which are very popular, usually look for the shortest route between two points in a network (graph). The major drawback of these methods is that they are time consuming owing to redundant computations and makes them expensive in terms of time complexity [6]. Some of the popular graph search algorithms like A* [7, 8, 9, 10] or Dijkstra [11, 12] operate based on cell decomposition and determine the cell-based route from the start to the destination point. Another category of methods used for mission route planning is the artificial and computational intelligence (AI and CI) approaches. While various deterministic techniques have been developed over three last decades, evolution-based, heuristic and meta-heuristic methods still remain appropriate possibilities for real time applications with larger dimensionality. Genetic and evolutionary methods have been explored for route generation for unmanned aerial vehicles to minimize fuel consumption for the mission [13]. A niche genetic algorithm (INGA) improved real-time route planning of unmanned aerial vehicles [14]. Subsequently an offline pre-generative route planning strategy based on the non-\ndominated sorting genetic algorithm (NSGA-II) was proposed [15], but offline route generation strategies get in to serious difficulties when replanning is need due to problem arising during the mission. Another model based on various types of fuzzy arc lengths designed by [16] to compute the shortest route in a graph. Due to the high complexity of this method for larger problems, the GAused to find the shortest path relative membership function in the graph. Later on, a GA [17] and a hybrid Dijkstra GA based approach [18, 19] used to address the shortest path problems as combinatorial optimization problems. The results affirmed that Dijkstra consumes more time in finding optimum route comparing GA. Generally, evolutionary algorithms like GA [20, 21], PSO [22, 28] have low sensitivity to graph complexity, so search time increases linearly with the number of points.\nMost of the reported route-finding strategies are singleobjective, whilst in fact optimal route finding is mostly a multi-objective problem due to the existence of several cost factors such as route length, travel time, task priority and task specific metrics that to be simultaneously minimized or maximized. Unlike previous research on vehicle routing problems, which mostly look for the shortest possible path in a graph, this research aims to complete the maximum number of tasks for which time and distance are a function of the individual task. This problem require making maximum use of the available time but not exceeding it, rather than looking for a shortest path or accepting any feasible path. As AUV operates in an uncertain environment, there is a huge amount of uncertainty in the travel times that can have a devastating effect on mission plans. Proper time management of the vehicles routing operations is necessary ensure on-time mission completion and consequently the mission success.\nThe present research is about single vehicles operation, and explicitly assumes that it is not possible to cover all tasks in a single mission. Therefore, available tasks are prioritized in a way that selected edges (tasks) of the graph can take the AUV to the destination, which is a joint discrete and syndetic spaced problem at the same time. In this context, the proposed route planning problem can be modeled as a multi-objective optimization problem. It is thus necessary to address determination of a time optimum route between start and destination points in a large scale environment (i.e., 10 km2 \u00d7100m (depth)), and carrying out maximum number of highest priority tasks (with small risk percentage). Generally, the task assignment (allocation) involves the decision making procedures under specified constraints and categorized as the complex combinatorial optimization problem [23]. For this purpose, the available mission time should be used as productively as possible, but the total travel time of the route should not exceed the overall mission available time.\nMany deterministic algorithms and graph search methods have been introduced for solving the route planning or task assignment problems. The deterministic methods produce better quality solutions, however these algorithms are computationally complex. Therefore they are not appropriate approaches for real-time routing applications, specifically\nwhen the operating graph is topologically complex [24, 25]. In contrast, the meta-heuristic methods take less computation time and obtains optimal or near optimal solutions quickly. To cover objectives of this research two evolution-based approaches have been used to find the optimum route in the operating area with respect to problem objectives and constraints. The GA is one of the fastest optimization algorithms and it is well suited to graph searching problems due to its discrete nature. GA based approaches propose appropriate solution for complex graph routing problems in real-time applications.\nThis research takes the advantage of GA and PSO algorithms to solve vehicle planning problems according to defined objectives and specific restrictions. The main problem with the PSO implementation is proper coding of the particles as each particle in going to propose a valid route candidate. Due to the discrete nature of the search space, a particular problem arises using PSO, as it operates in a continuous space originally. However, the argument for using PSO is a strong one as it does appear to scale well with problem complexity, and can naturally encode the multi-objective nature of this problem. To solve the raised problem with PSO, in the considered case, this research contributes a priority based route generation approach on the underlying search space. The generated feasible routes have been encoded into particles based on priority and Adjacency matrixes (the detail discussed in section 4). These modifications increase the speed of the algorithm in finding optimum solution and prevent stucking in a local optima.\nThe organization of the paper is as follows. In section II, formulation is demonstrated. PSO and GA paradigm is briefly discussed in section III and IV. Section V describes the particle encoding mechanism and the overall process of PSO on carrying out the discussed problem. The discussion on simulation results are provided in Section VI. And, the section VII concludes the paper.\nII. PROBLEM FORMULATION\nThe problem to be solved is ideally to find the optimum route covering the maximum number of highest priority tasks with smallest risk percentage in a time interval that battery\u2019s capacity allows. Optimality of the mission routes is subject to several constraints and objectives, and generally is a tradeoff or pareto problem. The planned route should be applicable and logically feasible, according to feasibility criteria\u2019s given in section V. In the initial study, it is assumed that the vehicle is moving with constant velocity in a 3D environment comprising several fixed waypoints. An underwater mission is commenced at a specified starting point and it is terminated when the AUV reaches to a predefined destination point. The vehicle should carry out the maximum number of tasks in available time and ensure it reaches to the destination before running out of time. Tasks assigned to edges of the graph in advance. Each task involves three parameters of priority, risk percentage and required completion time. When a route generated, the optimality of the produced route should be\nevaluated based on traveling time, number of tasks completed, and total quality of the solutions based on priority and risk percentage of each edge. The optimum selected route should contain the highest priority tasks with minimum risk percentage among all.\nAUV starts its mission from point (WP1) with initial position of (x1,y1,z1) and should pass sufficient number of waypoints to reach on the destination (WPn) at (xn,yn,zn). Waypoints in the terrain are connected with an edge like qi from a set of q={q1,\u2026,qm}, where m is the number of edges in the graph. Each edge of the network like qi is assigned with a specific task from a set of Task={Task1,\u2026,Taskk}. Each task has a value like \u03c1i from a limited set of \u03c1={\u03c11,\u2026,\u03c1k} that represents its priority comparing other tasks, and completion time of \u03b4T regardless of required time for passing the relevant edge. Each task also has a risk percentage of \u03beT regardless of terrain hazards and risks. All these information can be represented in a graph form for better understanding of the problem as depicted in Fig.1. The route can be represented as Ri=(x1,y1,z1,\u2026,xi,yi,zi,\u2026,xn,yn,zn), where (xi,yi,zi)is the coordinate of any arbitrary waypoint in geographical frame.\nAs previously discussed, the problem involves multiple objectives that should be satisfied during the optimization process. One approach in solving multi-objective problems is using multi-objective optimization algorithms. Another alternative is to transform a multi-objective optimization problem into a constrained single-objective problem. In this regard, the objective function is defined in a form of hybrid cost function comprising weighted functions that are required to be maximized or minimized. More detail about the cost function employed is expressed in section IV. In the preceding discussion, it is essential to describe the mathematical representation of the route planning problem for AUV in 3D environment. Therefore, it describes as follows:\nWPi WPj qij\n \n \n\n  \nij\nij\nij\nij\nT\nT\nT\nq\nij\nij\nij Task\nt\nd q\n\u03be\n\u03b4\n\u03c1\n:: (1)\n222 )()()(\nijijijij zzyyxxd \nijT\nAUV\nij\nij V\nd t \u03b4 (2)\n}1,0{,\u03b4 00  \n\n\n  \n  \n   \nl V\nd lqtlqT n\nij i\nijT\nAUV\nij\nij\nn\nij i\nijijRoute (3)\navailableRoutetravel\nTTT  (4)\nThen:\ni. The total weight of route should be maximized:\n    \n n\nij i\nijij\nn\nij i ij\nij\nijR wlqlqW\n00 \u03be\n\u03c1 (5)\n}1,0{,max 0   \n\n\n  \n\n  \nlwlq n\nij i\nijij\nii. The route travel time should approach total available time:\n    \n\n\n   \n\n         \n \navailable\nn\nij i\nijT\nAUV\nij\nijavailableRoute T\nV\nd lqTT\n0\n\u03b4minmin (6)\ns.t:\ntotal route travel time shouldn\u2019t exceed available mission time\n  availableRoute TT max (7)\nwhere TRoute is the required time to pass the route, Tavailable is the total mission time, l is the selection variable, tij is the required time to pass the distance dij between two waypoint of WPi and WPj along with completion time of the task \u03b4Tij assigned to qij. \u03c1Tij and \u03beTij represent the priority and risk percentage of the task assigned to qij. Ttravel is the traveled time by AUV at each stage of mission.\nIII. OVERVIEW OF GENETIC ALGORITHM\nGenetic Algorithm (GA) is a particular type of stochastic search algorithm represents problem solving technique based on biological evolution. GA has been extensively studied and widely used on many fields of engineering. GA provides alternative for traditional method that can be applied for nonlinear programming. GA search in a population space that each individual of this population is known as chromosome. Its process starts with randomly selecting a number of feasible solutions (chromosome) from initial population. A fitness function should be defined to evaluate each chromosome and quality of solution during the evolution process. Then, the set of best solution is selected from initial population using adaptive heuristic search nature of the GA. New population is generated from initial population using the GA operators like,\nselection, crossover and mutation. Chromosomes with the best fitness value are transferred to next generation and the rest will be eliminated. This progress continues until the chromosomes get the best fit solution to the given problem [26]. The average fitness of the population improves at each iteration, therefore after many iterations better solutions are revealed.\nThis route planning module deals with finding the optimal route through the operating graph using genetic algorithm. The input to this module is a group of feasible generated routes involving a sequence of nodes and all are common in starting and ending points and encoded as chromosomes. After primary population initialized, the algorithm starts its operating according to following pseudo code.\nIV. OVERVIEW OF PARTICLE SWARM OPTIMIZATION\nParticle swarm optimization is one of the fastest optimization methods for solving many complex problems widely used in several studies in past decades. The process in PSO is initialized with a population of particles. Each particle involves a position and velocity in the search space. The position and velocity of each particle gets updated in each iteration. Then, the performance of particles evaluated according to the fitness/cost functions. Each particle has memory for previous state values, its best position in its experience as Pbest, and the global best position as Gbest. In each iteration, the current state value of the particle is compared with Pbest and Gbest. More detail about the algorithm can be found in related references [27]. Particle position and velocity get updated as follows (8) and (9):\n   )(\u03bb)()(\u03bb)()(\u03c9\u03b1)1(\u03b1 2211 ttGrcttPrctt ibestiibestii  (8)\n)1()(\u03bb)1(\u03bb  tvtt iii\n(9)\nwhere c1 and c2 are acceleration coefficients, \u03bbi and \u03b1i are particle position and velocity at iteration t . Pbest-i is the\npersonal best position and Gbest is the global best position. r1 and r2 are two independent random numbers in ]1,0[ . \u03c9\nexposes the inertia weight and balances the PSO algorithm between the local and global search. Due to discrete nature of current problems search space, a particular problem arises using PSO, as it operates in a continuous space originally. However, the argument for using PSO is a strong one as it does appear to scale well with problem complexity, and can naturally handle the multi-objective nature of this problem. To solve the raised problem with PSO, in the considered case, this research contributes a priority-adjunct based route generation approach on the underlying search space. The process of algorithm is presented in following flowchart:\nV. IMPLEMENTATION"}, {"heading": "A. Route Generation (Initialization Phase for both GA and PSO)", "text": "Suitable coding scheme for particle or chromosomes representation is the most critical step in formulating the problem in GA and PSO framework and it has direct impact on overall performance of the algorithm. The resultant solution from both GA and PSO should be feasible and valid according to following criteria\u2019s:\nTherefore, a priority based strategy has been used in this research in order to generate feasible routes. For this purpose some guiding information of priority is added to each node at\nthe initial phase. The priority vector initialized randomly. The sequence of nodes are selected based on their corresponding value in priority vector and adjacency matrix (adjacency matrix represents relations and edges in a graph). Then, to prevent generating infeasible routes some modifications have been applied as follows:\n Each node take positive or negative priority values in the specified range of [-100,100]. The selected node in\na route sequence gets a large negative priority value that prevents repeated visits to a node. So that, the selected node will not be a candidate for future selection. This issue reduces the memory usage and time complexity for graphs with large number of nodes.\n Adjacency relations are used for adding nodes to a specific route, so nodes are added to the route sequence\none by one according to priority vector and adjacency matrix.\n To satisfy the termination criteria of feasible route generation, if the route ends with a non-destination\nnode and/or the length of the route exceeds the number of existed nodes in the graph, the last node of the sequence will be replaced by index of the destination node. This process keeps the generated route in feasible (valid) space.\nFig.5 presents an example of the route generating process according to a sample adjacency matrix of a graph and a random priority array.\nAd Example of adjacency matrix for a graph with 18 nodes n Node index where n=1 is the start and n=18 is the destination point RkUi Partial route corresponding to the priority vector of a route including\nk, kn nodes.\nUi Priority array (random no repeated vector in range of [-100,100])\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12 13\n14\n15\n16\n17\n18\n                           \n\n                           \n\n010101010000000000\n100010010100000000\n000011000000000000\n100001101000000000\n011000010110000000\n101100110010000000\n000101000001100000\n110011000010000000\n000100000010101000\n010010000000010010\n000011011000001100\n000000100000010100\n000000101000001100\n000000000101000111\n000000001010100001\n000000000011110001\n000000000100010001\n000000000000011110\n}97 81, 43,- 11, 15,- 58, 93,- 25,- 69,- 66, 61, 42, 47, 18, 78,- 76, 38,- 44,{: 1 U\nFig.5. A feasible route generation based on topological database (priority vector and adjacency matrix)\nTo find a route from start to destination node in a graph with 18 nodes based on a topological database, the first node will be selected and added to the sequence as the start position. Then from adjacency matrix the connected nodes to node-1 will be selected. In graph shown in Fig.4, this sequence is {2,3,4,5}. Then in this sequence the node with the highest priority (according to corresponding priority vector) will be selected and added to the route sequence as the next visited node. This procedure will be continued until a legitimate route is built (destination visited)."}, {"heading": "B. Particle Swarm Optimization on Current Approach", "text": "Similar to GA, the PSO also get initialized based on route generation scheme proposed in section (A). Therefore, each particle assigned to a feasible route in the search space. Afterward the selected route should be evaluated according to defined cost function in t section D. The optimization process of the PSO-based algorithm for route planning is summarized as following pseudo-codes:"}, {"heading": "C. Genetic Algorithm on Current Approach", "text": "1) Chromosome Encoding\nThe chromosome in the proposed GA defined based on routes as sequence of nodes. The first and last gene of the chromosomes always corresponds to the start and destination node with respect to the topological information of the graph. The chromosomes take variable length, but limited to maximum number of nodes included in the graph, since it never required for a route to include nodes more than whole number of nodes in the graph.\n2) Selection\nSelecting the parents for crossover and mutation operations is another step of the GA algorithm that plays an important role in improving the average quality of the population in the next generation. Several selection methods exist for this purpose such as roulette wheel selection, ranks election, elitist selection, scaling selection, tournament selection, etc. The roulette wheel selection has been conducted by current research, wherein the next generation is selected based on corresponding fitness or cost value, then the wheel divided into a number of slices and the chromosomes with the best cost take larger slice of the wheel.\n3) Crossover Operation\nCrossover is a GA operator that shuffles sub parts of two parent chromosomes and generate offspring that includes some part of both the parent chromosomes. Many types of crossover techniques have been suggested since now. Generally, they can be categorized in two main types of single point and multipoint crossover methods. In a single point crossover, only one crossing site existed, while in multipoint crossover, multiple sites of a pair of parent chromosomes are selected randomly to be shuffled. The single point crossover method is simple, but it has some drawbacks like formation of loop (cycles) when applied for routing problem. Therefore, to prevent such an issue it is required to use more advanced types of multipoint crossover methods like Order crossover (OX), Cycle crossover (CX), Partially Matched (PMX), Uniform crossover (UX) and so on [28]. Discussion over which crossover method is more appropriate to use still is an open area for research. Current research took advantages of uniform crossover, which uses a fixed mixing ratio among pair of parents and individual gens in the chromosomes are compared between two parents. The gens are swapped with a fixed probability that usually considers as 0.5. This method is extremely useful in problems with a very large search space in those where recombination order is important. After offspring generated, the new generation should be validated. Validation is carried out by checking the feasibility criteria defined for the routing problem then its fitness (or cost) is calculated. If the offspring does not correspond to a feasible route set, then it is eliminated from the next generation population.\n3) Mutation Operation\nMutation is another operator that used in GA for generating the new population. This operator provides bit flipping, insertion, inversion, reciprocal exchange or others methods for generating new chromosomes from the parents [30]. Current research applies a combination of three inversion, insertion, and swapping types of mutation methods to generate the new population for GA. All these three methods preserve most adjacency information. In order to keep the new generation in feasible space, the mutation is applied on gens between but not included the first and last gens of the parent chromosomes that corresponds to start and destination point. After mutation operation is completed, the new offspring generated in this process have to be validated with the same procedure applied in crossover. Both of the mutation and crossover operations provide a search capability and enhance the rate of convergence.\n4) Termination Criteria\nThe termination of the GA process can be defined according to completion of the maximum number of generations (Iterations), appearance of no change in population fitness after several iterations, and approaching to a stall generation. The most important step in finding an optimum route using GA is forming an appropriate and efficient cost function, so that the algorithm tends to compute\nthe value of cost function for each route and provide a best fitted route with the maximum fitness and minimum cost value, since both are inversely proportional to each other. The cost evaluation is proposed in section D."}, {"heading": "D. Route Optimality Evaluation", "text": "The cost function in this research is defined as a particular combination of the route traveling time, mission available time, task completion time, tasks priority and task risk percentage of each route. The cost function gets penalty Vio where the Ttravel for a particular route exceeds the available time for mission (Tavailable). The model is seeking an optimal solution in the sense of the best route according to given information. Thus, the total cost for the candidate route defined as (10):\nRouteTasktotal CostCostCost 21   (10)\nin which CostTask is the cost of task completion given in (14), CostRoute is the cost of generated route (12), \u03c61 and \u03c62 are two positive numbers that determine amount of participation of CostTask and CostRoute on calculation of total cost.\n   ViolTTCost availableRouteRoute \u03b31 (11)\n ViolT V\nd lqCost\navailable\nn\nij i\nijT\nAUV\nij\nijRoute \u03b31\u03b4\n0\n    \n\n   \n\n  \n\n  \n  \n \n(12)\n  \n\n  \n\n  \n\n  \n  0,1max\ntravel\navailable T\nT Viol (13)\nwhere \u03b4Tij is the task completion time, l is the selection parameter and takes value of 0 for unselected and 1 for selected edge. Ttravel is the time taken by the generated route and Tavailable is the total mission available. \u03b3 represents impact of Violation on total cost function.\n  \n\n  \n   \nRoute\nRoute\nTask Cost\n\u03c1\u03b2\n\u03be\u03b7 (14)\nwhere \u03beRoute and \u03c1Route are the total risk percentage and priority of the tasks completed in generated route, \u03b7 and \u03b2 are coefficient that display the great importance of \u03beRoute and \u03c1Route in CostTask. Giving the appropriate value for engaged coefficients of factors in the cost function has a significant effect on the optimality of the generated route.\nVI. SIMULATION RESULTS\nThe main purpose of the simulation experiments in this paper, is evaluating the performance of proposed PSO and GA based optimizers in generating real-time solution for vehicle routing and task assignment problem. A number of performance metrics have been investigated to evaluate the\noptimality of the proposed solutions. One of these metrics is the reliability percentage of the route including the chance of the mission success, which is combination of route violation value (whether it takes more time than entire available time) and validity of the generated route (bases on feasibility criteria\u2019s, Fig.4). Other metrics involve the number of completed tasks, total weight, total cost, and the time constraint satisfaction of the generated route with respect to the complexity of the graph presented in Table 1 and 2. The mission available time is set on 7 hours.\nThe PSO and GA configured with the same initial conditions and their performance are tested on graphs with same complexities including two cases with 50 nodes and 100 nodes. PSO and GA both proposed desirable optimal route with a quick computation time regardless of graph complexity. From simulation results in Table 1,2 and Fig.7 it is noted that in all cases route travelling time is smaller than total available time (except PSO for 100 nodes which a slight violation exists) that confirms feasibility of the produced route. The provided results also confirm that the utilized methods are able to undertake the highest number of task and maximize the use of the available time (as Ttravel approaches Tavailable). Indeed it is noteworthy that the performance of both algorithms is relatively independent of both size and complexity of the graph, as this is a challenging problem for other algorithms. Hence, the algorithm is suitable to produce optimal solutions quickly for real-time applications and dynamic re-planning encountering environment dynamicity. Referring to Fig.7 and\nTable 2 it is evident that both of presented methods can produce an optimum route considering performance metrics, however it is obvious that GA acts more efficiently in terms of computation time, minimizing cost value, total collected weights, and it covers more number of task. This cost\npresented in Fig.7, is produced by 250 iterations and same initial conditions for both PSO and GA on a graph with 100 nodes.\nTo evaluate the robustness and reliability of the employed algorithms, 100 execution runs are performed in a Monte Carlo simulation based on total travel time and total obtained weight that is presented by Fig.8.\nmission\u2019s metrics based on Monte Carlo simulation\nThe number of graph nodes is fixed on 20 waypoints for all Monte Carlo runs, but the topology of the graph was changed randomly based on a Gaussian distribution on the problem search space. The time threshold (Tavailable) also fixed on 3.06\u00d7104(sec). Fig.8 demonstrates the functionality of GA and PSO in dealing with problem\u2019s space deformation and quantitative measurement of two significant mission\u2019s metrics, travel weight and time, which are directly associated with the number of successful task completion. As indicated in the graph, GA has superior performance and shows more consistency in its distribution. However, both algorithms reveal robust behavior to the variations and meet the specified constraint.\nVII. COSSNCLUSION\nGlobal route planning along with task priority assignment are two important issues considered in mission time management and have great impact on mission success. The vehicle should generate an optimal route involving an appropriate number of waypoints, where the edge (distance) between each pair of waypoints represents a specific task including related parameters. This research investigated performance of a particle swarm optimization and genetic algorithm in providing time optimal routes while carrying out the mission goals under specific constraints. To fulfil the objectives of this research toward solving the stated problems, the solution was presented in several steps to enables the vehicle to autonomously find an optimal route through the operation network, carry out the maximum number of highest priority tasks, and reach to destination on time. Novel modification has been applied to route generating flow and route encoding distribution to prevent generating infeasible routes by reducing the possibility of loop-formation and speed up the entire process. Finally the system has simulated on different graphs of varying complexity.\nThe simulation results demonstrate that this new approach along with proposed algorithms could generate an optimal route in a very competitive CPU time. Indeed producing a real-time near optimal solution is more valuable than an optimal solution that takes too long. The performance of the solutions obtained by PSO method GA has been compared using the same configurations reinforcing that the proposed GA algorithm exhibits more desirable route optimality in a very competitive time. It is inferable from the result, the presented algorithms are not sensitive to the size of graph and they are able to produce optimum route in real-time applications. Future work will focus on development of a more efficient hybrid framework including global route planning and local path planning that dynamically takes into account the variable environment condition and different scenarios."}], "references": [{"title": "Visually Augmented Navigation for Autonomous Underwater Vehicles", "author": ["R.M. Eustice", "O. Pizarro", "H. Singh"], "venue": "IEEE Journal of Oceanic Engineering, Vol.33,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Optimal waypoint guidance synthesis", "author": ["C.K. Ryoo", "H.S. Shin", "M.J. Tahk"], "venue": "IEEE Conference on Control Applications, Toronto, Canada, August 28\u201331", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2005}, {"title": "Chaotic Differential Evolution Approach for 3D Trajectory Planning of sUnmanned Aerial Vehicle", "author": ["Z. Zhou", "H. Duan"], "venue": "10th IEEE International Conference on Control and Automation (ICCA), Hangzhou, China, June 12-14", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "Evolutionary route planner for unmanned air vehicles,", "author": ["C. Zheng", "L. Li", "F. Xu", "F. Sun", "M. Ding"], "venue": "IEEE Transactions on Robotics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2005}, {"title": "Mission design for a group of autonomous guided vehicles", "author": ["E.K. Xidias", "P.N. Azariadis"], "venue": "Robotics and Autonomous Systems, pp.34\u201343", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2011}, {"title": "Graph-based Learning for Statistical Machine Translation", "author": ["A. Alexandrescu", "K. Kirchhoff"], "venue": "Human Language Technologies, The Conference of the North American Chapter of the ACL, pp.119\u2013127", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2009}, {"title": "Intelligent route planning for fast autonomous vehicles operating in a large natural terrain", "author": ["S. Al-Hasan", "G. Vachtsevanos"], "venue": "Elsevier Science B.V., Robotics and Autonomous Systems 40, pp.1\u201324", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2002}, {"title": "Multicriteria Mission Route Planning Using a Parallel A* Search", "author": ["M.S. Gudaitis"], "venue": "M.Sc. Thesis, Air Force Institute of Technology, Air University", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1994}, {"title": "G", "author": ["A.A. Pereira", "J. Binney"], "venue": "rey A. Hollinger, G.S. Sukhatme, \u201cRiskaware Path Planning for Autonomous Underwater Vehicles using Predictive Ocean Models\u201d, Journal of Field Robotics , Vol.30, NO.5, pp.741\u2013762", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Optimal 4D path-planning in strongly tidal coastal environments", "author": ["M. Dunbabin"], "venue": "Application to AUVs and Profiling Drifters", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": " Y", "author": ["Y. Li", "R. He"], "venue": "Guo, \u201cFaster Genetic Algorithm for Network Paths\u201d, The Sixth International Symposium on Operations Research and Its Applications (ISORA\u201f06), pp.380\u2013389", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "The trans-Pacific crossing: long range adaptive path planning for UAVs through variable wind fields", "author": ["J.C. Rubio", "S. Kragelund"], "venue": "22 Digital Avionics Systems Conference, Indianapolis", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2003}, {"title": "Stealth Real-time Paths Planning for Heterogeneous UAV Formation Based on Parallel Niche Genetic Algorithm", "author": ["P. HE", "S.DAI"], "venue": "Journal of Computational Information Systems,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}, {"title": "Three-dimensional optimal path planning for waypoint guidance of an autonomous underwater vehicle", "author": ["M. Ataei", "A. Yousefi-Koma"], "venue": "Robotics and Autonomous Systems", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2014}, {"title": "A genetic algorithm for solving fuzzy shortest path problems with mixed fuzzy arc lengths", "author": ["R. Hassanzadeh", "I.Mahdavi", "N. Mahdavi-Amiri", "A.Tajdin"], "venue": "Mathematical and Computer Modelling,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Intelligent Optimization Approach for the k Shortest Paths Problem Based on Genetic Algorithm", "author": ["F. Wang", "Y. Man", "L. Man"], "venue": "10th International Conference on Natural Computation", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "An Improved Genetic Algorithm for Dynamic Shortest Path Problems", "author": ["X. Zhu", "W. Luo", "T. Zhu"], "venue": "IEEE Congress on Evolutionary Computation (CEC), Beijing, China", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "S", "author": ["Y. Sharma"], "venue": "C. Saini , M. Bhandhari, \u201cComparison of Dijkstra\u2019s Shortest Path Algorithm with Genetic Algorithm for Static and Dynamic Routing Network\u201d, International Journal of Electronics and Computer Science Engineering, ISSN-2277-1956/V1N2, pp.416-425", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "A genetic algorithm for k optimal paths problem,", "author": ["X. Ma"], "venue": "Computer Engineering and Applications,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2006}, {"title": "An oriented spanning tree based genetic algorithm for multi-criteria shortest path problems", "author": ["L.Z. Liu", "H.B. Mu", "X.F. Yang", "R.C. He", "Y.Z. Li"], "venue": "Applied Soft Computing, Vol. 12, no. 1, pp. 506-515", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2012}, {"title": "G", "author": ["Y.D. Zhang", "Y. Jun"], "venue": "Wei, L.N. Wu, \u201cFind multi-objective paths in stochastic networks via chaotic immune PSO,\u201d Expert Systems with Applications, Vol. 37, no. 3, pp. 1911-1919", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2010}, {"title": "Genetic Algorithm Based Decentralized Task Assignment for Multiple Unmanned Aerial Vehicles in Dynamic Environments", "author": ["H. Choi", "Y. Kim", "H. Kim"], "venue": "International Journal of Aeronautical & Space Sci, 12(2), pp.163\u2013174", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2011}, {"title": "A neural network based multi-destination routing algorithm for communication network", "author": ["D.C. Park", "S.E. Choi"], "venue": "Proc. Joint Conf. Neural Networks, pp. 1673\u20131678", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1998}, {"title": "Shortest path routing algorithm using hopfield neural network", "author": ["C.W. Ahn", "R.S. Ramakrishna", "C.G. Kang", "I.C. Choi"], "venue": "Electron. Lett., vol. 37,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2001}, {"title": "Exploring Genetic Algorithm for Shortest Path Optimization in Data Networks", "author": ["R. Kumar", "M. Kumar"], "venue": "Global Journal of Computer Science and Technology,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "Particle swarm optimization", "author": ["J. Kennedy", "R.C. Eberhart"], "venue": "the IEEE International Conference on Neural Networks, pp. 1942\u20131948", "citeRegEx": "27", "shortCiteRegEx": null, "year": 1995}, {"title": "Introduction to Genetic Algorithms", "author": ["S.N. Sivanandam", "S.N. Deepa"], "venue": "Springer, Book, ISBN: 978-3-540-73189-4", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "AUVs are deployed to complete tasks such as water pollution/mineral monitoring, geological sampling, mosaicking the seafloor, underwater navigation, trajectory tracking and so on [1].", "startOffset": 179, "endOffset": 182}, {"referenceID": 1, "context": "So the efficiency of the generated route should be evaluated relative to satisfaction of the specified criteria for the problem [2].", "startOffset": 128, "endOffset": 131}, {"referenceID": 2, "context": "The route planner operates reactively (online) during the mission, therefore time optimality is critical in this approach [3, 4].", "startOffset": 122, "endOffset": 128}, {"referenceID": 3, "context": "The route planner operates reactively (online) during the mission, therefore time optimality is critical in this approach [3, 4].", "startOffset": 122, "endOffset": 128}, {"referenceID": 4, "context": "Generally, proposed solutions for mission route planning approach can be categorized into three main groups: grid-based methods, graph based strategies, and artificial intelligence based techniques [5].", "startOffset": 198, "endOffset": 201}, {"referenceID": 5, "context": "The major drawback of these methods is that they are time consuming owing to redundant computations and makes them expensive in terms of time complexity [6].", "startOffset": 153, "endOffset": 156}, {"referenceID": 6, "context": "Some of the popular graph search algorithms like A* [7, 8, 9, 10] or Dijkstra [11, 12] operate based on cell decomposition and determine the cell-based route from the start to the destination point.", "startOffset": 52, "endOffset": 65}, {"referenceID": 7, "context": "Some of the popular graph search algorithms like A* [7, 8, 9, 10] or Dijkstra [11, 12] operate based on cell decomposition and determine the cell-based route from the start to the destination point.", "startOffset": 52, "endOffset": 65}, {"referenceID": 8, "context": "Some of the popular graph search algorithms like A* [7, 8, 9, 10] or Dijkstra [11, 12] operate based on cell decomposition and determine the cell-based route from the start to the destination point.", "startOffset": 52, "endOffset": 65}, {"referenceID": 9, "context": "Some of the popular graph search algorithms like A* [7, 8, 9, 10] or Dijkstra [11, 12] operate based on cell decomposition and determine the cell-based route from the start to the destination point.", "startOffset": 52, "endOffset": 65}, {"referenceID": 10, "context": "Some of the popular graph search algorithms like A* [7, 8, 9, 10] or Dijkstra [11, 12] operate based on cell decomposition and determine the cell-based route from the start to the destination point.", "startOffset": 78, "endOffset": 86}, {"referenceID": 11, "context": "Genetic and evolutionary methods have been explored for route generation for unmanned aerial vehicles to minimize fuel consumption for the mission [13].", "startOffset": 147, "endOffset": 151}, {"referenceID": 12, "context": "A niche genetic algorithm (INGA) improved real-time route planning of unmanned aerial vehicles [14].", "startOffset": 95, "endOffset": 99}, {"referenceID": 13, "context": "dominated sorting genetic algorithm (NSGA-II) was proposed [15], but offline route generation strategies get in to serious difficulties when replanning is need due to problem arising during the mission.", "startOffset": 59, "endOffset": 63}, {"referenceID": 14, "context": "Another model based on various types of fuzzy arc lengths designed by [16] to compute the shortest route in a graph.", "startOffset": 70, "endOffset": 74}, {"referenceID": 15, "context": "Later on, a GA [17] and a hybrid Dijkstra GA based approach [18, 19] used to address the shortest path problems as combinatorial optimization problems.", "startOffset": 15, "endOffset": 19}, {"referenceID": 16, "context": "Later on, a GA [17] and a hybrid Dijkstra GA based approach [18, 19] used to address the shortest path problems as combinatorial optimization problems.", "startOffset": 60, "endOffset": 68}, {"referenceID": 17, "context": "Later on, a GA [17] and a hybrid Dijkstra GA based approach [18, 19] used to address the shortest path problems as combinatorial optimization problems.", "startOffset": 60, "endOffset": 68}, {"referenceID": 18, "context": "Generally, evolutionary algorithms like GA [20, 21], PSO [22, 28] have low sensitivity to graph complexity, so search time increases linearly with the number of points.", "startOffset": 43, "endOffset": 51}, {"referenceID": 19, "context": "Generally, evolutionary algorithms like GA [20, 21], PSO [22, 28] have low sensitivity to graph complexity, so search time increases linearly with the number of points.", "startOffset": 43, "endOffset": 51}, {"referenceID": 20, "context": "Generally, evolutionary algorithms like GA [20, 21], PSO [22, 28] have low sensitivity to graph complexity, so search time increases linearly with the number of points.", "startOffset": 57, "endOffset": 65}, {"referenceID": 21, "context": "Generally, the task assignment (allocation) involves the decision making procedures under specified constraints and categorized as the complex combinatorial optimization problem [23].", "startOffset": 178, "endOffset": 182}, {"referenceID": 22, "context": "Therefore they are not appropriate approaches for real-time routing applications, specifically when the operating graph is topologically complex [24, 25].", "startOffset": 145, "endOffset": 153}, {"referenceID": 23, "context": "Therefore they are not appropriate approaches for real-time routing applications, specifically when the operating graph is topologically complex [24, 25].", "startOffset": 145, "endOffset": 153}, {"referenceID": 24, "context": "This progress continues until the chromosomes get the best fit solution to the given problem [26].", "startOffset": 93, "endOffset": 97}, {"referenceID": 25, "context": "More detail about the algorithm can be found in related references [27].", "startOffset": 67, "endOffset": 71}, {"referenceID": 0, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 15, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 7, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 3, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 26, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 9, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 16, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 12, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 10, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 21, "context": "G1 50 1197 1 PSO [1,17,36,8,42,4,29,41,48,10,18,45,14,12,23,50]", "startOffset": 17, "endOffset": 63}, {"referenceID": 0, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 9, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 16, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 21, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 11, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 13, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 26, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 10, "context": "GA [1,35,46,42,48,407,10,18,36,23,13,15,28,33,45,29,12,50]", "startOffset": 3, "endOffset": 58}, {"referenceID": 0, "context": "G2 100 4886 2 PSO [1,2,91,26,84,89,55,69,52,56,72,50,70,80,62,4093,3,100]", "startOffset": 18, "endOffset": 73}, {"referenceID": 1, "context": "G2 100 4886 2 PSO [1,2,91,26,84,89,55,69,52,56,72,50,70,80,62,4093,3,100]", "startOffset": 18, "endOffset": 73}, {"referenceID": 24, "context": "G2 100 4886 2 PSO [1,2,91,26,84,89,55,69,52,56,72,50,70,80,62,4093,3,100]", "startOffset": 18, "endOffset": 73}, {"referenceID": 2, "context": "G2 100 4886 2 PSO [1,2,91,26,84,89,55,69,52,56,72,50,70,80,62,4093,3,100]", "startOffset": 18, "endOffset": 73}, {"referenceID": 0, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 1, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 3, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 6, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 5, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 7, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 4, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}, {"referenceID": 17, "context": "GA [1,2,4,70,33,81,62,7,45,90,11,78,95,54,96,79,59,34,6,46,8 5,19,100]", "startOffset": 3, "endOffset": 70}], "year": 2016, "abstractText": "This paper presents a solution to Autonomous Underwater Vehicles (AUVs) large scale route planning and task assignment joint problem. Given a set of constraints (e.g., time) and a set of task priority values, the goal is to find the optimal route for underwater mission that maximizes the sum of the priorities and minimizes the total risk percentage while meeting the given constraints. Making use of the heuristic nature of genetic and swarm intelligence algorithms in solving NP-hard graph problems, Particle Swarm Optimization (PSO) and Genetic Algorithm (GA) are employed to find the optimum solution, where each individual in the population is a candidate solution (route). To evaluate the robustness of the proposed methods, the performance of the all PS and GA algorithms are examined and compared for a number of Monte Carlo runs. Simulation results suggest that the routes generated by both algorithms are feasible and reliable enough, and applicable for underwater motion planning. However, the GA-based route planner produces superior results comparing to the results obtained from the PSO based route planner. Keywords\u2014autonomous underwater vehicle; route planning; particle swarm optimization; genetic algorithm", "creator": "Microsoft\u00ae Word 2013"}}}