{"id": "1605.02097", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-May-2016", "title": "ViZDoom: A Doom-based AI Research Platform for Visual Reinforcement Learning", "abstract": "The focused advances before balance neural system ones as although meant perception - addition corrective training processes that have some employed if licenses aids - moving radioed taken Atari 5200 games over density calculations. Atari 2600 games, possibly, how too resemble given - already strategies month they involve allow - realistic 2D integrated and of 21 - nothing perspective. Here, we step a narrated challenge - kitchen ramp for continuous learning neuroscience as raw 3-d provided form employs the fifth - person concept in a championship - realistic 3D world. The software, called ViZDoom, and based last the tradition time - nobody baseline computer went, Doom. It either developing bopomofo that best the finals equipment the pack static. ViZDoom present wbf, turning, has usually unlockable via a convenient enabling it user scenarios. In the experimental part, we be one environment by trying continue lessons droids out others scenarios: that requires hold - now - just focus most a not complex separating - gps concerned. Using shimano deep neural connections with Q - programs all experience draw, for for phases, whatever them rest to train competent homebrew, already presented human - 're behaviors. The results investigate although utility of ViZDoom most an AI biological windows and irrespective which psychological undertake philosophy 2001 3D inventive ten - person concepts interfaces is impractical.", "histories": [["v1", "Fri, 6 May 2016 20:46:34 GMT  (3644kb,D)", "http://arxiv.org/abs/1605.02097v1", null], ["v2", "Tue, 20 Sep 2016 19:12:49 GMT  (3592kb,D)", "http://arxiv.org/abs/1605.02097v2", null]], "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.CV", "authors": ["micha{\\l} kempka", "marek wydmuch", "grzegorz runc", "jakub toczek", "wojciech ja\\'skowski"], "accepted": false, "id": "1605.02097"}, "pdf": {"name": "1605.02097.pdf", "metadata": {"source": "CRF", "title": "ViZDoom: A Doom-based AI Research Platform for Visual Reinforcement Learning", "authors": ["Micha\u0142 Kempka", "Marek Wydmuch", "Grzegorz Runc", "Jakub Toczek"], "emails": ["wjaskowski@cs.put.poznan.pl"], "sections": [{"heading": null, "text": "Keywords: video games, visual-based reinforcement learning, deep reinforcement learning, first-person perspective games, FPS, visual learning, neural networks\nI. INTRODUCTION\nVisual signals are one of the primary sources of information about the surrounding environment for living and artificial beings. While computers have already exceeded humans in terms of raw data processing, they still do not match their ability to interact with and act in complex, realistic 3D environments. Recent increase in computing power (GPUs), and the advances in visual learning (i.e., machine learning from visual information) have enabled a significant progress in this area. This was possible thanks to the renaissance of neural networks, and deep architectures in particular. Deep learning has been applied to many supervised machine learning tasks and performed spectacularly well especially in the field of image classification [17]. Recently, deep architectures have also been successfully employed in the reinforcement learning domain to train human-level agents to play a set of Atari 2600 games from raw pixel information [21].\nThanks to high recognizability and an easy-to-use software toolkit, Atari 2600 games have been widely adopted as a benchmark for visual learning algorithms. Atari 2600 games have, however, several drawbacks from the AI research perspective. First, they involve only 2D environments. Second, the environments hardly resemble the world we live in. Third, they\nare third-person perspective games, which does not match a real-world mobile-robot scenario. Last but not least, although, for some Atari 2600 games, human players are still ahead of bots trained from scratch, the best deep reinforcement learning algorithms are already ahead on average. Therefore, there is a need for more challenging reinforcement learning problems involving first-person-perspective and realistic 3D worlds.\nIn this paper, we propose a software platform, ViZDoom1, for the machine (reinforcement) learning research from raw visual information. The environment is based on Doom, the famous first-person shooter (FPS) video game. It allows developing bots that play Doom using only the screen buffer. The environment involves a 3D world that is significantly more real-world-like than Atari 2600 games. It also provides a relatively realistic physics model. An agent (bot) in ViZDoom has to effectively percept, interpret, and learn the 3D world in order to make tactical and strategic decisions where to go and how to act. The strength of the environment as an AI research platform also lies in its customization capabilities. The platform makes it easy to define custom scenarios which differ by maps, environment elements, non-player characters, rewards, goals, and actions available to the agent. It is also lightweight \u2013 on modern computers, one can play the game at nearly 7000 frames per second using a single CPU core, which is of particular importance if learning is involved.\nIn order to demonstrate the usability of the platform, we perform two ViZDoom experiments with deep Q-learning [21]. The first one involves a somewhat limited 2D-like environment, for which we try to find out the optimal rate at which agents should make decisions. In the second experiment, the agent has to navigate a 3D maze collecting some object and omitting the others. The results of the experiments indicate that deep reinforcement learning is capable of tackling realistic first-person perspective 3D environments.\nFPS games, especially the most popular ones such as Unreal Tournament [11] [12], Counter-Strike [14] or Quake III Arena [7], have already been used in AI research. However, in these studies agents acted upon high-level information like positions of walls, enemies, locations of items, etc., which are usually inaccessible to human players. Supplying only raw visual information might relieve researchers of the burden of providing AI with high-level information and handcrafted features. We also hypothesize that it could make the agents\n1http://vizdoom.cs.put.edu.pl, https://github.com/Marqt/ViZDoom\nar X\niv :1\n60 5.\n02 09\n7v 1\n[ cs\n.L G\n] 6\nM ay\n2 01\n6\nbehave more believable [15]. So far, there has been no studies on reinforcement learning from visual information obtained from FPS games.\nTo date, there have been no FPS-based environments that allow research on agents relying exclusively on raw visual information. This could be a serious factor impeding the progress of vision-based reinforcement learning, since engaging in it requires a large amount of programming work. Existence of a ready-to-use tool facilitates conducting experiments and focusing on the goal of the research."}, {"heading": "II. RELATED WORK", "text": "One of the earliest works on visual-based reinforcement learning is due to Asada et al. [3], [2], who trained robots various elementary soccer-playing skills. Other works in this area include teaching mobile robots with visual-based Qlearning [9], learning policies with deep auto-encoders and batch-mode algorithms [18], neuroevolution for a vision-based version of the mountain car problem [5], and compressed neuroevolution with recurrent neural networks for vision-based car simulator [16]. Recently, Mnih et al. have shown a deep Q-learning method for learning Atari 2600 games from visual input [21].\nDifferent first-person shooter (FPS) video games have already been used either as AI research platforms, or application domains. The first work on AI in FPS games is due to Geisler [10]. It concerned modeling player behavior in Soldier of Fortune 2. Cole used genetic algorithms to tune bots in Counter Strike [4]. Dawes [6] identified Unreal Tournament 2004 as a potential AI research test-bed. El Rhalib studied weapon selection in Quake III Arena [7]. Smith devised a RETALIATE reinforcement learning algorithm for optimizing team tactics in Unreal Tournament [22]. SARSA(\u03bb), another reinforcement learning method, was the subject of research in FPS games [20], [11]. Recently, continuous and reinforcement learning techniques were applied to learn the behavior of tanks in the game BZFlag [23].\nAs far as we are aware, to date, there have been no studies that employed the genre-classical Doom FPS. Also, no previous study used visual information to develop bots in FPS games.\nIII. VIZDOOM RESEARCH PLATFORM"}, {"heading": "A. Why Doom?", "text": "Creating a 3D first-person perspective environment from scratch solely for research purposes would be wasteful [26]. Due to the popularity of the first-person shooter genre, we have decided to use an existing game engine as the base for our environment. We concluded that it has to meet the following requirements:\n1) based on popular open-source 3D FPS game (ability to modify the code and the publication freedom), 2) lightweight (portability and the ability to run multiple instances on a single machine), 3) fast (the game engine should not be the learning bottleneck),\n4) total control over the game\u2019s processing (so that the game can wait for the bot decisions or the agent can learn by observing a human playing), 5) customizable resolution and rendering parameters, 6) multiplayer games capabilities (agent vs. agent and agent\nvs. human), 7) easy-to-use tools to create custom scenarios, 8) ability to bind different programming languages (prefer-\nably written in C++), 9) multi-platform. To make the decision according to the above-listed criteria, we have analyzed seven recognizable FPS games: Quake III Arena, Doom 3, Half-Life 2, Unreal Tournament 2004, Unreal Tournament and Cube. Their comparison is shown in Table I. Some of the features listed in the table are objective (e.g., \u2018scripting\u2019) and others are subjective (\u201ccode complexity\u201d). Brand recognition was estimated as the number (in millions) of Google results (as of 26.04.2016) for phrases \u201cgame <gamename>\u201d, where <gamename> was \u2018doom\u2019, \u2018quake\u2019, \u2018halflife\u2019, \u2018unreal tournament\u2019 or \u2018cube\u2019. The game was considered as low-resolution capable if it was possible to set the resolution to values smaller than 640\u00d7 480.\nSome of the games had to be rejected right away in spite of high general appeal. Unreal Tournament 2004 engine is only accessible by the Software Development Kit and it lacks support for controlling the speed of execution and direct screen buffer access. The game has not been prepared to be heavily modified.\nSimilar problems are shared by Half-Life 2 despite the fact that the Source engine is widely known for modding capabilities. It also lacks direct multiplayer support. Although the Source engine itself offers multiplayer support, it involves client-server architecture, which makes synchronization and direct interaction with the engine problematic (network communication).\n2GZDoom, the ZDoom\u2019s fork, is OpenGL-based.\nThe client-server architecture was also one the reasons for rejection of Quake III: Arena. Quake III also does not offer any scripting capabilities, which are essential to make a research environment versatile. The rejection of Quake was a hard decision as it is a highly regarded and playable game even nowadays but this could not outweigh the lack of scripting support.\nThe latter problem does not concern Doom 3 but its high disk requirements were considered as a drawback. Doom 3 had to be ignored also because of its complexity, Windows-only tools, and OS-dependent rendering mechanisms. Although its source code has been released, its community is dispersed. As a result, there are several rarely updated versions of its sources.\nThe community activity is also a problem in the case of Cube as its last update was in August 2005. Nonetheless, the low complexity of its code and the highly intuitive map editor would make it a great choice if the engine was more popular.\nUnreal Tournament, however popular, is not as recognizable as Doom or Quake but it has been a primary research platform for FPS games [8], [25]. It also has great capabilities. Despite its active community and the availability of the source code, it was rejected due to its high system requirements.\nDoom (see Fig. 1) met most of the requirements and allowed to implement features that would be barely achievable in other games, e.g., off-screen rendering and custom rewards. The game is highly recognizable and runs on the three major\noperating systems. It was also designed to work in 320\u00d7 240 resolution and despite the fact that modern implementations allow bigger resolutions, it still utilizes low-resolution textures. Moreover, its source code is easy-to-understand.\nThe unique feature of Doom is its software renderer. Because of that, it could be run without the desktop environment (e.g., remotely in a terminal) and accessing the screen buffer does not require transferring it from the graphics card.\nTechnically, ViZDoom is based on the modernized, opensource version of Doom\u2019s original engine \u2014 ZDoom, which is still actively supported and developed."}, {"heading": "B. Application Programming Interface (API)", "text": "ViZDoom API is flexible and easy-to-use. It was designed with reinforcement and apprenticeship learning in mind, and therefore, it provides full control over the underlying Doom process. In particular, it allows retrieving the game\u2019s screen buffer and make actions that correspond to keyboard buttons (or their combinations) and mouse actions. Some game state variables such as the player\u2019s health or ammunition are available directly.\nViZDoom\u2019s API was written in C++. The API offers a myriad of configuration options such as control modes and rendering options. In addition to the C++ support, bindings for Python and Java have been provided. The Python API example is shown in Fig. 2."}, {"heading": "C. Features", "text": "ViZDoom provides features that can be exploited in different kinds of AI experiments. The main features include different control modes, custom scenarios, access to the depth buffer and off-screen rendering eliminating the need of using a graphical interface.\n1) Control modes: ViZDoom implements four control modes: i) synchronous player, ii) synchronous spectator, iii) asynchronous player, and iv) asynchronous spectator.\nIn asynchronous modes, the game runs at constant 35 frames per second and if the agent reacts too slowly, it can miss some frames. Conversely, if it makes a decision too quickly, it is blocked until the next frame arrives from the engine. Thus, for reinforcement learning research, more useful are the synchronous modes, in which the game engine waits for the decision maker. This way, the learning system can learn at its pace, and it is not limited by any temporal constraints.\nImportantly, for experimental reproducibility and debugging purposes, the synchronous modes run deterministically.\nIn the player modes, it is the agent who makes actions during the game. In contrast, in the spectator modes, a human player is in control, and the agent only observes the player\u2019s actions.\nIn addition, ViZDoom provides an asynchronous multiplayer mode, which allows games involving up to eight players (human or bots) over a network.\n2) Scenarios: One of the most important features of ViZDoom is the ability to run custom scenarios. This includes creating appropriate maps, programming the environment mechanics (\u201cwhen and how things happen\u201d), defining terminal conditions (e.g., \u201ckilling a certain monster\u201d, \u201cgetting to a certain place\u201d, \u201cdied\u201d), and rewards (e.g., for \u201ckilling a monster\u201d,\n\u201cgetting hurt\u201d, \u201cpicking up an object\u201d). This mechanism opens endless experimentation possibilities. In particular, it allows creating a scenario of a difficulty which is on par with the capabilities of the assessed learning algorithms.\nCreation of scenarios is possible thanks to easy-to-use software tools developed by the Doom community. The two recommended free tools include Doom Builder 2 and SLADE 3. Both are visual editors, which allow defining custom maps and coding the game mechanics in Action Code Script. They also enable to conveniently test a scenario without leaving the editor.\nViZDoom comes with a few predefined scenarios. Two of them are described in Section IV.\n3) Depth Buffer Access: ViZDoom provides access to the renderer\u2019s depth buffer (see Fig. 3), which may help an agent to understand the received visual information. This feature gives an opportunity to test whether the learning algorithms can autonomously learn the whereabouts of the objects in the environment. The depth information can also be used to simulate the distance sensors common in mobile robots.\n4) Off-Screen Rendering and Frame Skipping: To facilitate computationally heavy machine learning experiments, we equipped ViZDoom with off-screen rendering and frame skipping features. Off-screen rendering lessens the performance burden of actually showing the game on the screen and makes it possible to run the experiments on the servers (no graphical interface needed). Frame skipping, on the other hand, allows omitting rendering selected frames at all. Intuitively, an effective bot does not have to see every single frame. We explore this issue experimentally in Section IV.\nD. ViZDoom\u2019s Performance\nThe main factors affecting ViZDoom performance are the number of the actors (like items and bots), the rendering resolution, and computing the depth buffer. Fig. 4 shows how the number of frames per second depends on these factors. The tests have been made in the synchronous player mode on\nLinux running on Intel Core i7-4790k. ViZDoom uses only a single CPU core.\nThe performance test shows that ViZDoom can render nearly 7000 low-resolution frames per second. The rendering resolution proves to be the most important factor influencing the processing speed. In the case of low resolutions, the time needed to render one frame is negligible compared to the backpropagation time of any reasonably complex neural network."}, {"heading": "IV. EXPERIMENTS", "text": ""}, {"heading": "A. Basic Experiment", "text": "The primary purpose of the experiment was to show that reinforcement learning from the visual input is feasible in ViZDoom. Additionally, the experiment investigates how the number of skipped frames (see Section III-C4) influences the learning process.\n1) Scenario: This simple scenario takes place in a rectangular chamber (see Fig. 5). An agent is spawned in the center of the room\u2019s longer wall. A stationary monster is spawned at a random position along the opposite wall. The agent can strafe left and right, or shoot. A single hit is enough to kill the monster. The episode ends when the monster is eliminated or after 300 frames, whatever comes first. The agent scores 101 points for killing the monster, \u22125 for a missing shot, and, additionally, \u22121 for each action. The scores motivate the learning agent to eliminate the monster as quickly as possible, preferably with a single shot3.\n2) Deep Q-Learning: The learning procedure is similar to the Deep Q-Learning introduced for Atari 2600 [21]. The problem is modeled as a Markov Decision Process and Qlearning [27] is used to learn the policy. The action is selected by an -greedy policy with linear decay. The Q-function is approximated with a convolutional neural network, which is trained with Stochastic Gradient Decent. We also used experience replay but no target network freezing (see [21]).\n3) Experimental Setup: a) Neural Network Architecture: The network used in the experiment consists of two convolutional layers with 32 square filters, 7 and 4 pixels wide, respectively (see Fig. 6). Each convolution layer is followed by a max-pooling layer with max pooling of size 2 and rectified linear units for activation [13]. Next, there is a fully-connected layer with 800 leaky rectified linear units [19] and an output layer with 8 linear units corresponding to the 8 combinations of the 3 available actions (left, right and shot).\nb) Game Settings: A state was represented by the most recent frame, which was a 60 \u00d7 45 3-channel RGB image. The number of skipped frames is controlled by the skipcount parameter. We experimented with skipcounts of 0-7, 10, 15, 20, 25, 30, 35 and 40. It is important to note that the agent repeats the last decision on the skipped frames.\nc) Learning Settings: We arbitrarily set the discount factor \u03b3 = 0.99, learning rate \u03b1 = 0.01, replay memory capacity to 10 000 elements and mini-batch size to 40. The initial = 1.0 starts to decay after 100 000 learning steps, finishing the decay at = 0.1 at 200 000 learning steps.\nEvery agent learned for 600 000 steps, each one consisting of performing an action, observing a transition, and updating the network. To monitor the learning progress, 1000 testing episodes were played after each 5000 learning steps. Final controllers were evaluated on 10 000 episodes. The experiment was performed on Intel Core i7-4790k 4GHz with GeForce GTX 970, which handled the neural network.\n4) Results: Figure 7 shows the learning dynamics for the selected skipcounts. It demonstrates that although all the agents improve over time, the skips influence the learning speed, its smoothness, as well as the final performance. When the agent does not skip any frames, the learning is the slowest. Generally, the larger the skipcount, the faster and smoother the learning is. We have also observed that the agents learning with\n3See also https://youtu.be/fKHw3wmT uA\nhigher skipcounts were less prone to irrational behaviors like staying idle or going the direction opposite to the monster, which results in lower variance on the plots. On the other hand, too large skipcounts make the agent \u2018clumsy\u2019 due to the lack of fine-grained control, which results in suboptimal final scores.\nThe detailed results, shown in Table II, indicate that the optimal skipcount for this scenario is 4 (the \u201cnative\u201d column). However, higher values (up to 10) are close to this maximum.\nWe have also checked how robust to skipcounts the agents are. For this purpose, we evaluated them using skipcounts different from ones they had been trained with. Most of the agents performed worse than with their \u201cnative\u201d skipcounts. The least robust were the agents trained with skipcounts less than 4. Larger skipcounts resulted in more robust agents. Interestingly, for skipcounts greater than or equal to 30, the agents score better on skipcounts lower than the native ones. Our best agent that was trained with skipcount 4 was also the best when executed with skipcount 0.\nIt is also worth showing that increasing the skipcount influences the total learning time only slightly. The learning takes longer primarily due to the higher total overhead associated with episode restarts since higher skipcounts result in a greater number of episodes.\nTo sum up, the skipcounts in the range of 4-10 provide the best balance between the learning speed and the final performance. The results also indicate that it would be profitable to start learning with high skipcounts to exploit the steepest learning curve and gradually decrease it to fine-tune the performance."}, {"heading": "B. Medikit Collecting Experiment", "text": "The previous experiment was conducted on a simple scenario which was closer to a 2D arcade game rather than a true 3D virtual world. That is why we decided to test if similar deep reinforcement learning methods would work in a more involved scenario requiring substantial spatial reasoning.\n1) Scenario: In this scenario, the agent is spawned in a random spot of a maze with an acid surface, which slowly, but constantly, takes away the agent\u2019s life (see Fig. 8). To survive, the agent needs to collect medikits and avoid blue vials with poison. Items of both types appear in random places during the\nepisode. The agent is allowed to move (forward/backward), and turn (left/right). It scores 1 point for each tick, and it is punished by \u2212100 points for getting dead. Thus, it is motivated to survive as long as possible. To facilitate learning, we also introduced shaping rewards of 100 and \u2212100 points for collecting a medikit and a vial, respectively. The shaping rewards do not count to the final score but are used during the agent\u2019s training helping it to \u2018understand\u2019 its goal. Each episode ends after 2100 ticks (1 minute in real-time) or when the agent dies so 2100 is the maximum achievable score. Being idle results in scoring 284 points.\n2) Experimental Setup: The learning procedure was the same as described in Section IV-A2 with the difference that for updating the weights RMSProp [24] this time.\na) Neural Network Architecture: We used a similar network to the one used in the previous experiment. The differences are following. We used three convolutional layers. Each involved 32 square filters 7, 5, and 3 pixels wide, respectively. The fully-connected layer involves 1024 leaky rectified linear units and the output layer 16 linear units corresponding to each combination of the 4 available actions.\nb) Game Settings: The game\u2019s state was represented by the 120 \u00d7 45 3-channel RGB image, health points and the current tick number (within the episode). Additionally, a kind of memory was implemented by making the agent use 4 last states as the neural network input. Skipcount of 10 was used.\nc) Learning Settings: We set the discount factor \u03b3 = 1, learning rate \u03b1 = 0.00001, replay memory capacity to 10 000 elements and mini-batch size to 64. The initial = 1.0 started to decay after 4 000 learning steps, finishing the decay at = 0.1 at 104 000 episodes.\nThe agent was set to learn for 1000 000 steps. To monitor the learning progress, 200 testing episodes were played after each 5000 learning steps. The whole learning process, including the testing episodes, lasted 29 hours.\n3) Results: The learning dynamics is shown in Fig. 9. It can be observed that the agents fairly quickly learns to get the\nperfect score from time to time. Its average score, however, improves slowly reaching 1300 at the end of the learning. The trend might, however, suggest that some improvement is still possible given more training time. The plots suggest that even at the end of learning, the agent for some initial states fails to live more than a random player.\nIt must, however, be noted that the scenario is not easy and even from a human player, it requires a lot of focus. It is so because the medikits are not abundant enough to allow the bots to waste much time.\nWatching the agent play4 revealed that it had developed a policy consistent with our expectations. It navigates towards medikits, actively, although not very deftly, avoids the poison vials, and does not push against walls and corners. It also backpedals after reaching a dead end or a poison vial. However, it very often hesitates about choosing a direction, which results in turning left and right alternately on the spot. This quirky behavior is the most probable, direct cause of not fully satisfactory performance.\nInterestingly, the learning dynamics consists of three sudden but ephemeral drops in the average and best score. The reason for such dynamics is unknown and it requires further research."}, {"heading": "V. CONCLUSIONS", "text": "ViZDoom is a Doom-based platform for research in visionbased reinforcement learning. It is easy-to-use, highly flexible, multi-platform, lightweight, and efficient. In contrast to the other popular visual learning environments such as Atari 2600, ViZDoom provides a 3D, semi-realistic, first-person perspective virtual world. ViZDoom\u2019s API gives the user full control of the environment. Multiple modes of operation facilitate experimentation with different learning paradigms such as reinforcement learning, apprenticeship learning, learning by demonstration, and, even the \u2018ordinary\u2019, supervised learning. The strength and versatility of environment lie in\n4https://youtu.be/re6hkcTWVUY\nis customizability via the mechanism of scenarios, which can be conveniently programmed with open-source tools.\nWe also demonstrated that visual reinforcement learning is possible in the 3D virtual environment of ViZDoom by performing experiments with deep Q-learning on two scenarios. The results of the simple move-and-shoot scenario, indicate that the speed of the learning system highly depends on the number of frames the agent is allowed to skip during the learning. We have found out that it is profitable to skip from 4 to 10 frames. We used this knowledge in the second, more involved, scenario, in which the agent had to navigate through a hostile maze and collect some items and avoid the others. Although the agent was not able to find a perfect strategy, it learned to navigate the maze surprisingly well exhibiting evidence of a human-like behavior.\nViZDoom has recently reached a stable 1.0.1 version and has a potential to be extended in many interesting directions. First, we would like to implement a synchronous multiplayer mode, which would be convenient for self-learning in multiplayer settings. Second, bots are now deaf thus, we plan to allow bots to access the sound buffer. Lastly, interesting, supervised learning experiments (e.g., segmentation) could be conducted if ViZDoom automatically labeled objects in the scene."}, {"heading": "ACKNOWLEDGMENT", "text": "This work has been supported in part by the Polish National\nScience Centre grant no. DEC-2013/09/D/ST6/03932."}], "references": [{"title": "Purposive behavior acquisition for a real robot by vision-based reinforcement learning", "author": ["Minoru Asada", "Shoichi Noda", "Sukoya Tawaratsumida", "Koh Hosoda"], "venue": "In Recent Advances in Robot Learning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1996}, {"title": "A vision-based reinforcement learning for coordination of soccer playing behaviors", "author": ["Minoru Asada", "Eiji Uchibe", "Shoichi Noda", "Sukoya Tawaratsumida", "Koh Hosoda"], "venue": "In Proceedings of AAAI-94 Workshop on AI and A-life and Entertainment,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1994}, {"title": "Using a genetic algorithm to tune first-person shooter bots", "author": ["Nicholas Cole", "Sushil J Louis", "Chris Miles"], "venue": "In Evolutionary Computation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2004}, {"title": "Intrinsically motivated neuroevolution for vision-based reinforcement learning", "author": ["Giuseppe Cuccu", "Matthew Luciw", "J\u00fcrgen Schmidhuber", "Faustino Gomez"], "venue": "In Development and Learning (ICDL),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Towards using first-person shooter computer games as an artificial intelligence testbed", "author": ["Mark Dawes", "Richard Hall"], "venue": "In Knowledge- Based Intelligent Information and Engineering Systems,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2005}, {"title": "A hybrid fuzzy ANN system for agent adaptation in a first person shooter", "author": ["Abdennour El Rhalibi", "Madjid Merabti"], "venue": "International Journal of Computer Games Technology,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2008}, {"title": "Controlling bots in a First Person Shooter game using genetic algorithms", "author": ["A I Esparcia-Alcazar", "A Martinez-Garcia", "A Mora", "J J Merelo", "P Garcia-Sanchez"], "venue": "In Evolutionary Computation (CEC),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Reinforcement learning for a vision based mobile robot", "author": ["Chris Gaskett", "Luke Fletcher", "Alexander Zelinsky"], "venue": "In Intelligent Robots and Systems,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2000}, {"title": "An empirical study of machine learning algorithms applied to modeling player behavior in a first person shooter video game", "author": ["Benjamin Geisler"], "venue": "PhD thesis, University of Wisconsin-Madison,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "DRE-Bot: A hierarchical First Person Shooter bot using multiple Sarsa(\u03bb) reinforcement learners", "author": ["F G Glavin", "M G Madden"], "venue": "In Computer Games (CGAMES),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Adaptive Shooting for Bots in First Person Shooter Games Using Reinforcement Learning", "author": ["F G Glavin", "M G Madden"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Deep sparse rectifier neural networks", "author": ["Xavier Glorot", "Antoine Bordes", "Yoshua Bengio"], "venue": "Proceedings of the Fourteenth International Conference on Artificial Intelligence and Statistics (AISTATS-11),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "An evaluation of models for predicting opponent positions in first-person shooter video games", "author": ["S Hladky", "V Bulitko"], "venue": "Computational Intelligence and Games", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2008}, {"title": "Believable Bot Navigation via Playback of Human Traces, pages 151\u2013170", "author": ["Igor V. Karpov", "Jacob Schrum", "Risto Miikkulainen"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2012}, {"title": "Evolving deep unsupervised convolutional networks for vision-based reinforcement learning", "author": ["Jan Koutn\u0131\u0301k", "J\u00fcrgen Schmidhuber", "Faustino Gomez"], "venue": "In Proceedings of the 2014 conference on Genetic and evolutionary computation,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2012}, {"title": "Deep auto-encoder neural networks in reinforcement learning", "author": ["Sascha Lange", "Martin Riedmiller"], "venue": "In IJCNN,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2010}, {"title": "Rectifier nonlinearities improve neural network acoustic models", "author": ["Andrew L. Maas", "Awni Y. Hannun", "Andrew Y. Ng"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Reinforcement Learning in First Person Shooter Games", "author": ["M McPartland", "M Gallagher"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}, {"title": "Human-level control through deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A. Rusu", "Joel Veness", "Marc G. Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K. Fidjeland", "Georg Ostrovski", "Stig Petersen", "Charles Beattie", "Amir Sadik", "Ioannis Antonoglou", "Helen King", "Dharshan Kumaran", "Daan Wierstra", "Shane Legg", "Demis Hassabis"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "TALIATE: learning winning policies in first-person shooter games", "author": ["Megan Smith", "Stephen Lee-Urban", "H\u00e9ctor Mu\u00f1oz-Avila. RE"], "venue": "In Proceedings of the National Conference on Artificial Intelligence,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1999}, {"title": "Continuous and Reinforcement Learning Methods for First-Person Shooter Games", "author": ["Tony C Smith", "Jonathan Miles"], "venue": "Journal on Computing (JoC),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Lecture 6.5\u2014RmsProp: Divide the gradient by a running average of its recent magnitude", "author": ["T. Tieleman", "G. Hinton"], "venue": "COURSERA: Neural Networks for Machine Learning,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2012}, {"title": "The Evolution of Gamebots for 3D First Person Shooter (FPS)", "author": ["Chang Kee Tong", "Ong Jia Hui", "J Teo", "Chin Kim On"], "venue": "In Bio- Inspired Computing: Theories and Applications (BIC-TA),", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2011}, {"title": "Computer game engines for developing first-person virtual environments", "author": ["David Trenholme", "Shamus P Smith"], "venue": "Virtual reality,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2008}, {"title": "Q-learning", "author": ["C.J.C.H. Watkins", "P. Dayan"], "venue": "Machine Learning, 8(3):279\u2013292", "citeRegEx": "27", "shortCiteRegEx": null, "year": 1992}], "referenceMentions": [{"referenceID": 15, "context": "Deep learning has been applied to many supervised machine learning tasks and performed spectacularly well especially in the field of image classification [17].", "startOffset": 154, "endOffset": 158}, {"referenceID": 19, "context": "Recently, deep architectures have also been successfully employed in the reinforcement learning domain to train human-level agents to play a set of Atari 2600 games from raw pixel information [21].", "startOffset": 192, "endOffset": 196}, {"referenceID": 19, "context": "In order to demonstrate the usability of the platform, we perform two ViZDoom experiments with deep Q-learning [21].", "startOffset": 111, "endOffset": 115}, {"referenceID": 9, "context": "FPS games, especially the most popular ones such as Unreal Tournament [11] [12], Counter-Strike [14] or Quake III Arena [7], have already been used in AI research.", "startOffset": 70, "endOffset": 74}, {"referenceID": 10, "context": "FPS games, especially the most popular ones such as Unreal Tournament [11] [12], Counter-Strike [14] or Quake III Arena [7], have already been used in AI research.", "startOffset": 75, "endOffset": 79}, {"referenceID": 12, "context": "FPS games, especially the most popular ones such as Unreal Tournament [11] [12], Counter-Strike [14] or Quake III Arena [7], have already been used in AI research.", "startOffset": 96, "endOffset": 100}, {"referenceID": 5, "context": "FPS games, especially the most popular ones such as Unreal Tournament [11] [12], Counter-Strike [14] or Quake III Arena [7], have already been used in AI research.", "startOffset": 120, "endOffset": 123}, {"referenceID": 13, "context": "behave more believable [15].", "startOffset": 23, "endOffset": 27}, {"referenceID": 1, "context": "[3], [2], who trained robots various elementary soccer-playing skills.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "[3], [2], who trained robots various elementary soccer-playing skills.", "startOffset": 5, "endOffset": 8}, {"referenceID": 7, "context": "Other works in this area include teaching mobile robots with visual-based Qlearning [9], learning policies with deep auto-encoders and batch-mode algorithms [18], neuroevolution for a vision-based version of the mountain car problem [5], and compressed neuroevolution with recurrent neural networks for vision-based car simulator [16].", "startOffset": 84, "endOffset": 87}, {"referenceID": 16, "context": "Other works in this area include teaching mobile robots with visual-based Qlearning [9], learning policies with deep auto-encoders and batch-mode algorithms [18], neuroevolution for a vision-based version of the mountain car problem [5], and compressed neuroevolution with recurrent neural networks for vision-based car simulator [16].", "startOffset": 157, "endOffset": 161}, {"referenceID": 3, "context": "Other works in this area include teaching mobile robots with visual-based Qlearning [9], learning policies with deep auto-encoders and batch-mode algorithms [18], neuroevolution for a vision-based version of the mountain car problem [5], and compressed neuroevolution with recurrent neural networks for vision-based car simulator [16].", "startOffset": 233, "endOffset": 236}, {"referenceID": 14, "context": "Other works in this area include teaching mobile robots with visual-based Qlearning [9], learning policies with deep auto-encoders and batch-mode algorithms [18], neuroevolution for a vision-based version of the mountain car problem [5], and compressed neuroevolution with recurrent neural networks for vision-based car simulator [16].", "startOffset": 330, "endOffset": 334}, {"referenceID": 19, "context": "have shown a deep Q-learning method for learning Atari 2600 games from visual input [21].", "startOffset": 84, "endOffset": 88}, {"referenceID": 8, "context": "The first work on AI in FPS games is due to Geisler [10].", "startOffset": 52, "endOffset": 56}, {"referenceID": 2, "context": "Cole used genetic algorithms to tune bots in Counter Strike [4].", "startOffset": 60, "endOffset": 63}, {"referenceID": 4, "context": "Dawes [6] identified Unreal Tournament 2004 as a potential AI research test-bed.", "startOffset": 6, "endOffset": 9}, {"referenceID": 5, "context": "El Rhalib studied weapon selection in Quake III Arena [7].", "startOffset": 54, "endOffset": 57}, {"referenceID": 20, "context": "Smith devised a RETALIATE reinforcement learning algorithm for optimizing team tactics in Unreal Tournament [22].", "startOffset": 108, "endOffset": 112}, {"referenceID": 18, "context": "SARSA(\u03bb), another reinforcement learning method, was the subject of research in FPS games [20], [11].", "startOffset": 90, "endOffset": 94}, {"referenceID": 9, "context": "SARSA(\u03bb), another reinforcement learning method, was the subject of research in FPS games [20], [11].", "startOffset": 96, "endOffset": 100}, {"referenceID": 21, "context": "Recently, continuous and reinforcement learning techniques were applied to learn the behavior of tanks in the game BZFlag [23].", "startOffset": 122, "endOffset": 126}, {"referenceID": 24, "context": "Creating a 3D first-person perspective environment from scratch solely for research purposes would be wasteful [26].", "startOffset": 111, "endOffset": 115}, {"referenceID": 6, "context": "Unreal Tournament, however popular, is not as recognizable as Doom or Quake but it has been a primary research platform for FPS games [8], [25].", "startOffset": 134, "endOffset": 137}, {"referenceID": 23, "context": "Unreal Tournament, however popular, is not as recognizable as Doom or Quake but it has been a primary research platform for FPS games [8], [25].", "startOffset": 139, "endOffset": 143}, {"referenceID": 19, "context": "2) Deep Q-Learning: The learning procedure is similar to the Deep Q-Learning introduced for Atari 2600 [21].", "startOffset": 103, "endOffset": 107}, {"referenceID": 25, "context": "The problem is modeled as a Markov Decision Process and Qlearning [27] is used to learn the policy.", "startOffset": 66, "endOffset": 70}, {"referenceID": 19, "context": "We also used experience replay but no target network freezing (see [21]).", "startOffset": 67, "endOffset": 71}, {"referenceID": 11, "context": "Each convolution layer is followed by a max-pooling layer with max pooling of size 2 and rectified linear units for activation [13].", "startOffset": 127, "endOffset": 131}, {"referenceID": 17, "context": "Next, there is a fully-connected layer with 800 leaky rectified linear units [19] and an output layer with 8 linear units corresponding to the 8 combinations of the 3 available actions (left, right and shot).", "startOffset": 77, "endOffset": 81}, {"referenceID": 22, "context": "2) Experimental Setup: The learning procedure was the same as described in Section IV-A2 with the difference that for updating the weights RMSProp [24] this time.", "startOffset": 147, "endOffset": 151}], "year": 2017, "abstractText": "The recent advances in deep neural networks have led to effective vision-based reinforcement learning methods that have been employed to obtain human-level controllers in Atari 2600 games from pixel data. Atari 2600 games, however, do not resemble real-world tasks since they involve non-realistic 2D environments and the third-person perspective. Here, we propose a novel test-bed platform for reinforcement learning research from raw visual information which employs the firstperson perspective in a semi-realistic 3D world. The software, called ViZDoom, is based on the classical first-person shooter video game, Doom. It allows developing bots that play the game using the screen buffer. ViZDoom is lightweight, fast, and highly customizable via a convenient mechanism of user scenarios. In the experimental part, we test the environment by trying to learn bots for two scenarios: a basic move-and-shoot task and a more complex maze-navigation problem. Using convolutional deep neural networks with Q-learning and experience replay, for both scenarios, we were able to train competent bots, which exhibit human-like behaviors. The results confirm the utility of ViZDoom as an AI research platform and imply that visual reinforcement learning in 3D realistic first-person perspective environments is feasible.", "creator": "LaTeX with hyperref package"}}}