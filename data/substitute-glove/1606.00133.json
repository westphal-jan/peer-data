{"id": "1606.00133", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jun-2016", "title": "A Survey of Qualitative Spatial and Temporal Calculi -- Algebraic and Computational Properties", "abstract": "Qualitative Spatial and Temporal Reasoning (QSTR) fact nevertheless that symbolic explain entity, certain over infinite domains. The motive for employ QSTR approaches reaching while betraying agent-based developer take allow easier definitions well trying particular cognitive perspective in a diophantine framework. The ideology of right qualitative calculus is as thus the handful prominent QSTR formalisms. This article create instead first overview according all extrapolation declarative developed not exact and without computational instance, simultaneously both arises definitions result been fundamental fundamental however practical, which now encompass could specifically spline. Moreover, we applications that classification of ivig post set not manifolds present.", "histories": [["v1", "Wed, 1 Jun 2016 06:46:51 GMT  (1105kb,D)", "http://arxiv.org/abs/1606.00133v1", "Submitted to ACM Computing Surveys"]], "COMMENTS": "Submitted to ACM Computing Surveys", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["frank dylla", "jae hee lee", "till mossakowski", "thomas schneider", "r\\'e van delden", "jasper van de ven", "diedrich wolter"], "accepted": false, "id": "1606.00133"}, "pdf": {"name": "1606.00133.pdf", "metadata": {"source": "CRF", "title": "A A Survey of Qualitative Spatial and Temporal Calculi \u2014 Algebraic and Computational Properties", "authors": ["FRANK DYLLA", "JAE HEE LEE", "TILL MOSSAKOWSKI", "Frank Dylla", "Jae Hee Lee"], "emails": [], "sections": [{"heading": null, "text": "A"}, {"heading": "A Survey of Qualitative Spatial and Temporal Calculi \u2014 Algebraic and Computational Properties", "text": "FRANK DYLLA, University of Bremen JAE HEE LEE, University of Bremen TILL MOSSAKOWSKI, University of Magdeburg THOMAS SCHNEIDER, University of Bremen ANDR\u00c9 VAN DELDEN, University of Bremen JASPER VAN DE VEN, University of Bremen DIEDRICH WOLTER, University of Bamberg\nQualitative Spatial and Temporal Reasoning (QSTR) is concerned with symbolic knowledge representation, typically over infinite domains. The motivations for employing QSTR techniques range from exploiting computational properties that allow efficient reasoning to capture human cognitive concepts in a computational framework. The notion of a qualitative calculus is one of the most prominent QSTR formalisms. This article presents the first overview of all qualitative calculi developed to date and their computational properties, together with generalized definitions of the fundamental concepts and methods, which now encompass all existing calculi. Moreover, we provide a classification of calculi according to their algebraic properties.\nCategories and Subject Descriptors: I.2.4 [Artificial Intelligence]: Knowledge Representation Formalisms and Methods\nGeneral Terms: Theory, Algorithms\nAdditional Key Words and Phrases: Qualitative Spatial Reasoning, Temporal Reasoning, Knowledge Representation, Relation Algebra\nACM Reference Format: Frank Dylla, Jae Hee Lee, Till Mossakowski, Thomas Schneider, Andr\u00e9 van Delden, Jasper van de Ven and Diedrich Wolter. 2015. A Survey of Qualitative Spatial and Temporal Calculi \u2014 Algebraic and Computational Properties ACM Comput. Surv. V, N, Article A (January YYYY), 45 pages. DOI:http://dx.doi.org/10.1145/0000000.0000000"}, {"heading": "1. INTRODUCTION", "text": "Knowledge about our world is densely interwoven with spatial and temporal facts. Nearly every knowledge-based system comprises means for representation of, and possibly reasoning about, spatial or temporal knowledge. Among the different options available to a system designer, ranging from domain-level data structures to highly abstract logics, qualitative approaches stand out for their ability to mediate between\nThis work has been supported by the DFG-funded SFB/TR 8 \u201cSpatial Cognition\u201d, projects R3-[QShape] and R4-[LogoSpace]. Author names in alphabetic order. Author\u2019s addresses: Frank Dylla, Thomas Schneider, Andr\u00e9 van Delden, and Jasper van de Ven, Faculty of Computer Science, University of Bremen, Germany; Jae Hee Lee, Centre for Quantum Computation & Intelligent Systems, University of Technology Sydney, Australia; Till Mossakowski, Faculty of Computer Science, Otto-von-Guericke-University of Magdeburg, Germany; Diedrich Wolter, Faculty of Information Systems and Applied Computer Sciences, University of Bamberg, Germany. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies show this notice on the first page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701, New York, NY 10121-0701 USA, fax +1 (212) 869-0481, or permissions@acm.org. \u00a9 YYYY ACM 0360-0300/YYYY/01-ARTA $15.00 DOI:http://dx.doi.org/10.1145/0000000.0000000\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nar X\niv :1\n60 6.\n00 13\n3v 1\n[ cs\n.A I]\n1 J\nun 2\n01 6\nthe domain level and the conceptual level. Qualitative representations explicate relational knowledge between (spatial or temporal) domain entities, allowing individual statements to be evaluated by truth values. The aim of qualitative representations is to focus on the aspects that are essential for a task at hand by abstracting away from other, unimportant aspects. As a result, a wide range of representations has been applied, using various kinds of knowledge representation languages. The most fundamental principles for representing knowledge qualitatively that are at the heart of virtually every representation language are captured by a construct called qualitative spatial (or temporal) calculus. In the past decades, a great variety of qualitative calculi have been developed, each tailored to specific aspects of spatial or temporal knowledge. They share common principles but differ in formal and computational properties.\nThis article presents an up-to-date comprehensive overview of qualitative spatial and temporal reasoning (QSTR). We provide a general definition of QSTR (Section 2), give a uniform account of a calculus that is more integrative than existing ones (Section 3), identify and differentiate algebraic properties of calculi (Section 4), and discuss their role within other knowledge representation paradigms (Section 5) as well as alternative approaches (Section 6). Besides the survey character, the article provides a taxonomy of the most prominent reasoning problems, a survey of all existing calculi proposed so far (to the best of our knowledge), and the first comprehensive overview of their computational properties.\nThis article is accompanied by an electronic appendix that contains minor technical details such as mathematical proofs of some claims and detailed experimental results.\nDemarcation of Scope and Contribution This article addresses researchers and engineers working with knowledge about space or time and wishing to employ reasoning on a symbolic level. We supply a thorough overview of the wealth of qualitative spatial and temporal calculi available, many of which have emerged from concrete application scenarios, for example, geographical information systems (GIS) [Egenhofer 1991; Frank 1991]; see also the overview given in [Ligozat 2011]. Our survey focuses on the calculi themselves (Tables IV\u2013VI) and their computational and algebraic properties, i.e., characteristics relevant for reasoning and symbolic manipulation (Table VII, Figure 10). To this end, we also categorize reasoning tasks involving qualitative representations (Figure 2).\nWe exclusively consider qualitative formalisms for reasoning on the basis of finite sets of relations over an infinite spatial or temporal domain. As such, the mere use of symbolic labels is not surveyed. We also disregard approaches augmenting qualitative formalisms with an additional interpretation such as fuzzy sets or probability theory.\nThis article significantly advances from previous publications with a survey character in several regards. Ligozat [2011] describes in the course of the book \u201cthe main\u201d qualitative calculi, describes their relations, complexity issues and selected techniques. Although an algebraic perspective is taken as well, we integrate this in a more general context. Additionally to mentioning general axioms in context of relation algebras we present a thorough investigation of calculi regarding these axioms. He also gives references to applications that employ QSTR techniques in a broad sense. Our survey supplements precise definitions of the underlying formal aspects, which will then be general enough to encompass all existing calculi that we are aware of. Chen et al. [2013] summarize the progress in QSTR by presenting selected key calculi for important spatial aspects. They give a brief introduction to basic properties of calculi, but neither detail formal properties nor picture the entire variety of formalisms achieved so far as provided by this article. Algebra-based methods for reasoning with qualitative constraint calculi have been covered by Renz and Nebel [2007]. Their description applies to calculi that satisfy rather strong properties, which we relax. We present revised\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\ndefinitions and an algebraic closure algorithm that generalizes to all existing calculi, and, to the best of our knowledge, we give the first comprehensive overview on computational properties. Cohn and Renz [2008] present an introduction to the field which extends the earlier article of Cohn and Hazarika [2001] by a more detailed discussion of logic theories for mereotopology and by presenting efficient reasoning algorithms."}, {"heading": "2. WHAT IS QUALITATIVE SPATIAL AND TEMPORAL REASONING", "text": "We characterize QSTR by considering the reasoning problems it is concerned with. Generally speaking, reasoning is a process to generate new knowledge from existing one. Knowledge primarily refers to facts given explicitly, possibly implicating implicit ones. Sound reasoning is involved with explicating the implicit, allowing it to be processed further. Thus sound reasoning is crucial for many applications. In QSTR it is a key characteristic and the applied reasoning methods are largely shaped by the specifics of qualitative knowledge about spatial and temporal domains as provided within the qualitative domain representation."}, {"heading": "2.1. A General Definition of QSTR", "text": "Qualitative domain representations employ symbols to represent semantically meaningful properties of a perceived domain, abstracting away any details not regarded relevant to the context at hand. The perceived domain comprises the available raw information about objects. By qualitative abstraction, the perceived domain is mapped to the qualitative domain representation, called domain representation from now on. Various aims motivate research on qualitative abstractions, most importantly the desire to develop formal models of common sense relying on coarse concepts [Williams and de Kleer 1991; Bredeweg and Struss 2004] and to capture the catalog of concepts and inference patterns in human cognition [Kuipers 1978; Knauff et al. 2004], which in combination enables intuitive approaches to designing intelligent systems [Davis 1990] or human-centered computing [Frank 1992]. Within QSTR it is required that qualitative abstraction yields a finite set of elementary concepts. The following definition aims to encompass all contexts in which QSTR is studied in the literature.\nDefinition 2.1. Qualitative spatial and temporal representation and reasoning (QSTR) is the study of techniques for representing and manipulating spatial and temporal knowledge by means of relational languages that use a finite set of symbols. These symbols stand for classes of semantically meaningful properties of the represented domain (positions, directions, etc.).\nSpatial and temporal domains are typically infinite and exhibit complex structures. Due to their richness and diversity, QSTR is confronted with unique theoretic and computational challenges. Consequently, there is a high variety of domain representations, each focusing on specific aspects relevant to specific tasks. In infinite domains, concepts that are meaningful to a wide range of settings are typically relative since there are no universally \u2018important\u2019 values. As a consequence, QSTR is involved with relations, using a relational language to formulate domain representations. It turns out that binary relations can capture most relevant facets of space and time \u2013 this class also received most attention by the research community. Expressive power is purely based on these pre-defined relations, no conjuncts or quantifiers are considered. Thus the associated reasoning methods can be regarded as variants of constraint-based reasoning. Additionally, constraint-based reasoning techniques can be used to empower other methods, for example to assess the similarity of represented entities or logic inference.\nFinally, to map a domain representation to the perceived domain a realization process is applied. This process instantiates entities in the perceived domain that are based on entities provided in the domain representation.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nFigure 1 depicts the overall view on knowledge representation and aligns with the well-known view on intelligent agents considered in AI, which connects the environment to the agent and its internal representation by means of perception (which is an abstraction process as well) and, vice versa, by actions (see, e.g., [Russell and Norvig 2009, Chapter 2])."}, {"heading": "2.2. Taxonomy of Constraint-Based Reasoning Tasks", "text": "Figure 2 depicts an overview of constraint-based reasoning tasks in the context of QSTR. We now briefly describe these tasks and highlight some associated literature. The description is deliberately provided at an abstract level: each task may come in different flavors, depending on specific (application) contexts. Also, applicability of specific algorithms largely depends on the qualitative representation at hand. The following taxonomy is loosely based on the overview by Wallgr\u00fcn et al. [2013].\nIn the following, we refer to the set of objects received from the perceived domain by applying qualitative abstraction as domain entities. These are for example geometric entities such as points, lines, or polygons. In general domain entities can be of any type regarding spatial or temporal aspects.\nWe further use the notion of a qualitative constraint network (QCN), which is a special form of abstract representation. Commonly, a QCN Q is depicted as a directed labeled graph, with nodes representing abstract domain entities, i.e., with no specific values from the domain assigned, and edges being labeled with constraints: symbols representing relationships that have to hold between these entities, e.g., see Figure 3(b). An assignment of concrete domain entities to the nodes in Q is called a solution of Q if the assigned entities satisfy all constraints in Q. Section 3.2 contains precise definitions.\nConstraint network generation. This task determines relational statements that describe given domain entities regarding specific aspects, using a predetermined qualitative language fulfilling certain properties, i.e., in our case provided by a qualitative spatial calculus. For instance, Figure 3(b) could be the constraint network derived from the scene shown in Figure 3(a). Techniques are given, e.g., by Cohn et al. [1997], Worboys and Duckham [2004], Forbus et al. [2004], and Dylla and Wallgr\u00fcn [2007].\nConsistency checking. This decision problem is considered the fundamental QSTR task [Renz and Nebel 2007]: given an input QCN Q, decide whether a solution exists. Applicable algorithms depend on the kind of constraints that occur in Q and are addressed in Sections 3.2 and 3.4.\nModel generation. This task determines a solution for a QCN Q, i.e., a concrete assignment of a domain entity for each node in Q. This may be computationally harder than merely deciding the existence of a solution. For instance, Fig. 3(a) could be the result of the model generation for the QCN shown in Fig. 3(c). Typically, a single QCN has infinitely many solutions, due to the abstract nature of qualitative representations. Implementations of model generation may thus choose to introduce further parameters for controlling the kind of solution determined. Techniques are described, e.g., in [Schultz and Bhatt 2012; Kreutzmann and Wolter 2014; Schockaert and Li 2015].\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nEquivalence transformation. Taking a QCN Q as input, equivalence transformation methods determine a QCN Q\u2032 that has exactly the same solutions but meets additional criteria. Two variants are commonly considered.\nSmallest equivalent network representation determines the strongest refinement of the input Q by modifying its constraints in order to remove redundant information. Figure 3(b) depicts a refinement of Figure 3(c) since in 3(c) the relation between A and C is not constrained at all (i.e., being \u201c<,=, >\u201d), whereas 3(b) involves the tighter constraint \u201c<\u201d. Thus, the QCN Q in 3(c) contains 5 base relations, whereas the QCN Q\u2032 in 3(b) contains only 3. Methods are addressed, e.g., by van Beek [1991], and Amaneddine and Condotta [2013].\nMost compact equivalent network representation determines a QCN Q\u2032 with a minimal number of constraints: it removes whole constraints that are redundant. In that sense, Figure 3(c) shows a more compact network than Figure 3(b). This task is addressed, e.g., by Wallgr\u00fcn [2012], and Duckham et al. [2014].\nWith this taxonomy in mind, the next section studies properties of qualitative representations and their reasoning operations."}, {"heading": "3. QUALITATIVE SPATIAL AND TEMPORAL CALCULI FOR DOMAIN REPRESENTATIONS", "text": "The notion of a qualitative spatial (or temporal) calculus is a formal construct which, in one form or another, underlies virtually every language for qualitative domain representations. In this section, we survey this fundamental construct, formulate minimal requirements to a qualitative calculus, discuss their relevance to spatial and temporal representation and reasoning, and list calculi described in the literature. As mentioned in Section 2.2 domain entities can be of any type representing spatial or temporal aspects. As specific domain entities are rather impedimental to define a general notion\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nof \u2019calculus\u2019 we omit a list of entities here. Instead we refer to Table IV listing entities which are covered by existing calculi so far.\nExisting spatial and temporal calculi are entirely based on binary or ternary relations between spatial and temporal entities, which comprise, for example, points, lines, intervals, or regions. Binary relations are used to represent the location or moving direction of two entities relative to one another without referring to a third entity as a reference object. Examples of relations are \u201coverlaps with\u201d (for intervals or regions) or \u201cmove towards each other\u201d (for dynamic objects). Additionally, a binary calculus is equipped with a converse operation acting on single relation symbols and a binary composition operation acting on pairs of relation symbols, representing the natural converse and composition operations on the domain relations, respectively. Converse and composition play a crucial role for symbolic reasoning: from the knowledge that the pair (x, y) of entities is in relation r, a symbolic reasoner can conclude that (y, x) is in the converse of r; and if it is additionally known that the pair (y, z) is in s, then the reasoner can conclude that (x, z) is in the relation resulting in composing r and s. In addition, most calculi provide an identity relation which allows to represent the (explicit or derived) knowledge that, for example, x and y represent the same entity.\nExample 3.1. The one-dimensional point calculus PC1 [Vilain and Kautz 1986] symbolically represents the relations <,=, > between points on a line (which may model points in time), see Figure 4 (a). These three relations are called base relations in Def. 3.4; PC1 additionally represents all their unions and intersections: the empty relation and 6,>, 6=,S. The calculus provides the relation symbols <, =, and >; sets of symbols represent unions of base relations, e.g., {<, =} represents 6. The symbol = represents the identity = .\nPC1 further provides converse and composition. For example, the converse of < is >: whenever x < y, it follows that y > x; the composition of < with itself is again <: whenever x < y and y < z, we have x < z. PC1 represents the converse as a list of size 3 (the converses of all relation symbols) and the composition as a table of size 3 \u00d7 3 (one composition result for each pair of relation symbols). \u2022\nExample 3.2. The calculus RCC-5 [Randell et al. 1992] symbolically represents five binary topological relations between regions in space (which may model objects): \u201cis discrete from\u201d, \u201cpartially overlaps with\u201d, \u201cequals\u201d, \u201cis proper part of\u201d, and \u201chas proper\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\npart\u201d, plus their unions and intersections, see Figure 4 (b). For this purpose, RCC-5 provides the relation symbols DC, PO, EQ, PP, and PPi. The latter two are each other\u2019s converses; the first three are their own converses. The composition of DC and PO is {DC, PO, PP} because, whenever region x is disconnected from y and y partially overlaps with z, there are three possible configurations between x and z: those represented by DC, PO, PP. \u2022\nExample 3.3. The calculus CYCb [Isli and Cohn 2000] symbolically represents four binary topological relations between orientations of points in the plane (which may model observers and their lines of vision): \u201cequals\u201d, \u201cis opposite to\u201d, and \u201cis to the left/right of\u201d, plus their unions and intersections, see Figure 4 (c). For this purpose, CYCb provides the relation symbols e, o, l, and r. The latter two are each other\u2019s converses; e and o are their own converses. The composition of l and r is {e, l, r}: whenever orientation x is to the left of y and y is to the left of z, then x can be equal to, to the left of, or to the right of z. \u2022 Depending on the properties postulated for converse and composition, notions of a calculus of varying strengths exist [Nebel and Scivos 2002; Ligozat and Renz 2004]. The algebraic properties of binary calculi are well-understood, see Section 4.\nThe main motivation for using ternary relations is the requirement of directly capturing relative frames of reference which occur in natural language semantics [Levinson 2003]. In these frames of reference, the location of a target object is described from the perspective of an observer with respect to a reference object. For example, a hiker may describe a mountain peak to be to the left of a lake with respect to her own point of view. Another important motivation is the ability to express that an object is located between two others. Thus, ternary calculi typically contain projective relations for describing relative orientation and/or betweenness. The commitment to ternary (or n-ary) relations complicates matters significantly: instead of a single converse operation, there are now five (or n! \u2212 1) nontrivial permutation operations, and there is no longer a unique choice for a natural composition operation. For capturing the algebraic structure of n-ary relations, Condotta et al. [2006] proposed an algebra but there are other arguably natural choices, and they lead to different algebraic properties, as shown in Section 4. These difficulties may be the main reason why algebraic properties of ternary calculi are not as deeply studied as for binary calculi. Fortunately, this will not prevent us from establishing our general notion of a qualitative spatial (or temporal) calculus with relation symbols of arbitrary arity. However, we will then restrict our algebraic study to binary calculi; a unifying algebraic framework for n-ary calculi has yet to be established."}, {"heading": "3.1. Requirements to Qualitative Spatial and Temporal Calculi", "text": "We start with minimal requirements used in the literature. We use the following standard notation. A universe is a non-empty set U . With Xn we denote the set of all ntuples with elements from X. An n-ary domain relation is a subset r \u2286 Un. We use the prefix notation r(x1, . . . , xn) to express (x1, . . . , xn) \u2208 r; in the binary case we will often use the infix notation x r y instead of r(x, y).\nAbstract partition schemes. Ligozat and Renz [2004] note that most spatial and temporal calculi are based on a set of JEPD (jointly exhaustive and pairwise disjoint) domain relations. The following definition is predominant in the QSTR literature [Ligozat and Renz 2004; Cohn and Renz 2008].\nDefinition 3.4. Let U be a universe and R a set of non-empty domain relations of the same arity n. R is called a set of JEPD relations over U if the relations in R are jointly exhaustive, i.e., Un = \u22c3 r\u2208R r, and pairwise disjoint.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nAn n-ary abstract partition scheme is a pair (U ,R) whereR is a set of JEPD relations over the universe U . The relations in R are called base relations.\nExample 3.5. The calculus PC1 is based on the binary abstract partition scheme S(PC1) := (R, {<,=, >}) where R is the set of reals and {<,=, >} is clearly JEPD. For RCC-5, the universe is often chosen to be the set of all regular closed subsets of the 2- or 3-dimensional space R2 or R3. The five base relations from Figure 4 (b) are JEPD. For CYCb, the universe is the set of all oriented line segments in the plane R2, given by angles between 0\u00b0 and 360\u00b0. The four base relations from Figure 4 (c) are JEPD. \u2022\nIn Definition 3.4, the universe U represents the set of all spatial (or temporal) entities. The main ingredients of a calculus will be relation symbols representing the base relations in the underlying partition scheme. A constraint linking an n-tuple t of entities via a relation symbol will thus represent complete information (modulo the qualitative abstraction underlying the partition scheme) about t. Incomplete information is modeled by t being in a composite relation, which is a set of relation symbols representing the union of the corresponding base relations. The set of all relation symbols represents the universal relation (the union of all base relations) and indicates that no information is available.\nExample 3.6. In PC1, \u201cx < y\u201d represents the relationship a < b, which holds complete information because < is atomic in S(PC1). The statement \u201cx {<, =} y\u201d represents the coarser relationship a 6 b holding the incomplete information \u201ca < b or a = b\u201d. Clearly \u201cx {<, =, >} y\u201d holds no information: \u201ca < b or a = b or a > b\u201d is always true. \u2022\nThe requirement that all base relations are JEPD ensures that every n-tuple of entities belongs to exactly one base relation. Thanks to PD (pairwise disjointness), there is a unique way to represent any composite relation using relation symbols and, due to JE (joint exhaustiveness), the empty relation can never occur in a consistent set of constraints, which is relevant for reasoning, see Section 3.2.\nExample 3.7. Consider the modification PC\u20321 based on the non-PD set {6,>}. Then the relationship a = b can be expressed in two ways using relation symbols <= and >= representing 6 and >: \u201cx <= y\u201d and \u201cx >= y\u201d.\nConversely, consider the variant PC\u2032\u20321 based on the non-JE set {<,>}. Then the constraint a = b cannot be expressed. Therefore, in any given set of constraints where it is known that x, y stand for identical entities, we would find the empty relation between x, y. The standard reasoning procedure described in Section 3.2 would declare such sets of constraints to be inconsistent, although they are not \u2013 we have simply not been able to express x = y. \u2022\nPartition schemes, identity, and converse. Ligozat and Renz [2004] base their definition of a (binary) qualitative calculus on the notion of a partition scheme, which imposes additional requirements on an abstract partition scheme. In particular, it requires that the set of base relations contains the identity relation and is closed under the converse operation. The analogous definition by Condotta et al. [2006] captures relations of arbitrary arity. Before we define the notion of a partition scheme, we discuss the generalization of identity and converse to the n-ary case.\nThe binary identity relation is given as usual by\nid2 = {(u, u) | u \u2208 U}. (1)\nExample 3.8. Clearly, = in S(PC1) and \u201cequals\u201d in S(RCC-5) and S(CYCb) are the identity relation over the respective domain. \u2022\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nThe most inclusive way to generalize (1) to the n-ary case is to fix a setM of numbers of all positions where tuples in idn are required to agree. Thus, an n-ary identity relation is a domain relation idnM with M \u2286 {1, . . . , n} and |M | > 2, which is defined by\nidnM = {(u1, . . . , un) \u2208 Un | ui = uj for all i, j \u2208M}.\nThis definition subsumes the \u201cdiagonal elements\u201d \u2206ij of Condotta et al. [2006] for the case |M | = 2. However, it is not enough to restrict attention to |M | = 2 because there are ternary calculi which contain all identities id31,2, id 3 1,3, id 3 2,3, and id 3 1,2,3, an example being the LR calculus, which was described as \u201cthe finest of its class\u201d [Scivos and Nebel 2005]. Since the relations in an n-ary abstract partition scheme are JEPD, all identities idnM are either base relations or subsumed by those. The stronger notion of a partition scheme should thus require that all identities be made explicit.\nFor binary relations, id2 from (1) is the unique identity relation id2{1,2}.\nThe standard definition for the converse operation \u02d8 on binary relations is\nr\u0306 = {(v, u) | (u, v) \u2208 r}. (2)\nExample 3.9. In S(PC1) we have that <\u02d8 is >; =\u02d8 is =; >\u02d8 is <. The converses of the base relations in S(RCC-5) and S(CYCb) were named in Examples 3.2 and 3.3. \u2022\nIn order to generalize the reversal of the pairs (u, v) in (2) to n-ary tuples, we consider arbitrary permutations of n-tuples. An n-ary permutation is a bijection \u03c0 : {1, . . . , n} \u2192 {1, . . . , n}. We use the notation \u03c0 : (1, . . . , n) 7\u2192 (i1, . . . , in) as an abbreviation for \u201c\u03c0(1) = i1, . . . , \u03c0(n) = in\u201d. The identity permutation \u03b9 : (1, . . . , n) 7\u2192 (1, . . . , n) is called trivial; all other permutations are nontrivial.\nA finite set P of n-ary permutations is called generating if each n-ary permutation is a composition of permutations from P . For example, the following two permutations form a (minimal) generating set:\nsc : (1, . . . , n) 7\u2192 (2, . . . , n, 1) (shortcut) hm : (1, . . . , n) 7\u2192 (1, . . . , n\u2212 2, n, n\u2212 1) (homing)\nThe names have been introduced in Freksa and Zimmermann [1992] for ternary permutations, together with a name for a third distinguished permutation:\ninv : (1, . . . , n) 7\u2192 (2, 1, 3 . . . , n) (inversion)\nCondotta et al. [2006] call shortcut \u201crotation\u201d (ry) and homing \u201cpermutation\u201d (r#).\nExample 3.10. In Figure 5 we depict the permutations sc (rotation), hm (permutation), and inv for one relation from the ternary Double Cross Calculus (2-cross) [Freksa and Zimmermann 1992]. The 2-cross relations specify the location of a point P3 relative to an oriented line segment given by two points P1, P2. Figure 5 a shows the relation right-front. The relations resulting from applying the permutations are depicted in Figure 5 b; e.g., sc(right-front) = right-back because the latter is P1\u2019s position relative to the line segment \u2212\u2212\u2212\u2192 P2P3. Figure 5 c will be relevant later.\nFor n = 2, sc, hm and inv coincide; indeed, there is a unique minimal generating set, which consists of the single permutation \u02d8 : (1, 2) 7\u2192 (2, 1). For n > 3, there are several generating sets, e.g., {sc,hm} and {inv,hm}.\nNow an n-ary permutation operation is a map \u00b7\u03c0 that assigns to each n-ary domain relation r an n-ary domain relation denoted by r\u03c0, where \u03c0 is an n-ary permutation and the following holds: r\u03c0 = {(u\u03c0(1), . . . , u\u03c0(n)) | (u1, . . . , un) \u2208 r}\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nWe are now ready to give our definition of a partition scheme, lifting Ligozat and Renz\u2019s binary version to the n-ary case, and generalizing Condotta et al.\u2019s n-ary version to arbitrary generating sets.\nDefinition 3.11. An n-ary partition scheme (U ,R) is an n-ary abstract partition scheme with the following two additional properties.\n(1) R contains all identity relations idnM , M \u2286 {1, . . . , n}, |M | > 2. (2) There is a generating set P of permutations such that, for every r \u2208 R and every\n\u03c0 \u2208 P , there is some s \u2208 R with r\u03c0 = s.\nIn the special case of binary relations, we have the following.\nOBSERVATION 3.12. A binary partition scheme (U ,R) is a binary abstract partition scheme with the following two additional properties.\n(1) R contains the identity relation id2. (2) For every r \u2208 R, there is some s \u2208 R such that r\u0306 = s.\nExample 3.13. It follows that S(PC1), S(RCC-5), and S(CYCb) are even partition schemes. In contrast, the abstract partition scheme (R, {6, >}) is not a partition scheme: it violates both conditions of Observation 3.12 (and thus of Definition 3.11). \u2022\nExample 3.14. As an example of an intuitive and useful abstract partition scheme that is not a partition scheme, consider the calculus Cardinal Direction Relations (CDR) [Skiadopoulos and Koubarakis 2005]. CDR describes the placement of regions in a 2D space (e.g., countries on the globe) relative to each other, and with respect to a fixed coordinate system. The axes of the bounding box of the reference region y divide the space into nine tiles, see Fig. 6 (a). The binary relations in S(CDR) now determine which tiles relative to y are occupied by a primary region x: e.g., in Fig. 6 (b), tiles N, W, and B of y are occupied by x; hence we have x N:W:B y. Simple combinatorics yields 29 \u2212 1 = 511 base relations.\nNow S(CDR) is not a partition scheme because it violates Condition 2 of Observation 3.12 (and thus of Definition 3.11): e.g., the converse of the base relation S (south) is not a base relation. To justify this claim, assume the contrary. Take two specific regions x, y with x S y, namely two unit squares, where y is exactly above x. Then we also have y N x; therefore the converse of S is N. Now stretch the width of x by any factor > 1. Then we still have y N x, but no longer x S y. Hence the converse of S cannot comprise all of N, which contradicts the assumption that the converse of S is a base relation.\nThe related calculus RCD [Navarrete et al. 2013] abstracts away from the concrete shape of regions and replaces them with their bounding boxes, see Fig. 6 (c). S(RCD) is not a partition scheme, with the same argument from above. \u2022\nIt is important to note that violations of Definition 3.11 such as those reported in Example 3.14 are not necessarily bugs in the design of the respective calculi \u2013 in fact they\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nare often a feature of the corresponding representation language, which is deliberately designed to be just as fine as necessary, and may thus omit some identity relations or converses/compositions of base relations. To turn, say, CDR into a partition scheme, one would have to break down the 511 base relations into smaller ones, resulting in even more, less cognitively plausible ones. Thus violations of Definition 3.11 are unavoidable, and we adopt the more general notion of an abstract partition scheme.\nCalculi. Intuitively, a qualitative spatial (or temporal) calculus is a symbolic representation of an abstract partition scheme and additionally represents the composition operation on the relations involved. As before, we need to discuss the generalization of binary composition to the n-ary case before we can define it precisely.\nFor binary domain relations, the standard definition of composition is:\nr \u25e6 s = {(u,w) | \u2203v \u2208 U : (u, v) \u2208 r and (v, w) \u2208 s} (3) Example 3.15. In S(PC1) we have, e.g., that < \u25e6< equals < because a < b and b < c imply a < c. Furthermore, < \u25e6 > yields the universal relation, i.e., the union of <, =, and >, because \u201ca < b and b > c\u201d is consistent with each of a < c, a = c, and a > c. \u2022 We are aware of three ways to generalize (3) to higher arities. The first is a binary operation on the ternary relations of the calculus 2-cross [Freksa 1992b; Freksa and Zimmermann 1992], see also Fig. 5:\nr \u25e63FZ s = {(u, v, w) | \u2203x : (u, v, x) \u2208 r and (v, x, w) \u2208 s} It says: if the location of x relative to u and v is determined by r and the location of w relative to v and x is determined by s, then the location of w relative to u and v is determined by r\u25e63FZs. Fig. 5 c shows the composition of the 2-cross relation right-front with itself; i.e., right-front\u25e63FZright-front. The red area indicates the possible locations of the point P4; hence the resulting relation is {right-front, right-middle, right-back}. A generalization to other calculi and arities n > 3 is obvious.\nA second alternative results in n(n \u2212 1) binary operations i\u25e6nj [Isli and Cohn 2000; Scivos and Nebel 2005]: the composition of r and s consists of those n-tuples that belong to r (respectively, s) if the i-th (respectively, j-th) component is replaced by some uniform element v.\nr i\u25e6nj s = {(u1, . . . , un) | \u2203v : (u1, . . . , ui\u22121, v, ui+1, . . . , un) \u2208 r and (u1, . . . , uj\u22121, v, uj+1, . . . , un) \u2208 s }\nIn the ternary case, this yields, for example:\nr 3\u25e632 s = {(u, v, w) | \u2203x : (u, v, x) \u2208 r and (u, x, w) \u2208 s} (4) If we assume, for example, that the underlying partition scheme speaks about the relative position of points, we can consider (4) to say: if the position of x relative to u and v is determined by the relation r (as given by (u, v, x) \u2208 r) and the position of w\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nrelative to u and x is determined by the relation s (as given by (u, x, w) \u2208 s), then the position of w relative to u and v can be inferred to be determined by r 3\u25e632 s.\nThe third is perhaps the most general, resulting in an n-ary operation [Condotta et al. 2006]: \u25e6(r1, . . . , rn) consists of those n-tuples which, for every i = 1, . . . , n, belong to the relation ri whenever their i-th component is replaced by some uniform v.\n\u25e6(r1, . . . , rn) = {(u1, . . . , un) | \u2203v \u2208 U : (u1, . . . , un\u22121, v) \u2208 r1 and (u1, . . . , un\u22122, v, un) \u2208 r2 and . . . and (v, u2, . . . , un) \u2208 rn} (5)\nAs an example, consider again n = 3 and 2-cross. Equation (5) says that the composition result of the relations right-front, right-front, and left-back is the set of all triples (u1, u2, u3) such that there is an element v with (u1, u2, v) \u2208 right-front, (u1, v, u3) \u2208 right-front, and (v, u2, u3) \u2208 right-back. That set is exactly the relation right-front, which can be seen drawing pictures similar to Fig. 5.\nFor binary domain relations, all these alternative approaches collapse to (3). In the light of the diverse views on composition, we define a composition operation on n-ary domain relations to be an operation of arity 2 6 m 6 n on n-ary domain relations, without imposing additional requirements. Those are not necessary for the following definitions, which are independent of the particular choice of composition.\nWe now define our minimal notion of a spatial calculus, which provides a set of symbols for the relations in an abstract partition scheme (Rel), and for some choice of nontrivial permutation operations (\u0306 1, . . . ,\u02d8k) and some composition operation ( ).\nDefinition 3.16. An n-ary qualitative calculus is a tuple (Rel, Int,\u02d81, . . . ,\u02d8k, ) with k > 1 and the following properties. \u2014 Rel is a finite, non-empty set of n-ary relation symbols (denoted r, s, t, . . . ). The sub-\nsets of Rel, including singletons, are called composite relations (denoted R,S, T, . . . ). \u2014 Int = (U , \u03d5, \u00b7\u03c01 , . . . , \u00b7\u03c0k , \u25e6) is an interpretation with the following properties.\n\u2014 U is a universe. \u2014 \u03d5 : Rel \u2192 2Un is an injective map assigning an n-ary relation over U to each re-\nlation symbol, such that (U , {\u03d5(r) | r \u2208 Rel}) is an abstract partition scheme. The map \u03d5 is extended to composite relations R \u2286 Rel by setting \u03d5(R) = \u22c3 r\u2208R \u03d5(r).\n\u2014 {\u00b7\u03c01 , . . . , \u00b7\u03c0k} is a set of n-ary nontrivial permutation operations. \u2014 \u25e6 is a composition operation on n-ary domain relations that has arity 2 6 m 6 n.\n\u2014 Every permutation operation \u02d8i is a map \u02d8i : Rel\u2192 2Rel that satisfies\n\u03d5(r\u0306 i) \u2287 \u03d5(r)\u03c0i (6)\nfor every r \u2208 Rel. The operation \u02d8i is extended to composite relations R \u2286 Rel by setting R\u02d8i = \u22c3 r\u2208R r\u0306\ni. \u2014 The composition operation is a map : Relm \u2192 2Rel that satisfies\n\u03d5( (r1, . . . , rm)) \u2287 \u25e6(\u03d5(r1), . . . , \u03d5(rm)) (7) for all r1, . . . , rm \u2208 Rel. The operation is extended to composite relations R1, . . . , Rm \u2286 Rel by setting (R1, . . . , Rm) = \u22c3 r1\u2208R1 \u00b7 \u00b7 \u00b7 \u22c3 rm\u2208Rm (r1, . . . , rm).\nIn the special case of binary relations, the natural converse is the only non-trivial permutation operation. Hence k = 1 and we have the following.\nOBSERVATION 3.17. A binary qualitative calculus is a tuple (Rel, Int, ,\u0306 ) with the following properties.\n\u2014 Rel is as in Definition 3.16.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\n\u2014 Int = (U , \u03d5, \u03c0, \u25e6) is an interpretation with the following properties. \u2014 U is a universe. \u2014 \u03d5 : Rel\u2192 2U\u00d7U is an injective map as in Definition 3.16. \u2014 \u03c0 is the standard converse operation on binary domain relations from (2). \u2014 \u25e6 is the standard composition operation on binary domain relations from (3). \u2014 The converse operation \u02d8 is a map \u02d8 : Rel\u2192 2Rel that satisfies \u2200r \u2208 Rel : \u03d5(r\u0306 ) \u2287 \u03d5(r)\u03c0 .\n\u2014 The composition operation is a map : Rel\u00d7 Rel\u2192 2Rel that satisfies \u2200r, s \u2208 Rel : \u03d5( (r, s)) \u2287 \u25e6(\u03d5(r), \u03d5(s)) .\nDue to the last sentence of Definition 3.16, the composition operation of a calculus is uniquely determined by the composition of each pair of relation symbols. This information is usually stored in an m-dimensional table, the composition table.\nExample 3.18. We can now observe that PC1 is indeed a binary calculus with the following components.\n\u2014 The set of relation symbols is Rel = {<, =, >}, denoting the relations depicted in Figure 4 a. The 23 = 8 composite relations include, for example, R1 = {<, =} and R2 = {<, =, >}. \u2014 There are several possible interpretations, depending largely on the chosen universe. One of the most natural choices leads to the interpretation Int = {U , \u03d5, \u03c0, \u25e6} with the following components. \u2014 The universe U is the set of reals. \u2014 The map \u03d5 maps <, =, and > to <, =, and >, respectively; see Figure 4 a. Its\nextension to composite relations maps, for example, R1 from above to > and R2 to the universal relation. \u2014 The operations \u03c0 and \u25e6 are the standard binary converse and composition operations from (2) and (3). \u2014 The converse operation \u02d8 is given by Table I a. For its extension to composite relations, we have, e.g., R1\u0306 = {>, =} and R2\u0306 = R2.\n\u2014 The composition operation is given by a 3\u00d73 table where each cell represents r s, see Table I b. For its extension to composite relations, we have, for example:\nR1 R2 = {<, =} {<, =, >} = {<} {<} \u222a {<} {=} \u222a . . . \u222a {=} {>} = {<} \u222a {<} \u222a \u00b7 \u00b7 \u00b7 \u222a {>} = R2\n\u2022\nExample 3.19. RCC-5 too is a binary calculus, with the following components.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\n\u2014 The set of relation symbols is Rel = {EQ, DC, PO, PP, PPi}, denoting the relations depicted in Figure 4 b. The 25 = 32 composite relations include, for example, R1 = {DC, PO, PP, PPi} (\u201cboth regions are distinct\u201d) and R2 = {PP, PPi} (\u201cone region is a proper part of the other\u201d). \u2014 Similarly to PC1, there are several possible interpretations, a natural choice being Int = {U , \u03d5, \u03c0, \u25e6} with the following components. \u2014 The universe U is the set of all regular closed subsets of R2. \u2014 The map \u03d5 maps, for example, DC to all pairs of regions that are disconnected\nor externally connected. Figure 4 b illustrates \u03d5(r) for all relation symbols r = EQ, DC, PO, PP, PPi. \u2014 The operations \u03c0 and \u25e6 are the standard binary converse and composition operations from (2) and (3).\n\u2014 The converse operation \u02d8 is given by Table II a. we have, e.g., R2\u0306 = R2.\n\u2014 The composition operation is given by a 5\u00d75 table where each cell represents r s, see Table II b. For its extension to composite relations, we have, for example:\n{PP, PPi} {DC} = {PP} {DC} \u222a {PPi} {DC} = {DC} \u222a {DC, PO, PPi} = {DC, PO, PPi}\n\u2022\nExample 3.20. CYCb too is a binary calculus, with the following components.\n\u2014 The set of relation symbols is Rel = {e, o, l, r}, denoting the relations depicted in Figure 4 c. The 24 = 16 composite relations include, for example, R1 = {e, l} (\u201cthe orientation y is to the left of, or equal to, x\u201d) and R2 = {e, o} (\u201cboth orientations are equal or opposite to each other\u201d). \u2014 The standard interpretation for CYCb is Int = {U , \u03d5, \u03c0, \u25e6} with the following components. \u2014 The universe U is the set of all 2D-orientations, which can equivalently be viewed\nas either the set of radii of a given fixed circle C, or the set of points on the periphery of C, or the set of directed lines through a given fixed point (the origin of C).\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\n\u2014 The map \u03d5maps, for example, l to all pairs (x, y) of directed lines where the angle \u03b1 from x to y, in counterclockwise fashion, satisfies 0\u25e6 < \u03b1 < 180\u25e6. Analogously o is mapped to those pairs where that angle is exactly 180\u25e6. Figure 4 c illustrates \u03d5(r) for all relation symbols r = e, o, l, r. \u2014 The operations \u03c0 and \u25e6 are the standard binary converse and composition operations from (2) and (3). \u2014 The converse operation \u02d8 is given by Table III a. For its extension to composite relations, we have, e.g., R1\u0306 = {e, l}.\n\u2014 The composition operation is given by a 4\u00d74 table where each cell represents r s, see Table III b. For its extension to composite relations, we have, for example:\nR1 R1 = {e, l} {e, l} = {e} {e} \u222a {e} {l} \u222a {l} {e} \u222a {l} {l} = {e} \u222a {l} \u222a {l} \u222a {e, l, r} = {e, l, r}\n\u2022\nAbstract versus weak and strong operations. We call permutation and composition operations with Properties (6) and (7) abstract permutation and abstract composition, following Ligozat\u2019s naming in the binary case [Ligozat 2005]. For reasons explained further below, our notion of a qualitative calculus imposes weaker requirements on the permutation operation than Ligozat and Renz\u2019s notions of a weak (binary) representation [Ligozat 2005; Ligozat and Renz 2004] or the notion of a (binary) constraint algebra [Nebel and Scivos 2002]. The following definition specifies those stronger variants, see, e.g., Ligozat and Renz [2004].\nDefinition 3.21. Let (Rel, Int,\u02d81, . . . ,\u02d8k, ) be a qualitative calculus based on the interpretation Int = (U , \u03d5, \u00b7\u03c01 , . . . , \u00b7\u03c0k , \u25e6). The permutation operation \u02d8i is a weak permutation if, for all r \u2208 Rel:\nr\u0306 i = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(r)\u03c0i} (8)\nThe permutation operation \u02d8i is a strong permutation if, for all r \u2208 Rel: \u03d5(r\u0306 i) = \u03d5(r)\u03c0i (9)\nThe composition operation is a weak composition if, for all r1, . . . , rm \u2208 Rel: (r1, . . . , rm) = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u25e6(\u03d5(r1), . . . , \u03d5(rm))} (10)\nThe composition is a strong composition if, for all r1, . . . , rm \u2208 Rel: \u03d5( (r1, . . . , rm)) = \u25e6(\u03d5(r1), . . . , \u03d5(rm)) (11)\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nIn the literature, the equivalent variant r\u0306 i = {s \u2208 Rel | \u03d5(s) \u2229 \u03d5(r)\u03c0i 6= \u2205} of Equation (8) is sometimes found; analogously for Equation (10).\nExample 3.22. The converse and permutation operation in PC1 are both strong because (9) holds for all three relation symbols (e.g., \u03d5(<\u0306 ) = \u03d5(>) = > = <\u02d8 = \u03d5(<)\u0306 ), and the binary version of (11), namely\n\u03d5(r1 r2) = \u03d5(r1) \u25e6 \u03d5(r2), holds for all nine pairs of relation symbols (e.g., \u03d5(> >) = \u03d5(>) = > = > \u25e6 > = \u03d5(>) \u25e6 \u03d5(>)). \u2022\nExample 3.23. Consider the variant PCN1 of PC1 that is interpreted over the universe N. It contains the same base relations with the usual interpretation and, obviously, the same converse operation, see Example 3.18. However, composition is no longer strong because < \u25e6 < ( < holds: for \u201c\u2286\u201d observe that, whenever x < y < z for three points x, y, z \u2208 N, it follows that x < z; and \u201c+\u201d holds because there are points x, z with x < z for which there is no y with x < y < z, for example, x = 0, z = 1. More precisely, the result of the composition < < should be the relation <1= {(x, z) | x+ 1 < z}. Since <1 is not expressible by a union of base relations, we cannot endow this calculus with a strong symbolic composition operation. Consequently we have a choice as to the composition result in question. Regardless of that choice, the composition table will incur a loss of information because it cannot capture that the pair (x, z) is in <1.\nIf we opt for weak composition, then Equation (10) requires us to generate the result of < < from the symbols for exactly those relations that overlap with the domain-level composition < \u25e6<. From the above it is clear that this is exactly <. One can now easily check that, for the case of weak composition, we get precisely Table II b.\nOn the contrary, if we do not care about composition being weak, then abstract composition (Inequality (7)) requires us to generate the result of < < from the symbols for at least those relations that overlap with < \u25e6 <. This means that we can postulate < < = {<} as before or, for example, < < = {<, =, >}.\nThe difference between weak and abstract composition is that abstract composition allows us to make the composition result arbitrarily general, whereas weak composition forces us to take exactly those relations into account that contain possible pairs of (x, z). Weak composition therefore restricts the loss of information to an unavoidable minimum, whereas abstract composition does not provide such a guarantee: the more base relations are included in the composition result, the more information we lose on how x and z are interrelated.\nIn this connection, it becomes clear why we require composition to be at least abstract: without this requirement, we could omit, for example, < from the above composition result. This would result in adding spurious information because we would suddenly be able to conclude that the constellation x < y < z is impossible, just because < < = \u2205. This insight, in turn, is particularly important for ensuring soundness of the most common reasoning algorithm, a-closure, see Section 3.2. \u2022 In terms of composition tables, abstract composition requires that each cell corresponding to (r1, . . . , rm) contains at least those relation symbols t whose interpretation intersects with \u25e6(\u03d5(r1), . . . , \u03d5(rm)). Weak composition additionally requires that each cell contains exactly those t. Strong composition, in contrast, implies a requirement to the underlying partition scheme: whenever \u03d5(t) intersects with \u25e6(\u03d5(r1), . . . , \u03d5(rm)), it has to be contained in \u25e6(\u03d5(r1), . . . , \u03d5(rm)). Analogously for permutation.\nThese explanations and those in Example 3.23 show that abstractness as in Properties (6) and (7) captures minimal requirements to the operations in a qualitative calculus: it ensures that, whenever the symbolic relations cannot capture the converse\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nor composition of some domain relations exactly, the symbolic converse (composition) approximates its domain-level counterpart from above, thus avoiding the introduction of spurious information. Weakness (Properties (8) and (10)) additionally ensures that the loss of information is kept to the unavoidable minimum. This last observation is presumably the reason why existing calculi (see Section 3.4) typically have at least weak operations \u2013 we are not aware of any calculus with only abstract operations.\nIn Section 3.2, we will see that abstract composition is a minimal requirement for ensuring soundness of the most common reasoning algorithm, a-closure, and review the impact of the various strengths of the operations on reasoning algorithms.\nThe three notions form a hierarchy:\nFACT 3.24. Every strong permutation (composition) is weak, and every weak permutation (composition) is abstract. A.1\nIt suffices to postulate the properties weakness and strongness with respect to relation symbols only: they carry over to composite relations as shown in Fact 3.25.\nFACT 3.25. Given a qualitative calculus (Rel, Int,\u02d81, . . . ,\u02d8k, ) the following holds. For all composite relations R \u2286 Rel and i = 1, . . . , k:\n\u03d5(R\u02d8i) \u2287 \u03d5(R)\u03c0i (12) For all composite relations R1, . . . , Rm \u2286 Rel:\n\u03d5( (R1, . . . , Rm)) \u2287 \u25e6(\u03d5(R1), . . . , \u03d5(Rm)) (13)\nIf \u02d8i is a weak permutation, then, for all R \u2286 Rel: R\u02d8i = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(R)\u03c0i}\nIf \u02d8i is a strong permutation, then, for all R \u2286 Rel:\n\u03d5(R\u02d8i) = \u03d5(R)\u03c0i\nIf is a weak composition, then, for all R1, . . . , Rm \u2286 Rel: (R1, . . . , Rm) = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u25e6(\u03d5(R1), . . . , \u03d5(Rm)}\nIf is a strong composition, then, for all R1, . . . , Rm \u2286 Rel: \u03d5( (R1, . . . , Rm)) = \u25e6(\u03d5(R1), . . . , \u03d5(Rm)) A.2\nSuppose that we want to achieve that the symbolic permutation operations provided by a calculus C capture all permutations at the domain level. Then C needs to be permutation-complete in the sense that at least weak permutation operations for all n!\u2212 1 nontrivial permutations can be derived uniquely by composing the ones defined.\nIn the binary case, where the converse is the unique nontrivial (and generating) permutation, every calculus is permutation-complete. However, as noted above, the converse is not strong for the binary CDR and RCD calculi (cf. Definition 3.11 ff.). There are also ternary calculi whose permutations are not strong: e.g., the shortcut, homing, and inversion operations in the single-cross and double-cross calculi [Freksa 1992b; Freksa and Zimmermann 1992] are only weak. Since these calculi provide no further permutation operations, they are not permutation-complete. However, it is easy to compute the two missing permutations and thus make both calculi permutation-complete.\nLigozat and Renz\u2019 [2004] basic notion of a binary qualitative calculus is based on a weak representation which requires an identity relation, abstract composition, and the converse being strong, thus excluding, for example, CDR and RCD. A representation\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nis a weak representation with a strong composition and an injective map \u03d5. Our basic notion of a qualitative calculus is more general than a weak representation by not requiring an identity relation, and by only requiring abstract permutations and composition, thus including CDR and RCD. On the other hand, it is slightly more restrictive by requiring the map \u03d5 to be injective \u2013 however, since base relations are JEPD, the only way for \u03d5 to violate injectivity is to give multiple names to the same relation, which is not really intuitive. It is even problematic because it leads to unintended behavior of the notion of weak composition (or permutation): if there are two relation symbols for every domain relation, then the intersections in Equations (8) and (10) will range over disjoint composite relations S and thus become empty.\nRecently, Westphal et al. [2014] gave a new definition of a qualitative calculus that does not explicitly use a map \u2013 in our case the interpretation Int \u2013 that connects the symbols with their semantics. Instead, they employ the \u201cnotion of consistency\u201d [Westphal et al. 2014, p. 211] for generating a weak algebra from the Boolean algebra of relation symbols. As with [Ligozat and Renz 2004] their definition of a qualitative calculus is confined to binary relations only."}, {"heading": "3.2. Spatial and Temporal Reasoning", "text": "As in the area of classical constraint satisfaction problems (CSPs), we are given a set of variables and constraints: a constraint network or a qualitative CSP.1 The task of constraint satisfaction is to decide whether there exists a valuation of all variables that satisfies the constraints. In calculi for spatial and temporal reasoning, all variables range over the entities of the specific spatial (or temporal) domain of a qualitative calculus. The relation symbols defined by the calculus serve to express constraints between the entities. More formally, we have:\nDefinition 3.26 (QCSP). Let C = (Rel, Int,\u02d81, . . . ,\u02d8k, ) be an n-ary qualitative calculus with Int = (U , \u03d5, \u00b7\u03c01 , . . . , \u00b7\u03c0k , \u25e6), and let X be a set of variables ranging over U . An nary qualitative constraint in C is a formula R(x1, . . . , xn) with variables x1, . . . , xn \u2208 X and a relation R \u2286 Rel. We say that a valuation \u03c8 : X \u2192 U satisfies R(x1, . . . , xn) if (\u03c8(x1), . . . , \u03c8(xn)) \u2208 \u03d5(R) holds.\nA qualitative constraint satisfaction problem (QCSP) is the task to decide whether there is a valuation \u03c8 for a set of variables satisfying a set of constraints.\nExample 3.27. In PC1 we may have the two constraints c1 = x1 < x2 and c2 = x2 {<, =} x3. The valuation \u03c8 : X \u2192 R with \u03c8(x1) = \u221a 2, \u03c8(x2) = 3.14 and \u03c8(x3) = 42 satisfies both constraints. If we set \u03c8(x3) = 3.14, then both constraints remain satisfied by \u03c8; if we set \u03c8(x3) = 2.718, then \u03c8 no longer satisfies c2. \u2022\nFor simplicity and without loss of generality, we assume that every set of constraints contains exactly one constraint per set of n variables. Thus, of binary constraints either rx1,x2 or r\u2032x2,x1 is assumed to be given \u2013 the other can be derived using converse; multiple constraints regarding variables x1, x2 can be integrated via intersection. In the following, rx1,...,xn stands for the unique constraint between the variables x1, . . . , xn.\nSeveral techniques originally developed for finite-domain CSPs can be adapted to spatial and temporal QCSPs. Since deciding CSP instances is already NP-complete for search problems with finite domains, heuristics are important. One particularly valuable technique is constraint propagation which aims at making implicit constraints explicit in order to identify variable assignments that would violate some constraint. By pruning away these variable assignments, a consistent valuation can be searched\n1In the CSP domain, \u201cCSP\u201d usually refers to a single instance, not the decision or computation problem.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nmore efficiently. A common approach is to enforce k-consistency; the following definition is standard in the CSP literature [Dechter 2003].\nDefinition 3.28. A QCSP with variablesX is k-consistent if, for all subsetsX \u2032 ( X of size k\u22121, we can extend any valuation ofX \u2032 that satisfies the constraints to a valuation of X \u2032 \u222a {z} also satisfying the constraints, for any additional variable z \u2208 X \\X \u2032.\nQCSPs are naturally 1-consistent as universes are nonempty and there are no unary constraints. An n-ary QCSP is n-consistent if r\u0306 ix1,...,xk = r\u03c0i(x1,...,xk) for all i and rx1,...,xk 6= \u2205: domain relations are typically serial, that is, for any r and x1, . . . , xk\u22121, there is some xk with r(x1, . . . , xk). In the case of binary relations, this means that 2- consistency is guaranteed in calculi with a strong converse by r\u0306x,y = ry,x and rx,y 6= \u2205, and seriality of r means that, for every x, there is a y with r(x, y).\nAlready examining (n+1)-consistency may provide very useful information. The following is best explained for binary relations and then generalized to higher arities. A 3-consistent binary QCSP is called path-consistent, and Definition 3.28 can be rewritten using binary composition as\n\u2200x, y \u2208 X rx,y \u2286 \u22c2 z\u2208X rx,z \u25e6 rz,y. (14)\nWe can enforce 3-consistency by computing the fixpoint of the refinement operation\nrx,y \u2190 rx,y \u2229 (rx,z \u25e6 rz,y) , (15) applied to all variables x, y, z \u2208 X. In finite CSPs with variables ranging over finite domains, composition is also finite and the procedure always terminates since the refinement operation is monotone and there can thus only be finitely many steps until reaching the fixpoint. Such procedures are called path-consistency algorithms and require O(|X|3) time [Dechter 2003].\nExample 3.29. The QCSP in Figure 3(c) based on PC1 is not path-consistent because rA,C implicitly takes on the universal relation, and thus Equation (14) is violated for x = A, y = C, z = B. By contrast, the QCSP in Figure 3(b) is path-consistent, which can be verified by considering each permutation of A,B,C in turn. \u2022 Enforcing path-consistency with QCSPs may not be possible using a symbolic algorithm since Equation (15) may lead to relations not expressible in 2Rel. This problem occurs when composition in a qualitative calculus is not strong. It is however straightforward to weaken Equation (15) using weak composition:\nrx,y \u2190 rx,y \u2229 (rx,z rz,y) (16) The resulting procedure is called enforcing algebraic closure or a-closure for short. The QCSP obtained as a fixpoint of the iteration is called algebraically closed.\nExample 3.30. Consider the PC1 QCSP in Figure 3(c). The missing edge between variables A and C indicates an implicit constraint via the universal relation u = {<, =, >}. Enforcing a-closure as per (16) updates this constraint with u \u222a < <, which yields <, resulting in Figure 3(b). Further applications of (16) do not cause any more changes; hence the QCSP in Figure 3(b) is algebraically closed. \u2022 If composition in a qualitative calculus is strong, a-closure and path-consistency coincide. Since there are finitely many relations in a qualitative calculus, a-closure shares all computational properties with the finite CSP case.\nA natural generalization from binary to n-ary relations can be achieved by considering (n + 1)-consistency (recall that path-consistency is 3-consistency). In context of\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nsymbolic computation with qualitative calculi we thus need to lift Equations (14) and (15) to the particular composition operation available. For composition as defined by (5) one obtains\n\u2200x1, . . . , xn \u2208 X rx1,...,xn \u2286 \u22c2 y\u2208X \u25e6(rx1,...,xn\u22121,y, rx1,...,xn\u22122,y,xn , . . . , ry,x2,...,xn),\nand the symbolic refinement operation (16) becomes\nrx1,...,xn \u2190 rx1,...,xn \u2229 (rx1,...,xn\u22121,y, rx1,...,xn\u22122,y,xn , . . . , ry,x2,...,xn). (17)\nThe reason why, in Definition 3.16, we require composition to be at least abstract is that Inclusion (7) guarantees that reasoning via a-closure is sound: enforcing kconsistency or a-closure does not change the solutions of a CSP, as only impossible valuations are locally removed. If application of a-closure results in the empty relation, then the QCSP is known to be inconsistent. By contrast, an algebraically closed QCSP may not be consistent though. However, for several qualitative calculi (or at least subalgebras thereof) a-closure and consistency coincide, see also Section 3.4.\nExample 3.31. Consider the modification PC\u2032\u2032\u20321 based on the binary abstract partition scheme S(PC\u2032\u2032\u20321 ) = ({0, 1, 2}, {<,=, >}), i.e., the domain now has 3 elements. Then the QCSP containing 4 nodes and the constraints {x0 < x1, x1 < x2, x2 < x3} has the algebraic closure {xi < xj | 0 6 i < j 6 3}, which has no solution in the 3-element domain. \u2022\nSince domain relations are JEPD, deciding QCSPs with arbitrary composite relations can be reduced to deciding QCSPs with only atomic relations (i.e., relation symbols) by means of search (cf. [Renz and Nebel 2007]). The approach to reason in a full algebra is thus to refine a composite relation R \u222a S to either R or S in a backtracking search fashion, until a dedicated decision procedure becomes applicable. Computationally, reasoning with the complete algebra is typically NP-hard due to the exponential number of possible refinements to atomic relations. For investigating reasoning algorithms, one is thus interested in the complexity of reasoning with atomic relations. If they can be handled in polynomial time, maximal tractable sub-algebras that extend the set of atomic relations are of interest too. Efficient reasoning algorithms for atomic relations and the existence of large tractable sub-algebras suggest efficiency in handling practical problems. The search for maximal tractable sub-algebras can be significantly eased by applying the automated methods proposed by Renz [2007]. These exploit algebraic operations to derive tractable composite relations and, complementary, search for embeddings of NP-hard problems. Using a-closure plus refinement search has been regarded as the prevailing reasoning method. Certainly, a-closure provides an efficient cubic time method for constraint propagation, but Table VII clearly shows that the majority of calculi require further methods as decision procedures."}, {"heading": "3.3. Tools to Facilitate Qualitative Reasoning", "text": "There are several tools that facilitate one or more of the reasoning tasks. The most prominent plain-QSTR tools are GQR [Westphal et al. 2009], a constraint-based reasoning system for checking consistency using a-closure and refinement search, and the SparQ reasoning toolbox [Wolter and Wallgr\u00fcn 2012],2 which addresses various tasks from constraint- and similarity-based reasoning. Besides general tools, there are implementations addressing specific aspects (e.g., reasoning with CDR [Liu et al. 2010]) or tailored to specific problems (e.g., Phalanx for sparse RCC-8 QCSPs [Sioutis and\n2available at https://github.com/dwolter/sparq\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nCondotta 2014]). In the contact area of qualitative and logical reasoning, the DL reasoners Racer [Haarslev et al. 2012] and PelletSpatial [Stocker and Sirin 2009] offer support for handling a selection of qualitative formalisms. For logical reasoning about qualitative domain representations, the tools Hets [Mossakowski et al. 2007], SPASS [Weidenbach et al. 2002], and Isabelle [Nipkow et al. 2002] have been applied, supporting the first-order Common Algebraic Specification Language CASL [Astesiano et al. 2002] as well as its higher-order variant HasCASL (see [W\u00f6lfl et al. 2007])."}, {"heading": "3.4. Existing Qualitative Spatial and Temporal Calculi", "text": "In the following, we present an overview of existing calculi obtained from a systematic literature survey, covering publications in the relevant conferences and journals in the past 25 years, and following their citation graphs. To be included in our overview, a qualitative calculus has to be based on a spatial and/or temporal domain, fall under our general definition of a qualitative calculus (Def. 3.16: provide symbolic relations, the required symbolic operations, and semantics based on an abstract partition scheme), and be described in the literature either with explicit composition/converse tables, or with instructions for computing those. These selection critera exclude sets of qualitative relations that have been axiomatized in the context of logical theories, see Section 5.2, or qualitative calculi designed for other domains, such as ontology alignment [Inants and Euzenat 2015]).\nTables IV\u2013VI list, to the best of our knowledge, all calculi satisfying these criteria. Table IV lists the names of families of calculi and their domains. Tables V and VI list all variants of these families with original references, arity and number of their base relations (which is an indicator for the level of granularity offered and for the average branching factor to expect in standard reasoning procedures). Additionally we indicate which calculi are implemented in SparQ and can be obtained from there.\nRepresentational aspects of calculi are shown in Figures 7 and 8, grouping calculi by the type of their basic entities and the key aspects captured. For all temporal and selected spatial calculi we iconographically show one exemplary base relation to illustrate the kind of statements it permits. For a complete understanding of the respective calculus, the interested reader is referred to the original research papers cited in Tables V and VI. We sometimes use a more descriptive relation name than the original work.\nFigure 9 shows the known relations between the expressivity of existing calculi. There are several ways to measure these, via the existence of faithful translations not only between base relations over the same domain, but also between representations of related domains or between representations concerned with a different domain. For example, the dependency calculus DepCalc representing dependency between points is isomorphic to RCC-5 representing topology of regions. Both calculi feature the same algebraic structure representing partial-order relationships in the domain.\nSince expressivity of qualitative representations solely relies on how relations are defined, there exist distinct calculi which exhibit the same expressivity when Boolean combinations of constraints are considered. These connections are particularly interesting, not only from the perspective of selecting an appropriate representation, but also in view of computational properties. For example, deciding consistency of atomic constraint networks over the point calculus PC is polynomial. Using Boolean combinations of PC relations one can simulate Allen interval relations. Nebel and B\u00fcrckert [1995] have exploited this relationship to lift a tractable subset to Allen. In Figure 9 we indicate by an arrow A \u2192 B that relations in A can be expressed by Boolean combinations of relations in B. For clarity we only show direct relations, not their transitive closure.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nComputational aspects of calculi are shown in Table VII, as far as they have already been identified. Some fairly straightforward supplements have been made while compiling this table; their proofs are in Appendix C. According to the discussion in the previous section, we give the computational complexity for deciding consistency with atomic QCSPs and the best known complete decision procedure, which is different from a-closure in those cases where a-closure is incomplete. We only indicate the type of algorithm applicable (e.g., linear programming), but not its most efficient realization. We furthermore list tractable subalgebras that cover at least all atomic relations \u2013 these subalgebras allow for reasoning in the full algebra via combining the named decision procedure with a search for a refinement. The complexity is given as \u201cP\u201d (in polynomial time), \u201cNPc\u201d (NP-complete), and \u201cNPh\u201d (NP-hard, NP-membership unknown)."}, {"heading": "4. ALGEBRAIC PROPERTIES OF SPATIAL AND TEMPORAL CALCULI", "text": "Algebraic properties have been recognized as a formal tool for measuring the information preservation properties of a calculus and for providing the theoretical underpinnings for vital optimizations to reasoning procedures [Isli and Cohn 2000; Ligozat and Renz 2004; D\u00fcntsch 2005; Dylla et al. 2013].\nTo start with information preservation, it is important to distinguish two sources for a loss of information: one is qualitative abstraction, which maps the perceived, continuous domain to a symbolic, discrete representation using n-ary domain relations and operations on them (such as composition and permutation operations). The loss of information associated with this mapping is mostly intended. To understand the other, we recall that a spatial (or temporal) calculus consists of symbolic relations and\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\noperations, representing the domain relations and operations. While the domain operations are known to satisfy strong algebraic properties, those do not necessarily carry over to the symbolic operations \u2013 for example, if the operation \u00b7hm representing homing (Section 3.1) is only abstract or weak, then there will be symbolic relations r with (rhm)hm 6= r although, at the domain level, (Rhm)hm = R holds for any n-ary relation R, including the interpretation \u03d5(r) of r. This loss of information indicates an unintended structural misalignment between the domain level and the symbolic level. Having its roots in the abstraction step, where the set of domain relations and operations is determined, the information loss becomes noticeable only with the symbolic representation.\nIf we want to measure how well the symbolic operations in a calculus preserve information, we can compare their algebraic properties with those of their domain-level counterparts. If they share all algebraic properties, this indicates that they maximally preserve information. In addition, algebraic properties seem to supply a finer-grained measure than the mere distinction between abstract, weak, and strong operations: there are 14 axioms for binary relation algebras and variants, each containing two inclusions or implications that may or may not hold independently.\nSeveral algebraic properties can be exploited to justify and implement optimizations in constraint reasoners. For example, associativity of the composition operation for binary symbolic relations ensures that, if the reasoner encounters a path ArBsCtD of length 3, then the relationship between A and D can be computed \u201cfrom left to right\u201d. Without associativity, it may be necessary to compute (r s) t as well as r (s t).\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nIn order to study the algebraic properties of spatial and temporal calculi, the classical notion of a relation algebra (RA) [Maddux 2006] plays a central role [Isli and Cohn 2000; Ligozat and Renz 2004; D\u00fcntsch 2005; Mossakowski 2007]. The axioms in the definition of an RA reflect the algebraic properties of the relevant operations on binary domain relations \u2013 the operations are union, intersection, complement, converse, and binary compositions; the properties are commutativity, several variants of associativity and distributivity, and others. These properties have been postulated for binary calculi [Ligozat and Renz 2004; D\u00fcntsch 2005], but it has been shown that not all existing calculi satisfy these strong properties [Mossakowski 2007]. It is the main aim of this subsection to study the algebraic properties of existing binary calculi and derive from the results a taxonomy of calculus algebras.\nUnfortunately, it is far from straightforward to extend this study to arity 3 or higher: while algebraic properties of ternary and n-ary calculi have been studied [Isli and Cohn 2000; Scivos and Nebel 2005; Condotta et al. 2006], we are aware of only one axiomatization for a ternary RA [Isli and Cohn 2000], based on one particular choice of permutation (homing and shortcut) and composition (the binary variant (4)). However, existing calculi are based on different choices of these operations, and each choice comes with different algebraic properties at the domain level, for example:\n\u2014 Not all permutations are involutive: e.g., in the ternary case, we do not have (Rsc)sc = R for all domain relations R, but rather ((Rsc)sc)sc = R. \u2014 Each variant of the composition operation has its own neutral element, that is, a relation E such that R \u25e6 E = E \u25e6 R = R for all relations R: e.g., in the ternary case, 3\u25e632 (Section 3.1) has id 3 {2,3} as the neutral element while \u25e63FZ has id 3 {1,2}. \u2014 Some variants of the composition operation have stronger properties than others: e.g., 3\u25e632 is associative while \u25e63FZ is not.\nEstablishing a unifying algebraic framework for n-ary spatial and temporal calculi and determining the algebraic properties of existing calculi would require a whole new research program. In this survey article, we will therefore restrict our attention to the binary case for the remainder of this section.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY."}, {"heading": "4.1. The Notion of a Relation Algebra", "text": "The notion of an (abstract) RA is defined in [Maddux 2006] and makes use of the axioms listed in Table IX.\nDefinition 4.1. Let Rel be a set of relation symbols containing id and 1 (the symbols for the identity and universal relation), and let \u222a, be binary and ,\u0304 \u02d8 unary operations on Rel. The tuple (Rel,\u222a, ,\u0304 1, , ,\u0306 id) is a\n\u2014 non-associative relation algebra (NA) if it satisfies Axioms R1\u2013R3, R5\u2013R10; \u2014 semi-associative relation algebra (SA) if it is an NA and satisfies Axiom S, \u2014 weakly associative relation algebra (WA) if it is an NA and satisfies W, \u2014 relation algebra (RA) if it satisfies R1\u2013R10,\nfor all r, s, t \u2208 Rel.\nClearly, every RA is a WA; every WA is an SA; every SA is an NA. In the literature, a different axiomatization is sometimes used, for example in [Ligozat and Renz 2004]. The most prominent difference is that R10 is replaced by PL, \u201ca more intuitive and useful form, known as the Peircean law or De Morgan\u2019s Theorem K\u201d [Hirsch and Hodkinson 2002]. It is shown in [Hirsch and Hodkinson 2002, Section 3.3.2] that, given R1\u2013R3, R5, R7\u2013R9, the axioms R10 and PL are equivalent. The implication PL \u21d2 R10 does not need R5 and R8.\nAll axioms except PL can be weakened to only one of two inclusions, which we denote by a superscript \u2287 or \u2286. For example, R\u22877 denotes (r\u0306 )\u0306 \u2287 r. Likewise, we use PL\u21d2 and PL\u21d0. Furthermore, Table IX contains the redundant axiom R6l because it may be satisfied when some of the other axioms are violated. It is straightforward to establish that R6 and R6l are equivalent given R7 and R9. B.1\nThanks to Def. 3.16, certain axioms are satisfied by every calculus:\nFACT 4.2. Every qualitative calculus (Def. 3.16) satisfies R1\u2013R3, R5, R \u2287 7 , R8, W \u2287, S\u2287 for all (atomic and composite) relations. This axiom set is maximal: each of the remaining axioms in Table IX is not satisfied by some qualitative calculus. B.2\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY."}, {"heading": "4.2. Discussion of the Axioms", "text": "We will now discuss the relevance of the above axioms for spatial and temporal representation and reasoning. Due to Fact 4.2, we only need to consider axioms R4, R6, R7, R9, R10 (or PL) and their weakenings R6l, S, W.\nR4 (and S, W). Axiom R4 is helpful for modeling since it allows parentheses in chains of compositions to be omitted. For example, consider the following statement in natural language about the relative length and location of two intervals A and D. Interval A is before some equally long interval that is contained in some longer interval that meets the shorter interval D. This statement is just a conjunction of relations between A, the unnamed intermediary intervals B,C, and D. Although it intuitively does not matter whether we give priority to the composition of the relations betweenA,B andB,C or to the composition of the relations between B,C and C,D, there are calculi such as INDU which do not satisfy Axiom R4 \u2013 then the example statement needs to be interpreted as a Boolean formula consisting of a conjunction over both alternatives.\nWe note that violation of R4 is independent of composition not being strong, as shown in Section 4.4. Presence of strong composition however implies R4 since composition of binary domain relations over U is associative:\nFACT 4.3. Every qualitative calculus where composition is strong satisfies R4.\nFurthermore, already a weakening R\u22874 or R \u2286 4 is useful for optimizing reasoning algorithms, allowing the \u201cfiner\u201d composition \u2013 say, r (s t) in case of R\u22864 \u2013 to be computed when a chain of compositions needs to be evaluated.\nR6 and R6l. Presence of an id relation allows the standard reduction from the correspondence problem to satisfiability: to test whether a constraint system admits the equality of two variables x, y, one can add an id-constraint between x, y and test the extended system for satisfiability.\nR7 and R9. These axioms allow for certain optimizations in symbolic reasoning, in particular algebraic closure. If a relation r satisfies R7, then reasoning systems do not need to store both constraints ArB and B r\u2032A, since r\u2032 can be reconstructed as r\u0306 if needed. Similarly, R9 grants that, when enforcing algebraic closure by using Equation (16) to refine constraints between variable A and B, it is sufficient to compute composition once and, after applying the converse, reuse it to refine the constraint between B and A too. Current reasoning algorithms and their implementations use the described optimizations; they produce incorrect results for calculi violating R7 or R9.\nR10 and PL. These axioms reflect that the relation symbols of a calculus indeed represent binary domain relations, i.e., pairs of elements of a universe. This can be explained from two different points of view.\n(1) If binary domain relations are considered as sets, R10 is equivalent to r\u0306 r s \u2286 s\u0304. If we further assume the usual set-theoretic interpretation of the composition of two domain relations, the above inclusion reads as: For any X,Y , if Z rX for some Z and, Z r U implies not U sY for any U , then not X sY . This is certainly true because X is one such U . (2) Under the same assumptions, each side of PL says (in a different order) that there can be no triangle X r Y, Y sZ,Z tX. The equality then means that the \u201creading direction\u201d does not matter, see also [D\u00fcntsch 2005]. This allows for reducing nondeterminism in the a-closure procedure, as well as for efficient refinement and enumeration of consistent scenarios.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY."}, {"heading": "4.3. Prerequisites for Being a Relation Algebra", "text": "The following correspondence between properties of a calculus and notions of a relation algebra is due to Ligozat and Renz [2004]: every calculus C based on a partition scheme is an NA. If, in addition, the interpretations of the relation symbols are serial base relations, then C is an SA. Furthermore, R7 is equivalent to the requirement that the converse operation is strong. This is captured by the following lemma.\nLEMMA 4.4. Let C = (Rel, Int,\u0306 , ) be a qualitative calculus. Then the following properties are equivalent.\n(1) C has a strong converse. (2) Axiom R7 is satisfied for all relation symbols r \u2208 Rel. (3) Axiom R7 is satisfied for all composite relations R \u2286 Rel.\nPROOF. Items (2) and (3) are equivalent due to distributivity of \u02d8 over \u222a, which is introduced with the cases for composite relations in Definition 3.16.\nFor \u201c(1) \u21d2 (2)\u201d, the following chain of equalities, for any r \u2208 Rel, is due to C having a strong converse: \u03d5(r\u0306 )\u0306 = \u03d5(r\u0306 )\u0306 = \u03d5(r)\u0306 \u02d8 = \u03d5(r). Since Rel is based on JEPD relations and \u03d5 is injective, this implies that r\u0306 \u02d8 = r.\nFor \u201c(2) \u21d2 (1)\u201d, we show the contrapositive. Assume that C does not have a strong converse. Then \u03d5(r\u0306 ) ) \u03d5(r)\u0306 , for some r \u2208 Rel; hence \u03d5(r\u0306 )\u0306 ) \u03d5(r)\u0306 .\u0306 We can now modify the above chain of equalities replacing the first two equalities with inequalities, the first of which is due to Requirement (6) in the definition of the converse (Def. 3.16): \u03d5(r\u0306 )\u0306 \u2287 \u03d5(r\u0306 )\u0306 ) \u03d5(r)\u0306 \u02d8 = \u03d5(r). Since \u03d5(r\u0306 )\u0306 6= \u03d5(r), we have that r\u0306 \u02d8 6= r."}, {"heading": "4.4. Algebraic Properties of Existing Spatial and Temporal Calculi", "text": "We differentiate the algebraic properties of individual calculi, aiming to identify those which are abstract relation algebras, and identifying relevant weaker algebraic properties. To this end, we analyzed the calculi listed in Tables V\u2013VI. We restrict our selection to the 31 calculi3 that (a) have binary relations \u2013 because the notion of a relation algebra is best understood for binary relations \u2013 and (b) where digital versions of the operation tables are available.\nWe have written a CASL specification of the axioms listed in Table IX along with weakenings thereof. These have been used with Hets to determine congruence of calculus and axioms. Additionally, SparQ and its built-in analysis tools have been employed to double-check results. Due to Fact 4.2, it suffices to test Axioms R4, R6, R7, R9, R10 (or PL) and, if necessary, the weakenings S, W, and R6l.\nThe results of our tests are depicted in Figure 10, further details are provided in Appendix E. The figure arranges the analyzed calculi as hierarchy, the strongest notion (relation algebra) residing at the top and the weakest (weakly associative Boolean algebra) at the bottom. Arrows represent the is-a relation; i.e., every relation algebra is an \u201cRA minus id law\u201d as well as a semi-associative relation algebra and, via transitivity, a weakly associative Boolean algebra.\nWith the exceptions of RCD, cCDR and all QTC variants, all tested calculi are at least semi-associative relation algebras; most of them are even relation algebras. Hence, only these calculi enjoy all advantages for representation and reasoning optimizations discussed in Section 4.2. For other groups of calculi, special care in implementations of reasoning procedures need to be taken. In Section 4.5 we present a revised algorithm to compute algebraic closure that respects all eventualities.\nThe three groups of calculi that are SAs but not RAs are the Dipole Calculus variant DRAf (refined DRAfp and coarsened DRA-conn are even RAs!), as well as INDU and\n3For the parametrized calculi DRA, OPRA, QTC, we count every variant separately.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nOPRAm for at least m = 1, . . . , 8. These calculi do not even satisfy one of the inclusions R\u22874 and R \u2286 4 , which implies that the reasoning optimizations described in Section 4.2 for Axiom R4 cannot be applied. As a side note, our observations suggest that the meaning of the letter combination \u201cRA\u201d in the abbreviations \u201cDRA\u201d and \u201cOPRA\u201d should stand for \u201cReasoning Algebra\u201d, not for \u201cRelation Algebra\u201d.\nIn principle, it cannot be completely ruled out that associativity is reported to be violated due to errors in either the operation tables published or the experimental setup. This even applies to non-violations, although it is much more likely that errors cause sporadic violations than systematic non-violations. In the case of DRAf , INDU and OPRAm, m = 1, . . . , 8, the relatively high percentage of violations make implementation errors seem unlikely to be the cause. However, to obtain certainty that these calculi indeed violate R4, one has to find concrete counterexamples and verify them using the original definition of the respective calculus. For DRAf and INDU, this has been done in the literature [Moratz et al. 2011; Balbiani et al. 2006]. Interestingly, the violation of associativity has been attributed to the converse or composition not being strong. We remark, however, that composition cannot be the culprit because, for example, DRAfp has an associative, but only weak, composition operation. While DRAfp has been proven to be associative due to strong composition in [Moratz et al. 2011], for OPRAm, it can be shown that none of the variants for any m are associative (see [Mossakowski et al. 2015]).\nThe B-variants of QTC violate only the identity laws R6, R6l. As observed in [Mossakowski 2007], it is possible to add a new id relation symbol, modify the interpretation of the remaining relation symbols such that they become JEPD, and adapt the converse and composition tables accordingly, thus obtaining relation algebras.\nThe C-variants of QTC additionally violate R4, R9, R10, and PL. Consequently, most of the reasoning optimizations described in Section 4.2 cannot be applied to the Cvariants of QTC. The remarkably few violations of R9, R10, and PL might be due to errors in the composition table, but the non-trivial verification is part of future work.\ncCDR and RCD are the only calculi with a weak converse in our tests. cCDR satisfies only W in addition to the axioms that are always satisfied by a Boolean algebra with distributivity. Hence, cCDR enjoys none of the advantages for representation and reasoning discussed before. Similarly to the C-variants of QTC, the relatively small number of violations of PL may be due to errors in the tables published. RCD additionally satisfies R4. Since both calculi satisfy neither R7 nor R9, current reasoning algorithms and their implementations yield incorrect results for them, as seen in Section 4.2."}, {"heading": "4.5. Universal Procedure for Algebraic Closure", "text": "We noted in Section 4.2 that existing descriptions and implementations of a-closure (e.g., in GQR and SparQ ) use optimizations based on certain relation algebra axioms. Our analysis in Section 4.4 reveals that there are calculi which violate some of these axioms, e.g., R9; hence those optimizations lead to incorrect results. In Algorithm 1 we present a universal algorithm that computes a-closure correctly for all calculi and uses optimizations only when they are justified. Its input is a graph (V, C) representing a constraint network, and Ci,j denotes the relation between the i-th and j-th node (rx,y in Eq. (15)). Its main control structure is that of the popular path-consistency algorithm PC-2 [Mackworth 1977]. Algorithm 1 enforces 2- and 3-consistency and relies on its input being 1-consistent by implicitly assuming all Ci,i to cover identity.\nAlgorithm 1\u2019s main function is A-CLOSURE, which employs a queue to store constraint relations that may give rise to an application of the refinement operation according to Eq. (15). The function REVISE implements Eq. (15). If R9 is violated (the converse is not distributive over composition), two steps are necessary to refine Ci,j \u2013 one via comput-\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nALGORITHM 1: Universal algebraic closure algorithm A-CLOSURE 1 Function LOOKUP (C, i, j, s) : \u2013\u2013\u2013\u2013\u2013 RETRIEVE RELATION FROM CONSTRAINT MATRIX \u2013\u2013\u2013\u2013\u2013 2 if s \u2228 (i < j) then 3 return Ci,j complete matrix stored? 4 else 5 return (Cj,i)\u0306\n6 Function REVISE (C, i, j, k, s) : \u2013\u2013\u2013\u2013\u2013 REVISE RELATION ri,j ACCORDING TO EQ. (15) \u2013\u2013\u2013\u2013\u2013 7 u\u2190 false update flag to signal whether relation was updated 8 r \u2190 Ci,j \u2229 LOOKUP(C, i, k, s) LOOKUP(C, k, j, s) 9 if R9 does not hold \u2228 s then 10 r\u2032 \u2190 LOOKUP(C, j, i, s) \u2229 (LOOKUP(C, j, k, s) LOOKUP(C, k, i, s)) 11 r \u2190 r \u2229 r\u2032\u0306 12 r\u2032 \u2190 r\u2032 \u2229 r\u0306 13 if r\u2032 6= Cj,i then 14 assert r\u2032 6= \u2205 stop if inconsistency is detected 15 u\u2190 true 16 Cj,i \u2190 r\u2032\n17 if r 6= Ci,j then 18 assert r 6= \u2205 stop if inconsistency is detected 19 u\u2190 true 20 Ci,j \u2190 r 21 return (C, u)\n22 Function A-CLOSURE (V, C = {Ci,j |i, j \u2208 V}) : \u2013\u2013\u2013\u2013\u2013 MAIN ALGORITHM \u2013\u2013\u2013\u2013\u2013 23 for i, j \u2208 V do Enforce strong 2-consistency 24 Ci,j \u2190 Ci,j \u2229 C^j,i 25 if R7 does not hold then full |V| \u00d7 |V| matrix must be stored 26 s\u2190 True 27 Q\u2190 queue with elements {(i, j)|i, j \u2208 V}) 28 else only triangular matrix is stored 29 s\u2190 False 30 Q\u2190 queue with elements {(i, j)|i, j \u2208 V, i < j}) 31 while Q not empty do 32 dequeue (i, j) from Q 33 for k \u2208 V, k 6= i, k 6= j do 34 (C, u)\u2190 REVISE(C, i, k, j, s) 35 if u then 36 if s then 37 enqueue (i, k) in Q unless already in queue 38 else R7 \u21d2 only one of (i, k) and (k, i) is required 39 enqueue (min{i, k},max{i, k})) in Q unless already in queue\n40 (C, u)\u2190 REVISE(C, k, j, i, s) 41 if u then 42 if s then 43 enqueue (k, j) in Q unless already in queue 44 else R7 \u21d2 only one of (i, k) and (k, i) is required 45 enqueue (min{k, j},max{k, j})) in Q unless already in queue\n46 return C\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\ning Cj,i\u0306 independently. In addition, both A-CLOSURE and REVISE exploit conformance of a calculus with R7 (strong converse) to halve the space for storing the constraints. Flag s indicates whether full storage is required. If R7 is satisfied (s is false), then Ci,j can be obtained by computing Cj,i\u0306 ; this is done in the auxiliary function LOOKUP."}, {"heading": "5. COMBINATION AND INTEGRATION", "text": "Although qualitative calculi and constraint-based reasoning are predominant features of qualitative knowledge representation languages, they are rarely used by themselves in applications. For example, many applications involve several aspects of spatial and temporal knowledge simultaneously, e.g., topology and orientation of spatial objects. Others require additional forms of symbolic reasoning, such as logical reasoning. These requirements can best be solved by combining calculi or integrating them with other symbolic formalisms. In this section we review the interaction of qualitative calculi with other components of knowledge representation languages."}, {"heading": "5.1. Qualitative Calculi in Constraint-Based Knowledge Representation Languages", "text": "The simplest case of a qualitative knowledge representation language is a single qualitative calculus. Sometimes further elements of constraint languages are used in addition, for example, constants and difference operators as in the case of PIDN [Pujari and Sattar 1999], or a restricted form of disjunction [Li et al. 2013].\nIf several aspects of spatial and temporal knowledge are to be modeled, then combinations of calculi are relevant that make the interdependencies between the involved domains accessible. W\u00f6lfl and Westphal [2009] identify two general approaches to such combinations and reasoning therein: loose integration is based on the simple cross product of the base relations plus interdependency constraints [Gerevini and Renz 2002; Westphal and W\u00f6lfl 2008], and tight integration designs a new calculus internalizing the semantic interdependencies [W\u00f6lfl and Westphal 2009]. For example, INDU\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\ncombines IA and PC1 in a tight way, reducing the 13\u00d7 3 pairs of relations to the 25 semantically possible. A combination of RCC-8 with IA was introduced in [Gerevini and Nebel 2002]; several combinations of RCC-8 with direction calculi have been analyzed [Liu et al. 2009; Cohn et al. 2014]. In general, combinations do not inherit algebraic and reasoning properties from their constituent calculi (cf. Fig. 9 for INDU, PC1, IA).\nHern\u00e1ndez [1994] describes the use of topological and orientation relations, which does not result in a dedicated calculus, but reveals the effects of constraining one aspect on reasoning in the other.\nAlternative ways to solve the combination problem include formalizing the domain and qualitative relations in an abstract logic \u2013 which typically are computationally more expensive \u2013 or applying the efficient paradigm of linear programming to qualitative calculi over real-valued domains [Kreutzmann and Wolter 2014]."}, {"heading": "5.2. Qualitative Relations and Classical Logics: Spatial Logics", "text": "There have been several developments to enrich qualitative representation with concepts found in classical logics or to combine the two strands. Domain representations purely based on qualitative relations can be viewed as quantifier-free formulae with variables ranging over a certain spatial or temporal domain. QCSP instances can be posed as satisfiability problems of conjunctive constraint formulae in which variables are existentially quantified. Adopting this logic view for QCSPs leads to the field of spatial logics [Aiello et al. 2007], which is involved with combinations of qualitative calculi and logics. Already in the 1930s topological statements as those expressible in RCC were found to constitute a fragment of the modal logic S4 plus the universal modality (S4u), comprehensively described by Bennett [1997]. The cartesian product of S4u with linear temporal logic captures topological relationships that change over time [Bennett et al. 2002]. Qualitative relations and their interrelations can also be described by axiomatic systems, this approach has been argued to comprise the compositiontable approach and to support the construction of composition tables [Eschenbach 2001]. Axiomatic systems can be found, e.g., in [Eschenbach and Kulik 1997; Gotts 1996; Hahmann and Gr\u00fcninger 2011]. The field of spatial logics can thus be viewed as a continuum between purely qualitative knowledge representation languages and logics. Current work is involved with understanding the computational complexity of increasing expressivity of qualitative relations, e.g., by introducing Boolean expressions of spatial variables PO(A \u2229B,C) [Wolter and Zakharyaschev 2000], introducing a temporal modality [Kontchakov et al. 2007], or even combining spatial and temporal logics [Gabelaia et al. 2005]."}, {"heading": "5.3. Qualitative Calculi and Description Logics", "text": "Description logics (DLs) are a successful family of knowledge representation languages tailored to capturing conceptual knowledge in ontologies and reasoning over it; see, e.g., [Baader et al. 2007]. The most prominent DL-based ontology language is the W3C standard OWL.4 Several approaches to combining DLs and qualitative calculi have evolved, aiming at describing spatial and temporal qualities of application domains. A principal approach developed by Lutz and Milic\u0301ic\u030c [2007] allows adding qualitative calculi that satisfy certain admissibility conditions toALC, the basic DL, incorporating spatial/temporal reasoning into a standard DL reasoning procedure. According to the authors, a practical implementation would be challenging. Stocker and Sirin [2009] describe PelletSpatial, an extension of the DL reasoner Pellet [Sirin et al. 2007] for query answering over non-spatial (DL) and spatial (RCC-8) knowledge. Unlike the previous approach, PelletSpatial separates the two kinds of reasoning. Batsakis and Petrakis\n4http://www.w3.org/TR/owl2-overview\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\n[2011] describe SOWL, an OWL ontology capturing static, spatial, and temporal information, using a DL axiomatization of spatial relations from the calculi CDC and RCC-8. Temporal and spatial reasoning are separated (a-closure and Pellet, resp.). Ben Hmida et al. [2012] sketch an implementation of logic programming that combines 9-int with OWL ontologies and constructive solid geometry."}, {"heading": "5.4. Qualitative Calculi and Situation Calculus", "text": "The situation calculus is a popular framework for reasoning about action and change; runtime systems such as DTGolog [Ferrein et al. 2004] and ReadyLog [Ferrein and Lakemeyer 2008] are used in robotic applications. Qualitative relations are relevant to world modeling and underlie high-level behavior specifications [Schiffer et al. 2012].\nBhatt et al. [2006] aim at general integration of QSTR into reasoning about action and change, i.e., a general domain-independent theory, in order to reason about dynamic and causal aspects of spatial change. With a naive characterization of objects based on their physical properties they particularly investigate key aspects of a topological theory of space on the basis of RCC-8 [Bhatt and Loke 2008]."}, {"heading": "6. ALTERNATIVE APPROACHES", "text": "This section presents an overview of reasoning techniques that have also been used to address QSTR reasoning problems, but are not based on QSTR techniques. Since spatial reasoning connects to fields in mathematics related to geometry or topology, there are manifold possible connections to make. In the following we only hint at fields that have already proven to provide impulses to QSTR research."}, {"heading": "6.1. Algebraic Topology", "text": "Fundamental concepts of algebraic topology resemble expressivity of topological QSTR calculi such as RCC-8. For example, Euler\u2019s well-known polyhedron formula \u201cvertices - edges + faces = 2\u201d is a representative of Euler characteristics that characterize topological invariants of a space or body. The PLCA framework [Takahashi 2012] exploits the Euler characteristics to reason about topological space by invariants."}, {"heading": "6.2. Combinatorial Geometry", "text": "A set of Jordan curves (i.e., sets that are homeomorphic to the interval [0, 1] in the plane) induce an intersection graph. The string graph problem poses the question, whether a given graph can be an intersection graph of a set of curves in the plane. While the problem itself already is of a spatial nature, Schaefer and \u0160tefankovic\u030c [2004] reduced reasoning about topological relations in RCC-8 about planar regions to the string graph problem and later proved the string graph problem to be NP-complete [Schaefer et al. 2003], directly contributing to QSTR research.\nAn alternative approach to reasoning with directional relations can be found in oriented matroid theory, which comprise several equivalent combinatorial structures such as directed graphs, point and vector configurations, pseudoline arrangements, arrangements of hyperplanes [Bj\u00f6rner et al. 1999]. Already Knuth [1992] points out the importance of oriented matroids for qualitative spatial reasoning. In the context of LR constraint networks, a connection to the oriented matroid axiomatization of so-called chirotopes lead to complexity results in QSTR [Wolter and Lee 2010; Lee 2014]."}, {"heading": "6.3. Graph Theoretical Approaches", "text": "Worboys [2013] describes topological configurations through their representation as labeled trees, called map trees. Graph edit operations on map trees can be defined\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nto correspond to spatial change of the topological configuration, providing an efficient approach to reason about spatial change.\nAnother way of representing qualitative spatial change can be achieved by describing the change on two levels of detail. Stell [2013] describes a scene of regions through a bipartite graph (U, V,E) in which the elements of U represent regions that can be seen as connected at a coarse level of detail, while the elements of V represent regions that are seen as connected when also accounting for finer details. This way it is possible to describe the splitting, connecting and change of distance of regions, as well as the creation, deletion and change of size of a (part of a) region."}, {"heading": "6.4. Logic Frameworks", "text": "Viewing vectors in a vector space as abstract arrows, Aiello and Ottens [2007] introduce a so-called arrow logic as a hybrid modal logic that captures mereotopological relations between sets of vectors. Based on the concepts of inversion and composition of arrows, morphological operators such as dilation, erosion and difference can be defined. A resolution calculus allows for automated reasoning about topological relations as well as relative size."}, {"heading": "6.5. Quantitative Methods", "text": "Linear programming (LP) techniques have been used to decide constraint problems posed as linear inequalities, allowing polyhedral regions, lines, and points to be represented. LP can mix free-ranging variables with concrete values (e.g., points at known positions) and, beyond consistency checking, determine a model in polynomial time. By posing QCSP instances as LPs, constraints originating in distinct calculi can easily be mixed. While some QSTR problems can almost directly be posed as LPs [Jonsson and B\u00e4ckstr\u00f6m 1998; Ligozat 2011; Lee et al. 2013], disjunctive LP formulae allow several QSTR calculi to be handled simultaneously [Kreutzmann and Wolter 2014]. In a similar fashion, Schockaert et al. [2011] combine qualitative and quantitative reasoning of relations about different spatial aspects by using genetic optimization. Techniques for deciding satisfiability of equations yield advancements on the inherent problem of consistency checking for directional constraints such as those present in the LR calculus, as (disjunctions of) linear equations can capture relevant geometric invariances [L\u00fccke and Mossakowski 2010; van Delden and Mossakowski 2013]."}, {"heading": "7. CONCLUSION AND FUTURE RESEARCH DIRECTIONS", "text": "Qualitative spatial and temporal reasoning explores potentially interesting domain conceptualizations and their computational effects. As a consequence, QSTR is connected to various research areas in and around artificial intelligence, such as knowledge representation, linguistics and spatial cognition. Thus QSTR plays the role of a hub for connecting symbolic techniques to real-world applications. The notion of a qualitative calculus attests to this role by representing knowledge about spatial and temporal domains as an abstract algebra that provides the semantics to knowledge representation languages. Reasoning with qualitative representations occurs in several forms, with deductive forms of inference, such as deciding consistency, being in a central position. This is captured in the qualitative constraint satisfaction problem, which is decidable for all qualitative calculi (in the strict sense of Definition 3.16), ranging from low-order polynomial time complexity to within PSPACE (cf. Table VII). With this survey we present the first comprehensive overview of the known computational properties of all qualitative calculi proposed so far.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY."}, {"heading": "7.1. Beneficiaries of This Survey", "text": "This survey addresses a broad range of researchers and engineers from different research communities and application areas. We expect three groups of beneficiaries.\nThe first group comprises researchers and engineers who apply QSTR and build systems for their applications. Our survey provides them with a comprehensive and concise overview of the formalisms available, allowing objective design choices.\nThe second group consists of researchers contributing to QSTR to whom we provide revised definitions that are general enough to address all formalisms proposed so far. The overview of domain conceptualizations studied so far fosters identification of interesting new conceptualizations to be studied. Moreover, the summary of algebraic and computational properties of existing formalisms reveals open research questions: for calculi not listed in Table VIII reasoning properties have still to be analyzed.\nLast, but not least, the third group benefiting from this presentation consists of developers of reasoning tools. In order to accrete the position of QSTR as hub, sophisticated tools are necessary that disseminate formalisms and algorithms, linking basic research to application development. On the one hand, we provide pointers to all formalisms proposed and the decision methods necessary to perform reasoning. This also reveals commonalities between formalisms, hopefully gearing tools towards becoming universal in the sense that they allow many variants of representations to be handled. On the other hand \u2013 and related to the discrepancy between the amount of formalisms proposed and those fully analyzed discussed before \u2013 the most efficient algorithms to decide QCSP instances have often not yet been identified and solid algorithm engineering can likely yield a great leap ahead for QSTR."}, {"heading": "7.2. Open Problem Areas in QSTR", "text": "Combining qualitative abstractions. Despite the work reported in Section 5.1, generally applicable methods for combining existing abstractions for different spatial and temporal aspects are missing \u2013 a potential threat to the applicability of qualitative methods. It is clearly not feasible to identify all potentially useful combinations individually: there are infinitely many abstractions that give rise to a qualitative calculus.\nIntegration with other symbolic methods. In addition to the above observation that an application may need to handle more than one calculus at the same time, expressivity provided by domain-independent knowledge representation techniques may be important too. There are first contributions (e.g., combining description logic with QSTR), but these are limited to specific combinations using specific methods. A promising approach is the integration of a variety of QSTR formalisms into a first-order framework [Bhatt et al. 2011]\u2014the challenge being the development of efficient reasoning methods. We expect that this will result in a combination of first-order methods, constraintsolving methods, relation-algebraic methods and specialised methods for the existential theory over the reals, see [van Delden and Mossakowski 2013] for some first steps.\nIntegration with quantitative approaches. Qualitative approaches link metric data and symbolic reasoning, but consistent interpretation of sensor data considering its inevitable uncertainty is a recurring and challenging task. An algorithmic understanding of this problem has to the best of our knowledge not been developed yet. Conversely, it can also be helpful to link qualitative inference with quantitative or other kinds of constraints. As Liu and Li [2012] recently discovered, constraint-based qualitative reasoning with information partially grounded in data can differ significantly from classic qualitative reasoning and thus calls for further exploration.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nAlgebras for higher-arity qualitative calculi. Abstract algebras provide the foundations for symbolic knowledge manipulation and enable optimizations to reasoning procedures. Our study gives an extensive account of algebraic properties of existing binary calculi, but we have also seen that it is highly non-trivial to extend this study to ternary calculi. The main problem is a missing notion of relation algebra already for ternary relations that is general enough to encompass the variety of existing calculi.\nPractical reasoning algorithms. Few of the various methods required in qualitative reasoning (see Table VIII) have been studied rigorously in a practical context. In the light of continuously growing data bases, identifying best-practice algorithms, evaluating the scaling behavior, and potentially developing heuristic approximations will be crucial to foster the relevance of QSTR methods.\nBy completing the picture of computational complexity and identifying practical solutions to reasoning with all individual calculi, either individually or in combination with one another or even other KR techniques, it will be possible to realize truly universal QSTR tools. These tools will foster the position of QSTR as a hub, not only conceptually, but implemented in almost all knowledge-based systems.\nELECTRONIC APPENDIX The electronic appendix for this article can be accessed in the ACM Digital Library."}, {"heading": "ACKNOWLEDGMENTS", "text": "We thank Immo Colonius and Arne Kreutzmann for inspiring discussions during the \u201cSpatial Reasoning Teatime\u201d. Furthermore, we thank Jan-Oliver Wallgr\u00fcn for discussions regarding the taxonomy of QSTR. We thank the anonymous reviewers for their profound and constructive comments. Special thanks go to Erwin R. Catesbeiana for the provision of his sitting area."}, {"heading": "A Survey of Qualitative Spatial and Temporal Calculi \u2014 Algebraic and Computational Properties", "text": "FRANK DYLLA, University of Bremen JAE HEE LEE, University of Bremen TILL MOSSAKOWSKI, University of Magdeburg THOMAS SCHNEIDER, University of Bremen ANDR\u00c9 VAN DELDEN, University of Bremen JASPER VAN DE VEN, University of Bremen DIEDRICH WOLTER, University of Bamberg"}, {"heading": "A. ADDITIONAL PROOFS: SECTION \u201cREQUIREMENTS TO QUALITATIVE", "text": "REPRESENTATIONS\u201d\nA.1. Proof of Fact 3.24 Fact 3.24. Every strong permutation (composition) is weak, and every weak permutation (composition) is abstract.\nPROOF. \u201cEvery strong permutation is weak.\u201d We assume that the permutation \u02d8 associated with \u03c0 is strong, i.e., for all r \u2208 Rel,\n\u03d5(r\u0306 ) = \u03d5(r)\u03c0, (18)\nand show that \u02d8 is weak, i.e., for all r \u2208 Rel: r\u0306 = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(r)\u03c0} (19)\nFor \u201c\u2286\u201d, it suffices to show that, for every S \u2286 Rel with \u03d5(S) \u2287 \u03d5(r)\u03c0, we have r\u0306 \u2286 S. This follows from the inclusion \u201c\u2286\u201d of (18) and the injectivity of \u03d5. For \u201c\u2287\u201d, let s \u2208 \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(r)\u03c0}, that is, s \u2208 S for every S \u2286 Rel with \u03d5(S) \u2287 \u03d5(r)\u03c0}. Since r\u0306 is such an S due to the inclusion \u201c\u2287\u201d of (18), we have s \u2208 r\u0306 .\n\u201cEvery weak permutation is abstract.\u201d Strictly speaking, the phrasing in Definition 3.21 implies this statement. However, it is easy to show the stronger statement that (19) implies\n\u03d5(r\u0306 ) \u2287 \u03d5(r)\u03c0 . Indeed, this is justified by the following chain of equalities and inclusions.\n\u03d5(r\u0306 ) = \u03d5 (\u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(r)\u03c0} ) = \u22c2 {\u03d5(S) \u2286 Rel | \u03d5(S) \u2287 \u03d5(r)\u03c0}\n\u2287 \u03d5(r)\u03c0,\nwhere the first equality follows from (19), the second follows from the extension of \u03d5 to composite relations as per Definition 3.16, and the final inclusion is an obvious property of sets.\nThe respective statements about composition are proven analogously.\n\u00a9 YYYY ACM 0360-0300/YYYY/01-ARTA $15.00 DOI:http://dx.doi.org/10.1145/0000000.0000000\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nA.2. Proof of Fact 3.25 Fact 3.25. Given a qualitative calculus (Rel, Int,\u02d81, . . . ,\u02d8k, ) based on the interpretation Int = (U , \u03d5, \u00b7\u03c01 , . . . , \u00b7\u03c0k , \u25e6), the following hold. For all relations R \u2286 Rel and i = 1, . . . , k:\n\u03d5(R\u02d8i) \u2287 \u03d5(R)\u03c0i (20) For all relations R1, . . . , Rm \u2286 Rel:\n\u03d5( (R1, . . . , Rm)) \u2287 \u25e6(\u03d5(R1), . . . , \u03d5(Rm)) (21)\nIf \u02d8i is a weak permutation, then, for all R \u2286 Rel: R\u02d8i = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(R)\u03c0i} (22)\nIf \u02d8i is a strong permutation, then, for all R \u2286 Rel:\n\u03d5(R\u02d8i) = \u03d5(R)\u03c0i (23) If is a weak composition, then, for all R1, . . . , Rm \u2286 Rel:\n(R1, . . . , Rm) = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u25e6(\u03d5(R1), . . . , \u03d5(Rm)} (24)\nIf is a strong composition, then, for all R1, . . . , Rm \u2286 Rel: \u03d5( (R1, . . . , Rm)) = \u25e6(\u03d5(R1), . . . , \u03d5(Rm)) (25)\nPROOF. For (20), consider \u03d5(R\u02d8i) = \u22c3 r\u2208R \u03d5(r\u0306 i) definition of \u03d5(R\u02d8i)\n\u2287 \u22c3 r\u2208R \u03d5(r)\u03c0i property (6)\n= (\u22c3 r\u2208R \u03d5(r) )\u03c0i distributivity in set theory\n= \u03d5(R)\u03c0i definition of \u03d5(R).\nFor (21), consider \u03d5( (R1, . . . , Rm)) = \u22c3\nr1\u2208R1\n\u00b7 \u00b7 \u00b7 \u22c3\nrm\u2208Rm\n\u03d5( (r1, . . . , rm)) definition of \u03d5( (R1, . . . , Rm))\n\u2287 \u22c3\nr1\u2208R1\n\u00b7 \u00b7 \u00b7 \u22c3\nrm\u2208Rm\n\u25e6(\u03d5(r1), . . . , \u03d5(rm)) property (7)\n= \u25e6 ( \u22c3 r1\u2208R1 \u03d5(r1), . . . , \u22c3 rm\u2208Rm \u03d5(rm) ) distributivity in set theory\n= \u25e6(\u03d5(R1), . . . , \u03d5(Rm)) definition of \u03d5(Ri)\nProperties (23) and (25) are proven using (9) and (11) in the same way as we have just proven (20) and (21) using (6) and (7). For (22), let R = {r1, . . . , rn} for some n > 1 and r1, . . . , rn \u2208 Rel. Due to Definition 3.21 (8), we have that\nrj\u02d8 i = \u22c2 {S \u2286 Rel | \u03d5(S) \u2287 \u03d5(ri)\u03c0i}\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nfor every j = 1, . . . , n. Let Sj1, . . . , Sjmj be the S over which the above intersection ranges, i.e.,\nrj\u02d8 i = mj\u22c2 h=1 Sjh .\nDue to Definition 3.16, we have that\nR\u02d8i = n\u22c3 j=1 rj\u02d8 i = n\u22c3 j=1 mj\u22c2 h=1 Sjh = m1\u22c2 h1=1 \u00b7 \u00b7 \u00b7 mn\u22c2 hn=1 n\u22c3 j=1 Sjhj ,\nwhere the last equality is due to the distributivity of intersection over union. Now (22) follows if we show that, for every S \u2208 Rel, the following are equivalent. (1) \u03d5(S) \u2287 \u03d5(R)\u03c0i (2) there are S1, . . . , Sn with S = S1\u222a\u00b7 \u00b7 \u00b7\u222aSn and \u03d5(Sj) \u2287 \u03d5(rj)\u03c0i for every j = 1, . . . , n. For \u201c1 \u21d2 2\u201d, assume \u03d5(S) \u2287 \u03d5(R)\u03c0i , i.e., \u03d5(S) \u2287 \u22c3n j=1 \u03d5(rj)\n\u03c0i (Definition 3.16). If we further assume that S = {s1, . . . , s`}, which implies that \u03d5(S) \u2287 \u22c3` h=1 \u03d5(sh) (Definition 3.16), then we can choose Sj = {sh | \u03d5(sh)\u2229\u03d5(rj)\u03c0i 6= \u2205} for every j = 1, . . . , n. Because C is based on JEPD relations, we have that \u03d5(Sj) \u2287 \u03d5(rj)\u03c0i .\nFor \u201c2 \u21d2 1\u201d, let S = S1 \u222a \u00b7 \u00b7 \u00b7 \u222a Sn and \u03d5(Sj) \u2287 \u03d5(rj)\u03c0i for every j = 1, . . . , n. Due to Definition 3.16 and because C is based on JEPD relations, we have that \u03d5(S) =\u22c3n j=1 \u03d5(Sj). Hence, \u03d5(S) \u2287 \u22c3n j=1 \u03d5(rj)\n\u03c0i via the assumption, and \u03d5(S) \u2287 \u03d5(R)\u03c0i due to Definition 3.16.\n(24) is proven analogously."}, {"heading": "B. ADDITIONAL PROOFS: SECTION \u201cRELATION ALGEBRAS\u201d B.1. R6 and R6l from Table IX are equivalent given R7 and R9", "text": "We only show that R6 implies R6l; the converse direction is analogous. We first establish that id\u0306 = id.\nid\u0306 = id\u0306 id (R6) = id\u0306 (id\u0306 )\u0306 (R7) = (id\u0306 id)\u0306 (R9) = (id\u0306 )\u0306 (R6) = id (R7)\nNow we use this lemma to establish R6l.\nid r = (id\u0306 )\u0306 (r\u0306 )\u0306 (R7) = (r\u0306 id\u0306 )\u0306 (R9) = (r\u0306 id)\u0306 (Lemma) = (r\u0306 )\u0306 (R6) = r (R7)\nB.2. Proof of Fact 4.2 Fact 4.2. Every qualitative calculus (Def. 3.16) satisfies R1\u2013R3, R5, R \u2287 7 , R8, W\n\u2287, S\u2287 for all (atomic and composite) relations. This axiom set is maximal: each of the remaining axioms in Table IX is not satisfied by some qualitative calculus.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nPROOF. Axioms R1\u2013R3 are always satisfied because they are a characterization of a Boolean algebra; and the set operations on the relations form a Boolean algebra because \u03d5 maps base relations to a set of JEPD relations and complex relations to sets of interpretations of base relations.\nThe definition of the converse and composition operations for non-base relations in Definition 3.16 ensures that Axioms R5 and R8 hold.\nAxiom R\u22877 always holds due to JEPD and the converse being weak: For every r \u2208 Rel, we have that\n\u03d5(r\u0306 )\u0306 \u2287 \u03d5(r\u0306 )\u0306 \u2287 \u03d5(r)\u0306 \u02d8 = \u03d5(r), where the first inclusion is due to Fact 3.25 (12) with R = r\u0306 , the second inclusion is due to Definition 3.16 (6) for r, and the equation is due to the properties of binary relations over the universe U . Since the \u03d5(r) are a set of JEPD relations, r\u0306 \u02d8 \u2287 r follows. This reasoning carries over to arbitrary relations.\nAxioms W\u2287 and S\u2287 always hold due to JEPD and the composition being weak: For every r \u2208 Rel, we have that\n\u03d5((r 1) 1) \u2287 \u03d5(r 1) \u25e6 \u03d5(1) = \u03d5(r 1) \u25e6 (U \u00d7 U) \u2287 \u03d5(r 1),\nwhere the first inclusion is due to to Fact 3.25 (13) with R = r 1 and S = 1, and the last inclusion is due to the fact that R \u25e6 (U \u00d7U) \u2287 R for any binary relation R \u2286 U \u00d7U . Since the \u03d5(r) are a set of JEPD relations, (r 1) 1 \u2287 r 1 follows. Again, this reasoning carries over to arbitrary relations.\nAxioms R\u22866 , R \u2286 6l , R \u2286 7 are violated by the following calculus. Let Rel = {r1, r2}, U =\n{0, 1}, id = r1, 1 = {r1, r2} with:\n\u03d5(r1) = {(0, 0), (0, 1)} r1\u0306 = 1 r1 r1 = 1 \u03d5(r2) = {(1, 0), (1, 1)} r2\u0306 = 1 r1 r2 = r1\nr2 r1 = 1 r2 r2 = r2\nThis calculus satisfies the conditions in Definition 3.16 but violates Axioms R\u22866 , R \u2286 6l , R\u22867 :\nR\u22866 r1 id = 1 * r1 R\u22866l id r1 = 1 * r1 R\u22867 r1\u0306 \u02d8 = 1 * r1\nAxioms W\u2286, S\u2286, R\u22864 , R \u2287 4 , R \u2287 6 , R \u2287 6l , R \u2286 9 , R \u2287 9 , R \u2286 10, R \u2287 10, PL \u21d2, PL\u21d0 are violated by the following calculus. Let Rel = {r1, r2, r3, r4}, U = {0, 1}, id = r1, 1 = {r1, r2} with:\n\u03d5(r1) = {(0, 0)} r1\u0306 = r1 \u03d5(r2) = {(1, 1)} r2\u0306 = r2 \u03d5(r3) = {(0, 1)} r3\u0306 = r4 \u03d5(r4) = {(1, 0)} r4\u0306 = r3\nright operand r1 r2 r3 r4 left operand\nr1 r1 \u2205 r3 \u2205 r2 \u2205 r3 \u2205 r4 r3 \u2205 r3 \u2205 r1, r4 r4 r1, r4 \u2205 r2 \u2205\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nThis calculus satisfies the conditions from Definition 3.16 but violates Axioms W\u2286, S\u2286, R\u22864 , R \u2287 4 , R \u2287 6 , R \u2287 6l , R \u2286 9 , R \u2287 9 , R \u2286 10, R \u2287 10, PL \u21d2, PL\u21d0:\nW\u2286,S\u2286 : (r1 1) 1 = 1 * {r1, r3, r4} = r1 1\nR\u22864 : (r1 r3) r4 = r3 r4 = {r1, r4} * r1 = r1 {r1, r4} = r1 (r3 r4) R\u22874 : (r4 r3) r4 = r2 r4 = r4 + {r1, r4} = r4 {r1, r4} = r4 (r3 r4) R\u22876 : r2 id = r2 r1 = \u2205 + r2 R\u22876l : id r2 = r1 r2 = \u2205 + r2\nR\u22869 ,R \u2287 9 : (r3 r4)\u0306 = {r1, r4}\u0306 = {r1, r3} * + {r1, r4} = r3 r4 = r4\u0306 r3\u0306\nR\u228610,R \u2287 10 : r3\u0306 r3 r1 = r4 \u2205 = r4 1 = {r1, r2, r4} * + {r2, r3, r4} = r1\nPL\u21d2 : (r1 r4) \u2229 r1\u0306 = \u2205 \u2229 r1 = \u2205 but (r4 r1) \u2229 r1\u0306 = {r4, r1} \u2229 r1 = r4 6= \u2205 PL\u21d0 : (r4 r1) \u2229 r1\u0306 = {r4, r1} \u2229 r1 = r1 6= \u2205 but (r1 r1) \u2229 r4\u0306 = r1 \u2229 r3 = \u2205\nRemark B.1. Of course, there are calculi that satisfy only the weak conditions from Definition 3.16 but are a relation algebra, for example the following. Let Rel = {r0, r1}, U = {0, 1}, id = r1, 1 = {r1, r2} with:\n\u03d5(r1) = {(0, 0), (0, 1)} r1\u0306 = r2 r1 r1 = r1 \u03d5(r2) = {(1, 0), (1, 1)} r2\u0306 = r1 r1 r2 = 1\nr2 r1 = 1 r2 r2 = r2"}, {"heading": "C. ADDITIONAL COMPLEXITY PROOFS", "text": "Fact C.1. Consistency of QCSPs for DRA-conn can be decided in time O(n3).\nPROOF. The DRA-conn calculus is an abstraction of the more fine-grained dipole calculi, only retaining connectivity relations of line segments. Connectivity is represented by equality relations between positions of a dipole\u2019s start or end point. For checking consistency of a set of DRA-conn constraints, the clusters of equally positioned points need to be constructed. This can easily be done with the algebraic closure algorithm. Since the effect of a disjunctive relation in DRA-conn with respect to single point equality is identical to absence of the constraint, reasoning with partial atomic QCSPs is equivalent in complexity to reasoning with general QCSPs with DRA-conn.\nFact C.2. Consistency of atomic QCSPs for EIA can be decided in polynomial time.\nPROOF. As described by Zhang and Renz [2014], extended interval algebra constraints can be translated to INDU constraint networks, and those can be decided in polynomial time [Balbiani et al. 2006]. EIA describes relative ordering with respect to interval start, end, and center point. Consequently, for every single variable in a given EIA network, the translation introduces three variables representing an interval and its two halves, together with the obvious constraints between them.\nFact C.3. The tractable subset of GenInt consisting of all strongly pre-convex general relations covers less than 1\u2030 of all relations for the case of 3-intervals.\nPROOF. Generalized intervals [Condotta 2000] generalize IA relations to tuples of intervals. Relations between a p- and and a q-tuple, general relations, are represented in a p \u00d7 q matrix of IA relations. A strongly pre-convex general relation is a matrix\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nwhere all entries are strongly preconvex. Since the strongly pre-convex relations are a subset of pre-convex relations and only some 10% of all IA relations are pre-convex, at most a fraction of 0.1p\u00b7q of all general relations is strongly pre-convex, which is far less than 1\u2030 if p = q = 3. Even if we could take the matrix entries from a tractable subset of, say, 20% of IA, we would still get 0.2p\u00b7q 1\u2030 tractable relations.\nFact C.4. Deciding consistency of atomic QCSPs for OM-3D is NP-hard and can be reduced to solving multivariate polynomial equalities.\nPROOF. OM-3D generalizes the double-cross calculus from 2D arrangement to 3D arrangement, containing the 2D case as a sub-algebra. Since base relations of the 2D case are already NP-hard [Wolter and Lee 2010], so is OM-3D. All base relations for the 3D case can be modeled by multivariate polynomial equalities similar to the 2D case.\nFact C.5. Consistency of QCSPs with convex relations for STARm and STARrm can be decided in polynomial time.\nPROOF. STARm defines 4m relations (line segments and sectors); STARrm defines 2m relations which are all sectors. Tractability of convex relations follows from the observation that these can be represented by half-plane intersections using linear inequalities, systems of which can be decided in polynomial time using linear programming techniques.\nWhile the number of all relations in STAR(r)m grows exponentially with m, there are only m convex relations that include 1, . . . ,m relations, i.e., O(m2) convex relations. The percentage of convex relations thus decreases with increasing values of m."}, {"heading": "D. EXPRESSIVITY RELATIONS BETWEEN CALCULI", "text": "We give additional proof sketches for expressivity relations presented in Figure 9. Recall that we say a calculus is of equivalent expressivity as another calculus if every QCSP instance of the first can be simulated by a propositional formulae of constraints in the second.\nTHEOREM D.1. Temporal calculi PC,IA,SIC,DIA,GenInt and spatial calculi BA, CDC, and CI form a cluster of expressivity.\nPROOF SKETCH. Temporal point- and interval-based calculi (semi-intervals in case of SIC) represent ordering relations which can all be translated into Boolean formulae of PC relations among interval start and end point. Solutions for QCSPs over these temporal calculi in the cluster can easily be obtained from their corresponding PC formulae by instantiating intervals from their start and and points.\nThe spatial calculus BA is an independent product IA\u00d7IA easily expressible using propositional BA formulae, analogously is CDC expressible as product PC\u00d7PC. CI represents a cyclic order (e.g., intervals of longitude). These relations can be simulated with PC by instantiating an lower and upper limit points p\u2212 and p+ and splitting all intervals containing either p\u2212 or p+ to continue from the opposite border.\nTHEOREM D.2. VR relations can be expressed using LR constraints.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\nPROOF SKETCH. VR expresses visibility of convex objects in the plane using ternary relations. Visibility relations can be represented based on the relative position of tangent points of the base entities, e.g., visibility between two objects is not affected if and only if a third object discrete from the first two does not intersect with the four-sided polygon obtained by connecting the upper and lower tangent points of the two objects. Overlap between polygonal contours can easily be written using LR constraints, e.g., a point is outside a convex polygon if it is located to the right hand side of at least one edge of the polygon, assuming the polygon edges to be ordered in counter-clockwise manner. The construction is then performed for every visibility relation, instantiating lower and upper tangent points individually for every pair of VR entities. The VR entities which are regions are then represented only by their set of tangent points which can be enforced to be arranged along a convex-shaped contour.\nTHEOREM D.3. Calculi TPCC,OPRA,EOPRA, 1-, and 2-cross constitute a cluster of equal expressive power for Boolean combinations of constraints.\nPROOF SKETCH. This group of calculi considers locations of points in the Euclidean plane. We first consider equivalence of OPRA, 1-, and 2-cross and later address TPCC and EOPRA which augment the first group by additional distance concepts. All calculi from the first group employ a partition scheme that is based on relations that specifies directions to points relative to some entity-specific orientation (either by reference to another entity in case of 1-, and 2-cross or as intrinsic part of the base entity in case of OPRA). Directions measured in radians are represented by membership in a finite and JEPD set of intervals partitioning (0, 2\u03c0], using solely rational ratios of \u03c0 as boundaries. By geometric construction one can obtain any of these direction intervals (i.e., sectors) of these calculi from a any partition scheme for point location that is able to express superposition of points, a statement that two line segments connecting three points A,B,C meet in a right angle, i.e., \u2220(A,B,C) = \u03c02 as well as a statement saying that a point is located directly in front of some point P with respect to \u201cfront\u201d orientation of P All the named calculi meet these conditions and allow for the following construction: Let P be the entity for which we seek to construct direction intervals in form of a sector. First, enforce four points A,B,C,D to form a rectangle with A in superposition with P and C in front of P . Next we construct E to be positioned on the intersection of AC and BD which meet in a right angle. Doing so we have constructed a square. Repeating the construction we can construct a grid from which we can derive the desired angular sectors.\nNow we show that OPRA, TPCC, and EOPRA have the same expressivity. EOPRA augments OPRA by a relative distance concept in the same way TPCC augments 1-cross. Constructions translating EOPRA to OPRA are very similar to translating TPCC to 1-cross, so we only consider the first case. Distance classes in the calculi OPRA and TPCC are named \u201cclose\u201d, \u201csame\u201d, and \u201cfar\u201d and are defined by comparison of the Euclidean distance between two entities with an object-specific threshold distance. This means that the statement \u201cA is close to B\u201d is independent from \u201cB is close to A\u201d. These distance constraints can be simulated in OPRA by introducing border points for each entity along the \u201csame\u201d distance, one for every pair of entities. To this end we have to enforce that all border points are in the same distance to their corresponding entity. This can be accomplished by OPRA constraints by first constructing a bisector for a pair of border points (as done in the construction above) and, second, enforcing a right angle between the line connecting two border points with the bisector.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY."}, {"heading": "E. DETAILED DESCRIPTION OF THE TEST RESULTS BY CALCULUS: SECTION \u201cALGEBRAIC PROPERTIES OF EXISTING CALCULI\u201d", "text": "The results of the analysis are summarized in Table X. A part of the calculi have already been tested by Mossakowski [2007], using a different CASL specification based on an equivalent axiomatization from [Ligozat and Renz 2004]. He comprehensively reports on the outcome of these tests, and on errors discovered in published composition tables. We now list counterexamples for the cases where axioms are violated.\ncCDR\n\u2014 R6 is violated for all base relations but one. \u2014 R6l is violated for only 209 base relations. \u2014 R7 is violated for 214 base relations. \u2014 R9 is violated for 5,607 pairs of base relations. Counterexample:\n(S S)\u0306 6= S\u0306 S\u0306\n\u2014 R10 is violated for 41,834 pairs of base relations. Counterexample:\nS\u0306 S S * S\n\u2014 PL is violated for 22,976 triples of base relations. Counterexample:\n(W-NW-N-NE-E NW-N-NE) \u2229 B-S\u0306 = {} 6= {B} = (NW-N-NE B-S) \u2229W-NW-N-NE-E\u0306\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\n\u2014 R4 is violated for 2,936,946 triples of base relations. Counterexample:\nW-NW-N-NE-E-SE (W-NW-N-NE-E-SE W-NW-N-NE-E) 6= (W-NW-N-NE-E-SE W-NW-N-NE-E-SE) W-NW-N-NE-E\n\u2014 S is violated for 38 base relations. Counterexample:\n(B-S-W-NW 1) 1 6= B-S-W-NW 1\nDRA\n\u2014 DRAc violates R4 for 704 triples of base relations. Counterexample:\nrrrl (rrrl llrl) 6= (rrrl rrrl) llrl\n\u2014 DRAf violates R4 for 71,424 triples of base relations, with the same counterexample, or with the one reported by Moratz et al. [2011], who attribute the violation of associativity to the composition operation being weak and illustrate this by the example bfii lllb = llll. \u2014 DRAfp and DRA-conn satisfy all axioms.\nINDU R4 is violated by 1,880 triples of base relations. The violation of associativity has already been reported and attributed to the absence of strong composition in [Balbiani et al. 2006]: e.g.,\nbi> (mi> m>) 6= (bi> mi>) m>.\nMC-4 MC-4 is not based on a partition scheme because the relation cg (\u201ccongruent\u201d), which behaves in the context of the other three relations as if it were an identity relation, is coarser than id2. Furthermore, MC-4 is still an abstract partition scheme and thus fits into our general notion of a calculus.\nFor testing purposes, we have implemented an artificial variant of MC-4 where we divided the cg relation into id2 and the difference of cg and id2. That calculus too is a relation algebra.\nOPRAn, n 6 8 R4 is violated by\n1,664 triples for OPRA1, e.g., 33 (32 03) 6= (33 32) 03 257,024 triples for OPRA2, e.g., 77 (77 67) 6= (77 77) 67\n2,963,952 triples for OPRA3, e.g., 1111 (1111 1110) 6= (1111 1111) 1110 16,711,680 triples for OPRA4, e.g., 1515 (1515 1515) 6= (1515 1515) 1515 63,840,000 triples for OPRA5, e.g., 1919 (1919 1919) 6= (1919 1919) 1919 190,771,200 triples for OPRA6, e.g., 2323 (2323 2323) 6= (2323 2323) 2323 481,275,648 triples for OPRA7, e.g., 2727 (2727 2727) 6= (2727 2727) 2727 1,072,693,248 triples for OPRA8, e.g., 3131 (3131 3131) 6= (3131 3131) 3131\nQTC\n\u2014 QTC-B11, -B12, -C21, -C22 violate R6 and R6l for all base relations but one; QTC-B21, -B22 do so for all base relations. After introducing a new id relation and making the relations JEPD, QTC-B11 and -B12 satisfy all axioms [Mossakowski 2007].\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY.\n\u2014 QTC-C21 (81 base relations) violates R4 for 292,424 triples, R9 for 160 pairs, R10 for 80 pairs, and PL for 1056 triples.5 \u2014 QTC-C22 (209 base relations) violates R9 for 1248 pairs, R10 for 624 pairs, PL for 12,768 triples, and R4 for 7,201,800 triples, see also footnote 5.\nRCD\n\u2014 R6 is violated for all base relations but one. \u2014 R6l is violated for only 33 base relations. \u2014 R7 is violated for 32 base relations. \u2014 R9 is violated for 855 pairs. Counterexample:\n(B S:SW)\u0306 6= S:SW\u02d8 B\u0306 \u2014 R10 is violated for 671 pairs. Counterexample:\nB\u0306 B S:SW * S:SW \u2014 PL is violated for 3424 triples. Counterexample:\n(B N) \u2229 B:W\u02d8 = \u2205 < (N B:W) \u2229 B\u0306 = \u2205\n5Note that, for calculi that violate R9, the equivalence between PL and R10 is no longer ensured, hence the mentioning of both of them. Furthermore, R10 is the only axiom that should be tested for all relations, but we have only tested it for all base relations. Therefore, there could be more violations than the four listed. The same cautions apply to QTC-C22.\nACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "partition schemes. Ligozat and Renz [2004] note that most spatial and temporal calculi are based on a set of JEPD (jointly exhaustive and pairwise disjoint) domain relations. The following definition is predominant in the QSTR literature [Ligozat and Renz 2004; Cohn and Renz 2008]. Definition 3.4. Let U be a universe and R a set of non-empty domain relations of the same arity n. R is called a set of JEPD relations over U if the relations in R are jointly exhaustive, i.e., U = \u22c3 r\u2208R r, and pairwise disjoint. ACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY. A:8 Frank Dylla et al. An n-ary abstract partition scheme is a pair (U ,R) whereR is a set of JEPD relations over the universe U . The relations in R are called base relations. Example 3.5. The calculus PC1 is based on the binary abstract partition scheme S(PC1) := (R, {<,=, >}) where R is the set of reals and {<,=, >} is clearly JEPD. For RCC-5, the universe is often chosen to be the set of all regular closed subsets of the 2or 3-dimensional space R or R. The five base relations from Figure 4 (b) are JEPD. For CYCb, the universe is the set of all oriented line segments in the plane R, given by angles between 0\u00b0 and 360\u00b0. The four base relations from Figure 4 (c) are JEPD. \u2022 In Definition 3.4, the universe U represents the set of all spatial (or temporal) entities. The main ingredients of a calculus will be relation symbols representing the base relations in the underlying partition scheme. A constraint linking an n-tuple t of entities via a relation symbol will thus represent complete information (modulo the qualitative abstraction underlying the partition scheme) about t. Incomplete information is modeled by t being in a composite relation, which is a set of relation symbols representing the union of the corresponding base relations. The set of all relation symbols represents the universal relation (the union of all base relations) and indicates that no information is available. Example 3.6. In PC1, \u201cx < y\u201d represents the relationship a < b, which holds complete information because < is atomic in S(PC1). The statement \u201cx {<, =} y\u201d represents the coarser relationship a 6 b holding the incomplete information \u201ca < b or a = b\u201d. Clearly \u201cx {<, =, >} y\u201d holds no information: \u201ca < b or a = b or a > b\u201d is always true. \u2022 The requirement that all base relations are JEPD ensures that every n-tuple of entities belongs to exactly one base relation. Thanks to PD (pairwise disjointness), there is a unique way to represent any composite relation using relation symbols and, due to JE (joint exhaustiveness), the empty relation can never occur in a consistent set of constraints, which is relevant for reasoning, see Section 3.2. Example 3.7. Consider the modification PC1 based on the non-PD set {6,>}. Then the relationship a = b can be expressed in two ways using relation symbols <= and >= representing 6 and >: \u201cx <= y\u201d and \u201cx >= y\u201d. Conversely, consider the variant PC 1 based on the non-JE set {<,>}. Then the constraint a = b cannot be expressed. Therefore, in any given set of constraints where it is known that x, y stand for identical entities, we would find the empty relation between x, y. The standard reasoning procedure described in Section 3.2 would declare such sets of constraints to be inconsistent, although they are not \u2013 we have simply not been able to express x = y. \u2022 Partition schemes, identity, and converse. Ligozat and Renz [2004] base their definition of a (binary) qualitative calculus on the notion of a partition scheme, which imposes additional requirements on an abstract partition scheme. In particular, it requires that the set of base relations contains the identity relation and is closed under the converse operation. The analogous definition by Condotta et al. [2006] captures relations of arbitrary arity. Before we define the notion of a partition scheme, we discuss the generalization of identity and converse to the n-ary case. The binary identity relation is given as usual by id = {(u, u) | u \u2208 U}. (1) Example 3.8. Clearly, = in S(PC1) and \u201cequals\u201d in S(RCC-5) and S(CYCb) are the identity relation over the respective domain. \u2022 ACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY. A Survey of Qualitative Spatial and Temporal Calculi A:9 The most inclusive way to generalize (1) to the n-ary case is to fix a setM of numbers of all positions where tuples in id are required to agree. Thus, an n-ary identity relation is a domain relation idnM with M \u2286 {1, . . . , n} and |M | > 2, which is defined by idnM = {(u1, . . . , un) \u2208 U | ui = uj for all i, j \u2208M}. This definition subsumes the \u201cdiagonal elements\u201d \u2206ij of Condotta et al. [2006] for the case |M | = 2. However, it is not enough to restrict attention to |M | = 2 because there are ternary calculi which contain all identities id31,2, id 3 1,3, id 3 2,3, and id 3 1,2,3, an example being the LR calculus, which was described as \u201cthe finest of its class\u201d [Scivos and Nebel 2005]. Since the relations in an n-ary abstract partition scheme are JEPD, all identities idnM are either base relations or subsumed by those. The stronger notion of a partition scheme should thus require that all identities be made explicit. For binary relations, id from (1) is the unique identity relation id2{1,2}. The standard definition for the converse operation  \u0306 on binary relations is r\u0306 = {(v, u) | (u, v) \u2208 r}. (2) Example 3.9. In S(PC1) we have that < \u0306 is >; = \u0306 is =; > \u0306 is <. The converses of the base relations in S(RCC-5) and S(CYCb) were named in Examples 3.2 and 3.3. \u2022 In order to generalize the reversal of the pairs (u, v) in (2) to n-ary tuples, we consider arbitrary permutations of n-tuples. An n-ary permutation is a bijection \u03c0 : {1, . . . , n} \u2192 {1, . . . , n}. We use the notation \u03c0 : (1, . . . , n) 7\u2192 (i1, . . . , in) as an abbreviation for \u201c\u03c0(1) = i1, . . . , \u03c0(n) = in\u201d. The identity permutation \u03b9 : (1, . . . , n) 7\u2192 (1, . . . , n) is called trivial; all other permutations are nontrivial. A finite set P of n-ary permutations is called generating if each n-ary permutation is a composition of permutations from P . For example, the following two permutations form a (minimal) generating set: sc : (1, . . . , n) 7\u2192 (2, . . . , n, 1) (shortcut) hm : (1, . . . , n) 7\u2192 (1, . . . , n\u2212 2, n, n\u2212 1) (homing) The names have been introduced in Freksa and Zimmermann [1992] for ternary permutations, together with a name for a third distinguished permutation: inv : (1, . . . , n) 7\u2192 (2, 1, 3 . . . , n) (inversion) Condotta et al. [2006] call shortcut \u201crotation\u201d (ry) and homing \u201cpermutation\u201d (r#). Example 3.10. In Figure 5 we depict the permutations sc (rotation), hm (permutation), and inv for one relation from the ternary Double Cross Calculus (2-cross) [Freksa and Zimmermann 1992]. The 2-cross relations specify the location of a point P3 relative to an oriented line segment given by two points P1, P2. Figure 5 a shows the relation right-front. The relations resulting from applying the permutations are depicted in Figure 5 b; e.g., sc(right-front) = right-back because the latter is P1\u2019s position relative to the line segment \u2212\u2212\u2212\u2192 P2P3. Figure 5 c will be relevant later. For n = 2, sc, hm and inv coincide; indeed, there is a unique minimal generating set, which consists of the single permutation  \u0306 : (1, 2) 7\u2192 (2, 1). For n > 3, there are several generating sets, e.g., {sc,hm} and {inv,hm}. Now an n-ary permutation operation is a map \u00b7 that assigns to each n-ary domain relation r an n-ary domain relation denoted by r, where \u03c0 is an n-ary permutation and the following holds: r = {(u\u03c0(1), . . . , u\u03c0(n)) | (u1, . . . , un) \u2208 r} ACM Computing Surveys, Vol. V, No. N, Article A, Publication date: January YYYY. A:10 Frank Dylla et al.", "creator": "LaTeX with hyperref package"}}}