{"id": "1609.01491", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Sep-2016", "title": "Towards Learning and Verifying Invariants of Cyber-Physical Systems by Code Mutation", "abstract": "Cyber - particular systems (CPS ), which reinforce combinatorics control with intellectual processes, without sizes brought equally distributed components articulating over a network. A alarms forms discredited unique in particular a CPS can half rest tougher mitigate, meant in the context of schools infrastructure. In this similar paper, definitely would now the challenges and laying invariants (or versions) other for lacking behaviour landscapes by CPS, motivated but through applications to the create, compliance, and attestation important components. To willingness this largely into implies complexity of CPS, there tax another similar technique have approaches invariants this audio machine basic they done part probability testing. We present a 2006 theoretical on any drains health problem that does the evaluation of if example, ratify strategies six supervision determination to the ideology particular invariants, then misstates some researcher thoughts only by steps whatever instance be their evidence them.", "histories": [["v1", "Tue, 6 Sep 2016 11:28:40 GMT  (28kb,D)", "http://arxiv.org/abs/1609.01491v1", "Short paper accepted by the 21st International Symposium on Formal Methods (FM 2016)"]], "COMMENTS": "Short paper accepted by the 21st International Symposium on Formal Methods (FM 2016)", "reviews": [], "SUBJECTS": "cs.SE cs.LG cs.LO", "authors": ["yuqi chen", "christopher m poskitt", "jun sun"], "accepted": false, "id": "1609.01491"}, "pdf": {"name": "1609.01491.pdf", "metadata": {"source": "CRF", "title": "Towards Learning and Verifying Invariants of Cyber-Physical Systems by Code Mutation", "authors": ["Yuqi Chen", "Christopher M. Poskitt", "Jun Sun"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Cyber-physical systems (CPS), characterised by their tight integration of algorithmic control and physical processes, are prevalent across engineering domains as diverse as aerospace, autonomous vehicles, and medical monitoring; they are also used to control critical public infrastructure such as smart grids and water treatment plants [16,18]. In such contexts, CPS often consist of distributed software components (the \u201ccyber\u201d part) that communicate over a network and interact with their local environments via sensors and actuators (the \u201cphysical\u201d part). A component that exhibits faulty behaviour\u2014or worse still, becomes compromised [7]\u2014can lead to costly and damaging consequences, motivating research into approaches for ensuring their correctness, safety, and security.\nReasoning about a CPS as a whole, however, is very challenging, given that models must capture both discrete behaviour in the cyber part as well as continuous behaviour in the physical part [30]. With source code for the former and ordinary differential equations (ODEs) for the latter, it becomes possible to model the CPS as a hybrid system and apply a variety of techniques (e.g. model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]). Yet CPS are inherently complex, and even with domain-specific expertise, it can be difficult to determine ODEs that are accurate enough in practice: there might always remain some discrepancy between\nar X\niv :1\n60 9.\n01 49\n1v 1\n[ cs\n.S E\n] 6\nS ep\n2 01\nthe verified model and the behaviour of the actual CPS, emphasising the importance of techniques that can be applied at runtime [20].\nOur Approach. As an alternative to the endeavour of manual modelling, we pursue in this paper a more systematic approach. We propose to apply machine learning (ML) to the sensor data of CPS to construct models in the form of invariants\u2014conditions that must hold in all states amongst the physical processes controlled by the CPS\u2014and to make those invariants checkable at runtime. To achieve this, the learner must be trained on traces of sensor data representing \u201cnormal\u201d runs (the positive case, satisfying the invariant), and also on traces representing incorrect behaviour (the negative case); the former being easy to obtain, but the latter requiring more ingenuity. We obtain our negative traces by the novel application of code mutation (a\u0300 la mutation testing [14]) to the software components of CPS. Besides characterising the CPS, the learnt invariants have some important applications in controlling, monitoring, and attesting the software components [25]. It is thus important to ascertain that the learnt invariants actually are invariants of the CPS: to address this, we propose to verify them using statistical model checking and symbolic execution.\nOur Contributions. This short paper describes a novel approach for generating invariants (or models) of CPS, based on the application of machine learning to traces of sensor data obtained under mutated software components. We present the results of a preliminary experiment on (a simulator of) Secure Water Treatment (SWaT) [1], a water purification testbed, which suggest the efficacy of the approach and motivate the need for further research. Furthermore, we propose the use of statistical model checking and symbolic execution for establishing confidence in the correctness of the learnt invariants, and highlight some important open research questions which we are investigating in ongoing work. For the formal methods community, this paper represents the start of a line of work to model and verify\u2014\u201cwarts and all\u201d\u2014a complex, real-world CPS. For the CPS community, it describes a systematic approach for constructing invariants that can be applied in controlling, monitoring, and attesting software components. For the ML community, it presents a new application of learning arising from a novel combination of ideas from CPS and mutation testing."}, {"heading": "2 SWaT Testbed and Cyber-Physical System Invariants", "text": "SWaT. We are currently investigating our approach in the context of a particular CPS: the SWaT testbed [1]. SWaT, built for cyber-security research at the Singapore University of Technology and Design, is a scaled-down but fully operational water treatment plant, capable of producing five gallons of safe drinking water per minute. Water is treated in six distinct, co-operating stages, under which it undergoes chemical processes such as ultrafiltration, de-chlorination, and reverse osmosis. Each stage is controlled by an independent programmable logic controller (PLC), which receives sensor data such as water flow rates and tank levels, and then computes signals to send to actuators including pumps\nand motorised valves. This communication all takes place over a network. Sensor data is also available to a Supervisory Control and Data Acquisition (SCADA) system, and is recorded by a historian to facilitate offline analyses.\nControl is expressed in the programs that PLCs repeatedly cycle through. These are structurally very simple, essentially boiling down to big (nested) ifstatements. The programs use only the simplest constructs: loops, for example, are completely absent. Furthermore, the source code can easily be viewed, modified, and re-deployed to the PLCs using Rockwell\u2019s RSLogix 5000, an industrialstandard software suite. While the cyber part of SWaT is thus relatively simple, the same is not true of the physical part: runs of the system are governed by laws concerning the dynamics of water flow, the evolution of pH values, and the chemical processes associated with the six water treatment stages.\nTo complement the SWaT testbed, we also have access to a simulator implemented in Python (relying on some of its scientific libraries). The cyber part is simulated faithfully as the PLC code was translated to Python directly. Since the actual ODEs governing the physical part of SWaT are unknown, the simulator is not as accurate in this regard. The ODEs it does implement, however, have been improved over time by cross-validating data from the simulator with real SWaT data collected by the historian.\nCPS Invariants. The safety of water treatment plants is of paramount importance, as breaches or malfunctioning components can lead to costly consequences. In SWaT, for example, there is a risk of damaging the mechanics of the system if the water levels in certain tanks become too high or too low [15]. One way to detect when runs of a system are diverging into such territory is to monitor invariants\u2014conditions that must hold in all states amongst the physical processes controlled by the CPS\u2014and raise an alarm when they are no longer satisfied. This approach has been applied to a number of CPS [9,22], including for stages of SWaT itself [3,4]. Typically, however, the invariants are manually derived using the laws of physics and domain-specific knowledge. Moreover, they are derived for specific, expected physical relationships, and may not capture other important patterns hiding in the sensor data.\nBeyond providing a characterisation of CPS and their important applications in monitoring for safety, invariants can also be seen as facilitating a form of code attestation. That is to say, if the actual behaviour of a CPS does not satisfy our mathematical model of the physical world under its control (i.e. the invariant), then it is possible that the cyber part has been compromised and that ill-intended manipulations are occurring. This form of attestation is known as physical attestation [25,27], and while weaker than typical software- and hardware-based attestation schemes (e.g. [5,6,8,26]), it is much more lightweight\u2014neither the firmware nor the hardware of the PLCs require modification."}, {"heading": "3 Learning with Mutants", "text": "Learning SWaT Invariants. Rather than deriving further invariants for SWaT manually, we propose to learn them systematically by applying ML\u2014\ninitially, Support Vector Machines (SVM)\u2014to traces of SWaT sensor data, taking the classifiers they learn as our invariants. To learn such a classifier, SVM must be provided with traces that should be classified as positive (i.e. correct behaviour) and traces that should be classified as negative. The data available from the SWaT historian can be seen as representing correct (and thus positive) behaviour of the system as a whole: the SWaT PLCs and actual (unknown) ODEs together. In contrast, we propose to collect negative traces by running the system under small manipulations. Since we cannot change the ODEs (we cannot yet bend the laws of physics!), we propose to manipulate the part of SWaT that we can: the programs running on the PLCs.\nAs previously discussed, it is straightforward to change the PLC programs of SWaT and collect some negative traces, but it is more challenging to do so in a systematic way that ensures the strength of the invariant and precision of the classifier. The solution we propose is directly inspired by mutation testing [14], a fault-based testing technique that deliberately seeds errors\u2014small, syntactic changes called mutations\u2014into multiple copies of a program, which are executed to assess the quality of a test suite (good ones should detect the mutants). Rather than using mutations to improve the completeness of a test suite, we are using them to generate a more comprehensive set of negative traces for training on. By training on traces resulting from small syntactic changes, we hope to learn a classifier as close to the boundary between correct and suspicious behaviour as possible. Our rationale is that smaller changes are more likely to reveal negative traces that are relevant in practice, corresponding, for example, to isolated PLCs or sensors failing, or an attacker attempting to keep their changes undetected.\nUsing mutations for learning is also attractive because of the structural simplicity of the PLC programs. Were we assessing a test suite on them, we could do so efficiently and without redundancy by using the five basic (arithmetic, relational, and logical) mutation operators identified by Offutt et al. [21]. We hypothesise that (and are investigating whether) this result has an analogue for learning that could help us in minimising the number of redundant traces. Even if so, there remain some additional challenges to overcome. For example, if mutations are not executed, this must be detected, and thus the traces rejected as negative samples. Even if a mutant is executed, it may not lead to a physical effect immediately (or ever) and thus could generate traces indistinguishable from positive ones. Other issues include how many mutations to use in each copy, and how to handle valid modes of operation in SWaT that are rarely entered.\nPreliminary Evaluation. As a very first step towards evaluating the outlined approach, we undertook an experiment to ascertain the effectiveness of a classifier learnt from traces produced by the SWaT simulator under a number of manually applied mutations. Note that we used the simulator to facilitate a quick proof-ofconcept without the resource costs of the real system (e.g. water usage, human monitoring); this ML approach can be applied to traces collected from the real system in the same way.\nFirst, we manually launched the SWaT simulator in three different initial states (i.e. assignments of variables modelling sensors), collecting three traces of\ncorrect behaviour each spanning 30 minutes. Following this, we made 20 copies of the PLC code and manually applied a different (random) mutation to each. Of these 20 mutants, 14 of them generated traces equivalent to correct behaviour and were manually rejected. Seven mutants generated different traces, although one mutant was rejected for generating a trace too similar to another. The six remaining mutants were selected to generate our negative traces; three of the mutations each modified an assignment, whereas the other three modified an arithmetic expression in a conditional guard. We generated traces for each mutant using the same three initial states as before.\nWe proceeded to apply SVM to learn six classifiers for the six mutants respectively, each against the correct code. We selected 10 features: the first five representing the water levels of the five tanks, and the next five representing the same levels after 250ms. For training the classifiers and evaluating their accuracy, we applied k-fold cross-validation to the traces with k = 5. On average, the classifiers achieved an accuracy of 99%.\nFinally, we applied SVM to all the traces from all six mutants to learn a single classifier, i.e. to determine whether a trace represents correct behaviour or the behaviour caused by any one of the mutations. We found that this combined classifier maintained a similar level of accuracy to the individual ones: 98.41%. We extracted the learnt invariant from this classifier, which, albeit complicated, expresses a linear relationship between water tank levels (mm) at one time point (v1, . . . v5) and 250ms after it (v \u2032 1, . . . v \u2032 5). For simplicity of presentation, the coefficients are given below to three decimal places. The full model and training data are all available online (see [2]).\n\u22120.349v1 + 9.789v2 \u2212 10.192v3 + 0.803v4 \u2212 5.561v5 \u22120.630v\u20321 \u2212 10.455v\u20322 + 10.333v\u20323 + 0.803v\u20324 + 3.928v\u20325 < \u2212786.416\nThis experiment has shown that it is possible to apply SVM to learn an accurate classifier for traces of sensor data, using the negative samples generated under a small number of mutated PLC programs. It is, of course, too limited in its present scope to allow for more general conclusions; a much more extensive evaluation of the outlined approach is needed, and is underway. It does however suggest the feasibility of the basic idea, and has highlighted a number of important challenges. For instance, the process should be more automatic: mutation operators should be applied automatically, as should the detection of unexercised mutations, as well as the comparison of the generated traces against the positive ones. Furthermore, to ensure as strong an invariant and precise a classifier as possible, a number of questions must be answered empirically, regarding, e.g. the number of mutations (and the possibility of multiple mutations per copy), the sufficiency of mutation operators, and the length of traces.\nOur experiment also highlighted the role that a simulator can play in mutation \u201cscreening\u201d before applying them to the real SWaT system and collecting negative traces that are based on the actual ODEs. This helps to avoid wasting time and resources otherwise lost by applying the mutations to the real PLCs first. Note that while the ML technique can be applied to SWaT data in exactly the same way as for the simulator, a human technician must be present while\ncollecting the data itself to ensure that the mutations do not lead the system into a state that causes damage. This raises another research question: whether one can determine a class of \u201csafe\u201d mutations for SWaT that still facilitate a precise classifier but avoid entirely the possibility of causing damage."}, {"heading": "4 Correctness of Invariants", "text": "Our preliminary experiment has allowed us to learn a new invariant for SWaT (or rather, at least to begin with, its simulator). But is it actually an invariant? It is not particularly intuitive to reason about. And even if it were, to argue for its correctness, we would need some expertise in the physics of water treatment plants; a requirement we wanted to avoid in the first place. As alternatives to manual, ad hoc proofs, we propose two contrasting approaches for establishing confidence in the correctness of invariants, and highlight their well-suitedness to CPS like SWaT.\nFirst, we will apply statistical model checking (SMC) to SWaT, a standard technique for analysing and verifying CPS [10]. In SMC, executions of the system (i.e. traces of sensor data) are observed, and hypothesis testing or statistical estimation techniques are applied to determine whether or not the executions provide statistical evidence of the invariant holding. SMC estimates the probability of correctness, rather than guaranteeing it outright, but is simple to apply to SWaT (and its simulator) since it only requires the system to be executable. Furthermore, should the ODEs of the SWaT simulator become more accurate in the future, then our mutation-based learning approach could take place entirely on that; SMC could then determine whether or not the learnt invariants are also invariants of the real system, without having to apply any mutations to it.\nSecond, we will investigate the use of symbolic execution for analysing SWaT with respect to a learnt invariant. In the PLC programs, symbolic values will be used to abstract away from concrete sensor inputs. The technique will then build, along the different paths of the PLC code, path constraints over the symbolic values (i.e. path conditions in conjunction with an assertion based on the learnt invariant). The PLC programs have a simple structure that is well-suited to this task: they are free of loops, and the paths through the programs are short (maximal depth of three; maximal branching of 28). Our invariants, however, are based upon sensor readings at two different time points, so we cannot analyse them with respect to the cyber part of SWaT alone: a model of the physical processes is needed too, for reasoning about the effects that signals will have. As we have discussed, we cannot expect to manually derive a completely accurate one, but we could nonetheless use approximate models (e.g. as defined in the simulator), or even models of SWaT that were automatically constructed using different approaches to ours (e.g. the probabilistic model of [29]).\nIt should be emphasised that while neither technique can fully guarantee correctness, they differ in where precision is lost, and so should complement each other in helping to establish confidence in the learnt invariants. SMC, for example, estimates a probability of correctness based only on the executions it\nis provided with (leading to challenges such as handling rare events); yet by working with actual system executions, its results are based on the actual physical processes. Symbolic execution, in contrast, must work with an approximate physical model, but performs an analysis on the actual source code in the cyber part (and not just on a subset of the possible system executions)."}, {"heading": "5 Conclusion and Next Steps", "text": "This short paper has proposed a novel approach for learning invariants of CPS that trains a ML technique such as SVM on positive and negative traces of sensor data, with the latter obtained by applying mutation operators to copies of the programs in the cyber part\u2014the part of the CPS that we can most easily control. We presented a preliminary study on SWaT, a raw water treatment plant, that suggested the effectiveness of constructing invariants this way. We furthermore outlined the use of SMC and symbolic execution for establishing confidence in the correctness of learnt invariants, and discussed their use in CPS applications such as physical attestation.\nMuch work remains to be done to truly ascertain the effectiveness of our approach for CPS. First, we will automate\u2014as much as possible\u2014our experiment on the SWaT simulator, to allow for classifiers to be trained on several additional mutants and initial states more easily, and to automatically detect those mutants that do not cause the system to exhibit different physical behaviour. Then, within this framework, we will begin investigating the challenges raised in Section 3 and the verification approaches outlined in Section 4, before shifting our experimentation to traces obtained from the real SWaT system. We will investigate the use of ML systems other than SVM, and compare our supervised model learning approach against proposed unsupervised ones for CPS (e.g. [19,28]). Finally, we will investigate the application of learnt invariants to code attestation, by instigating cyber-attacks on the SWaT system and evaluating whether or not our classifiers are effective in detecting them.\nAcknowledgements. We thank Pingfan Kong for assisting us with the SWaT simulator, and the anonymous referees for their helpful comments and criticisms. This work was supported by NRF Award No. NRF2014NCR-NCR001-40."}], "references": [{"title": "Distributed detection of single-stage multipoint cyber attacks in a water treatment plant", "author": ["S. Adepu", "A. Mathur"], "venue": "Proc. ACM Asia Conference on Computer and Communications Security (AsiaCCS 2016). pp. 449\u2013460. ACM", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2016}, {"title": "Using process invariants to detect cyber attacks on a water treatment system", "author": ["S. Adepu", "A. Mathur"], "venue": "Proc. International Conference on ICT Systems Security and Privacy Protection (SEC 2016). IFIP AICT, vol. 471, pp. 91\u2013104. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2016}, {"title": "TrustZone: Integrated hardware and software security", "author": ["T. Alves", "D. Felton"], "venue": "ARM white paper", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2004}, {"title": "Innovative technology for CPU based attestation and sealing", "author": ["I. Anati", "S. Gueron", "S.P. Johnson", "V.R. Scarlata"], "venue": "Intel white paper", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "Research challenges for the security of control systems", "author": ["A.A. C\u00e1rdenas", "S. Amin", "S. Sastry"], "venue": "Proc. USENIX Workshop on Hot Topics in Security (HotSec 2008). USENIX Association", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2008}, {"title": "On the difficulty of software-based attestation of embedded devices", "author": ["C. Castelluccia", "A. Francillon", "D. Perito", "C. Soriente"], "venue": "Proc. ACM Conference on Computer and Communications Security (CCS 2009). pp. 400\u2013409. ACM", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2009}, {"title": "Stability of a cyber-physical smart grid system using cooperating invariants", "author": ["A. Choudhari", "H. Ramaprasad", "T. Paul", "J.W. Kimball", "M.J. Zawodniok", "B.M. McMillin", "S. Chellappan"], "venue": "Proc. IEEE Computer Software and Applications Conference (COMPSAC 2013). pp. 760\u2013769. IEEE", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Statistical model checking for cyber-physical systems", "author": ["E.M. Clarke", "P. Zuliani"], "venue": "Proc. International Symposium on Automated Technology for Verification and Analysis (ATVA 2011). LNCS, vol. 6996, pp. 1\u201312. Springer", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "SpaceEx: Scalable verification of hybrid systems", "author": ["G. Frehse", "C.L. Guernic", "A. Donz\u00e9", "S. Cotton", "R. Ray", "O. Lebeltel", "R. Ripado", "A. Girard", "T. Dang", "O. Maler"], "venue": "Proc. International Conference on Computer Aided Verification (CAV 2011). LNCS, vol. 6806, pp. 379\u2013395. Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "dReal: An SMT solver for nonlinear theories over the reals", "author": ["S. Gao", "S. Kong", "E.M. Clarke"], "venue": "Proc. International Conference on Automated Deduction (CADE 2013). LNCS, vol. 7898, pp. 208\u2013214. Springer", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2013}, {"title": "Exercises in nonstandard static analysis of hybrid systems", "author": ["I. Hasuo", "K. Suenaga"], "venue": "Proc. International Conference on Computer Aided Verification (CAV 2012). LNCS, vol. 7358, pp. 462\u2013478. Springer", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "An analysis and survey of the development of mutation testing", "author": ["Y. Jia", "M. Harman"], "venue": "IEEE Transactions on Software Engineering 37(5), 649\u2013678", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2011}, {"title": "Model-based security analysis of a water treatment system", "author": ["E. Kang", "S. Adepu", "D. Jackson", "A.P. Mathur"], "venue": "Proc. International Workshop on Software Engineering for Smart Cyber-Physical Systems (SEsCPS 2016). pp. 22\u201328. ACM", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2016}, {"title": "Design techniques and applications of cyberphysical systems: A survey", "author": ["S.K. Khaitan", "J.D. McCalley"], "venue": "IEEE Systems Journal 9(2), 350\u2013365", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Towards concolic testing for hybrid systems", "author": ["P. Kong", "Y. Li", "X. Chen", "J. Sun", "M. Sun", "J. Wang"], "venue": "Proc. International Symposium on Formal Methods", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2016}, {"title": "Cyber physical systems: Design challenges", "author": ["E.A. Lee"], "venue": "Proc. International Symposium on Object-Oriented Real-Time Distributed Computing (ISORC 2008). pp. 363\u2013369. IEEE", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2008}, {"title": "Online passive learning of timed automata for cyber-physical production systems", "author": ["A. Maier"], "venue": "Proc. IEEE International Conference on Industrial Informatics (INDIN 2014). pp. 60\u201366. IEEE", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2014}, {"title": "ModelPlex: Verified runtime validation of verified cyberphysical system models", "author": ["S. Mitsch", "A. Platzer"], "venue": "Proc. International Conference on Runtime Verification (RV 2014). LNCS, vol. 8734, pp. 199\u2013214. Springer", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2014}, {"title": "An experimental determination of sufficient mutant operators", "author": ["A.J. Offutt", "A. Lee", "G. Rothermel", "R.H. Untch", "C. Zapf"], "venue": "ACM Transactions on Software Engineering and Methodology (TOSEM) 5(2), 99\u2013118", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1996}, {"title": "Unified invariants for cyber-physical switched system stability", "author": ["T. Paul", "J.W. Kimball", "M.J. Zawodniok", "T.P. Roth", "B.M. McMillin", "S. Chellappan"], "venue": "IEEE Transactions on Smart Grid 5(1), 112\u2013120", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2014}, {"title": "KeYmaera: A hybrid theorem prover for hybrid systems (system description)", "author": ["A. Platzer", "J. Quesel"], "venue": "Proc. International Joint Conference on Automated Reasoning (IJCAR 2008). LNCS, vol. 5195, pp. 171\u2013178. Springer", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2008}, {"title": "How to model and prove hybrid systems with KeYmaera: a tutorial on safety", "author": ["J. Quesel", "S. Mitsch", "S.M. Loos", "N. Arechiga", "A. Platzer"], "venue": "International Journal on Software Tools for Technology Transfer 18(1), 67\u201391", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2016}, {"title": "Physical attestation of cyber processes in the smart grid", "author": ["T.P. Roth", "B.M. McMillin"], "venue": "Proc. International Workshop on Critical Information Infrastructures Security (CRITIS 2013). LNCS, vol. 8328, pp. 96\u2013107. Springer", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2013}, {"title": "SWATT: SoftWare-based ATTestation for embedded devices", "author": ["A. Seshadri", "A. Perrig", "L. van Doorn", "P.K. Khosla"], "venue": "Proc. IEEE Symposium on Security and Privacy (S&P 2004). p. 272. IEEE", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2004}, {"title": "Cyber-physical systems attestation", "author": ["J. Valente", "C. Barreto", "A.A. C\u00e1rdenas"], "venue": "Proc. IEEE International Conference on Distributed Computing in Sensor Systems (DCOSS 2014). pp. 354\u2013357. IEEE", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2014}, {"title": "Identifying behavior models for process plants", "author": ["A. Vodencarevic", "H. Kleine B\u00fcning", "O. Niggemann", "A. Maier"], "venue": "Proc. IEEE Conference on Emerging Technologies & Factory Automation (ETFA 2011). pp. 1\u20138. IEEE", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2011}, {"title": "Should we learn probabilistic models for model checking? A new approach and an empirical study", "author": ["J. Wang", "J. Sun", "Q. Yuan", "J. Pang"], "venue": null, "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2016}, {"title": "Perceptions on the state of the art in verification and validation in cyber-physical systems", "author": ["X. Zheng", "C. Julien", "M. Kim", "S. Khurshid"], "venue": "IEEE Systems Journal PP(99), 1\u201314", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 13, "context": "Cyber-physical systems (CPS), characterised by their tight integration of algorithmic control and physical processes, are prevalent across engineering domains as diverse as aerospace, autonomous vehicles, and medical monitoring; they are also used to control critical public infrastructure such as smart grids and water treatment plants [16,18].", "startOffset": 337, "endOffset": 344}, {"referenceID": 15, "context": "Cyber-physical systems (CPS), characterised by their tight integration of algorithmic control and physical processes, are prevalent across engineering domains as diverse as aerospace, autonomous vehicles, and medical monitoring; they are also used to control critical public infrastructure such as smart grids and water treatment plants [16,18].", "startOffset": 337, "endOffset": 344}, {"referenceID": 4, "context": "A component that exhibits faulty behaviour\u2014or worse still, becomes compromised [7]\u2014can lead to costly and damaging consequences, motivating research into approaches for ensuring their correctness, safety, and security.", "startOffset": 79, "endOffset": 82}, {"referenceID": 27, "context": "Reasoning about a CPS as a whole, however, is very challenging, given that models must capture both discrete behaviour in the cyber part as well as continuous behaviour in the physical part [30].", "startOffset": 190, "endOffset": 194}, {"referenceID": 8, "context": "model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]).", "startOffset": 15, "endOffset": 19}, {"referenceID": 9, "context": "model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]).", "startOffset": 33, "endOffset": 37}, {"referenceID": 10, "context": "model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]).", "startOffset": 61, "endOffset": 65}, {"referenceID": 14, "context": "model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]).", "startOffset": 84, "endOffset": 88}, {"referenceID": 20, "context": "model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]).", "startOffset": 109, "endOffset": 116}, {"referenceID": 21, "context": "model checking [11], SMT solving [12], non-standard analysis [13], concolic testing [17], or theorem proving [23,24]).", "startOffset": 109, "endOffset": 116}, {"referenceID": 17, "context": "the verified model and the behaviour of the actual CPS, emphasising the importance of techniques that can be applied at runtime [20].", "startOffset": 128, "endOffset": 132}, {"referenceID": 11, "context": "We obtain our negative traces by the novel application of code mutation (\u00e0 la mutation testing [14]) to the software components of CPS.", "startOffset": 95, "endOffset": 99}, {"referenceID": 22, "context": "Besides characterising the CPS, the learnt invariants have some important applications in controlling, monitoring, and attesting the software components [25].", "startOffset": 153, "endOffset": 157}, {"referenceID": 12, "context": "In SWaT, for example, there is a risk of damaging the mechanics of the system if the water levels in certain tanks become too high or too low [15].", "startOffset": 142, "endOffset": 146}, {"referenceID": 6, "context": "This approach has been applied to a number of CPS [9,22], including for stages of SWaT itself [3,4].", "startOffset": 50, "endOffset": 56}, {"referenceID": 19, "context": "This approach has been applied to a number of CPS [9,22], including for stages of SWaT itself [3,4].", "startOffset": 50, "endOffset": 56}, {"referenceID": 0, "context": "This approach has been applied to a number of CPS [9,22], including for stages of SWaT itself [3,4].", "startOffset": 94, "endOffset": 99}, {"referenceID": 1, "context": "This approach has been applied to a number of CPS [9,22], including for stages of SWaT itself [3,4].", "startOffset": 94, "endOffset": 99}, {"referenceID": 22, "context": "This form of attestation is known as physical attestation [25,27], and while weaker than typical software- and hardware-based attestation schemes (e.", "startOffset": 58, "endOffset": 65}, {"referenceID": 24, "context": "This form of attestation is known as physical attestation [25,27], and while weaker than typical software- and hardware-based attestation schemes (e.", "startOffset": 58, "endOffset": 65}, {"referenceID": 2, "context": "[5,6,8,26]), it is much more lightweight\u2014neither the firmware nor the hardware of the PLCs require modification.", "startOffset": 0, "endOffset": 10}, {"referenceID": 3, "context": "[5,6,8,26]), it is much more lightweight\u2014neither the firmware nor the hardware of the PLCs require modification.", "startOffset": 0, "endOffset": 10}, {"referenceID": 5, "context": "[5,6,8,26]), it is much more lightweight\u2014neither the firmware nor the hardware of the PLCs require modification.", "startOffset": 0, "endOffset": 10}, {"referenceID": 23, "context": "[5,6,8,26]), it is much more lightweight\u2014neither the firmware nor the hardware of the PLCs require modification.", "startOffset": 0, "endOffset": 10}, {"referenceID": 11, "context": "The solution we propose is directly inspired by mutation testing [14], a fault-based testing technique that deliberately seeds errors\u2014small, syntactic changes called mutations\u2014into multiple copies of a program, which are executed to assess the quality of a test suite (good ones should detect the mutants).", "startOffset": 65, "endOffset": 69}, {"referenceID": 18, "context": "[21].", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "First, we will apply statistical model checking (SMC) to SWaT, a standard technique for analysing and verifying CPS [10].", "startOffset": 116, "endOffset": 120}, {"referenceID": 26, "context": "the probabilistic model of [29]).", "startOffset": 27, "endOffset": 31}, {"referenceID": 16, "context": "[19,28]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 25, "context": "[19,28]).", "startOffset": 0, "endOffset": 7}], "year": 2016, "abstractText": "Cyber-physical systems (CPS), which integrate algorithmic control with physical processes, often consist of physically distributed components communicating over a network. A malfunctioning or compromised component in such a CPS can lead to costly consequences, especially in the context of public infrastructure. In this short paper, we argue for the importance of constructing invariants (or models) of the physical behaviour exhibited by CPS, motivated by their applications to the control, monitoring, and attestation of components. To achieve this despite the inherent complexity of CPS, we propose a new technique for learning invariants that combines machine learning with ideas from mutation testing. We present a preliminary study on a water treatment system that suggests the efficacy of this approach, propose strategies for establishing confidence in the correctness of invariants, then summarise some research questions and the steps we are taking to investigate them.", "creator": "LaTeX with hyperref package"}}}