{"id": "1609.02316", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Sep-2016", "title": "Ms. Pac-Man Versus Ghost Team CIG 2016 Competition", "abstract": "This publication introduces to 19th-century of the typical Ms. Pac - Man Versus Ghost Team competition. We present also application patriots generators it Partial Observability pressures, whose end Multi - Agent Systems approach for developing Ghost interrogated without involved tests sensors means trouble brought development of twenty. A restricted guidance protocol form which without the Ghosts, aid once not consider promote well started. The players time duo entered the IEEE Computational Intelligence especially Games Conference '96. Some tallies any impression after risk called Partial Observability when before financing of basic service are also discussed.", "histories": [["v1", "Thu, 8 Sep 2016 08:15:58 GMT  (336kb,D)", "http://arxiv.org/abs/1609.02316v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.MA", "authors": ["piers r williams", "diego perez-liebana", "simon m lucas"], "accepted": false, "id": "1609.02316"}, "pdf": {"name": "1609.02316.pdf", "metadata": {"source": "CRF", "title": "Ms. Pac-Man Versus Ghost Team CIG 2016 Competition", "authors": ["Piers R. Williams", "Diego Perez-Liebana", "Simon M. Lucas"], "emails": ["sml}@essex.ac.uk"], "sections": [{"heading": null, "text": "I. INTRODUCTION Ms. Pac-Man is an arcade game that was immensely popular when released in 1982. An improvement on the original PacMan game; Ms. Pac-Man added better graphics, additional mazes and new Artificial Intelligence (AI) behaviour for the ghosts. The primary difference that interests academics and researchers is the ghost AI. In Pac-Man the ghosts behaved in a deterministic manner. Ms. Pac-Man added a semi-random element to the ghost behaviours making them non deterministic. This non determinism vastly increased the challenge in creating an effective agent for Ms. Pac-Man.\nMs. Pac-Man has been the focus of two previous competitions. The Ms. Pac-Man screen capture competition [15] which periodically provided the agents with a pixel map of the game and requested the direction of travel. This competition only allowed the entrants to submit agents for the Ms. PacMan character. The second Ms. Pac-Man competition was the Ms. Pac-Man Vs Ghost Team competition [22] which was was based on a simulator that mimicked the original game reasonably closely. Entrants had to submit a controller for either the Ms. Pac-Man agent or the ghost team.\nThis new competition adds Partial Observability (PO) to Ms. Pac-Man. PO greatly increases the challenge in creating good AI controllers. Limited information about the ghosts makes it more difficult for Ms. Pac-Man to plan effectively. Limited information about Ms. Pac-Man forces the ghosts to search and communicate effectively in order to trap Ms. Pac-Man and capture her.\nComputational Intelligence (CI) has a long history of using competitions to galvanise research in game agent development. These competitions typically focus on trying to develop the strongest AI for a particular scenario although some exceptions such as the BotPrize [11] competition that focuses on developing Unreal Tournament agents that are human-like. There are\nmany competitions currently active in the area of games. The Starcraft competition [17] runs on the original Starcraft: Brood War (Blizzard Entertainment, 1998). Starcraft is a complex Real-Time Strategy (RTS) game with thousands of potential actions at each time step. Starcraft also features PO, greatly complicating the task of writing strong AI. The General Video Game Artificial Intelligence (GVGAI) competition [19] runs a custom game engine that emulates a wide variety of games, many of which are based on old classic arcade games. The Geometry Friends competition [20] features a co-operative track for two heterogeneous agents to solve mazes, a similar task to the ghost control of Ms. Pac-Man.\nPrevious competitions have been organised that focused on games or scenarios with PO. An early example is the classic Iterative Prisoner Dilemma (IPD) [12], a game featuring a small amount of PO in the form of the simultaneous actions of the two prisoners.\nSection II contains a review of the research into the domain of Ms. Pac-Man. Section III contains a description of the alterations to the problem domain since the previous competition. Section IV concludes the paper and describes some possible future work for the competition."}, {"heading": "II. RECENT RESEARCH", "text": "A large amount of research has been put into both Ms. PacMan and the ghost teams, which is covered in depth in this section."}, {"heading": "A. PacMan AI", "text": "Gallagher and Ledwich [8] investigated a simplified version of the game including for the majority of their experiments using only a single near deterministic ghost and no power pills.\nLucas [14] explored using a simple Evolutionary Algorithm (EA) in (N +N ) form with N = 1 or 10. The EA was used to train the weights for a Neural Network.\nRobles and Lucas [21] investigate writing a simple tree search method for writing an agent to play Ms. Pac-Man. This was performed on the actual game using screen capture and a simulator. The tree was formed as every possible path through the maze (depth limit 10) with information in the nodes about ghosts and pills encoded. A simulator of the game was used to evaluate the state of the game in future ticks. The simulator was not identical to the game actually played, leading to some\nar X\niv :1\n60 9.\n02 31\n6v 1\n[ cs\n.A I]\n8 S\nep 2\n01 6\n2 possible errors in judgement. The authors tried a few heuristics and found that some performed better than others.\nBurrow and Lucas [3] compared two different approaches to learning to play the game of Ms. Pac-Man. The paper uses a Java implementation of the game Ms. Pac-Man that allowed easy integration of existing machine learning implementations. The two techniques used were Temporal Difference Learning (TDL) and EA. These techniques were used to train a MultiLayer Perceptron (MLP) that was then evaluated within the game. The EA was subsequently shown to be superior to TDL.\nHanda and Isozaki [10] used Fuzzy logic tuned by a 1+1 EA. The rules were tuned with the EA and consisted of a series of predefined rules about avoidance and chasing as well as pill collecting.\nWirth and Gallagher [27] used Influence Maps to drive a Ms. Pac-Man agent. Positive influence was exerted by pills and edible ghosts, whilst ghosts exerted a negative influence upon the map. The map is then checked in the four cardinal directions that Ms. Pac-Man can move in and the maximum influence is chosen.\nAlhejali and Lucas [1] [2] studied the use of Genetic Programming (GP) for evolving heuristics to control Ms. Pac-Man. Some care was needed to prevent the agent from focusing too much on ghost eating instead of pill clearing by using multiple mazes.\nSamothrakis et al [24] used a 5 player maxn tree with limited tree search depth. The paper experimented with both Monte-Carlo Tree Search (MCTS) for Ms. Pac-Man and for the Ghosts. Schrum and Miikulainen [25] investigated the use of modular neural networks to control Ms. Pac-Man. The agent was developed for the same simulator as used in the Ms. PacMan Versus Ghost Team competition.\nFlensbak and Yannakakis [5] describe their solution to the Ms. Pac-Man competition of WCCI 2008. This controller was a largely hand coded agent based around pill hunting and ghost avoidance as its primary tactics. The agent avoids ghosts within a 4x4 grid around Ms. PacMan and then collects pills. With this approach, less time is spent in danger from the ghosts before the maze is reset.\nPepels et al [18] describe their work in creating an entrant to the Pac-Man Versus Ghost Team competition (WCCI\u201912 and CIG\u201912). A MCTS agent is described in detail containing a number of enhancements and alterations designed to improve performance specifically in Ms. Pac-Man. Emilio et al [4] worked with Ant Colony Optimisation (ACO) to design an agent for Ms. Pac-Man. Two objectives are chosen to drive the agent. The first is to maximise pill collecting. The second is to minimise being eaten by ghosts. This leads to two types of ants used in the system, the collector ants maximising pill collecting and the explorer ants minimise death.\nFoderaro et al [7] [6] used a tree search technique after abstracting the maze into a connected graph of cells."}, {"heading": "B. Ghost Control", "text": "Nguyen and Thawonmas [16] present their agent that was entered into the CEC 2011 Ms. Pac-Man vs Ghost Team Competition, subsequently winning. The agents used for this\nFigure 1. A view of the basic Ms. Pac-Man game\nFigure 2. The various characters of the game, Left to Right: Blinky, Inky, Pinky, Sue and Ms. Pac-Man\ncontroller were to control Pinky, Sue and Inky with MCTS whilst using a completely rule based approach for Blinky.\nWittkamp et al [28] investigate using an online learning technique - Neuro-Evolution Through Augmenting Topologies (NEAT) - to evolve the controllers for the ghosts team. Each ghost evolves separately but shares the score of the team.\nLiberatore et al [13] look into the use of Swarm Intelligence (SI) to control the ghost team."}, {"heading": "III. THE COMPETITION", "text": ""}, {"heading": "A. The game", "text": "The game that we have based the competition on is the Ms. Pac-Man arcade game. This game consists of 5 agents, a single Ms. Pac-Man and 4 Ghost agents. The world is a maze environment, with peachy coloured walls that are non traversable. There is a ghost lair in the center, where the ghosts start and also respawn after being eaten. Pills are placed in the corridors for Ms. Pac-Man to collect as well as larger Power Pills that allow Ms. Pac-Man to consume the ghosts and score additional points. A view of the game is shown in Figure 1. The various characters in the game are shown in Figure 2. Eating a pill earns Ms. Pac-Man 10 points and eating ghosts earn 200 points for the first ghost but doubling each time up to 1600 points for the fourth ghost. The maximum points s for a maze where n is number of pills in the maze is s = 10n+ 4\u00d7 (200 + 400 + 800 + 1600).\n3"}, {"heading": "B. Partial Observability", "text": "PO is the impairment of the ability of an agent to completely observe the world that it is situated within. PO in Ms. PacMan can vary in its implementation. We consider some simple methods that could be used, before explaining why we chose the final implementation. First we consider the approach taken in another paper, followed by some simple methods.\n1) pocman: PO has been applied to the game of Ms. PacMan previously by Silver and Veness [26]. This work covered a small number of domains, one of which was pocman - a PO Ms. Pac-Man clone.\nIn pocman, the main agent had to navigate a 17x19 maze and eat the food pellets randomly distributed across the maze. Four ghosts roamed the maze with a simple strategy controlling them. The 4 power pills are also present, allowing pocman to eat the ghosts upon contact for 15 steps instead of being eaten in the usual manner.\nThe ghosts operate randomly unless they are within Manhattan distance 5 of Pacman in which case they chase or evade based on if he is under the effect of a power pill. This implies that the simulation does not support the usual method of ghosts respawning as non-edible before the edible time is up and could be eaten again. This is a major difference to the game that would require some serious modification to the framework in order to replicate. An alternative to replicating this is to make the minor alteration to the ghost AI that it runs away if it is edible and attacks Pacman if it is not edible.\nThe pocman agent receives a reward to his score each tick from Table I. For example, if the agent moves across an empty square it will receive a reward of -1. This should help force agents to try to finish levels as quickly as possible.\npocman has a particular type of observability in which he is sent 10 observation bits. The first four refer to each cardinal direction and are high if a ghost is present in that directions Line-of-Sight (LOS). The fifth observation bit tells him if he can hear a ghost which occurs when at least one ghost is within Manhattan distance of 2. Four more observation bits refer to the presence of a wall at distance 1 in each of the cardinal directions. The final observation bit is set to high if he can smell food which occurs when a pill is adjacent or diagonally adjacent to him.\n2) Line-of-Sight: LOS is where the agents can see in straight lines up to a limit unless there is an obstacle in the way. Obstacles are considered to be the walls in the maze. Ghosts and pills don\u2019t count as obstacles. This applies to both Ms. Pac-Man and the Ghosts and means that they can see both forwards, backwards and sideways. This method is simple to implement as well as fairly realistic based on how light travels. Agents cannot see around corners just like real people. This\nis similar to the standard first person view although we allow full backwards, left and right sight as well.\n3) Forward Facing Line-of-Sight: This is an additional restriction on LOS where the agent can only observe in the direction they are currently travelling.\n4) Radius based Partial Observability: Radius based PO is a simple technique where we consider anything within a distance d from the agent is considered visible. This technique provides a circular vision when Euclidean Distance is used, and a diamond shaped vision when Manhattan Distance is use. This allows agents to view other agents that are around corners or behind walls. This is not particularly realistic but does provide more information to the agent than LOS.\n5) Partial Observability Implementation: The method of PO that has been implemented in Ms. Pac-Man is based on LOS. This we felt was the most realistic without being overly restrictive. The game supports a range limit to the sight - allowing some level of customisation, although at present it is larger than the longest corridor. The view generated by this restriction for Ms. Pac-Man is shown in Figure 3.\nWith the PO constraints, the ghost entrants must now submit a controller for each ghost. These controllers will be given a 40ms shared time budget, equal to the original competition. The ghosts will be called sequentially in order: (Blinky, Pinky, Inky and Sue). This will allow the flexibility to adjust how much time is spent on each ghost in each tick. This flexibility is useful due to the game rules forcing ghosts to have no actual decision ability when not at a junction in the maze. Locking each ghost into 10ms each would be potentially wasteful for ghosts in tunnels and doesn\u2019t leave as much time free for ghosts at junctions.\n4"}, {"heading": "C. Messaging", "text": "Communication is the cornerstone of teamwork and vital to the creation of co-operative agents. In the competition, the communication will be heavily controlled by the game in order to force agents to share information rather than attempt to control the actions of each other. The communication component is composed of two main parts - the messenger and the message. The messages allowed are presented in Table II.\nThe messages allowed will have a large impact on the ability and even potentially the design of the controllers. In early versions of the messaging system there were more messages planned, allowing the controllers to ask other controllers where they were and where they were heading. Logically it was clear that most controllers would ask for that information every tick and would receive a reply every tick (once enough time has passed). It therefore made sense to simply remove the messages asking and allow the controllers to pass on the information spontaneously. Logically the game could simply provide the information - however the effects of information delay would be lost if that were the case.\nThe data variable is a single integer at present due to the internal structure of the Ms. Pac-Man simulator. Locations are represented as indices of the node graph, with only a single integer required to show a location in the map. If the messaging system is expanded to include more complex messages, then a more complex system can be used. The extension to a more complex data type for messages would allow even harder messages to use instead of the perfect information messages previously discussed. A more difficult version of the game would only allow an AI to transmit that they can see Ms. Pac-Man or that they can only see Ms. PacMan in a certain direction. Imperfect information would lead to more possibilities such as triangulation between reports from multiple ghosts being used to improve the data received.\nMessages can be either sent to a single recipient or broadcast to all ghosts on the map. The Java interface for the Messages is presented in Listing 1.\nOther potential messages could be allowed to be passed. Some simple user defined messages for example could allow agents to declare the current strategy they are using. Ghosts could be interested in not just declaring their current position but also their state. Once a powerpill is eaten no ghost knows who has been eaten and who hasn\u2019t. An edible ghost could travel towards a chasing ghost for protection if it knew more information.\nThe messenger system will deliver messages at the time specified by a simple formula. The time it takes to deliver a message for the implementation can be calculated using\nEquation (1). This allows a level of configurability in how quick the messages get delivered. Each message type has its own cost, the \u03b4m, and the system has both a multiplier to that \u03b4x and a constant delay applied equally to all messages \u03b4c. This allows for example all messages to be delivered equally (\u03b4m = 0).\nThe messenger system at present makes no charge for delivering its messages. This allows AI agents to use as many messages as they wish. Introducing the notion of cost to a message would force the algorithms to become more careful with messages and decide whether it is worth sending the message at all. This would increase the level of difficulty for the AI agents as effective and thrifty strategies for messaging would need implementing.\nThe Java interface for this system is in Listing 2.\n5 Listing 2. Messenger Interface p u b l i c i n t e r f a c e Messenger {\n/ / Ge ts a deep copy of t h e messenger o b j e c t Messenger copy ( ) ;\n/ / Upda tes t h e messenger vo id u p d a t e ( ) ;\n/ / Adds a message t o t h e messenger / / t o be d e l i v e r e d as soon as i t can be vo id addMessage ( Message message ) ;\n/ * * * Get a l l messages t h a t a r e due t o * be d e l i v e r e d t o me t h i s t i c k * @param q u e r i e r The a g e n t do ing t h e q u e r y i n g . * @return The messages due ( c o u l d be empty ) . * /\nA r r a y L i s t<Message> ge tMessages (GHOST q u e r i e r ) ; }"}, {"heading": "D. Sample Controllers for Ms. Pac-Man vs Ghosts", "text": "Having implemented PO for both Ms. Pac-Man and the Ghosts an initial trio of new controllers were also implemented that could function within PO. These controllers required the minimum amount of modification to the original basic controllers from the previous competition. The controllers, along with the original starter controllers, will be described next.\n1) StarterPacMan (COP): This is the original basic controller for the previous competition and works only in Complete Observability (CO) environments. This controller follows a very basic algorithm with some simple sequential rules as shown in Algorithm 1. The controller will avoid ghosts that are too close, chase ghosts that are edible or travel to the nearest pill.\nAlgorithm 1 StarterPacMan basic algorithm function GETMOVE()\nlimit \u2190 20 nearestGhost \u2190 GETNEARESTCHASINGGHOST(limit) if nearestGhost 6= NULL then\nreturn NEXTMOVEAWAYFROM(nearestGhost) end if nearestGhost \u2190 GETNEARESTEDIBLEGHOST(limit) if nearestGhost 6= NULL then\nreturn NEXTMOVETOWARDS(nearestGhost) end if nearestPill \u2190 GETNEARESTPILL() return NEXTMOVETOWARDS(nearestPill)\nend function\n2) StarterGhosts (COG): This is the original basic controller for the previous competition to control the four ghosts. It is a puppet master style algorithm, meaning it is a single block of logic that generated moves for all of the ghosts. The controller follows some basic strategies if a ghost is allowed to make a move as shown in Algorithm 2. The ghosts will run away from Ms. Pac-Man if she is able to eat the ghost, or near a power pill (Potential to eat ghost). If the previous rule doesn\u2019t apply then the ghost will 90% of the time chase Ms. Pac-Man and 10% of the time move randomly.\nAlgorithm 2 StarterGhosts basic algorithm function GETMOVE()\nif GAME.DOESREQUIREACTION() = False then return NULL end if\npacman \u2190 GETPACMANINDEX() if ISEDIBLE() OR PACMANCLOSETOPPILL() then\nreturn NEXTMOVEAWAYFROM(pacman) end if if NEXTFLOAT < 0.9 then\nreturn NEXTMOVETOWARDS(pacman) else\nreturn NEXTRANDOMMOVE() end if\nend function\n3) POPacMan (POP): This is a modification of the StarterPacMan where each strategy is followed if it is possible as shown in Algorithm 3.\nAlgorithm 3 POPacMan basic algorithm function GETMOVE()\nlimit \u2190 20 nearestGhost \u2190 GETNEARESTCHASINGGHOST(limit) if nearestGhost 6= NULL then\nreturn NEXTMOVEAWAYFROM(nearestGhost) end if nearestGhost \u2190 GETNEARESTEDIBLEGHOST(limit) if nearestGhost 6= NULL then\nreturn NEXTMOVETOWARDS(nearestGhost) end if nearestPill \u2190 GETNEARESTPILL() if nearestPill 6= NULL then\nreturn NEXTMOVETOWARDS(nearestPill) end if return NEXTRANDOMMOVE()\nend function\nOther than modifying the original strategies with guards against null, it was clear that a new default strategy was needed. This is because within the PO game, it was possible to proceed through the previous strategies without returning a move. This new default strategy was to simply return a random move.\n4) POGhosts (POG): This is a modification of the StarterGhosts where each strategy is followed if it is possible in the PO case. If there is no information available to the ghost, then the ghost will behave randomly at intersections as shown in Algorithm 4.\n5) POCommGhosts (POGC): This is a modification of the POGhosts but attempts to communicate each tick in order to improve its chances. If this ghost can see Ms. Pac-Man then it will send a message to everyone else. If it can\u2019t see Ms. Pac-Man then it will check if anybody else has seen it. If someone else has seen Ms. Pac-Man then it pretends it can see Ms. Pac-Man and follows the original POGhosts strategy outlined above. This controller will presumably lose capability as the message delay increases due to the reduced accuracy. The pseudo code for this is shown in Algorithm 5.\nThe threshold used to determine when to forget Ms. PacMan\u2019s location needs tuning. Every value from 0 to 200 were put to a test on 4000 games against the COP agent\n6 Algorithm 4 POGhosts basic algorithm function GETMOVE()\nif DOESREQUIREACTION() = False then return NULL end if\npacman \u2190 GETPACMANINDEX() if pacman 6= NULL then\nif ISEDIBLE() OR ISPACMANCLOSETOPOWERPILL() then\nreturn NEXTMOVEAWAYFROM(pacman) end if if NEXTFLOAT < 0.9 then\nreturn NEXTMOVETOWARDS(pacman) end if\nelse return NEXTRANDOMMOVE()\nend if end function\nAlgorithm 5 POCommGhosts basic algorithm function GETMOVE()\ncurrentTick \u2190 GETCURRENTTICK() if currentTick = 0 || currentTick - tickSeen\n\u2265 TICKTHRESHOLD then lastPacmanIndex \u2190 \u22121 tickSeen \u2190 \u22121\nend if pacman\u2190 GETPACMANINDEX() messenger \u2190 GETMESSENGER() if pacman 6= \u22121 then\nlastPacmanIndex \u2190 pacman tickSeen \u2190 currentTick if messenger 6= NULL then MESSEN-\nGER.ADDMESSAGE(. . .) end if\nend if if pacman = \u22121 AND messenger 6= NULL then\nfor message in MESSENGER.GETMESSAGES(ghost) do if MESSAGE.GETTYPE() = PACMANSEEN then\nif MESSAGE.GETTICK() > tickSeen then lastPacmanIndex \u2190 MESSAGE.GETDATA() tickSeen \u2190 MESSAGE.GETTICK()\nend if end if\nend for end if if pacmanIndex = \u22121 then pacmanIndex \u2190 lastPacmanIndex end if if DOESREQUIREACTION() = False then return NULL end if pacman \u2190 GETPACMANINDEX() if pacman 6= NULL then\nif ISEDIBLE() OR PACMANCLOSETOPPILL() then return NEXTMOVEAWAYFROM(pacman) end if if NEXTFLOAT < 0.9 then\nreturn NEXTMOVETOWARDS(pacman) end if\nelse return NEXTRANDOMMOVE()\nend if end function\nand 33, 300 games against the POP agents. The results are displayed in Figure 4 and show that the value of 50 is a good value against these two agents. Interestingly the data against the POP algorithm is significantly noisier than COP. This is\npresumably due to COP being deterministic and POP being non-deterministic."}, {"heading": "E. Sample Controllers Results", "text": "These basic controllers may not represent the best agents for the game, but they do provide simple comparisons between them as they rely on the same strategy. The only difference between them is the addition of PO and the effects of this are apparent. Running these controllers over 1000 runs in each combination provides the results displayed in Table IV. It is clear that for the same strategies, PO is a large handicap to the agent. Against COG, adding PO to Ms. Pac-Man caused the score to drop to only 45% of previous performance. Adding communication abilities to the PO Ghosts allowed CO Ms. Pac-Man to achieve only 33.43% of her previous score. This is a huge difference between two very simple algorithms and clearly shows the benefits of communication in this scenario.\n7"}, {"heading": "F. Competition Tracks", "text": "The competition was originally run with two main tracks. The first track allowed participants to submit code to control the Ms. Pac-Man character. The second track allowed participants to submit a single class to control the Ghosts.\nThe revived competition will also feature two tracks. The first track will allow participants to submit code to control Ms. Pac-Man but they will be operating within PO constraints. The second track will allow participants to submit 4 controllers - one for each ghost - that will be operating under PO constraints."}, {"heading": "G. Entrant Ranking", "text": "While the number of entrants remains low, a round robin tournament will be used for simplicity. If this process begins to take too long, entrants will be assigned scores using the Glicko2 rating algorithm [9] as recommended for competitions [23] similar to this. These will be used to calculate matches in the competition periodically, with these matches updating the scores. The final results will be calculated with a full round robin of the top 10 ghost and top ten Ms. Pac-Man controllers before being announced at IEEE Computational Intelligence and Games Conference (CIG)."}, {"heading": "IV. CONCLUSIONS AND FUTURE WORK", "text": "In this paper we presented a major update to the Ms. PacMan Vs Ghost Team competition that will be running at CIG. We presented the PO constraint that has been added to the environment and studied the effect that the ability to communicate has on the ghosts performance when there is incomplete information available. Finally we presented the two tracks: PO ghosts and PO Ms. Pac-Man. The controllers used in this paper were of a very basic nature, and there is a great deal more potential to be realised. This competition aims to explore PO in real time games and communication within PO constraints.\nThere is a lot of potential work to be done in the future. The current competition still only has 4 mazes for the entrants to play on. Additional mazes can be created and included. The competition has maintained the original balance of one Ms. Pac-Man and 4 ghosts. The competition could be extended to allow for modifications to this balance, with more or less of either type of player.\nAt present, there is only the one method of sight for observing the environment. The competition could be extended to include additional observations such as hearing or smell.\nThese would be less precise than sight but have the potential to provide information that sight can\u2019t."}, {"heading": "V. ACKNOWLEDGMENTS", "text": "This work was funded by the EPSRC Centre for Doctoral Training in Intelligent Games & Game Intelligence (IGGI) [EP/L015846/1]"}], "references": [{"title": "Evolving Diverse Ms. Pac- Man Playing Agents Using Genetic Programming", "author": ["Atif M Alhejali", "Simon M Lucas"], "venue": "In Computational Intelligence (UKCI),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "Using Genetic Programming to Evolve Heuristics for a Monte Carlo Tree Search Ms Pac-Man Agent", "author": ["Atif M Alhejali", "Simon M Lucas"], "venue": "In Computational Intelligence in Games (CIG),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Evolution Versus Temporal Difference Learning For learning to Play Ms. Pac-Man", "author": ["Peter Burrow", "Simon M Lucas"], "venue": "In Computational Intelligence and Games,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "PacmAnt: Optimization based on ant colonies applied to developing an agent for Ms. Pac-Man", "author": ["Martin Emilio", "Martinez Moises", "Recio Gustavo", "Saez Yago"], "venue": "In Computational Intelligence and Games (CIG),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2010}, {"title": "A model-based cell decomposition approach to on-line pursuit-evasion path planning and the video game ms. pac-man", "author": ["Greg Foderaro", "Ashleigh Swingler", "Silvia Ferrari"], "venue": "In Computational Intelligence and Games (CIG),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Evolving Pac-Man Players: Can We Learn From Raw Input", "author": ["Marcus Gallagher", "Mark Ledwich"], "venue": "In Computational Intelligence and Games,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2007}, {"title": "Example of the glicko-2 system", "author": ["Mark E Glickman"], "venue": "Boston University,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Evolutionary fuzzy systems for generating better ms. pacman players", "author": ["Hisashi Handa", "Maiko Isozaki"], "venue": "In Fuzzy Systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2008}, {"title": "A new design for a turing test for bots", "author": ["Philip Hingston"], "venue": "In Proceedings of the 2010 IEEE Conference on Computational Intelligence and Games,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2010}, {"title": "The iterated prisoners", "author": ["Graham Kendall", "Xin Yao", "Siang Yew Chong"], "venue": "dilemma: 20 years on. World Scientific Publishing Co., Inc.,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2007}, {"title": "Evolving evil: optimizing flocking strategies through genetic algorithms for the ghost team in the game of Ms. Pac- Man", "author": ["Federico Liberatore", "Antonio M Mora", "Pedro A Castillo", "Juan Juli\u00e1n Merelo Guerv\u00f3s"], "venue": "In Applications of Evolutionary Computation,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "Evolving a Neural Network Location Evaluator to Play Ms. Pac-Man", "author": ["Simon M Lucas"], "venue": "In CIG. Citeseer,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2005}, {"title": "Applying Monte-Carlo Tree Search To Collaboratively Controlling of a Ghost Team in Ms Pac- Man", "author": ["Kien Quang Nguyen", "Ruck Thawonmas"], "venue": "In Games Innovation Conference (IGIC),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "A survey of real-time strategy game AI research and competition in starcraft", "author": ["Santiago Onta\u00f1\u00f3n", "Gabriel Synnaeve", "Alberto Uriarte", "Florian Richoux", "David Churchill", "Mike Preuss"], "venue": "IEEE Trans. Comput. Intellig. and AI in Games,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2013}, {"title": "Real-time monte carlo tree search in ms pac-man", "author": ["Tom Pepels", "Mark HM Winands", "Marc Lanctot"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "The 2014 General Video Game Playing Competition", "author": ["Diego Perez", "Spyridon Samothrakis", "Julian Togelius", "Tom Schaul", "Simon Lucas", "Adrien Cou\u00ebtoux", "Jeyull Lee", "Chong-U Lim", "Tommy Thompson"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "The Geometry Friends Game AI Competition", "author": ["Rui Prada", "Phil Lopes", "Joo Catarino", "Joo Quitrio", "Francisco S. Melo"], "venue": "IEEE Conference on Computational Intelligence and Games, IEEE CIG,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2015}, {"title": "A Simple Tree Search Method For Playing Ms. Pac-Man", "author": ["David Robles", "Simon M Lucas"], "venue": "In Computational Intelligence and Games,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}, {"title": "Ms Pac-Man versus Ghost Team CEC 2011 Competition", "author": ["Philipp Rohlfshagen", "Simon M Lucas"], "venue": "In Evolutionary Computation (CEC),", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2011}, {"title": "Predicting dominance rankings for score-based games", "author": ["Spyridon Samothrakis", "Diego Perez", "Philipp Rohlfshagen", "Simon Lucas"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Fast Approximate Max-n Monte Carlo Tree Search for Ms Pac-Man", "author": ["Spyridon Samothrakis", "David Robles", "Simon Lucas"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2011}, {"title": "Monte-Carlo planning in large POMDPs", "author": ["David Silver", "Joel Veness"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "An Influence Map Model for Playing Ms. Pac-Man", "author": ["Nathan Wirth", "Marcus Gallagher"], "venue": "In Computational Intelligence and Games,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2008}, {"title": "Using NEAT for continuous adaptation and teamwork formation in Pacman", "author": ["Markus Wittkamp", "Luigi Barone", "Philip Hingston"], "venue": null, "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2008}], "referenceMentions": [{"referenceID": 18, "context": "Pac-Man Vs Ghost Team competition [22] which was was based on a simulator that mimicked the original game reasonably closely.", "startOffset": 34, "endOffset": 38}, {"referenceID": 8, "context": "These competitions typically focus on trying to develop the strongest AI for a particular scenario although some exceptions such as the BotPrize [11] competition that focuses on developing Unreal Tournament agents that are human-like.", "startOffset": 145, "endOffset": 149}, {"referenceID": 13, "context": "The Starcraft competition [17] runs on the original Starcraft: Brood War (Blizzard Entertainment, 1998).", "startOffset": 26, "endOffset": 30}, {"referenceID": 15, "context": "The General Video Game Artificial Intelligence (GVGAI) competition [19] runs a custom game engine that emulates a wide variety of games, many of which are based on old classic arcade games.", "startOffset": 67, "endOffset": 71}, {"referenceID": 16, "context": "The Geometry Friends competition [20] features a co-operative track for two heterogeneous agents to solve mazes, a similar task to the ghost control of Ms.", "startOffset": 33, "endOffset": 37}, {"referenceID": 9, "context": "An early example is the classic Iterative Prisoner Dilemma (IPD) [12], a game featuring a small amount of PO in the form of the simultaneous actions of the two prisoners.", "startOffset": 65, "endOffset": 69}, {"referenceID": 5, "context": "Gallagher and Ledwich [8] investigated a simplified version of the game including for the majority of their experiments using only a single near deterministic ghost and no power pills.", "startOffset": 22, "endOffset": 25}, {"referenceID": 11, "context": "Lucas [14] explored using a simple Evolutionary Algorithm (EA) in (N +N ) form with N = 1 or 10.", "startOffset": 6, "endOffset": 10}, {"referenceID": 17, "context": "Robles and Lucas [21] investigate writing a simple tree search method for writing an agent to play Ms.", "startOffset": 17, "endOffset": 21}, {"referenceID": 2, "context": "Burrow and Lucas [3] compared two different approaches to learning to play the game of Ms.", "startOffset": 17, "endOffset": 20}, {"referenceID": 7, "context": "Handa and Isozaki [10] used Fuzzy logic tuned by a 1+1 EA.", "startOffset": 18, "endOffset": 22}, {"referenceID": 22, "context": "Wirth and Gallagher [27] used Influence Maps to drive a Ms.", "startOffset": 20, "endOffset": 24}, {"referenceID": 0, "context": "Alhejali and Lucas [1] [2] studied the use of Genetic Programming (GP) for evolving heuristics to control Ms.", "startOffset": 19, "endOffset": 22}, {"referenceID": 1, "context": "Alhejali and Lucas [1] [2] studied the use of Genetic Programming (GP) for evolving heuristics to control Ms.", "startOffset": 23, "endOffset": 26}, {"referenceID": 20, "context": "Samothrakis et al [24] used a 5 player maxn tree with limited tree search depth.", "startOffset": 18, "endOffset": 22}, {"referenceID": 14, "context": "Pepels et al [18] describe their work in creating an entrant to", "startOffset": 13, "endOffset": 17}, {"referenceID": 3, "context": "Emilio et al [4] worked with Ant Colony Optimisation (ACO) to design an", "startOffset": 13, "endOffset": 16}, {"referenceID": 4, "context": "Foderaro et al [7] [6] used a tree search technique after", "startOffset": 15, "endOffset": 18}, {"referenceID": 12, "context": "Nguyen and Thawonmas [16] present their agent that was entered into the CEC 2011 Ms.", "startOffset": 21, "endOffset": 25}, {"referenceID": 23, "context": "Wittkamp et al [28] investigate using an online learning technique - Neuro-Evolution Through Augmenting Topologies (NEAT) - to evolve the controllers for the ghosts team.", "startOffset": 15, "endOffset": 19}, {"referenceID": 10, "context": "Liberatore et al [13] look into the use of Swarm Intelligence (SI) to control the ghost team.", "startOffset": 17, "endOffset": 21}, {"referenceID": 21, "context": "PacMan previously by Silver and Veness [26].", "startOffset": 39, "endOffset": 43}, {"referenceID": 6, "context": "If this process begins to take too long, entrants will be assigned scores using the Glicko2 rating algorithm [9] as recommended for competitions [23] similar to this.", "startOffset": 109, "endOffset": 112}, {"referenceID": 19, "context": "If this process begins to take too long, entrants will be assigned scores using the Glicko2 rating algorithm [9] as recommended for competitions [23] similar to this.", "startOffset": 145, "endOffset": 149}], "year": 2016, "abstractText": "This paper introduces the revival of the popular Ms. Pac-Man Versus Ghost Team competition. We present an updated game engine with Partial Observability constraints, a new MultiAgent Systems approach to developing Ghost agents, and several sample controllers to ease the development of entries. A restricted communication protocol is provided for the Ghosts, providing a more challenging environment than before. The competition will debut at the IEEE Computational Intelligence and Games Conference 2016. Some preliminary results showing the effects of Partial Observability and the benefits of simple communication are also presented.", "creator": "TeX"}}}