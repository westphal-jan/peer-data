{"id": "1610.00527", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Oct-2016", "title": "Video Pixel Networks", "abstract": "We approval each dynamical video designs, as Video Pixel Network (VPN ), seen estimates only discontinuous operation processes among 's raw bitmap our new kind radio. The theory making the physiological pioneered reflect the well, large include typical pattern of tv polynomials their concatenated for especially rather days - configurations metabolic chain. The VPN approaches the best possible level on rest Moving MNIST closes, a leap over one month state many the medieval, and the generated facebook show only having variables from when ground truth. The VPN same produces detailed stored on while any - inclusion Robotic Pushing market instead generalizes this all instead form novel objects.", "histories": [["v1", "Mon, 3 Oct 2016 13:06:40 GMT  (5347kb,D)", "http://arxiv.org/abs/1610.00527v1", "16 pages"]], "COMMENTS": "16 pages", "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["nal kalchbrenner", "a\u00e4ron van den oord", "karen simonyan", "ivo danihelka", "oriol vinyals", "alex graves", "koray kavukcuoglu"], "accepted": true, "id": "1610.00527"}, "pdf": {"name": "1610.00527.pdf", "metadata": {"source": "CRF", "title": "Video Pixel Networks", "authors": ["Nal Kalchbrenner", "A\u00e4ron van den Oord", "Karen Simonyan", "Ivo Danihelka", "Oriol Vinyals", "Alex Graves", "Koray Kavukcuoglu"], "emails": ["nalk@google.com", "avdnoord@google.com", "simonyan@google.com", "danihelka@google.com", "vinyals@google.com", "gravesa@google.com", "korayk@google.com"], "sections": [{"heading": "1 Introduction", "text": "Video modelling has remained a challenging problem due to the complexity and ambiguity inherent in video data. Current approaches range from mean squared error models based on deep neural networks (Srivastava et al., 2015a; Oh et al., 2015), to models that predict quantized image patches (Ranzato et al., 2014), incorporate motion priors (Patraucean et al., 2015; Finn et al., 2016) or use adversarial losses (Mathieu et al., 2015; Vondrick et al., 2016). Despite the wealth of approaches, future frame predictions that are free of systematic artifacts (e.g. blurring) have been out of reach even on relatively simple benchmarks like Moving MNIST (Srivastava et al., 2015a).\nWe propose the Video Pixel Network (VPN), a generative video model based on deep neural networks, that reflects the factorization of the joint distribution of the pixel values in a video. The model encodes the four-dimensional structure of video tensors and captures dependencies in the time dimension of the data, in the two space dimensions of each frame and in the color channels of a pixel. This makes it possible to model the stochastic transitions locally from one pixel to the next and more globally from one frame to the next without introducing independence assumptions in the conditional factors. The factorization further ensures that the model stays fully tractable; the likelihood that the model assigns to a video can be computed exactly. The model operates on pixels without preprocessing and predicts discrete multinomial distributions over raw pixel intensities, allowing the model to estimate distributions of any shape.\nThe architecture of the VPN consists of two parts: resolution preserving CNN encoders and PixelCNN decoders (van den Oord et al., 2016b). The CNN encoders preserve at all layers the spatial resolution of the input frames in order to maximize representational capacity. The outputs of the encoders are combined over time with a convolutional LSTM that also preserves the resolution (Hochreiter and Schmidhuber, 1997; Shi et al., 2015). The PixelCNN decoders use masked convolutions to efficiently capture space and color dependencies and use a softmax layer to model the multinomial distributions over raw pixel values. The network uses dilated convolutions in the encoders to achieve larger receptive fields and better capture global motion. The network also utilizes newly defined multiplicative units and corresponding residual blocks.\nWe evaluate VPNs on two benchmarks. The first is the Moving MNIST dataset (Srivastava et al., 2015a) where, given 10 frames of two moving digits, the task is to predict the following\nar X\niv :1\n61 0.\n00 52\n7v 1\n[ cs\n.C V\n] 3\nO ct\n2 01\n6\nR G\nB\nFtF<t\nx\nF1F0 F2\nF\u03023F\u03020 F\u03023F\u03021\nF1F0 F2 F3\nR\nG\nB\nFtF<t\nx\nF1F0 F2\nF\u03023F\u03020 F\u03023F\u03021\nBaselineVideo Pixel Network\nPixelCNN Decoders\nCNN Decoders\nResolution Preserving CNN Encoders\nFigure 1: Dependency map (top) and neural network structure (bottom) for the VPN (left) and the baseline model (right).\n10 frames. In Sect. 5 we show that the VPN achieves 87.6 nats/frame, a score that is near the lower bound on the loss (calculated to be 86.3 nats/frame); this constitutes a significant improvement over the previous best result of 179.8 nats/frame (Patraucean et al., 2015).\nThe second benchmark is the Robotic Pushing dataset (Finn et al., 2016) where, given two natural video frames showing a robotic arm pushing objects,\nthe task is to predict the following 18 frames. We show that\nthe VPN not only generalizes to new action sequences with objects seen during training, but also to new action sequences involving novel objects not seen during training. Random samples from the VPN preserve remarkable detail throughout the generated sequence. We also define a baseline model that lacks the space and color dependencies. This lets us see that the latter dependencies are crucial for avoiding systematic artifacts in generated videos."}, {"heading": "2 Model", "text": "In this section we define the probabilistic model implemented by Video Pixel Networks. Let a video x be a four-dimensional tensor of pixel values xt,i,j,c, where the first (temporal) dimension t \u2208 {0, ..., T} corresponds to one of the frames in the video, the next two (spatial) dimensions i, j \u2208 {0, ..., N} index the pixel at row i and column j in frame t, and the last dimension c \u2208 {R,G,B} denotes one of the three RGB channels of the pixel. We let each xt,i,j,c be a random variable that takes values from the RGB color intensities of the pixel.\nBy applying the chain rule to factorize the video likelihood p(x) as a product of conditional probabilities, we can model it in a tractable manner and without introducing independence assumptions:\np(x) = T\u220f t=0 N\u220f i=0 N\u220f j=0 p(xt,i,j,B |x<,xt,i,j,R,xt,i,j,G) p(xt,i,j,G|x<,xt,i,j,R) p(xt,i,j,R|x<). (1)\nHere x< = x(t,<i,<j,:) \u222ax(<t,:,:,:) comprises the RGB values of all pixels to the left and above the pixel at position (i, j) in the current frame t, as well as the RGB values of pixels from all the previous frames.\nNote that the factorization itself does not impose a unique ordering on the set of variables. We choose an ordering according to two criteria. The first criterion is determined by the properties and uses of the data; frames in the video are predicted according to their temporal order. The second criterion favors orderings that can be computed efficiently; pixels are predicted starting from one corner of the frame (the top left corner) and ending in the opposite corner of the frame (the bottom right one) as this allows for the computation to be implemented efficiently (van den Oord et al., 2016b). The order for the prediction of the colors is chosen by convention as R, G and B.\nThe VPN models directly the four dimensions of video tensors. We use Ft to denote the t-th frame xt,:,:,: in the video x.\nFigure 1 illustrates the fourfold dependency structure for the green color channel value of the pixel x in frame Ft, which depends on: (i) all pixels in all the previous frames F<t; (ii) all three colors of the already generated pixels in Ft; (iii) the already generated red color value of the pixel x.\nWe follow the PixelRNN approach (van den Oord et al., 2016b) in modelling each conditional factor as a discrete multinomial distribution over 256 raw color values. This allows for the predicted distributions to be arbitrarily multimodal."}, {"heading": "2.1 Baseline Model", "text": "We compare the VPN model with a baseline model that encodes the temporal dependencies in videos from previous frames to the next, but ignores the spatial dependencies between the pixels within a frame and the dependencies between the color channels. In this case the joint distribution is factorized by introducing independence assumptions:\np(x) \u2248 T\u220f\nt=0 N\u220f i=0 N\u220f j=0 p(xt,i,j,B |x<t,:,:,:) p(xt,i,j,G|x<t,:,:,:) p(xt,i,j,R|x<t,:,:,:). (2)\nFigure 1 illustrates the conditioning structure in the baseline model. The green channel value of pixel x only depends on the values of pixels in previous frames. Various models have been proposed that are similar to our baseline model in that they capture the temporal dependencies only (Ranzato et al., 2014; Srivastava et al., 2015a; Oh et al., 2015)"}, {"heading": "2.2 Remarks on the Factorization", "text": "To illustrate the properties of the two factorizations, suppose that a model needs to predict the value of a pixel x and the value of the adjacent pixel y in a frame F , where the transition to the frame F from the previous frames F< is non-deterministic. For a simple example, suppose the previous frames F< depict a robotic arm and in the current frame F the robotic arm is about to move either left or right. The baseline model estimates p(x|F<) and p(y|F<) as distributions with two modes, one for the robot moving left and one for the robot moving right. Sampling independently from p(x|F<) and p(y|F<) can lead to two inconsistent pixel values coming from distinct modes, one pixel value depicting the robot moving left and the other depicting the robot moving right. The accumulation of these inconsistencies for a few frames leads to known artifacts such as blurring of video continuations. By contrast, in this example, the VPN estimates p(x|F<) as the same bimodal distribution, but then estimates p(y|x, F<) conditioned on the selected value of x. The conditioned distribution is unimodal and, if the value of x is sampled to depict the robot moving left, then the value of y is sampled accordingly to also depict the robot moving left.\nGenerating a video tensor requires sampling T \u2217N2 \u2217 3 variables, which for a second of video with resolution 64\u00d7 64 is in the order of 105 samples. This figure is in the order of 104 for generating a single image or for a second of audio signal (van den Oord et al., 2016a), and it is in the order of 102 for language tasks such as machine translation (Kalchbrenner and Blunsom, 2013)."}, {"heading": "3 Architecture", "text": "In this section we construct a network architecture capable of computing efficiently the factorized distribution in Sect. 2. The architecture consists of two parts. The first part models the temporal dimension of the data and consists of Resolution Preserving CNN Encoders whose outputs are given to a Convolutional LSTM. The second part models the spatial and color dimensions of the video and consists of PixelCNN architectures (van den Oord et al., 2016b;c) that are conditioned on the outputs of the CNN Encoders."}, {"heading": "3.1 Resolution Preserving CNN Encoders", "text": "Given a set of video frames F0, ..., FT , the VPN first encodes each of the first T frames F0, ..., FT\u22121 with a CNN Encoder. These frames form the histories that condition the generated frames. Each of the CNN Encoders is composed of k (k = 8 in the experiments) residual blocks (Sect. 4) and the spatial resolution of the input frames is preserved throughout the layers in all the blocks. Preserving the resolution is crucial as it allows the model to condition each pixel that needs to be generated without loss of representational capacity. The outputs of the T CNN Encoders, which are computed in parallel during training, are given as input to a Convolutional LSTM, which also preserves the resolution. This part of the VPN computes the temporal dependencies of the video tensor and is represented in Fig. 1 by the shaded blocks."}, {"heading": "3.2 PixelCNN Decoders", "text": "The second part of the VPN architecture computes dependencies along the space and color dimensions. The T outputs of the first part of the architecture provide representations for the contexts that condition the generation of a portion of the T + 1 frames F0, ..., FT ; if one generates all the T + 1 frames, then the first frame F0 receives no context representation. These context representations are used to condition decoder neural networks that are PixelCNNs. PixelCNNs are composed of l resolution preserving residual blocks (l = 12 in the experiments), each in turn formed of masked convolutional layers. Since we treat the pixel values as discrete random variables, the final layer of the PixelCNN decoders is a softmax layer over 256 intensity values for each color channel in each pixel.\nFigure 1 depicts the two parts of the architecture of the VPN. The decoder that generates pixel x of frame Ft sees the context representation for all the frames up to Ft\u22121 coming from the preceding CNN encoders. The decoder also sees the pixel values above and left of the pixel x in the current frame Ft that is itself given as input to the decoder."}, {"heading": "3.3 Architecture of Baseline Model", "text": "We implement the baseline model by using the same CNN encoders to build the context representations. In contrast with PixelCNNs, the decoders in the baseline model are CNNs that do not use masking on the weights; the frame to be predicted thus cannot be given as input. As shown in Fig. 1, the resulting neural network captures the temporal dependencies, but ignores spatial and color channel dependencies within the generated frames. Just like for VPNs, we make the neural architecture of the baseline model resolution preserving in all the layers."}, {"heading": "4 Network Building Blocks", "text": "In this section we describe two basic operations that are used as the building blocks of the VPN. The first is the Multiplicative Unit (MU, Sect. 4.1) that contains multiplicative interactions inspired by LSTM (Hochreiter and Schmidhuber, 1997) gates. The second building block is the Residual Multiplicative Block (RMB, Sect. 4.2) that is composed of multiple layers of MUs."}, {"heading": "4.1 Multiplicative Units", "text": "A multiplicative unit (Fig. 2) is constructed by incorporating LSTM-like gates into a convolutional layer. Given an input h of size N \u00d7N \u00d7 c, where c corresponds to the number of channels, we first pass it through four convolutional layers to create an update u and three gates g1\u22123. The input, update, and gates are then combined in the following manner:\ng1 = \u03c3(W1 \u2217 h) g2 = \u03c3(W2 \u2217 h) g3 = \u03c3(W3 \u2217 h) (3) u = tanh(W4 \u2217 h)\nMU(h;W) = g1 tanh(g2 h + g3 u)\nwhere \u03c3 is the sigmoid non-linearity and is component-wise multiplication. Biases are omitted for clarity. In our experiments the convolutional weights W1\u22124 use a kernel of size 3\u00d7 3. Unlike LSTM networks, there is no distinction between memory and hidden states. Also, unlike Highway networks (Srivastava et al., 2015b) and Grid LSTM (Kalchbrenner et al., 2016), there is no setting of the gates such that MU(h;W) simply returns the input h; the input is always processed with a non-linearity."}, {"heading": "4.2 Residual Multiplicative Blocks", "text": "To allow for easy gradient propagation through many layers of the network, we stack two MU layers in a residual multiplicative block (Fig. 3) where the input has a residual (additive skip) connection to the output (He et al., 2016). For computational efficiency, the number of channels is halved in MU layers inside the block. Namely, given an input layer h of size N \u00d7N \u00d7 2c with 2c channels, we first apply a 1 \u00d7 1 convolutional layer that reduces the number of channels to c; no activation function is used for this layer, and it is followed by two successive MU layers each with a convolutional kernel of size 3\u00d7 3. We then project the feature map back to 2c channels using another 1\u00d7 1 convolutional layer. Finally, the input h is added to the overall output forming a residual connection. Such a layer structure is similar to the bottleneck residual unit of (He et al., 2016). Formally, the Residual Multiplicative Block (RMB) is computed as follows:\nh1 = W1 \u2217 h h2 = MU(h1;W2)\nh3 = MU(h2;W3) (4) h4 = W4 \u2217 h3 RMB(h;W) = h + h4\nWe also experimented with a standard residual block of (He et al., 2016) which uses ReLU non-linearities \u2013 see Sect. 5 and 6 for details."}, {"heading": "4.3 Dilated Convolutions", "text": "Having a large receptive field helps the model to capture the motion of larger objects. One way to increase the receptive field without much effect on the computational complexity is to use dilated convolutions (Chen et al., 2014; Yu and Koltun, 2015), which make the receptive field grow exponentially, as opposed to linearly, in the number of layers. In the variant of VPN that uses dilation, the dilation rates are the same within each RMB, but they double from one RMB to the next up to a chosen maximum size, and then repeat (van den Oord et al., 2016a). In particular, in the CNN encoders we use two repetitions of the dilation scheme [1, 2, 4, 8], for a total of 8 RMBs. We do not use dilation in the decoders."}, {"heading": "5 Moving MNIST", "text": "The Moving MNIST dataset consists of sequences of 20 frames of size 64 \u00d7 64, depicting two potentially overlapping MNIST digits moving with constant velocity and bouncing off walls. Training sequences are generated on-the-fly using digits from the MNIST training set without a limit on the number of generated training sequences (our models observe 19.2M training sequences before convergence). The test set is fixed and consists of 10000 sequences that contain digits from the MNIST test set. 10 of the 20 frames are used as context and the remaining 10 frames are generated.\nIn order to make our results comparable, for this dataset only we use the same sigmoid cross-entropy loss as used in prior work (Srivastava et al., 2015a). The loss is defined as:\nH(z, y) = \u2212 \u2211 i zi log yi + (1\u2212 zi) log(1\u2212 yi) (5)\nwhere zi are the grayscale targets in the Moving MNIST frames that are interpreted as probabilities and yi are the predictions. The lower bound on H(z, y) may be non-zero. In fact, if we let zi = yi, for the 10 frames that are predicted in each sequence of the Moving MNIST test data, H(z, y) = 86.3 nats/frame."}, {"heading": "5.1 Implementation Details", "text": "The VPNs with and without dilation, as well as the baseline model, have 8 RMBs in the encoders and 12 RMBs in the decoders; for the network variants that use ReLUs we double the number of residual blocks to 16 and 24, respectively, in order to equate the size of the receptive fields in the two model variants. The number of channels in the blocks is c = 128 while the convolutional LSTM has 256 channels. The topmost layer before the output has 768 channels. We train the models for 300000 steps with 20-frame sequences predicting the last 10 frames of each sequence. Each step corresponds to a batch of 64 sequences. We use RMSProp for the optimization with an initial learning rate of 3 \u00b7 10\u22124 and multiply the learning rate by 0.3 when learning flatlines."}, {"heading": "5.2 Results", "text": "Table 1 reports the results of various recent video models on the Moving MNIST test set. Our baseline model achieves 110.1 nats/frame, which is significantly better than the previous state of the art (Patraucean et al., 2015). We attribute these gains to architectural features and, in particular, to the resolution preserving aspect of the network. Further, the VPN achieves 87.6 nats/frame, which approaches the lower bound of 86.3 nats/frame.\nTable 2 reports results of architectural variants of the VPNs. The model with dilated convolutions improves over its non-dilated counterpart as it can more easily act on the relatively large digits moving in the 64\u00d7 64 frames. In the case of Moving MNIST, MUs do not yield a significant improvement in performance over just using ReLUs, possibly due to the relatively low complexity of the task. A sizeable improvement is obtained from MUs on the Robotic Pushing dataset (Tab. 3).\nA qualitative evaluation of video continuations produced by the models matches the quantitative results. Figure 4 shows random continuations produced by the VPN and the baseline model on the Moving MNIST test set. The frames generated by the VPN are consistently sharp even when they deviate from the ground truth.\nBy contrast, the continuations produced by the baseline model get progressively more blurred with time \u2013 as the uncertainty of the model grows with the number of generated frames, the lack of inter-frame spatial dependencies leads the model to take the expectation over possible trajectories."}, {"heading": "6 Robotic Pushing", "text": "The Robotic Pushing dataset consists of sequences of 20 frames of size 64\u00d7 64 that represent camera recordings of a robotic arm pushing objects in a basket. The data consists of a training set of 50000 sequences, a validation set, and two test sets of 1500 sequences each, one involving a subset of the objects seen during training and the other one involving novel objects not seen during training. Each frame in the video sequence is paired with the state of the robot at that frame and with the desired action to reach the next frame. The transitions are non-deterministic as the robotic arm may not reach the desired state in a frame due to occlusion by the objects encountered on its trajectory. 2 frames, 2 states and 2 actions are used as context; the desired 18 actions in the future are also given. The 18 frames in the future are then generated conditioned on the 18 actions as well as on the 2 steps of context."}, {"heading": "6.1 Implementation Details", "text": "For this dataset, both the VPN and the baseline model use the softmax cross-entropy loss, as defined in Sect. 2. As for Moving MNIST, the models have 8 RMBs in the encoders and 12 RMBs in the decoders; the ReLU variants have 16 residual blocks in the encoders and 24 in the decoders. The number of channels in the RMBs is c = 128, the convolutional LSTM has 256 channels and the topmost layer before the output has 1536 channels. We use RMSProp with an initial learning rate of 10\u22124. We train for 275000 steps with a batch size of 64 sequences per step. Each training sequence is obtained by selecting a random subsequence of 12 frames together with the corresponding states and actions. We use the first 2 frames in the subsequence as context and predict the other 10 frames. States and\nactions come as vectors of 5 real values. For the 2 context frames, we condition each layer in the encoders and the decoders with the respective state and action vectors; the conditioning is performed by the result of a 1 \u00d7 1 convolution applied to the action and state vectors that are broadcast to all of the 64 \u00d7 64 positions. For the other 10 frames, we condition the encoders and decoders with the action vectors only. We discard the state vectors for the predicted frames during training and do not use them at generation. For generation we unroll the models for the entire sequence of 20 frames and generate 18 frames."}, {"heading": "6.2 Results", "text": "Table 3 reports the results of the baseline model and variants of the VPN on the Robotic Pushing validation and test sets. The best variant of the VPN has a > 65% reduction in negative log-likelihood over the baseline model. This highlights the importance of space and color dependencies in non-deterministic environments. The results on the validation and test datasets with seen objects and on the test dataset with novel objects are similar. This shows that the models have learned to generalize well not just to new action sequences, but also to new objects. Furthermore, we see that using multiplicative interactions in the VPN gives a significant improvement over using ReLUs.\nFigures 5\u20139 visualize the samples generated by our models. Figure 5 contains random samples of the VPN on the validation set with seen objects (together with the corresponding ground truth). The model is able to distinguish between the robotic arm and the background, correctly handling occlusions and only pushing the objects when they come in contact with the robotic arm. The VPN generates the arm when it enters into the frame from one of the sides. The position of the arm in the samples is close to that in the ground truth, suggesting the VPN has learned to follow the actions. The generated videos remain detailed throughout the 18 frames and few artifacts are present. The samples remain good showing the ability of the VPN to generalize to new sequences of actions. Figure 6 evaluates an additional level of generalization, by showing samples from the test set with novel objects not seen during training. The VPN seems to identify the novel objects correctly and generates plausible movements for them. The samples do not appear visibly worse than in the datasets with seen objects. Figure 7 demonstrates the probabilistic nature of the VPN, by showing multiple different video continuations that start from the same context frames and are conditioned on the same sequence of 18 future actions. The continuations are plausible and varied, further suggesting the VPN\u2019s ability to generalize. Figure 8 shows samples from the baseline model. In contrast with the VPN samples, we see a form of high frequency noise appearing in the non-deterministic movements of the robotic arm. This can be attributed to the lack of space and color dependencies, as discussed in Sec. 2.2. Figure 9 shows a comparison of continuations of the baseline model and the VPN from the same context sequence. Besides artifacts, the baseline model also seems less responsive to the actions."}, {"heading": "7 Conclusion", "text": "We have introduced the Video Pixel Network, a deep generative model of video data that models the factorization of the joint likelihood of video. We have shown that, despite its lack of specific motion priors or surrogate losses, the VPN approaches the lower bound on the loss on the Moving MNIST benchmark that corresponds to a large improvement over the previous state of the art. On the Robotic Pushing dataset, the VPN achieves significantly\nbetter likelihoods than the baseline model that lacks the fourfold dependency structure; the VPN generates videos that are free of artifacts and are highly detailed for many frames into the future. The fourfold dependency structure provides a robust and generic method for generating videos without systematic artifacts."}, {"heading": "Acknowledgments", "text": "The authors would like to thank Chelsea Finn for her advice on the Robotic Pushing dataset and Lasse Espeholt for helpful remarks."}], "references": [{"title": "Semantic image segmentation with deep convolutional nets and fully connected crfs", "author": ["Liang-Chieh Chen", "George Papandreou", "Iasonas Kokkinos", "Kevin Murphy", "Alan L. Yuille"], "venue": "CoRR, abs/1412.7062,", "citeRegEx": "Chen et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2014}, {"title": "Unsupervised learning for physical interaction through video", "author": ["Chelsea Finn", "Ian J. Goodfellow", "Sergey Levine"], "venue": "prediction. CoRR,", "citeRegEx": "Finn et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Finn et al\\.", "year": 2016}, {"title": "Identity mappings in deep residual networks", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": null, "citeRegEx": "He et al\\.,? \\Q2016\\E", "shortCiteRegEx": "He et al\\.", "year": 2016}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "Hochreiter and Schmidhuber.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Recurrent continuous translation models", "author": ["Nal Kalchbrenner", "Phil Blunsom"], "venue": "In EMNLP, pages 1700\u20131709,", "citeRegEx": "Kalchbrenner and Blunsom.,? \\Q2013\\E", "shortCiteRegEx": "Kalchbrenner and Blunsom.", "year": 2013}, {"title": "Grid long short-term memory", "author": ["Nal Kalchbrenner", "Ivo Danihelka", "Alex Graves"], "venue": "International Conference on Learning Representations,", "citeRegEx": "Kalchbrenner et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2016}, {"title": "Deep multi-scale video prediction beyond mean square error", "author": ["Micha\u00ebl Mathieu", "Camille Couprie", "Yann LeCun"], "venue": "CoRR, abs/1511.05440,", "citeRegEx": "Mathieu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mathieu et al\\.", "year": 2015}, {"title": "Actionconditional video prediction using deep networks in atari games", "author": ["Junhyuk Oh", "Xiaoxiao Guo", "Honglak Lee", "Richard L. Lewis", "Satinder P. Singh"], "venue": "In NIPS,", "citeRegEx": "Oh et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Oh et al\\.", "year": 2015}, {"title": "Spatio-temporal video autoencoder with differentiable memory", "author": ["Viorica Patraucean", "Ankur Handa", "Roberto Cipolla"], "venue": "CoRR, abs/1511.06309,", "citeRegEx": "Patraucean et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Patraucean et al\\.", "year": 2015}, {"title": "Video (language) modeling: a baseline for generative models of natural videos", "author": ["Marc\u2019Aurelio Ranzato", "Arthur Szlam", "Joan Bruna", "Micha\u00ebl Mathieu", "Ronan Collobert", "Sumit Chopra"], "venue": "CoRR, abs/1412.6604,", "citeRegEx": "Ranzato et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2014}, {"title": "Convolutional LSTM network: A machine learning approach for precipitation nowcasting", "author": ["Xingjian Shi", "Zhourong Chen", "Hao Wang", "Dit-Yan Yeung", "Wai-Kin Wong", "Wang-chun Woo"], "venue": "In NIPS,", "citeRegEx": "Shi et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Shi et al\\.", "year": 2015}, {"title": "Unsupervised learning of video representations using lstms", "author": ["Nitish Srivastava", "Elman Mansimov", "Ruslan Salakhutdinov"], "venue": "In ICML,", "citeRegEx": "Srivastava et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2015}, {"title": "Wavenet: A generative model for raw audio", "author": ["Aaron van den Oord", "Sander Dieleman", "Heiga Zen", "Karen Simonyan", "Oriol Vinyals", "Alex Graves", "Nal Kalchbrenner", "Andrew Senior", "Koray Kavukcuoglu"], "venue": "CoRR, abs/1609.03499,", "citeRegEx": "Oord et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2016}, {"title": "Pixel recurrent neural networks", "author": ["A\u00e4ron van den Oord", "Nal Kalchbrenner", "Koray Kavukcuoglu"], "venue": "In ICML,", "citeRegEx": "Oord et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2016}, {"title": "Conditional image generation with pixelcnn decoders", "author": ["A\u00e4ron van den Oord", "Nal Kalchbrenner", "Oriol Vinyals", "Lasse Espeholt", "Alex Graves", "Koray Kavukcuoglu"], "venue": "In NIPS,", "citeRegEx": "Oord et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Oord et al\\.", "year": 2016}, {"title": "Generating videos with scene", "author": ["Carl Vondrick", "Hamed Pirsiavash", "Antonio Torralba"], "venue": "dynamics. CoRR,", "citeRegEx": "Vondrick et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Vondrick et al\\.", "year": 2016}, {"title": "Multi-scale context aggregation by dilated convolutions", "author": ["Fisher Yu", "Vladlen Koltun"], "venue": "CoRR, abs/1511.07122,", "citeRegEx": "Yu and Koltun.,? \\Q2015\\E", "shortCiteRegEx": "Yu and Koltun.", "year": 2015}], "referenceMentions": [{"referenceID": 7, "context": "Current approaches range from mean squared error models based on deep neural networks (Srivastava et al., 2015a; Oh et al., 2015), to models that predict quantized image patches (Ranzato et al.", "startOffset": 86, "endOffset": 129}, {"referenceID": 9, "context": ", 2015), to models that predict quantized image patches (Ranzato et al., 2014), incorporate motion priors (Patraucean et al.", "startOffset": 56, "endOffset": 78}, {"referenceID": 8, "context": ", 2014), incorporate motion priors (Patraucean et al., 2015; Finn et al., 2016) or use adversarial losses (Mathieu et al.", "startOffset": 35, "endOffset": 79}, {"referenceID": 1, "context": ", 2014), incorporate motion priors (Patraucean et al., 2015; Finn et al., 2016) or use adversarial losses (Mathieu et al.", "startOffset": 35, "endOffset": 79}, {"referenceID": 6, "context": ", 2016) or use adversarial losses (Mathieu et al., 2015; Vondrick et al., 2016).", "startOffset": 34, "endOffset": 79}, {"referenceID": 15, "context": ", 2016) or use adversarial losses (Mathieu et al., 2015; Vondrick et al., 2016).", "startOffset": 34, "endOffset": 79}, {"referenceID": 3, "context": "The outputs of the encoders are combined over time with a convolutional LSTM that also preserves the resolution (Hochreiter and Schmidhuber, 1997; Shi et al., 2015).", "startOffset": 112, "endOffset": 164}, {"referenceID": 10, "context": "The outputs of the encoders are combined over time with a convolutional LSTM that also preserves the resolution (Hochreiter and Schmidhuber, 1997; Shi et al., 2015).", "startOffset": 112, "endOffset": 164}, {"referenceID": 8, "context": "8 nats/frame (Patraucean et al., 2015).", "startOffset": 13, "endOffset": 38}, {"referenceID": 1, "context": "The second benchmark is the Robotic Pushing dataset (Finn et al., 2016) where, given two natural video frames showing a robotic arm pushing objects, the task is to predict the following 18 frames.", "startOffset": 52, "endOffset": 71}, {"referenceID": 9, "context": "Various models have been proposed that are similar to our baseline model in that they capture the temporal dependencies only (Ranzato et al., 2014; Srivastava et al., 2015a; Oh et al., 2015)", "startOffset": 125, "endOffset": 190}, {"referenceID": 7, "context": "Various models have been proposed that are similar to our baseline model in that they capture the temporal dependencies only (Ranzato et al., 2014; Srivastava et al., 2015a; Oh et al., 2015)", "startOffset": 125, "endOffset": 190}, {"referenceID": 4, "context": ", 2016a), and it is in the order of 10 for language tasks such as machine translation (Kalchbrenner and Blunsom, 2013).", "startOffset": 86, "endOffset": 118}, {"referenceID": 3, "context": "1) that contains multiplicative interactions inspired by LSTM (Hochreiter and Schmidhuber, 1997) gates.", "startOffset": 62, "endOffset": 96}, {"referenceID": 5, "context": ", 2015b) and Grid LSTM (Kalchbrenner et al., 2016), there is no setting of the gates such that MU(h;W) simply returns the input h; the input is always processed with a non-linearity.", "startOffset": 23, "endOffset": 50}, {"referenceID": 2, "context": "3) where the input has a residual (additive skip) connection to the output (He et al., 2016).", "startOffset": 75, "endOffset": 92}, {"referenceID": 2, "context": "Such a layer structure is similar to the bottleneck residual unit of (He et al., 2016).", "startOffset": 69, "endOffset": 86}, {"referenceID": 2, "context": "We also experimented with a standard residual block of (He et al., 2016) which uses ReLU non-linearities \u2013 see Sect.", "startOffset": 55, "endOffset": 72}, {"referenceID": 10, "context": "Model Test (Shi et al., 2015) 367.", "startOffset": 11, "endOffset": 29}, {"referenceID": 8, "context": "2 (Patraucean et al., 2015) 179.", "startOffset": 2, "endOffset": 27}, {"referenceID": 0, "context": "One way to increase the receptive field without much effect on the computational complexity is to use dilated convolutions (Chen et al., 2014; Yu and Koltun, 2015), which make the receptive field grow exponentially, as opposed to linearly, in the number of layers.", "startOffset": 123, "endOffset": 163}, {"referenceID": 16, "context": "One way to increase the receptive field without much effect on the computational complexity is to use dilated convolutions (Chen et al., 2014; Yu and Koltun, 2015), which make the receptive field grow exponentially, as opposed to linearly, in the number of layers.", "startOffset": 123, "endOffset": 163}, {"referenceID": 8, "context": "1 nats/frame, which is significantly better than the previous state of the art (Patraucean et al., 2015).", "startOffset": 79, "endOffset": 104}], "year": 2016, "abstractText": "We propose a probabilistic video model, the Video Pixel Network (VPN), that estimates the discrete joint distribution of the raw pixel values in a video. The model and the neural architecture reflect the time, space and color structure of video tensors and encode it as a four-dimensional dependency chain. The VPN approaches the best possible performance on the Moving MNIST benchmark, a leap over the previous state of the art, and the generated videos show only minor deviations from the ground truth. The VPN also produces detailed samples on the action-conditional Robotic Pushing benchmark and generalizes to the motion of novel objects.", "creator": "LaTeX with hyperref package"}}}