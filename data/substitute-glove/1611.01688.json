{"id": "1611.01688", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Nov-2016", "title": "Oracle-Efficient Online Learning and Auction Design", "abstract": "We consider the design part mailing no - dismay simplest neither come kinetically efficient, make networks actually instance offline linearized linux. We be made curve done hear Generalized Follow - the - Perturbed - Leader addition provide isolation under similar kind achievable vanishing regret each also oracle - efficient. Our final main interest is introducing goes still purposeful auction - type framework special revenue karmic from applying our conner - suitable learning due then beginning adaptive optimization called monthly.", "histories": [["v1", "Sat, 5 Nov 2016 18:54:59 GMT  (656kb,D)", "http://arxiv.org/abs/1611.01688v1", null], ["v2", "Thu, 13 Apr 2017 08:21:30 GMT  (243kb,D)", "http://arxiv.org/abs/1611.01688v2", null]], "reviews": [], "SUBJECTS": "cs.LG cs.DS cs.GT", "authors": ["miroslav dud\\'ik", "nika haghtalab", "haipeng luo", "robert e schapire", "vasilis syrgkanis", "jennifer wortman vaughan"], "accepted": false, "id": "1611.01688"}, "pdf": {"name": "1611.01688.pdf", "metadata": {"source": "CRF", "title": "Oracle-Efficient Learning and Auction Design", "authors": ["Miroslav Dud\u0131\u0301k", "Nika Haghtalab", "Haipeng Luo", "Robert E. Schapire", "Vasilis Syrgkanis", "Jennifer Wortman Vaughan"], "emails": ["mdudik@microsoft.com", "nhaghtal@cs.cmu.edu", "haipeng@microsoft.com", "schapire@microsoft.com", "vasy@microsoft.com", "jenn@microsoft.com"], "sections": [{"heading": null, "text": "Our learning algorithm is a generalization of the classic FTPL algorithm of Kalai and Vempala [27], playing at every iteration the historically best-performing action after adding some perturbation to the performance of each of its actions. The crux of our design is adding perturbations in a manner that leads to oracle-efficiency. We reduce this to designing a translation matrix, which translates a low dimensional vector with independent noise components into a high dimensional vector of perturbations on the learner\u2019s action space. Our approach generalizes prior work on oracle-efficient online learning [11, 22, 27, 35], ranging from online combinatorial optimization, learning in simultaneous auctions, and contextual learning.\nOur auction-design framework considers an auctioneer learning an optimal auction rule in an online manner, every day observing an adversarially chosen vector of valuations. The auctioneer\u2019s goal is to achieve revenue that competes with the revenue of the optimal auction in hindsight among those in some target class. We give oracle-efficient learning results for: (1) VCG auctions with bidder-specific reserves in single-parameter settings with matroid constraints, (2) envy-free item pricing in multi-item auctions with unlimited supply, and (3) s-level auctions of Morgenstern and Roughgarden [28] for singleitem settings. The last result implies good regret against the optimal overall auction when valuations are coming from a fast mixing Markov chain, that is independent across bidders. We also extend our results to the case when the learner observes side information on the bidders before running the auction (contextual learning).\nWe present additional extensions to contextual learning and learning with approximate oracles, implemented by FPTAS or Maximal-in-Range algorithms. We provide further applications in online welfare maximization in multi-unit auctions and in no-regret learning in simultaneous item auctions, answering an open question from prior work.\n\u2217Microsoft Research, New York, mdudik@microsoft.com \u2020Computer Science Department, Carnegie Mellon University, nhaghtal@cs.cmu.edu \u2021Microsoft Research, New York, haipeng@microsoft.com \u00a7Microsoft Research, New York, schapire@microsoft.com \u00b6Microsoft Research, New England, vasy@microsoft.com \u2016Microsoft Research, New York, jenn@microsoft.com\nar X\niv :1\n61 1.\n01 68\n8v 1\n[ cs\n.L G\n] 5\nN ov\n2 01"}, {"heading": "1 Introduction", "text": "Online learning is increasingly playing a major role in the adaptive optimization of computer systems, from the design of online marketplaces [2, 5, 7, 33] to the optimization of routing schemes in communication networks [1]. The environments in these applications are constantly evolving in a non-stationary manner, requiring continued adaptation of these systems. Online learning robustly addresses this challenge by assuming that the environment is adversarial. The design of online learning algorithms for these settings has a long and distinguished history, starting from the seminal work of Freund and Schapire [15] and dating back to the very early work of Hannan [18] and Blackwell [4]. There are known learning rules that are information-theoretically optimal, with tight bounds on the improvement of solution quality as a function of the number of iterations of learning. However, the majority of online learning rules are computationally inefficient when the action space of the learner is exponential in the natural representation of the learning problem.\nThere is a line of research that addresses the design of computationally efficient online learning algorithms, primarily by reducing the online learning problem to an offline optimization problem, see e.g. [1, 22, 25, 27]. However, such reductions have found success only in limited albeit important settings, including online linear optimization, where the learner\u2019s action space is the power-set of some ground elements and the objective of the learner is a linear function of these elements [27]. However, a vast array of problems faced by online learning systems, particularly in online market design, is highly non-linear and more complex than online linear optimization.\nMotivated by such applications, we address the design of oracle-efficient online learning algorithms in a general online learning setting with arbitrary learner objectives. Such algorithms are computationally efficient assuming access to an oracle for the corresponding offline optimization problem. From the recent work of Hazan and Koren [23], we know that, unlike the stochastic i.i.d. settings, oracle-efficient learning in adversarial environments is not achievable without further conditions on the learning problem. Hence, a primary contribution of our work is to give sufficient conditions on which problems are efficiently learnable online, and in particular, learnable via a generic algorithm that we introduce under the name Generalized Follow-the-Perturbed-Leader (Generalized FTPL). Our algorithm is a significant generalization of prior approaches that worked only for specific settings, including the work of Kalai and Vempala [27] on online linear optimization, Hazan and Kale [22] on online submodular minimization, Daskalakis and Syrgkanis [11] on online learning in simultaneous second-price auctions, and Syrgkanis et al. [35] on adversarial contextual learning. Our sufficient conditions draw a strong connection between the notion of a universal identification set of Goldman et al. [16] and oracle-efficient learnability. Hence, our approach unifies and extends prior approaches to oracle-efficient learning.\nThe second main contribution of our work is to introduce a new framework for the problem of adaptive market design for revenue maximization and to demonstrate the power of our oracle-efficient algorithm by numerous applications in this framework. In our new online optimal auction design framework, at each iteration, a learner adaptively designs an auction rule for the allocation of a set of resources to a fresh set of players from a population.1 The goal of the learner is to achieve average revenue at least as large as the revenue of the optimal auction from some target class. Unlike the standard approach to optimal auction design, initiated by the seminal work of Myerson [29], our approach is devoid of any assumptions about a prior distribution on the valuations of the players for the resources at sale. Instead, similar in nature to an agnostic approach in learning theory, we incorporate prior knowledge in the form of a target class of auction schemes that we want to compete with. A special case of our framework is the recent work of Roughgarden and Wang [33], which considers online learning over the class of single-item second-price auctions with bidder-specific reserves and gives an algorithm which achieves good regret with respect to a constant factor\n1Equivalently the set of players at each iteration can be the same as long as players are not forward looking and only optimize their utility from the current iteration.\nof the optimal revenue in hindsight. We go well beyond this specific setting and show that our Generalized FTPL algorithm can be used to optimize over several standard classes of auction rules which are known to approximate very well the optimal auctions in static stochastic environments. Examples include:\n\u2013 the class of Vickrey-Clarkes-Groves (VCG) mechanisms with player-specific reserve prices in singledimensional matroid auction settings, which are known to be a 2-approximation to the optimal mechanism in i.i.d. settings under some regularity conditions [21]; \u2013 the class of single-item s-level auctions introduced by Morgenstern and Roughgarden [28], who showed that these auctions approximate, to an arbitrary accuracy, the Myerson auction [29], which is known to be optimal for the Bayesian independent private value setting; and \u2013 the class of envy-free item pricing mechanisms in combinatorial markets with unlimited supply, which has been widely studied in the static Bayesian setting [2, 17].\nWe present several extensions of our main results, including: (1) learning with side information (often referred to as contextual learning); (2) constant-factor approximate oracles, provided, e.g., by Maximal-inRange (MIR) algorithms [30]; and (3) regret bounds with respect to stronger benchmarks for the case in which the environment is not completely adversarial but rather follows a fast mixing Markov process.\nThe contextual-learning extension is of particular interest to online auction design because it allows the learner to use any side information known about the bidders before they place their bids, to improve the auction. Although, typically, no two sets of bidders in the population are identical, the learner can utilize the side information to design a common treatment for bidders that are similar under some fixed representation, that is to generalize across a population. This is exactly achieved through the framework of contextual learning. While our optimality results, like much of the prior work, rely on the assumption that the bidders are either myopic or are different at each iteration, this assumption is in practice substantially less severe for contextual learning. The contextual learning algorithm can broaden the pool of bidders by including bidders from multiple markets, which reduces the probability that the exact same bidder will be used in the learning process multiple times and be overly influential in the choices of the algorithm. This in turn reduces ratchet effects where bidders identify that the auctioneer is learning and seek to strategically distort the information they provide so as to gain in the future.\nThe extension to the Markovian setting implies that under stochastic conditions on the process that generates the valuations of bidders, our online algorithm for s-level auctions has an average revenue that is at least as large as the revenue of the optimal Myerson auction for the stationary distribution of the Markov process, extending prior work that only gave such guarantees in i.i.d. settings [10, 12, 28, 32].\nFinally, we provide further applications of our work in the context of online combinatorial optimization with MIR approximate oracles, and in the context of no-regret learning for bid optimization in simultaneous second-price auctions. In the former application, we give a polynomial time online learning algorithm for online welfare maximization in multi-unit auctions, that achieves 2-approximate regret by invoking the MIR approximation algorithm of Dobzinski and Nisan [13] as an offline oracle. With the latter application, we solve an open problem raised in the recent work of Daskalakis and Syrgkanis [11] who offered efficient learning algorithms only for the weaker benchmark of no-envy learning, rather than no-regret learning, in simultaneous second price auctions."}, {"heading": "2 Overview of Main Results and Techniques", "text": ""}, {"heading": "2.1 Oracle-Efficient Learning and the Generalized FTPL", "text": "We consider the general setting of online learning, where at each iteration t \u2208 {1, . . . , T}, the learner picks an action xt from some finite set X and the adversary picks an action yt from some set Y . The learner receives a reward of f(xt, yt). The goal of the learner is to choose an action at every iteration in such a way that his average reward is close to the reward of the best fixed action in hindsight, minimizing his average\nregret:\nAVERAGE-REGRET = max x\u2208X\n1\nT T\u2211 t=1 (f(x, yt)\u2212 f(xt, yt)) . (1)\nIn particular, we seek algortihms for which this regret vanishes to zero as the time horizon T goes to infinity, at a rate that is polynomial in the representation of the learning problem and inversely polynomial with T .2 Typically, the regret rate that we strive for depends only logarithmically on the size of the set of available learner actions X .\nIgnoring computational efficiency constraints, the exponential weights algorithm of Freund and Schapire [15] achieves a regret rate of O( \u221a log |X |/T ), which, absent any structure on the reward function, is information-theoretically optimal. However, this algorithm is computationally inefficient, as at every iteration, it updates a weight for each action in the learner\u2019s action space, thereby requiring time linear in |X |. The action spaces we work with are frequently combinatorial, so the linear dependence in |X | is prohibitive. Can we achieve similar regret rates with computation that is polynomial in log |X | and T ?\nClearly this cannot be achieved without some restrictions on the reward structure. We adopt the common assumption that the learner has access to an oracle for the offline learning problem. Given a distribution over adversary actions represented as a uniform distribution over a set S = {y1, . . . , yt}, the oracle finds the best learner action for the distribution, i.e.,\nOPT(S) = max x\u2208X t\u2211 \u03c4=1 f(x, y\u03c4 ) (2)\nThe oracle is essentially solving the hindsight problem: given a history of adversary actions, find the best action for the learner in hindsight.\nWhy oracle-efficient learning? The assumption of an offline oracle is the minimal assumption needed to argue that the online problem is efficiently learnable. The offline problem (or, possibly, an FPTAS for the offline problem) is a weaker problem than the online learning problem, because standard online-to-batch reductions [6, 11] can turn a polynomial-time online learning algorithm into a polynomial-time additiveapproximation scheme for the offline problem.3 Hence, whatever assumptions are needed for an efficient online learning algorithm to exist, the same assumptions imply the existence of a computationally efficient oracle for the corresponding offline problem. Thus, under those assumptions, our algorithm would also be computationally efficient, implying that restricting the design of computationally efficient learning algorithms to oracle-efficient algorithms is without any loss of generality. An oracle-efficient algorithm can also be viewed as a reduction from the offline to the online problem, providing conditions under which the online problem is not only as hard, but also as easy as the offline problem, thereby offering a computational equivalence between online and offline optimization.\nIn addition to fundamental theoretical importance, oracle-efficient algorithms are advantageous from a practical viewpoint. For example, if one has already developed and implemented a Bayesian optimization procedure which optimizes against a static stochastic environment, then our algorithm offers a black-box transformation of that procedure into an adaptive optimization algorithm with provable learning guarantees in non-stationary, non-stochastic environments. Even if the existing Bayesian optimization system does not run in worst-case polynomial time, but is rather a well-performing fast heuristic, an oracle-efficient algorithm will leverage any expert domain knowledge that went into designing the heuristic to perform well for the problem at hand.\n2For simplicity of exposition, we talk abstractly here, deferring a formal definition of what it means to be polynomial in the representation of the problem until later, because different learning problems have different parameters of interest.\n3As we show in the appendix, our results extend under the weaker assumption of a polynomial-time additive-approximation scheme for the offline problem.\nGeneralized FTPL with Low-Dimensional Noise. With access to an oracle, a natural first attempt to design an online learner would be to use the Follow-the-Leader (FTL) algorithm. This algorithm simply invokes the oracle at every iteration and plays the best action in hindsight. In a stochastic environment, i.e., when the adversary\u2019s actions are drawn i.i.d. from some distribution at each iteration, such an approach works and offers regret rates on the order O(log |X |/ \u221a T ) by a simple application of the Rademacher complexity of finite hypotheses classes [34]. However, the lack of randomness in this algorithm leads to very high regret in adversarial environments. A seminal paper of Kalai and Vempala [27] showed that a slight modification of this algorithm leads to good regret. At a high level, this modification perturbs the performance of each action x \u2208 X by some random amount x drawn from a high-variance distribution, before choosing the best action in hindsight. However, even though this algorithm has good regret, it is computationally inefficient as it requires putting a perturbation on the performance of each one of the actions available to the learner. Moreover, this algorithm does not leverage the existence of the offline oracle, as the perturbed optimization problem is not a problem that the oracle is able to solve.\nDaskalakis and Syrgkanis [11] introduced the approach of adding randomness to the FTL algorithm by augmenting the observed history with \u201cfake\u201d historical samples of adversary actions. The oracle is then invoked on the resulting perturbed history of adversary actions. However, they did not give any general way of generating such perturbations of the history or any general conditions under which this approach leads to good regret or computational efficiency when the set of adversary\u2019s actions is large. Our work exactly fills in this missing piece.\nPerturbation Translation Matrices. Our results bridge the gap between these two approaches. We construct perturbations on each individual action of the learner by coupling the randomness across different actions. We generate a small number N of independent perturbations \u03b1 = (\u03b11, . . . , \u03b1N ) drawn from a highly dispersed distribution. In most applications, N is logarithmic in |X |. We then define the perturbation on the performance of each learner action x to be a weighted combination of these independent perturbations. In this way, we construct a perturbation translation matrix \u0393 (for simplicity assume entries in [0, 1]), which translates the short N -dimensional perturbation vector into a long |X |-dimensional one, i.e., the perturbation on action x is x = \u03b1 \u00b7 \u0393x. By sampling the low dimensional noise vector \u03b1, we avoid the exponential computation of drawing a separate perturbation term for each action of the learner, while at the same time exploiting the idea that high variance noise added on each action of the learner leads to good regret. We term this algorithm Generalized FTPL.\nGeneralized FTPL has low regret if the translation matrix \u0393 satisfies an admissibility criterion: the main property required from \u0393 is that its rows are (sufficiently) distinct. Thus each action\u2019s perturbation uses a different weighted combination of the low dimensional noise. We show that any such matrix leads to vanishing regret, with regret rates that are more concretely captured in the following theorem (see Theorem 3.5 for a formal version):\nInformal Theorem 1. A translation matrix is (\u03ba, \u03b4)-admissible if any two rows of the matrix are distinct, the number of different values within a column is at most \u03ba and the minimum non-zero difference between any two values within a column is at least \u03b4. Generalized FTPL with a (\u03ba, \u03b4)-admissible matrix achieves regret of O(N \u221a T\u03ba/\u03b4).\nOracle-based Implementability. To complete the construction of an oracle-efficient algorithm, we need the property that these induced action-level perturbations can be simulated by a perturbation of the history, i.e., that there exists a distribution of adversary actions that induces the same randomness as the one induced by x = \u03b1 \u00b7 \u0393x. This is captured by the implementability criterion, which states that each column of the translation matrix essentially corresponds to a scaled version of the expected reward of the learner on some distribution of adversary actions (see Theorem 3.11 for a formal statement).\nInformal Theorem 2. A translation matrix is implementable if each column corresponds to a scaled version of the expected reward of the learner against some small-supported distribution of actions of the adversary. Generalized FTPL with an implementable and (\u03ba, \u03b4)-admissible translation matrix can be implemented in an oracle-efficient manner, with running time polynomial in N , T , \u03ba/\u03b4, and in the size of the distribution implementing the translation matrix, when represented by a sequence of atoms.\nDesign Approach. Thus we get that a sufficient condition for oracle-efficient learnability is the existence of an admissible and implementable translation matrix, with small N,\u03ba and 1/\u03b4. For some learning problems, it is easier to construct a trivially implementable translation matrix and then argue about its admissibility; for others, it is easier to start with a trivially admissible matrix and argue about its implementability. Below we describe examples of each, exhibiting the versatility of our conditions.\nThe first case, when implementability is immediate, is when each column corresponds to the reward of the learner on some particular adversary action. The admissibility translates to a natural condition: the reward of the adversary under any two actions x, x\u2032 \u2208 X must be different for at least one of theN adversary actions that are associated with the columns of \u0393. Therefore, to construct an admissible and implementable matrix \u0393, it suffices to identify a small numberN of adversary actions that have this differentiating property.\nCorollary 1. If there exists a small set of adversary actions such that any two learner\u2019s actions yield a different reward on at least one of these adversary actions and such that the number of different reward levels for each of these actions in the set is small, then the learning problem is oracle-efficient and learnable with the Generalized FTPL algorithm.\nA special case in which this holds is captured by the notion of a universal identification sequence defined by Goldman et al. [16]. This notion applies when the learner is choosing binary functions from some input space and the adversary is choosing realizations of the input variables, with the learner collecting a reward only if the output of his function on the adversary\u2019s input is 1. Another special case of this differentiating property arises in contextual learning. In contextual learning, the learner chooses a policy that maps a domain of contextual information into one of K actions, with the adversary picking both the contextual information and the reward of each action. The learner needs to compete with the optimal policy in a given policy class. A separator [11] is a small set of contexts such that any two policies in the policy class choose different actions on at least one context from the set. The existence of a separator implies an admissible and implementable translation matrix.\nInstead of beginning the design with implementability, we can begin with admissibility. One interesting special case of an admissible matrix is when the rows of matrix \u0393 contain a binary representation of some parameterization of the actions of the learner. The number of columns of the matrix is then logarithmic in the number of actions of the learner. However, such a matrix may or may not be implementable.\nCorollary 2. If any linear functions on some binary vector representation of the learner\u2019s actions, can be implemented with a distribution of adversary actions, then the learning problem is oracle-efficient and learnable with the Generalized FTPL algorithm.\nThis condition is perhaps easiest to understand when the learner\u2019s actions are a power-set over a set of K ground elements, i.e., X = {0, 1}K . This is the case for online combinatorial optimization in which the adversary picks a combinatorial function vt at every iteration and the learner receives reward vt(xt). The perturbations of our algorithm essentially correspond to adding an independent perturbation on each of the ground elements, or equivalently, adding a fake additive function to the history, whose value for each ground element is drawn independently from some distribution. If the adversary is picking functions from a class that includes additive ones, then the latter perturbations are by definition implementable. This approach was leveraged by Hazan and Kale [22] for online submodular minimization. Their approach is a special case of ours, but our work extends beyond combinatorial optimization. For instance, in subsequent sections,\nwe show that a translation matrix consisting of binary encodings of reserve prices in auctions yields an oracle-efficient online learning algorithm for revenue maximization."}, {"heading": "2.2 Main Application: Online Optimal Auction Design", "text": "As a main application of our oracle-efficient learning algorithm, we consider an online learning version of the classical market design problem of optimally selling a single item (or multiple items) to a set of interested buyers so as to maximize revenue. Traditional optimal auction theory assumes that the valuations of the players are drawn from a population distribution which is known, thereby leading to a Bayesian optimization problem. The knowledge of the distribution by the seller is a rather harsh assumption and recent work in algorithmic mechanism design [10, 12, 28, 32] relaxes this assumption by solely assuming access to a set of samples from the distribution. In this work we take a completely distribution-free and adversarial approach, introducing the setting of online optimal auction design.\nIn many applications of optimal auction theory, in particular in electronic marketplaces, the seller does not sell the item once, but rather repeatedly sells the item to a population of buyers, with a few arriving at each auction. Hence, the seller can optimize his auction design in an online manner, using historical data consisting of observed valuations. The goal of the seller is to leverage the historical data and pick an auction at each iteration so as to compete with the optimal auction from some target class. For instance, in a sponsored-search auction setting, the auctioneer can use historical data from past auctions in a sub-market to decide what reserve price to set for a new impression that arrives in that sub-market. In a setting like eBay, the system can use historical bid data from auctions of similar goods to decide what reserve price to recommend to a new seller.\nMotivated by such online auction optimization settings we consider the following optimal auction model. An auctioneer is repeatedly selling a set of resources for T time-steps. On each day t a set of n bidders arrive with a vector of valuations/bids vt \u2208 Vn. Prior to observing the bids, the auctioneer commits to an auction at from a class of truthful auctions A that he is interested in. Unlike classical optimal auction design, we make no assumptions about the process which generates the valuations of players on each day. We consider the case where these valuations are chosen by an adversary.\nThe goal of the learner is to achieve an average revenue over time, that, in hindsight, is very close to the revenue that would have been achieved by the best fixed mechanism in classA, if that mechanism was at all time-steps, i.e., the learner aims to achieve small average regret:\nAVERAGE-REGRET = max a\u2208A\n1\nT T\u2211 t=1 Rev(a,vt)\u2212 1 T T\u2211 t=1 Rev(at,vt). (3)\nWe apply our oracle-efficient algorithm and design online learning algorithms for the aforementioned setting assuming access to an offline oracle. In the context of revenue maximization, the learner\u2019s action space is the set of target auctions A, the adversary\u2019s action space is the set of valuation vectors Vn. Finally, the offline oracle is a Bayesian revenue maximization oracle which computes the optimal auction within a class of auctionsA, for any correlated distribution of valuations given as a uniform distribution over a set of valuation vectors: {v1, . . . ,vk}.\nWe construct oracle-efficient online learning algorithms for three optimal auction classes, mentioned in Section 1, which have been well studied in the Bayesian optimal auction literature. For each of these auction settings, we show how to construct a translation matrix that is admissible and implementable.\nExample: Second-Price with Bidder-Specific Reserves. To give a hint at our techniques we briefly describe our construction for one very special case of our online optimal auction design, the case of secondprice auctions with bidder-specific reserves, in which the auctioneer ignores bidders below their reserve price and allocates to the highest remaining bidder, charging him the maximum of his reserve and the\nsecond highest remaining bid. Thus the learner needs to pick at each iteration a reserve price for each bidder. For simplicity assume that each reserve price comes from a discretized grid of m + 1 possible levels R = {0, 1/m, 2/m, . . . , 1} and valuations are upper bounded by 1. Thus the action space of the learner is of size (m + 1)n, which is prohibitively large. Our construction yields an oracle-efficient algorithm which runs in time poly(n,m, T ), ignoring oracle computation, and yields regret O(n log(m)/ \u221a T ).\nWe present here a simpler translation matrix which yields regret O(n \u00b7m2/ \u221a T ). We use the approach implied by our Corollary 1 and find a set of special bid profiles such that any two auctions in the class achieve different revenue in at least one of these bid profiles. It is easy to find such a set: for each bidder i, consider all the bid profiles where he bids some level h \u2208 R and every other bidder bids 0. For any two different auctions in the class of second-price auctions with a reserve, the revenue must be different in at least one of these bids: if the auctions differ on the reserve price of bidder i, with one auction having reserve r and the other having reserve r\u2032, then a bid profile which submits a bid level h \u2208 (r, r\u2032] for bidder i and a zero bid on everyone else, will yield different revenue in the two auctions. Thus we have constructed a translation matrix where each column corresponds to the revenue of the auction under the associated bid from one of these N = n \u00b7 (m+ 1) bids. Moreover, observe that for each of these special bid profiles the revenue of any auction takes at most m + 1 different values and the minimum non-zero difference in the revenue of two auctions is 1/m. Thus invoking the Informal Theorems 1 and 2 we get that there exists an oracle-efficient no-regret algorithm which runs in time poly(n,m, T ), ignoring oracle computation, and achieves average regret O(nm2/ \u221a T ).\nMarkovian adversaries and competing with overall optimal. Another class of auctions that we analyze is the recently introduced class of level auctions [28]. A level auction is a generalization of bidder-specific reserves, where each bidder now has multiple associated reserves which categorize his bid into a set of buckets that are then used for allocating the good. Morgenstern and Roughgarden [28] showed that these auctions, for large enough number of buckets, provide an arbitrarily accurate approximation to the overall optimal Myerson auction in the Bayesian single-item auction setting, where the value of each bidder is drawn from an independent distribution. Our learning results imply oracle-efficient regret bounds of O(n2m2/ \u221a T ). If the valuation of each player is drawn independently in each round from some fixed distribution, then standard online-to-batch reduction implies that the revenue of the online learning algorithm is close to the overall optimal single-shot auction, i.e., the Myerson auction. We generalize this reasoning and show that we get such strong optimality guarantee also when the valuations of players are drawn at each iteration from a fast-mixing Markov process, which is independent across players. For both of these setting, our results give an oracle-efficient algorithm with regret O(n2/3/T 1/6) to the overall optimal (by optimizing over the value of m). This is the first result on competing with a Myerson optimal auction for non-iid distributions, unlike prior work [10, 12, 28, 32] which assumes i.i.d. samples."}, {"heading": "3 Generalized FTPL and Oracle-Efficient Online Learning", "text": "In this section, we introduce a general Follow-the-Perturbed-Leader (FTPL) algorithm. We then describe the conditions under which this algorithm efficiently reduces online learning to offline optimization.\nWe consider the following online learning problem. On each round t = 1, . . . , T , a learner chooses an action xt from a finite set X , and an adversary chooses an action yt from set Y , which is not necessarily finite. The learner then observes yt and receives a payoff f(xt, yt) \u2208 [0, 1], where the function f is fixed and known to the learner. The goal of the learner is to obtain low expected regret with respect to the best action in hindsight, i.e., to minimize\nREGRET := E [ max x\u2208X T\u2211 t=1 f(x, yt)\u2212 T\u2211 t=1 f(xt, yt) ] ,\nwhere the expectation is over the randomness of the learner. To simplify exposition, we assume that the ad-\nversary is oblivious, i.e., that the sequence y1, . . . , yT is chosen up front without knowledge of the learner\u2019s realized actions. Our results generalize to adaptive adversaries using standard techniques [11, 24].\nOur algorithm broadly follows the FTPL scheme of Kalai and Vempala [27]. In the original FTPL scheme of Kalai and Vempala [27], at every iteration the algorithm adds a perturbation to the historical cumulative payoff of each possible action of the learner and then picks the action with the largest perturbed historical payoff. The perturbation on each action is independently drawn from a highly dispersed distribution, such as an exponential distribution with standard deviation of order \u221a T . Applying this approach to the general learning setting above is computationally inefficient when the action space of the learner X is exponential in some succinct representation of the learning setting.\nFor online combinatorial optimization with either additive [27] or submodular [22] objectives, it has been shown that one does not need to add a perturbation on each set, but adding a perturbation on each item suffices to lead to no-regret. However, this approach is specific to these settings and it was not even known before our work whether the approach extends to online combinatorial optimization with arbitrary objectives. We show how to bypass the exponential perturbation problem for the general online learning setting.\nOur goal is to create perturbations that can be succinctly passed on to an offline optimization oracle. In particular, we seek to generate perturbations that can be simulated by augmenting the history with a polynomial number of fake samples as proposed in Daskalakis and Syrgkanis [11]. To generate such perturbations, we begin by drawing a random vector \u03b1 \u2208 RN of some small size N , with components \u03b1j drawn independently from some dispersed distribution D. The payoff of each of the learner\u2019s action is perturbed by a linear combination of these independent variables, as prescribed by a non-negative translation matrix \u0393 of size |X | \u00d7N , i.e., the vector of perturbations on all the |X | actions of the learner is given by the vector \u0393\u03b1. Letting \u0393x denote the row of \u0393 corresponding to x, on each round t, the algorithm outputs the action x that maximizes \u2211t\u22121 \u03c4=1 f(x, y\u03c4 ) +\u03b1 \u00b7\u0393x. See Algorithm 1 for a full specification. For non-oblivious adversaries, a fresh random vector \u03b1 is drawn in each round. In this section we analyze the properties of the matrix \u0393 to guarantee that the Generalized FTPL algorithm both achieves a small regret and its perturbations can be efficiently transformed into fake samples. Together these properties give rise to efficient reductions of online learning to offline optimization.\nAlgorithm 1: Generalized FTPL\nInput: non-negative matrix \u0393 \u2208 R|X |\u00d7N+ , distribution D Draw \u03b1j \u223c D for j = 1, . . . , N . for t = 1, . . . , T do\nChoose action xt = arg max x\u2208X [ t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u03b1 \u00b7 \u0393x ] .\nObserve yt and receive payoff f(xt, yt). end for"}, {"heading": "3.1 Regret Analysis", "text": "To analyze the Generalized FTPL algorithm, we first bound its regret by the sum of a stability term and perturbation term in the following lemma. While this approach is standard [27], we include a proof in Appendix A for completeness.\nLemma 3.1 (FTPL Lemma). For the Generalized FTPL algorithm,\nREGRET \u2264 E [ T\u2211 t=1 f(xt+1, yt)\u2212 f(xt, yt) ] + E [ \u03b1 \u00b7 (\u0393x1 \u2212 \u0393x\u2217) ] (4)\nwhere x\u2217 = arg maxx\u2208X \u2211T t=1 f(x, yt).\nThe first term measures the stability: how much our decision changes from round to round. The second term measures the strength of perturbation: how much the perturbation amount differs between the best action and the initial action. To bound the stability term, we require that the matrix \u0393 be admissible and the distribution D be dispersed in the following sense:\nDefinition 3.2 ((\u03ba, \u03b4)-Admissible Translation Matrix). A translation matrix \u0393 is admissible if its rows are distinct. It is (\u03ba, \u03b4)-admissible if it is admissible and also:\n1. the number of distinct elements within each column is at most \u03ba, 2. distinct elements within each column differ by at least \u03b4.\nDefinition 3.3 ((\u03c1, L)-Dispersed Distribution). A distribution D on the real line is (\u03c1, L)-dispersed if for any interval of length L, the probability measure placed by D on this interval is at most \u03c1.\nIn the next lemma, we bound the stability term in Equation (4) by showing that with high probability, for all rounds t, we have xt+1 = xt. Since all rows of an admissible matrix \u0393 are distinct, it suffices to show that the probability that \u0393xt+1 6= \u0393xt is small. We prove this for each coordinate \u0393xt+1j separately, by showing that it is only possible to have \u0393xt+1j 6= \u0393xtj when the random variable \u03b1j falls in a small interval, which happens with only small probability for a sufficiently dispersed distribution D. Note that any admissible matrix is (\u03ba, \u03b4)-admissible for some choices of \u03ba and \u03b4. The magnitudes of \u03ba and \u03b4 and the number of columns of \u0393 determine how large the stability term can get.\nLemma 3.4. Consider the Generalized FTPL algorithm with a (\u03ba, \u03b4)-admissible matrix \u0393 with N columns and a (\u03c1, 1/\u03b4)-dispersed distribution D. Then,\nE [ T\u2211 t=1 f(xt+1, yt)\u2212 f(xt, yt) ] \u2264 2TN\u03ba\u03c1.\nProof. Fix any t \u2264 T . The bulk of the proof will establish that, with high probability, \u0393xt+1 = \u0393xt , which by admissibility implies that xt+1 = xt and therefore f(xt+1, yt)\u2212 f(xt, yt) = 0.\nFix any j \u2264 N . We first show that \u0393xt+1j = \u0393xtj with high probability. Let V denote the set of values that appear in the jth column of \u0393. For any value v \u2208 V , let xv be the action that maximizes the perturbed profit, ignoring the perturbation of column j itself, among those whose \u0393 entry in the jth column equals v:\nxv := arg max x\u2208X : \u0393xj=v  t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u2211 j\u2032 6=j \u03b1j\u2032\u0393xj\u2032  = arg max x\u2208X : \u0393xj=v [ t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u03b1 \u00b7 \u0393x \u2212 \u03b1jv ] .\nFor any v, v\u2032 \u2208 V , define\n\u2206vv\u2032 = ( t\u22121\u2211 \u03c4=1 f(xv, y\u03c4 ) + \u03b1 \u00b7 \u0393xv \u2212 \u03b1jv ) \u2212 ( t\u22121\u2211 \u03c4=1 f(xv \u2032 , y\u03c4 ) + \u03b1 \u00b7 \u0393xv\u2032 \u2212 \u03b1jv \u2032 ) .\nNote that xv and \u2206vv\u2032 are independent of \u03b1j , as we removed the payoff perturbation corresponding to \u03b1j . If \u0393xtj = v, then by the optimality of xt on the perturbed profit, we have \u03b1j(v\n\u2032 \u2212 v) \u2264 \u2206vv\u2032 for all v\u2032 \u2208 V . Suppose \u0393xt+1j 6= v. Then there is some v\u2032 \u2208 V which yields a better perturbed profit in the next round, i.e.,\nt\u22121\u2211 \u03c4=1 f(xv \u2032 , y\u03c4 ) + f(x v\u2032 , yt) + \u03b1 \u00b7 \u0393xv\u2032 \u2265 t\u22121\u2211 \u03c4=1 f(xv, y\u03c4 ) + f(x v, yt) + \u03b1 \u00b7 \u0393xv .\nRearranging, we obtain for this same v\u2032 that\n\u2206vv\u2032 \u2264 \u03b1j(v\u2032 \u2212 v) + f(xv \u2032 , yt)\u2212 f(xv, yt) \u2264 \u03b1j(v\u2032 \u2212 v) + 1.\nIf v\u2032 > v, then\n\u03b1j \u2265 \u2206vv\u2032 \u2212 1 v\u2032 \u2212 v \u2265 min v\u0302\u2208V, v\u0302>v \u2206vv\u0302 \u2212 1 v\u0302 \u2212 v\nand so \u03b1j(v \u2212 v) + 1 \u2265 \u2206vv where v is the value of v\u0302 minimizing the expression on the right. Thus, in this case we have 0 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1. Similarly, if v\u2032 < v, then\n\u03b1j \u2264 \u2206vv\u2032 \u2212 1 v\u2032 \u2212 v \u2264 max v\u0302\u2208V, v\u0302<v \u2206vv\u0302 \u2212 1 v\u0302 \u2212 v\nand so \u03b1j(v \u2212 v) + 1 \u2265 \u2206vv where v is the value maximizing the expression on the right. In this case we have 0 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1. Putting this all together, we have\nPr [ \u0393xt+1j 6= \u0393xtj \u2223\u2223 \u03b1k, k 6= j] \u2264 Pr [ \u2203v \u2208 V : 0 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1 or 0 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1\n\u2223\u2223\u2223 \u03b1k, k 6= j] \u2264 \u2211 v\u2208V ( Pr [ \u03b1j \u2208 [ \u2206vv\u22121 v\u2212v , \u2206vv v\u2212v\n] \u2223\u2223\u2223\u2223 \u03b1k, k 6= j]+ Pr[\u03b1j \u2208 [\u2212\u2206vvv\u2212v , \u2212\u2206vv+1v\u2212v ] \u2223\u2223\u2223\u2223 \u03b1k, k 6= j]) \u2264 2\u03ba\u03c1.\nThe last line follows from the fact that v\u2212 v \u2265 \u03b4 and v\u2212 v \u2265 \u03b4, the fact that D is (\u03c1, 1/\u03b4)-dispersed, and a union bound.\nSince this bound does not depend on the values of the \u03b1j , we can remove the conditioning and bound Pr[\u0393xt+1j 6= \u0393xtj ] \u2264 2\u03ba\u03c1. Taking a union bound over all j \u2264 N , we then have that, by admissibility, Pr [xt+1 6= xt] = Pr [ \u0393xt+1 6= \u0393xt ] \u2264 2N\u03ba\u03c1, which implies the result.\nTo bound the regret, it remains to bound the perturbation term in Equation (4). This bound is specific to the distribution D. Many distribution families, including uniform, Gaussian, Laplacian, discrete uniform, exponential etc., with appropriately set variance, will lead to a sublinear regret. Here we present a concrete regret analysis for the case of a uniform distribution supported on [0, 1/\u03b7], for \u03b7 \u2248 1/ \u221a T :\nTheorem 3.5. Let \u0393 be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxx,j \u0393xj and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). Then the regret of the Generalized FTPL algorithm can be bounded as REGRET \u2264 2N \u221a 2T\u03ba\u03b3/\u03b4.\nThe proof of Theorem 3.5 follows immediately from Lemmas 3.1 and 3.4 with \u03c1 = \u03b7/\u03b4."}, {"heading": "3.2 Oracle-Efficient Online Learning", "text": "The Generalized FTPL algorithm requires the ability to optimize the perturbed objective over the learner\u2019s action set in order to find xt at each round t. However, to achieve online-to-offline reduction, we need to create offline optimization problems of the same type as the underlying online problem. Namely, we need to reduce to optimization of the cumulative payoff over some data set consisting of adversary\u2019s actions. An algorithm solving such offline optimization problems will be called an offline oracle. If each optimization step of the Generalized FTPL can be efficiently transformed into a sequence of oracle calls, we will say that the Generalized FTPL algorithm is oracle-efficient.\nIn this section, we derive the criterion that allows us to solve the optimization of the perturbed objective by a single oracle call. We achieve this by transforming the perturbation into a (weighted) set of adversary\u2019s actions, which are then passed to the oracle alongside all of the actual adversary\u2019s actions.\nAs a result of this construction, we immediately get that the online learning problem can be solved efficiently whenever there is an efficient offline oracle and the Generalized FTPL is oracle-efficient.\nWe now define the offline oracle and oracle-efficient online learning more formally.\nDefinition 3.6 (Offline Oracle). An offline oracle OPT is any algorithm that receives as input a weighted set of adversary actions S = {(w`, y`)}`\u2208L, wk \u2208 R+, yk \u2208 Y , and returns\nOPT(S) \u2208 arg max x\u2208X \u2211 (w,y)\u2208S wf(x, y).\nDefinition 3.7 (Mass of a Data Set). The mass of a weighted dataset S, denoted \u2016S\u2016, is the maximum of its cardinality and its sum of weights, \u2016S\u2016 := max { |S|, \u2211 (w,y)\u2208S w } .\nDefinition 3.8 (Oracle-Efficient Online Learning). We say that an online learning algorithm is oracleefficient with the per-round complexity g(T) if in each round it makesO(g(T )) calls to an offline oracle, each on a dataset with the mass O(g(T )), and its per-round running time, excluding oracle calls, is O(g(T )).\nNote that unlike the oracle of [23], which accepts a distribution, we do not require the weights to sum to one. This is without loss of generality since as we show in Appendix C the two oracle classes are essentially equivalent, as we show that any oracle efficient algorithm that uses a fractionally weighted oracle can be implemented with an integral oracle with an arbitrarily small increase in regret. For now, we mention that the reason why we introduced the mass of a dataset in the definition of oracle-efficiency is that we anticipate reductions to integral oracles, which typically expect unweighted inputs, obtained by replicating each example according to its weight. Thus the mass of a weighted data set is the natural problem size for integral oracles.\nWe next provide the criterion on the pair (\u0393, D), which allows us to transform the perturbed objective into a weighted dataset, thus achieving oracle-efficiency of the Generalized FTPL:\nDefinition 3.9. The pair (\u0393, D) is implementable, with complexity Ng(T ), if there exists an algorithm, running in time O(g(T )), which takes j \u2264 N and \u03b1j \u2208 supp(D) as input, and returns a weighted dataset, denoted as Sj(\u03b1j), as output. The dataset Sj(\u03b1j) must have a mass O(g(T )) and implement the perturbation \u03b1j in the following sense:\nfor all x, x\u2032 \u2208 X : \u03b1j(\u0393xj \u2212 \u0393x\u2032j) = \u2211\n(w,y)\u2208Sj(\u03b1j)\nw ( f(x, y)\u2212 f(x\u2032, y) ) .\nThis definition implies that the perturbation in the total utility described by the random vector \u03b1 can be imitated by appending a \u201cfake history\u201d, consisting of the union of sets Sj(\u03b1j), to the actual history of the game. While the actual value of a payoff for a given action x on such dataset might not agree with the perturbed objective, the difference of payoffs for any two actions x and x\u2032 agrees with the difference on the perturbed objective, and this suffices to find xt.\nOne simple but powerful example of implementability is when the perturbations \u03b1j are non-negative and each column of \u0393 corresponds to some adversary action yj :\nExample 3.10. Consider any D with supp(D) \u2286 R+. Suppose that for each j \u2264 N , there exists some yj \u2208 Y such that \u0393xj = f(x, yj). Then (\u0393, D) is implementable using the map Sj(\u03b1j) = {(\u03b1j , yj)}.\nAlgorithm 2: Oracle-Based Generalized FTPL Input: positive |X | \u00d7N , an implementable (\u0393, D), an offline oracle OPT Draw \u03b1j \u223c D for j = 1, . . . , N . for t = 1, . . . , T do\nSet S = {(1, y1), . . . , (1, yt\u22121)} \u222a \u22c3 j\u2264N Sj(\u03b1j). Set xt = OPT(S). Observe yt and receive payoff f(xt, yt).\nend for\nUsing implementable (\u0393, D) gives rise to an oracle-efficient variant of the Generalized FTPL, provided in Algorithm 2. Theorem 3.11, with a proof in Appendix B, shows that the output of this algorithm is equivalent to the output of Generalized FTPL, and therefore the same regret guarantees hold. This result can guide the choice of \u0393 and D to obtain oracle-efficient no-regret algorithms.\nTheorem 3.11. If (\u0393, D) is implementable with complexity g(N,T ) then Algorithm 2 is an oracle-efficient implementation of Algorithm 1 with per-round complexity O(T + g(N,T ))."}, {"heading": "4 Online Auction Design", "text": "In this section, we apply the general techniques developed in Section 3 to obtain efficient oracle-based no-regret algorithms for several common auction classes.\nConsider a mechanism design setting where a seller wants to decide the allocation of resources to a set of n bidders. An allocation of a bidder is a subset in {0, 1}k from some number of elements k and the seller has some feasibility constraints on the allocations across bidders. Each bidder i \u2208 [n] has a combinatorial valuation function vi \u2208 V , where V \u2286 ({0, 1}k \u2192 [0, 1]). A special case of the setting is that of multi-item auctions for k heterogeneous items, where each element is an item and the feasibility constraint simply states that no item is allocated to more than one bidder. Another special case is that of service based environments where each bidder\u2019s allocation is in {0, 1} and the seller has some constraints on which bidders to serve, i.e. assign an allocation of 1. Auction a takes as input the bid profile b consisting of reported values for each bidder, and returns both the allocation of bidder i, qi(b) \u2208 {0, 1}k and the price pi(b) that this bidder is charged; we allow sets qi(b) to overlap across bidders i.\nWe consider bidders with quasilinear utilities: the utility of bidder i is vi(qi(b)) \u2212 pi(b). For an auction a with price function p(\u00b7), we denote by Rev(a,b) the revenue of the auction for bid profile b, i.e., Rev(a,b) = \u2211 i\u2208[n] pi(b).\nFor single-parameter service based environments (a special case of which are single-item auctions), we slightly simplify notation and use vi \u2208 [0, 1] to denote the value of bidder i for being served.\nIn this work, we only consider truthful auctions, where each bidder i maximizes his utility by reporting his true valuation vi, irrespective of what other bidders report. Since we limit attention to truthful auctions, we make the assumption that b = v and refer to v as the bid profile throughout the rest of this section.\nFixing a class of (truthful) auctions A and a set of possible valuations V , we consider the problem in which on each round t = 1, . . . , T , a learner chooses an auction at \u2208 A while an adversary chooses a bid profile vt \u2208 Vn. The learner then observes vt and receives revenue Rev(at,vt). The goal of the learner is to obtain low expected regret with respect to the best auction from A in hindsight. That is, we would like to guarantee that\nREGRET = E [ max a\u2208A T\u2211 t=1 Rev(a,vt)\u2212 T\u2211 t=1 Rev(at,vt) ] \u2264 o(T )poly(n, k).\nWe require our online algorithm to be oracle-efficient, assuming access to an offline optimization oracle that takes as an input a weighted set of bid profiles, S = {(w`,v`)}`\u2208L and returns the auction that maximizes the revenue on S, i.e., arg maxa\u2208A \u2211 (w,v)\u2208S wRev(a,v).\nUsing the language of oracle-based online learning developed in Section 3, the learner\u2019s action corresponds to the choice of auction, the adversary\u2019s action corresponds to the choice of bid profile, the payoff of the learner corresponds to the revenue generated by the auction, and we assume access to an offline optimization oracle OPT. These correspondences are summarized in the following table.\nAuction Setting Oracle-Based Learning Equivalent Auctions at \u2208 A Learner actions xt \u2208 X Bid/valuation profiles vt \u2208 Vn Adversary actions yt \u2208 Y Revenue function Rev Payoff function f\nFor several of the auction classes we consider, such as multi-item or multi-unit auctions, the revenue of an auction on a bid profile is in range [0, R] for R > 1. In order to use the results of Section 3, we implicitly re-scale all the revenue functions and \u0393, by dividing them by R, before applying Theorem 3.5. Note that, while the admissibility condition also scales, the scaling of \u03b3 = maxa,j \u0393a,j keeps the regret of the normalized problem at O(N \u221a T\u03ba\u03b3/\u03b4), according to Theorem 3.5. We then scale up to get a regret\nbound that isR times the regret for the normalized problem, i.e.,O(RN \u221a T\u03ba\u03b3/\u03b4). This re-scaling increases the runtime by a factor of R, as when both the revenues and matrix \u0393 are scaled, the implementability map Sj(\u03b1j) remains the same, and the support of the distribution (corresponding to 1/\u03b7 in Theorem 3.5) increases by a factor of R.\nWe now derive results for VCG auctions with bidder-specific reserves, envy-free item-pricing auctions, and level auctions. We defer the definition of each auction class to its respective subsection."}, {"heading": "4.1 VCG with Bidder-Specific Reserves", "text": "In this section, we consider a standard class of auctions, VCG auctions with bidder-specific reserve prices, which we define more formally below and denote by I. These auctions are known to approximately maximize the revenue when the bidder valuations are drawn independently (but not necessarily identically) from some distribution [21]. Recently, Roughgarden and Wang [33] considered this class I in an online learning framework. They provided a computationally efficient algorithm whose total revenue is at least 1/2 of the best revenue among auctions in I, plus a term that is o(T ). We apply the techniques from Section 3 to generate an oracle-efficient online algorithm with low additive regret to the optimal auction in the class I, without any loss in multiplicative factors.\nWe go beyond single-item auctions and consider a general single-parameter setting. In these environments, each bidder has one piece of private valuation for receiving a service, i.e., being included in the set of winning bidders. We allow for some combinations of bidders to be served simultaneously, and let S \u2286 2n be the family of feasible sets, i.e., sets of bidders that can be served simultaneously. We assume that it is possible for any bidder to be the sole bidder served, i.e., that {i} \u2208 S for all i, and that it is possible that no bidder is served, i.e., \u2205 \u2208 S.4 Examples of such environments include single-item single-unit auctions (for which S contains only singletons and the empty set), single-item s-unit auctions (for which S contains any subset of size at most s), and combinatorial auctions with single-minded bidders. In the last case, we begin with some set of original items, define the service as receiving the desired bundle of items, and let S contain any subset of bidders seeking disjoint sets of original items.\nWe consider the class of VCG auctions with bidder-specific reserves. In a basic VCG auction, an allocation q\u2217 is chosen to maximize social welfare, that is, maximize \u2211n i=1 vi(q \u2217 i ). Each bidder who is served is\nthen charged the externality he imposes on others, pi(v) = maxq \u2211 i\u2032 6=i vi\u2032(qi\u2032)\u2212 \u2211 i\u2032 6=i vi\u2032(q \u2217 i\u2032), which can\n4A more common and stronger assumption used in previous work [21, 33] is that S is a downward closed matroid.\nbe shown to equal the minimum bid at which he would be served. Such auctions are known to be truthful. The most common example is the second-price auction for the single-item single-unit case in which the bidder with the highest bid receives the item and pays the second highest bid. VCG auctions with reserves, which maintain the property of truthfulness, are defined as follows.\nDefinition 4.1 (VCG auctions with bidder-specific reserves). A VCG auction with bidder-specific reserves is specified by a vector r of reserve prices for each bidder. As a first step, all bidders whose bids are below their reserves (that is, bidders i for which vi < ri) are removed from the auction. If no bidders remain, the item is not allocated. Otherwise, the basic VCG auction is run on the remaining bidders to determine the allocation. Each bidder who is served is charged the larger of his reserve and his VCG payment.\nFixing the set S of feasible allocations, we denote by I the class of all VCG auctions with bidder-specific reserves. With a slight abuse of notation we write r \u2208 I to denote the auction with reserve prices r. To apply the results from Section 3, which require a finite action set for the learner, we limit attention to the finite set of auctions Im \u2286 I consisting of those auctions in which the reserve price for each bidder is an integer multiple of 1/m. As we show below, the best auction in this class yields almost as high revenue as the best auction in I for common choices of S.\nWe show how to design a matrix \u0393 and distribution D for this problem that are admissible and implementable. As a warmup, suppose we use the |Im| \u00d7 n matrix \u0393 with \u0393ri = Rev(r, ei) for all r \u2208 Im and i \u2208 [n]. That is, the ith column of \u0393 corresponds to the revenue of each auction on a bid profile in which bidder i has valuation 1 and all others have valuation 0. Let D be defined as in Theorem 3.5. By definition, (\u0393, D) is implementable. Moreover, Rev(r, ei) = ri so any two rows of \u0393 are indeed different and \u0393 is (m, 1/m)-admissible. By Theorem 3.5, there is an oracle-efficient implementation of the Generalized FTPL with regret that is polynomial in m. In what follows, we design another translation matrix more carefully, and obtain the regret that is polynomial log(m).\nConstruction of \u0393: Let \u0393VCG be an |Im| \u00d7 (ndlogme) binary matrix, where the ith collection of dlogme columns correspond to the binary encoding of each auction\u2019s reserve price for bidder i. More formally, for any i \u2264 n and a bit position \u03b2 \u2264 dlogme, \u0393VCGrj is the \u03b2th bit of (the integer) mri, where j = (i \u2212 1)dlogme + \u03b2. The next lemma shows that this choice of \u0393VCG is admissible and that (\u0393VCG, D) is implementable for any D over R.\nLemma 4.2. \u0393VCG is (2, 1)-admissible. If D is supported on a subset of [\u2212\u03b1max, \u03b1max], then (\u0393VCG, D) is implementable with complexity poly(n,m,\u03b1max).\nProof. In the interest of readability, we drop the superscript and write \u0393 for \u0393VCG in this proof. For any r, row \u0393r corresponds to the binary encoding of r1, . . . , rn. Therefore, for any two different auctions r 6= r\u2032, \u0393r 6= \u0393r\u2032 . Since \u0393 is a binary matrix, this implies that \u0393 is (2, 1)-admissible. Next, we prove that (\u0393, D) is implementable. Pick i \u2264 n and \u03b2 \u2264 dlogme, and the associated column index j. We will construct the set Sj(\u03b1j) which implements the perturbation \u03b1j . The set Sj(\u03b1j) includes exactly the m profiles in which only the bidder i has non-zero valuation, denoted as vh := (h/m)ei for h \u2264 m. To determine their weights wh, we use the definition of implementability. In particular, the weights must satisfy:\n\u2200 r, r\u2032 \u2208 Im, \u03b1j ( \u0393rj \u2212 \u0393r\u2032j ) = \u2211 h\u2264m wh ( Rev(r,vh)\u2212 Rev(r\u2032,vh) ) .\nIn the above equation, \u0393rj and \u0393r\u2032j encode the \u03b2th bit of ri and r\u2032i, respectively, so the left-hand side is independent of the reserve prices for bidders i\u2032 6= i. Moreover, Rev(r,vh) = ri1(h\u2265mri), so the right-hand side of the above equation is also independent of the reserve prices for bidders i\u2032 6= i. Let k\u03b2 be the \u03b2th\nbit of integer k. That is, \u0393rj = (mri)\u03b2 . Substituting k = mri and k\u2032 = mr\u2032i, the above equation can be reformulated as\n\u2200k, k\u2032 \u2208 {1, . . . ,m}, \u03b1j ( k\u03b2 \u2212 k\u2032\u03b2 ) = \u2211 h\u2264m wh ( k m 1(h\u2265k) \u2212 k\u2032 m 1(h\u2265k\u2032) ) . (5)\nWe next recursively derive the weights wh, and show that they are non-negative and satisfy Equation (5). To begin, let wm = max {\n0, max k\n[ \u03b1jm ( k\u03b2 \u2212 (k \u2212 1)\u03b2 )]} ,\nand for all k = m,m\u2212 1, . . . , 2, define\nwk\u22121 = 1\nk \u2212 1 ( m\u2211 h=k wh \u2212 \u03b1jm ( k\u03b2 \u2212 (k \u2212 1)\u03b2 )) .\nBy definition, wm \u2265 0. Assume that for all h \u2265 k, wh \u2265 0. Then\nwk\u22121 \u2265 1\nk \u2212 1\n( wm \u2212 \u03b1jm ( k\u03b2 \u2212 (k \u2212 1)\u03b2 )) \u2265 0.\nTherefore all weights are non-negative. Furthermore, by rearranging the definition of wk\u22121, we have\n\u03b1j ( k\u03b2 \u2212 (k \u2212 1)\u03b2 ) = 1\nm ( m\u2211 h=k wh \u2212 (k \u2212 1)wk\u22121 ) = 1 m ( k m\u2211 h=k wh \u2212 (k \u2212 1) m\u2211 h=k\u22121 wh )\n= \u2211 h\u2264m wh ( k m 1(h\u2265k) \u2212 k \u2212 1 m 1(h\u2265k\u22121) ) .\nEquation (5) is proved for a particular pair k > k\u2032 by summing the above expression for \u03b1j ( s\u03b2 \u2212 (s\u2212 1)\u03b2 ) over all s \u2208 (k\u2032, k] and canceling telescoping terms, and if k = k\u2032, the statement holds regardless of the weights chosen.\nThis shows that (\u0393, D) is implementable. It remains to argue the complexity. The running time of the construction of the weights is clearly poly(n,m) and the cardinality of Sj(\u03b1j) is m. The remaining piece is bounding the sum of weights as poly(n,m,\u03b1max), which we defer to Appendix D.2.\nThe next theorem follows immediately from Lemma 4.2, Theorem 3.5, and the fact that the maximum revenue is at most R.\nTheorem 4.3. Consider the online auction design problem for the class of VCG auctions with bidder-specific reserves, Im. LetR = maxr,v Rev(r,v) and letD be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393VCG and D is oracle-efficient with complexity poly(n,m, T ) and has regret\nE [ max r\u2208Im T\u2211 t=1 Rev(r,vt)\u2212 T\u2211 t=1 Rev(rt,vt) ] \u2264 O(n log(m)R \u221a T ).\nNote that in general, R is bounded by the number of bidders that can be served simultaneously, which is at most n.\nNow let us return to the infinite class I of all VCG auctions with reserve prices ri \u2208 [0, 1]. We show Im is a finite \u201ccover\u201d for this class when the family of feasible sets S is the set of all subsets of size at most s, corresponding to single-item single-unit auctions (when s = 1) or more general single-item s-unit auctions.\nConsider any vector of reserves r \u2208 I and let r\u2032 \u2208 Im be the vector obtained by rounding each reserve price down to the nearest multiple of 1/m. If vi > ri, then vi > r\u2032i, so any bidder who would have been included in the basic VCG auction using reserves r is still included with r\u2032. This can only increase the number of bidders who are serviced and therefore pay a charge. It is not hard to see, and we prove in Appendix D.1, that each bidder\u2019s payment can decrease by at most 1/m. That is,\nmax r\u2208I T\u2211 t=1 Rev(r,vt)\u2212 max r\u2208Im T\u2211 t=1 Rev(r,vt) \u2264 Ts m . (6)\nSetting m = \u221a T and using Theorem 4.3, we obtain the following result for the class of auctions I.\nTheorem 4.4. Consider the online auction design problem for the class of VCG auctions with bidderspecific reserves, I, in s-unit auctions. Let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393VCG and D is oracle-efficient with complexity poly(n, T ) and has regret efficient oracle-based online algorithm with regret\nE [ max r\u2208I T\u2211 t=1 Rev(r,vt)\u2212 T\u2211 t=1 Rev(rt,vt) ] \u2264 O(ns log(T ) \u221a T )."}, {"heading": "4.2 Envy-free Item Pricing", "text": "In this section, we consider envy-free item pricing [17] in an environment with k heterogeneous items with a supply of s` \u2265 0 units for each item ` \u2264 k.\nDefinition 4.5 (Envy-free Item-Pricing Auction). An envy-free item-pricing auction for k heterogeneous items, given supply s` for ` = 1, . . . , k is defined by a vector of prices a, where a` is the price of item `. The mechanism considers bidders i = 1, . . . , n in order and allocates to bidder i the bundle qi \u2208 {0, 1}k that maximizes vi(qi)\u2212a \u00b7qi, among all feasible bundles, i.e., bundles that can be composed from the remaining supplies. Bidder i is then charged the price a \u00b7 qi.\nExamples of such environments include unit-demand bidders in unlimited supply setting and singleminded bidders in unlimited supply setting, such as hypergraph pricing, where bidders seek hyper-edges in a hypergraph, and its variant the highway problem, where bidders seek hyperedges between sets of contiguous vertices [2, 17]. We will describe some of these problems in more detail later on.\nWe represent by Pm the class of all such envy-free item pricing auctions where a` is a multiple of 1/m for all `. Next, we discuss the construction of an implementable and admissible pair (\u0393, D). Consider a bid profile where one bidder has value v for bundle e` and all other bidders have value 0 for all bundles. The revenue of auction a on such a bid profile is a`1(v\u2265a`). Note the similarity to the case of VCG auctions with bidder-specific reserve prices r, where bid profiles with a single non-zero valuation vi and revenue ri1(vi\u2265ri) were used to create an implementable construction for \u0393. We show that a similar construction works for Pm.\nConstruction of \u0393: Let \u0393IP be a |Pm| \u00d7 (kdlogme) binary matrix, where the `th collection of dlogme columns correspond to the binary encoding of auction\u2019s price for item `. More formally, for any ` \u2264 k and \u03b2 \u2264 dlogme, \u0393IPaj is the \u03b2th bit of (the integer) ma`, where j = (`\u2212 1)dlogme+\u03b2. Next, we show that \u0393IP is admissible and (\u0393IP, D) is implementable for any D with a bounded support. The proof of the following lemma is equivalent to that of Lemma 4.2 and appears in Appendix D.3 for completeness.\nLemma 4.6. \u0393IP is (2, 1)-admissible. If D is supported on a subset of [\u2212\u03b1max, \u03b1max], then (\u0393IP, D) is implementable with complexity poly(k,m, \u03b1max).\nOur main theorem follows immediately from Lemma 4.6, Theorem 3.5, and the fact that the revenue of the mechanism at every step is at most R. In general, R is at most n.\nTheorem 4.7. Consider the online auction design problem for the class of envy-free item pricing auctions, Pm. Let R = maxa,v Rev(a,v) and let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393IP and D is oracle-efficient with complexity poly(n, k,m, T ) and has regret\nE [ max a\u2208Pm T\u2211 t=1 Rev(a,vt)\u2212 T\u2211 t=1 Rev(at,vt) ] \u2264 O ( kR log(m) \u221a T ) .\nConsider the class of all envy-free item-pricing auctions where a` \u2208 [0, 1] is a real number and denote this class by P . We show that Pm is a discrete \u201ccover\u201d for P when there is an unlimited supply of all items (s` =\u221e for all `) and the bidders have single-minded or unit-demand valuations.\nIn the single-minded setting, each bidder i is interested in one particular bundle of items q\u0302i. That is, vi(qi) = 0 for all qi 6= q\u0302i. Consider any vector of prices a \u2208 P and let a\u2032 \u2208 Pm be the vector obtained by rounding each price down to the nearest multiple of 1/m. Since the price of every bundle is reduced, any bidder i who received bundle q\u0302i in auction a, also receives q\u0302i in auction a\n\u2032. So, the revenue of the mechanism reduces by at most nk/m. That is,\nmax a\u2208P T\u2211 t=1 Rev(a,vt)\u2212 max a\u2208Pm T\u2211 t=1 Rev(a,vt) \u2264 Tnk m .\nThe following result is an immediate consequence of the above discretization for the choice ofm = \u221a T ,\nthe fact that R \u2264 n for single-minded bidders, and Theorem 4.7.\nTheorem 4.8. Consider the online auction design problem for the class of envy-free item pricing auctions, P , with single-minded bidders. Let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393IP andD is oracle-efficient with complexity poly(k, n, T ) and has regret\nE [ max a\u2208P T\u2211 t=1 Rev(a,vt)\u2212 T\u2211 t=1 Rev(at,vt) ] \u2264 O ( nk log(T ) \u221a T ) .\nIn the unit-demand setting, each bidder i has valuation vi(e`) for item `, and wishes to purchase at most one item, i.e., item arg max` (vi(e`)\u2212 a`). We show that for any a \u2208 P there is a\u2032 \u2208 Pm such that for any valuation profile v, Rev(a,v) \u2212 Rev(a\u2032,v) \u2264 O(nk/m). At a high level, we choose a\u2032 as discounted prices such that items with higher prices are discounted at higher rates. It is not hard to see that under this condition, no bidder purchases a less expensive item in auction a\u2032. So, the loss in the revenue of the auction is bounded by the discount on the items. Using this intuition, it is sufficient to find a\u2032 \u2208 Pm such that a` \u2265 a\u2032` \u2265 a` \u2212 O(1/m) for all ` \u2264 k, and a` \u2212 a\u2032` > a`\u2032 \u2212 a\u2032`\u2032 when a` > a`\u2032 . In the next lemma, we provide one such mapping between a and a\u2032 \u2208 Pm that has an additive approximation guarantee. Hartline and Koltun [20] also provided a discretization of P that has multiplicative approximation guarantee, but using a discretized set different from Pm.\nLemma 4.9. For any a \u2208 P there is a\u2032 \u2208 Pm, such that for any valuation profile v, Rev(a,v) \u2212 Rev(a\u2032,v) \u2264 nk/m.\nProof. For ease of exposition, let = 1/m. Without loss of generality, assume a1 \u2264 a2 \u2264 \u00b7 \u00b7 \u00b7 \u2264 ak. We next derive the desired a\u2032. To begin, let a\u20321 be the largest multiple of less than or equal to a1. For ` = 2, . . . , k, let a\u2032` be the largest multiple of less than or equal to a` such that a` \u2212 a\u2032` \u2265 a`\u22121 \u2212 a\u2032`\u22121. Note that a\u2032` is well defined, since we can begin by considering a\u2032` = a \u2032 `\u22121 and then increase by until the condition is violated. This construction means that pricing of items with a larger ` is more attractive in a\u2032 than it was\nin a. Thus, no bidder that prefers an item ` under a, would prefer any item `\u2032 < ` under a\u2032. Therefore, the revenue obtained from the bidder i who prefers ` under a is at least a\u2032` under a \u2032, which implies the bound\nRev(a,v)\u2212 Rev(a\u2032,v) \u2264 nmax `\u2264k (a` \u2212 a\u2032`).\nTo complete the proof, we argue by induction that a` \u2212 a\u2032` \u2264 ` . This clearly holds for ` = 1. For ` \u2265 2, the definition of a\u2032`, in the absence of discretization to , would yield a \u2032 ` = a` \u2212 (a`\u22121 \u2212 a\u2032`\u22121). With the discretization, we have\na\u2032` \u2265 a` \u2212 (a`\u22121 \u2212 a\u2032`\u22121)\u2212 \u2265 a` \u2212 (`\u2212 1) \u2212 = a` \u2212 ` ,\nwhere we used the inductive hypothesis at `\u2212 1.\nFor a choice of m = \u221a T , the fact that R \u2264 n, and Theorem 4.7 we have the following result for the\nclass of auctions P .\nTheorem 4.10. Consider the online auction design problem for the class of envy-free item pricing auctions, P , with unit-demand bidders. Let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393IP andD is oracle-efficient with complexity poly(n, k, T ) and has regret\nE [ max a\u2208P T\u2211 t=1 Rev(a,vt)\u2212 T\u2211 t=1 Rev(at,vt) ] \u2264 O ( nk log(T ) \u221a T ) ."}, {"heading": "4.3 Level Auctions", "text": "We consider the class of level auctions introduced by Morgenstern and Roughgarden [28]. These auctions can achieve (1\u2212 )-approximate revenue maximization, when the valuations of the bidders are drawn independently (but not necessarily identically) from a distribution [28], approximating the Myerson\u2019s optimal auction [29]. Using our tools, we derive oracle-efficient no-regret algorithms for this auction class.\nThe s-level auctions realize a single-item single-unit allocation as follows:\nDefinition 4.11. An s-level auction \u03b8 is defined by s thresholds for each bidder i, 0 \u2264 \u03b8i0 \u2264 \u00b7 \u00b7 \u00b7 \u2264 \u03b8is\u22121 \u2264 1. For any bid profile v, we let b\u03b8i (vi) denote the index b of the largest threshold \u03b8 i b \u2264 vi, or \u22121 if vi < \u03b8i0. If vi < \u03b8i0 for all i, the item is not allocated. Otherwise, the item goes to the bidder with the largest index b\u03b8i (vi), breaking ties in favor of bidders with smaller i. The winner pays the price equal to the minimum bid that it could have submitted and still won the item.\nWhen it is clear from the context, we suppress the notation of \u03b8 in b\u03b8i (vi). We consider two classes of s-level auctions, Rs,m and Ss,m, where Rs,m is the set of all auctions described by Definition 4.11 with thresholds that are multiples of 1/m and Ss,m \u2286 Rs,m is the set of s-level auctions such that the thresholds for each i are distinct.\nLet us first consider Ss,m and construct an admissible and implementable pair (\u0393, D). Consider the bid profile in which the only non-zero bids are vn = `/m, for some 0 \u2264 ` \u2264 m, and vi = 1, for one bidder i < n. Note that bidder i wins the item in any such profile and pays \u03b8ib for b = max{0, bn(vn)}. Consider matrix \u0393 whose columns correspond to the revenue of auctions in Ss,m on such bid profiles, with an additional column corresponding to the bid profile en. Clearly, (\u0393, D) is implementable when supp(D) \u2286 R+. As for admissibility, take \u03b8 \u2208 Ss,m and the corresponding row \u0393\u03b8. Note that as vn = `/m increases for ` = 0, . . . ,m, there is an increase in bn(`/m) = \u22121, 0, . . . , s \u2212 1, possibly skipping the initial \u22121. Once bn(vn) reaches 0 and then increases to s\u22121, so does the revenue of \u03b8, i.e., \u03b8ibn(vn). Since any two consecutive thresholds of \u03b8 are different, the thresholds of \u03b8ib, for b \u2265 0, and \u03b8nb , for b \u2265 1, can be reconstructed by\nanalyzing the revenue of the auction and the values of vn at which the revenue changes. The remaining threshold \u03b8n0 is recovered by the bid profile v = en. This shows that any two rows of \u0393 are different and \u0393 is admissible. This reasoning is summarized in the following construction and the corresponding lemma, whose proof appears in Appendix D.4.\nConstruction of \u0393: For i \u2208 {1, . . . , n \u2212 1} and ` \u2208 {0, . . . ,m}, let vi,` = ei + (`/m)en. Let V = {vi,`}i,`\u222a{en}. Let \u0393SL be the matrix of size |Ss,m|\u00d7 |V | with entries indexed by (\u03b8,v) \u2208 Ss,m\u00d7V , such that \u0393SL\u03b8,v = Rev(\u03b8,v).\nLemma 4.12. Let D be a distribution supported on a subset of [0, \u03b1max]. Then (\u0393SL, D) is implementable with complexity poly(n,m,\u03b1max) and \u0393SL is (m+ 1, 1/m)-admissible.\nOur next theorem is an immediate consequence of the implementability of (\u0393SL, D) and Theorem 3.5.\nTheorem 4.13. Consider the online auction design problem for the class of s-level auctions with no repeated thresholds, Ss,m. Let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393SL and D is oracle-efficient with complexity poly(n,m, T ) and has regret\nE [ max\n\u03b8\u2208Ss,m T\u2211 t=1 Rev(\u03b8,vt)\u2212 T\u2211 t=1 Rev(\u03b8t,vt)\n] \u2264 O(nm2 \u221a T ).\nNext, we consider the class of auctions Rs,m and construct an admissible and implementable pair (\u0393, D). As a warm-up, we demonstrate how the structure of Rs,m differs from Ss,m and argue that \u0393SL is not admissible forRs,m. Take v such that vi = 1 and vn is some multiple of 1/m. Similarly as before, as vn increases there is also an increase in bn(vn) and the revenue \u03b8ibn(vn). However, the thresholds of bidder n are no longer distinct, so bn(vn) can skip certain values, and as a result \u03b8ib is not revealed for all b. In addition, when the thresholds of bidder i are not distinct, we have that even when bn(vn) strictly increases, there might be no increase in the revenue, and as a result \u03b8nb cannot be reconstructed.\nTo identify an admissible construction for \u0393, we first analyze the structure of auctions in Rs,m. Let Bib(\u03b8) denote the set of all bids vi such that b \u03b8 i (vi) = b; we refer to such sets as buckets, since they partition i\u2019s valuations. Given a bucket Bib(\u03b8), we define its competing bucket as any B i\u2032 b\u2032(\u03b8) such that either i\n\u2032 < i and b\u2032 = b\u2212 1 or i\u2032 > i and b\u2032 = b. Note that the payment of a winning bidder i is \u03b8ib if another bidder\u2019s bid falls into a competing bucket of Bib(\u03b8). By definition, B i b(\u03b8) = \u2205 when \u03b8ib = \u03b8ib+1. The next lemma, whose proof appears in Appendix D.5, shows that we can restrict our attention to auctions for which empty buckets satisfy a strong structural property:\nLemma 4.14. Let Rs,m \u2286 Rs,m be the set of auctions \u03b8 with the following property: Every non-empty bucket Bib(\u03b8) with b \u2265 1 has a non-empty competing bucket. Then, for any \u03b8 \u2208 Rs,m, there is \u03b8\n\u2032 \u2208 Rs,m, such that\n\u2200v \u2208 [0, 1]n, Rev(\u03b8,v) = Rev(\u03b8\u2032,v).\nLemma 4.14 implies that any no-regret algorithm for the classRs,m is also a no-regret algorithm for the classRs,m. So, it suffices to analyze the class of auctionsRs,m.\nNext, we construct an admissible and implementable pair (\u0393, D) for Rs,m, by considering revenue of auctions on bid profiles in which the only non-zero bids are vi = 1 and vi\u2032 that is a multiple of 1/m. We show that for any two \u03b8,\u03b8\u2032 \u2208 Rs,m, there is one such bid profile where the revenues of these auctions differ. At a high level, we prove this by taking \u03b8ib 6= \u03b8\u2032ib with a non-empty bucket Bib(\u03b8) and showing that there is a bid vi\u2032 in one of the competing buckets that enforces two different prices \u03b8ib 6= \u03b8ib. This is further formalized in the construction below and Lemma 4.15, whose proof appears in Appendix D.6.\nConstruction of \u0393: Let V be the set of all bid profiles vi,i\u2032,` = ei + (`/m)ei\u2032 for i 6= i\u2032 \u2208 {1, . . . , n} and ` \u2208 {0, . . . ,m}. Let \u0393RL be a |Rs,m| \u00d7 |V | matrix with entries indexed by (\u03b8,v) \u2208 Rs,m \u00d7 V , such that \u0393RL\u03b8,v = Rev(\u03b8,v).\nLemma 4.15. Let D be a distribution supported on a subset of [0, \u03b1max]. Then, (\u0393RL, D) is implementable with the complexity poly(n,m,\u03b1max) and \u0393RL is (m+ 1, 1/m)-admissible.\nThe next theorem is a direct consequence of Lemmas 4.15 and 4.14.\nTheorem 4.16. Consider the online auction design problem for the class of s-level auctions with repeated thresholds, Rs,m. Let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393RL and D is oracle-efficient with complexity poly(n,m, T ) and has regret\nE [ max\n\u03b8\u2208Rs,m T\u2211 t=1 Rev(\u03b8,vt)\u2212 T\u2211 t=1 Rev(\u03b8t,vt)\n] \u2264 O(n2m2 \u221a T )."}, {"heading": "5 Stochastic Adversaries and Stronger Benchmarks", "text": "So far our results apply to general adversaries, where the sequence of adversary actions are arbitrary and where we showed that the payoff of the learner is at least as large as the payoff of the best action in hindsight. Can we make stronger statements about the average payoff of a no-regret learning algorithm when we impose distributional assumptions on the sequence of the adversary?\nWe start with the easier setting where the actions of the learner are drawn i.i.d. and then we analyze the slightly more complex setting where the actions of the learner follow a fast-mixing Markov chain. For both settings we show that the average payoff of the learning algorithm is as large as the optimal expected payoff, in expectation over the i.i.d. distribution in the i.i.d. setting and over the stationary distribution in the Markovian setting.\nWhen applied to the online optimal auction setting, combining these results with approximate optimality results of simple auctions such as s-level auctions or VCG with bidder-specific reserves, we get that the average revenue of our online learning algorithms compete with the revenue achieved by the unrestricted optimal auction for these distributional settings and not only with the best auction within the class over which our algorithms were learning."}, {"heading": "5.1 Stochastic Adversaries", "text": "I.I.D. Adversary One extreme case is to assume that the adversary\u2019s action yt at each iteration is drawn independently and identically from the same unknown distribution F . This leads to the i.i.d. learning setting. An easy application of the Chernoff-Hoeffding bound yields that for such a learning setting, the average payoff of a no-regret learner is at least as large as the best payoff one could achieve in expectation over the distribution F .\nLemma 5.1. Suppose that y1, . . . , yT are i.i.d. draws from a distribution F . Then for any no-regret learning algorithm, with probability at least 1\u2212 \u03b4,\n1\nT T\u2211 t=1 Ext [f(xt, yt)] \u2265 sup x\u2208X Ey\u223cF [f(x, y)]\u2212 \u221a log(2/\u03b4) 2T \u2212 REGRET T . (7)\nProof. Let x\u2217 = arg supx\u2208X Ey\u223cF [f(x, y)]. By the definition of regret we have that for any y1, . . . , yT ,\nT\u2211 t=1 Ext [f(xt, yt)] \u2265 sup x\u2208X T\u2211 t=1 f(x, yt)\u2212 REGRET \u2265 T\u2211 t=1 f(x\u2217, yt)\u2212 REGRET. (8)\nObserve that the random variables Zt = f(x\u2217, yt) are drawn i.i.d. with expected value Ey\u223cF [f(x\u2217, y)] and are bounded in [0, 1]. Hence, by the Hoeffding bound, we get that with probability at least 1\u2212 2e\u22122T 2 :\n1\nT T\u2211 t=1 f(x\u2217, yt) \u2265 Ey\u223cF [f(x\u2217, y)]\u2212 . (9)\nBy setting = \u221a\nlog(2/\u03b4) 2T and combining the two bounds we get the result.\nMarkovian Adversary Suppose that the choice of the adversary yt follows a stationary and reversible Markov process based on some transition matrix P (y, y\u2032) with a stationary distribution F . Moreover, consider the case where the set Y is finite. For any Markov chain, the spectral gap \u03b3 is defined as the difference between the first and the second largest eigenvalue of the transition matrix P (the first eigenvalue always being 1). We will assume that this gap is bounded away from zero. The spectral gap of a Markov chain is strongly related with its mixing time. In this work we will specifically use the following result of Paulin [31], which is a Bernstein concentration inequality for sums of dependent random variables that are the outcome of a stationary Markov chain with spectral gap bounded away from zero. A Markov chain y1, . . . , yT is stationary if y1 \u223c F , where F is the stationary distribution. For simplicity, we focus on stationary chains, though similar results hold for non-stationary chains (see Paulin [31] and references therein).\nTheorem 5.2 (Paulin [31], Theorem 3.8). LetX1, . . . , Xz be a stationary and reversible Markov chain on a state space \u2126, with stationary distribution F and spectral gap \u03b3. Let g : \u2126\u2192 [0, 1] and Sz = 1z \u2211z i=1 g(Xi). Then\nPr[|Sz \u2212 EX\u223cF [g(X)]| > ] \u2264 2 exp ( \u2212 z\u03b3 2\n4 + 10\n) . (10)\nLemma 5.3. Suppose that y1, . . . , yT are a stationary and reversible Markov chain based on a transition matrix P , with stationary distribution F and with spectral gap \u03b3. Then for any no-regret learning algorithm, with probability at least 1\u2212 \u03b4:\n1\nT T\u2211 t=1 Ext [f(xt, yt)] \u2265 sup x\u2208X Ey\u223cF [f(x, y)]\u2212\n\u221a 14 log(2/\u03b4)\n\u03b3T \u2212 REGRET T . (11)\nProof. Let x\u2217 = arg supx\u2208X Ey\u223cF [f(x, y)]. By the definition of regret we have that for any sequence y1, . . . , yT ,\nT\u2211 t=1 Ext [f(xt, yt)] \u2265 sup x\u2208X T\u2211 t=1 f(x, yt)\u2212 REGRET \u2265 T\u2211 t=1 f(x\u2217, yt)\u2212 REGRET. (12)\nSince y1, . . . , yT are a Markov chain, by applying Theorem 5.2 to this chain and to the function f(x\u2217, \u00b7), we obtain that with probability at least 1\u2212 2 exp ( \u2212 T\u03b3 2\n4+10\n) ,\n1\nT T\u2211 t=1 f(x\u2217, yt) \u2265 Ey\u223cF [f(x\u2217, y)]\u2212 . (13)\nIf we set = \u221a\n14 log(2/\u03b4) \u03b3T then we have, either > 1, in which case the inequality is trivial, since f(x, y) \u2208 [0, 1], or if \u2264 1, then = \u221a\n14 log(2/\u03b4) \u03b3T \u2265\n\u221a (4+10 ) log(2/\u03b4)\n\u03b3T , which implies that the inequality holds with probability 1\u2212 \u03b4.\nExample 5.4 (Sticky Markov Chain). Consider a Markov chain where at every iteration yt is equal to yt\u22121 with some probability \u03c1 \u2265 1/2 and with the remaining probability (1 \u2212 \u03c1) it is drawn independently from some fixed distribution F . It is easy to see that the stationary distribution of this chain is equal to F . We can bound the spectral gap of this Markov chain by Cheeger\u2019s bound. The Cheeger constant for a finite state, reversible Markov chain is defined as\n\u03a6 = min S\u2286\u2126:F (S)\u22641/2\n\u2211 x\u2208S \u2211 y\u2208Sc F (x)P (x, y)\nF (S) = min S\u2286\u2126:F (S)\u22641/2\n\u2211 x\u2208S \u2211 y\u2208Sc F (x)(1\u2212 \u03c1)F (y)\nF (S)\n= min S\u2286\u2126:F (S)\u22641/2\n(1\u2212 \u03c1)F (S) \u00b7 F (S c)\nF (S) = min S\u2286\u2126:F (S)\u22641/2 (1\u2212 \u03c1)F (Sc) \u2265 1\u2212 \u03c1 2\nMoreover, by the Cheeger bound [8] we know that \u03b3 \u2265 \u03a622 \u2265 (1\u2212\u03c1)2\n4 . Thus we get that for such a sequence of adversary actions, with probability 1\u2212 \u03b4,\n1\nT T\u2211 t=1 Ext [f(xt, yt)] \u2265 sup x\u2208X Ey\u223cF [f(x, y)]\u2212 2 1\u2212 \u03c1\n\u221a 14 log(2/\u03b4)\nT \u2212 REGRET T (14)"}, {"heading": "5.2 Implications for Online Optimal Auction Design", "text": "Consider the online optimal auction design problem for a single item and n bidders. Suppose that the adversary who picks the valuation vectors v1, . . . ,vT , is Markovian and that the stationary distribution F of the chain is independent across players, i.e., the stationary distribution is a product distribution F = F1 \u00d7 . . .\u00d7 Fn.\nThen we know that the optimal auction for this setting is what is known as Myerson\u2019s auction [29], which translates the players\u2019 values based on some monotone function \u03c6, known as the ironed virtual value function and then allocates the item to the bidder with the highest virtual value, charging payments so that the mechanism is dominant strategy truthful.\nA recent result of Morgenstern and Roughgarden [28] shows that level auctions approximate Myerson\u2019s auction in terms of revenue. In particular, if distributions Fi are bounded in [1, H], then the class of s-level auctions with s = \u2126(1 + log1+ H), where the thresholds can be any real numbers, achieves expected revenue at least (1 \u2212 ) of the expected optimal revenue of Myerson\u2019s auction. We prove and use a similar result for s-level auctions that uses the discretized set Rs,m. That is, when s = O(1/ ) and m = O(1/ ), we have\nmax \u03b8\u2208Rs,m\nEv\u223cF [Rev(\u03b8,v)] \u2265 OPT(F )\u2212 . (15)\nThe proof of this equation appears in Appendix E. Combining the results in this section with the aforementioned results we get the following theorem:\nTheorem 5.5 (Competing with Overall Optimal). Consider the online optimal auction design problem for a single item among n bidders, where the sequence of valuation vectors v1, . . . ,vT , is Markovian, following a stationary and reversible Markov process, with a stationary distribution F = F1 \u00d7 . . . \u00d7 Fn that is a product distribution across bidders, and with a spectral gap of \u03b3 > 0. Then the oracle-efficient online learning algorithm which optimizes over the set of s-level auctions Rs,m with s = O(T 1/6n\u22122/3) and with a discretization of the threshold levels of size m = O(T 1/6n\u22122/3), guarantees, with probability at least 1\u2212 \u03b4, average expected revenue at least:\n1\nT T\u2211 t=1 E\u03b8t [Rev(\u03b8t,vt)] \u2265 OPT(F )\u2212 1 m \u2212\n\u221a 14 log(2/\u03b4)\n\u03b3T \u2212O ( m2n2\u221a T ) \u2265 OPT(F )\u2212O ( n2/3 T 1/6 ) , (16)\nwhere OPT(F ) is the optimal revenue achievable by any dominant strategy truthful mechanism for valuation vector distribution F .\nExample 5.6 (Valuation Shocks). Consider the setting where valuations of players in the beginning of time are drawn from some product distribution F = F1\u00d7 . . .\u00d7Fn. Then at every iteration with some probability \u03c1 the valuations of all players remain the same as in the previous iteration, while with some probability 1\u2212 \u03c1, there is a shock in the market and the valuations of the players are re-drawn from distribution F . As we analyzed in the previous section, the spectral gap of the Markov chain defined by this setting is at least \u03b3 \u2265 (1\u2212\u03c1) 2\n4 . Thus we get a regret bound which depends inversely proportionally with the quantity 1\u2212 \u03c1. Hence, our online learning algorithm achieves revenue that is close to the optimal revenue achievable by any dominant strategy truthful mechanism for the distribution F . However, it achieves this guarantee even if the valuations of the players are not drawn i.i.d. at every iteration and even if the learner does not know the distribution F or when the valuations of the players are going to be re-drawn or what the rate \u03c1 of shocks in the markets is."}, {"heading": "6 Contextual Online Learning (Side Information)", "text": "We now consider a generalization of the online optimal auction setting, where at every iteration the learner also observes contextual information. The context \u03c3t at each iteration comes from some abstract context space \u03a3. In this setting the learner wants to use such contextual information to improve his performance. Specifically, the goal of the learner is to compete with a set of policies \u03a0, where a policy is a mapping from a context \u03c3t to an auction \u03c0(\u03c3t).\nGiven a class of auctions A, a set of possible valuations V , a policy class \u03a0 and an unknown sequence of bid profiles and contexts (\u03c31,v1), . . . , (\u03c3T ,vT ) \u2208 \u03a3 \u00d7 Vn, our goal is to provide an online algorithm that picks a policy \u03c0t \u2208 \u03a0 at every time step and achieves a revenue that is close to the revenue of the best policy \u03c0 \u2208 \u03a0 in hindsight. That is,\nE [ max \u03c0\u2208\u03a0 T\u2211 t=1 Rev(\u03c0(\u03c3t),vt)\u2212 T\u2211 t=1 Rev(\u03c0t(\u03c3t),vt) ] \u2264 o(T )."}, {"heading": "6.1 Non-Contextual to Contextual Learning for Separable Policies", "text": "We will give a reduction from a non-contextual setting to a contextual one in the general learning setting rather than a specific analysis for the auction setting. Hence, we consider the learning setting of Section 3 in which the learner has an action space X , the adversary has an action space Y and the payoff function of the learner is given by f(x, y) for each x \u2208 X and y \u2208 Y .\nWe will then consider the contextual version of this setting, where the learner also observes contextual information \u03c3 \u2208 \u03a3, and picks a policy \u03c0 \u2208 \u03a0 where \u03a0 is a subset of the mappings from a context \u03c3 to an action x \u2208 X . The action space of the adversary is a context \u03c3 \u2208 \u03a3 and an action y \u2208 Y . Then the payoff of the learner is given by:\nfc(\u03c0, (\u03c3, y)) = f(\u03c0t(\u03c3), yt) (17)\nwhile the regret of any algorithm is given by:\nREGRET = E [ max \u03c0\u2208\u03a0 T\u2211 t=1 f(\u03c0(\u03c3t), yt)\u2212 T\u2211 t=1 f(\u03c0t(\u03c3t), yt) ] .\nThe offline oracle assumption now asks for an algorithm that takes as input a distribution over contexts and adversary actions and returns the best policy in the policy space for this distribution.\nThe contextual learning setting is another instance of the general learning setting, with learner action space Xc = \u03a0 \u2286 (\u03a3 \u2192 X ), adversary action space Yc = \u03a3 \u00d7 Y and payoff function fc(xc, yc) as defined above. Moreover, a contextual offline oracle is an offline oracle for this new learning setting.\nIf we are given an admissible and implementable matrix \u0393 in the original learning setting, then we show how to construct an admissible and implementable matrix \u0393c for the contextual learning. For this reduction we will use the notion of a separator of the policy space, defined in [35].\nDefinition 6.1 (Separator). A set S \u2286 \u03a3 of contexts is a separator for a policy space \u03a0, if for any two policies \u03c0, \u03c0\u2032 \u2208 \u03a0, there exists a context \u03c3 \u2208 S such that \u03c0(\u03c3) 6= \u03c0\u2032(\u03c3).\nDefinition 6.2 (Contextual S-extension of a matrix \u0393). For any matrix |X | \u00d7 N matrix \u0393, we define its contextual S-extension \u0393S as an |\u03a0| \u00d7 (|S| \u00b7 N) matrix, where each column jc is associated with a pair (\u03c3, j) for \u03c3 \u2208 S and j \u2208 [N ] and such that the value of \u0393S at coordinates (\u03c0, (\u03c3, j)) is equal to the entry of matrix \u0393 at coordinates (\u03c0(\u03c3), j), i.e.,\n\u0393S\u03c0,(\u03c3,j) = \u0393\u03c0(\u03c3)j . (18)\nLemma 6.3 (Contextual Admissibility). If \u0393 is a (\u03ba, \u03b4)-admissible matrix for a learning setting and S is a separator for the policy \u03a0, then the contextual S-extension \u0393c is a (\u03ba, \u03b4)-admissible matrix for the contextual learning setting.\nProof. First we argue that \u0393S has distinct rows. We will show that for any two rows \u03c0, \u03c0\u2032, there exists a column (\u03c3, j) on which they differ. Since S is a separator, there must exist one \u03c3\u2217 \u2208 S on which \u03c0(\u03c3\u2217) 6= \u03c0\u2032(\u03c3\u2217). Now by the admissibility of the original matrix \u0393, we know that for any two x, x\u2032 \u2208 X , there exists a column j of the original matrix such that \u0393x,j 6= \u0393x\u2032,j . Applying the latter for \u03c0(\u03c3\u2217), \u03c0\u2032(\u03c3\u2217) \u2208 X , we get that there exists a j\u2217, such that \u0393\u03c0(\u03c3\u2217),j\u2217 6= \u0393\u03c0\u2032(\u03c3\u2217),j\u2217 . By the definition of \u0393c, the latter implies that \u0393c\u03c0,(\u03c3\u2217,j\u2217) 6= \u0393\u03c0\u2032,(\u03c3\u2217,j\u2217). Thus the two rows \u03c0, \u03c0\n\u2032 of matrix \u0393 differ at column (\u03c3\u2217, j\u2217). Now we argue that the quantities \u03ba, \u03b4 (as defined in Definition 3.2), for the matrix \u0393S are the same as the quantities for matrix \u0393. We remind the reader that \u03ba is the maximum number of distinct elements that appear in a column and \u03b4 is the minimum non-zero absolute difference between any two elements of a column. The reason that these quantities don\u2019t change is that they depend only on the set of values that appear in a column and not of the actual vector of values. Moreover, the set of quantities that appear in column (\u03c3, j) of matrix \u0393S , is a subset of the set of quantities that appear in column j of matrix \u0393. Since by taking a subset of the column we cannot increase the number of distinct elements and the minimum non-zero absolute difference of any two elements in the set, we conclude that \u0393S is also (\u03ba, \u03b4)-admissible.\nLemma 6.4 (Contextual Implementability). If a pair (\u0393, D) of a translation matrix and a distribution is implementable in the original learning setting, then the pair (\u0393S , D) is implementable in the contextual learning setting.\nProof. The intuition of the proof is as follows: if we know that we can simulate every column in \u0393 with a sequence of polynomially many weighted inputs {(y, wy)}, then we can simulate each column of \u0393c associated with context \u03c3 \u2208 S and column i of \u0393, by a sequence of weighted contextual inputs {(\u03c3, y, wy)}, which is essentially a contextually annotated copy of the sequence of inputs we used to simulate column i of \u0393. We now show this intuition more formally.\nImplementability in the original setting implies that for any column i \u2208 {1, . . . , N} of matrix \u0393 there exists a constant ci such that for any \u03b1 \u2208 supp(D) there exist weights {wi,\u03b1y }y\u2208Y such that |{y : wi,\u03b1y > 0}| \u2264 poly(N,T ) and \u03b1 (\u0393xi \u2212 ci) = \u2211 y\u2208Y w i,\u03b1 y f(x, y) and for all x \u2208 X .\nIn the contextual learning setting we need to argue that for any column (\u03c3, i) \u2208 S \u00d7 [N ] of matrix \u0393S there exists a constant r(\u03c3,i) such that for any \u03b1 \u2208 supp(D) there exist weights {w (\u03c3,i),\u03b1 (\u03c3\u2032,y) }(\u03c3\u2032,y)\u2208\u03a3\u00d7Y , such that |{(\u03c3\u2032, y) : w(\u03c3,i),\u03b1(\u03c3\u2032,y) > 0}| \u2264 poly(N,T ) and for all \u03c0 \u2208 \u03a0\n\u03b1(\u0393c\u03c0,(\u03c3,i) \u2212 r(\u03c3,i)) = \u2211\n(\u03c3\u2032,y)\u2208\u03a3\u00d7Y\nw (\u03c3,i),\u03b1 (\u03c3\u2032,y) fc(\u03c0, (\u03c3\n\u2032, y)) \u2261 \u2211\n(\u03c3\u2032,y)\u2208\u03a3\u00d7Y\nw (\u03c3,i),\u03b1 (\u03c3\u2032,y) f(\u03c0(\u03c3 \u2032), y).\nThe construction of such weights is straightforward: for each y \u2208 Y , set w(\u03c3,i),\u03b1(\u03c3,y) = w i,\u03b1 y and for \u03c3\u2032 6= \u03c3 set w (\u03c3,i),\u03b1 (\u03c3\u2032,y) = 0. Moreover, we set r(\u03c3,i) = ci Now observe that:\n\u03b1(\u0393c\u03c0,(\u03c3,i) \u2212 r(\u03c3,i)) = \u03b1(\u0393\u03c0(\u03c3),i \u2212 ci) = \u2211 y\u2208Y wi,\u03b1y f(\u03c0(\u03c3), y) = \u2211 (\u03c3\u2032,y)\u2208\u03a3\u00d7Y w (\u03c3,i),\u03b1 (\u03c3\u2032,y) f(\u03c0(\u03c3 \u2032), y).\nThe latter completes the proof.\nGiven the above two lemmas we can now invoke Theorem 3.5 applied to the contextual setting and get the result:\nCorollary 6.5. Let \u0393 be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxi,j \u0393ij and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). Then the regret of the Generalized FTPL algorithm applied to the contextual setting and with the contextual extension \u0393S of matrix \u0393 with respect to a separator S of size d, achieves regret:\nREGRET \u2264 2Nd \u221a 2T\u03ba\u03b3/\u03b4.\nMoreover, assuming access to a contextual offline oracle, the latter algorithm can be implemented efficiently in time poly(N, d, T ).\nIn the context of online binary classification where the features are vectors of boolean variables, [35] presents a set of examples of policy spaces that are separable. To portray the applicability of our contextual theorem, we present an example of a policy space for an auction problem that is also separable.\nExample 6.6 (ORs of Boolean Features). Consider the case where each feature vector \u03c3 is a boolean vector in {0, 1}r. Moreover, consider the case of online optimal auction design over single-item second price auctions with bidder specific reserves. An example of a policy space that is separable is a policy that resembles an A/B testing over reserve prices. The auctioneer splits his reserve prices into two disjoint setsA and B (for instance, A could be a set of vectors of low reserve prices, below some threshold, and B is a set of vectors of high reserves prices). Then the set of policies is as follows: for each context \u03c3 = (\u03c31, . . . , \u03c3r) take the OR of a subset of the boolean coordinates. If the OR evaluates to 1, then pick some vector of bidder specific reserve prices from set A and if the OR is 0 then pick any vector of reserve prices from set B. The whole set of policies is then generated by picking which subset of the coordinates to use for the OR function and which vector of reserves from A to output on 1 and which vector of reserves from B to output on 0. By running our contextual online learning algorithm over such a policy space, the auctioneer can learn which of the boolean coordinates are indicative of a high valuation for the players and when any one of them is 1 it will place a high reserve price, optimizing also over the exact vector of reserves within a high regime. Otherwise it will find an optimal vector of reserves from a low regime.\nObserve that the set of r boolean vectors that are 1 on only one coordinate, plus the all-zero boolean vector, is a separator for this policy space. Consider any two set of different policies \u03c0, \u03c0\u2032. If they use the same OR function, then they must differ in which vector of reserves they use from A or B. Thus they must be outputting a different action at some of the boolean vectors of the separator. If they differ in the OR function, then suppose that one includes coordinate j and the other doesn\u2019t. Then on the boolean vector which is 1 on only coordinate j, the one policy evaluates to 1 and picks a reserve vector from set A, while the other evaluates to 0 and picks a reserve vector from set B which has to be different, since A and B are disjoint. Thus the size of the separator for this class of policies is of order O(r), while the size of the policy space is exponential in r.\nSimilar analysis can be done when the policy is using the AND of boolean features rather than the OR."}, {"heading": "6.2 Transductive Contextual Setting", "text": "We now consider the case where the learner knows a priori the set of contexts that could potentially arise, i.e., we assume that he knows that all contexts \u03c31, . . . , \u03c3T come from a set S, which we will refer to as the transductive set. We do not require that he knows the multiplicity of each context or the sequence under which contexts arrive. However, we do allow the set S to be of size as large as T .\nIn this setting, ignoring some technical details, we could treat the transductive set S as a separator set from the last section. However, by doing so, the regret guarantee that we would derive from the analysis of the previous section grows super-linearly in T , when the size of the set S is of \u0398(T ). Thus in order to guarantee sub-linear regret in the transductive setting we need a tighter analysis. To achieve this we will leverage the fact that in the transductive setting S is the whole set of contexts that will arise, which is a stronger property than being a separator. This will allow us to prove a stronger stability lemma than the one that would arise from invoking Lemma 3.4 for the contextual learning setting. Moreover, we will use a perturbation distribution D that has mean zero, leading to cancellations in the cumulative error term, that make that term not grow linearly with the size of S but rather as the square root of the size of S. The combination of these two improvements leads to sub-linear regret even when |S| = \u0398(T ).\nWe will still assume that we have a (\u03ba, \u03b4)-admissible translation matrix \u0393 for the non-contextual problem and a (\u03c1, 1/\u03b4)-dispersed distributionD, such that (\u0393, D) is implementable in the non-contextual setting. The algorithm that we will analyze is the Generalized FTPL algorithm in the contextual learning setting, with the contextual extension \u0393S of matrix \u0393 (where S is the transductive set) and with the same distribution D.\nWe first show an improved stability property of this algorithm. Even though the number of columns of matrix \u0393S is |S| \u00b7N we can show that the stability of the algorithm does not depend on |S|.\nLemma 6.7. Consider the Generalized FTPL algorithm in the contextual learning setting with translation matrix the contextual extension \u0393S of a (\u03ba, \u03b4)-admissible matrix \u0393 with N columns and with a (\u03c1, 1/\u03b4)dispersed distribution D. Then,\nE [ T\u2211 t=1 fc(\u03c0t+1, (\u03c3t, yt))\u2212 fc(\u03c0t, (\u03c3t, yt)) ] \u2264 2TN\u03ba\u03c1.\nProof. We will show that for each t \u2264 T ,\nE[fc(\u03c0t+1, (\u03c3t, yt))\u2212 fc(\u03c0t, (\u03c3t, yt))] \u2264 2N\u03ba\u03c1. (19)\nSince fc(\u03c0, (\u03c3t, yt)) = f(\u03c0(\u03c3t), yt) and since f(x, y) \u2208 [0, 1], it suffices to show that Pr[\u03c0t+1(\u03c3t) 6= \u03c0t(\u03c3t)] \u2264 2N\u03ba\u03c1.\nObserve that if \u03c0t+1(\u03c3t) 6= \u03c0t(\u03c3t) then it must be that \u0393\u03c0t+1(\u03c3t),i 6= \u0393\u03c0t(\u03c3t),i, for some i \u2208 [N ], by the admissibility of matrix \u0393 in the non-contextual setting. Thus we need to show that the probability that there exists an i such that \u0393\u03c0t+1(\u03c3t),i 6= \u0393\u03c0t(\u03c3t),i is at most 2N\u03ba\u03c1. By the union bound it suffices to show that for any given i, the probability that \u0393\u03c0t+1(\u03c3t),i 6= \u0393\u03c0t(\u03c3t),i is at most 2\u03ba\u03c1.\nThe proof of this fact then follows identical arguments as in the proof of the non-contextual stability Lemma 3.4 and we omit it for succinctness.\nFinally, we also show that if one uses a mean-zero Gaussian distribution D with sufficiently high variance, then the error term that is accumulated grows as the square root of the number of columns of the contextual matrix, rather than linearly. The proof of this requires a more detailed analysis of the Gaussian noise, and can be found in the appendix. Combining the two improvements we get the following theorem (see Appendix F for the proof).\nTheorem 6.8. Let \u0393 be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxi,j \u0393ij and let D = U [\u2212\u03bd, \u03bd]. Then the regret of the Generalized FTPL algorithm in the transductive contextual learning setting with translation matrix \u0393S and with the same distribution D can be bounded as\nREGRET \u2264 2TN\u03ba \u03bd\u03b4\n+ 2\u03b3\u03bd \u221a 2N |S| ln |X |.\nFor \u03bd = \u221a T\u03baN 1 4\n\u221a \u03b4\u03b3(2|S| ln |X |) 1 4\nthe above bound becomes O ( N 3 4 (|S| ln |X |) 1 4 \u221a T\u03ba\u03b3 \u03b4 ) . Since |S| \u2264 T , the latter\nis O ( (NT ) 3 4 (ln |X |) 1 4 \u221a \u03ba\u03b3 \u03b4 ) .\nObserve that our application on VCG auctions with bidder-specific reserves and on envy-free item pricing continue to hold even for perturbation distributions D that have support on the negative part of the real line. Thus the results for those applications immediately extend to the transductive contextual setting by invoking the theorem above."}, {"heading": "7 Approximate Oracles and Approximate Regret", "text": "As we saw, the Oracle-Based Generalized FTPL algorithm requires an oracle to choose the optimal learner\u2019s action xt at time step t against a set of adversary\u2019s actions. In this section, we extend our main results regarding the Oracle-Based Generalized FTPL algorithm to work with oracles that only return approximately optimal actions for the learner. An offline approximation oracle is defined formally as follows:\nDefinition 7.1 (Offline Approximation Oracle). An offline approximation oracle for set of learner\u2019s actions X and function f , C-OPT(f,X ) where C \u2264 1, is any algorithm that receives as input a weighted set of adversary actions S = {(w`, y`)}`\u2208L, wk \u2208 R+, yk \u2208 Y , and returns x \u2208 X , such that\u2211\n(w,y)\u2208S\nwf(x, y) \u2265 C max x\u2208X \u2211 (w,y)\u2208S wf(x, y).\nAs discussed earlier, access to a (1 \u2212 )-approximate oracle is needed for achieving no-regret results. That is, using standard online-to-batch reductions [6, 11], one can turn a polynomial time online no-regret algorithm into a polynomial time additive approximation scheme for the offline problem. So, when the best approximation for a problem is obtained through a C-optimization oracle, there is no hope for achieving no-regret results. Instead Kakade et al. [26] introduced an alternative measure of regret, called C-REGRET, for competing with offline approximation algorithm. Formally, the C-REGRET of an online maximization problem is defined as\nC-REGRET = C max a\u2208A\n1\nT T\u2211 t=1 f(x, yt)\u2212 E\n[ 1\nT T\u2211 t=1 f(xt, yt)\n] .\nWe consider several types of approximation oracles, such as (1\u2212 )-approximate oracle (e.g., FPTAS algorithms), approximation through relaxation of the objective, and approximation oracles that stem from Maximal-in-Range (MIR) algorithms. We show that a natural extension of the Oracle-Based Generalized FTPL algorithm,, with approximation oracle, displayed below, obtains vanishing REGRET or C-REGRET.\n(1\u2212 )-Approximation Oracle We show that any FPTAS approximation algorithm is sufficient for achieving the main results of our paper. In particular, we can extend the analysis of Theorem 3.5, and the stability lemma (Lemma 3.1) to work with (1\u2212 )-approximation while incurring an additional regret of T . For the choice of = O(1/ \u221a T ) this is truly a no-regret algorithm. This theorem is also the basis for handling working with the weaker integral oracle and its proof is deferred to section C.\nAlgorithm 3: Approximate Oracle-Based Generalized FTPL Input: positive |X | \u00d7N and an implementable (\u0393, D) and an offline approximation oracle C-OPT Draw \u03b1j \u223c D for j = 1, . . . , N . for t = 1, . . . , T do\nSet S \u2190 {(1, y1), . . . , (1, yt\u22121)} \u222a \u22c3 j\u2264N Sj(\u03b1j). Set xt = C-OPT(f,X )(S). Observe yt and receive payoff f(xt, yt).\nend for\nTheorem 7.2. Let \u0393 be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxx,j \u0393xj and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). Furthermore, assume (\u0393, D) is implementable with complexity g(N,T ). Then, Algorithm 3 with a (1\u2212 )-OPT oracle is oracle-efficient with per-round complexity O(T + g(N,T )) and regret of\nREGRET \u2264 2N \u221a 2T\u03ba\u03b3/\u03b4 + T.\nApproximation through Relaxation\nAnother large class of approximation algorithms achieve their approximation guarantees by (exactly) optimizing a relaxation of the objective functions. More formally, if there is a function F : X \u00d7 Y \u2192 R, such that Cf(x, y) \u2264 F (x, y) \u2264 f(x, y) and there is an offline approximation oracle OPT(F,X ), then any online algorithm for F is also online algorithm with vanishingC-REGRET for f . This result is more formally stated below.\nTheorem 7.3. Let F be a functions such that for any x \u2208 X and y \u2208 Y , f(x, y) \u2265 F (x, y) \u2265 Cf(x, y), Let \u0393F be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxx,j \u0393xj and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). Furthermore, assume (\u0393F , D) is implementable for function F with complexity g(N,T ) then Algorithm 3 is oracle-efficient with per-round complexity O(T + g(N,T )) and regret of\nC-REGRET \u2264 2N \u221a 2T\u03ba\u03b3/\u03b4.\nA similar observation was made by Balcan and Blum [2] regarding approximation algorithms that use linear optimization as a relaxation and therefore can be efficiently optimized by the standard FTPL algorithm of Kalai and Vempala [27]. Our work extends this observation to any relaxation of function f that has an FPTAS and an admissible and implementable translation matrix.\nRoughgarden and Wang [33] as a Relaxation. The approach of Roughgarden and Wang [33] for achieving a 1/2-regret for single-item second price auctions with bidder-specific reserves, falls exactly in the relaxation approximation framework. They give a relaxed objective which admits a polynomial time offline oracle and which is always within a factor 2 from the original objective. Then they run an oracle based online learning algorithm for the relaxed objective. However, in their case the relaxed objective corresponds to an online linear optimization problem and can be solved with the standard FTPL algorithm of Kalai and Vempala [27]. The theorem above shows that the same approach extends even if the relaxed objective does not reduce to an online linear optimization problem but to a problem that can be tackled by our Generalized FTPL.\nApproximation by Maximal-in-Range Algorithms\nAnother interesting class of approximation algorithms is Maximal-in-Range (MIR) algorithms. An MIR algorithm commits to a set of feasible solutions X \u2032 \u2286 X independently of the input to the algorithm and\noutputs the best solution x \u2208 X \u2032. That is, an MIRC-approximation algorithm forms an approximation oracle C-OPT(f,X )(S) = OPT(f,X \u2032)(S) for any S. Consider an MIR approximation algorithm and \u0393X translation matrix and distribution D such that \u0393X is admissible for X and (\u0393X , D) is implementable. Clearly, \u0393X restricted to the set of rows in X \u2032 is also admissible and implementable for any X \u2032 \u2286 X . In fact \u0393X \u2032 is (\u03ba\u2032, \u03b4\u2032) admissible for \u03ba\u2032 \u2264 \u03ba and 1\u03b4\u2032 \u2264 1 \u03b4 . Thus even better regret guarantees could be achievable if one uses the smaller admissibility quantities of matrix \u0393X \u2032 . Therefore, an MIR C-approximation algorithm leads to an efficient online algorithm with vanishing C-REGRET. More formally we have:\nTheorem 7.4. Let \u0393X be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxx,j \u0393xj and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). Furthermore, assume (\u0393X , D) is implementable with complexity g(N,T ). Then Algorithm 3 used with any MIR approximation algorithm C-OPT is an efficient algorithm with per-round complexity O(T + g(N,T )) and regret of\nC-REGRET \u2264 2N \u221a 2T\u03ba\u03b3/\u03b4.\nFurthermore, setting the oracle specific, \u03b7 = \u221a \u03b3\u03b4\u2032/(2T\u03ba\u2032), gives a stronger regret bound of 2N \u221a 2T\u03ba\u2032\u03b3/\u03b4\u2032."}, {"heading": "8 Additional Applications and Connections", "text": "In this section, we discuss an application of our oracle efficient learning approach to the problem of online welfare maximization in multi-unit auctions, to no-regret learning in simultaneous second price auctions and discuss the connections between our notions of admissibility and implementability with other statistical measures of complexity from learning theory."}, {"heading": "8.1 Polynomial Algorithm for Online Welfare Maximization in Multi-Unit Auctions", "text": "In this section, we consider single-item multi-unit auctions that has 1/2-approximation Maximal-in-Range (MIR) algorithm. We show how the results of Section 7 can be applied to this problem to achieve a truly polynomial time online algorithm with vanishing 12 -REGRET.\nWe consider an online learning variant of an n-bidder multi-unit environment, better modeled as a set of k identical items. Each bidder i has a monotonic valuation function vi : [k]\u2192 [0, 1]. In other words, bidder i has marginal valuation \u00b5i(`) for receiving the `th item and the total utility of bidder i for receiving the qith items is vi(qi) = \u2211qi s=1 \u00b5i(s). The goal is to find an allocation q that maximized the total welfare in time polynomial in n and log(k). In the online learning setting, every day t a fresh set of bidders arrives with some new valuation vti and the learner commits to an allocation of the units to the players, prior to seeing the valuations. The goal of the learner is to pick an allocation each day that competes with the best in hindsight.\nIt is not hard to see that the offline welfare maximization problem in this setting corresponds to the Knapsack problem, where each player has a valuation equal to the average value in hindsight, i.e. 1t \u2211t \u03c4=1 v \u03c4 i (\u00b7). So, dynamic programming can be used to compute a welfare-maximizing allocation in time polynomial in n and k. Dobzinski and Nisan [13] introduced a 1/2-approximation MIR algorithm for this problem. At a high level, the algorithm proceeds by dividing the set of items to k/n2 bundles of the same size.5 Then the MIR algorithm chooses the best allocation from the set of allocations (range of the algorithm) where all the items in one bundle are allocated to the same bidders. This algorithm is effectively solving a knapsack problem over n2 items and can be implemented in time polynomial in n and log(k).\nWe show how to construct a matrix \u0393MU that is admissible and implementable for unrestricted n-bidder k-unit auctions. We then use the theorem 7.4 from Section 7 to obtain an online algorithm with vanishing 1 2 -REGRET that runs in time poly(n, T, log k).\nLet \u0393MU be a matrix with n columns, such that for any allocation q and any column j, \u0393MUq,j = qj/k. Clearly, for any q 6= q\u2032 we have \u0393MUq 6= \u0393MUq . So, \u0393MU is (k + 1, 1k )-admissible. Moreover, observe that\n5If k is not a multiple of n2, one can add extra items with marginal value of 0 to all bidders.\nthe matrix \u0393MU \u2032\nrestricted to the range of the 1/2 approximation algorithm of Dobzinski and Nisan [13] has much better admissibility constants. In particular, the number of different entries within each column is at most \u03ba\u2032 = n2 + 1, since each player receives allocations that are multiples of k/n2 and there are at most n2 + 1 such multiples. Moreover, the minimum non-zero difference of the column entries, between any two such bundled allocations, is at least \u03b4\u2032 \u2265 k\nn2 1 k = 1 n2\n. Therefore matrix \u0393MU \u2032 is ( n2 + 1, 1\nn2\n) -admissible.\nLet D be any distribution over [0, \u03b1max]. It is not hard to see that (\u0393MU, D) is also implementable. For any column j, consider the bid profile vj where bidder j\u2019s marginal valuation for any item is 1/k and all other bidders have 0 valuation for any number of items. That is, \u00b5j(s) = 1/k and \u00b5i(s) = 0 for all s and i 6= j. The welfare of any allocation on this bid profile is the utility of bidder j, which is the qj/k = \u0393MUq . Therefore, (\u0393MU, D) is implementable using the map Sj(\u03b1j) = {(\u03b1j ,vj)}. Therefore, also (\u0393MU \u2032 , D) is implementable. The next theorem is a direct consequence of the above discussion.\nTheorem 8.1. Consider the problem of welfare maximization in k-unit auctions. Let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b4\u2032/(2T\u03ba\u2032) = \u221a 1\n2Tn2(n2+1) . Then, for any sequence of valuation func-\ntions v1, . . . ,vT , the Generalized FTPL algorithm with matrix \u0393MU, distribution D and oracle the 1/2- aproximate MIR algorithm of [13], runs in per-round time poly(n, T ), plays the sequence of allocations q1, . . . ,qT , and has 1/2-REGRET\n1 2 -REGRET = 1 2\n( 1\nT max q\u2208Zn T\u2211 t=1 n\u2211 i=1 vti(qi)\n) \u2212E [ 1\nT T\u2211 t=1 n\u2211 i=1 vti(q t i)\n] \u2264 n\u00b72n \u221a 2T (n2 + 1)n2 \u2264 O(n4 \u221a T ).\nThe extra factor of n in the latter bound as compared to that implied by Theorem 7.4, is due to the fact that the maximum welfare in this problem is upper bounded by n and not 1. So we need to scale-down the valuations before applying the theorem by dividing by n and then scale up again to get the regret for the un-normalized problem."}, {"heading": "8.2 Oracle Efficient No-Regret Learning in Simultaneous Second Price Auctions", "text": "In this section, we answer an open problem raised by Daskalakis and Syrgkanis [11] regarding the existence of an oracle-based no-regret algorithm for optimal bidding in Simultaneous Second-Price Auctions. We show that our Oracle-Based Generalized FTPL algorithm used with an appropriate implementable and admissible translation matrix can be used to obtain such an algorithm.\nA Simultaneous Second-Price Auction (SiSPA) [3, 9, 14] is a mechanism for allocating k items to n bidders. Each bidder i \u2264 n submits k simultaneous bids denoted by a vector of bids bi. The mechanism allocates each item using a second-price auction based on the bids solely submitted for this item, while breaking ties in favor of bidders with larger indices. For each item j, the winner is charged \u03b8j , the second highest bid for that item. Each bidder i has a fixed combinatorial valuation function vi : {0, 1}k \u2192 [0, 1] over bundles of items. Then, the total utility of bidder i who is allocated the bundle qi \u2208 {0, 1}k is vi(qi)\u2212\u03b8 \u00b7qi, where \u03b8 is the vector of second largest bids across all items.\nWe consider the problem of optimal bidding in a SiSPA from the perspective of the first bidder. Hereafter, we drop the indices of the players from the notation. From this perspective, the utility of the bidder only depends on its bid b and the the threshold vector \u03b8 of the second largest bids. The online optimal bidding problem is defined as follows.\nDefinition 8.2 (Online Bidding in SiSPAs [35]). At each time step t, the player picks a bid vector bt and an adversary picks a threshold vector \u03b8t. The player wins the bundle of items q(bt,\u03b8t), with qj(bt,\u03b8t) = 1(btj>\u03b8tj) and gets the utility\nu(bt,\u03b8t) = v ( q(bt,\u03b8t) ) \u2212 \u03b8t \u00b7 q.\nWe consider this problem under the no-overbidding condition that requires that for any bundle q, the sum of bids over items in q does not exceed the bidder\u2019s valuation for q, i.e., bt \u00b7 q \u2264 v(q), for all q \u2208 {0, 1}k. Similar no-overbidding assumptions are used in the previous work to prove that no-regret learning in second-price auctions has good welfare guarantees [9, 14].\nWe consider the online bidding problem where for any q, the valuation v(q) is a multiple of 1/m and for any item j \u2264 k, bj is a multiple of 1/m. We represent by Bm the class of all such bid vectors that satisfy the no-overbidding condition for v(\u00b7). Note that the assumption on the valuation function is not restrictive. That is, for any valuation function v(\u00b7), one can round down its values to the closest multiple of 1/m, while losing at most 1/m utility. Moreover, a similar discretization for the bid vectors was used by Daskalakis and Syrgkanis [35] for studying offline and online optimal bidding in SiSPAs.\nNext, we show how to construct an implementable and admissible translation matrix for Bm. Let \u0393IB be a matrix with k columns and |Bm| rows that are equal to bid vectors, i.e., \u0393IBb = b. This immediately yields admissibility with \u03ba = m + 1 and \u03b4 = 1/m, because of the discretization of bids. Next, we show that for any D with a bounded non-negative support, (\u0393IB, D) is also implementable. At a high level, to implement the jth perturbation, we consider threshold vectors in which \u03b8j = `/m for ` = 0, 1, . . . ,m \u2212 1, and all other thresholds are set to the highest level. In such threshold vectors, the bidder can win at most one item, item j. Furthermore, whenever the bidder wins item j, its utility is independent of the bid vector, as it only depends on the valuation v(ej) and the entry \u03b8j of the threshold vector. So, there are weights such that the total contribution of weighted threshold vectors towards the utility of any winning bid is the same across all `. Since bid bj wins item j for all `/m < bj , then the total utility of playing bj against this weighted set of threshold vectors is proportional to bj = \u0393IBbj . This implies that (\u0393\nIB, D) is implementable. The next lemma formalizes this discussion.\nLemma 8.3. Let D be a distribution supported on a subset of [0, \u03b1max]. Then (\u0393IB, D) is implementable with complexity poly(\u03b1max,m, k), and \u0393IB is (m+ 1, 1/m)-admissible.\nProof. We argued the admissibility above, so it suffices to show implementability. The dataset Sj(\u03b1j) will contain threshold vectors where all but the jth thresholds are set to 1. Specifically, for ` = 0, 1, . . . ,m\u2212 1, let \u03b8` = (`/m)ej + \u2211 j\u2032 6=j ej\u2032 . Note that the utility of playing bid b against \u03b8` is u(b,\u03b8`) = ( v(ej) \u2212\n`/m ) 1(bj>`/m). We set the weight corresponding to \u03b8` to\nw` =\n{ \u03b1j m \u00b7 1 v(ej)\u2212`/m if `/m < v(ej)\n0 otherwise.\nSince bj \u2264 v(ej) for any b, we have\nm\u22121\u2211 `=0 w` u(b,\u03b8`) = m\u22121\u2211 `=0 \u03b1j m \u00b7 1 v(ej)\u2212 `/m \u00b7 ( v(ej)\u2212 `/m ) 1(bj>`/m)\n= m\u22121\u2211 `=0 \u03b1j m 1(bj>`/m) = mbj\u22121\u2211 `=0 \u03b1j m = \u03b1jbj = \u03b1j\u0393 IB bj .\nThus, indeed {(w`,v`)}` implements \u03b1j . This set can be clearly generated in time poly(k,m), its cardinality is m and its sum of weights is at most \u03b1maxm, since each weight w` is at most \u03b1max. Therefore, (\u0393IB, D) is implementable with complexity poly(k,m, \u03b1max).\nThe next theorem is a direct consequence of Lemma 8.3.\nTheorem 8.4. Consider the problem of Online Bidding in SiSPAs. Let D be the uniform distribution as described in Theorem 3.5. Then, the Oracle-Based Generalized FTPL algorithm with \u0393IB and D is oracleefficient with complexity poly(k,m, T ) and has regret\nE [ max b\u2208Bm T\u2211 t=1 u(b,\u03b8t)\u2212 T\u2211 t=1 u(bt,\u03b8t) ] \u2264 O(km \u221a T )."}, {"heading": "8.3 Universal Identification Sequences", "text": "There is an interesting connection between our definitions of admissibility and implementability and a statistical measure of complexity from learning theory, called the Universal Identification Sequences.\nDefinition 8.5 (Universal Identification Sequences [16]). Consider a domain Z and a class of functions F such that for all f \u2208 F , f : Z \u2192 {0, 1}. A sequence of unlabeled instances S = {z} is said to distinguish function f \u2208 F if f is the only function that is consistent with the labeling on S produced by f . A sequence of unlabeled instances S = {z} is called a universal identification sequence if it distinguishes every f \u2208 F .\nAny universal identification sequence ofF can be used to construct a translation matrix that is admissible and implementable. Consider a matrix \u0393F , whose rows are indexed by F and columns are indexed by S, such that \u0393Ffz = f(z) for any f \u2208 F and z \u2208 S. By the definition of universal identification sequence for any two functions, f, f \u2032 \u2208 F there is z \u2208 S, such that f(z) 6= f \u2032(z), i.e., \u0393Ff 6= \u0393Ff \u2032 . As a results \u0393F is (2, 1)-admissible. Moreover, the columns of \u0393F correspond to the value of functions applied to z \u2208 S. Therefore, (\u0393F , D) is implementable for any D over R+. That is, the length of a universal identification sequence is an upper bound on the number of columns needed to create a translation matrix that is admissible and implementable for a class of binary functions. Examples of function classes with polynomial-length universal identification sequences include logarithmic-depth read-once majority formulas and logarithmicdepth read-once positive NAND formulas [16]. The next corollary is a direct consequence of Theorems 3.5 and Theorems 3.11.\nCorollary 8.6. Consider a domain Z and a class of binary functions F with a universal identification sequence of length d. Then, there is an efficient oracle-based online algorithm with regret\nE [ max f\u2208F T\u2211 t=1 f(zt)\u2212 T\u2211 t=1 ft(zt) ] \u2264 O(d \u221a T ).\nOur Oracle-Based Generalized FTPL algorithm goes beyond the use of binary functions and universal identification sequences. In particular, we applied our results to obtain no-regret algorithms for several commonly studied classes of auctions (the revenue of which are real-valued functions). Furthermore, we introduced implementable translation matrices where each column corresponds to a complex weighted set of adversary\u2019s actions, rather than, columns that correspond to individual adversary\u2019s actions."}, {"heading": "Acknowledgments", "text": "We would like to thank Avrim Blum for helpful discussions and pointers regarding the universal identification sequences."}, {"heading": "A Proof of Lemma 3.1", "text": "We begin by stating a variant of the standard Be-the-Leader Lemma [27] that has been modified to include the perturbation specified by the matrix \u0393.\nLemma A.1 (Be-the-Leader Lemma). Under Generalized FTPL, for any x \u2208 X ,\nT\u2211 t=1 f(xt+1, yt) + \u03b1 \u00b7 \u0393x1 \u2265 T\u2211 t=1 f(x, yt) + \u03b1 \u00b7 \u0393x.\nProof. For T = 1 the inequality holds trivially. Assume that the claim holds for some T . Then, for all x\nT+1\u2211 t=1 f(xt+1, yt) + \u03b1 \u00b7 \u0393x1 = T\u2211 t=1 f(xt+1, yt) + f(xT+2, yT+1) + \u03b1 \u00b7 \u0393x1\n\u2265 T\u2211 t=1 f(xT+2, yt) + \u03b1 \u00b7 \u0393xT+2 + f(xT+2, yT+1) (by induction hypothesis)\n= T+1\u2211 t=1 f(xT+2, yt) + \u03b1 \u00b7 \u0393xT+2\n\u2265 T+1\u2211 t=1 f(x, yt) + \u03b1 \u00b7 \u0393x. (by optimality of xT+2)\nLet x\u2217 = arg maxx\u2208X \u2211T t=1 f(x, yt). Then by the lemma above,\nREGRET = E [ T\u2211 t=1 f(x\u2217, yt)\u2212 T\u2211 t=1 f(xt, yt) ]\n= E [ T\u2211 t=1 f(x\u2217, yt)\u2212 T\u2211 t=1 f(xt+1, yt) ] + E [ T\u2211 t=1 f(xt+1, yt)\u2212 T\u2211 t=1 f(xt, yt) ]\n\u2264 E [\u03b1 \u00b7 (\u0393x1 \u2212 \u0393x\u2217)] + E [ T\u2211 t=1 f(xt+1, yt)\u2212 T\u2211 t=1 f(xt, yt) ] ."}, {"heading": "B Proof of Theorem 3.11", "text": "To show that the Oracle-Based FTPL procedure (Algorithm 2) implements Generalized FTPL (Algorithm 1), it suffices to show that at each round t,\narg max x\u2208X [ t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u03b1 \u00b7 \u0393x ] = OPT(S) = arg max x\u2208X \u2211 (w,y)\u2208S wf(x, y). (20)\nConsider any x, x\u2032 \u2208 X . Then, from the definition of S and by implementability,\n\u2211 (w,y)\u2208S wf(x, y)\u2212 \u2211 (w,y)\u2208S wf(x\u2032, y) = t\u22121\u2211 \u03c4=1 [ f(x, y\u03c4 )\u2212 f(x\u2032, y\u03c4 ) ] + \u2211 j\u2264N \u2211 (w,y)\u2208Sj(\u03b1j) w [ f(x, y)\u2212 f(x\u2032, y) ]\nAlgorithm 4: Oracle-Based Generalized -FTPL with Integral Oracle Input: positive |X | \u00d7N , an implementable (\u0393, D), an oracle INTOPT, precision parameter Draw \u03b1j \u223c D for j = 1, . . . , N . for t = 1, . . . , T do\nSet S = {(1, y1), . . . , (1, yt\u22121)} \u222a \u22c3 j\u2264N Sj(\u03b1j).\nSet S\u2032 = {(\u230a w|S| / \u230b , y ) : (w, y) \u2208 S }\n. Set xt = INTOPT(S\u2032). Observe yt and receive payoff f(xt, yt).\nend for\n= t\u22121\u2211 \u03c4=1 [ f(x, y\u03c4 )\u2212 f(x\u2032, y\u03c4 ) ] + \u2211 j\u2264N \u03b1j(\u0393xj \u2212 \u0393x\u2032j)\n= ( t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u03b1 \u00b7 \u0393x ) \u2212 ( t\u22121\u2211 \u03c4=1 f(x\u2032, y\u03c4 ) + \u03b1 \u00b7 \u0393x\u2032 ) ,\nwhich immediately yields Equation (20). Also, by implementability, the running time to construct the set S is at most T + g(N,T ), and its mass is at most T + g(N,T ). Since there is only one oracle call per round, we get the per-round complexity of T + g(N,T ).\nC Integral Oracles We now study how online learning can be reduced to a more restrictive class of offline optimization oracles, which only allow the weights that are positive integers:\nDefinition C.1 (Integral Offline Oracle). An integral offline oracle INTOPT receives as input a set of adversary actions with non-negative integer weights S = {(w`, y`)}`\u2208L, w` \u2208 N, y` \u2208 Y , and returns\nINTOPT(S) \u2208 arg max x\u2208X \u2211 (w,y)\u2208S wf(x, y).\nIntegral oracles can be implemented by algorithms that optimize over unweighted data sets, by replicating each example according to its weight. A natural input size for such algorithms is the size of the data set (including the replicates). This exactly coincides with the mass of S defined in the previous section.\nWe will show that online learning can be efficiently reduced to offline optimization with INTOPT oracles under the same conditions as studied in the previous section. Thus, while the rest of paper assumes realweighted oracles, the results are also valid when we only have access to an integral oracle.\nAt the crux of our approach is a construction of an approximate real-weighted oracle from an integral oracle. It turns out that such an approximate oracle, with a suitably chosen precision parameter , is all that is required for no-regret learning with the Generalized FTPL algorithm.\nLemma C.2 (Integral Offline Oracle to Approximate Offline Oracle). Given an integral offline oracle INTOPT and any precision parameter > 0, one can construct an approximate offline oracle OPT\u2032 which receives as input a weighted set of adversary actions S = {(w`, y`)}`\u2208L, w` \u2208 R+, and returns OPT\u2032(S) \u2208 X such that \u2200x \u2208 X , \u2211\n(w,y)\u2208S\nwf(OPT\u2032(S), y) \u2265 \u2211\n(w,y)\u2208S\nwf(x, y)\u2212 .\nThis approximate oracle is implemented by a single oracle call to INTOPT(S\u2032) on the dataset\nS\u2032 = {(\u230a w|S| / \u230b , y ) : (w, y) \u2208 S } .\nThis lemma is proved in Appendix C.1. The construction of the set S\u2032 gives rise to a variant of the Generalized FTPL algorithm, presented in Algorithm 4. This algorithm can be analyzed similarly as the Generalized FTPL to prove the regret bound essentially identical to the bound of Theorem 3.5. The algorithm is also oracle-efficient under implementability. Both results are summarized in the following theorem:\nTheorem C.3. Let \u0393 be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxx,j \u0393xj and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). If = 1\u221a\nT , then the regret of Algorithm 4 can be\nbounded as REGRET \u2264 O(N \u221a 2T\u03ba\u03b3/\u03b4).\nFurthermore, if (\u0393, D) is implementable with complexity g(N,T ) then Algorithm 4 is oracle-efficient with respect to INTOPT, with per-round complexity poly(T, g(N,T ), 1/ ).\nFor the proof of regret bound, see Appendix C.2. The oracle efficiency result follows from Theorem 3.11, using the fact that within the reduction from real-weighted to integral oracle, the mass of the dataset S\u2032 is bounded as \u2016S\u2032\u2016 \u2264 \u2016S\u20162/ .\nC.1 Proof of Lemma C.2 Proof of Lemma C.2. Let \u03b4 = /|S|. Thus, elements (w, y) \u2208 S are transformed into (bw/\u03b4c, y) \u2208 S\u2032. To show the approximate optimality, we use the fact that 0 \u2264 a \u2212 bac \u2264 1 for any a \u2265 0, so we have 0 \u2264 w \u2212 \u03b4bw/\u03b4c \u2264 \u03b4 and thus for any x \u2208 X ,\u2211\n(w,y)\u2208S\nwf(OPT\u2032(S), y) \u2265 \u03b4 \u2211\n(w,y)\u2208S\nbw/\u03b4cf(OPT\u2032(S), y)\n= \u03b4 \u2211\n(w\u2032,y)\u2208S\u2032 w\u2032f(INTOPT(S\u2032), y) (by construction)\n\u2265 \u03b4 \u2211\n(w\u2032,y)\u2208S\u2032 w\u2032f(x, y) (by the property of INTOPT)\n\u2265 \u2211\n(w,y)\u2208S\nwf(x, y)\u2212 \u2211\n(w,y)\u2208S\n\u03b4\n= \u2211\n(w,y)\u2208S\nwf(x, y)\u2212 .\nC.2 Approximate Oracles Approximate oracles, with a precision error , give rise to the Generalized -FTPL algorithm shown in Algorithm 5. The analysis of Section 3.1 can be generalized to obtain the following result:\nTheorem C.4. Let \u0393 be a (\u03ba, \u03b4)-admissible matrix with N columns and \u03b3 = maxx,j \u0393xj and let D be the uniform distribution on [0, 1/\u03b7] for \u03b7 = \u221a \u03b3\u03b4/(2T\u03ba). If = 1\u221a\nT , then the regret of the Generalized -FTPL\nalgorithm can be bounded as REGRET \u2264 O(N \u221a 2T\u03ba\u03b3/\u03b4).\nThe proof of this theorem is a direct application of the generalized version of Lemma 3.1 and 3.4. Details are given in the following subsections.\nAlgorithm 5: Generalized -FTPL\nInput: non-negative matrix \u0393 \u2208 R|X |\u00d7N+ , distribution D Draw \u03b1j \u223c D for j = 1, . . . , N for t = 1, . . . , T do\nChoose xt such that for all x \u2208 X ,\nt\u22121\u2211 \u03c4=1 f(xt, y\u03c4 ) + \u03b1 \u00b7 \u0393xt \u2265 t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u03b1 \u00b7 \u0393x \u2212\nObserve yt and receive payoff f(xt, yt) end for\nC.3 Approximate Generalized FTPL Lemma Lemma C.5 ( -FTPL Lemma). For the Generalized -FTPL algorithm,\nREGRET \u2264 E [ T\u2211 t=1 f(xt+1, yt)\u2212 f(xt, yt) ] + E [\u03b1 \u00b7 (\u0393x1 \u2212 \u0393x\u2217)] + T (21)\nwhere x\u2217 = arg maxx\u2208X \u2211T t=1 f(x, yt).\nWe first prove an approximate variant of Be-the-Leader Lemma.\nLemma C.6 (Be-the-Approximate-Leader Lemma). Under Generalized -FTPL, for any x \u2208 X , T\u2211 t=1 f(xt+1, yt) + \u03b1 \u00b7 \u0393x1 \u2265 T\u2211 t=1 f(x, yt) + \u03b1 \u00b7 \u0393x \u2212 T.\nProof. For T = 1 the inequality holds trivially, by the definition of approximate leader. Assume that the claim holds for some T . Then, for all x\nT+1\u2211 t=1 f(xt+1, yt) + \u03b1 \u00b7 \u0393x1 = T\u2211 t=1 f(xt+1, yt) + \u03b1 \u00b7 \u0393x1 + f(xT+2, yT+1)\n\u2265 T\u2211 t=1 f(xT+2, yt) + \u03b1 \u00b7 \u0393xT+2 \u2212 T + f(xT+2, yT+1)\n(by induction hypothesis)\n= T+1\u2211 t=1 f(xT+2, yt) + \u03b1 \u00b7 \u0393xT+2 \u2212 T\n\u2265 T+1\u2211 t=1 f(x, yt) + \u03b1 \u00b7 \u0393x \u2212 (T + 1), (by approximate optimality of xT+2)\nproving the lemma. Proof of Lemma C.5. Let x\u2217 = arg maxx\u2208X \u2211T t=1 f(x, yt). Then by Be-the-Approximate-Leader Lemma,\nREGRET = E [ T\u2211 t=1 f(x\u2217, yt)\u2212 T\u2211 t=1 f(xt, yt) ]\n= E [ T\u2211 t=1 f(x\u2217, yt)\u2212 T\u2211 t=1 f(xt+1, yt) ] + E [ T\u2211 t=1 f(xt+1, yt)\u2212 T\u2211 t=1 f(xt, yt) ]\n\u2264 E [\u03b1 \u00b7 (\u0393x1 \u2212 \u0393x\u2217)] + E [ T\u2211 t=1 f(xt+1, yt)\u2212 T\u2211 t=1 f(xt, yt) ] + T.\nC.4 The Stability Lemma For Approximate Generalized FTPL Lemma C.7. Consider the Generalized -FTPL algorithm with a (\u03ba, \u03b4)-admissible matrix \u0393 withN columns and a ( \u03c1, 1+2 \u03b4 ) -dispersed distribution D. Then,\nE [ T\u2211 t=1 f(xt+1, yt)\u2212 f(xt, yt) ] \u2264 2TN\u03ba\u03c1.\nProof. Fix any t \u2264 T . The bulk of the proof will establish that, with high probability, \u0393xt+1 = \u0393xt , which by admissibility implies that xt+1 = xt and therefore f(xt+1, yt)\u2212 f(xt, yt) = 0.\nFix any j \u2264 N . We first show that \u0393xt+1j = \u0393xtj with high probability. Let V denote the set of values that appear in the jth column of \u0393. For any value v \u2208 V , let xv be the action that maximizes the perturbed profit among those whose \u0393 entry in the jth column equals v:\nxv := arg max x\u2208X : \u0393xj=v [ t\u22121\u2211 \u03c4=1 f(x, y\u03c4 ) + \u03b1 \u00b7 \u0393x \u2212 \u03b1jv ] .\nFor any v, v\u2032 \u2208 V , define\n\u2206vv\u2032 = ( t\u22121\u2211 \u03c4=1 f(xv, y\u03c4 ) + \u03b1 \u00b7 \u0393xv \u2212 \u03b1jv ) \u2212 ( t\u22121\u2211 \u03c4=1 f(xv \u2032 , y\u03c4 ) + \u03b1 \u00b7 \u0393xv\u2032 \u2212 \u03b1jv \u2032 ) .\nNote that xv and \u2206vv\u2032 are independent of \u03b1j , as we removed the payoff perturbation corresponding to \u03b1j . If \u0393xtj = v, then by the -optimality of xt on the perturbed profit, we have \u03b1j(v\n\u2032 \u2212 v) \u2212 \u2264 \u2206vv\u2032 for all v\u2032 \u2208 V . Suppose \u0393xt+1j 6= v. Then there is some v\u2032 \u2208 V which yields a better perturbed profit, up to , in the next round, i.e.,\nt\u22121\u2211 \u03c4=1 f(xv \u2032 , y\u03c4 ) + f(x v\u2032 , yt) + \u03b1 \u00b7 \u0393xv\u2032 \u2265 t\u22121\u2211 \u03c4=1 f(xv, y\u03c4 ) + f(x v, yt) + \u03b1 \u00b7 \u0393xv \u2212 .\nRearranging, we obtain for this same v\u2032 that\n\u2206vv\u2032 \u2264 \u03b1j(v\u2032 \u2212 v) + f(xv \u2032 , yt)\u2212 f(xv, yt) + \u2264 \u03b1j(v\u2032 \u2212 v) + 1 + .\nIf v\u2032 > v, then\n\u03b1j \u2265 \u2206vv\u2032 \u2212 1\u2212\nv\u2032 \u2212 v \u2265 min v\u0302\u2208V, v\u0302>v \u2206vv\u0302 \u2212 1\u2212 v\u0302 \u2212 v\nand so \u03b1j(v \u2212 v) + 1 + \u2265 \u2206vv where v is the value of v\u0302 minimizing the expression on the right. Thus, in this case we have \u2212 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1 + . Similarly, if v\u2032 < v, then\n\u03b1j \u2264 \u2206vv\u2032 \u2212 1\u2212\nv\u2032 \u2212 v \u2264 max v\u0302\u2208V, v\u0302<v \u2206vv\u0302 \u2212 1\u2212 v\u0302 \u2212 v\nand so \u03b1j(v \u2212 v) + 1 + \u2265 \u2206vv where v is the value maximizing the expression on the right. In this case we have \u2212 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1 + . Putting this all together, we have\nPr [ \u0393xt+1j 6= \u0393xtj \u2223\u2223 \u03b1k, k 6= j] \u2264 Pr [ \u2203v \u2208 V : \u2212 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1 + or \u2212 \u2264 \u2206vv \u2212 \u03b1j(v \u2212 v) \u2264 1 +\n\u2223\u2223\u2223 \u03b1k, k 6= j] \u2264 \u2211 v\u2208V ( Pr [ \u03b1j \u2208 [ \u2206vv\u22121\u2212 v\u2212v , \u2206vv+ v\u2212v\n] \u2223\u2223\u2223\u2223 \u03b1k, k 6= j]+ Pr[\u03b1j \u2208 [\u2212\u2206vv\u2212 v\u2212v , \u2212\u2206vv+1+ v\u2212v ] \u2223\u2223\u2223\u2223 \u03b1k, k 6= j]) \u2264 2\u03ba\u03c1.\nThe last line follows from the fact that v \u2212 v \u2265 \u03b4 and v \u2212 v \u2265 \u03b4, the fact that D is ( \u03c1, 1+2 \u03b4 ) -dispersed, and a union bound. Since this bound does not depend on the values of the \u03b1j , we can remove the conditioning and bound Pr[\u0393xt+1j 6= \u0393xtj ] \u2264 2\u03ba\u03c1. Taking a union bound over all j \u2264 N , we then have that, by admissibility, Pr [xt+1 6= xt] = Pr [ \u0393xt+1 6= \u0393xt ] \u2264 2N\u03ba\u03c1, which implies the result."}, {"heading": "D Omitted Proofs From Applications to Online Auction Design", "text": "D.1 Proof of Equation (6) Consider any vector of reserves r \u2208 I and let r\u2032 \u2208 Im be the vector obtained by rounding each reserve price down to the nearest multiple of 1/m. If vi > ri, then vi > r\u2032i, so any bidder who would have been included in the basic VCG auction using reserves r is still included with r\u2032. This can only increase the number of bidders who are serviced and therefore pay a charge.\nNow consider the amount that serviced bidder i is charged. This is the maximum of ri and the highest bid of a bidder in the basic VCG auction who was not serviced (or 0 if all bidders were serviced); let b denote this highest unserviced bids in the basic VCG auction under r, and similarly let b\u2032 denote such a bit under r\u2032. Since the set of bidders entering the basic VCG auction increases from r to r\u2032, we must have b\u2032 \u2265 b.\nLet U be the set of bidders serviced under r, and U \u2032 the set under r\u2032. The difference in revenue is\u2211 i\u2208U max{ri, b} \u2212 \u2211 i\u2208U \u2032 max{r\u2032i, b\u2032}\n= \u2211\ni\u2208U\u2229U \u2032 (max{ri, b} \u2212max{r\u2032i, b\u2032}) + \u2211 i\u2208U\\U \u2032 max{ri, b} \u2212 \u2211 i\u2032\u2208U \u2032\\U max{r\u2032i\u2032 , b\u2032}. (22)\nWe begin by analyzing the last two terms. For any i \u2208 U \\ U \u2032 and i\u2032 \u2208 U \u2032 \\ U ,\nr\u2032i\u2032 + 1/m > ri\u2032 > vi\u2032 \u2265 vi > ri,\nwhere vi\u2032 \u2265 vi follows, because i enters the basic VCG auction for r\u2032, but is not allocated the item. Therefore,\nmax{r\u2032i\u2032 , b\u2032} \u2265 max { ri \u2212 1/m, b } \u2265 max{ri, b} \u2212 1/m.\nSince |U \\ U \u2032| \u2264 |U \u2032 \\ U |, we can pick V \u2286 U \u2032 \\ U such that |V | = |U \\ U \u2032| and obtain\u2211 i\u2208U\\U \u2032 max{ri, b} \u2212 \u2211 i\u2032\u2208U \u2032\\U max{r\u2032i\u2032 , b\u2032} \u2264 \u2211 i\u2208U\\U \u2032 max{ri, b} \u2212 \u2211 i\u2032\u2208V max{r\u2032i\u2032 , b\u2032} \u2264 |U \\ U \u2032| m .\nNote that each term in the first sum of Equation (22) is at most 1/m, because max{r\u2032i, b\u2032} \u2265 max { ri \u2212 1/m, b } \u2265 max{ri, b} \u2212 1/m.\nThus, we have\nRev(r,v)\u2212 Rev(r\u2032,v) \u2264 |U \u2229 U \u2032| m + |U \\ U \u2032| m \u2264 s m .\nThis yields the approximation result\nmax r\u2208I T\u2211 t=1 Rev(r,vt)\u2212 max r\u2208Im T\u2211 t=1 Rev(r,vt) \u2264 Ts m . (23)\nD.2 Omitted Part of the Proof of Lemma 4.2 We need to show that the sum of weights in any set Sj(\u03b1j) is bounded by poly(n,m,\u03b1max). Recall that\nwm = max {\n0, max k\n[ \u03b1jm ( k\u03b2 \u2212 (k \u2212 1)\u03b2 )]} ,\nand for all k = m,m\u2212 1, . . . , 2,\nwk\u22121 = 1\nk \u2212 1 ( m\u2211 h=k wh \u2212 \u03b1jm ( k\u03b2 \u2212 (k \u2212 1)\u03b2 )) .\nBy definition, wm \u2264 m\u03b1max. We can also bound wk\u22121 as\nwk\u22121 \u2264 1\nk \u2212 1 ( m\u2211 h=k wh +m\u03b1max ) \u2264 1 k \u2212 1 ( m\u22121\u2211 h=k wh + 2m\u03b1max ) ,\nso\n(k \u2212 1)wk\u22121 \u2264 m\u22121\u2211 h=k wh + 2m\u03b1max.\nSumming over k = 2, . . . ,m, yields\nm\u2211 k=2 (k \u2212 1)wk\u22121 \u2264 m\u22121\u2211 h=2 (h\u2212 1)wh + 2(m\u2212 1)m\u03b1max,\nand subtracting the sum on the right-hand side yields\nm\u2211 k=2 wk\u22121 \u2264 2(m\u2212 1)m\u03b1max,\nso \u2211m\nk=1wk \u2264 (2m2 \u2212 2m+m)\u03b1max. D.3 Proof of Lemma 4.6 We will argue that the setting here is isomorphic to the setting in the proof of Lemma 4.2, so we can directly apply the result of analysis of \u0393VCG. The isomorphism from the VCG setting to IP setting maps bidders i in VCG to items ` in IP, and reserve price vectors r to price vectors a. We therefore assume that n in VCG equals k in IP, and the values of m in both settings are equal. Then, indeed \u0393VCG equals \u0393IP.\nNext we need to show how to construct Sj(\u03b1j) in the IP setting. Assume that j corresponds to the bidder i and the bit \u03b2 in VCG setting, and the item ` and the bit \u03b2 in IP setting. In VCG, we considered the bid profiles vh = (h/m)ei, and the revenue of any auction r is\nRevVCG(r,vh) = ri1(h\u2265mri).\nIn IP setting, we consider profiles v\u2032h of combinatorial valuations over bundles q \u2208 {0, 1}k, in which all bidders have values zero on all bundles and one bidder has value h/m for bundle e` and zero on all other bundles.6 In this case, we have\nRevIP(a,v\u2032h) = ai1(h\u2265mai).\nThus, both the translation matrices \u0393VCG and \u0393IP as well as the revenue functions RevVCG and RevIP are isomorphic (given these choices of the profiles). Therefore, we can set the weights w\u2032h in IP setting equal to the weights wh in VCG setting and obtain admissibility and implementability with the same constants and complexity.\nD.4 Proof of Lemma 4.12 Since \u0393IP\u03b8,v = Rev(\u03b8,v), for any \u03b1 \u2265 0, Sv(\u03b1) = {(\u03b1v,v)}. Furthermore, the mass of dataset Sv(\u03b1) is poly(n,m,\u03b1max). So, (\u0393, D) is implementable with complexity poly(n,m,\u03b1max).\nTake any two different auctions \u03b8 and \u03b8\u2032. We show that \u0393IP\u03b8 6= \u0393IP\u03b8\u2032 . Let b be the smallest level at which there is i \u2208 [n] such that \u03b8ib 6= \u03b8\u2032ib and among such i choose the largest. There are three cases:\n1. i 6= n: Consider the bid profile vi,` for ` = m\u03b8nb . By the choice of i and the fact that i 6= n, we have that b\u03b8n(v i,` n ) = b\u03b8 \u2032 n (v i,` n ) = b. On the other hand, b\u03b8i (v i,` i ) = s \u2212 1 \u2265 b. Therefore, bidder i wins the\nitem in both auctions and pays the bth threshold. So, Rev(\u03b8,vi,`) = \u03b8ib 6= \u03b8\u2032ib = Rev(\u03b8 \u2032,vi,`).\n2. i = n and b \u2265 1: WLOG, assume that \u03b8nb < \u03b8\u2032nb . Let ` = m\u03b8nb and consider v1,`. Then b\u03b8n(v 1,` n ) = b\nand b\u03b8 \u2032 n (v 1,` n ) = b\u2032 for some b\u2032 < b. So, bidder 1 wins the item in both auctions and pays the threshold that corresponds to the nth bidder\u2019s level. Therefore, Rev(\u03b8,v1,`) = \u03b81b 6= \u03b81b\u2032 = Rev(\u03b8 \u2032,v1,`). 3. i = n and b = 0: Consider bid profile en. In this profile, bidder n wins and pays the absolute reserve price. Therefore, Rev(\u03b8, en) = \u03b8n0 6= \u03b8\u2032n0 = Rev(\u03b8\u2032, en).\nTherefore, \u0393IP\u03b8 6= \u0393IP\u03b8\u2032 . Since any element of \u0393 IP is a multiple of 1/m then \u0393IP is (m+ 1, 1m)-admissible. D.5 Proof of Lemma 4.14 We say that two auction \u03b8 and \u03b8\u2032 are equivalent if for all v, Rev(\u03b8,v) = Rev(\u03b8\u2032,v). In what follows, for any \u03b8 \u2208 Rs,m we construct \u03b8\u2032 \u2208 Rs,m, such that \u03b8 and \u03b8\u2032 are equivalent.\nWhen \u03b8 \u2208 Ss,m, then \u03b8 has no empty buckets. That is, for all i and b, \u03b8ib \u2208 Bib(\u03b8). So, the claim holds trivially for \u03b8\u2032 = \u03b8.\nLet \u03b8 be an auction such that for some i and b, Bib(\u03b8) 6= \u2205 but all of its competing buckets are empty. Consider auction \u03b8\u2032 with thresholds \u03b8\u2032ib = \u03b8 i b+1 and \u03b8 \u2032i\u2032 b\u2032 = \u03b8 i\u2032 b\u2032 for all i\n\u2032 6= i or b\u2032 6= b. We show that \u03b8 and \u03b8\u2032 are equivalent. Consider any bid profile v. There are two cases: 1) vi 6\u2208 Bib(\u03b8); 2) vi \u2208 Bib(\u03b8).\nCase 1: If vi 6\u2208 Bib(\u03b8), then it is easy to see that b\u03b8i (vi) = b\u03b8 \u2032 i (vi) so the winner remains the same. As a result the payment would remain the same if i is not the winner. When i is the winner, since all of the competing buckets ofBib(\u03b8) are empty, the payment of bidder i is not at level b, so the payment of bidder i also remains the same. Therefore, Rev(\u03b8,v) = Rev(\u03b8\u2032,v).\nCase 2: If vi \u2208 Bib, then b\u03b8 \u2032 i (vi) = b \u03b8 i (vi) \u2212 1. Let i\u2032 be any bidder that appears after bidder i in the sorted list of the bid level. Since all competing buckets ofBib are empty, it must be that either i < i \u2032 and b\u03b8i\u2032(vi\u2032) < b or i > i\u2032 and b\u03b8i (vi\u2032) < b\u2212 1. In either case, position of i in the sorted list remains the same in \u03b8 \u2032. Consider the following three cases: 1. Bidder i is the winner: Let i\u2032 be the runner up bidder. As described above, i is still the first in the\ndecreasing order of bid levels. So, i wins the item in \u03b8\u2032. Moreover, because the competing buckets of 6 Note that a simple variation of this bid profile can be used in settings where the valuations need to satisfy additional assumptions, such as (sub-)additivity or free disposal. In such cases, we can use a similar bid profile where one bidder has valuation h/m for any bundle that includes item ` and all other valuations are 0.\nBib(\u03b8) are empty, the payment of bidder i in \u03b8 is at a threshold with level below \u2264 b\u2212 1, which is the same in both auctions. Therefore, Rev(\u03b8,v) = Rev(\u03b8\u2032,v). 2. i\u2032 6= iwins the item and i is the runner up: As described above, i is still the runner up in the decreasing order of bid levels in \u03b8\u2032. There are two cases:\n(a) If i\u2032 < i, then Rev(\u03b8,v) = \u03b8i \u2032 b . Note that B i\u2032 b\u22121 = \u2205, so, \u03b8i \u2032 b\u22121 = \u03b8 i\u2032 b . So, Rev(\u03b8,v) = \u03b8 i\u2032 b =\n\u03b8i \u2032 b\u22121 = Rev(\u03b8 \u2032,v). (b) If i\u2032 > i, then Rev(\u03b8,v) = \u03b8i\n\u2032 b+1. Note that B i\u2032 b = \u2205, so, \u03b8i \u2032 b = \u03b8 i\u2032 b+1. So, Rev(\u03b8,v) = \u03b8 i\u2032 b+1 =\n\u03b8i \u2032 b = Rev(\u03b8 \u2032,v). So, the revenue remains the same.\n3. If i is not the winner or the runner up: As described above i is not the winner or the runner up in \u03b8\u2032, either. So, the winner and the revenue are not affected.\nTherefore, Rev(\u03b8,v) = Rev(\u03b8\u2032,v) for all v. Furthermore, the thresholds in \u03b8\u2032 are all equal or larger than the corresponding thresholds in \u03b8, with one threshold being strictly larger. So repeating the above process for other buckets that violate the claim of the lemma will eventually halt. This proves the lemma.\nD.6 Proof of Lemma 4.15 In the interest of readability, we drop the superscript and write \u0393 for \u0393RL in this proof.\nSince \u0393\u03b8,v = Rev(\u03b8,v), it is immediately clear that (\u0393, D) can be implemented by dataset Sv(\u03b1v) = {(\u03b1v,v)}. Furthermore, the mass of Sv(\u03b1v) is poly(n,m,\u03b1max). So, (\u0393, D) is implementable with complexity poly(n,m,\u03b1max).\nNext, we show that for any two \u03b8 and \u03b8\u2032, \u0393\u03b8 6= \u0393\u03b8\u2032 . Let b be the smallest integer for which there exists i \u2208 [n], such that \u03b8ib 6= \u03b8\u2032ib . Choose i as the largest bidder for which \u03b8ib 6= \u03b8\u2032ib . If b = 0: Then Rev(\u03b8, ei) = \u03b8 i 0 6= \u03b8\u2032i0 = Rev(\u03b8\u2032, ei). So, \u0393\u03b8 6= \u0393\u03b8\u2032 .\nIf b > 0, then the (b\u2212 1)th bucket is non-empty in one of the auctions \u2014 WLOG, let that be auction \u03b8. This implies that \u03b8ib > \u03b8 \u2032i b . By the structure ofRs,m, there is a non-empty competing bucket.\nIf the non-empty competing bucket is Bi \u2032 b\u22121(\u03b8) for i \u2032 > i, then consider the bid profile vi \u2032,i,` for ` = m\u03b8\u2032ib . Since B i\u2032 b\u22121(\u03b8) 6= \u2205 and i was the largest bidder for which the thresholds differ, we have that Bi \u2032 b\u22121(\u03b8 \u2032) 6= \u2205 and \u03b8ib = \u03b8\u2032ib 6= \u03b8ib\u22121 = \u03b8ib\u22121. Furthermore, b\u03b8i (v i\u2032,i,` i ) < b and b \u03b8\u2032 i (v i\u2032,i,` i ) \u2265 b. So, i\u2032 wins the item and pays the level of bidder < b in \u03b8 and \u2265 b in \u03b8\u2032, which are different. So, Rev(\u03b8,vi\u2032,i,`) 6= Rev(\u03b8\u2032,vi\n\u2032,i,`). The case where the non-empty competing bucket is Bi \u2032 b\u22122(\u03b8) for i \u2032 < i is similar. Therefore, \u0393\u03b8 6= \u0393\u03b8\u2032 . Since any element of \u0393 is a multiple of 1/m, then \u0393 is (m+ 1, 1m)-admissible."}, {"heading": "E Proof of Equation 15", "text": "We use ideas similar to the ones discussed by Morgenstern and Roughgarden [28] and Devanur et al. [12] to show that Rs,m, the class of s-level auctions on a discrete grid, approximates the revenue of Myerson auction within an additive value of O( ) for appropriate parameters m = O(1/ ) and s = O(1/ ).\nLet m = 1/(2 ) and s = 1/ . First, let F \u2032 be a product distribution obtained by rounding down each v \u223c F to the closest odd multiple of . We show that OPT(F \u2032) \u2265 OPT(F ) \u2212 2 . Let M be the optimal Myerson auction for F and let M \u2032 be the following mechanism for allocating items to v\u2032 \u223c F \u2032: Take v such that 1 \u2212 Fi(vi) = 1 \u2212 F \u2032i (v\u2032i) for all i \u2208 [n] and allocate the item according to the outcome of mechanism M on v. Charge the winner the minimum value above which it would remain a winner.\nTo analyze the revenue of M \u2032, consider any vector of quantiles q \u2208 [0, 1]n and let v and v\u2032 be the values in F and F \u2032 corresponding to these quantiles, i.e., 1 \u2212 Fi(vi) = 1 \u2212 F \u2032i (v\u2032i) = qi for all i \u2208 [n]. Note that, allocation of M on v is the same as the allocation of M \u2032 on v\u2032. Moreover, the quantiles of the payments are the same in both mechanisms. So, for any such quantile the payment in F and F \u2032 differ by at most 2 . This prove that OPT(F \u2032) \u2265 OPT(F )\u2212 2 .\nNext, we show that there is \u03b8 \u2208 R1/ ,\u221e such that Ev\u223cF \u2032 [Rev(\u03b8,v)] \u2265 OPT(F \u2032)\u2212 . For each i, let \u03c6\u2032i(\u00b7) be the ironed virtual valuation function for bidder i with respect to F \u2032i . These \u03c6 \u2032 i are monotone functions and can be made into strictly increasing functions by removing an arbitrary small fraction of the distribution and losing an arbitrarily small fraction of the revenue. Let \u03b8 be such that \u03b8ib = \u03c6\n\u22121(b ) for b \u2208 {0, 1, . . . , s\u22121}. Next, we show that for any v, Rev(\u03b8,v) \u2265 OPT(F \u2032)\u2212 .\nConsider v \u223c F \u2032 and let i\u2217 and i\u2032 be the winners in \u03b8 and the Myerson optimal auctions respectively. Since in s-threshold and Myerson optimal auctions the allocations only depend on the ironed virtual values and not the values themselves, we have that7\nEv\u223cF \u2032 [Rev(\u03b8,v)] = Ev\u223cF \u2032 [\u03c6i\u2217(vi\u2217)] and OPT(F \u2032) = Ev\u223cF \u2032 [\u03c6i\u2032(vi\u2032)].\nNow, consider the winners i\u2217 and i\u2032. Note that if i\u2217 was the unique bidder at the highest bucket under \u03b8 (there were no ties to be broken lexicographically), then i\u2217 also has the highest virtual valuation, so i\u2217 = i\u2032. On the other hand, if i\u2032 was tied with i\u2217, then \u03c6i\u2032(vi\u2032)\u2212 \u03c6i\u2217(vi\u2217) \u2264 . So, overall we have\nEv\u223cF \u2032 [Rev(\u03b8,v)] = Ev\u223cF \u2032 [\u03c6i\u2217(vi\u2217)] \u2265 Ev\u223cF \u2032 [\u03c6i\u2032(vi\u2032)]\u2212 = OPT(F \u2032)\u2212 .\nNow we show how to round the thresholds of \u03b8 \u2208 R1/ ,\u221e to \u03b8\u2032 \u2208 R1/ ,1/ , without losing a large fraction of the revenue. For any \u03b8, and for any \u03b8i \u2208 [(2j \u2212 1) , (2j + 1) ), let \u03b8\u2032i = 2j . By construction F \u2032 is only supported on odd multiples of . So, the allocation remains the same for any v \u2208 supp(F \u2032) under \u03b8 and \u03b8\u2032. And the payment reduces by at most . So,\nEv\u223cF \u2032 [Rev(\u03b8\u2032,v)] \u2265 Ev\u223cF \u2032 [Rev(\u03b8,v)].\nMoreover, since each bid profiles in F maps to bid profile with smaller bids in F \u2032, we\nEv\u223cF [Rev(\u03b8\u2032,v)] \u2265 Ev\u223cF \u2032 [Rev(\u03b8\u2032,v)] \u2265 Ev\u223cF \u2032 [Rev(\u03b8,v)]\u2212 \u2265 OPT(F \u2032)\u2212 2 \u2265 OPT(F )\u2212 4 .\nThis proves the claim."}, {"heading": "F Proof of Theorem 6.8", "text": "Using Lemma 6.7, we have\nE [ T\u2211 t=1 f(xt, yt)\u2212 f(xt+1, yt) ] \u2264 2TN\u03ba \u00b7max s\u2208R Pr [ Z \u2208 [s, s+ 1\u03b4 ] ] \u2264 2TN\u03ba 1 2\u03b4\u03bd\nwhere Z \u223c U [\u2212\u03bd, \u03bd]. It remains to bound the term E [\u2211 \u03c3\u2208S \u2211N j=1 \u03b1\u03c3,j(\u0393 S x\u2217,(\u03c3,j) \u2212 \u0393 S x1,(\u03c3,j) ) ] , which is at most\n2E max x \u2211 \u03c3\u2208S N\u2211 j=1 \u03b1\u03c3,j\u0393x,(\u03c3,j)  . Let \u03b2x = \u2211 \u03c3\u2208S \u2211N j=1 \u03b1\u03c3,j\u0393x,(\u03c3,j). We therefore have for any \u03bb > 0,\nE [ max x \u03b2x ] = 1\u03bb ln ( exp ( \u03bbE [ max x \u03b2x ])) \u2264 1\u03bb ln ( E [ exp ( \u03bbmax\nx \u03b2x\n)]) (Jensen\u2019s inequality)\n\u2264 1\u03bb ln (\u2211 x E [exp (\u03bb\u03b2x)] ) 7See further discussion on this by Hartline [19] and Morgenstern and Roughgarden [28].\n\u2264 1\u03bb ln \u2211 x \u220f \u03c3,j E [ exp ( \u03bb\u03b1\u03c3,j\u0393x,(\u03c3,j) )] \u2264 1\u03bb ln \u2211 x \u220f \u03c3,j exp ( \u03bd2\u03b32\u03bb2 2\n) (Hoeffding\u2019s lemma for bounded r.v.) =\nln |X | \u03bb + \u03bd2\u03b32N |S|\u03bb 2\n= \u221a 2N |S| ln |X |\u03bd\u03b3. (by picking the optimal \u03bb)\nCombining the stability and the error bound above and invoking Lemma 3.1, completes the proof."}], "references": [{"title": "Online linear optimization and adaptive routing", "author": ["B. Awerbuch", "R. Kleinberg"], "venue": "J. Comput. Syst. Sci.,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Approximation algorithms and online mechanisms for item pricing", "author": ["Balcan", "M.-F", "A. Blum"], "venue": "In Proceedings of the 7th ACM Conference on Economics and Computation (EC),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2006}, {"title": "Welfare guarantees for combinatorial auctions with item bidding", "author": ["K. Bhawalkar", "T. Roughgarden"], "venue": "In Proceedings of the 22nd Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "An analog of the minimax theorem for vector payoffs", "author": ["D. Blackwell"], "venue": "Pacific J. Math.,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1956}, {"title": "Near-optimal online auctions", "author": ["A. Blum", "J.D. Hartline"], "venue": "In Proceedings of the 16th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "On the generalization ability of on-line learning algorithms", "author": ["N. Cesa-Bianchi", "A. Conconi", "C. Gentile"], "venue": "IEEE Trans. Inf. Theor.,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "Regret minimization for reserve prices in second-price auctions", "author": ["N. Cesa-Bianchi", "C. Gentile", "Y. Mansour"], "venue": "In Proceedings of the 24th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "A lower bound for the smallest eigenvalue of the Laplacian", "author": ["J. Cheeger"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1969}, {"title": "Bayesian combinatorial auctions", "author": ["G. Christodoulou", "A. Kov\u00e1cs", "M. Schapira"], "venue": "In Proceedings of theInternational Colloquium on Automata, Languages and Programming (ICALP),", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2008}, {"title": "The sample complexity of revenue maximization", "author": ["R. Cole", "T. Roughgarden"], "venue": "In Proceedings of the 46th Annual ACM Symposium on Theory of Computing (STOC),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Learning in auctions: Regret is hard, envy is easy", "author": ["C. Daskalakis", "V. Syrgkanis"], "venue": "In Proceedings of the 57th Symposium on Foundations of Computer Science (FOCS)", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2016}, {"title": "The sample complexity of auctions with side information", "author": ["N.R. Devanur", "Z. Huang", "Psomas", "C.-A"], "venue": "In Proceedings of the 48th Annual ACM Symposium on Theory of Computing (STOC),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "Mechanisms for multi-unit auctions", "author": ["S. Dobzinski", "N. Nisan"], "venue": "In Proceedings of the 8th ACM Conference on Economics and Computation (EC),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}, {"title": "Simultaneous auctions are (almost) efficient", "author": ["M. Feldman", "H. Fu", "N. Gravin", "B. Lucier"], "venue": "In Proceedings of the 45th Annual ACM Symposium on Theory of Computing (STOC),", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "A desicion-theoretic generalization of on-line learning and an application to boosting", "author": ["Y. Freund", "R.E. Schapire"], "venue": "In European conference on computational learning theory,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1995}, {"title": "Exact identification of read-once formulas using fixed points of amplification functions", "author": ["S.A. Goldman", "M.J. Kearns", "R.E. Schapire"], "venue": "SIAM Journal on Computing,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1993}, {"title": "On profit-maximizing envy-free pricing", "author": ["V. Guruswami", "J.D. Hartline", "A.R. Karlin", "D. Kempe", "C. Kenyon", "F. McSherry"], "venue": "In Proceedings of the16th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Approximation to bayes risk in repeated play. Contributions to the Theory of Games, 3:97\u2013139", "author": ["J. Hannan"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1957}, {"title": "Mechanism design and approximation", "author": ["J.D. Hartline"], "venue": "Book draft. October,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Near-optimal pricing in near-linear time", "author": ["J.D. Hartline", "V. Koltun"], "venue": "In Workshop on Algorithms and Data Structures,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2005}, {"title": "Simple versus optimal mechanisms", "author": ["J.D. Hartline", "T. Roughgarden"], "venue": "In Proceedings of the 10th ACM Conference on Economics and Computation (EC),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}, {"title": "Online submodular minimization", "author": ["E. Hazan", "S. Kale"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2012}, {"title": "The computational power of optimization in online learning", "author": ["E. Hazan", "T. Koren"], "venue": "In Proceedings of the 48th Annual ACM Symposium on Theory of Computing (STOC). ACM", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2016}, {"title": "Adaptive online prediction by following the perturbed leader", "author": ["M. Hutter", "J. Poland"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2005}, {"title": "From batch to transductive online learning", "author": ["S. Kakade", "A.T. Kalai"], "venue": "In Proceedings of the 18th Annual Conference on Neural Information Processing Systems (NIPS),", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2005}, {"title": "Playing games with approximation algorithms", "author": ["S.M. Kakade", "A.T. Kalai", "K. Ligett"], "venue": "SIAM Journal on Computing,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2009}, {"title": "Efficient algorithms for online decision problems", "author": ["A. Kalai", "S. Vempala"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2005}, {"title": "On the pseudo-dimension of nearly optimal auctions", "author": ["J.H. Morgenstern", "T. Roughgarden"], "venue": "In Proceedings of the 29th Annual Conference on Neural Information Processing Systems (NIPS),", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2015}, {"title": "Optimal auction design", "author": ["R.B. Myerson"], "venue": "Mathematics of operations research,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1981}, {"title": "Computationally feasible vcg mechanisms", "author": ["N. Nisan", "A. Ronen"], "venue": "J. Artif. Int. Res.,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2007}, {"title": "Concentration inequalities for Markov chains by Marton couplings and spectral methods. ArXiv e-prints", "author": ["D. Paulin"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2012}, {"title": "Ironing in the dark", "author": ["T. Roughgarden", "O. Schrijvers"], "venue": "In Proceedings of the17th ACM Conference on Economics and Computation (EC),", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2016}, {"title": "Minimizing regret with multiple reserves", "author": ["T. Roughgarden", "J.R. Wang"], "venue": "In Proceedings of the 17th ACM Conference on Economics and Computation (EC),", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2016}, {"title": "Understanding Machine Learning: From Theory to Algorithms", "author": ["S. Shalev-Shwartz", "S. Ben-David"], "venue": null, "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2014}], "referenceMentions": [{"referenceID": 26, "context": "Our learning algorithm is a generalization of the classic FTPL algorithm of Kalai and Vempala [27], playing at every iteration the historically best-performing action after adding some perturbation to the performance of each of its actions.", "startOffset": 94, "endOffset": 98}, {"referenceID": 10, "context": "Our approach generalizes prior work on oracle-efficient online learning [11, 22, 27, 35], ranging from online combinatorial optimization, learning in simultaneous auctions, and contextual learning.", "startOffset": 72, "endOffset": 88}, {"referenceID": 21, "context": "Our approach generalizes prior work on oracle-efficient online learning [11, 22, 27, 35], ranging from online combinatorial optimization, learning in simultaneous auctions, and contextual learning.", "startOffset": 72, "endOffset": 88}, {"referenceID": 26, "context": "Our approach generalizes prior work on oracle-efficient online learning [11, 22, 27, 35], ranging from online combinatorial optimization, learning in simultaneous auctions, and contextual learning.", "startOffset": 72, "endOffset": 88}, {"referenceID": 27, "context": "We give oracle-efficient learning results for: (1) VCG auctions with bidder-specific reserves in single-parameter settings with matroid constraints, (2) envy-free item pricing in multi-item auctions with unlimited supply, and (3) s-level auctions of Morgenstern and Roughgarden [28] for singleitem settings.", "startOffset": 278, "endOffset": 282}, {"referenceID": 1, "context": "1 Introduction Online learning is increasingly playing a major role in the adaptive optimization of computer systems, from the design of online marketplaces [2, 5, 7, 33] to the optimization of routing schemes in communication networks [1].", "startOffset": 157, "endOffset": 170}, {"referenceID": 4, "context": "1 Introduction Online learning is increasingly playing a major role in the adaptive optimization of computer systems, from the design of online marketplaces [2, 5, 7, 33] to the optimization of routing schemes in communication networks [1].", "startOffset": 157, "endOffset": 170}, {"referenceID": 6, "context": "1 Introduction Online learning is increasingly playing a major role in the adaptive optimization of computer systems, from the design of online marketplaces [2, 5, 7, 33] to the optimization of routing schemes in communication networks [1].", "startOffset": 157, "endOffset": 170}, {"referenceID": 32, "context": "1 Introduction Online learning is increasingly playing a major role in the adaptive optimization of computer systems, from the design of online marketplaces [2, 5, 7, 33] to the optimization of routing schemes in communication networks [1].", "startOffset": 157, "endOffset": 170}, {"referenceID": 0, "context": "1 Introduction Online learning is increasingly playing a major role in the adaptive optimization of computer systems, from the design of online marketplaces [2, 5, 7, 33] to the optimization of routing schemes in communication networks [1].", "startOffset": 236, "endOffset": 239}, {"referenceID": 14, "context": "The design of online learning algorithms for these settings has a long and distinguished history, starting from the seminal work of Freund and Schapire [15] and dating back to the very early work of Hannan [18] and Blackwell [4].", "startOffset": 152, "endOffset": 156}, {"referenceID": 17, "context": "The design of online learning algorithms for these settings has a long and distinguished history, starting from the seminal work of Freund and Schapire [15] and dating back to the very early work of Hannan [18] and Blackwell [4].", "startOffset": 206, "endOffset": 210}, {"referenceID": 3, "context": "The design of online learning algorithms for these settings has a long and distinguished history, starting from the seminal work of Freund and Schapire [15] and dating back to the very early work of Hannan [18] and Blackwell [4].", "startOffset": 225, "endOffset": 228}, {"referenceID": 0, "context": "[1, 22, 25, 27].", "startOffset": 0, "endOffset": 15}, {"referenceID": 21, "context": "[1, 22, 25, 27].", "startOffset": 0, "endOffset": 15}, {"referenceID": 24, "context": "[1, 22, 25, 27].", "startOffset": 0, "endOffset": 15}, {"referenceID": 26, "context": "[1, 22, 25, 27].", "startOffset": 0, "endOffset": 15}, {"referenceID": 26, "context": "However, such reductions have found success only in limited albeit important settings, including online linear optimization, where the learner\u2019s action space is the power-set of some ground elements and the objective of the learner is a linear function of these elements [27].", "startOffset": 271, "endOffset": 275}, {"referenceID": 22, "context": "From the recent work of Hazan and Koren [23], we know that, unlike the stochastic i.", "startOffset": 40, "endOffset": 44}, {"referenceID": 26, "context": "Our algorithm is a significant generalization of prior approaches that worked only for specific settings, including the work of Kalai and Vempala [27] on online linear optimization, Hazan and Kale [22] on online submodular minimization, Daskalakis and Syrgkanis [11] on online learning in simultaneous second-price auctions, and Syrgkanis et al.", "startOffset": 146, "endOffset": 150}, {"referenceID": 21, "context": "Our algorithm is a significant generalization of prior approaches that worked only for specific settings, including the work of Kalai and Vempala [27] on online linear optimization, Hazan and Kale [22] on online submodular minimization, Daskalakis and Syrgkanis [11] on online learning in simultaneous second-price auctions, and Syrgkanis et al.", "startOffset": 197, "endOffset": 201}, {"referenceID": 10, "context": "Our algorithm is a significant generalization of prior approaches that worked only for specific settings, including the work of Kalai and Vempala [27] on online linear optimization, Hazan and Kale [22] on online submodular minimization, Daskalakis and Syrgkanis [11] on online learning in simultaneous second-price auctions, and Syrgkanis et al.", "startOffset": 262, "endOffset": 266}, {"referenceID": 15, "context": "[16] and oracle-efficient learnability.", "startOffset": 0, "endOffset": 4}, {"referenceID": 28, "context": "Unlike the standard approach to optimal auction design, initiated by the seminal work of Myerson [29], our approach is devoid of any assumptions about a prior distribution on the valuations of the players for the resources at sale.", "startOffset": 97, "endOffset": 101}, {"referenceID": 32, "context": "A special case of our framework is the recent work of Roughgarden and Wang [33], which considers online learning over the class of single-item second-price auctions with bidder-specific reserves and gives an algorithm which achieves good regret with respect to a constant factor Equivalently the set of players at each iteration can be the same as long as players are not forward looking and only optimize their utility from the current iteration.", "startOffset": 75, "endOffset": 79}, {"referenceID": 20, "context": "settings under some regularity conditions [21]; \u2013 the class of single-item s-level auctions introduced by Morgenstern and Roughgarden [28], who showed that these auctions approximate, to an arbitrary accuracy, the Myerson auction [29], which is known to be optimal for the Bayesian independent private value setting; and \u2013 the class of envy-free item pricing mechanisms in combinatorial markets with unlimited supply, which has been widely studied in the static Bayesian setting [2, 17].", "startOffset": 42, "endOffset": 46}, {"referenceID": 27, "context": "settings under some regularity conditions [21]; \u2013 the class of single-item s-level auctions introduced by Morgenstern and Roughgarden [28], who showed that these auctions approximate, to an arbitrary accuracy, the Myerson auction [29], which is known to be optimal for the Bayesian independent private value setting; and \u2013 the class of envy-free item pricing mechanisms in combinatorial markets with unlimited supply, which has been widely studied in the static Bayesian setting [2, 17].", "startOffset": 134, "endOffset": 138}, {"referenceID": 28, "context": "settings under some regularity conditions [21]; \u2013 the class of single-item s-level auctions introduced by Morgenstern and Roughgarden [28], who showed that these auctions approximate, to an arbitrary accuracy, the Myerson auction [29], which is known to be optimal for the Bayesian independent private value setting; and \u2013 the class of envy-free item pricing mechanisms in combinatorial markets with unlimited supply, which has been widely studied in the static Bayesian setting [2, 17].", "startOffset": 230, "endOffset": 234}, {"referenceID": 1, "context": "settings under some regularity conditions [21]; \u2013 the class of single-item s-level auctions introduced by Morgenstern and Roughgarden [28], who showed that these auctions approximate, to an arbitrary accuracy, the Myerson auction [29], which is known to be optimal for the Bayesian independent private value setting; and \u2013 the class of envy-free item pricing mechanisms in combinatorial markets with unlimited supply, which has been widely studied in the static Bayesian setting [2, 17].", "startOffset": 479, "endOffset": 486}, {"referenceID": 16, "context": "settings under some regularity conditions [21]; \u2013 the class of single-item s-level auctions introduced by Morgenstern and Roughgarden [28], who showed that these auctions approximate, to an arbitrary accuracy, the Myerson auction [29], which is known to be optimal for the Bayesian independent private value setting; and \u2013 the class of envy-free item pricing mechanisms in combinatorial markets with unlimited supply, which has been widely studied in the static Bayesian setting [2, 17].", "startOffset": 479, "endOffset": 486}, {"referenceID": 29, "context": ", by Maximal-inRange (MIR) algorithms [30]; and (3) regret bounds with respect to stronger benchmarks for the case in which the environment is not completely adversarial but rather follows a fast mixing Markov process.", "startOffset": 38, "endOffset": 42}, {"referenceID": 9, "context": "settings [10, 12, 28, 32].", "startOffset": 9, "endOffset": 25}, {"referenceID": 11, "context": "settings [10, 12, 28, 32].", "startOffset": 9, "endOffset": 25}, {"referenceID": 27, "context": "settings [10, 12, 28, 32].", "startOffset": 9, "endOffset": 25}, {"referenceID": 31, "context": "settings [10, 12, 28, 32].", "startOffset": 9, "endOffset": 25}, {"referenceID": 12, "context": "In the former application, we give a polynomial time online learning algorithm for online welfare maximization in multi-unit auctions, that achieves 2-approximate regret by invoking the MIR approximation algorithm of Dobzinski and Nisan [13] as an offline oracle.", "startOffset": 237, "endOffset": 241}, {"referenceID": 10, "context": "With the latter application, we solve an open problem raised in the recent work of Daskalakis and Syrgkanis [11] who offered efficient learning algorithms only for the weaker benchmark of no-envy learning, rather than no-regret learning, in simultaneous second price auctions.", "startOffset": 108, "endOffset": 112}, {"referenceID": 14, "context": "Ignoring computational efficiency constraints, the exponential weights algorithm of Freund and Schapire [15] achieves a regret rate of O( \u221a log |X |/T ), which, absent any structure on the reward function, is information-theoretically optimal.", "startOffset": 104, "endOffset": 108}, {"referenceID": 5, "context": "The offline problem (or, possibly, an FPTAS for the offline problem) is a weaker problem than the online learning problem, because standard online-to-batch reductions [6, 11] can turn a polynomial-time online learning algorithm into a polynomial-time additiveapproximation scheme for the offline problem.", "startOffset": 167, "endOffset": 174}, {"referenceID": 10, "context": "The offline problem (or, possibly, an FPTAS for the offline problem) is a weaker problem than the online learning problem, because standard online-to-batch reductions [6, 11] can turn a polynomial-time online learning algorithm into a polynomial-time additiveapproximation scheme for the offline problem.", "startOffset": 167, "endOffset": 174}, {"referenceID": 33, "context": "from some distribution at each iteration, such an approach works and offers regret rates on the order O(log |X |/ \u221a T ) by a simple application of the Rademacher complexity of finite hypotheses classes [34].", "startOffset": 202, "endOffset": 206}, {"referenceID": 26, "context": "A seminal paper of Kalai and Vempala [27] showed that a slight modification of this algorithm leads to good regret.", "startOffset": 37, "endOffset": 41}, {"referenceID": 10, "context": "Daskalakis and Syrgkanis [11] introduced the approach of adding randomness to the FTL algorithm by augmenting the observed history with \u201cfake\u201d historical samples of adversary actions.", "startOffset": 25, "endOffset": 29}, {"referenceID": 0, "context": "In this way, we construct a perturbation translation matrix \u0393 (for simplicity assume entries in [0, 1]), which translates the short N -dimensional perturbation vector into a long |X |-dimensional one, i.", "startOffset": 96, "endOffset": 102}, {"referenceID": 15, "context": "[16].", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "A separator [11] is a small set of contexts such that any two policies in the policy class choose different actions on at least one context from the set.", "startOffset": 12, "endOffset": 16}, {"referenceID": 21, "context": "This approach was leveraged by Hazan and Kale [22] for online submodular minimization.", "startOffset": 46, "endOffset": 50}, {"referenceID": 9, "context": "The knowledge of the distribution by the seller is a rather harsh assumption and recent work in algorithmic mechanism design [10, 12, 28, 32] relaxes this assumption by solely assuming access to a set of samples from the distribution.", "startOffset": 125, "endOffset": 141}, {"referenceID": 11, "context": "The knowledge of the distribution by the seller is a rather harsh assumption and recent work in algorithmic mechanism design [10, 12, 28, 32] relaxes this assumption by solely assuming access to a set of samples from the distribution.", "startOffset": 125, "endOffset": 141}, {"referenceID": 27, "context": "The knowledge of the distribution by the seller is a rather harsh assumption and recent work in algorithmic mechanism design [10, 12, 28, 32] relaxes this assumption by solely assuming access to a set of samples from the distribution.", "startOffset": 125, "endOffset": 141}, {"referenceID": 31, "context": "The knowledge of the distribution by the seller is a rather harsh assumption and recent work in algorithmic mechanism design [10, 12, 28, 32] relaxes this assumption by solely assuming access to a set of samples from the distribution.", "startOffset": 125, "endOffset": 141}, {"referenceID": 27, "context": "Another class of auctions that we analyze is the recently introduced class of level auctions [28].", "startOffset": 93, "endOffset": 97}, {"referenceID": 27, "context": "Morgenstern and Roughgarden [28] showed that these auctions, for large enough number of buckets, provide an arbitrarily accurate approximation to the overall optimal Myerson auction in the Bayesian single-item auction setting, where the value of each bidder is drawn from an independent distribution.", "startOffset": 28, "endOffset": 32}, {"referenceID": 9, "context": "This is the first result on competing with a Myerson optimal auction for non-iid distributions, unlike prior work [10, 12, 28, 32] which assumes i.", "startOffset": 114, "endOffset": 130}, {"referenceID": 11, "context": "This is the first result on competing with a Myerson optimal auction for non-iid distributions, unlike prior work [10, 12, 28, 32] which assumes i.", "startOffset": 114, "endOffset": 130}, {"referenceID": 27, "context": "This is the first result on competing with a Myerson optimal auction for non-iid distributions, unlike prior work [10, 12, 28, 32] which assumes i.", "startOffset": 114, "endOffset": 130}, {"referenceID": 31, "context": "This is the first result on competing with a Myerson optimal auction for non-iid distributions, unlike prior work [10, 12, 28, 32] which assumes i.", "startOffset": 114, "endOffset": 130}, {"referenceID": 0, "context": "The learner then observes yt and receives a payoff f(xt, yt) \u2208 [0, 1], where the function f is fixed and known to the learner.", "startOffset": 63, "endOffset": 69}, {"referenceID": 10, "context": "Our results generalize to adaptive adversaries using standard techniques [11, 24].", "startOffset": 73, "endOffset": 81}, {"referenceID": 23, "context": "Our results generalize to adaptive adversaries using standard techniques [11, 24].", "startOffset": 73, "endOffset": 81}, {"referenceID": 26, "context": "Our algorithm broadly follows the FTPL scheme of Kalai and Vempala [27].", "startOffset": 67, "endOffset": 71}, {"referenceID": 26, "context": "In the original FTPL scheme of Kalai and Vempala [27], at every iteration the algorithm adds a perturbation to the historical cumulative payoff of each possible action of the learner and then picks the action with the largest perturbed historical payoff.", "startOffset": 49, "endOffset": 53}, {"referenceID": 26, "context": "For online combinatorial optimization with either additive [27] or submodular [22] objectives, it has been shown that one does not need to add a perturbation on each set, but adding a perturbation on each item suffices to lead to no-regret.", "startOffset": 59, "endOffset": 63}, {"referenceID": 21, "context": "For online combinatorial optimization with either additive [27] or submodular [22] objectives, it has been shown that one does not need to add a perturbation on each set, but adding a perturbation on each item suffices to lead to no-regret.", "startOffset": 78, "endOffset": 82}, {"referenceID": 10, "context": "In particular, we seek to generate perturbations that can be simulated by augmenting the history with a polynomial number of fake samples as proposed in Daskalakis and Syrgkanis [11].", "startOffset": 178, "endOffset": 182}, {"referenceID": 26, "context": "While this approach is standard [27], we include a proof in Appendix A for completeness.", "startOffset": 32, "endOffset": 36}, {"referenceID": 22, "context": "Note that unlike the oracle of [23], which accepts a distribution, we do not require the weights to sum to one.", "startOffset": 31, "endOffset": 35}, {"referenceID": 0, "context": "Each bidder i \u2208 [n] has a combinatorial valuation function vi \u2208 V , where V \u2286 ({0, 1}k \u2192 [0, 1]).", "startOffset": 89, "endOffset": 95}, {"referenceID": 0, "context": "For single-parameter service based environments (a special case of which are single-item auctions), we slightly simplify notation and use vi \u2208 [0, 1] to denote the value of bidder i for being served.", "startOffset": 143, "endOffset": 149}, {"referenceID": 20, "context": "These auctions are known to approximately maximize the revenue when the bidder valuations are drawn independently (but not necessarily identically) from some distribution [21].", "startOffset": 171, "endOffset": 175}, {"referenceID": 32, "context": "Recently, Roughgarden and Wang [33] considered this class I in an online learning framework.", "startOffset": 31, "endOffset": 35}, {"referenceID": 20, "context": "Each bidder who is served is then charged the externality he imposes on others, pi(v) = maxq \u2211 i\u2032 6=i vi\u2032(qi\u2032)\u2212 \u2211 i\u2032 6=i vi\u2032(q \u2217 i\u2032), which can A more common and stronger assumption used in previous work [21, 33] is that S is a downward closed matroid.", "startOffset": 204, "endOffset": 212}, {"referenceID": 32, "context": "Each bidder who is served is then charged the externality he imposes on others, pi(v) = maxq \u2211 i\u2032 6=i vi\u2032(qi\u2032)\u2212 \u2211 i\u2032 6=i vi\u2032(q \u2217 i\u2032), which can A more common and stronger assumption used in previous work [21, 33] is that S is a downward closed matroid.", "startOffset": 204, "endOffset": 212}, {"referenceID": 0, "context": "Now let us return to the infinite class I of all VCG auctions with reserve prices ri \u2208 [0, 1].", "startOffset": 87, "endOffset": 93}, {"referenceID": 16, "context": "2 Envy-free Item Pricing In this section, we consider envy-free item pricing [17] in an environment with k heterogeneous items with a supply of s` \u2265 0 units for each item ` \u2264 k.", "startOffset": 77, "endOffset": 81}, {"referenceID": 1, "context": "Examples of such environments include unit-demand bidders in unlimited supply setting and singleminded bidders in unlimited supply setting, such as hypergraph pricing, where bidders seek hyper-edges in a hypergraph, and its variant the highway problem, where bidders seek hyperedges between sets of contiguous vertices [2, 17].", "startOffset": 319, "endOffset": 326}, {"referenceID": 16, "context": "Examples of such environments include unit-demand bidders in unlimited supply setting and singleminded bidders in unlimited supply setting, such as hypergraph pricing, where bidders seek hyper-edges in a hypergraph, and its variant the highway problem, where bidders seek hyperedges between sets of contiguous vertices [2, 17].", "startOffset": 319, "endOffset": 326}, {"referenceID": 0, "context": "Consider the class of all envy-free item-pricing auctions where a` \u2208 [0, 1] is a real number and denote this class by P .", "startOffset": 69, "endOffset": 75}, {"referenceID": 19, "context": "Hartline and Koltun [20] also provided a discretization of P that has multiplicative approximation guarantee, but using a discretized set different from Pm.", "startOffset": 20, "endOffset": 24}, {"referenceID": 27, "context": "3 Level Auctions We consider the class of level auctions introduced by Morgenstern and Roughgarden [28].", "startOffset": 99, "endOffset": 103}, {"referenceID": 27, "context": "These auctions can achieve (1\u2212 )-approximate revenue maximization, when the valuations of the bidders are drawn independently (but not necessarily identically) from a distribution [28], approximating the Myerson\u2019s optimal auction [29].", "startOffset": 180, "endOffset": 184}, {"referenceID": 28, "context": "These auctions can achieve (1\u2212 )-approximate revenue maximization, when the valuations of the bidders are drawn independently (but not necessarily identically) from a distribution [28], approximating the Myerson\u2019s optimal auction [29].", "startOffset": 230, "endOffset": 234}, {"referenceID": 0, "context": "Then, for any \u03b8 \u2208 Rs,m, there is \u03b8 \u2032 \u2208 Rs,m, such that \u2200v \u2208 [0, 1], Rev(\u03b8,v) = Rev(\u03b8\u2032,v).", "startOffset": 60, "endOffset": 66}, {"referenceID": 0, "context": "with expected value Ey\u223cF [f(x\u2217, y)] and are bounded in [0, 1].", "startOffset": 55, "endOffset": 61}, {"referenceID": 30, "context": "In this work we will specifically use the following result of Paulin [31], which is a Bernstein concentration inequality for sums of dependent random variables that are the outcome of a stationary Markov chain with spectral gap bounded away from zero.", "startOffset": 69, "endOffset": 73}, {"referenceID": 30, "context": "For simplicity, we focus on stationary chains, though similar results hold for non-stationary chains (see Paulin [31] and references therein).", "startOffset": 113, "endOffset": 117}, {"referenceID": 30, "context": "2 (Paulin [31], Theorem 3.", "startOffset": 10, "endOffset": 14}, {"referenceID": 0, "context": "Let g : \u03a9\u2192 [0, 1] and Sz = 1 z \u2211z i=1 g(Xi).", "startOffset": 11, "endOffset": 17}, {"referenceID": 0, "context": "If we set = \u221a 14 log(2/\u03b4) \u03b3T then we have, either > 1, in which case the inequality is trivial, since f(x, y) \u2208 [0, 1], or if \u2264 1, then = \u221a 14 log(2/\u03b4) \u03b3T \u2265 \u221a (4+10 ) log(2/\u03b4) \u03b3T , which implies that the inequality holds with probability 1\u2212 \u03b4.", "startOffset": 112, "endOffset": 118}, {"referenceID": 7, "context": "Moreover, by the Cheeger bound [8] we know that \u03b3 \u2265 \u03a62 2 \u2265 (1\u2212\u03c1)2 4 .", "startOffset": 31, "endOffset": 34}, {"referenceID": 28, "context": "Then we know that the optimal auction for this setting is what is known as Myerson\u2019s auction [29], which translates the players\u2019 values based on some monotone function \u03c6, known as the ironed virtual value function and then allocates the item to the bidder with the highest virtual value, charging payments so that the mechanism is dominant strategy truthful.", "startOffset": 93, "endOffset": 97}, {"referenceID": 27, "context": "A recent result of Morgenstern and Roughgarden [28] shows that level auctions approximate Myerson\u2019s auction in terms of revenue.", "startOffset": 47, "endOffset": 51}, {"referenceID": 0, "context": "Since fc(\u03c0, (\u03c3t, yt)) = f(\u03c0(\u03c3t), yt) and since f(x, y) \u2208 [0, 1], it suffices to show that Pr[\u03c0t+1(\u03c3t) 6= \u03c0t(\u03c3t)] \u2264 2N\u03ba\u03c1.", "startOffset": 57, "endOffset": 63}, {"referenceID": 5, "context": "That is, using standard online-to-batch reductions [6, 11], one can turn a polynomial time online no-regret algorithm into a polynomial time additive approximation scheme for the offline problem.", "startOffset": 51, "endOffset": 58}, {"referenceID": 10, "context": "That is, using standard online-to-batch reductions [6, 11], one can turn a polynomial time online no-regret algorithm into a polynomial time additive approximation scheme for the offline problem.", "startOffset": 51, "endOffset": 58}, {"referenceID": 25, "context": "[26] introduced an alternative measure of regret, called C-REGRET, for competing with offline approximation algorithm.", "startOffset": 0, "endOffset": 4}, {"referenceID": 1, "context": "A similar observation was made by Balcan and Blum [2] regarding approximation algorithms that use linear optimization as a relaxation and therefore can be efficiently optimized by the standard FTPL algorithm of Kalai and Vempala [27].", "startOffset": 50, "endOffset": 53}, {"referenceID": 26, "context": "A similar observation was made by Balcan and Blum [2] regarding approximation algorithms that use linear optimization as a relaxation and therefore can be efficiently optimized by the standard FTPL algorithm of Kalai and Vempala [27].", "startOffset": 229, "endOffset": 233}, {"referenceID": 32, "context": "Roughgarden and Wang [33] as a Relaxation.", "startOffset": 21, "endOffset": 25}, {"referenceID": 32, "context": "The approach of Roughgarden and Wang [33] for achieving a 1/2-regret for single-item second price auctions with bidder-specific reserves, falls exactly in the relaxation approximation framework.", "startOffset": 37, "endOffset": 41}, {"referenceID": 26, "context": "However, in their case the relaxed objective corresponds to an online linear optimization problem and can be solved with the standard FTPL algorithm of Kalai and Vempala [27].", "startOffset": 170, "endOffset": 174}, {"referenceID": 0, "context": "Each bidder i has a monotonic valuation function vi : [k]\u2192 [0, 1].", "startOffset": 59, "endOffset": 65}, {"referenceID": 12, "context": "Dobzinski and Nisan [13] introduced a 1/2-approximation MIR algorithm for this problem.", "startOffset": 20, "endOffset": 24}, {"referenceID": 12, "context": "the matrix \u0393MU \u2032 restricted to the range of the 1/2 approximation algorithm of Dobzinski and Nisan [13] has much better admissibility constants.", "startOffset": 99, "endOffset": 103}, {"referenceID": 12, "context": ",vT , the Generalized FTPL algorithm with matrix \u0393MU, distribution D and oracle the 1/2aproximate MIR algorithm of [13], runs in per-round time poly(n, T ), plays the sequence of allocations q1, .", "startOffset": 115, "endOffset": 119}, {"referenceID": 10, "context": "2 Oracle Efficient No-Regret Learning in Simultaneous Second Price Auctions In this section, we answer an open problem raised by Daskalakis and Syrgkanis [11] regarding the existence of an oracle-based no-regret algorithm for optimal bidding in Simultaneous Second-Price Auctions.", "startOffset": 154, "endOffset": 158}, {"referenceID": 2, "context": "A Simultaneous Second-Price Auction (SiSPA) [3, 9, 14] is a mechanism for allocating k items to n bidders.", "startOffset": 44, "endOffset": 54}, {"referenceID": 8, "context": "A Simultaneous Second-Price Auction (SiSPA) [3, 9, 14] is a mechanism for allocating k items to n bidders.", "startOffset": 44, "endOffset": 54}, {"referenceID": 13, "context": "A Simultaneous Second-Price Auction (SiSPA) [3, 9, 14] is a mechanism for allocating k items to n bidders.", "startOffset": 44, "endOffset": 54}, {"referenceID": 0, "context": "Each bidder i has a fixed combinatorial valuation function vi : {0, 1}k \u2192 [0, 1] over bundles of items.", "startOffset": 74, "endOffset": 80}, {"referenceID": 8, "context": "Similar no-overbidding assumptions are used in the previous work to prove that no-regret learning in second-price auctions has good welfare guarantees [9, 14].", "startOffset": 151, "endOffset": 158}, {"referenceID": 13, "context": "Similar no-overbidding assumptions are used in the previous work to prove that no-regret learning in second-price auctions has good welfare guarantees [9, 14].", "startOffset": 151, "endOffset": 158}, {"referenceID": 15, "context": "5 (Universal Identification Sequences [16]).", "startOffset": 38, "endOffset": 42}, {"referenceID": 15, "context": "Examples of function classes with polynomial-length universal identification sequences include logarithmic-depth read-once majority formulas and logarithmicdepth read-once positive NAND formulas [16].", "startOffset": 195, "endOffset": 199}], "year": 2017, "abstractText": "We consider the design of online learning algorithms in a general learning setting, with the goal of obtaining computationally efficient no-regret algorithms, when given access to an oracle for the offline optimization version of the problem. We present an algorithm that we call Generalized Follow-thePerturbed-Leader (Generalized FTPL) and provide conditions under which it achieves vanishing regret and is efficiently implementable with an oracle. Our second main contribution is the introduction of a new online adversarial auction-design framework for revenue maximization and an application of our oracle-efficient learning results to the adaptive optimization of auctions. Our learning algorithm is a generalization of the classic FTPL algorithm of Kalai and Vempala [27], playing at every iteration the historically best-performing action after adding some perturbation to the performance of each of its actions. The crux of our design is adding perturbations in a manner that leads to oracle-efficiency. We reduce this to designing a translation matrix, which translates a low dimensional vector with independent noise components into a high dimensional vector of perturbations on the learner\u2019s action space. Our approach generalizes prior work on oracle-efficient online learning [11, 22, 27, 35], ranging from online combinatorial optimization, learning in simultaneous auctions, and contextual learning. Our auction-design framework considers an auctioneer learning an optimal auction rule in an online manner, every day observing an adversarially chosen vector of valuations. The auctioneer\u2019s goal is to achieve revenue that competes with the revenue of the optimal auction in hindsight among those in some target class. We give oracle-efficient learning results for: (1) VCG auctions with bidder-specific reserves in single-parameter settings with matroid constraints, (2) envy-free item pricing in multi-item auctions with unlimited supply, and (3) s-level auctions of Morgenstern and Roughgarden [28] for singleitem settings. The last result implies good regret against the optimal overall auction when valuations are coming from a fast mixing Markov chain, that is independent across bidders. We also extend our results to the case when the learner observes side information on the bidders before running the auction (contextual learning). We present additional extensions to contextual learning and learning with approximate oracles, implemented by FPTAS or Maximal-in-Range algorithms. We provide further applications in online welfare maximization in multi-unit auctions and in no-regret learning in simultaneous item auctions, answering an open question from prior work. \u2217Microsoft Research, New York, mdudik@microsoft.com \u2020Computer Science Department, Carnegie Mellon University, nhaghtal@cs.cmu.edu \u2021Microsoft Research, New York, haipeng@microsoft.com \u00a7Microsoft Research, New York, schapire@microsoft.com \u00b6Microsoft Research, New England, vasy@microsoft.com \u2016Microsoft Research, New York, jenn@microsoft.com ar X iv :1 61 1. 01 68 8v 1 [ cs .L G ] 5 N ov 2 01 6", "creator": "LaTeX with hyperref package"}}}