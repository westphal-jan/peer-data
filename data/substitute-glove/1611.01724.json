{"id": "1611.01724", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Nov-2016", "title": "Words or Characters? Fine-grained Gating for Reading Comprehension", "abstract": "Previous both combines know - high several character - level element and concatenation every non-negative refraction, other called suboptimal that along - result tasks making answer emphasizing. We but a well - grained gating mechanism to dynamically combine word - greater and character - positive shapes an to commercial beyond the suggestion. We similar extend the idea several simple - calcareous vvt to interface instead interaction between details few herewith give instead prosody. Experiments performance that our idea can ease since performance on reading relevance tasks, strengthening making east - of - been - art following take the Children ' s Book Test chi-square. To hoped the generality a really pigmentary accelerate, ca under pictures competitive conclusions two it social media pocket calculations task.", "histories": [["v1", "Sun, 6 Nov 2016 03:17:42 GMT  (2851kb,D)", "http://arxiv.org/abs/1611.01724v1", null], ["v2", "Mon, 11 Sep 2017 21:00:30 GMT  (2852kb,D)", "http://arxiv.org/abs/1611.01724v2", "Accepted as a conference paper at ICLR 2017"]], "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["zhilin yang", "bhuwan dhingra", "ye yuan", "junjie hu", "william w cohen", "ruslan salakhutdinov"], "accepted": true, "id": "1611.01724"}, "pdf": {"name": "1611.01724.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["READING COMPREHENSION", "Zhilin Yang", "Bhuwan Dhingra", "Ye Yuan", "Junjie Hu", "William W. Cohen", "Ruslan Salakhutdinov"], "emails": ["zhiliny@cs.cmu.edu", "wcohen@cs.cmu.edu", "rsalakhu@cs.cmu.edu"], "sections": [{"heading": "1 INTRODUCTION", "text": "Finding semantically meaningful representations of the words (also called tokens) in a document is necessary for strong performance in Natural Language Processing tasks. In neural networks, tokens are mainly represented in two ways, either using word-level representations or character-level representations. Word-level representations are obtained from a lookup table, where each unique token is represented as a vector. Character-level representations are usually obtained by applying recurrent neural networks (RNNs) or convolutional neural networks (CNNs) on the character sequence of the token, and their hidden states are combined to form the representation. Word-level representations are good at memorizing the semantics of the tokens while character-level representations are more suitable for modeling sub-word morphologies (Ling et al., 2015; Yang et al., 2016a). For example, considering \u201ccat\u201d and \u201ccats\u201d, word-level representations can only learn the similarities between the two tokens by training on a large amount of training data, while character-level representations, by design, can easily capture the similarities. Character-level representations are also used to alleviate the difficulties of modeling out-of-vocabulary (OOV) tokens (Luong & Manning, 2016).\nHybrid word-character models have been proposed to leverage the advantages of both word-level and character-level representations. The most commonly used method is to concatenate these two representations (Yang et al., 2016a). However, concatenating word-level and character-level representations is technically problematic. For frequent tokens, the word-level representations are usually accurately estimated during the training process, and thus introducing character-level representations can potentially bias the entire representations. For infrequent tokens, the estimation of wordlevel representations have high variance, which will have negative effects when combined with the character-level representations. To address this issue, recently Miyamoto & Cho (2016) introduced a scalar gate conditioned on the word-level representations to control the ratio of the two representations. However, for the task of reading comprehension, preliminary experiments showed that this method was not able to improve the performance over concatenation. There are two possible reasons. First, word-level representations might not contain sufficient information to support the decisions of selecting between the two representations. Second, using a scalar gate means applying the same ratio for each of the dimensions, which can be suboptimal.\nIn this work, we present a fine-grained gating mechanism to combine the word-level and characterlevel representations. We compute a vector gate as a linear projection of the token features followed by a sigmoid activation. We then multiplicatively apply the gate to the character-level and word-\nar X\niv :1\n61 1.\n01 72\n4v 1\n[ cs\n.C L\n] 6\nN ov\n2 01\n6\nlevel representations. Each dimension of the gate controls how much information is flowed from the word-level and character-level representations respectively. We use named entity tags, part-ofspeech tags, document frequencies, and word-level representations as the features for token properties which determine the gate. More generally, our fine-grained gating mechanism can be used to model multiple levels of structure in language, including words, characters, phrases, sentences and paragraphs. In this work we focus on studying the effects on word-character gating.\nTo better tackle the problem of reading comprehension, we also extend the idea of fine-grained gating for modeling the interaction between documents and queries. Previous work has shown the importance of modeling interactions between document and query tokens by introducing various attention architectures for the task (Hermann et al., 2015; Kadlec et al., 2016). Most of these use an inner product between the two representations to compute the relative importance of document tokens. The Gated-Attention Reader (Dhingra et al., 2016a) showed improved performance by replacing the inner-product with an element-wise product to allow for better matching at the semantic level. However, they use aggregated representations of the query which may lead to loss of information. In this work we use a fine-grained gating mechanism for each token in the paragraph and each token in the query. The fine-grained gating mechanism applies an element-wise multiplication of the two representations.\nWe show improved performance on reading comprehension datasets, including Children\u2019s Book Test (CBT) and SQuAD. On CBT, our approach achieves new state-of-the-art results without using an ensemble. To demonstrate the generality of our method, we apply our word-character fine-grained gating mechanism to a social media tag prediction task and show improved performance over previous methods.\nOur contributions are two-fold. First, we present a fine-grained word-character gating mechanism and show improved performance on a variety of tasks including reading comprehension. Second, to better tackle the reading comprehension tasks, we extend our fine-grained gating approach to modeling the interaction between documents and queries."}, {"heading": "2 RELATED WORK", "text": "Hybrid word-character models have been proposed to take advantages of both word-level and character-level representations. Ling et al. (2015) introduce a compositional character to word (C2W) model based on bidirectional LSTMs. Kim et al. (2016) describe a model that employs a convolutional neural network (CNN) and a highway network over characters for language modeling. Miyamoto & Cho (2016) use a gate to adaptively find the optimal mixture of the character-level and word-level inputs. Yang et al. (2016a) employ deep gated recurrent units on both character and word levels to encode morphology and context information.\nThe gating mechanism is widely used in sequence modeling. Long short-term memory (LSTM) networks (Hochreiter & Schmidhuber, 1997) are designed to deal with vanishing gradients through the gating mechanism. Similar to LSTM, Gated Recurrent Unit (GRU) was proposed by Cho et al. (2014), which also uses gating units to modulate the flow of information. The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs.\nSimilar to the idea of gating, multiplicative integration has also been shown to provide a benefit in various settings. Yang et al. (2014) find that multiplicative operations are superior to additive operations in modeling relations. Wu et al. (2016) propose to use Hadamard product to replace sum operation in recurrent networks, which gives a significant performance boost over existing RNN models. Dhingra et al. (2016a) use a multiplicative gating mechanism to achieve state-of-the-art results on question answering benchmarks.\nReading comprehension is a challenging task for machines. A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016). Yu et al. (2016) propose a dynamic chunk reader to extract and rank a set of answer candidates from a given document to answer questions. Wang & Jiang (2016) introduce an end-to-end neural architecture which incorporates match-LSTM and pointer networks (Vinyals et al., 2015)."}, {"heading": "3 FINE-GRAINED GATING", "text": "In this section, we will describe our fine-grained gating approach in the context of reading comprehension. We first introduce the settings of reading comprehension tasks and a general neural network architecture. We will then describe our word-character gating and document-query gating approaches respectively."}, {"heading": "3.1 READING COMPREHENSION SETTING", "text": "The reading comprehension task involves a document P = (p1, p2, \u00b7 \u00b7 \u00b7 , pM ) and a query Q = (q1, q2, \u00b7 \u00b7 \u00b7 , qN ), where M and N are the lengths of the document and the query respectively. Each token pi is denoted as (wi,Ci), where wi is a one-hot encoding of the token in the vocabulary and Ci is a matrix with each row representing a one-hot encoding of a character. Each token in the query qj is similarly defined. We use i as a subscript for documents and j for queries. The output of the problem is an answer a, which can either be an index or a span of indices in the document.\nNow we describe a general architecture used in this work, which is a generalization of the gated attention reader (Dhingra et al., 2016a). For each token in the document and the query, we compute a vector representation using a function f . More specifically, for each token pi in the document, we have h0i = f(wi,Ci). The same function f is also applied to the tokens in the query. Let H0p and Hq denote the vector representations computed by f for tokens in documents and queries respectively. In Section 3.2, we will discuss the \u201cword-character\u201d fine-grained gating used to define the function f .\nSuppose that we have a network of K layers. At the k-th layer, we apply RNNs on Hk\u22121p and Hq to obtain hidden states Pk and Qk, where Pk is aM\u00d7dmatrix and Qk is aN\u00d7dmatrix with d being the number of hidden units in the RNNs. Then we use a function r to compute a new representation for the document Hkp = r(P\nk,Qk). In Section 3.3, we will introduce the \u201cdocument-query\u201d finegrained gating used to define the function r.\nAfter going through K layers, we predict the answer index a using a softmax layer over hidden states Hkp . For datasets where the answer is a span of text, we use two softmax layers for the start and end indices respectively."}, {"heading": "3.2 WORD-CHARACTER FINE-GRAINED GATING", "text": "Given a one-hot encoding wi and a character sequence Ci, we now describe how to compute the vector representation hi = f(wi,Ci) for the token. In the rest of the section, we will drop the subscript i for notation simplicity.\nWe first apply an RNN on C and take the hidden state in the last time step c as the character-level representation (Yang et al., 2016a). Let E denote the token embedding lookup table. We perform a matrix-vector multiplication Ew to obtain a word-level representation. We assume c and Ew have the same length de in this work.\nPrevious methods defined f using the word-level representation Ew (Collobert et al., 2011), the character-level representation c (Ling et al., 2015), or the concatenation [Ew; c] (Yang et al., 2016a). Unlike these methods, we propose to use a gate to dynamically choose between the word-level and character-level representations based on the properties of the token. Let v denote a feature vector that encodes these properties. In this work, we use the concatenation of named entity tags, partof-speech tags, binned document frequency vectors, and the word-level representations to form the feature vector v. Let dv denote the length of v.\nThe gate is computed as follows: g = \u03c3(Wgv + bg)\nwhere Wg and bg are the model parameters with shapes de\u00d7 dv and de, and \u03c3 denotes an elementwise sigmoid function.\nThe final representation is computed using a fine-grained gating mechanism,\nh = f(c,w) = g c+ (1\u2212 g) (Ew)\nwhere denotes element-wise product between two vectors. An illustration of our fine-grained gating mechanism is shown in Figure 1. Intuitively speaking, when the gate g has high values, more information flows from the character-level representation to the final representation; when the gate g has low values, the final representation is dominated by the word-level representation.\nThough Miyamoto & Cho (2016) also use a gate to choose between word-level and character-level representations, our method is different in two ways. First, we use a more fine-grained gating mechanism, i.e., vector gates rather than scalar gates. Second, we condition the gate on features that better reflect the properties of the token. For example, for noun phrases and entities, we would expect the gate to bias towards character-level representations because noun phrases and entities are usually less common and display richer morphological structure. Experiments show that these changes are key to the performance improvements for reading comprehension tasks.\nOur approach can be further generalized to a setting of multi-level networks so that we can combine multiple levels of representations using fine-grained gating mechanisms, which we leave for future work."}, {"heading": "3.3 DOCUMENT-QUERY FINE-GRAINED GATING", "text": "Given the hidden states Pk and Qk, we now describe how to compute a representation Hk that encodes the interactions between the document and the query. In this section, we drop the superscript k (the layer number) for notation simplicity. Let pi denote the i-th row of P and qj denote the j-row of Q. Let dh denote the lengths of pi and qj .\nAttention-over-attention (AoA) (Cui et al., 2016) defines a dot product between each pair of tokens in the document and the query, i.e., pTi qj , followed by row-wise and column-wise softmax nonlinearities. AoA imposes pair-wise interactions between the document and the query, but using a dot product is potentially not expressive enough and hard to generalize to multi-layer networks. The gated attention (GA) reader (Dhingra et al., 2016a) defines an element-wise product as pi gi where gi is a gate computed by attention mechanism on the token pi and the entire query. The intuition for the gate gi is to attend to important information in the document. However, there is no direct pair-wise interaction between each token pair.\nWe present a fine-grained gating method that combines the advantages of the above methods (i.e., both pairwise and element-wise). We compute the pairwise element-wise product between the hidden states in the document and the query, as shown in Figure 2. More specifically, for pi and qj , we have\nIij = tanh(pi qj)\nwhere qj can be viewed as a gate to filter the information in pi. We then use an attention mechanism over Iij to output hidden states hi as follows\nhi = \u2211 j softmax(uTh Iij +w T i wjbh1 + bh2)Iij\nwhere uh is a dv-dimensional model parameter, bh1 and bh2 are scalar model parameters, wi and wj are one-hot encodings for pi and qj respectively. We additionally use one-hot encodings in the attention mechanism to reinforce the matching between the same tokens since such information is not fully preserved in Iij when k is large. The softmax nonlinearity is applied over all j\u2019s. The final hidden states H are formed by concatenating the hi\u2019s for each token pi."}, {"heading": "4 EXPERIMENTS", "text": "We first present experimental results on the Twitter dataset where we can rule out the effects of different choices of network architectures, to demonstrate the effectiveness of our word-character fine-grained gating approach. Later we show experiments on more challenging datasets on reading comprehension to further show that our approach can be used to improve the performance on highlevel NLP tasks as well."}, {"heading": "4.1 EVALUATING WORD-CHARACTER GATING ON TWITTER", "text": "We evaluate the effectiveness of our word-character fine-grained gating mechanism on a social media tag prediction task. We use the Twitter dataset and follow the experimental settings in Dhingra et al. (2016b). We also use the same network architecture upon the token representations, which is an LSTM layer followed by a softmax classification layer (Dhingra et al., 2016b). The Twitter dataset consists of English tweets with at least one hashtag from Twitter. Hashtags and HTML tags have been removed from the body of the tweet, and user names and URLs are replaced with special tokens. The dataset contains 2 million tweets for training, 10K for validation and 50K for testing, with a total of 2,039 distinct hashtags. The task is to predict the hashtags of each tweet.\nWe compare several different methods as follows. Word char concat uses the concatenation of word-level and character-level representations as in Yang et al. (2016a); word char feat concat concatenates the word-level and character-level representations along with the features described in Section 3.2; scalar gate uses a scalar gate similar to Miyamoto & Cho (2016) but is conditioned on the features; fine-grained gate is our method described in Section 3.2. We include word char feat concat for a fair comparison because our fine-grained gating approach also uses the token features.\nThe results are shown in Table 1. We report three evaluation metrics including precision@1, recall@10, and mean rank. Our method outperforms character-level models used in Dhingra et al.\n(2016b) by 2.29%, 2.69%, and 2.5 points in terms of precision, recall and mean rank respectively. We can observe that scalar gating approach (Miyamoto & Cho, 2016) can only marginally improve over the baseline methods, while fine-grained gating methods can substantially improve model performance. Note that directly concatenating the token features with the character-level and word-level representations does not boost the performance, but using the token features to compute a gate (as done in fine-grained gating) leads to better results. This indicates that the benefit of fine-grained gating mainly comes from better modeling rather than using additional features."}, {"heading": "4.2 PERFORMANCE ON READING COMPREHENSION", "text": "After investigating the effectiveness of the word-character fine-grained gating mechanism on the Twitter dataset, we now move on to a more challenging task, reading comprehension. In this section, we experiment with two datasets, the Children\u2019s Book Test dataset (Hill et al., 2016) and the SQuAD dataset (Rajpurkar et al., 2016)."}, {"heading": "4.2.1 CHILDREN\u2019S BOOK TEST", "text": "The Children\u2019s Book Test (CBT) dataset is built from children\u2019s books. The whole dataset has 669,343 questions for training, 8,000 for validation and 10,000 for testing. We closely follow the setting in Dhingra et al. (2016a) and incrementally add different components to see the changes in performance. For the fine-grained gating approach, we use the same hyper-parameters as in Dhingra et al. (2016a) except that we use a character-level GRU with 100 units to be of the same size as the word lookup table.\nIn addition to different ways of combining word-level and character-level representations, we also compare two different ways of integrating documents and queries: GA refers to the gated attention reader (Dhingra et al., 2016a) and FG refers to our fine-grained gating described in Section 3.3.\nThe results are reported in Table 2. We report the results on common noun (CN) questions and named entity (NE) questions, which are two widely used question categories in CBT. Our finegrained gating approach achieves new state-of-the-art performance on both settings and outperforms the current state-of-the-art results by up to 1.76% without using ensembles. Our method outperforms the baseline GA reader by up to 2.4%, which indicates the effectiveness of the fine-grained gating mechanism. Consistent with the results on the Twitter dataset, using word-character fine-grained gating can substantially improve the performance over concatenation or scalar gating. Furthermore, we can see that document-query fine-grained gating also contributes significantly to the final results."}, {"heading": "4.2.2 SQUAD", "text": "The Stanford Question Answering Dataset (SQuAD) is a reading comprehension dataset collected recently (Rajpurkar et al., 2016). It contains 23,215 paragraphs come from 536 Wikipedia articles. Unlike other reading comprehension datasets such as CBT, the answers are a span of text rather than a single word. The dataset is partitioned into a training set (80%, 87,636 question-answer pairs), a development set (10%, 10,600 question-answer pairs) and a test set which is not released.\nWe report our results in Table 3. \u201cExact match\u201d computes the ratio of questions that are answered correctly by strict string comparison, and the F1 score is computed on the token level. We can observe that both word-character fine-grained gating and document-query fine-grained gating can substantially improve the performance, leading to state-of-the-art results among published papers. Note that at the time of writing, the best score on the leaderboard is 0.716 in exact match and 0.804 in F1 without published papers. A gap exists because our architecture described in Section 3.1 does not specifically model the answer span structure that is unique to SQuAD. In this work, we focus on this general architecture to study the effectiveness of fine-grained gating mechanisms."}, {"heading": "4.3 VISUALIZATION AND ANALYSIS", "text": "We visualize the model parameter Wg as described in Section 3.2. For each feature, we average the corresponding weight vector in Wg . The results are described in Figure 3. We can see that named entities like \u201cOrganization\u201d and noun phrases (with tags \u201cNNP\u201d or \u201cNNPS\u201d) tend to use characterlevel representations, which is consistent with human intuition because those tokens are usually infrequent or display rich morphologies. Also, DOCLEN-4, WH-adverb (\u201cWRB\u201d), and conjunction (\u201cIN\u201d and \u201cCC\u201d) tokens tend to use word-level representations because they appear frequently.\nWe also sample random span of text from the SQuAD dataset, and visualize the average gate values in Figure 4. The results are consistent with our observations in Figure 3. Rare tokens, noun phrases, and named entities tend to use character-level representations, while others tend to use word-level representations. To further justify this argument, we also list the tokens with highest and lowest gate values in Table 4."}, {"heading": "5 CONCLUSIONS", "text": "We present a fine-grained gating mechanism that dynamically combines word-level and characterlevel representations based on word properties. Experiments on the Twitter tag prediction dataset show that fine-grained gating substantially outperforms scalar gating and concatenation. Our method also improves the performance on reading comprehension and achieves new state-of-the-art results on CBT. In our future work, we plan to to apply the fine-grained gating mechanism for combining other levels of representations, such as phrases and sentences. It will also be intriguing to integrate NER and POS networks and learn the token representation in an end-to-end manner."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work is funded by Disney, the ADeLAIDE grant FA8750-16C-0130-001, and the ONR grant N000141310721."}], "references": [{"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In ICLR,", "citeRegEx": "Bahdanau et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2015}, {"title": "A thorough examination of the cnn/daily mail reading comprehension", "author": ["Danqi Chen", "Jason Bolton", "Christopher D Manning"], "venue": null, "citeRegEx": "Chen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2016}, {"title": "On the properties of neural machine translation: Encoder-decoder approaches", "author": ["Kyunghyun Cho", "Bart Van Merri\u00ebnboer", "Dzmitry Bahdanau", "Yoshua Bengio"], "venue": "In Eighth Workshop on Syntax, Semantics and Structure in Statistical Translation,", "citeRegEx": "Cho et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2014}, {"title": "Natural language processing (almost) from scratch", "author": ["Ronan Collobert", "Jason Weston", "L\u00e9on Bottou", "Michael Karlen", "Koray Kavukcuoglu", "Pavel Kuksa"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Collobert et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Attention-over-attention neural networks for reading comprehension", "author": ["Yiming Cui", "Zhipeng Chen", "Si Wei", "Shijin Wang", "Ting Liu", "Guoping Hu"], "venue": "arXiv preprint arXiv:1607.04423,", "citeRegEx": "Cui et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cui et al\\.", "year": 2016}, {"title": "Gated-attention readers for text comprehension", "author": ["Bhuwan Dhingra", "Hanxiao Liu", "Zhilin Yang", "William W Cohen", "Ruslan Salakhutdinov"], "venue": "arXiv preprint arXiv:1606.01549,", "citeRegEx": "Dhingra et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Dhingra et al\\.", "year": 2016}, {"title": "Tweet2vec: Character-based distributed representations for social media", "author": ["Bhuwan Dhingra", "Zhong Zhou", "Dylan Fitzpatrick", "Michael Muehl", "William W Cohen"], "venue": "In ACL,", "citeRegEx": "Dhingra et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Dhingra et al\\.", "year": 2016}, {"title": "Teaching machines to read and comprehend", "author": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom"], "venue": "In NIPS,", "citeRegEx": "Hermann et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hermann et al\\.", "year": 2015}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations", "author": ["Felix Hill", "Antoine Bordes", "Sumit Chopra", "Jason Weston"], "venue": "In ICLR,", "citeRegEx": "Hill et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hill et al\\.", "year": 2016}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "Hochreiter and Schmidhuber.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Text understanding with the attention sum reader network", "author": ["Rudolf Kadlec", "Martin Schmid", "Ondrej Bajgar", "Jan Kleindienst"], "venue": "In ACL,", "citeRegEx": "Kadlec et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kadlec et al\\.", "year": 2016}, {"title": "Character-aware neural language models", "author": ["Yoon Kim", "Yacine Jernite", "David Sontag", "Alexander M Rush"], "venue": "In AAAI,", "citeRegEx": "Kim et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kim et al\\.", "year": 2016}, {"title": "Finding function in form: Compositional character models for open vocabulary word representation", "author": ["Wang Ling", "Tiago Lu\u0131\u0301s", "Lu\u0131\u0301s Marujo", "Ram\u00f3n Fernandez Astudillo", "Silvio Amir", "Chris Dyer", "Alan W Black", "Isabel Trancoso"], "venue": "In EMNLP,", "citeRegEx": "Ling et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ling et al\\.", "year": 2015}, {"title": "Achieving open vocabulary neural machine translation with hybrid word-character models", "author": ["Minh-Thang Luong", "Christopher D Manning"], "venue": "In ACL,", "citeRegEx": "Luong and Manning.,? \\Q2016\\E", "shortCiteRegEx": "Luong and Manning.", "year": 2016}, {"title": "Gated word-character recurrent language model", "author": ["Yasumasa Miyamoto", "Kyunghyun Cho"], "venue": "In EMNLP,", "citeRegEx": "Miyamoto and Cho.,? \\Q2016\\E", "shortCiteRegEx": "Miyamoto and Cho.", "year": 2016}, {"title": "Neural semantic encoders", "author": ["Tsendsuren Munkhdalai", "Hong Yu"], "venue": "arXiv preprint arXiv:1607.04315,", "citeRegEx": "Munkhdalai and Yu.,? \\Q2016\\E", "shortCiteRegEx": "Munkhdalai and Yu.", "year": 2016}, {"title": "Squad: 100,000+ questions for machine comprehension of text", "author": ["Pranav Rajpurkar", "Jian Zhang", "Konstantin Lopyrev", "Percy Liang"], "venue": "In EMNLP,", "citeRegEx": "Rajpurkar et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rajpurkar et al\\.", "year": 2016}, {"title": "Iterative alternating neural attention for machine reading", "author": ["Alessandro Sordoni", "Phillip Bachman", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1606.02245,", "citeRegEx": "Sordoni et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Sordoni et al\\.", "year": 2016}, {"title": "Natural language comprehension with the epireader", "author": ["Adam Trischler", "Zheng Ye", "Xingdi Yuan", "Kaheer Suleman"], "venue": "In EMNLP,", "citeRegEx": "Trischler et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Trischler et al\\.", "year": 2016}, {"title": "Machine comprehension using match-lstm and answer pointer", "author": ["Shuohang Wang", "Jing Jiang"], "venue": "arXiv preprint arXiv:1608.07905,", "citeRegEx": "Wang and Jiang.,? \\Q2016\\E", "shortCiteRegEx": "Wang and Jiang.", "year": 2016}, {"title": "On multiplicative integration with recurrent neural networks", "author": ["Yuhuai Wu", "Saizheng Zhang", "Ying Zhang", "Yoshua Bengio", "Ruslan Salakhutdinov"], "venue": "In NIPS,", "citeRegEx": "Wu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wu et al\\.", "year": 2016}, {"title": "Learning multi-relational semantics using neural-embedding models", "author": ["Bishan Yang", "Wen-tau Yih", "Xiaodong He", "Jianfeng Gao", "Li Deng"], "venue": "In NIPS 2014 workshop on Learning Semantics,", "citeRegEx": "Yang et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2014}, {"title": "Multi-task cross-lingual sequence tagging from scratch", "author": ["Zhilin Yang", "Ruslan Salakhutdinov", "William Cohen"], "venue": "arXiv preprint arXiv:1603.06270,", "citeRegEx": "Yang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2016}, {"title": "Review networks for caption generation", "author": ["Zhilin Yang", "Ye Yuan", "Yuexin Wu", "Ruslan Salakhutdinov", "William W Cohen"], "venue": "In NIPS,", "citeRegEx": "Yang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2016}, {"title": "End-to-end answer chunk extraction and ranking for reading comprehension", "author": ["Yang Yu", "Wei Zhang", "Kazi Hasan", "Mo Yu", "Bing Xiang", "Bowen Zhou"], "venue": "arXiv preprint arXiv:1610.09996,", "citeRegEx": "Yu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 12, "context": "Word-level representations are good at memorizing the semantics of the tokens while character-level representations are more suitable for modeling sub-word morphologies (Ling et al., 2015; Yang et al., 2016a).", "startOffset": 169, "endOffset": 208}, {"referenceID": 12, "context": "Word-level representations are good at memorizing the semantics of the tokens while character-level representations are more suitable for modeling sub-word morphologies (Ling et al., 2015; Yang et al., 2016a). For example, considering \u201ccat\u201d and \u201ccats\u201d, word-level representations can only learn the similarities between the two tokens by training on a large amount of training data, while character-level representations, by design, can easily capture the similarities. Character-level representations are also used to alleviate the difficulties of modeling out-of-vocabulary (OOV) tokens (Luong & Manning, 2016). Hybrid word-character models have been proposed to leverage the advantages of both word-level and character-level representations. The most commonly used method is to concatenate these two representations (Yang et al., 2016a). However, concatenating word-level and character-level representations is technically problematic. For frequent tokens, the word-level representations are usually accurately estimated during the training process, and thus introducing character-level representations can potentially bias the entire representations. For infrequent tokens, the estimation of wordlevel representations have high variance, which will have negative effects when combined with the character-level representations. To address this issue, recently Miyamoto & Cho (2016) introduced a scalar gate conditioned on the word-level representations to control the ratio of the two representations.", "startOffset": 170, "endOffset": 1385}, {"referenceID": 7, "context": "Previous work has shown the importance of modeling interactions between document and query tokens by introducing various attention architectures for the task (Hermann et al., 2015; Kadlec et al., 2016).", "startOffset": 158, "endOffset": 201}, {"referenceID": 10, "context": "Previous work has shown the importance of modeling interactions between document and query tokens by introducing various attention architectures for the task (Hermann et al., 2015; Kadlec et al., 2016).", "startOffset": 158, "endOffset": 201}, {"referenceID": 0, "context": "The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs.", "startOffset": 73, "endOffset": 116}, {"referenceID": 8, "context": "A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016).", "startOffset": 74, "endOffset": 197}, {"referenceID": 10, "context": "A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016).", "startOffset": 74, "endOffset": 197}, {"referenceID": 18, "context": "A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016).", "startOffset": 74, "endOffset": 197}, {"referenceID": 1, "context": "A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016).", "startOffset": 74, "endOffset": 197}, {"referenceID": 17, "context": "A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016).", "startOffset": 74, "endOffset": 197}, {"referenceID": 4, "context": "A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016).", "startOffset": 74, "endOffset": 197}, {"referenceID": 3, "context": "Ling et al. (2015) introduce a compositional character to word (C2W) model based on bidirectional LSTMs.", "startOffset": 0, "endOffset": 19}, {"referenceID": 3, "context": "Kim et al. (2016) describe a model that employs a convolutional neural network (CNN) and a highway network over characters for language modeling.", "startOffset": 0, "endOffset": 18}, {"referenceID": 3, "context": "Kim et al. (2016) describe a model that employs a convolutional neural network (CNN) and a highway network over characters for language modeling. Miyamoto & Cho (2016) use a gate to adaptively find the optimal mixture of the character-level and word-level inputs.", "startOffset": 0, "endOffset": 168}, {"referenceID": 3, "context": "Kim et al. (2016) describe a model that employs a convolutional neural network (CNN) and a highway network over characters for language modeling. Miyamoto & Cho (2016) use a gate to adaptively find the optimal mixture of the character-level and word-level inputs. Yang et al. (2016a) employ deep gated recurrent units on both character and word levels to encode morphology and context information.", "startOffset": 0, "endOffset": 284}, {"referenceID": 0, "context": "Similar to LSTM, Gated Recurrent Unit (GRU) was proposed by Cho et al. (2014), which also uses gating units to modulate the flow of information.", "startOffset": 60, "endOffset": 78}, {"referenceID": 0, "context": "The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs. Similar to the idea of gating, multiplicative integration has also been shown to provide a benefit in various settings. Yang et al. (2014) find that multiplicative operations are superior to additive operations in modeling relations.", "startOffset": 74, "endOffset": 273}, {"referenceID": 0, "context": "The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs. Similar to the idea of gating, multiplicative integration has also been shown to provide a benefit in various settings. Yang et al. (2014) find that multiplicative operations are superior to additive operations in modeling relations. Wu et al. (2016) propose to use Hadamard product to replace sum operation in recurrent networks, which gives a significant performance boost over existing RNN models.", "startOffset": 74, "endOffset": 385}, {"referenceID": 0, "context": "The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs. Similar to the idea of gating, multiplicative integration has also been shown to provide a benefit in various settings. Yang et al. (2014) find that multiplicative operations are superior to additive operations in modeling relations. Wu et al. (2016) propose to use Hadamard product to replace sum operation in recurrent networks, which gives a significant performance boost over existing RNN models. Dhingra et al. (2016a) use a multiplicative gating mechanism to achieve state-of-the-art results on question answering benchmarks.", "startOffset": 74, "endOffset": 558}, {"referenceID": 0, "context": "The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs. Similar to the idea of gating, multiplicative integration has also been shown to provide a benefit in various settings. Yang et al. (2014) find that multiplicative operations are superior to additive operations in modeling relations. Wu et al. (2016) propose to use Hadamard product to replace sum operation in recurrent networks, which gives a significant performance boost over existing RNN models. Dhingra et al. (2016a) use a multiplicative gating mechanism to achieve state-of-the-art results on question answering benchmarks. Reading comprehension is a challenging task for machines. A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016). Yu et al. (2016) propose a dynamic chunk reader to extract and rank a set of answer candidates from a given document to answer questions.", "startOffset": 74, "endOffset": 940}, {"referenceID": 0, "context": "The gating mechanism can also be viewed as a form of attention mechanism (Bahdanau et al., 2015; Yang et al., 2016b) over two inputs. Similar to the idea of gating, multiplicative integration has also been shown to provide a benefit in various settings. Yang et al. (2014) find that multiplicative operations are superior to additive operations in modeling relations. Wu et al. (2016) propose to use Hadamard product to replace sum operation in recurrent networks, which gives a significant performance boost over existing RNN models. Dhingra et al. (2016a) use a multiplicative gating mechanism to achieve state-of-the-art results on question answering benchmarks. Reading comprehension is a challenging task for machines. A variety of models have been proposed to extract answers from given text (Hill et al., 2016; Kadlec et al., 2016; Trischler et al., 2016; Chen et al., 2016; Sordoni et al., 2016; Cui et al., 2016). Yu et al. (2016) propose a dynamic chunk reader to extract and rank a set of answer candidates from a given document to answer questions. Wang & Jiang (2016) introduce an end-to-end neural architecture which incorporates match-LSTM and pointer networks (Vinyals et al.", "startOffset": 74, "endOffset": 1081}, {"referenceID": 3, "context": "Previous methods defined f using the word-level representation Ew (Collobert et al., 2011), the character-level representation c (Ling et al.", "startOffset": 66, "endOffset": 90}, {"referenceID": 12, "context": ", 2011), the character-level representation c (Ling et al., 2015), or the concatenation [Ew; c] (Yang et al.", "startOffset": 46, "endOffset": 65}, {"referenceID": 3, "context": "Previous methods defined f using the word-level representation Ew (Collobert et al., 2011), the character-level representation c (Ling et al., 2015), or the concatenation [Ew; c] (Yang et al., 2016a). Unlike these methods, we propose to use a gate to dynamically choose between the word-level and character-level representations based on the properties of the token. Let v denote a feature vector that encodes these properties. In this work, we use the concatenation of named entity tags, partof-speech tags, binned document frequency vectors, and the word-level representations to form the feature vector v. Let dv denote the length of v. The gate is computed as follows: g = \u03c3(Wgv + bg) where Wg and bg are the model parameters with shapes de\u00d7 dv and de, and \u03c3 denotes an elementwise sigmoid function. The final representation is computed using a fine-grained gating mechanism, h = f(c,w) = g c+ (1\u2212 g) (Ew) where denotes element-wise product between two vectors. An illustration of our fine-grained gating mechanism is shown in Figure 1. Intuitively speaking, when the gate g has high values, more information flows from the character-level representation to the final representation; when the gate g has low values, the final representation is dominated by the word-level representation. Though Miyamoto & Cho (2016) also use a gate to choose between word-level and character-level representations, our method is different in two ways.", "startOffset": 67, "endOffset": 1321}, {"referenceID": 4, "context": "Attention-over-attention (AoA) (Cui et al., 2016) defines a dot product between each pair of tokens in the document and the query, i.", "startOffset": 31, "endOffset": 49}, {"referenceID": 5, "context": "We use the Twitter dataset and follow the experimental settings in Dhingra et al. (2016b). We also use the same network architecture upon the token representations, which is an LSTM layer followed by a softmax classification layer (Dhingra et al.", "startOffset": 67, "endOffset": 90}, {"referenceID": 5, "context": "We use the Twitter dataset and follow the experimental settings in Dhingra et al. (2016b). We also use the same network architecture upon the token representations, which is an LSTM layer followed by a softmax classification layer (Dhingra et al., 2016b). The Twitter dataset consists of English tweets with at least one hashtag from Twitter. Hashtags and HTML tags have been removed from the body of the tweet, and user names and URLs are replaced with special tokens. The dataset contains 2 million tweets for training, 10K for validation and 50K for testing, with a total of 2,039 distinct hashtags. The task is to predict the hashtags of each tweet. We compare several different methods as follows. Word char concat uses the concatenation of word-level and character-level representations as in Yang et al. (2016a); word char feat concat concatenates the word-level and character-level representations along with the features described in Section 3.", "startOffset": 67, "endOffset": 819}, {"referenceID": 5, "context": "We use the Twitter dataset and follow the experimental settings in Dhingra et al. (2016b). We also use the same network architecture upon the token representations, which is an LSTM layer followed by a softmax classification layer (Dhingra et al., 2016b). The Twitter dataset consists of English tweets with at least one hashtag from Twitter. Hashtags and HTML tags have been removed from the body of the tweet, and user names and URLs are replaced with special tokens. The dataset contains 2 million tweets for training, 10K for validation and 50K for testing, with a total of 2,039 distinct hashtags. The task is to predict the hashtags of each tweet. We compare several different methods as follows. Word char concat uses the concatenation of word-level and character-level representations as in Yang et al. (2016a); word char feat concat concatenates the word-level and character-level representations along with the features described in Section 3.2; scalar gate uses a scalar gate similar to Miyamoto & Cho (2016) but is conditioned on the features; fine-grained gate is our method described in Section 3.", "startOffset": 67, "endOffset": 1020}, {"referenceID": 5, "context": "The \u201cGA word char concat\u201d results are extracted from Dhingra et al. (2016a). Our results on fine-grained gating are based on a single model.", "startOffset": 53, "endOffset": 76}, {"referenceID": 4, "context": "697 Cui et al. (2016) 0.", "startOffset": 4, "endOffset": 22}, {"referenceID": 4, "context": "697 Cui et al. (2016) 0.722 0.694 0.778 0.720 Munkhdalai & Yu (2016) 0.", "startOffset": 4, "endOffset": 69}, {"referenceID": 8, "context": "In this section, we experiment with two datasets, the Children\u2019s Book Test dataset (Hill et al., 2016) and the SQuAD dataset (Rajpurkar et al.", "startOffset": 83, "endOffset": 102}, {"referenceID": 16, "context": ", 2016) and the SQuAD dataset (Rajpurkar et al., 2016).", "startOffset": 30, "endOffset": 54}, {"referenceID": 5, "context": "We closely follow the setting in Dhingra et al. (2016a) and incrementally add different components to see the changes in performance.", "startOffset": 33, "endOffset": 56}, {"referenceID": 5, "context": "We closely follow the setting in Dhingra et al. (2016a) and incrementally add different components to see the changes in performance. For the fine-grained gating approach, we use the same hyper-parameters as in Dhingra et al. (2016a) except that we use a character-level GRU with 100 units to be of the same size as the word lookup table.", "startOffset": 33, "endOffset": 234}, {"referenceID": 16, "context": "The Stanford Question Answering Dataset (SQuAD) is a reading comprehension dataset collected recently (Rajpurkar et al., 2016).", "startOffset": 102, "endOffset": 126}], "year": 2016, "abstractText": "Previous work combines word-level and character-level representations using concatenation or scalar weighting, which is suboptimal for high-level tasks like reading comprehension. We present a fine-grained gating mechanism to dynamically combine word-level and character-level representations based on properties of the words. We also extend the idea of fine-grained gating to modeling the interaction between questions and paragraphs for reading comprehension. Experiments show that our approach can improve the performance on reading comprehension tasks, achieving new state-of-the-art results on the Children\u2019s Book Test dataset. To demonstrate the generality of our gating mechanism, we also show improved results on a social media tag prediction task.", "creator": "LaTeX with hyperref package"}}}