{"id": "1611.05187", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Nov-2016", "title": "Variable Neighborhood Search Algorithms for the multi-depot dial-a-ride problem with heterogeneous vehicles and users", "abstract": "In every idea, but applied on Variable Neighborhood Search algorithm and supporting - depot mobile - taken - fun problems is suggested. In dial - that - riding without diagnose need to be stationed from pre - specified pickup cities bring early - specified while centers, under different circumstances. The addressed longer presents several constraints and features, others considered networked vehicles, distributed in number depots, them homogenous infection. The aim this of maximize similar compared routing cost, down respecting time - rows, takes - same, producing and alignment threshold constraints. The precise of but graduate though especially insufficient two make algorithm configuration in significant in weeks method, chinatown including besides on expedited. At. initiatives, along unlike ensure should the turing of taken initial solution, 38 well type created community along months some site procedures, one ever deepening - route mean already once, handful been recognized and 45.", "histories": [["v1", "Wed, 16 Nov 2016 09:05:54 GMT  (39kb)", "http://arxiv.org/abs/1611.05187v1", null]], "reviews": [], "SUBJECTS": "cs.DM cs.AI", "authors": ["paolo detti", "garazi zabalo manrique de lara"], "accepted": false, "id": "1611.05187"}, "pdf": {"name": "1611.05187.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Paolo Detti", "Garazi Zabalo", "Manrique de Lara"], "emails": ["detti@dii.unisi.it", "garazizml@gmail.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n61 1.\n05 18\n7v 1\nIn this work, a study on Variable Neighborhood Search algorithms for multi-depot dial-a-ride problems is presented. In dial-a-ride problems patients need to be transported from pre-specified pickup locations to pre-specified delivery locations, under different considerations. The addressed problem presents several constraints and features, such as heterogeneous vehicles, distributed in different depots, and heterogeneous patients. The aim is of minimizing the total routing cost, while respecting time-window, ride-time, capacity and route duration constraints. The objective of the study is of determining the best algorithm configuration in terms of initial solution, neighborhood and local search procedures. At this aim, two different procedures for\n\u2217Dipartimento di Ingegneria dell\u2019Informazione e Scienze Matematiche, University of Siena, Via Roma, 56, 53100 Siena, Italy, e-mail detti@dii.unisi.it \u2020Dipartimento di Ingegneria dell\u2019Informazione e Scienze Matematiche, University of Siena, Via Roma, 56, 53100 Siena, Italy, e-mail garazizml@gmail.com\n1\nthe computation of an initial solution, six different type of neighborhoods and five local search procedures, where only intra-route changes are made, have been considered and compared. We have also evaluated an \u201dadjusting procedure\u201d that aims to produce feasible solutions from infeasible solutions with small constraints violations. The different VNS algorithms have been tested on instances from literature as well as on random instances arising from a real-world healthcare application. keywords: Dial-a-ride problem, multi-depot, Heterogeneous users and vehicles, Metaheuristic, Variable Neighborhood Search."}, {"heading": "1 Introduction", "text": "In this work, Variable Neighborhood Search (VNS) algorithms for the multi-depot dial-a-ride problem (DARP) with heterogeneous vehicles and users are presented. In the problem, vehicles have different sizes and features and are located in multiple depots. Users can only use compatible vehicles, and must be transported from a specific origin location to a specific destination location and eventually vice versa. The lengths of the routes assigned to the vehicles cannot exceed given limits. Quality of service requirements impose the fulfillment of pickup and delivery time windows and a limited ride time for each user.\nIn this paper, an extensive computational study is proposed to evaluate different Variable Neighborhood Search (VNS) algorithms for DARP. The algorithms are based on the general framework already introduced in Parragh et al. [23], for the single-depot case with homogeneous vehicles and users, and extended in [14] to the multi-depot DARP with heterogeneous vehicles and users in Detti et al. [14]. More precisely, in [14], a VNS scheme is proposed for solving a real-world healthcare\n2\napplication, concerning the non-emergency transportation of patients in Italy [1, 9]. In the healthcare application, constraints on arrival and departure times, patient-vehicle compatibility, patients\u2019 preferences and quality of service issues were considered.\nThe main contributions of this paper are reported below. Starting from the VNS framework developed for the real-world healthcare application addressed in [14], new VNS algorithms for the multidepot DARP with heterogeneous users and vehicles have been designed, presented and tested. The aim is to evaluate in terms of solution\u2019s quality and computational time different (i) algorithms for finding an initial solution, (ii) combinations of neighborhoods\u2019 sets and (iii) local search procedures. Furthermore, new benchmark multi-depot instances of DARP with heterogeneous vehicles and users are presented, generated from the real-world data of the problem addressed in [14]. The VNS algorithms are evaluated and tested on three sets of benchmark instances. The first set has been presented in [22] and contains single-depot DARP instances, partitioned into three subsets. The second set has been introduced in [6] and contains multi-depot instances generated by the three subsets presented in [22]. As already stated, the third set arises from the real-world healthcare application addressed in [14].\nThe paper is organized as follows. In Section 2, a literature review is presented. In Sections 3, a description of the problem is given. Section 4 is devoted to the presentation of the variable neighborhood search algorithms. In Section 5, the benchmark instances are described. Computational results on the benchmark instances are reported in Section 6. Conclusions follow in Section 7.\n3"}, {"heading": "2 Literature review", "text": "DARP is a generalization of the Pickup and Delivery Problem with Time Windows (PDPTW ) [5, 17, 28]. In DARP, people are transported instead of goods and consequently issues on the quality of the provided service and timing must be carefully taken into account (through additional constraints or by extra terms in the objective function). For recent surveys on DARP and PDPTW, we refer the reader to Cordeau and Laporte [12] and Berbeglia et al. [4].\nPromising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27]. However, due to the difficulty of modeling all the constraints of the real-world problems and of solving large dimension instances, many studies have been also focused on the development of heuristic and metaheuristic approaches [18].\nAlthough several studies about DARPs have been proposed in the literature, most of the papers deal with a single user type and a homogeneous fleet of vehicles located at a single depot, while few works address the with multi-depots, heterogeneous vehicles and users (e.g., see [6], [7] and [14]).\nIn [6], the multi-depot DARP with heterogeneous vehicles and users is considered, where quality of service is limited to patients\u2019 ride times and the route costs depend on the traveled distance. The authors propose a deterministic annealing metaheuristic and an exact Branch-and-Cut algorithm based on a the PDPTW2 formulation of Ropke et al. [27].\nIn Carnes et al. [7], a multi-depot DARP application coming from an air-ambulance service context is addressed (compatibility constraints among patients exist, too, e.g., patients cannot be transported with another patient owing to infectiousness). The authors consider a complex cost function\n4\nfor routing costs. The instances handled in [7] contain no more than 30 requests per day and are solved by a set partitioning formulation.\nAs already stated, in [14], a multi-depot DARP is addressed, arising from a real-world healthcare application. For this application, metaheuristic algorithms based on the Tabu Search (TS) and the Variable Neighborhood Search (VNS) techniques are presented and a Mixed Integer Linear Programming (MILP) formulation is proposed. A performance analysis based on instances generated by real-life data shows that VNS attains the best results in terms of solution quality and computational times.\nConcerning the metaheuristic approaches, the tabu search and the variable neighborhood search techniques have been widely applied to DARPs. Cordeau and Laporte [11] first applied TS to a case of DARP with a single depot, where constraints related to vehicles\u2019 capacity, route duration and maximum ride time of any user on a vehicle were considered.\nPaquette et al. [21] developed a multicriteria heuristic embedding a tabu search process for solving a DARP, with a heterogeneous fleet of vehicles and two types of users: ambulatory and wheelchairbound. In addition to travel costs, the objective function includes three quality terms, in order to reduce user\u2019s inconveniences: the waiting time at the pickup node, the waiting time at the delivery node and user\u2019s ride time. The proposed solution procedure combines some features of the tabu search heuristic of Cordeau and Laporte [11] and of the multicriteria reference point method of Climaco et al. [8]. Melachrinoudis et al. [19] proposed a TS heuristic to address a single-depot DARP with soft time windows that arises in a non-profit organization system operating in the Boston metropolitan area. To minimize user\u2019s inconveniences, they employ an objective function that includes excess riding time, early/late delivery time before service and late pickup time after service.\n5\nBeaudry et al. [3] implemented a two-phase procedure for the dynamic DARP arising in several large hospitals. Different modes of transportation (e.g. a wheelchair or a stretcher) are considered, and a maximum ride time is given to limit patients\u2019 inconveniences. The first phase consists in generating an initial feasible solution through a simple and fast insertion scheme. In the second phase, this solution is improved with a TS scheme.\nAlso variable neighborhood search based heuristics have been successfully proposed for solving DARPs. Parragh et al. [23] proposed a VNS heuristic with three neighborhood types for a single-depot DARP with homogeneous vehicles, constraints on route duration and time windows and maximum users\u2019 ride times. In [24], a collaborative scheme has been proposed, integrating the VNS heuristic into a column generation framework, for a variant of DARP, arising in the Austrian Red Cross context, with driver-related constraints, heterogeneous vehicles and patients. Muelas et al. [20] propose a VNS-based algorithm with seven different neighborhood classes (or shakers) for a DARP that arises in the area of San Francisco. In their work patients and visitors must be transported from a set of hospitals located around the city to their home addresses (and vice versa), using a fleet of homogeneous vehicles.\nRecently, new metaheuristic approaches have been proposed for DARP in [6] and [25]. As already stated, in [6], a deterministic annealing metaheuristic is proposed for the multi-depot DARP with heterogeneous vehicles and users. In [25], a hybrid column generation and a large neighborhood search algorithm are presented for solving a single-depot DARP with homogeneous vehicles, maximum user ride times, route duration limits, and vehicle capacity constraints.\n6"}, {"heading": "3 Problem Description and Formulation", "text": "In the DARP with multi-depots, heterogeneous vehicles and users, a number of requests have to be served to transport users from a given origin to a given destination by a fleet of vehicles, located at geographically distributed depots.\nWhile in the standard DARP, all vehicles have the same capacity and are located at a single depot [11], in the heterogeneous multi-depot case, each vehicle, with its own equipment and capacity, is assigned to a specific depot and must start and end its route at this depot. Users are heterogeneous since they cannot be transported by all the vehicles, but only by the ones with the required equipment. The problem consists in assigning the transportation requests to the vehicles and in finding a routing of each vehicle, in such a way that a total transportation cost is minimized and quality of service requirements are respected.\nMany constraints can be taken into account, regarding the vehicles\u2019 capacities, fulfillment of pickup and delivery time windows, precedence relationships among pickup and delivery locations, patients\u2019 preferences and patient-vehicle compatibility, the quality and the timing of the service provided. The capacity constraints are related to the number of available seats in the vehicle and to the number of seats occupied by each users (e.g., in healthcare, the users are patients that may need a stretcher or a wheelchair to be transported, causing an occupation of more than one seat on a given vehicle). The compatibility constraints take into account the specific setup of the vehicle that can be used to serve a given user typology (for example, a patient on a stretcher can only be transported by an ambulance). The time windows constraints are related to the users, requiring that each pickup and delivery location need to be reached within a time interval. The precedence relationships state that\n7\nthe patients should be picked up prior to their deliveries. The quality of service requirements impose that the transportation service fulfills given indices of the quality of service, such as limits on the durations of the routes and on the ride times of the users. In the next section a Mixed Integer Linear Programming (MILP) formulation is given for the problem."}, {"heading": "3.1 A MILP formulation", "text": "In this section, a three index formulation MILP formulation for the problem is presented. The MILP formulation extends the formulation proposed by Cordeau [10] for the standard DARP to the multidepot case. (The number of the variables of the formulation is reduced by using aggregate variables as proposed in [10].)\nFirst of all, some notation is introduced. Let G = (V,A) be a complete directed graph, where V = {1, . . . ,n,n+1, . . . ,2n,2n+1, . . . ,2n+ p} is the node set and A = {(i, j) : i, j \u2208V} is the arc set. The nodes P = {1, . . . ,n} are pickup nodes, the nodes D = {n+1, . . . ,2n} are delivery nodes and the nodes DEP = {2n+1, . . . ,2n+ p} represent the depots. Hence, each transportation request i can be denoted by the nodes {i, i+n} in V , for i = 1, . . . ,n.\nThe following notation and parameters will be used throughout the paper.\n\u2022 T R = {1, . . . ,n} set of transportation requests;\n\u2022 M = {1, . . . ,m} set of vehicles;\n\u2022 K set of vehicle types (defined by the pair vehicle typology and depot in which the vehicle is\nlocated);\n\u2022 Mk, with |Mk|= mk, set of vehicles of type k, k = 1, . . . , |K|. Hence, M = \u22c3K k=1 Mk;\n8\n\u2022 dep(p) depot in which vehicle p \u2208 M is located;\n\u2022 qp capacity of a vehicle p \u2208 M;\n\u2022 ti, j \u2265 0 travel time for arc (i, j) \u2208 A;\n\u2022 di, j \u2265 0 distance of arc (i, j) \u2208 A;\n\u2022 sti, service time, time to load or unload an user at a node i \u2208 P\u222aD;\n\u2022 Ti maximum ride time of the user related to the transportation request {i, i+n};\n\u2022 Ki set of vehicle types that are able (or that are preferred by the user) to serve the transportation\nrequest {i, i+n};\n\u2022 R the set of seat types in the vehicles;\n\u2022 Cp,r number of seats of type r on vehicle p;\n\u2022 qri number of seats of type r that are occupied (if i is a pickup node) or freed (if i is a delivery\nnode) when node i \u2208 P\u222aD is visited;\n\u2022 RD maximum route duration.\n\u2022 ei beginning of the time window at node i;\n\u2022 li end of the time window at node i.\nThe time window [ei, li] of each node i \u2208 P\u222aD indicates that a service at node i can only take place between time ei and li. A vehicle is allowed to arrive to the location of i before the start of the time window, but it has to wait ei to begin the load or the unload of the patient.\n9\nThe MILP formulation employs the following variables.\n\u2022 Ai arrival time of a vehicle at node i \u2208 P\u222aD;\n\u2022 Bi beginning of the service of a vehicle at node i \u2208 P\u222aD;\n\u2022 Api arrival time of vehicle p at depot i \u2208 DEP;\n\u2022 Bpi beginning of the service of vehicle p at depot i \u2208 DEP;\n\u2022 Li ride time of the user related to node i ;\n\u2022 Qp,ri load of vehicle p leaving node i when user i occupies a seat of type r;\n\u2022 xpi j \u2208 {0,1} be equal to 1 if vehicle p traversed arc (i, j) and 0 otherwise.\nThe objective function reads as follows\nmin \u2211 i, j\u2208V \u2211 p\u2208M di jx p i j\nThe constraints of the MILP formulation are reported below.\n\u2211 p\u2208M \u2211 j\u2208V xpi j = 1 \u2200i \u2208 P (1)\n\u2211 j\u2208V xpi j \u2212 \u2211 j\u2208V xpn+i, j = 0 \u2200i \u2208 P, p \u2208 M (2)\n\u2211 i\u2208V xpi j \u2212 \u2211 i\u2208V xpji = 0 \u2200 j \u2208V, p \u2208 M (3)\n\u2211 j\u2208P xpdep(p), j \u2264 1 \u2200p \u2208 M (4)\nConstraints (1) ensure that each request is served exactly once and constraints (2) ensure that each origin\u2013destination pair is visited by the same vehicle. Flow conservation is imposed by equalities (3).\n10\nConstraints (4) state that a vehicle p \u2208 M can not leave from the depot dep(p) more than once.\nQp,rj \u2265 q r i +Q p,r i \u2212C p,r(1\u2212 xpi j) \u2200i, j \u2208V p \u2208 M r \u2208 R (5)\nQp,ri \u2264C p,r \u2200i \u2208V p \u2208 M r \u2208 R (6)\nConstraints (5) are load propagation inequalities and Constraints (6) limit the load on a vehicle for the different seat types.\nA j \u2265 Bi + sti + ti j \u2212 (li + sti + ti j)(1\u2212 x p i j) \u2200i, j \u2208 P\u222aD p \u2208 M (7)\nA j \u2265 B p i + sti + ti j \u2212 (li + sti + ti j)(1\u2212 x p i j) \u2200i \u2208 DEP, j \u2208 P p \u2208 M (8) Apj \u2265 Bi + sti + ti j \u2212 (li + sti + ti j)(1\u2212 x p i j) \u2200i \u2208 D, j \u2208 DEP p \u2208 M (9)\nA j \u2264 Bi + sti + ti j + ldep(p)(1\u2212 x p i j) \u2200i, j \u2208 P\u222aD p \u2208 M (10)\nA j \u2264 B p i + sti + ti j + ldep(p)(1\u2212 x p i j) \u2200i \u2208 DEP, j \u2208 P p \u2208 M (11) Apj \u2264 Bi + sti + ti j + ldep(p)(1\u2212 x p i j) \u2200i \u2208 D, j \u2208 DEP p \u2208 M (12)\nConstraints (7)\u2013(12) state that the arrival time at node j must be equal to Bi+sti+ ti j (to B p i +sti+ ti j) if xpi j = 1 and i /\u2208 DEP (and i \u2208 DEP). More precisely, the constraints impose that, if x p i j = 1, A j can not be bigger than Bi + sti + ti j or B p i + sti + ti j, depending if i /\u2208 DEP or not, respectively. In the constraints, ldep(p) is the end of the time window at the depot of vehicle p.\n11\nLi = Bn+i + stn+i \u2212 (Bi + sti) \u2200i \u2208 P (13)\nti,n+i + stn+i \u2264 Li \u2264 Ti \u2200i \u2208 P (14)\nei \u2264 Bi \u2264 li \u2200i \u2208 P\u222aD (15)\nApdep(p)\u2212B p dep(p) \u2264 RD \u2200p \u2208 M (16) Apdep(p)\u2212B p dep(p) \u2265 0 \u2200p \u2208 M (17)\nEqualities (13) define the ride time of each user. Time window and maximum ride time compliance are ensured by (14) and (15), and Constraints (16) limit the maximum length of each route.\nConstraints (17) state that the arrival of a vehicle to the depot must be after the beginning of the service, corresponding to the departure time of the vehicle. Finally, the compatibility constraints between vehicles and patients and the patient preferences (constraints (18)), and the variable domains can be written as\nxpi, j = 0 i \u2208 P\u222aD \u2200p \u2208 Mk : k \u2208 K \\Ki (18)\nApi ,B p i ,Li,Q p i \u2265 0 \u2200i \u2208V p \u2208 M (19)\nxpi j \u2208 {0,1} \u2200i, j \u2208V p \u2208 M. (20)"}, {"heading": "4 Variable Neighborhood Search algorithms", "text": "In this section, the general algorithmic framework used to develop the VNS algorithms is presented. The framework is similar to those presented in [23] and [14]. However, an algorithm for the initial solution, new neighborhoods and local search procedures are proposed, with the aim of finding the\n12\nmost promising configurations in terms of solution quality and computational time. The algorithms will be presented into detail and tested in Section 6.\nThe general algorithmic framework has two main steps. In the step 1, first an initial solution, s0, is generated. Then, s0 undertakes a local search step, yielding s, i.e., the first incumbent solution. The second step of the algorithm is an iterative step. At each iteration h, a new solution, s\u2032, is created in the neighborhood Nh(s) by a shaking procedure. Afterwards a local search step is applied to s\u2032 yielding s\u2032\u2032. If s\u2032\u2032 is quasi-feasible, i.e., only violates one constraint type of a small amount, a new local search phase (called Adjusting procedure) is applied to s\u2032\u2032, in order to get a feasible solution. A scheme of the general framework is reported in Algorithm 1."}, {"heading": "4.1 Evaluation Function", "text": "As in [14], [11] and [23], the evaluation function f (s) used by the VNS algorithms has two main terms and is equal to f (s) = f1(s)+ f2(s), where s is a problem solution. Function f1(s) contains the objective function of the problem, i.e., the total distance travelled by all the vehicles. The term f2(s) is a penalization component of the form: f2(s) = \u03b1t(s)+\u03b2w(s)+ \u03b3q(s)+ \u03c4d(s), where t(s), w(s), q(s) and d(s) represent the total violation of solution s with respect to the constraints on patient ride times, time windows, vehicle capacities and route duration, respectively, and \u03b1 , \u03b2 , \u03b3 and \u03c4 are positive penalty coefficients. Let p(i) be the vehicle serving node i in the solution s. In more detail, violations are calculated as follows:\n\u2022 t(s) = \u2211i\u2208P(Li \u2212Ti)+;\n\u2022 w(s) = \u2211i\u2208P\u222aD(Ai\u2212 li)++(ei \u2212Ai)+. Recall that early arrival is allowed, but the vehicle has to\n13\nAlgorithm 1 Scheme of the Variable Neighborhood Search algorithm\n\\\\ Initial Solution\nGenerate the initial solution s0; Apply local search to s0 yielding s; If s is feasible. Set sbest := s\u2032best := s. Else set sbest := s \u2032 best :=+\u221e; Set h := 1; Repeat { \\\\ Shaking Randomly choose s\u2032 in Nh(s);\nIf f1(s)< 1.02 f1(s\u2032)\n\\\\ Local Search Apply local search procedure(s) to the routes in s\u2032 that have been changed yielding s\u2032\u2032;\nelse Set s\u2032\u2032 := s\u2032; If s\u2032\u2032 is feasible and f (s\u2032\u2032)< f (sbest )\nSet sbest := s\u2032\u2032 and s := s\u2032\u2032 and h := 0;\nElse\nIf f (s\u2032\u2032)< f (s)\nSet s := s\u2032\u2032 and set h := 0;\n\\\\ Adjusting procedure\nIf s\u2032\u2032 only violates capacity, (or ride time or time windows) constraint and q(s)< qmax (ort(s)< tmaxorw(s)< wmax)\nApply the adjusting procedure to s\u2032\u2032 yielding sad j; If sad j is feasible and f (sad j)< f (s\u2032best)\nSet s\u2032best := sad j;\nSet h := (h mod hmax)+1;\n} Until Itmax iterations are reached If f (sbest)< f (s\u2032best) return sbest Else return s \u2032 best .\n14\nwait until the start of the time window to begin the load or the unload service.\n\u2022 q(s) = \u2211r\u2208R \u2211i\u2208P\u222aD(Q p(i),r i \u2212C p(i),r)+.\n\u2022 d(s) = \u2211p\u2208K((A p dep(p)\u2212B p dep(p))\u2212RD) +.\nInitially, coefficients \u03b1 , \u03b2 , \u03b3 and \u03c4 are set to given values \u03b10, \u03b20, \u03b30 and \u03c40, respectively, and each time a new incumbent solution is found are modified by a factor of 1+\u03b4 . In the VNS, \u03b4 is randomly chosen between 0.05 and 0.1, and changes every time a new incumbent solution is found."}, {"heading": "4.2 Initial Solution", "text": "Two heuristics have been used to generate the initial solution s0 in the algorithms.\nThe first heuristic (called Heuristic 1) is a constructive heuristic already used in [14] and works as follows. The transportation requests are first sorted according to the pickup earliest time, ei. According to this ordering, the requests are assigned and inserted in the routes: first the pickup node is inserted and right after the delivery node. A request can be assigned to a route only if the compatibility constraints are respected. Capacity or ride time violations are not considered during this insertion phase. The assignment of the request to the routes is performed according to a minimum distance criterium. More precisely, a request is assigned to the route minimizing the average between the distance from the destination of the last request on the route (if the route is still empty the depot destination is taken instead) to the origin of the request to assign, and the distance from the destination of the request to assign to the depot. If an assignment does not satisfy the time window constraints or pre-specified limits on the length of the route, the insertion is not performed and the next route that minimizes the distance criterium, as described above, is considered. If, at the end, the request is not\n15\nassigned to any route, the request is assigned to the route that produces the smallest increase on the route length (without regarding the time window constraints).\nThe second heuristic (called Heuristic 2), computationally more expensive, works as follows. The transportation requests are first randomly sorted. According to this ordering, each request is assigned and inserted in all the routes in the best possible position, i.e., the position that minimizes the objective function. This procedure is repeated 1000 times, and the solution with the smaller value of the objective function is chosen as initial solution."}, {"heading": "4.3 Shaking", "text": "Six different types of neighborhoods have been considered, called swap, move, repairing move, chain, eliminate and intra-move. Neighborhoods swap, chain, and move have been introduced in [23] and [22], respectively. Repairing move have been introduced in [14]. Finally, the neighborhood eliminate is an adapted version of that used in [14], and intra-move is a new neighborhood developed specifically for the problem considered in this paper.\nThe VNS algorithms preseted into detail in Section 6 contain different subsets of the above neigh-\nborhoods. In what follows, a description of each neighborhood is given."}, {"heading": "4.3.1 Swap", "text": "In the neighborhood swap, two sequences of requests belonging to two different routes are exchanged. The two sequences have a length not bigger than h, where h is the size of the current neighborhood. Hence, a swap of size h= 2 consists in exchanging two sequences not longer than two. More precisely, the two sequences are exchanged, as follows. First two routes are randomly selected. Then, the\n16\nlengths of the sequences in the two routes to be swapped are randomly chosen. (These lengths must be at most the size of the neighborhood h). Then, the first nodes of the two sequences are randomly chosen. Due to the compatibility and preference constraints, all requests of the first (second) sequence must be compatible with the vehicle of the second (first) route. Otherwise, the whole process will start again. After the selection of the routes and of the sequences, the requests of each sequence are removed from their original route and inserted in the best possible position in the destination route (respecting the order of the sequence). The allocation of the requests of each sequence is done one by one, first inserting the pickup and then inserting the delivery. The insertion is performed in the location that minimizes the evaluation function."}, {"heading": "4.3.2 Move", "text": "In the neighborhood move, a number of transportation requests are randomly selected and inserted in randomly chosen routes, respecting compatibility and preference constraints. The number of transportation requests to move is randomly chosen between 1 and the size of the current neighborhood, h. The insertion of the requests is performed as in swap. Hence, a move of size h = 3 consists in inserting at most three transportation requests each of them on a different randomly selected route."}, {"heading": "4.3.3 Repairing move", "text": "Repairing move basically works as move, but it applies to infeasible solutions only. In repairing move, the transportation requests to move are randomly selected only from infeasible routes and inserted, as in move, in randomly chosen routes. The maximum number of transportation requests to move is randomly chosen between 1 and the size of the current neighborhood, h. The insertion of the requests\n17\nin the randomly selected routes is performed as in move and swap."}, {"heading": "4.3.4 Chain", "text": "In chain, a sequence of requests is first randomly selected as in swap from an initial route, say r0. Then, the sequence is inserted, as in swap, in a randomly selected destination route, compatible with the requests of the initial sequence. The above procedure is repeated on the destination route (that becomes the new initial route). The procedure is repeated at most h times, where h is the neighborhood size. Hence, a chain of size h = 3 consists in moving a random sequence of length at most three from its initial route to a destination route. Then, from this destination route, another sequence of length at most three is moved to another destination route. Finally, from this third route again a sequence of length at most three is moved to a fourth route."}, {"heading": "4.3.5 Eliminate", "text": "Eliminate generates new solutions by eliminating one existing route. The route with the biggest ratio between the total cost of the route and the number of requests in the route is eliminated. All the requests on the route are eliminated from the route an inserted on randomly chosen compatible routes. The insertion of the requests in the randomly selected routes is performed as in move and swap."}, {"heading": "4.3.6 IntraMove", "text": "IntraMove generates new solutions by removing some requests and re/inserting them in the same routes. A number of requests is randomly chosen. These requests are eliminated and re-inserted in the same routes. The insertion is made as in swap.\n18"}, {"heading": "4.3.7 Neighborhood Order", "text": "In the VNS algorithm, first the simplest neighborhoods are applied and afterwards the more complex and time consuming ones. The IntraMove neighborhood is done at the end of the sequence. More precisely, the neighborhoods are applied with the following order: S1\u2212 RM1 \u2212M1\u2212C1 \u2212 E1\u2212 S2\u2212RM2\u2212M2\u2212C2\u2212E2\u2212 . . .\u2212 Shmax \u2212RMhmax \u2212Mhmax \u2212Chmax \u2212Ehmax \u2212 IM. Where hmax is the maximum size of the neighborhood (in the experiments hmax \u2208 {2;3;4;6}). Let SN be the subset of neighborhoods employed in a the shaking phase of a given VNS algorithm. During its execution, the neighborhoods in SN are applied according to the above order.\nFurtheremore, in all the algorithms, in order to avoid unnecessary operations, only the routes that\nhave been changed by the shaking procedure are involved in the local search."}, {"heading": "4.4 8-step evaluation scheme", "text": "In order to set the beginning of a request in a route in the best possible way and to minimize the total duration of the route, the 8-step evaluation scheme introduced in [11] and used in [23], too, is considered and applied. Given a route, it employs the idea of forward time slack, Fi, where Fi is defined as the largest increase in the beginning of the request at node i that does not cause any violation."}, {"heading": "4.5 Local Search", "text": "Five different local search procedures have been developed and tested. The first three procedures (called Local Search 1, Local Search 2 and Local Search 3) can be used in alternative, the fourth and\n19\nthe fifth (called Focus Local Search and Focus Local Search with 8-step) can be used in combination with one of the first three procedures. The local search procedures are described in the following."}, {"heading": "4.5.1 Local Search 1", "text": "Local Search 1 is a procedure in which only intra-route changes are made. The local search procedure is very similar to the one proposed in [23], but it performs a smaller number of changes and is computationally less expensive, as explained in the following. Given a route changed by the shaking procedure, the nodes corresponding to each transportation request are iteratively removed and inserted in new positions on the route, if the evaluation function is improved. More precisely, given a route, the first pickup node and its delivery node are removed from the route. Then, the pickup node, if the request is an inbound request, or the delivery node, if it is an outbound request are inserted in the best possible position according to the time window constraints. (Observe that, while in the procedure proposed in [23] such a node can be further moved during the search process, in our procedure the position of this node is not changed anymore.) Afterwards, the remaining node is inserted right after (if it is a pickup node) or right before (if it is a delivery node) the first assigned node. If this change improves the evaluation function, then the nodes are fixed in the new positions, otherwise the procedure attempts to move the remaining node to the next possible position, increasing the distance from the first assigned node. This is repeated until the evaluation function is improved or no other possible position exist for the remaining node. If no improvement is found the request is reinserted in the original position. The procedure continues considering the nodes of the next request on the route. The local search ends when the procedure described above is applied to all the routes changed by the shaking procedure.\n20"}, {"heading": "4.5.2 Local Search 2", "text": "As in Local Search 1, in this procedure given a route, the first pickup node and its delivery node are removed from the route. Then, the pickup node, if it is an inbound request, or the delivery node, if it is and outbound request, is inserted in the best possible position according to the time window constraints. Afterwards, the remaining node is inserted in all the possible positions right after (if it is a pickup node) or before (if it is a delivery node) the first assigned node. The remaining node is assigned to the position that minimizes the evaluation function. Then, the procedure continues with the next request on the route. The procedure ends when all the routes in the solution have undertake this local search step.\nObserve that, Local Search 2 can be computationally more expensive than Local Search 1, since\nit attempts to assign the remaining node of each request in all possible positions."}, {"heading": "4.5.3 Local Search 3", "text": "Local Search 3 is very similar to Local Search 2, but it performs a smaller number of moves. In fact, as in Local Search 2, first the critical node is inserted in the best possible position according to the time window constraints. Afterwards, it attempts to assign the remaining node in all the possible positions which do not violate the time window constraints. All the insertions are made as in Local Search 1, first inserting the critical node and then the remaining node."}, {"heading": "4.5.4 Focus Local Search", "text": "Focus Local Search operates on the sequences of transportations requests, belonging to the same route, starting and ending with an empty load. In the procedure, first the routes containing such\n21\na sequences are identified. Then, the sequences are removed from the corresponding routes. The requests involved in the sequences are re-inserted in the same routes following the same insertion procedure used in swap or chain."}, {"heading": "4.5.5 Focus Local Search with 8-step", "text": "This local search procedure basically operates as the Focus Local Search, but just after an insertion of a request the 8-step evaluation scheme (see Section 4.4) is applied to the (partial) current solution in order to minimize the total duration of the route. Hence, this procedure is computationally more expensive than the Focus Local Search. However, the overall computational increase is limited, since only sequences of transportations requests starting and ending with an empty load are involved in the process."}, {"heading": "4.6 Adjusting Procedure", "text": "This procedure tries to produce feasible solutions by perturbing quasi-feasible solutions. It has been first introduced in [14], and is effective in instances in which the ratio n/m is small (i.e., when the number of vehicle is large with respect the number of transportation requests).\nThe procedure involves incumbent solutions s, found during the shaking procedure only violating a single constraint\u2019s type, i.e., capacity, ride time or time window, and in which the violation is below a given threshold. The adjustment procedure chooses, one by one, requests violating the constraint and assigns them either (i) at the beginning or at the end of other already used compatible routes, or (ii) to empty compatible routes, if any. The assignment is performed to the route minimizing the evaluation function. The possibly feasible solution obtained by the adjusting procedure is then\n22\ncompared with the best feasible solution obtained so far by the algorithm."}, {"heading": "5 Benchmark instances", "text": "The experimental campaign has been performed on three sets of benchmark DARP instances.\nThe first set has been proposed in [22] and contains three subsets of single-depot DARP instances, denoted as U , E and I respectively. These instances, denoted in [22] as set I, have been generated from the a instances provided by Cordeau [10], in which heterogeneous real-life aspects arising at the Austrian Red Cross have been introduced. The set U contains instances with a single user/resource type and a homogeneous vehicle fleet, the set E includes four resource types with a homogeneous fleet of vehicles, and the set I contains four user/resource types and a heterogeneous fleet of vehicles. More precisely, the instances in I contain up two types of vehicles and four types of resources: staff seats, patients seats, stretchers and wheelchair places. The users are characterized by the type of seat they require on a vehicle and are of four types: accompanying person, seated patient, patient on on a stretcher or in a wheelchair. Accompanying persons may use staff seats, patients seats or may sit on the stretcher. Seated patients may use a patient seat or may sit on a stretcher. Finally, users transported on a stretcher or in a wheelchair may only use the corresponding places. Table 1 summarizes the pair patient/seat type that are compatible.\nThe second set contains 24 multi-depot instances introduced in [6]. The instances have been generated introducing four vehicle depots in the instances of the set I (presented in [22]). The four depots are respectively located at the coordinates [\u22125;\u22125], [5;5], [\u22125;5] and [5;\u22125]. The vehicles are assigned to the depots in a round robin way.\n23\nThe third set contains instances introduced in [14], extracted from real-world data. The instances are partitioned into two subsets, called large and small instances, and include transportation requests operated in a day by a Local Health Care Agency in Tuscany, an Italian region. In these instances, the users are of three types: seated patient, patient on a stretcher or in a wheelchair. The vehicles belong to four different types, ambulance, bus, car and equipped vehicle, distributed over up to 17 depots. Ambulances and equipped vehicles can be transported at most one patient at time, while buses and cars have a maximum capacity of 8 and 3 seats, respectively. In each instance, patients can be transported only by a subset of vehicles (identified both by the patient\u2019s conditions and by the patient\u2019s preferences). In general, patients on a stretcher can be only transported by an ambulance, patients on a wheelchair can be transported by equipped vehicles or ambulances, while all other patients can use all the vehicles. The large instance set contains 14 instances with the following characteristics: Instances 1\u20134 have 80 transportation requests and 60 vehicles, instances 5\u20139 have 100 transportation requests and 75 vehicles, and instances 10\u201314 have 100 transportation requests and 80 vehicles. The small instance set contains 10 instances, in which the number of requests and vehicles are in the range 10\u201335 and 4\u201320, respectively. The service time to load or unload a patient is 15 minutes in the large\n24\ninstances and 10 minutes in the small instances. In all the instances, the maximum ride time for a transportation request is given by the traveling time from the pickup and delivery location multiplied by 2. Although the instances have been tested in [14], too, by using a complex objective function composed of several terms (including the length and the duration of the routes, waiting times of the vehicles, etc.), here we only consider the total traveled distance as objective function, as for the first two sets of benchmark instances introduced above. In all the distances a route duration limit has been set, too. The instances of the third set are available at http://www.dii.unisi.it/~detti/darp-instances."}, {"heading": "6 Computational results", "text": "Two test phases have been performed. In the first phase, a preliminary computational campaign has been performed, in which twelve VNS algorithms have been developed and tested on the instances of the second set. In the second phase, new VNS algorithms have been generated and tested on all the multi-depot instances (Section 6.2) and on the single-depot instances (Section 6.3), starting from the best algorithms detected in the first phase."}, {"heading": "6.1 Preliminary computational results", "text": "In order to asses the best neighborhood sets, local search and improvement procedures a preliminary test phase has been performed, in which many VNS algorithms have been tested. At this aim, the 24 multi-depot benchmark instances introduced in [6] have been used (i.e., the instances of the second set).\nTwelve VNS algorithms have been developed, characterized by different neighborhood sets, max-\n25\nimum size values and local search procedures. The features of the twelve VNS algorithms are summarized in Table 2. Hence, as an example, referring to the general algorithmic scheme of Algorithm 1, Algo. # 1 employs (i) a shaking phase containing all the neighborhoods except IntraMove, (ii) a local search phase with Local Search 1 and the Focus Local Search, and (iii) a maximum size of the neighborhood (hmax) equal to 6. In all the twelve algorithms, the initial solution is found by applying the Heuristic 1 (see Section 4.2), and \u03b10 = 100, \u03b20 = 1, \u03b30 = 10000, \u03c40 = 1, and ITmax = 15000 have been set.\nTable 3, for each algorithm, reports the average results on the 24 instances. Ten runs of the algorithms on each instances have been performed, resulting in 240 runs for each algorithm. For each\n26\nalgorithm and instance, the results of the best 5 runs out of 10 (in terms of objective function value) have been only considered for Table 3. In the second column, \u201cav cost\u201d is the average objective function value obtained by each algorithm on the best 120 runs (out of 240). For each algorithm, in column 3, \u201cmin cost\u201d reports the average best objective solution value (on the 24 instances) found on the 5 best runs, while, in column 4, \u201c# opt\u201d contains the number of instances, out of 24, in which an optimal solution is found (given in [6]). Column 6 reports the average computational time on the 120 best runs of the algorithms. Finally, columns 7 and 8 contain the percentage average and minimum gap, denoted as \u201cav gap\u201d and \u201cmin gap\u201d, respectively. More precisely, \u201cav gap\u201d is the average, on the 24 instances, of the gaps av gapi, one for each instance i, between the average objective function value, av costi (on the 5 best runs) and the optimal solution value opti, given in [6]. av gapi is computed as (av costi \u2212opti)/opti \u00d7100. A similar definition holds for \u201cmin gap\u201d, where, for each instance i, the best objective function value on the 5 best runs is used instead of av costi.\nWe note that, the best results in terms of solution quality (including the number of times in which an optimal solution is found) are attained by Algorithms 9 and 12. In fact, the \u201cmin gap\u201d values for are Algorithms 9 and 12 are 3.73% and 3.88% while the other algorithms have \u201cmin gap\u201d values always bigger than 4%. Moreover, Algorithm 9 is one of the fastest, with a computational time of 150 seconds, on average. Observe that algorithms 1-4 have sensibly higher computational times, mainly due to the neighborhood Eliminate, computationally expensive.\nIn terms of optimality, Algorithm 2 finds an optimal solution on 4 of the 24 instances (while the others algorithms no more than 3), however it attains on average higher gap values than Algorithms 9 and 12.\n27"}, {"heading": "1 666.47 649.64 3 277.70 6.60 4.08", "text": ""}, {"heading": "2 667.01 649.45 4 308.79 6.63 4.21", "text": ""}, {"heading": "3 665.44 651.55 3 276.17 6.50 4.45", "text": ""}, {"heading": "4 664.87 651.87 3 322.12 6.35 4.46", "text": ""}, {"heading": "5 666.18 652.43 2 159.91 6.80 4.60", "text": ""}, {"heading": "6 674.41 655.78 2 309.43 7.78 5.03", "text": ""}, {"heading": "7 681.11 662.97 1 117.60 9.09 6.39", "text": ""}, {"heading": "8 679.55 661.29 1 128.60 8.83 6.15", "text": ""}, {"heading": "9 655.17 646.65 3 149.78 4.93 3.73", "text": "28"}, {"heading": "6.2 Results of the second test phase on multiple depot instances", "text": "Starting from the best algorithms detected in the previous section a new computational campaign has been performed on multiple depot instances (i.e., the instances of the second and third sets, introduced in Section 5). More precisely, new 6 VNS algorithms have been developed and tested in this phase. The features of the algorithms are summarized in Table 4. Hence, Algorithms 13 and 14 have the same neighborhood set of algorithms 9 and 12, respectively, but the local search procedure LS3 in used in place of LS2. Algorithms 15 and 16 have the same neighborhood set of algorithms 9 and 12, respectively, too, but they only use the Focus Local Search (see Section 4.5.4). Finally, Algorithms 17 and 18 have the same neighborhood set of algorithms 15 and 16, but they only use the Focus Local Search with the 8-step evaluation scheme (see Section 4.5.5).\nIn Tables 5 and 6, the results of the 6 algorithms are reported. The solution provided by Heuristic 1 has been used as starting solution. For each instance \u201cav gap\u201d (\u201cmin gap\u2019) is the gap between the average (minimum) objective function value, \u201cav cost\u201d (\u201cmin cost\u201d), on the 5 best runs and the optimal solution \u201copt\u201d, given in [6]. \u201cav gap\u201d (\u201cmin gap\u2019) is computed as (av cost \u2212opt)/opt\u00d7100 ((min cost \u2212opt)/opt\u00d7100).\nObserve that, in terms of solution quality, Algorithms 13, 15 and 17 attain the best results, while Algorithms 16 and 18 require the smallest computational times. In fact, the complex neighborhood Chain is not used in Algorithms 16 and 18. In terms of solution quality, Algorithms 13 and 17 attain the best results with average (minimum) gaps of 4.81% (3.59%) and 4.8% (3.65%), respectively.\nIn order to evaluate how the initial solution influences the VNS technique, Algorithms 13, 15 and 17 has been executed starting from a solution provided by Heuristic 2 (introduced in Section 4.2).\n29\nThe results, reported in Table 7, show a (small) performance improvement of the algorithms when Heuristic 2 is applied with a relative small increase of computational time. In fact, with Heuristic 1, the smallest average minimum gap is 3.59%, found by Algorithm 13 (see Table 6), while with Heuristic 2, the average minimum gap is 3.33%, found by Algorithm 17 (see Table 7).\nAlgorithms 13, 15 and 17 have been tested on the small and big instances of the third set, too. Tables 8 and 9 report the results of the algorithms on the 10 small instances starting from a solution provided by Heuristic 1 and Heuristic 2, respectively. In the tables, for each instance, \u201cav gap\u201d (\u201cmin gap\u2019) is the gap between the average (minimum) objective function value, \u201cav cost\u201d (\u201cmin cost\u201d), on the 5 best runs and the optimal solution \u201copt\u201d, provided by CPLEX 12.5 running on the MILP formulation with a time limit of 1 hour. \u201cav gap\u201d (\u201cmin gap\u2019) is computed as (av cost\u2212opt)/opt\u00d7100 (as (min cost \u2212opt)/opt\u00d7100). In the first column of Tables 8 and 9, a * means that CPLEX was not able to certify the optimality of the solution within the time limit, while a ** indicates that CPLEX was not able to find any feasible solution within the time limit.\nTables 8 and 9 show Heuristic 2 gives overall slightly better results than Heuristic 1 even though the computational time is higher. The tables also show that Algorithm 13 works better than 15 and 17 with both heuristics. On the instance 10, with 35 requests and 20 vehicles, our algorithms were able to find solutions better than the solution found by CPLEX within the time limit. Observe that, the minimum gap is always smaller than 3.7% and 2.3% in Tables 8 and 9, respectively.\nFinally, Tables 10 and 11 report the results of the algorithms on the 14 big instances of the third set, starting from a solution provided by Heuristic 1 and Heuristic 2, respectively. On these instances no feasible solution was found by CPLEX running on the MILP formulation with a time limit of 6 hours. These tables also show that on average Heuristic 2 works slightly better than Heuristic 1,\n30\nin Algorithms 13 and 15, but perform slightly worse in Algorithm 17. Comparing the algorithms that employ Heuristic 1 (Table 10), Algorithm 17 performs better than the others. On the other hand, in Table 10, although Algorithm 13 performs slightly worse in terms of \u201cav cost\u201d and time, it outperforms the others in terms of \u201cmin cost\u201d."}, {"heading": "6.3 Results of the second test phase on single-depot instances", "text": "In Tables 12 and 13 results of Algorithms 13 and 15 running on the single-depot instances of Set 1 are reported. In the tables, the gap values are computed with the best known solution (given in [6]). A \u201c-\u201d in the columns reporting the gaps indicates that no solution was available for the instance.\nObserve that, Algorithm 15 often attains better results in terms of solution quality with computational times higher of about 20%. Furthermore, note that, in general, the hardest instances are those\n31\n32\n33\nAlgo. 13 15 17\nav cost min cost time av gap min gap av cost min cost time av gap min gap av cost min cost time av gap min gap\na2-16 284.18 284.18 30.88 0.00 0.00 284.18 284.18 18.16 0.00 0.00 284.18 284.18 21.10 0.00 0.00 a2-20 359.64 359.64 42.96 0.21 0.21 359.49 358.88 28.26 0.17 0.00 359.19 358.88 33.10 0.09 0.00 a2-24 446.37 439.29 78.21 1.61 0.00 452.04 439.29 51.42 2.90 0.00 439.29 439.29 57.50 0.00 0.00 a3-18 298.10 298.01 13.62 1.95 1.91 296.76 292.41 10.95 1.49 0.00 296.89 292.41 11.82 1.53 0.00 a3-24 350.86 350.69 37.84 0.67 0.62 353.18 350.69 24.37 1.33 0.62 349.14 348.54 27.08 0.17 0.00 a3-30 489.86 487.68 75.18 0.79 0.34 488.81 487.09 52.87 0.57 0.22 489.22 487.89 56.37 0.66 0.38 a3-36 647.17 647.17 122.16 3.22 3.22 - - - - - 649.50 641.63 97.41 3.59 2.34 a4-16 285.69 285.40 8.27 0.10 0.00 285.40 285.40 5.71 0.00 0.00 285.40 285.40 6.26 0.00 0.00 a4-24 363.07 361.70 25.04 1.56 1.17 362.51 361.72 18.39 1.40 1.18 362.35 361.72 21.14 1.35 1.18 a4-32 480.03 476.71 52.17 1.80 1.10 484.75 482.45 42.79 2.80 2.31 481.82 477.01 47.62 2.18 1.16 a4-40 565.45 555.50 100.92 4.22 2.38 572.59 567.10 80.07 5.54 4.52 563.01 550.71 84.64 3.77 1.50 a4-48 657.81 649.52 192.83 3.17 1.87 664.26 656.14 148.43 4.18 2.91 659.15 654.19 153.06 3.38 2.61 a5-40 516.19 512.23 71.84 3.99 3.20 518.36 511.51 55.80 4.43 3.05 516.53 510.76 60.52 4.06 2.90 a5-50 704.31 694.32 177.18 5.23 3.74 698.14 687.43 124.53 4.31 2.71 704.35 696.11 135.27 5.24 4.01 a5-60 854.52 847.57 289.22 6.80 5.93 860.72 857.17 226.44 7.58 7.13 858.33 845.59 239.65 7.28 5.69 a6-48 623.17 612.68 103.88 6.33 4.54 629.43 625.23 83.29 7.40 6.68 632.94 618.84 95.16 8.00 5.59 a6-60 845.15 814.04 201.95 7.47 3.51 851.21 837.25 161.99 8.24 6.47 848.80 820.90 174.55 7.93 4.39 a6-72 969.86 954.76 397.47 6.55 4.89 964.20 944.42 326.36 5.93 3.75 958.21 936.54 337.31 5.27 2.89 a7-56 745.45 736.65 136.79 8.27 6.99 739.86 732.72 116.03 7.46 6.42 741.96 726.18 117.29 7.76 5.47 a7-70 967.13 960.55 275.81 9.12 8.37 970.33 962.32 235.28 9.48 8.57 974.71 960.81 246.87 9.97 8.40 a7-84 1110.65 1076.09 562.09 9.41 6.01 1106.21 1091.93 498.67 8.97 7.57 1098.81 1087.15 517.91 8.25 7.10 a8-64 798.65 790.30 177.08 11.99 10.82 788.61 778.99 149.35 10.59 9.24 780.33 763.54 159.63 9.43 7.07 a8-80 998.78 994.88 358.96 7.91 7.49 999.19 990.27 311.70 7.95 6.99 1003.53 993.35 314.21 8.42 7.32 a8-96 1324.05 1310.70 723.40 10.67 9.56 1326.35 1298.00 661.01 10.87 8.50 1322.03 1316.49 665.05 10.51 10.04\nAv. 653.59 645.84 177.32 4.71 3.66 654.63 647.07 149.21 4.94 3.86 652.49 644.09 153.36 4.54 3.33\nTable 7: Performances of Algorithms 13, 15 and 17 on the instances of the second set, starting from a solution provided by Heuristic 2.\n34\n35\n36\n37\n38\nwith the highest n/m ratio, i.e., a3-36, a4-40 and a4-48. When comparing to the best known results, Algorithm 15 finds better results on the instances with homogeneous vehicles and users followed by the instances with heterogeneous vehicles and users. Algorithm 13 instead, finds better solutions in homogeneous vehicles and heterogeneous users followed by the instances with heterogeneous vehicles and users."}, {"heading": "7 Conclusion", "text": "In this work, a study of Variable Neighborhood Search (VNS) algorithms for multi-depot dial-a-ride problems has been addressed. Different versions of Variable Neighborhood Search algorithm have been proposed able to tackle all the characteristics of the problem. The different versions of the VNS algorithms have been tested on literature instances and on 24 random instances taken from a real-life healthcare problem.\nFuture research includes the study of new neighborhood structures able to tackle with the heterogeneity and multi-depot issues. The development of new local search approaches to use in combination with the VNS technique."}], "references": [{"title": "Applicazione di tecniche di operations management per minimizzare il costo di trasporto di pazienti", "author": ["A. Agnetis", "G. De Pascale", "P. Detti", "J. Raffaelli", "P. Chelli", "R. Colombai", "G. Marconcini", "E. Porfido", "A. Coppi"], "venue": "MECOSAN, Italian Quart. of Health Care Management Economics and Politics, 84", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Integrating commercial and residential pickup and delivery networks: A case study", "author": ["J.F. Bard", "A.I. Jarrah"], "venue": "Omega, 41 (4), 706\u2013720", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "Dynamic transportation of patients in hospitals", "author": ["A. Beaudry", "G. Laporte", "T. Melo", "S. Nickel"], "venue": "OR Spectrum, 32 (1), 77\u2013107", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "Static pickup and delivery problems: a classification scheme and survey", "author": ["G. Berbeglia", "J.-F. Cordeau", "I. Gribkovskaia", "G. Laporte"], "venue": "TOP, 15, 1\u201331", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2007}, {"title": "A branch-and-cut-and-price algorithm for the multidepot heterogeneous vehicle routing problem with time windows", "author": ["A. Bettinelli", "A. Ceselli", "G. Righini"], "venue": "Transportation Research Part C, 19, 723\u2013740", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2011}, {"title": "Exact and metaheuristic approach for a general heterogeneous dial-a-ride problem with multiple depots", "author": ["K. Braekers", "A. Caris", "G.K. Janssens"], "venue": "Transportation Research Part B, 67, 6\u2013186", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Mathematical programming guides air-ambulance routing at ornge", "author": ["T.A. Carnes", "S.G. Henderson", "D.B. Shmoys", "M. Ahghari", "R.D. MacDonald"], "venue": "Interfaces, 43 (3), 232\u2013239", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2013}, {"title": "An automated reference pointlike approach for multicriteria shortest path problems", "author": ["J.C.N. Climaco", "J.M.F. Craveirinha", "M.M.B. Pascoal"], "venue": "Journal of Systems Science and Systems Engineering, 15, 314\u2013329", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2006}, {"title": "A planning and routing model for patient transportation in healthcare", "author": ["A. Coppi", "P. Detti", "J. Raffaelli"], "venue": "Electronic Notes in Discrete Mathematics, 41, 125\u2013132", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "A Branch-and-Cut Algorithm for the Dial-a-Ride Problem", "author": ["J.-F. Cordeau"], "venue": "Operations Research, 54(3), 573\u2013586", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2006}, {"title": "A tabu search heuristic for the static multi-vehicle dial-a-ride problem", "author": ["J.-F. Cordeau", "G. Laporte"], "venue": "Transportation Research Part B, 37, 579\u2013594", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "The dial-a-ride problem: models and algorithms", "author": ["J.-F. Cordeau", "G. Laporte"], "venue": "Annals of Operations Research, 153:29\u201346", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2007}, {"title": "G", "author": ["P. Detti", "F. Papalini"], "venue": "Zabalo Manrique de Lara, A multi-depot dial-a-ride problem for patients transportation in healthcare, Proceedings of the 11th Metaheuristic International Conference (MIC), Agadir, 7\u201310 June", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Scheduling ambulance crews for maximum coverage", "author": ["G. Erdogan", "E. Erkut", "A. Ingolfsson", "G. Laporte"], "venue": "J. Oper. Res. Soc. 61 (4), 543\u2013550", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Bringing robustness to patient flow management through optimized patient transports in hospitals", "author": ["T. Hanne", "T. Melo", "S. Nickel"], "venue": "Interfaces 39 (3), 241\u2013255", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2009}, {"title": "Hybridization of tabu search with feasible and infeasible local searches for periodic home health care logistics", "author": ["R. Liu", "X. Xie", "T. Garaix"], "venue": "Omega, 47, 17\u201332", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "An investigation into the vehicle routing problem with time windows and link capacity constraints", "author": ["H. Ma", "B. Cheang", "A. Lim", "L. Zhang", "Y. Zhu"], "venue": "Omega, 40 (3), 336\u2013347", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2012}, {"title": "A dial-a-ride problem for client transportation in a health-care organization", "author": ["E. Melachrinoudis", "A.B. Ilhana", "H. Min"], "venue": "Computers & Operations Research, 34, 742\u2013759", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2007}, {"title": "A variable neighborhood search algorithm for the optimization of a dial-a-ride problem in a large city", "author": ["S. Muelas", "A. LaTorre", "J.-M. Pena"], "venue": "Expert Systems with Applications, 40, 14, 5516\u20135531", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2013}, {"title": "G", "author": ["J. Paquette", "J.-F. Cordeau"], "venue": "Laporte, M.M.B. Pascoal, Combining multicriteria analysis and tabu search for dial-a-rial problems.Transportation Research B, 46, 100\u2013119", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2012}, {"title": "Introducing heterogeneous users and vehicles into models and algorithms for the dial-a-ride problem", "author": ["S.N. Parragh"], "venue": "Transp. Res. Part C: Emerg. Technol. 19 (5), 912\u2013930", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2011}, {"title": "Variable neighborhood search for the dial-a-ride problem", "author": ["S.N. Parragh", "K.F. Doerner", "R.F. Hartl"], "venue": "Computers & Operations Research, 37, 6, 1129\u20131138", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2010}, {"title": "Models and algorithms for the heterogeneous dial-a-ride problem with driver-related constraints", "author": ["S.N. Parragh", "J.F. Cordeau", "K.F. Doerner", "R.F. Hartl"], "venue": "OR Spectrum 34, 3 , 593\u2013 633", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2012}, {"title": "Hybrid column generation and large neighborhood search for the dial-a-ride problem", "author": ["S.N. Parragh", "V. Schmid"], "venue": "Computers & Operations Research, 40, 1, 490\u2013497", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2013}, {"title": "Handicapped person transportation: an application of the grouping genetic algorithm", "author": ["B. Rekiek", "A. Delchambre", "H.A. Saleh"], "venue": "Engineering Applications of Artificial Intelligence, 19:511\u2013520", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2006}, {"title": "G", "author": ["S. Ropke", "J.F. Cordeau"], "venue": "Laporte, G., Models and branch-and-cut algorithms for pickup and delivery problems with time windows. Networks 49 (4), 258\u2013272", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2007}, {"title": "Branch and Cut and Price for the Pickup and Delivery Problem with Time Windows", "author": ["S. Ropke", "J.F. Cordeau"], "venue": "Transportation Science, 43, 267\u2013286", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2009}, {"title": "DRIVE: Dynamic Routing of Independent Vehicles", "author": ["M. Savelsbergh", "M. Sol"], "venue": "Operations Research, 46, 474\u2013490", "citeRegEx": "29", "shortCiteRegEx": null, "year": 1998}], "referenceMentions": [{"referenceID": 21, "context": "[23], for the single-depot case with homogeneous vehicles and users, and extended in [14] to the multi-depot DARP with heterogeneous vehicles and users in Detti et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "application, concerning the non-emergency transportation of patients in Italy [1, 9].", "startOffset": 78, "endOffset": 84}, {"referenceID": 8, "context": "application, concerning the non-emergency transportation of patients in Italy [1, 9].", "startOffset": 78, "endOffset": 84}, {"referenceID": 20, "context": "The first set has been presented in [22] and contains single-depot DARP instances, partitioned into three subsets.", "startOffset": 36, "endOffset": 40}, {"referenceID": 5, "context": "The second set has been introduced in [6] and contains multi-depot instances generated by the three subsets presented in [22].", "startOffset": 38, "endOffset": 41}, {"referenceID": 20, "context": "The second set has been introduced in [6] and contains multi-depot instances generated by the three subsets presented in [22].", "startOffset": 121, "endOffset": 125}, {"referenceID": 4, "context": "DARP is a generalization of the Pickup and Delivery Problem with Time Windows (PDPTW ) [5, 17, 28].", "startOffset": 87, "endOffset": 98}, {"referenceID": 15, "context": "DARP is a generalization of the Pickup and Delivery Problem with Time Windows (PDPTW ) [5, 17, 28].", "startOffset": 87, "endOffset": 98}, {"referenceID": 26, "context": "DARP is a generalization of the Pickup and Delivery Problem with Time Windows (PDPTW ) [5, 17, 28].", "startOffset": 87, "endOffset": 98}, {"referenceID": 11, "context": "For recent surveys on DARP and PDPTW, we refer the reader to Cordeau and Laporte [12] and Berbeglia et al.", "startOffset": 81, "endOffset": 85}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 114, "endOffset": 132}, {"referenceID": 4, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 114, "endOffset": 132}, {"referenceID": 21, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 114, "endOffset": 132}, {"referenceID": 26, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 114, "endOffset": 132}, {"referenceID": 27, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 114, "endOffset": 132}, {"referenceID": 5, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 152, "endOffset": 159}, {"referenceID": 25, "context": "Promising exact techniques used in the literature for solving DARP, PDPTW and their variants are Branch-and-Price [2, 5, 23, 28, 29] and Branch-and-Cut [6, 27].", "startOffset": 152, "endOffset": 159}, {"referenceID": 16, "context": "However, due to the difficulty of modeling all the constraints of the real-world problems and of solving large dimension instances, many studies have been also focused on the development of heuristic and metaheuristic approaches [18].", "startOffset": 229, "endOffset": 233}, {"referenceID": 5, "context": ", see [6], [7] and [14]).", "startOffset": 6, "endOffset": 9}, {"referenceID": 6, "context": ", see [6], [7] and [14]).", "startOffset": 11, "endOffset": 14}, {"referenceID": 5, "context": "In [6], the multi-depot DARP with heterogeneous vehicles and users is considered, where quality of service is limited to patients\u2019 ride times and the route costs depend on the traveled distance.", "startOffset": 3, "endOffset": 6}, {"referenceID": 25, "context": "[27].", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "[7], a multi-depot DARP application coming from an air-ambulance service context is addressed (compatibility constraints among patients exist, too, e.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "The instances handled in [7] contain no more than 30 requests per day and are solved by a set partitioning formulation.", "startOffset": 25, "endOffset": 28}, {"referenceID": 10, "context": "Cordeau and Laporte [11] first applied TS to a case of DARP with a single depot, where constraints related to vehicles\u2019 capacity, route duration and maximum ride time of any user on a vehicle were considered.", "startOffset": 20, "endOffset": 24}, {"referenceID": 19, "context": "[21] developed a multicriteria heuristic embedding a tabu search process for solving a DARP, with a heterogeneous fleet of vehicles and two types of users: ambulatory and wheelchairbound.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "The proposed solution procedure combines some features of the tabu search heuristic of Cordeau and Laporte [11] and of the multicriteria reference point method of Climaco et al.", "startOffset": 107, "endOffset": 111}, {"referenceID": 7, "context": "[8].", "startOffset": 0, "endOffset": 3}, {"referenceID": 17, "context": "[19] proposed a TS heuristic to address a single-depot DARP with soft time windows that arises in a non-profit organization system operating in the Boston metropolitan area.", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "[3] implemented a two-phase procedure for the dynamic DARP arising in several large hospitals.", "startOffset": 0, "endOffset": 3}, {"referenceID": 21, "context": "[23] proposed a VNS heuristic with three neighborhood types for a single-depot DARP with homogeneous vehicles, constraints on route duration and time windows and maximum users\u2019 ride times.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "In [24], a collaborative scheme has been proposed, integrating the VNS heuristic into a column generation framework, for a variant of DARP, arising in the Austrian Red Cross context, with driver-related constraints, heterogeneous vehicles and patients.", "startOffset": 3, "endOffset": 7}, {"referenceID": 18, "context": "[20] propose a VNS-based algorithm with seven different neighborhood classes (or shakers) for a DARP that arises in the area of San Francisco.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "Recently, new metaheuristic approaches have been proposed for DARP in [6] and [25].", "startOffset": 70, "endOffset": 73}, {"referenceID": 23, "context": "Recently, new metaheuristic approaches have been proposed for DARP in [6] and [25].", "startOffset": 78, "endOffset": 82}, {"referenceID": 5, "context": "As already stated, in [6], a deterministic annealing metaheuristic is proposed for the multi-depot DARP with heterogeneous vehicles and users.", "startOffset": 22, "endOffset": 25}, {"referenceID": 23, "context": "In [25], a hybrid column generation and a large neighborhood search algorithm are presented for solving a single-depot DARP with homogeneous vehicles, maximum user ride times, route duration limits, and vehicle capacity constraints.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "While in the standard DARP, all vehicles have the same capacity and are located at a single depot [11], in the heterogeneous multi-depot case, each vehicle, with its own equipment and capacity, is assigned to a specific depot and must start and end its route at this depot.", "startOffset": 98, "endOffset": 102}, {"referenceID": 9, "context": "The MILP formulation extends the formulation proposed by Cordeau [10] for the standard DARP to the multidepot case.", "startOffset": 65, "endOffset": 69}, {"referenceID": 9, "context": "(The number of the variables of the formulation is reduced by using aggregate variables as proposed in [10].", "startOffset": 103, "endOffset": 107}, {"referenceID": 21, "context": "The framework is similar to those presented in [23] and [14].", "startOffset": 47, "endOffset": 51}, {"referenceID": 10, "context": "As in [14], [11] and [23], the evaluation function f (s) used by the VNS algorithms has two main terms and is equal to f (s) = f1(s)+ f2(s), where s is a problem solution.", "startOffset": 12, "endOffset": 16}, {"referenceID": 21, "context": "As in [14], [11] and [23], the evaluation function f (s) used by the VNS algorithms has two main terms and is equal to f (s) = f1(s)+ f2(s), where s is a problem solution.", "startOffset": 21, "endOffset": 25}, {"referenceID": 21, "context": "Neighborhoods swap, chain, and move have been introduced in [23] and [22], respectively.", "startOffset": 60, "endOffset": 64}, {"referenceID": 20, "context": "Neighborhoods swap, chain, and move have been introduced in [23] and [22], respectively.", "startOffset": 69, "endOffset": 73}, {"referenceID": 10, "context": "In order to set the beginning of a request in a route in the best possible way and to minimize the total duration of the route, the 8-step evaluation scheme introduced in [11] and used in [23], too, is considered and applied.", "startOffset": 171, "endOffset": 175}, {"referenceID": 21, "context": "In order to set the beginning of a request in a route in the best possible way and to minimize the total duration of the route, the 8-step evaluation scheme introduced in [11] and used in [23], too, is considered and applied.", "startOffset": 188, "endOffset": 192}, {"referenceID": 21, "context": "The local search procedure is very similar to the one proposed in [23], but it performs a smaller number of changes and is computationally less expensive, as explained in the following.", "startOffset": 66, "endOffset": 70}, {"referenceID": 21, "context": "(Observe that, while in the procedure proposed in [23] such a node can be further moved during the search process, in our procedure the position of this node is not changed anymore.", "startOffset": 50, "endOffset": 54}, {"referenceID": 20, "context": "The first set has been proposed in [22] and contains three subsets of single-depot DARP instances, denoted as U , E and I respectively.", "startOffset": 35, "endOffset": 39}, {"referenceID": 20, "context": "These instances, denoted in [22] as set I, have been generated from the a instances provided by Cordeau [10], in which heterogeneous real-life aspects arising at the Austrian Red Cross have been introduced.", "startOffset": 28, "endOffset": 32}, {"referenceID": 9, "context": "These instances, denoted in [22] as set I, have been generated from the a instances provided by Cordeau [10], in which heterogeneous real-life aspects arising at the Austrian Red Cross have been introduced.", "startOffset": 104, "endOffset": 108}, {"referenceID": 5, "context": "The second set contains 24 multi-depot instances introduced in [6].", "startOffset": 63, "endOffset": 66}, {"referenceID": 20, "context": "The instances have been generated introducing four vehicle depots in the instances of the set I (presented in [22]).", "startOffset": 110, "endOffset": 114}, {"referenceID": 5, "context": "At this aim, the 24 multi-depot benchmark instances introduced in [6] have been used (i.", "startOffset": 66, "endOffset": 69}, {"referenceID": 5, "context": "For each algorithm, in column 3, \u201cmin cost\u201d reports the average best objective solution value (on the 24 instances) found on the 5 best runs, while, in column 4, \u201c# opt\u201d contains the number of instances, out of 24, in which an optimal solution is found (given in [6]).", "startOffset": 263, "endOffset": 266}, {"referenceID": 5, "context": "More precisely, \u201cav gap\u201d is the average, on the 24 instances, of the gaps av gapi, one for each instance i, between the average objective function value, av costi (on the 5 best runs) and the optimal solution value opti, given in [6].", "startOffset": 230, "endOffset": 233}, {"referenceID": 5, "context": "For each instance \u201cav gap\u201d (\u201cmin gap\u2019) is the gap between the average (minimum) objective function value, \u201cav cost\u201d (\u201cmin cost\u201d), on the 5 best runs and the optimal solution \u201copt\u201d, given in [6].", "startOffset": 190, "endOffset": 193}, {"referenceID": 5, "context": "In the tables, the gap values are computed with the best known solution (given in [6]).", "startOffset": 82, "endOffset": 85}], "year": 2016, "abstractText": "In this work, a study on Variable Neighborhood Search algorithms for multi-depot dial-a-ride problems is presented. In dial-a-ride problems patients need to be transported from pre-specified pickup locations to pre-specified delivery locations, under different considerations. The addressed problem presents several constraints and features, such as heterogeneous vehicles, distributed in different depots, and heterogeneous patients. The aim is of minimizing the total routing cost, while respecting time-window, ride-time, capacity and route duration constraints. The objective of the study is of determining the best algorithm configuration in terms of initial solution, neighborhood and local search procedures. At this aim, two different procedures for \u2217Dipartimento di Ingegneria dell\u2019Informazione e Scienze Matematiche, University of Siena, Via Roma, 56, 53100 Siena, Italy, e-mail detti@dii.unisi.it \u2020Dipartimento di Ingegneria dell\u2019Informazione e Scienze Matematiche, University of Siena, Via Roma, 56, 53100 Siena, Italy, e-mail garazizml@gmail.com", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}