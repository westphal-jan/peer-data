{"id": "1612.01086", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2016", "title": "Deep Learning of Robotic Tasks without a Simulator using Strong and Weak Human Supervision", "abstract": "We opt followed scheme a fitness a fault-tolerant kevin their allowed complex creating tasks such as highway nacelles. The scheme resembles particularly enrolled - interaction processes often having creatures to math done and but other complex operational, and conjunction mainly be following four combined. In the eight stage the epstein admits by itself however informative tends - cartesian dimensional of export variable signals in an self-paced education behavior. In the break venue when agent learns keep cues over of tenured not funded own so as continue continues called providing making level; the finish set becomes devoted to learning another velocity reward created. Here, also (human) majored observes (possibly once real making) came agent performing the task have provides deserving user. During this time brought agent authorities such upon and place instructor feedback way imagines gives reward generation not supervised technical. This stage terminates when all reward model is sufficiently accurate. In soon last in a complement understanding solver called deployed to leveraging given walker emphasized. The guidance grants signals part the reinforcement learning integer utilized where the previously learned legitimate model. As this yet common concept set but consider policies, me allows a uses consisting of hard double-entry interaction advertisers, up uses it alone attempts learn a database agent capable important nepal highway steering all the few - known professional coming Assetto Corsa.", "histories": [["v1", "Sun, 4 Dec 2016 08:28:38 GMT  (955kb,D)", "http://arxiv.org/abs/1612.01086v1", null], ["v2", "Tue, 14 Mar 2017 17:08:16 GMT  (2095kb,D)", "http://arxiv.org/abs/1612.01086v2", null], ["v3", "Sun, 26 Mar 2017 08:43:23 GMT  (2095kb,D)", "http://arxiv.org/abs/1612.01086v3", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LG cs.RO", "authors": ["bar hilleli", "ran el-yaniv"], "accepted": false, "id": "1612.01086"}, "pdf": {"name": "1612.01086.pdf", "metadata": {"source": "CRF", "title": "Deep Learning of Robotic Tasks using Strong and Weak Human Supervision", "authors": [], "emails": ["barh@campus.technion.ac.il", "rani@cs.technion.ac.il"], "sections": [{"heading": "1 Introduction", "text": "Consider the task of designing a robot capable of performing a complex human task such as dishwashing, driving or clothes ironing. Although natural for adult humans, designing a hard-coded algorithm for such a robot can be a daunting challenge. Difficulties in accurately modeling the robot and its interaction with the environment, creating hand-crafted features from the high-dimensional\nar X\niv :1\n61 2.\n01 08\n6v 1\n[ cs\n.A I]\nsensor data, and the requirement that the robot be able to adapt to new situations are just a few of these obstacles. In this paper we propose a general scheme that combines several learning techniques that might be used to tackle such challenges. As a proof a concept, we implemented the scheme\u2019s stages (currently without the initial unsupervised learning stage) and applied it to the challenging problem of autonomous highway steering. The implementation of the unsupervised learning stage is currently being performed and will be added in a future version of the paper.\nTwo of the most common approaches for robot learning are Imitation Learning (IL) and Reinforcement Learning (RL). In imitation learning, which is also known as \u2018behavioral cloning\u2019 or \u2018learning from demonstrations\u2019, a human demonstrator performs the desired task with the goal of teaching a (robotic) agent to mimic her actions (Argall et al., 2009). The demonstrations are used to learn a mapping from a given world state, s, received via sensors, to a desired action, a, consisting of instructions to the agent\u2019s controllers. Throughout this paper s will be referred also as the \u201draw signal.\u201d The objective in IL is to minimize the risk, in the supervised learning sense. In RL the goal is to enable the agent to find its own policy, one that maximizes a value function defined in terms of certain guidance reward signals received during its interaction with the environment. IL and RL can be combined, as was recently proposed by Taylor et al. (2011). The idea is to start the reinforcement learning with an initial policy learned during a preceding IL stage. This combined approach can significantly accelerate the RL learning process and minimize costly agentenvironment interactions. In addition, deploying the RL algorithm after the IL stage compensates for the noisy demonstrations and extends the imitation strategy to previously unseen areas of the state space.\nBoth IL and RL have their drawbacks. IL can suffer from noisy demonstrations, which typically result from inconsistent strategies adopted by the human demonstrator. Consequently, the performance of an IL agent is limited by the quality of the observed demonstration. RL has it drawbacks as well: it either requires a realistic simulation of the agent\u2019s interaction with the environment, or it requires operating the agent in a real-world environment, which can be quite costly. Moreover, the sample complexity of RL can be large and the modeling of an effective reward function is often quite challenging, requiring expert insight and domain knowledge. The current state of affairs in robotic design using any technique leaves much to be desired, where ultimate goals such as domestic robot maids, remain futuristic.\nConsider the task of constructing a robot (or any computerized agent) whose goal is to perform a certain task based on raw signals obtained via sensors. The sensors can be of several types and modalities, such as sound, imaging, proximity (sonar, radar), navigation, tactile, etc. For the moment, we ignore the means by which we process and integrate the various signals, and simply refer to the given collection of signals as the \u201craw signal.\u201d We propose the following scheme that integrates unsupervised feature learning, imitation learning, reward shaping, and reinforcement learning as follows:\n1. Unsupervised learning. Utilizing known unsupervised learning techniques the agent learns informative low-dimensional representations F0(s) of the raw signal s. Typically, the representation is hierarchical, in the form of artificial neural network whose inputs are obtained from the raw signal and the output is the lower dimensional representation.\n2. External features. In many tasks, such as autonomous driving, there are high level features of the raw signal that are known to be relevant to the task and accelerate the learning of the robot. For example, road boundaries, which can be easily extracted using simple image processing algorithms (e.g., the Hough Transform (Illingworth & Kittler, 1988)), are of utmost relevancy to the task. Such engineered features that are based on domain expertise should definitely be used whenever they exist to expedite learning and/or improve the final performance. In addition, other auxiliary features that are not directly learned by our system, or engineered by us, and can obtained as black boxes from professional feature manufacturers can be considered. Any set of such external features can be easily integrated into our scheme using known methods such as those described in (Ngiam et al., 2011).\n3. Supervised imitation learning. Using the learned low-dimensional (hierarchical) representation F0(s) (comprised of both self-learned features and possible external features) to initialize an imitation learning process, the agent learns to mimic an (human) instructor performing the desired task. This stage has two complementary goals. The first goal is to generate an initial agent policy \u03c00 capable of operating in the environment without too much risk (e.g., without damaging itself or the environment). The second goal is to improve the low-dimensional feature representation (learned in the previous unsupervised stage) and generate a revised representation F1(s), which is more relevant/informative to the task at hand.\n4. Supervised reward shaping. The agent learns a reward function R(s) (to be used later by the RL procedure) from instructor feedback generated while observing the agent operating in the environment using the initial IL policy \u03c00. The reward function learning process utilizes the learned representation, F1(s), to accelerate learning.\n5. Reinforcement learning. Finally, in the RL stage, the reward function R(s) is used to learn an improved agent policy \u03c0\u2217. This learning in this stage can be based on the learned representation F1(s). The representation F1(s) can remain \u201cfrozen\u201d through the RL procedure or it can be updated to better reflect new scenes. Also, the RL stage can remain active indefinitely.\nWe note that the first unsupervised feature learning stage is not mandatory, but can potentially accelerate the entire learning process and/or lead to enhanced overall performance. When this stage is not conducted, we start with the supervised imitation learning stage from scratch, without F0(s), and when the\nsupervised learning process ends, we extract from it both F1(s) and the initial robot policy \u03c00. When the unsupervised feature learning stage is not conducted, the IL stage can take longer time and/or require more efforts from the human demonstrator. We also note that stages three and four can be iteratively repeated several times to improve final performance.\nThe proposed approach somewhat resembles the natural teaching-learning procedure used by humans to teach themselves and each other complex tasks. For example, in the case of learning to drive, the student\u2019s unsupervised learning phase starts long before her formal driving lessons, and typically includes great many hours where the student observes driving scenes while sitting as a passive passenger in a car driven by her parents during her childhood. In the second stage while observing the instructor performing a desired task, the student extracts relevant information required to successfully perform the task. Afterwards, while the student is performing the task, the instructor provides real-time feedback and the student improves performance by both optimizing a policy as well as learning the feedback function itself. Then, the student continues to teach herself (without the instructor), using both the reward function previously induced by the instructor and future reward signals from the environment.\nThere is vast literature concerning the independent use of each of the components in our scheme. See, for example surveys on unsupervised feature learning Coates et al. (2010), imitation learning (Argall et al., 2009) and reinforcement learning (Kober et al., 2013). The two closest works to ours are (Taylor et al., 2011) and (Daniel et al., 2014). In the first, the authors showed that a preceding demonstration learning stage can significantly expedite the reinforcement learning process and improve the final policy performance in a simulated robot soccer domain. In the second, the authors proposed to learn a reward model in a supervised manner and used alternating steps of reward and reinforcement learning to continually improve the reward model and the agent\u2019s policy in a robotic arm grasping task. To the best of our knowledge, there are no reports on previous attempts to leverage human instructor\u2019s skills to create robots using the above procedure (with or without the unsupervised learning stage, and with or without external features).\nAs a proof of concept, we focus on learning a simple autonomous highway steering task and report on an implementation of the proposed scheme, including the imitation learning, reward shaping and reinforcement learning stages (without the unsupervised learning stage, and without external features, which will be added in a future version of the paper.) To this end, we use one of the most popular computer racing games (Assetto Corsa)1, and attempt to create a self-steering car in the sense that, given raw image pixels (of the car racing game screen), we wish to output correct steering control commands for the steering wheel. We use Convolutional Neural Networks (CNNs) as mapping functions from high-dimensional data to both control actions and instantaneous reward\n1At the time of writing, this game is considered to be one of the most realistic computer racing environments.\nsignals. Three types of CNNs are trained: policy network, reward network and Q-network, denoted by P\u03b8, R\u03b8 and Q\u03b8, respectively. The choice of CNNs for all three tasks is based on their proven ability to extract informative features from images in the context of classification and control tasks (Mnih et al., 2015; Krizhevsky et al., 2012), thus obviating the exhausting task of manually defining features. For example, in the work of Mnih et al. (2015) a CNN was successfully trained to predict desired control actions given high-dimensional pixel data in the Atari 2600 domain.\nWe emphasize that our entire system is implemented without any access to the internal state of the game simulator (which is a purchased executable code). This is in contrast to most previous published work on computerized autonomous driving that were conducted in a simulation environment, allowing access to the internal states of the simulator (e.g., TORCS (Wymann et al., 2000)) containing valuable parameters such as the car\u2019s distance from the roadside or its angle with respect to the road. Thus, when an open simulator is available, such parameters can be extracted and utilized in the learning process, as could other reward information (e.g., in computer game simulators) (Zhang & Cho, 2016; Loiacono et al., 2010; Munoz et al., 2009; Chen et al., 2015). As mentioned, there is no open simulator in our setting. Consequently, in addition to not having the access to useful parameters, all our learning procedures, including the reinforcement learning, must be executed slowly in real-world clock time (as in real driving), as opposed to the super-fast learning that can typically be achieved using a simulator. On the other hand, our system is scalable to any computerized driving game and even to real-world driving.\nOur work is divided into three main parts. First, the actions of a human demonstrator are recorded while she plays the game. The game images are recorded as well. A policy network is trained in a SL manner using this data. Second, a reward network is trained. It receives an image and outputs a number in the range [\u22121, 1] that indicates the instantaneous reward of being in that state. This method is known as reward shaping, where an additional reward signal is used to guide the learning agent (Ng et al., 1999). The reward network is trained in a SL manner with labels obtained from a human instructor. Third, the Double Deep Q-learning (Hasselt, 2010; Hasselt et al., 2016) (DDQN) RL algorithm is used to train a Q-network. The reward signal used in the RL procedure is constructed from the reward network\u2019s output. The learned policy network\u2019s parameters from the imitation part are used to initialize the Q-network\u2019s parameters. Our performance evaluation procedure is based on the Q-network\u2019s accumulated average reward. Better driving means higher accumulated average reward and vice versa."}, {"heading": "2 Imitation learning", "text": "Imitation learning, which is also known as behavioral cloning or learning from demonstrations, aims at finding a mapping f? : s\u2192 a from a given world state, s, to a desired action a. This mapping is typically termed \u201cpolicy.\u201d Robot\nlearning using mimicry is an old idea, conceived decades ago (Hayes & Demiris, 1994; Argall et al., 2009). While being an excellent technique for achieving reasonable performance, this approach by itself is limited. Clearly, the performance of an agent trained in this manner is upper bounded by the instructor level. Moreover, if the training sample isn\u2019t sufficiently diverse/representative the agent will not be exposed to unexpected difficult states, and can suffer from very poor and unpredictable performance when such states are encountered in production. Finally, labeled samples obtained from human demonstrations are prone to labeling noise. Noting these limitations, we use imitation learning in our scheme only to achieve a basic performance level, which will allow the agent to perform the required task without damaging itself or the environment, and to receive a low-dimensional feature representation of the raw signal, s, that will be used to initialize both the reward learning and the reinforcement learning stages. In our setting, world states are game images, and actions are keyboard keys pressed by a human demonstrator while playing the game. The Assetto Corsa game provides the possibility of connecting a car wheel controller; we have not utilized this option and note that the use of such a wheel controller should improve the driving performance of the learned agent.\nIn this stage of the scheme we train a policy network that maps raw image pixels to steering commands of left/right. The policy network, whose architecture is presented in Figure 1, is trained and evaluated. When training is done, the last convolutional layer\u2019s output can be viewed as the learned low-dimensional representation, F1(s), of the raw signal. A training sample of state-action pairs is gathered in the following two-stage procedure, which can be viewed as one iteration of the Dagger algorithm applied with \u03b2 = 0 (Ross et al., 2011). The Dagger algorithm was selected to increase the robustness of the resulting mimicking policy.\nFirst, a training sample of state-action pairs, D0 = {(si, ai)}i, is recorded while a human expert plays the game. A detailed explanation of the recording process is given in Section 5 (in the experiments described below D0 contained approximately 70,000 samples, equivalent to two hours of human driving). Denote by P\u03b80 the learned policy network trained on D0. Since the human instructor maintains a fixed driving strategy and doesn\u2019t make critical mistakes, only a fraction of the state space is encountered while accumulating D0, leading to a not robust driving strategy. Second, we let the learned policy network, P\u03b80 , to drive on its own. A human instructor then labels the states encountered by P\u03b80 (i.e. assigns actions to them). These labeled states compose the training sample, D1 = {(si, human label(si))}i (in our experiments D1 contained approximately 50,000 samples). We then train a policy network using D = D0 \u222aD1, denoted by P\u03b8. The negative log-likelihood is used as a loss function for training both P\u03b80 and P\u03b8,\nNLL(\u03b8,D) = \u2212 1 |D| |D|\u2211 i=0 logP\u03b8 (ai|si) ,\nwhere P\u03b8 is a policy network, which receives the state s and outputs a probability distribution on the optional actions, with parameters \u03b8.\nThe performance of P\u03b8 is significantly better when driving the training tracks (where training data is gathered) rather than unobserved tracks. This can reasonably be attributed to some degree of overfitting, which is not surprising given the relatively small number of training examples. During the RL procedure we will be able to improve this performance on unobserved test tracks. A detailed explanation of the performance evaluation procedure is given in Section 5, The parameters of P\u03b8 were used to initialize the Q-network and the reward networks."}, {"heading": "3 Deep reward shaping", "text": "The problem of designing suitable reward functions to guide an agent to successfully learn a desired task is known as reward shaping (Laud, 2004). The idea is to define supplemental reward signals so as to make a RL problem easier to learn. The handcrafting of a reward function can be a complicated task, requiring experience and a fair amount of specific domain knowledge. Therefore, other methods for designing a reward function without the domain expertise requirement have been studied. In Inverse RL (IRL) a reward function is learned from expert demonstration (Abbeel & Ng, 2004). IRL algorithms rely on the fact that an expert demonstration implicitly encodes the reward function of the task at hand, and their goal is to recover a reward function which best explains the expert\u2019s behavior.\nDaniel et al. (2014) proposed to learn a reward model in a supervised manner and use iterations between reward learning and reinforcement learning to continually improve the reward model and the agent\u2019s policy. Their approach, which is based on manual feature generation by experts, has been applied in a robotic arm grasping task. The reward function is not learned from the raw states visited by the learner, but from some assumed to be known, low-dimensional feature representation of them. Constructing such low-dimensional representations usually requires some expert domain knowledge, making the learning of the reward function somewhat less advantageous.\nOur reward shaping component for implementing the self-driving tasks learns the reward function directly from the raw image pixels. Since we don\u2019t have access to the internal state of a simulator, defining a reward signal using the state parameters of the car (distances from the roadsides, angle with respect to the road, etc.) is impossible without explicit image processing. In this work, we devise and utilize a deep reward shaping network that is learned from a human driving instructor. The reward network, which is implemented with convolutional layers, maps a game state into the instantaneous reward, r \u2208 [\u22121, 1], corresponding to that state, R\u03b8 : s\u2192 r. The driving instructor provides binary labeling for each state such that the reward network is a mapping from raw image pixels to { \u201cgood\u201d, \u201cbad\u201d }. The binary labeling of the human instructor can be viewed as a relatively easy task (for the human), which must continue until we are convinced that the reward model is sufficiently accurate.\nWe consider two different driving tasks: the easier task (Task 1) is to drive safely and smoothly, possibly using all lanes. The second task (Task 2) is similar but requires that the agent drive only in a predefined lane. For these two tasks we train two reward networks, denoted by Rgeneral\u03b8 and R lane \u03b8 , which share the same architecture. Their architecture is identical to that of the policy network, except for the final fully connected layer that now has one node instead of three. A hyperbolic tangent (tanh) activation function is applied on the last layer to receive output in the range [\u22121, 1]. The learned parameters of the first layers of P\u03b8 (the parameters that correspond to F1(s)) are used to initialize both reward networks. The reward networks are trained with data recorded from a human instructor in a supervised learning procedure, with different datasets (including labeling) for each reward network. The MSE loss objective is used to train both networks,\nEs,l\u223cD [ (l \u2212R\u03b8 (s))2 ] ,\nwhere l \u2208 {\u22121, 1} is the corresponding label given by the human instructor. Task 1: A reward model for general driving. The reward network Rgeneral\u03b8 is trained to give high rewards to \u201cgood\u201d states where the car is on the road facing the correct direction (whether it is in the correct lane is not important), as judged by the human instructor. Those \u201cgood\u201d states were labeled one. All other states were labeled minus one.2 The training of Rgeneral\u03b8\n2To ease the human instruction efforts all of the one-labeled samples were reused from the imitation training data.\ncontinued until a statistical test indicated that this network provides accurate reward over test data. We note that the binary learning task of the reward network is considerably easier than the imitation task.\nTask 2: A reward model for lane-constrained driving. During the imitation learning stage the human instructor ignored the lane marks on the road (some of the tracks do not contain lane marks at all), but in Task 2 we considered a more complex application whereby the agent must drive in a designated lane only (the second lane from the right on a 4-lane road). To this end we trained a reward network Rlane\u03b8 , to give high reward only for states where the car was in that specific lane. Rlane\u03b8 was trained with approximately 30,000 new samples corresponding to roughly one driving hour. States in which the car was in the designated lane were labeled one, and all other states were labeled minus one. A training curve of Rlane\u03b8 is presented in Figure 3, showing that a 97% validation accuracy was achieved with early stopping. An example of the output of Rlane\u03b8 over different states is given in Figure 4, showing very high reward to the designated lane."}, {"heading": "4 Reinforcement learning using DDQN", "text": "In this section we assume basic familiarity with reinforcement learning; see, e.g., (Sutton & Barto, 1998). In the final RL stage, we utilize the already trained reward networks and apply them within a standard RL method. Recalling that performance is measured in terms of the learned reward model, the main goal of this stage is to achieve a significantly better performance level than the one\nachieved in the mimicry stage by enabling the agent to teach itself. In other words, starting with a policy \u03c00, we would like to apply an RL algorithm to learn a policy \u03c0\u2217, which is optimal with respect to the expected (discounted) reward received from the reward network.\nWhile any RL method can in principle be used in our scheme, we utilize a variant of the Q-learning algorithm (Watkins & Dayan, 1992), which aims to find the optimal action-value function, denoted by Q?(s, a), and defined as the expected (discounted) reward after taking action a in state s and following the optimal policy \u03c0? thereafter. The true value of taking action a in state s under policy \u03c0 is\nQ\u03c0(s, a) = E [ rt + \u03b3 rt+1 + \u03b3 2 rt+2 + ... | st = s, at = a; \u03c0 ] ,\nwhere \u03b3 \u2208 [0, 1] is a fixed discount factor and r is the guidance reward signal. Given the optimal action-value function, which is defined to be Q?(s, a) = max \u03c0 Q\u03c0(s, a), the optimal policy \u03c0? can be simply derived by taking the action with the highest action-value function in each state. Dealing with a very large state space of images, we approximate the optimal action-value function using a deep Q-network (DQN) with parameters \u03b8:\nQ\u03b8(s, a) \u2248 Q?(s, a).\nA deep Q-network is a neural network that for a given state outputs a vector of action values.\nWe used the DDQN algorithm with replay memory and target values calculated from parameters of the previous iteration, as in the work of Mnih et al. (2015). The loss function we used is therefore,\nL(\u03b8) = Es,a,r,s\u2032\u223cB [( r + \u03b3 Q\u03b8\u0303(s\n\u2032, argmax a\u2032 Q\u03b8(s \u2032, a\u2032))\u2212Q\u03b8(s, a)\n)2] , (1)\nwhere (s, a, r, s\u2032) are samples taken from the replay memory buffer B, and \u03b8\u0303 are the Q-network\u2019s parameters from the previous iteration. In our applications, the reward received after taking action a in state s is the instantaneous reward obtained from the reward network for state s (see Section 3). We set \u03b3 to be 0.9 and used the ADAM (Kingma & Ba, 2014) method for stochastic gradient optimization.\nWe trained a Q-network, denoted by Q\u03b8, that has the same architecture as P\u03b8 except for the final softmax nonlinearity, which was removed. The Qnetwork\u2019s parameters were initialized from those of the policy network. We wished, on the one hand, to maintain the policy network\u2019s final convolutional layer\u2019s informative state representations. On the other hand we also wished to allow the Q-network to output values compatible with Q-learning temporal difference targets. Therefore, an initial policy evaluation step was performed, where we let P\u03b8 drive, and updated the parameters of only the last two fullyconnected layers of Q\u03b8 while fixing all of its other parameters. This step can be viewed as learning a critic (and more precisely, only the last two layers of the critic\u2019s network) to estimate an action-value function while fixing the acting policy. After this policy evaluation step we started the RL algorithm using Q\u03b8, allowing all of its parameters to be updated. An alternative way to initialize the Q-network\u2019s last two fully-connected layers was also considered. Here, in the first (approximately) 12 hours of the RL procedure (using the Q-network to output actions), we allowed only the parameters of the two final fully connected layers to be updated. All the other parameters were fixed. After these initial 12 hours, we allowed the fixed parameters to be updated as well. Full details of the experiments are given in Section 5."}, {"heading": "5 Experimental setting and technicalities", "text": "RL experiments. Q\u03b8 was independently trained twice to perform both tasks 1 and 2. For Task 1 we used Rgeneral\u03b8 on the \u201cMugello\u201d track. For Task 2 we used Rlane\u03b8 on the \u201cBlack Cat County\u201d track. The Q-network\u2019s parameters were initialized from those of the policy network for both tasks. Game restarts were performed when the agent had zero speed (e.g., stuck against some obstacle) or when it drove in the wrong direction (both of these situations were detected through simple image processing). The agent operated with an -greedy policy ( = 0.05). We trained each task for a total of 4 million frames (that is,\naround 5 days of game experience in total) and used a replay memory of the 5, 000 most recent frames. We were able to successfully train the Q-network on both tasks, as can be seen from the results, which are presented in Figure 5. As can be seen in Figure 5, initializing the Q-network\u2019s parameters with those learned in the mimicking stage resulted in better overall driving performance than that achieved when initializing the Q-network\u2019s parameters randomly. The advantage of such informed initialization (using the IL policy network\u2019s parameters) over the random initialization is most significant at the early stages of the reinforcement learning, and circumvented critical driving mistakes that were observed with a random initialization. In Task 2 the agent outperformed the human instructor\u2019s initial demonstration; namely, it received superior reward from Rlane\u03b8 (the instructor\u2019s average reward per epoch was below zero).\nTechnical implications of not having access to the simulator\u2019s internal state. While performing the RL algorithm, all of the following operations are executed online: image capturing, image pre-processing, reward prediction by the reward network, action prediction by the Q-network, the Q-network parameter updates, etc. On average, the serial execution of these operations takes 7 ms. Therefore, the agent must aways act under 7 ms latency (from the time the image is captured to the time the corresponding steering key is pressed). During this gap, the previous key continues to be pressed until a new one is received. This added difficulty can be avoided when using a simulator. But most importantly, our inability to apply the RL stage in a super-fast simulation speed limits the number of training epochs we can afford to conduct.\nImage preprocessing. The images were resized from 1024\u00d7 768 to 192\u00d7 144 and were not converted to gray scale. The pixel values were scaled to be in\nthe range [0, 1]. Pixels corresponding to the speed indicator were set to zero in order to guarantee that the agent doesn\u2019t use the speed information during the learning process. In all our applications through this work, each input instance consisted of two sequential images with a 0.5-second gap between them.\nWork environment. We used the Theano-based Lasagne library for implementing the neural networks. Two GeForce GTX TITAN X GPUs were utilized during the RL experiments; one was used to run the racing game and the other, to train the networks and predict the rewards and actions.\nData generation and network training technicalities. The human demonstrator played the game using a \u201cracing\u201d strategy: driving as fast as possible while ignoring the lane marks and trying to avoid accidents. Training data for the policy and reward networks was collected from the tracks: \u2019Black Cat County\u2019, \u2019Imola\u2019 and \u2019Nu\u0308rburgring gp\u2019. Sample images of the tracks we used are presented in Figure 6. Using a Python environment, screen images were recorded every 0.1 seconds while the human demonstrator played the game. Keyboard keys pressed by the demonstrator were also recorded. 80% of the recorded samples were used as training data and the remaining 20% as validation data. We used the ADAM stochastic optimization method with dropout for regularization (Srivastava et al., 2014). The network parameters that achieved best validation accuracy were chosen.\nPerformance evaluation. Without a natural performance evaluation measure for driving skills and without access to the internal state of the game, our performance evaluation procedure was based on the accumulated average reward achieved by the agent. Better driving means higher (discounted) accumulated average reward and vice versa. Assuming that our learned reward model reliably reflects the concept of \u201cgood driving\u201d (with or without lane constraints), the accumulated average reward is a sound performance measure for the required task.\nOther technicalities. All of the experiments were conducted without any other vehicles on the road. We used the \u2019Lotus Elise SC\u2019 car model in all of our experiments. Focusing only on the steering control problem, we eliminated the accelerator/brakes control variability by using a \u201ccruise control\u201d behavior whereby the car\u2019s speed was set to 50 kmh. This was achieved by extracting the car\u2019s speed from the game image and applying a simple hand-crafted controller."}, {"heading": "6 Concluding remarks", "text": "We presented a multi-stage generic framework, which exploits a natural synergy between several learning principles, for training an agent to perform a complex task. We expect the proposed framework to be useful in various application domains, and have demonstrated its strength on autonomous highway steering problems. Our solution relied on recent deep representational methods such as CNNs to successfully implement all three components of the proposed framework. First, we train a CNN agent to imitate a human demonstrator aiming at achieving a basic initial driving policy. Second, an instantaneous reward\nnetwork is trained from human instructions. Third, the agent uses the learned reward network\u2019s output as a guidance signal in a RL procedure. We note that the proposed implementation is scalable to any computerized driving game and even to real-world driving.\nThe main strength of the proposed scheme stems from leveraging the weak supervision abilities of a (human) instructor, who, while unable to perform well herself at the required task, can provide coherent and learnable instantaneous reward signals to the computerized trainee. This leveraging effect clearly occurred in our self-steering example, where single-lane driving demonstrations (by the instructor) were not included in the imitation stage (and moreover, most of the training tracks do not even include lane marks). Yet, the agent quite easily learned to drive in a single designated lane after receiving one hour instruction session followed by self reinforcement learning (without the instructor).\nWe believe that our self-steering example can be improved in various ways, and in fact, we have not attempted to optimize it. For example, using a steering wheel controller rather than a keyboard, should improve the learning process and the final driving performance. Similarly, the raw images, used as inputs to all our neural networks, were not optimized to the best visual region of interest (ROI), and contain a considerable amount of information irrelevant to the task. It would also be interesting to extend our solution to handle the accelerator/brakes controllers.\nBoth effective acquisition of instantaneous reward from an instructor and accurate modeling of the reward function are required for a successful application of the proposed framework. While in our driving example the reward models were easily constructed, creating these models for highly complex tasks is expected to be challenging in terms of both model capacity and the development of effective methodologies for interaction with the instructor. We anticipate that harnessing the supervision abilities of a (human) instructor, for the purpose of learning an effective reward model, will become a critical building block in creating robots capable of adjusting themselves to human needs."}], "references": [{"title": "Apprenticeship Learning via Inverse Reinforcement Learning", "author": ["P. Abbeel", "A.Y. Ng"], "venue": "In Proceedings of the Twenty-First International Conference on Machine Learning,", "citeRegEx": "Abbeel and Ng.,? \\Q2004\\E", "shortCiteRegEx": "Abbeel and Ng.", "year": 2004}, {"title": "A survey of robot learning from demonstration", "author": ["B.D. Argall", "S. Chernova", "M. Veloso", "B. Browning"], "venue": "Robotics and Autonomous Systems,", "citeRegEx": "Argall et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Argall et al\\.", "year": 2009}, {"title": "Deepdriving: Learning Affordance for Direct Perception in Autonomous Driving", "author": ["C. Chen", "A. Seff", "A. Kornhauser", "J. Xiao"], "venue": "In Proceedings of the IEEE International Conference on Computer Vision, pp", "citeRegEx": "Chen et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2015}, {"title": "An analysis of single-layer networks in unsupervised feature learning", "author": ["Adam Coates", "Honglak Lee", "Andrew Y Ng"], "venue": "Ann Arbor,", "citeRegEx": "Coates et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Coates et al\\.", "year": 2010}, {"title": "Active Reward Learning", "author": ["C. Daniel", "M. Viering", "J. Metz", "O. Kroemer", "J. Peters"], "venue": "In Proceedings of Robotics Science & Systems,", "citeRegEx": "Daniel et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Daniel et al\\.", "year": 2014}, {"title": "Double Q-learning", "author": ["H. Van Hasselt"], "venue": "In Advances in Neural Information Processing Systems, pp. 2613\u20132621,", "citeRegEx": "Hasselt.,? \\Q2010\\E", "shortCiteRegEx": "Hasselt.", "year": 2010}, {"title": "Deep Reinforcement Learning with Double Q-Learning", "author": ["H. Van Hasselt", "A. Guez", "D. Silver"], "venue": "In Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence,", "citeRegEx": "Hasselt et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hasselt et al\\.", "year": 2016}, {"title": "A Robot Controller Using Learning by Imitation", "author": ["G.M. Hayes", "J. Demiris"], "venue": "Technical report,", "citeRegEx": "Hayes and Demiris.,? \\Q1994\\E", "shortCiteRegEx": "Hayes and Demiris.", "year": 1994}, {"title": "A survey of the Hough transform", "author": ["John Illingworth", "Josef Kittler"], "venue": "Computer vision, graphics, and image processing,", "citeRegEx": "Illingworth and Kittler.,? \\Q1988\\E", "shortCiteRegEx": "Illingworth and Kittler.", "year": 1988}, {"title": "Adam: A Method for Stochastic Optimization", "author": ["D. Kingma", "J. Ba"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "Kingma and Ba.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Reinforcement Learning in Robotics: A survey", "author": ["J. Kober", "J.A. Bagnell", "J. Peters"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "Kober et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kober et al\\.", "year": 2013}, {"title": "Imagenet Classification with Deep Convolutional Neural Networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Theory and Application of Reward Shaping in Reinforcement Learning", "author": ["A.D. Laud"], "venue": "PhD thesis, University of Illinois at Urbana-Champaign,", "citeRegEx": "Laud.,? \\Q2004\\E", "shortCiteRegEx": "Laud.", "year": 2004}, {"title": "Learning to Overtake in TORCS Using Simple Reinforcement Learning", "author": ["D. Loiacono", "A. Prete", "P.L. Lanzi", "L. Cardamone"], "venue": "In IEEE Congress on Evolutionary Computation,", "citeRegEx": "Loiacono et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Loiacono et al\\.", "year": 2010}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "A. Riedmiller", "A.K. Fidjeland", "G. Ostrovski"], "venue": "Nature, pp. 529\u2013533,", "citeRegEx": "Mnih et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Controller for TORCS created by imitation", "author": ["J. Munoz", "G. Gutierrez", "A. Sanchis"], "venue": "In IEEE Symposium on Computational Intelligence and Games, pp", "citeRegEx": "Munoz et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Munoz et al\\.", "year": 2009}, {"title": "Policy invariance under reward transformations: Theory and application to reward shaping", "author": ["A.Y. Ng", "D. Harada", "S.J. Russell"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Ng et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Ng et al\\.", "year": 1999}, {"title": "Multimodal deep learning", "author": ["Jiquan Ngiam", "Aditya Khosla", "Mingyu Kim", "Juhan Nam", "Honglak Lee", "Andrew Y Ng"], "venue": "In Proceedings of the 28th international conference on machine learning", "citeRegEx": "Ngiam et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Ngiam et al\\.", "year": 2011}, {"title": "A Reduction of Imitation Learning and Structured Prediction to No-Regret Online Learning", "author": ["S. Ross", "G.J. Gordon", "J.A. Bagnell"], "venue": "In International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Ross et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Ross et al\\.", "year": 2011}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "author": ["N. Srivastava", "G. Hinton", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Srivastava et al\\.,? \\Q1929\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 1929}, {"title": "Reinforcement Learning: An Introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "MIT press Cambridge,", "citeRegEx": "Sutton and Barto.,? \\Q1998\\E", "shortCiteRegEx": "Sutton and Barto.", "year": 1998}, {"title": "Using Human Demonstrations to Improve Reinforcement Learning", "author": ["M.E. Taylor", "H.B. Suay", "S. Chernova"], "venue": "In AAAI Spring Symposium: Help Me Help You: Bridging the Gaps in Human-Agent Collaboration,", "citeRegEx": "Taylor et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Taylor et al\\.", "year": 2011}, {"title": "TORCS, the open racing car simulator. Software available at http://torcs", "author": ["B. Wymann", "E. Espi\u00e9", "C. Guionneau", "C. Dimitrakakis", "R. Coulom", "A. Sumner"], "venue": "sourceforge. net,", "citeRegEx": "Wymann et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Wymann et al\\.", "year": 2000}, {"title": "Query-Efficient Imitation Learning for End-to-End Autonomous Driving", "author": ["J. Zhang", "K. Cho"], "venue": "arXiv preprint:1605.06450,", "citeRegEx": "Zhang and Cho.,? \\Q2016\\E", "shortCiteRegEx": "Zhang and Cho.", "year": 2016}], "referenceMentions": [{"referenceID": 1, "context": "In imitation learning, which is also known as \u2018behavioral cloning\u2019 or \u2018learning from demonstrations\u2019, a human demonstrator performs the desired task with the goal of teaching a (robotic) agent to mimic her actions (Argall et al., 2009).", "startOffset": 214, "endOffset": 235}, {"referenceID": 1, "context": "In imitation learning, which is also known as \u2018behavioral cloning\u2019 or \u2018learning from demonstrations\u2019, a human demonstrator performs the desired task with the goal of teaching a (robotic) agent to mimic her actions (Argall et al., 2009). The demonstrations are used to learn a mapping from a given world state, s, received via sensors, to a desired action, a, consisting of instructions to the agent\u2019s controllers. Throughout this paper s will be referred also as the \u201draw signal.\u201d The objective in IL is to minimize the risk, in the supervised learning sense. In RL the goal is to enable the agent to find its own policy, one that maximizes a value function defined in terms of certain guidance reward signals received during its interaction with the environment. IL and RL can be combined, as was recently proposed by Taylor et al. (2011). The idea is to start the reinforcement learning with an initial policy learned during a preceding IL stage.", "startOffset": 215, "endOffset": 840}, {"referenceID": 17, "context": "Any set of such external features can be easily integrated into our scheme using known methods such as those described in (Ngiam et al., 2011).", "startOffset": 122, "endOffset": 142}, {"referenceID": 1, "context": "(2010), imitation learning (Argall et al., 2009) and reinforcement learning (Kober et al.", "startOffset": 27, "endOffset": 48}, {"referenceID": 10, "context": ", 2009) and reinforcement learning (Kober et al., 2013).", "startOffset": 35, "endOffset": 55}, {"referenceID": 21, "context": "The two closest works to ours are (Taylor et al., 2011) and (Daniel et al.", "startOffset": 34, "endOffset": 55}, {"referenceID": 4, "context": ", 2011) and (Daniel et al., 2014).", "startOffset": 12, "endOffset": 33}, {"referenceID": 2, "context": "See, for example surveys on unsupervised feature learning Coates et al. (2010), imitation learning (Argall et al.", "startOffset": 58, "endOffset": 79}, {"referenceID": 14, "context": "The choice of CNNs for all three tasks is based on their proven ability to extract informative features from images in the context of classification and control tasks (Mnih et al., 2015; Krizhevsky et al., 2012), thus obviating the exhausting task of manually defining features.", "startOffset": 167, "endOffset": 211}, {"referenceID": 11, "context": "The choice of CNNs for all three tasks is based on their proven ability to extract informative features from images in the context of classification and control tasks (Mnih et al., 2015; Krizhevsky et al., 2012), thus obviating the exhausting task of manually defining features.", "startOffset": 167, "endOffset": 211}, {"referenceID": 22, "context": ", TORCS (Wymann et al., 2000)) containing valuable parameters such as the car\u2019s distance from the roadside or its angle with respect to the road.", "startOffset": 8, "endOffset": 29}, {"referenceID": 13, "context": ", in computer game simulators) (Zhang & Cho, 2016; Loiacono et al., 2010; Munoz et al., 2009; Chen et al., 2015).", "startOffset": 31, "endOffset": 112}, {"referenceID": 15, "context": ", in computer game simulators) (Zhang & Cho, 2016; Loiacono et al., 2010; Munoz et al., 2009; Chen et al., 2015).", "startOffset": 31, "endOffset": 112}, {"referenceID": 2, "context": ", in computer game simulators) (Zhang & Cho, 2016; Loiacono et al., 2010; Munoz et al., 2009; Chen et al., 2015).", "startOffset": 31, "endOffset": 112}, {"referenceID": 16, "context": "This method is known as reward shaping, where an additional reward signal is used to guide the learning agent (Ng et al., 1999).", "startOffset": 110, "endOffset": 127}, {"referenceID": 5, "context": "Third, the Double Deep Q-learning (Hasselt, 2010; Hasselt et al., 2016) (DDQN) RL algorithm is used to train a Q-network.", "startOffset": 34, "endOffset": 71}, {"referenceID": 6, "context": "Third, the Double Deep Q-learning (Hasselt, 2010; Hasselt et al., 2016) (DDQN) RL algorithm is used to train a Q-network.", "startOffset": 34, "endOffset": 71}, {"referenceID": 8, "context": ", 2015; Krizhevsky et al., 2012), thus obviating the exhausting task of manually defining features. For example, in the work of Mnih et al. (2015) a CNN was successfully trained to predict desired control actions given high-dimensional pixel data in the Atari 2600 domain.", "startOffset": 8, "endOffset": 147}, {"referenceID": 1, "context": "learning using mimicry is an old idea, conceived decades ago (Hayes & Demiris, 1994; Argall et al., 2009).", "startOffset": 61, "endOffset": 105}, {"referenceID": 18, "context": "A training sample of state-action pairs is gathered in the following two-stage procedure, which can be viewed as one iteration of the Dagger algorithm applied with \u03b2 = 0 (Ross et al., 2011).", "startOffset": 170, "endOffset": 189}, {"referenceID": 12, "context": "The problem of designing suitable reward functions to guide an agent to successfully learn a desired task is known as reward shaping (Laud, 2004).", "startOffset": 133, "endOffset": 145}, {"referenceID": 14, "context": "We used the DDQN algorithm with replay memory and target values calculated from parameters of the previous iteration, as in the work of Mnih et al. (2015). The loss function we used is therefore,", "startOffset": 136, "endOffset": 155}], "year": 2016, "abstractText": "We propose a scheme for training a computerized agent to perform complex human tasks such as highway steering. The scheme resembles natural teaching-learning processes used by humans to teach themselves and each other complex tasks, and consists of the following four stages. In the first stage the agent learns by itself an informative low-dimensional representations of raw input signals in an unsupervised learning manner. In the second stage the agent learns to mimic the human instructor using supervised learning so as to reach a basic performance level; the third stage is devoted to learning an instantaneous reward model. Here, the (human) instructor observes (possibly in real time) the agent performing the task and provides reward feedback. During this stage the agent monitors both itself and the instructor feedback and learns a reward model using supervised learning. This stage terminates when the reward model is sufficiently accurate. In the last stage a reinforcement learning algorithm is deployed to optimize the agent policy. The guidance reward signal in the reinforcement learning algorithm relies on the previously learned reward model. As a proof of concept for the proposed scheme, we designed a system consisting of deep convolutional neural networks, and applied it to successfully learn a computerized agent capable of autonomous highway steering over the well-known racing game Assetto Corsa.", "creator": "LaTeX with hyperref package"}}}