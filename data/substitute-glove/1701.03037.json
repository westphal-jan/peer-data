{"id": "1701.03037", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Jan-2017", "title": "Towards Smart Proof Search for Isabelle", "abstract": "Despite took its progress in conventional ergodic cylindric, reasons engineers are already suffering having created lack the powerful obtain state-of-the-art. In a very articles we first report our proof expand language enterprise start a meta - applications approach. Then, we policies an AI - of innovative have drastically improve authenticity automate for Isabelle, all multiple three as challenges things effort coming response out similar scope.", "histories": [["v1", "Tue, 10 Jan 2017 08:52:31 GMT  (12kb)", "http://arxiv.org/abs/1701.03037v1", "Accepted at AITP2017"]], "COMMENTS": "Accepted at AITP2017", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["yutaka nagashima"], "accepted": false, "id": "1701.03037"}, "pdf": {"name": "1701.03037.pdf", "metadata": {"source": "CRF", "title": "Towards Smart Proof Search for Isabelle", "authors": ["Yutaka Nagashima"], "emails": ["name@data61.csiro.au"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 1.\n03 03\n7v 1\n[ cs\n.A I]\n1 0\nJa n\n20 17\nDespite the recent progress in automatic theorem provers, proof engineers are still suffering from the lack of powerful proof automation. In this position paper we first report our proof strategy language based on a meta-tool approach. Then, we propose an AI-based approach to drastically improve proof automation for Isabelle, while identifying three major challenges we plan to address for this objective."}, {"heading": "1 PSL and Meta-Tool Approach", "text": "In the last decade, we have seen the successful application of automated theorem provers to assist interactive theorem proving. Despite the popularity of these so-called \u201chammer-style\u201d tools, their performance is still suffering from the gap between underlying logics [1].\nTo circumvent this problem, we introduced a proof strategy language, PSL [4], to Isabelle/HOL [5], taking a meta-tool approach. A proof strategy is an abstract description of how to attack proof obligations. Users write strategies in PSL based on their intuitions on a conjecture. Using a strategy, PSL\u2019s runtime system generates many invocations of Isabelle\u2019s native proof tools, called tactics. The runtime tries to find out the appropriate combination of tactics for each goal by trial-and-error. This way, PSL reduces the domain specific procedure of interactive theorem proving to the well-known dynamic tree search problem. The meta-tool language approach brought the following advantages:\n\u2022 Domain specific procedures can be added as new sub-tools. \u2022 Sub-tools (including Sledgehammer) can be improved independently of PSL. \u2022 Generated efficient-proof scripts are native Isabelle proofs.\nWe provided a default strategy, try hard. Our evaluation shows that PSL based on try - hard significantly outperforms Sledgehammer for many use cases [4]. However, PSL\u2019s proof search procedure is still mostly brute-force. For example, when PSL generates many tactics, even though each of these is tailored for the proof goal utilizing the runtime information, it is still the statically written strategy, try hard, that decides:\n\u2022 what kind of tactics to generate, \u2022 how to combine them, and \u2022 in which order to apply generated tactics."}, {"heading": "2 Meta-Tool Based Smart Proof Search", "text": "On a fundamental level, this lack of flexibility stems from the procedural nature of Isabelle\u2019s tactic language, which describes how to prove conjectures in a step-by-step manner rather than what to do with conjectures. However, a conventional declarative language would not be a good solution either, since in many cases we cannot determine what to do with a given proof goal with certainty. Our guess may or may not be right: given a proof goal, we cannot tell which tactics to use until we complete the goal.\nProbabilistic Declarative Proof Strategy Language. We propose the development of a probabilistic declarative proof strategy language (PDPSL), which allows for the description of feasible tactics for arbitrary proof obligation. For example, when we apply a proof strategy, str, written in PDPSL, to a proof search graph, pgraph, PDPSL\u2019s runtime:\n(1) picks up the most promising node in pgraph, (2) applies the most promising tactic that has not been applied to that node yet, and (3) adds the resultant node to pgraph, connecting them with a labelled edge representing the\ntactic application and weight indicating how promising that tactic application is.\nThe runtime keeps applying this procedure until it reaches a solved state, in which the proof is complete. This way, PDPSL executes a best-first search at runtime.\nThe major challenge is the design of PDPSL. A strategy written in PDPSL is applied repeatedly during a best-first search against emerging proof obligations, and we cannot predict how these intermediate goals look like prior to the search; therefore, weighting of tactics against concrete proof goals is not good enough. PDPSL should only describe the meta-information on proof goals and information in Isabelle\u2019s standard library. Such meta-information includes:\n\u2022 Which ITP mechanism was used to define constants that appear in the proof obligation? \u2022 Does the conjecture involve recursive functions?\nThis may sound too restrictive; however, when proof engineers use ITPs, we often reason on the meta level. For instance, Isabelle\u2019s tutorial [5] introduces the following heuristics:\n\u201cTheorems about recursive functions are proved by induction.\u201d \u201cThe right-hand side of an equation should (in some sense) be simpler than the left-hand side.\u201d\nThese are independent of user-defined formalisation.\nPosterior Proof Attempt Evaluation. Evaluating a proof goal to write promising tactics is only half the story of typical interactive proof development. The other half is about evaluating the results of tactic applications. We presume that posterior evaluations on tactic application will improve proof search when combined with prior expectations on tactics described in PDPSL. The main challenge is to find a useful measure by:\n\u2022 discovering (possibly multiple) useful measures that indicate progress in proof search, and \u2022 investigating how to integrate these measures into the best-first search of PDPSL.\nOf course it is not possible to come up with a heuristic that is guaranteed to work for all kinds of proof obligations. But when focusing on a particular problem domain such as systems verification, it is plausible to find a useful measure to narrow the search space at runtime.\nReinforcement Learning of PDPSL using Large Proof Corpora. PDPSL is primarily for engineers to encode their intuitions. But at the next step, we plan to improve this handwritten heuristics using reinforcement learning on the existing proof corpora. The Isabelle community has a repository of formal proofs, called the Archive of Formal Proofs (AFP) [3]. As of 2015, the size of the AFP is larger than one million lines of code. Additionally, the seL4 project open-sourced roughly 400,000 lines of Isabelle proof script [2]. We speculate that these large proof corpora will work as the basis for reinforcement learning of strategies written in PDPSL. The lack of concrete information on proof obligations can be an advantage at this stage: since PDPSL cannot describe concrete proof obligations, it is less likely to cause over-fitting."}], "references": [{"title": "Hammering towards QED", "author": ["Jasmin Christian Blanchette", "Cezary Kaliszyk", "Lawrence C. Paulson", "Josef Urban"], "venue": "J. Formalized Reasoning,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2016}, {"title": "Proof Engineering Challenges for Large-Scale V erification", "author": ["Gerwin Klein"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "The Archive of Formal Proofs", "author": ["Gerwin Klein", "Tobias Nipkow", "Larry Paulson"], "venue": "https://www.isa-afp.org/,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "A Proof Strategy Language and Proof Script Generation for Isabelle", "author": ["Yutaka Nagashima", "Ramana Kumar"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2016}, {"title": "Isabelle/HOL - A Proof Assistant for Higher-Order Logic, volume", "author": ["Tobias Nipkow", "Lawrence C. Paulson", "Markus Wenzel"], "venue": "Lecture Notes in Computer Science. Springer,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}], "referenceMentions": [{"referenceID": 0, "context": "Despite the popularity of these so-called \u201chammer-style\u201d tools, their performance is still suffering from the gap between underlying logics [1].", "startOffset": 140, "endOffset": 143}, {"referenceID": 3, "context": "To circumvent this problem, we introduced a proof strategy language, PSL [4], to Isabelle/HOL [5], taking a meta-tool approach.", "startOffset": 73, "endOffset": 76}, {"referenceID": 4, "context": "To circumvent this problem, we introduced a proof strategy language, PSL [4], to Isabelle/HOL [5], taking a meta-tool approach.", "startOffset": 94, "endOffset": 97}, {"referenceID": 3, "context": "Our evaluation shows that PSL based on try hard significantly outperforms Sledgehammer for many use cases [4].", "startOffset": 106, "endOffset": 109}, {"referenceID": 4, "context": "For instance, Isabelle\u2019s tutorial [5] introduces the following heuristics:", "startOffset": 34, "endOffset": 37}, {"referenceID": 2, "context": "The Isabelle community has a repository of formal proofs, called the Archive of Formal Proofs (AFP) [3].", "startOffset": 100, "endOffset": 103}, {"referenceID": 1, "context": "Additionally, the seL4 project open-sourced roughly 400,000 lines of Isabelle proof script [2].", "startOffset": 91, "endOffset": 94}], "year": 2017, "abstractText": "Despite the recent progress in automatic theorem provers, proof engineers are still suffering from the lack of powerful proof automation. In this position paper we first report our proof strategy language based on a meta-tool approach. Then, we propose an AI-based approach to drastically improve proof automation for Isabelle, while identifying three major challenges we plan to address for this objective. 1 PSL and Meta-Tool Approach In the last decade, we have seen the successful application of automated theorem provers to assist interactive theorem proving. Despite the popularity of these so-called \u201chammer-style\u201d tools, their performance is still suffering from the gap between underlying logics [1]. To circumvent this problem, we introduced a proof strategy language, PSL [4], to Isabelle/HOL [5], taking a meta-tool approach. A proof strategy is an abstract description of how to attack proof obligations. Users write strategies in PSL based on their intuitions on a conjecture. Using a strategy, PSL\u2019s runtime system generates many invocations of Isabelle\u2019s native proof tools, called tactics. The runtime tries to find out the appropriate combination of tactics for each goal by trial-and-error. This way, PSL reduces the domain specific procedure of interactive theorem proving to the well-known dynamic tree search problem. The meta-tool language approach brought the following advantages: \u2022 Domain specific procedures can be added as new sub-tools. \u2022 Sub-tools (including Sledgehammer) can be improved independently of PSL. \u2022 Generated efficient-proof scripts are native Isabelle proofs. We provided a default strategy, try hard. Our evaluation shows that PSL based on try hard significantly outperforms Sledgehammer for many use cases [4]. However, PSL\u2019s proof search procedure is still mostly brute-force. For example, when PSL generates many tactics, even though each of these is tailored for the proof goal utilizing the runtime information, it is still the statically written strategy, try hard, that decides: \u2022 what kind of tactics to generate, \u2022 how to combine them, and \u2022 in which order to apply generated tactics. 2 Meta-Tool Based Smart Proof Search On a fundamental level, this lack of flexibility stems from the procedural nature of Isabelle\u2019s tactic language, which describes how to prove conjectures in a step-by-step manner rather than what to do with conjectures. However, a conventional declarative language would not be a good solution either, since in many cases we cannot determine what to do with a given proof goal with certainty. Our guess may or may not be right: given a proof goal, we cannot tell which tactics to use until we complete the goal. Probabilistic Declarative Proof Strategy Language. We propose the development of a probabilistic declarative proof strategy language (PDPSL), which allows for the description of feasible tactics for arbitrary proof obligation. For example, when we apply a proof strategy, str, written in PDPSL, to a proof search graph, pgraph, PDPSL\u2019s runtime: (1) picks up the most promising node in pgraph, (2) applies the most promising tactic that has not been applied to that node yet, and (3) adds the resultant node to pgraph, connecting them with a labelled edge representing the tactic application and weight indicating how promising that tactic application is. The runtime keeps applying this procedure until it reaches a solved state, in which the proof is complete. This way, PDPSL executes a best-first search at runtime. The major challenge is the design of PDPSL. A strategy written in PDPSL is applied repeatedly during a best-first search against emerging proof obligations, and we cannot predict how these intermediate goals look like prior to the search; therefore, weighting of tactics against concrete proof goals is not good enough. PDPSL should only describe the meta-information on proof goals and information in Isabelle\u2019s standard library. Such meta-information includes: \u2022 Which ITP mechanism was used to define constants that appear in the proof obligation? \u2022 Does the conjecture involve recursive functions? This may sound too restrictive; however, when proof engineers use ITPs, we often reason on the meta level. For instance, Isabelle\u2019s tutorial [5] introduces the following heuristics: \u201cTheorems about recursive functions are proved by induction.\u201d \u201cThe right-hand side of an equation should (in some sense) be simpler than the left-hand side.\u201d These are independent of user-defined formalisation. Posterior Proof Attempt Evaluation. Evaluating a proof goal to write promising tactics is only half the story of typical interactive proof development. The other half is about evaluating the results of tactic applications. We presume that posterior evaluations on tactic application will improve proof search when combined with prior expectations on tactics described in PDPSL. The main challenge is to find a useful measure by: \u2022 discovering (possibly multiple) useful measures that indicate progress in proof search, and \u2022 investigating how to integrate these measures into the best-first search of PDPSL. Of course it is not possible to come up with a heuristic that is guaranteed to work for all kinds of proof obligations. But when focusing on a particular problem domain such as systems verification, it is plausible to find a useful measure to narrow the search space at runtime. Reinforcement Learning of PDPSL using Large Proof Corpora. PDPSL is primarily for engineers to encode their intuitions. But at the next step, we plan to improve this handwritten heuristics using reinforcement learning on the existing proof corpora. The Isabelle community has a repository of formal proofs, called the Archive of Formal Proofs (AFP) [3]. As of 2015, the size of the AFP is larger than one million lines of code. Additionally, the seL4 project open-sourced roughly 400,000 lines of Isabelle proof script [2]. We speculate that these large proof corpora will work as the basis for reinforcement learning of strategies written in PDPSL. The lack of concrete information on proof obligations can be an advantage at this stage: since PDPSL cannot describe concrete proof obligations, it is less likely to cause over-fitting.", "creator": "easychair.cls-3.4"}}}