{"id": "1702.06362", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Feb-2017", "title": "Negative-Unlabeled Tensor Factorization for Location Category Inference from Highly Inaccurate Mobility Data", "abstract": "Identifying reflects location values south turned equipment telling users not the key to rather certain on compatible. This is be extremely challenging challenges due may the finding deviation between the 800,000 view interaction and under upon part, to could already weeks the passed of kilometers. Using when articles location coordinate most the kansas working but found one error to to radius, good can draw was location uncertainty circle once in cover multiple location distinct, especially in isolated mainly territory. To estimated by scope location unique more precisely, maybe propose a novel tensor divisor implemented, turn as key observations including the constants correlations only devices, time randomness two most likely observation list main the historic uncertainty crossed. In addition, into initiative equation can may predict same pcs rather even since there is come location update. In allowing to adequately resolving making initiatives strengthen, they propose same parameter - give and architectures gameplay algorithm by effectively exploring called understory without height - rank attached of a finite. Our empirical studies so but over new algorithm thought none solutions all effective: always can solve affect with 400,000 of users example costs of adjacent updates, such also proper superior estimating accuracies on real - international suitable toll have check - between data easily.", "histories": [["v1", "Tue, 21 Feb 2017 12:55:56 GMT  (627kb,D)", "http://arxiv.org/abs/1702.06362v1", null], ["v2", "Thu, 9 Mar 2017 01:41:45 GMT  (132kb,D)", "http://arxiv.org/abs/1702.06362v2", null], ["v3", "Wed, 24 May 2017 07:23:53 GMT  (131kb,D)", "http://arxiv.org/abs/1702.06362v3", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["jinfeng yi", "qi lei", "wesley gifford", "ji liu", "junchi yan"], "accepted": false, "id": "1702.06362"}, "pdf": {"name": "1702.06362.pdf", "metadata": {"source": "CRF", "title": "Negative-Unlabeled Tensor Factorization for Location Category Inference from Inaccurate Mobility Data", "authors": ["Jinfeng Yi", "Qi Lei", "Wesley Gifford", "Ji Liu", "Thomas J. Watson"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Understanding mobile phone users\u2019 spatio-temporal activities is a central theme in a variety of applications, including personalized advertising [3], traffic monitoring [19], security management [33], and assistance of the elderly and disabled [4]. To this end, a key step is to identify the significant location categories visited by each mobile phone user from his / her mobile location updates, such as restaurants, gyms, and shopping malls. Unfortunately, this is an extremely challenging task since mobile location updates are often highly inaccurate. Inaccuracies arise for a number of reasons, for example,\n\u2022 signal conditions and qualities: In GPS-based systems signal conditions, such as dense foliage or urban canyons, can impact the ability to communicate with the required number of satellites or introduce delay in signal propagation \u2013 ultimately leading to decreased accuracy.\n\u2217Part of the work was done during Qi Lei\u2019s internship at IBM Thomas J. Watson Research Center.\nar X\niv :1\n70 2.\n06 36\n2v 1\n[ cs\n.L G\n] 2\n\u2022 bias of location estimation techniques: For triangulation-based methods, the density of WiFi or cellular networks can significantly affect accuracy. The fact that the density of such networks varies significantly across locations means different levels of accuracy will be observed.\n\u2022 device limitation: Many mobile applications may deliberately request less frequent or less accurate location information in order to conserve battery power for applications where high accuracy is not explicitly required.\nUsing a sample of mobile location data collected as part of an IBM partnership with a leading location-based services company, we investigated the distribution of location errors. The error distribution for one month of data from a major U.S. city is depicted in Figure 1. The data show that only 56% of updates have errors within 50 meters, while 26% of the updates have errors greater than 500 meters. Using the estimated location coordinate as the center and its associated error as the radius, we can draw a circle where the mobile phone user may be located. We refer to such a circle as location uncertainty circle, which may cover multiple location categories, especially in densely populated areas like cities. Figure 2 shows a location uncertainty circle drawn based on a simulated location update and a 100 meter location error in New York City. Although this circle is not very large, it still covers 7 location categories, including library, restaurant, school, shop, gallery, bank, and consulate, all of which might be the true venue visited by this user. To decide a unique location category, a naive idea is to use 1-nearest neighbor (1-NN) approach, i.e., simply choose the venue that is closest to the estimated location coordinate. However, this approach is problematic since there may exist multiple nearby venues with almost identical distances to the estimated location coordinate. Figure 2 gives one such example. The estimated location coordinate is almost equally close to the boundaries of four venues, including a Chase bank, a pizza restaurant, a clothing shop, and the New York Society Library. Therefore, it is almost impossible to identify the true venue\nusing the 1-NN approach. In addition, since many location updates have very large location errors, and the estimated location coordinate could be highly biased, there is no guarantee that the true venue visited by the mobile phone user is close to the estimated location coordinate.\nIn this paper, we study the problem of inferring mobile phone users\u2019 true location categories based on noisy location updates. This problem is challenging since many location errors are fairly large, and hence users\u2019 underlying true locations may be far away from the estimated coordinates. In addition, since mobile users are anonymous and we have no access to their personal information, no side information other than the noisy mobility location data itself is used in our modeling, which further increases the difficulty.\nIn this paper, we develop a novel framework for location category inference to address these challenges, based on some key observations and the intrinsic correlations among users. Given a collection of location updates that involve a total of N mobile phone users, T time slots, and C location categories, our objective is to learn a non-negative three-way tensor X \u2208 RN\u00d7T\u00d7C+ where X ijk indicates the probability that user i visited the location category k during the time slot j. To this end, we first observe that for each location update, there is one and only one true location category since a user can only visit one place at a time. In addition, since the user\u2019s true location must be within the location uncertainty circle, the location categories not covered by this circle cannot be visited. Therefore, the probabilities of visiting these location categories is zero, while the\nprobabilities of location categories covered by the location uncertainty circle sum up to one. Indeed, we can treat this problem as a two-class learning problem where the positive class contains only one example (i.e., the true location category) while all the other examples belong to the negative class (i.e., false location categories). Under this scenario, all the labeled examples are sampled from the negative class and the unlabeled examples come from both negative and positive classes. We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2]. The key feature to these problems is that the labeled examples are only drawn from the positive class, and the unlabeled examples are a mixture of positive and negative class samples.\nThe observations specified above are insufficient to recover the probabilities of all the location categories since we can assign the non-zero probabilities with any non-negative values that sum to one. To address this issue, we develop a collaborative approach that exploit all users\u2019 location updates to collaboratively locate each other. This is due to the reason that people with the same lifestyle tend to behave similarly. For instance, parents of kindergarteners may drop-off and pickup their children at roughly the same local time, even if their children are not enrolled in a same kindergarten. Likewise, people with routine work-home schedules tend to go to work from home and go back home after work at similar time, which are the main reasons of morning and evening traffic peaks. In addition to user-user similarity, time-time similarity is another factor we can take advantage of since users\u2019 routines are usually consistent from day to day, or from week to week. This observation suggests that the underlying tensor X should be close to low-rank, which is also verified by a widely held assumption that people\u2019s behaviors are dictated by a small number of latent factors [25, 32].\nGiven the above observations, we first formulate our learning problem as a low-rank tensor factorization problem under NU constraints. However, the high computational cost significantly limits its application to real-world location category inference problem that involves a large number of mobile phone users and location updates. To address this limitation, we first relax the problem to a matrix optimization problem by converting two three-way tensors to their mode-1 matricizations. We note that the problem after relaxation is still challenging to solve since it requires computation of a low-rank approximation of a large matrix, which is computationally expensive in general. More severely, the optimization problem involves N \u00d7T \u00d7C entries, thus a naive optimization algorithm will take at least O(N \u00d7 T \u00d7 C) time to optimize the problem. To overcome this limitation, we develop an efficient alternating minimization algorithm by effectively exploring the sparsity of the large matrix. Our experiments show that our algorithm is extremely efficient and can scale up to problems with millions of users. For instance, our synthetic study shows that the proposed algorithm is able to perfectly predict the underlying location categories for 3 million mobile phone users and close to a billion location updates in less than 1 hour.\nFurthermore, we emphasize the key reasons why we specifically focus on the problem of inferring the true location category rather than the actual venue. Firstly, the number of venues is substantially larger than the number of categories. Since the number of users having venue-wise similar behavioral patterns is substantially lower than the number of users having category-wise similar behavioral patterns, it becomes very difficult to leverage collaborative techniques if individual venues are sought. More importantly, knowledge of the categories visited by users often provides enough useful information for many important tasks, such as profile estimation and personalized advertising.\nOur main contributions in this paper are highlighted as follows:\n\u2022 To the best of our knowledge, this is the first work that can infer users\u2019 location categories purely based on highly inaccurate mobility data. Specifically, we propose a novel learning framework that can not only infer location categories in a collaborative manner, but also handle the issues when large number of users\u2019 location updates are sparse and noisy.\n\u2022 To the best of our knowledge, this is the first work that studies the tensor factorization problem under the negative-unlabeled (NU) constraints. One advantage of casting the location category inference problem as a tensor factorization problem is that by completing the tensor, we can even infer users\u2019 location categories when there is no location update data available.\n\u2022 By effectively exploiting sparsity, we develop an extremely efficient algorithm that is able to infer location categories with a huge number of mobile phone users and location updates."}, {"heading": "2 Related Work", "text": "To the best of our knowledge, this paper makes the first attempt to learn mobile phone users\u2019 location categories from highly inaccurate mobility location data. We review two existing works related to our work: stay point detection and location semantic meaning identification. Stay point detection In a trajectory or sequence of location updates, stay points are defined as the important locations where people have stayed for a while [32]. [16] proposed the first stay point detection algorithm that checks if the distance and the time span between an anchor point and its successors in a trajectory are larger than two individual thresholds. If both answers are yes, a stay point is detected. The authors in [30, 31] further improved this algorithm by considering the density of location points. In [6], stay points were detected by modeling location-location and location-user relationships via a graph-based approach. Location semantic meaning identification To go one step further, many location-aware applications also care about the semantic meanings of stay points. To address this problem, a typical idea is to first cluster the stay points to identify regions of interest, and then use a cluster ID to represent stay points belonging to this cluster. Popular clustering approaches in this area include time-based clustering, density-based clustering, and partitioning clustering, as summarized in [34]. In particular, the authors in [1] use a variant of k-means algorithm to cluster GPS data for detecting users\u2019 significant locations. Besides, a density-based clustering algorithm was applied in [29] to infer individual life patterns from GPS trajectory data. The authors in [26] estimate user similarities in terms of semantic location history using a hierarchical clustering-based approach. The work in [18] identifies home and work locations by first transforming user trajectory records into user-location signatures, and then applying k-Means clustering on these signatures. Key differences from our work Although the problems discussed above share some similarities with our work, they differ from the focus of our paper in the following respects:\n\u2022 They usually use accurate location data such as GPS signals to generate trajectories and ignore the location errors. On the contrary, the real-world mobile location update data considered in our study is highly inaccurate with unignorable location errors, making our problem much more difficult to solve.\n\u2022 Given a location update in a trajectory, they aim to assign it to a cluster of similar location updates, under the assumption that similar location updates should belong to the same cluster. In comparison, our main focus is to infer the underlying true location category, under a more realistic scenario that even if two location updates appear to be similar, they may belong to different location categories due to unignorable location errors.\n\u2022 Most studies mentioned above adopt non-collaborative approaches, where user\u2019s profile data is used in isolation to determine his / her stay points. In contrast, the goal in this paper infers the user\u2019s location categories altogether from a unified model that collaboratively locates each other. Comparing with non-collaborative approaches, our approach is more robust to inaccurate and sparse location updates data."}, {"heading": "3 Methodology", "text": "In this section, we first briefly discuss how to clean up the raw mobility location update data and generate the candidate location categories. We then present our negative-unlabeled tensor factorization model, followed by a scalable optimization algorithm.\nThroughout the paper, we use boldface Euler script letters, boldface capital letters, and boldface lower-case letters to denote tensors (e.g., X ), matrices (e.g., X) and vectors (e.g., x), respectively. The (i, j, k)-th entry of a third-order tensor X and the (i, j)-th entry of a matrix X is denoted by X ijk and Xij , respectively. |\u2126| returns the number of elements in the set of \u2126. [N ] denotes the set {1, 2, \u00b7 \u00b7 \u00b7 , N} for short, where N must be an integral number."}, {"heading": "3.1 Data Preprocessing and Location Candidate Generation", "text": "Given a collection of mobile location updates in the form {anonymous user id, UTC timestamp, estimated location coordinates, location error}, we first preprocess the raw data. The preprocessing encompasses three key steps: 1) filtering to retain only meaningful location updates, 2) association with location updates with category information, and 3) quantization of time into time slots. The specifics of how this is done is dependent on the data source used, and will be explained in more detail when the experiments are described in Section 4.\nOnce the preprocessed location update data, containing N users, T time slots, and C location categories, is available we construct the possible category set for each user at each time slot\n\u2126ij :={k \u2208 [C] | category k appears in the location circle of user i at time slot j.}"}, {"heading": "3.2 A Negative-Unlabeled Tensor Factorization Model for Location Category Inference", "text": "Given a total of N users, T time slots, C location categories, and the possible location category set \u2126, our goal is to infer a location probability tensor X \u2208 RN\u00d7T\u00d7C+ . Each element X ijk \u2208 [0, 1] denotes the probability of user i at time slot j visiting category k. Specifically, the larger the entry X ijk, the greater the chance that user i was visiting the location category j during the time slot k. To effectively infer the tensor X , we need to restrict X from several key observations.\nThe first observation is that if k /\u2208 \u2126ij , X ijk must be 0. This is because a user cannot be visiting a location category if no venue in such category is within the error allowance of the location update. Our second observation is that among the location categories in \u2126ij , there is one and only one true category since a user can only appear at one place at a time. In other words, we have\u2211\nk\u2208\u2126ijX ijk = 1, \u2200i \u2208 [N ], j \u2208 [T ]. As an extreme case, the entry X ijk equals to 1 if there is only one location category located within the location uncertainty circle. Combining both observations 1 and 2, we face a scenario where (i) the positive (i.e., true location category) class contains only one example; (ii) all the labeled examples are sampled from the negative class (i.e., false location categories) and the unlabeled examples come from both negative and positive classes. We refer to such a scenario as negative-unlabeled (NU) setting. Therefore, together with the probability assumption of tensor X , we can restrict it in the following region, in particular, \u2200(i, j) X ijk = 0, and k /\u2208 \u2126ij\u2211 k\u2208\u2126ijX ijk = 1, and k \u2208 \u2126ij\nX ijk \u2265 0, \u2200k,\nThe two observations from local perspective specified above are insufficient to recover the tensor X as we can fill its unobserved entries (i.e., X ijk, k \u2208 \u2126ij) in with any non-negative values that add up to 1. To this end, we need to consider the inference of X from a global perspective by integrating all users\u2019 trajectory data together to collaboratively locate each other, instead of learning a separate model for each user in isolation. The logic behind the collaborative approach is that people with the same lifestyle tend to behave similarly. For example, kindergarten parents may drop-off and pickup their children at roughly the same local time, even if their children are not enrolled in the same kindergarten. Likewise, people with routine work-home style tend to go to work from home and go back home after work at similar time, which are the main reasons of morning and evening peaks. In addition to user-user similarity, time-time similarity is another factor we can take advantage of since users\u2019 trajectories are usually consistent from day to day or week to week. The observations above suggest that the underlying tensor X should be close to low-rank. To see this, let\u2019s consider an ideal case where all the users belong to multiple lifestyle categories and the people with the same lifestyle behave the same. In this case, the rank of the location category tensor is upper bounded by the number of lifestyle categories, a typically small number. Indeed, the low-rank assumption can be verified by another view that people\u2019s daily trajectory paths are generally believed to be dictated by a small number of latent factors [25, 32].\nCombining our observations together, we recover the tensor X by solving the following negativeunlabeled tensor factorization (NUTF):\nmin X , Y\u2208RN\u00d7T\u00d7C\n\u2016X \u2212Y\u20162F (1)\ns.t. rank(Y) \u2264 r X ijk = 0, \u2200i, j, and k /\u2208 \u2126ij\u2211\nk\u2208\u2126ijX ijk = 1, \u2200i, j, and k \u2208 \u2126ij X ijk \u2265 0, \u2200i, j, k,\n(2)\nwhere we require X that satisfies the NU constraints (2) and also close to a low rank tensor Y with rank no more than r. There are several choices for the definition of the rank of a tensor. We choose the one to make the optimization scalable, which will be clear soon.\nAlgorithm 1 Projection of a vector onto the probability simplex [23] 1: Input: a vector v \u2208 Rd to be projected 2: Sort v into v\u0303: v\u03031 \u2265 v\u03032 \u2265 \u00b7 \u00b7 \u00b7 \u2265 v\u0303d 3: Find k = max{j \u2208 [d] : v\u0303j \u2212 1j ( \u2211k i=1 v\u0303i \u2212 1) > 0}\n4: Compute \u03b8 = 1k ( \u2211k\ni=1 v\u0303i \u2212 1) 5: Return: u \u2208 Rd s.t. ui = max(vi \u2212 \u03b8, 0), i \u2208 [d]"}, {"heading": "3.3 A Parameter-free Scalable Optimization Algorithm", "text": "In order to efficiently solve the NUTF model (1), we adopt an alternating minimization scheme that iteratively fixes one of X and Y and minimizes with respect to the other. One nice property is that the proposed algorithm is optimization parameter free, that is, the user does not need to decide any optimization parameter such as step length or learning rate.\nUpdate X In each iteration of the alternating minimization algorithm, we first update Y with a fixed X , and then update X by fixing Y . When Y is fixed, our goal becomes learning a closest tensor that satisfies the NU constraints (2). To this end, we rewrite the objective function (1) by treating the entries lying within and outside of the \u2126 set separately, i.e.,\nmin X\u2208RN\u00d7T\u00d7C \u2211 i,j; k/\u2208\u2126ij (X ijk \u2212Y ijk)2 + \u2211 i,j; k\u2208\u2126ij\n(X ijk \u2212Y ijk)2 (3) X ijk = 0, \u2200i, j, and k /\u2208 \u2126ij\u2211\nk\u2208\u2126ijX ijk = 1, \u2200i, j, and k \u2208 \u2126ij X ijk \u2265 0, \u2200i, j, k\n(4)\nThe optimization problem (3) consists of two independent and easily-computable subproblems. For the first subproblem that only involves the entries outside of the possible set \u2126, we simply set all of them as zeros to meet the NU constraints (2). The second subproblem only involves the entries lying within the possible set \u2126 and is essentially a least square problem under a probability simplex constraint. Specifically, for each location update with user i and time slot j, we project a |\u2126ij |-dimensional vector X ij\u2126ij onto the probability simplex, which can be efficiently computed in O(|\u2126ij | log |\u2126ij |) time, as described in Algorithm 1.\nUpdate Y When X is fixed, we update Y by solving the following optimization problem:\nmin Y\u2208RN\u00d7T\u00d7C\n\u2016X \u2212Y\u20162F , (5)\ns.t. rank(Y) \u2264 r\nThere are multiple ways to define the rank for tensors. For example, the definition based on Candecomp/Parafac (CP) decomposition [15]\nRank(Y) = min { r | Y =\nr\u2211 i=1 ai \u25e6 bi \u25e6 ci\n} , (6)\nAlgorithm 2 Efficient Algorithm for Computing the Sparse Low-rank Approximation of the Matrix X\n1: Input: X \u2208 RN\u00d7TC , support set \u2126, rank r, number of iterations T 2: Initialization: Gaussian random matrix R \u2208 RTC\u00d7r satisfying Rij \u223c N (0, 1), Y \u2190 0N\u00d7TC 3: B\u2190 XR 4: Q\u2190 QR(B) 5: for t = 1, 2, \u00b7 \u00b7 \u00b7 ,m do 6: B\u2190 X(X>Q) 7: Q\u2190 QR(B) 8: end for 9: C\u2190 Q>X\n10: Y \u2208 RN\u00d7TC : Yik \u2190 Qi:C:k, \u2203j, k \u2208 \u2126ij 11: Output: sparse low-rank approximation Y\nwhere ai \u2208 RN , bi \u2208 RT , ci \u2208 RC , and the symbol \u25e6 represents the vector outer product. Note that all CP rank involved problems are NP-hard in general [11]. Although many heuristic algorithms have been developed to increase the efficiency of CP decomposition [9, 20, 21, 14], they are still not scalable enough to handle our real-world location category inference problem that involves a large number of users and time slots. As a concrete example, recovering a rank 10 tensor of size 500\u00d7500\u00d7500 takes the state-of-the-art tensor factorization algorithm TenALS1 more than 20, 000 seconds on an Intel Xeon 2.40 GHz processor with 64 GB main memory.\nIn order to significantly improve the scalability of the proposed model in (5), we use the rank of the unfolding matrix as the rank of the tensor. Considering the correlation of users\u2019s behaviors is dominant in all correlation, we define the unfolding of our 3-order tensor Y \u2208 RN\u00d7T\u00d7C by merging the second (time) and third (location categories) indices of tensors as the column index of matrices. In other words, Y is the concatenates of Y\u2019s lateral slices along the time mode, i.e.,\nY = Unfold(Y) := [Y :1: \u00b7 \u00b7 \u00b7 Y :T :] \u2208 RN\u00d7TC .\nThen the tensor rank is defined as the matrix rank\nrank(Y) = rank(Unfold(Y)).\nTherefore, our target problem can be cast into the following equivalent matrix optimization problem\nmin Y\u2208RN\u00d7T\u00d7C\n\u2016X \u2212Y\u20162F = \u2016X\u2212Y\u20162F , (7)\ns.t. rank(Unfold(Y)) \u2264 r,\nwhere X = Unfold(X ). This problem can be solved efficiently via Algorithm 2. Problem (7) essentially aims to find matrix X\u2019s best rank-r approximation. Given X\u2019s singular value decomposition (SVD) U\u03a3V>, it is well known that its best rank-r approximation is given by Ur\u03a3rV > r , where Ur, Vr contain the first r columns of U and V, and \u03a3r is a diagonal matrix with the first r singular values lying on the diagonal. It can be done within a polynomial complexity, versus to the NP hardness of using the CP based definition for the tensor rank in (6). Although it is\n1http://web.engr.illinois.edu/\u02dcswoh/software/optspace/code.html\na big improvement from NP hard to polynomial time, it can be further improved since in practice we do not need computing SVD exactly. To this end, we efficiently compute its approximate SVD using the power method [10]. Besides, we notice that in the next step when Y is fixed, only its entries inside the support \u2126 are involved to update the matrix X. In this sense, we do not need to compute Y\u2019s entries outside the support \u2126 in the current step, thus allows us to further improve the efficiency. Algorithm 2 shows the detailed steps of the sparse low-rank approximation algorithm, where the notations Qi: and C:k represent the i-th row of Q and the k-th row of C, respectively. QR(\u00b7) indicates the reduced QR factorization. In Algorithm 2, we assume thatN \u2265 TC. Otherwise, we use X> as its input thus the time complexity is dependent to min(N,TC).\nTotal Complexity Since X is a sparse matrix with only |\u2126| non-zero entries, the computational cost of the steps 3, 6, 9, and 10 in Algorithm 2 are merely O(|\u2126|r). In addition, since B \u2208 RN\u00d7r is a tall-and-skinny matrix, its QR factorization can be efficiently computed using O(Nr2) operations. Indeed, we can further reduce this cost if N > TC, in which case we use X> instead of X as Algorithm 2\u2019s input. In this way, the QR decomposition can be computed using O(TCr2) operations. Combining all the computations together, we can update Y within O(|\u2126|rm + min(N,TC)r2m) time, where m is the number of iterations. Since |\u2126| NTC and r min(N,TC), the proposed algorithm is significantly faster than the naive SVD computation with O(max(N,TC) min(N,TC)2) complexity.\nWhen the sparse low-rank approximation matrix Y is learned, we update X by projecting Y to a space that satisfies the NU constraints (4). Although this step is efficient enough in the tensor case, it becomes even simpler in the matrix setting. Since Y is already a sparse matrix with only |\u2126| non-zero entries, we only need to project each vector within \u2126ij ,\u2200i, j onto the probability simplex. The time complexity of this step is O( \u2211 i,j |\u2126ij | log(|\u2126ij |)). Since we have |\u2126ij | \u2264 C \u2200i, j, this time complexity is upper bounded by O(|\u2126| logC). Overall, each iteration (updating X and Y once) of the proposed alternating minimization algorithm can be efficiently computed within\nO(|\u2126|(rm+ logC) + min(N,TC)r2m)\ntime. In addition to the low computational cost in each iteration, our algorithm converges very fast as well, as verified by extensive experiments on both simulated and real-world datasets. For example, it takes only 3 iterations to optimize a problem with 3 million users, 500 time slots, 200 location categories, and more than a billion non-zero entries in \u2126, with a running time for each single iteration about 18 minutes."}, {"heading": "4 Experiments", "text": "In this section, we first conduct a simulated study to validate the scalability of the proposed algorithm \u2013 it is scalable to large-scale category inference problems. We then evaluate the proposed algorithm on multiple real-world mobility data sets. All experiments were run on a Linux server with an Intel Xeon 2.40 GHz CPU and 64 GB of main memory."}, {"heading": "4.1 Synthesized Data Experiments", "text": "We first conduct experiments with simulated data to verify that the proposed location category inference algorithm is computationally efficient and robust to location errors. To this end, we fix T and\nC, the number of time slots and the number of location categories, to 500 and 200, respectively. We also vary the number of mobile phone users, N , in range {100 K, 200 K, 500 K, 1 M, 2 M, 3 M}, where K and M stand for thousand(s) and million(s), respectively. For a fixed N , we randomly assign all the mobile phone users to 10 lifestyle classes, with the class memberships blind to our algorithm. We assume that users in the same lifestyle class visit the same location categories at the same time while users in different classes behave differently. For each user and 20% of the randomly sampled time slots, we generate her noisy location updates that contain 4 candidate location categories for each of them. Among the 4 candidate categories, one is the true location category and the other three are randomly sampled from the remained C \u2212 1 location categories. We input the generated location updates data to our algorithm and compare the predicted results with the ground truth information. Table 1 summarizes the CPU time and prediction accuracies of inferring location categories on this data. Specifically, the prediction accuracy is defined as\n#(category with the highest prob. = true category) #location updates \u00d7 100%.\nTable 1 clearly shows that the proposed algorithm can perfectly recover the underlying true location categories as all the prediction accuracies equal to 100%. Besides, the proposed algorithm is extremely efficient, e.g., even with 3 million users and more than 1 billion candidate location categories, it only takes the proposed algorithm less than 2 hours to infer the perfect location category in a single thread."}, {"heading": "4.2 Real-World Location Update Data Experiments", "text": "Data Preprocessing The real-world location update data consisits of a temporal stream of records in the form {anonymous user id, UTC timestamp, estimated location coordinates, location error}, in order to apply our location category inference algorithm, the raw data was preprocessed, encompassing three key steps: 1) removal of noise to obtain meaningful location coordinates, 2) association of meaningful locations with candidate venues (and hence categories), and 3) determination of the local time and quantization into time slots.\nThe first step is necessary because we are only interested in locations where the user has spent significant time \u2013 locations that could have actually been visited in a meaningful way. In addition, the dynamics of mobile phone location update algorithms may not be completely understood. For\nexample, the significant-change location service, a frequently used location API on iOS devices, \u201cdelivers updates only when there has been a significant change in the device\u2019s location, such as 500 meters or more.\u201d2 Also, under this set of location APIs, the precise triggers which initiate an update are not fully disclosed. To determine meaningful locations, the first step is to estimate the dwell time by taking the difference of subsequent timestamps. Once dwell time is estimated, locations where the dwell time is less than a threshold are removed.\nThe next step in the process is to associate the location update coordinates to venues. In our case, Foursquare APIs3 were used to query for potential venues. Specifically, we define the location uncertainty circle for an update as the circle centered on the update coordinates with radius given by the reported location error, rerror. Similarly, we represent a venue as a circle with a fixed radius rvenue centered on the venue coordinates. Then, a venue is considered a candidate venue if it intersects with the location uncertainty circle, i.e., if h(x,p) \u2264 rerror + rvenue. Here, h(\u00b7, \u00b7) is the haversine distance between the location update x and the venue coordinates p. Once a candidate set of venues is known for a location update, the category information is extracted. We used a subset of 42 of the available categories from the Foursquare hierarchy. The categories were chosen to cover the entire hierarchy, and any categories falling below a chosen category were mapped to its closest ancestor category. Categories chosen include: Museum, College & University, Music Venue, Train Station, etc.\nFinally, we convert all timestamps into local time to better understand the context of a user\u2019s visit. This is done by determining the local timezone based on the coordinates and then adjusting the UTC timestamp using the appropriate offset. Finally the timestamps are quantized, non-uniformly, into time slots across each day using the following process. The time period from 1am to 7am is mapped to the first bin, 7am-9am is mapped to the second bin, 9am-11am is mapped to the third bin, etc., giving 10 bins per day. The non-uniform scheme is chosen since there is little activity during the early morning.\nExperiments We ran experiments across three major U.S. cities, New York city, NY, Austin, TX, and San Francisco, CA, using anonymized mobile location data that was collected as part of an IBM partnership with a leading location-based services company. The cities were defined by considering the bounding box that contains the metropolitan statistical area, as defined by the U.S. government. For each city we looked at 2 weeks of location update data. We considered location updates which corresponded to a dwell time of at least 20 minutes. Finally we considered users who had updates on at least 7 days, with a total of at least 50 updates. The statistics of the three datasets are shown in Table 2.\nIn order to evaluate the performance, we look for location updates where there is no category ambiguity, i.e., there was only one location category within the user\u2019s location uncertainty circle. These true location categories are used as the validation set. For the same user-timeslot pairs in the validation set we also create noisy data by marking all the C location categories as the possible categories. This noisy data set is combined with original data, less the validation set, and used as the input to our algorithm. After learning the tensor X , we check, for each location update in the validation set, if the categories with the top k highest probabilities contain the true venue category.\n2https://developer.apple.com/library/content/documentation/UserExperience/ Conceptual/LocationAwarenessPG/CoreLocation/CoreLocation.html\n3https://developer.foursquare.com/docs/\nWe set k = {1, 2, \u00b7 \u00b7 \u00b7 , 5} in our study. In particular, k = 1 means that the true venue category is consistent with the learned highest probability category.\nSince our proposed NUTF is, to the best of our knowledge, the first algorithm that can infer location categories based on inaccurate mobility location data, there is no direct baseline for comparison. Note that our validation set contains the location updates with only one location category within their corresponding location uncertainty circles. We cannot compare our method with 1-NN approach since its results are trivial, i.e., the only one location category in a location uncertainty circle is always the nearest neighbor. In this case, we compare our negative-unlabeled tensor factorization approach with three state-of-the-art tensor factorization algorithms: (a) CPAPR, Candecomp-Parafac alternating Poisson regression [7], (b) Rubik, knowledge-guided tensor factorization and completion method [24], and (c) BPTF, Bayesian probabilistic tensor factorization [27]. To this end, given a set of N users, T time slots, and C location categories, we generate a N \u00d7 T \u00d7 C partially-observed tensor W as\nW ijk =  0.1, if k \u2208 \u2126ij , and with a probability p unobserved, if k \u2208 \u2126ij , and with a probability 1\u2212 p 0, if k /\u2208 \u2126ij ,\nwhere the probability p is set to be 20% in our study. We use this tensor to simulate our condition where all the location categories not covered by the location uncertainty circle are impossible (=0), and the location categories covered by the circle have unknown probabilities with some samples having the same initialization (=0.1). We then use the tensor W , with all the entries in the validation set marked as unobserved, as an input to our baseline tensor factorization algorithms to recover its low-rank approximations. Given the tensor recovered by the baseline algorithms, we check, for each location update in the validation set, if the categories with the top k highest probabilities contain the true venue category \u2014 identical to the way used to evaluate our method.\nTable 3 summarizes the prediction performance averaged over the five trials of all the algorithms. We first observe that the prediction accuracies of the proposed method NUTF are very encouraging. Among all the three data sets, its exact matching (k=1) accuracies range from 32% to 35%, and its top 5 category accuracies range from 75% to 79%. Given that these data sets have a total of 42 location categories and a random guess only yields a 2.4% accuracy, our prediction performance clearly demonstrates the effectiveness of the proposed method. In addition, our method NUTF also yields significantly better performance than all the baseline algorithms. In particular, its accuracies are about 3 times better than the baselines. Finally, we observe that the prediction performance of all the algorithms is fairly consistent across the three cities, suggesting that our collected data is sufficiently representative."}, {"heading": "4.3 Real-World Check-in Data Experiments", "text": "In addition to the experiments with the mobility location updates data, we conduct experiments on two real-world check-in data sets to verify that the proposed algorithm can also reliably infer users\u2019 location categories even when there is no location update. The two data sets collected by [28] consist of the Foursquare check-ins in New York City (NYC) and Tokyo from 12 April 2012 to 16 February 2013. The New York check-in data set contains 824 users, 38, 336 venues and 227, 428 check-ins, while the Tokyo check-in data contains 1, 939 users, 61, 858 venues, and 573, 703 check-in records. Each check-in includes a user ID, a time stamp, a venue ID, and the category of the venue. By manually merging the similar and infrequent venue categories together, we finally obtain 122 venue categories for both data sets. Similar to the experiments with the mobility location updates data, we use hourly time slot and select the check-in with the longest dwell time if there are more than one check-ins within a same time slot.\nIn order to evaluate our performance, we randomly sample 10% of the check-ins as the validation set, and mark all the C location categories as the possible categories for all of them. This mimics the situation when there is no available location update, or the location update is too inaccurate to contain any meaningful location information. We then combine the noisy and accurate check-ins altogether and use them as the input to our algorithm. After learning the tensor X , we check that, for each check-in in the validation set, if the categories with the top k highest probabilities contain the true venue category. We set k = {1, 2, \u00b7 \u00b7 \u00b7 , 5} in our study. In particular, k = 1\nmeans that the true venue category is consistent with the learned highest probability category. To find baseline algorithms for this study, we cast this problem into a matrix completion problem [5]. Let N , T , and C be the number of users, time slots, and location categories, respectively. Given the training check-in records that do not belong to the validation set, we construct a N \u00d7 TC partially-observed matrix with the observed entries corresponding to the check-ins. In this sense, the prediction problem becomes a matrix completion problem that aims to recover the unobserved entries based on the observed ones. Also, since all the observed entries are drawn from the positive (interest) class, this is a positive-unlabeled (PU) learning problem. We thus compare our method with the state-of the-art PU matrix completion algorithms: (a) PU-MC, PU learning for matrix completion [12], and (b) WR-MF, weighted regularized matrix factorization [13]. Specifically, we feed the generated partially-observed matrix to these algorithms, and compare the ground-truth venue categories in the validation set with their corresponding outputs. All the experiments in this study are repeated five times, and the prediction accuracies and the running time averaged over the five trials are reported in Table 4 and Table 5, respectively.\nTable 4 summarizes the average prediction accuracies of the proposed algorithm NUTF, and the baseline algorithms PU-MC and WR-MF when k = 1, 2, \u00b7 \u00b7 \u00b7 , 5. It clearly shows that the proposed algorithm NUTF significantly outperforms all the baseline algorithms. Specifically, 30% and 46% of the learned highest probability categories are consistent with the ground truth categories\nof the NYC check-ins and Tokyo check-ins data sets, respectively. Considering that we have 122 categories in total, the achieved accuracies are pretty impressive. In addition, Table 5 summarizes the average CPU time of the all the algorithms evaluated here. Among them, our proposed method NUTF is the most efficient algorithm. In particular, NUTF is able to infer the location categories of the Tokyo Check-ins data in 12 seconds.\nAnother interesting finding in this study is that all the algorithms perform better on the Tokyo data than on the NYC data. This is because the Tokyo data set is larger with more users and more check-in records. Since all the algorithms evaluated here are collaborative approaches that learn a universal model from all the available user data, they usually deliver more accurate results as more data is provided."}, {"heading": "5 Conclusions", "text": "In this paper, we study the problem of inferring the user visited location categories purely based on their inaccurate mobility location data. To the best of our knowledge, our paper is the first study of this kind. To solve this problem, we propose a novel tensor factorization framework NUTF that is able to infer the most likely location categories within the location uncertainty circle. To this end, we highlight several key observations, including the negative-unlabeled constraints and the correlations among users. In order to efficiently solve the tensor factorization problem, we propose a parameter-free and scalable optimization algorithm by effectively exploring the sparse and lowrank structure of the underlying tensor. Our empirical studies conducted on multiple synthesized and real-world data sets confirm both the effectiveness and efficiency of the proposed algorithm."}], "references": [{"title": "Using gps to learn significant locations and predict movement across multiple users", "author": ["Daniel Ashbrook", "Thad Starner"], "venue": "Personal and Ubiquitous computing,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Towards time-dependant recommendation based on implicit feedback", "author": ["Linas Baltrunas", "Xavier Amatriain"], "venue": "In Workshop on context-aware recommender systems,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Recommendations in location-based social networks: a survey", "author": ["Jie Bao", "Yu Zheng", "David Wilkie", "Mohamed Mokbel"], "venue": "GeoInformatica, 19(3):525\u2013565,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Travel assistance device: utilising global positioning system-enabled mobile phones to aid transit riders with special needs", "author": ["Sean J Barbeau", "Philip L Winters", "Nevine L Georggi", "Miguel A Labrador", "Rafael Perez"], "venue": "IET intelligent transport systems,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2010}, {"title": "Exact matrix completion via convex optimization", "author": ["Emmanuel Candes", "Benjamin Recht"], "venue": "Communications of the ACM,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Mining significant semantic locations from gps data", "author": ["Xin Cao", "Gao Cong", "Christian S Jensen"], "venue": "Proceedings of the VLDB Endowment,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "On tensors, sparsity, and nonnegative factorizations", "author": ["Eric C. Chi", "Tamara G. Kolda"], "venue": "SIAM Journal on Matrix Analysis and Applications,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Learning classifiers from only positive and unlabeled data", "author": ["Charles Elkan", "Keith Noto"], "venue": "In KDD,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2008}, {"title": "A regularized newton method for the efficient approximation of tensors represented in the canonical tensor format", "author": ["Mike Espig", "Wolfgang Hackbusch"], "venue": "Numerische Mathematik,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions", "author": ["Nathan Halko", "Per-Gunnar Martinsson", "Joel A Tropp"], "venue": "SIAM review,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "Most tensor problems are np-hard", "author": ["Christopher J Hillar", "Lek-Heng Lim"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "PU learning for matrix completion", "author": ["Cho-Jui Hsieh", "Nagarajan Natarajan", "Inderjit S. Dhillon"], "venue": "In ICML,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Collaborative filtering for implicit feedback datasets", "author": ["Yifan Hu", "Yehuda Koren", "Chris Volinsky"], "venue": "In Data Mining,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "Provable tensor factorization with missing data", "author": ["Prateek Jain", "Sewoong Oh"], "venue": "In NIPS,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}, {"title": "Tensor decompositions and applications", "author": ["Tamara G Kolda", "Brett W Bader"], "venue": "SIAM review,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Mining user similarity based on location history", "author": ["Quannan Li", "Yu Zheng", "Xing Xie", "Yukun Chen", "Wenyu Liu", "Wei-Ying Ma"], "venue": "In Proceedings of the 16th ACM SIGSPATIAL international conference on Advances in geographic information systems,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2008}, {"title": "Building text classifiers using positive and unlabeled examples", "author": ["Bing Liu", "Yang Dai", "Xiaoli Li", "Wee Sun Lee", "Philip S. Yu"], "venue": "In ICML,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2003}, {"title": "An unsupervised collaborative approach to identifying home and work locations", "author": ["Rong Liu", "Swapna Buccapatnam", "Wesley M Gifford", "Anshul Sheopuri"], "venue": "In Mobile Data Management (MDM),", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2016}, {"title": "Nericell: rich monitoring of road and traffic conditions using mobile smartphones", "author": ["Prashanth Mohan", "Venkata N Padmanabhan", "Ramachandran Ramjee"], "venue": "In Proceedings of the 6th ACM conference on Embedded network sensor systems,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2008}, {"title": "Low complexity damped gauss\u2013 newton algorithms for candecomp/parafac", "author": ["Anh-Huy Phan", "Petr Tichavsky", "Andrzej Cichocki"], "venue": "SIAM Journal on Matrix Analysis and Applications,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2013}, {"title": "Enhanced line search: A novel method to accelerate parafac", "author": ["Myriam Rajih", "Pierre Comon", "Richard A Harshman"], "venue": "SIAM journal on matrix analysis and applications,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2008}, {"title": "BPR: bayesian personalized ranking from implicit feedback", "author": ["Steffen Rendle", "Christoph Freudenthaler", "Zeno Gantner", "Lars Schmidt-Thieme"], "venue": "In UAI,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2009}, {"title": "Projection onto the probability simplex: An efficient algorithm with a simple proof, and an application", "author": ["Weiran Wang", "Miguel \u00c1. Carreira-Perpi\u00f1\u00e1n"], "venue": "CoRR, abs/1309.1541,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2013}, {"title": "Rubik: Knowledge guided tensor factorization and completion for health data analytics", "author": ["Yichen Wang", "Robert Chen", "Joydeep Ghosh", "Joshua C. Denny", "Abel N. Kho", "You Chen", "Bradley A. Malin", "Jimeng Sun"], "venue": "In SIGKDD,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Travel time estimation of a path using sparse trajectories", "author": ["Yilun Wang", "Yu Zheng", "Yexiang Xue"], "venue": "In SIGKDD,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "Finding similar users using categorybased location history", "author": ["Xiangye Xiao", "Yu Zheng", "Qiong Luo", "Xing Xie"], "venue": "In Proceedings of the 18th SIGSPATIAL International Conference on Advances in Geographic Information Systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "Temporal collaborative filtering with bayesian probabilistic tensor factorization", "author": ["Liang Xiong", "Xi Chen", "Tzu-Kuo Huang", "Jeff G. Schneider", "Jaime G. Carbonell"], "venue": "In SDM,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2010}, {"title": "Modeling user activity preference by leveraging user spatial temporal characteristics in lbsns", "author": ["Dingqi Yang", "Daqing Zhang", "Vincent W Zheng", "Zhiyong Yu"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics: Systems,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2015}, {"title": "Mining individual life pattern based on location history", "author": ["Yang Ye", "Yu Zheng", "Yukun Chen", "Jianhua Feng", "Xing Xie"], "venue": "In Mobile Data Management: Systems, Services and Middleware,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2009}, {"title": "Where to find my next passenger", "author": ["Jing Yuan", "Yu Zheng", "Liuhang Zhang", "XIng Xie", "Guangzhong Sun"], "venue": "In Proceedings of the 13th international conference on Ubiquitous computing,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2011}, {"title": "T-finder: A recommender system for finding passengers and vacant taxis", "author": ["Nicholas Jing Yuan", "Yu Zheng", "Liuhang Zhang", "Xing Xie"], "venue": "IEEE Transactions on Knowledge and Data Engineering,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2013}, {"title": "Trajectory data mining: an overview", "author": ["Yu Zheng"], "venue": "ACM Transactions on Intelligent Systems and Technology (TIST),", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2015}, {"title": "Urban computing: concepts, methodologies, and applications", "author": ["Yu Zheng", "Licia Capra", "Ouri Wolfson", "Hai Yang"], "venue": "ACM Transactions on Intelligent Systems and Technology (TIST),", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2014}, {"title": "Mining personally important places from gps tracks", "author": ["Changqing Zhou", "Nupur Bhatnagar", "Shashi Shekhar", "Loren Terveen"], "venue": "In Data Engineering Workshop,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2007}], "referenceMentions": [{"referenceID": 2, "context": "Understanding mobile phone users\u2019 spatio-temporal activities is a central theme in a variety of applications, including personalized advertising [3], traffic monitoring [19], security management [33], and assistance of the elderly and disabled [4].", "startOffset": 145, "endOffset": 148}, {"referenceID": 18, "context": "Understanding mobile phone users\u2019 spatio-temporal activities is a central theme in a variety of applications, including personalized advertising [3], traffic monitoring [19], security management [33], and assistance of the elderly and disabled [4].", "startOffset": 169, "endOffset": 173}, {"referenceID": 32, "context": "Understanding mobile phone users\u2019 spatio-temporal activities is a central theme in a variety of applications, including personalized advertising [3], traffic monitoring [19], security management [33], and assistance of the elderly and disabled [4].", "startOffset": 195, "endOffset": 199}, {"referenceID": 3, "context": "Understanding mobile phone users\u2019 spatio-temporal activities is a central theme in a variety of applications, including personalized advertising [3], traffic monitoring [19], security management [33], and assistance of the elderly and disabled [4].", "startOffset": 244, "endOffset": 247}, {"referenceID": 7, "context": "We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2].", "startOffset": 135, "endOffset": 146}, {"referenceID": 16, "context": "We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2].", "startOffset": 135, "endOffset": 146}, {"referenceID": 11, "context": "We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2].", "startOffset": 135, "endOffset": 146}, {"referenceID": 12, "context": "We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2].", "startOffset": 230, "endOffset": 241}, {"referenceID": 21, "context": "We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2].", "startOffset": 230, "endOffset": 241}, {"referenceID": 1, "context": "We refer to such a problem as a negative-unlabeled (NU) learning problem, a counterpart to the positiveunlabeled (PU) learning problem [8, 17, 12] or the problem of learning from implicit feedback in the recommendation literature [13, 22, 2].", "startOffset": 230, "endOffset": 241}, {"referenceID": 24, "context": "This observation suggests that the underlying tensor X should be close to low-rank, which is also verified by a widely held assumption that people\u2019s behaviors are dictated by a small number of latent factors [25, 32].", "startOffset": 208, "endOffset": 216}, {"referenceID": 31, "context": "This observation suggests that the underlying tensor X should be close to low-rank, which is also verified by a widely held assumption that people\u2019s behaviors are dictated by a small number of latent factors [25, 32].", "startOffset": 208, "endOffset": 216}, {"referenceID": 31, "context": "Stay point detection In a trajectory or sequence of location updates, stay points are defined as the important locations where people have stayed for a while [32].", "startOffset": 158, "endOffset": 162}, {"referenceID": 15, "context": "[16] proposed the first stay point detection algorithm that checks if the distance and the time span between an anchor point and its successors in a trajectory are larger than two individual thresholds.", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "The authors in [30, 31] further improved this algorithm by considering the density of location points.", "startOffset": 15, "endOffset": 23}, {"referenceID": 30, "context": "The authors in [30, 31] further improved this algorithm by considering the density of location points.", "startOffset": 15, "endOffset": 23}, {"referenceID": 5, "context": "In [6], stay points were detected by modeling location-location and location-user relationships via a graph-based approach.", "startOffset": 3, "endOffset": 6}, {"referenceID": 33, "context": "Popular clustering approaches in this area include time-based clustering, density-based clustering, and partitioning clustering, as summarized in [34].", "startOffset": 146, "endOffset": 150}, {"referenceID": 0, "context": "In particular, the authors in [1] use a variant of k-means algorithm to cluster GPS data for detecting users\u2019 significant locations.", "startOffset": 30, "endOffset": 33}, {"referenceID": 28, "context": "Besides, a density-based clustering algorithm was applied in [29] to infer individual life patterns from GPS trajectory data.", "startOffset": 61, "endOffset": 65}, {"referenceID": 25, "context": "The authors in [26] estimate user similarities in terms of semantic location history using a hierarchical clustering-based approach.", "startOffset": 15, "endOffset": 19}, {"referenceID": 17, "context": "The work in [18] identifies home and work locations by first transforming user trajectory records into user-location signatures, and then applying k-Means clustering on these signatures.", "startOffset": 12, "endOffset": 16}, {"referenceID": 0, "context": "Each element X ijk \u2208 [0, 1] denotes the probability of user i at time slot j visiting category k.", "startOffset": 21, "endOffset": 27}, {"referenceID": 24, "context": "Indeed, the low-rank assumption can be verified by another view that people\u2019s daily trajectory paths are generally believed to be dictated by a small number of latent factors [25, 32].", "startOffset": 175, "endOffset": 183}, {"referenceID": 31, "context": "Indeed, the low-rank assumption can be verified by another view that people\u2019s daily trajectory paths are generally believed to be dictated by a small number of latent factors [25, 32].", "startOffset": 175, "endOffset": 183}, {"referenceID": 22, "context": "Algorithm 1 Projection of a vector onto the probability simplex [23] 1: Input: a vector v \u2208 Rd to be projected 2: Sort v into \u1e7d: \u1e7d1 \u2265 \u1e7d2 \u2265 \u00b7 \u00b7 \u00b7 \u2265 \u1e7dd 3: Find k = max{j \u2208 [d] : \u1e7dj \u2212 1j ( \u2211k i=1 \u1e7di \u2212 1) > 0} 4: Compute \u03b8 = 1 k ( \u2211k i=1 \u1e7di \u2212 1) 5: Return: u \u2208 Rd s.", "startOffset": 64, "endOffset": 68}, {"referenceID": 14, "context": "For example, the definition based on Candecomp/Parafac (CP) decomposition [15]", "startOffset": 74, "endOffset": 78}, {"referenceID": 10, "context": "Note that all CP rank involved problems are NP-hard in general [11].", "startOffset": 63, "endOffset": 67}, {"referenceID": 8, "context": "Although many heuristic algorithms have been developed to increase the efficiency of CP decomposition [9, 20, 21, 14], they are still not scalable enough to handle our real-world location category inference problem that involves a large number of users and time slots.", "startOffset": 102, "endOffset": 117}, {"referenceID": 19, "context": "Although many heuristic algorithms have been developed to increase the efficiency of CP decomposition [9, 20, 21, 14], they are still not scalable enough to handle our real-world location category inference problem that involves a large number of users and time slots.", "startOffset": 102, "endOffset": 117}, {"referenceID": 20, "context": "Although many heuristic algorithms have been developed to increase the efficiency of CP decomposition [9, 20, 21, 14], they are still not scalable enough to handle our real-world location category inference problem that involves a large number of users and time slots.", "startOffset": 102, "endOffset": 117}, {"referenceID": 13, "context": "Although many heuristic algorithms have been developed to increase the efficiency of CP decomposition [9, 20, 21, 14], they are still not scalable enough to handle our real-world location category inference problem that involves a large number of users and time slots.", "startOffset": 102, "endOffset": 117}, {"referenceID": 9, "context": "To this end, we efficiently compute its approximate SVD using the power method [10].", "startOffset": 79, "endOffset": 83}, {"referenceID": 6, "context": "In this case, we compare our negative-unlabeled tensor factorization approach with three state-of-the-art tensor factorization algorithms: (a) CPAPR, Candecomp-Parafac alternating Poisson regression [7], (b) Rubik, knowledge-guided tensor factorization and completion method [24], and (c) BPTF, Bayesian probabilistic tensor factorization [27].", "startOffset": 199, "endOffset": 202}, {"referenceID": 23, "context": "In this case, we compare our negative-unlabeled tensor factorization approach with three state-of-the-art tensor factorization algorithms: (a) CPAPR, Candecomp-Parafac alternating Poisson regression [7], (b) Rubik, knowledge-guided tensor factorization and completion method [24], and (c) BPTF, Bayesian probabilistic tensor factorization [27].", "startOffset": 275, "endOffset": 279}, {"referenceID": 26, "context": "In this case, we compare our negative-unlabeled tensor factorization approach with three state-of-the-art tensor factorization algorithms: (a) CPAPR, Candecomp-Parafac alternating Poisson regression [7], (b) Rubik, knowledge-guided tensor factorization and completion method [24], and (c) BPTF, Bayesian probabilistic tensor factorization [27].", "startOffset": 339, "endOffset": 343}, {"referenceID": 27, "context": "The two data sets collected by [28] consist of the Foursquare check-ins in New York City (NYC) and Tokyo from 12 April 2012 to 16 February 2013.", "startOffset": 31, "endOffset": 35}, {"referenceID": 4, "context": "To find baseline algorithms for this study, we cast this problem into a matrix completion problem [5].", "startOffset": 98, "endOffset": 101}, {"referenceID": 11, "context": "We thus compare our method with the state-of the-art PU matrix completion algorithms: (a) PU-MC, PU learning for matrix completion [12], and (b) WR-MF, weighted regularized matrix factorization [13].", "startOffset": 131, "endOffset": 135}, {"referenceID": 12, "context": "We thus compare our method with the state-of the-art PU matrix completion algorithms: (a) PU-MC, PU learning for matrix completion [12], and (b) WR-MF, weighted regularized matrix factorization [13].", "startOffset": 194, "endOffset": 198}], "year": 2017, "abstractText": "Identifying significant location categories visited by mobile phone users is the key to a variety of applications. This is an extremely challenging task due to the possible deviation between the estimated location coordinate and the actual location, which could be on the order of kilometers. Using the collected location coordinate as the center and its associated location error as the radius, we can draw a location uncertainty circle that may cover multiple location categories, especially in densely populated areas. To estimate the actual location category more precisely, we propose a novel tensor factorization framework, through several key observations including the intrinsic correlations between users, to infer the most likely location categories within the location uncertainty circle. In addition, the proposed algorithm can also predict where users are even when there is no location update. In order to efficiently solve the proposed framework, we propose a parameter-free and scalable optimization algorithm by effectively exploring the sparse and low-rank structure of the tensor. Our empirical studies show that the proposed algorithm is both efficient and effective: it can solve problems with millions of users and billions of location updates, and also provides superior prediction accuracies on real-world location updates and check-in data sets.", "creator": "TeX"}}}