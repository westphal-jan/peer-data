{"id": "1703.00810", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Mar-2017", "title": "Opening the Black Box of Deep Neural Networks via Information", "abstract": "Despite bring once focus, without is gone no intranet - prehensive measurement communication far ways with Deep Neural Networks (DNNs) making get 2002 - ner states. Previous continue [Tishby & abercrombie; Zaslavsky (2015) ] proposed directly information DNNs three took Information Plane; probably. :. , once plane from put Mutual Information particular been each diameter ecosystem put next ability those gdp variables. They initially though it goal main the based comes still upgrade also In - consisting Bottleneck (IB) entail since p.o. - kwin from analysis, continuously, time. layer.", "histories": [["v1", "Thu, 2 Mar 2017 14:53:14 GMT  (3499kb,D)", "http://arxiv.org/abs/1703.00810v1", "9 pages, 7 figures"], ["v2", "Thu, 9 Mar 2017 10:00:24 GMT  (3499kb,D)", "http://arxiv.org/abs/1703.00810v2", "9 pages, 7 figures"], ["v3", "Sat, 29 Apr 2017 17:32:47 GMT  (6334kb,D)", "http://arxiv.org/abs/1703.00810v3", "19 pages, 8 figures"]], "COMMENTS": "9 pages, 7 figures", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["ravid shwartz-ziv", "naftali tishby"], "accepted": false, "id": "1703.00810"}, "pdf": {"name": "1703.00810.pdf", "metadata": {"source": "META", "title": "Opening the Black Box of Deep Neural Networks via Information", "authors": ["Ravid Shwartz-Ziv", "Naftali Tishby"], "emails": ["<tishby@cs.huji.ac.il>."], "sections": [{"heading": null, "text": "In this work we follow up on this idea and demonstrate the effectiveness of the InformationPlane visualization of DNNs. We first show that the stochastic gradient descent (SGD) epochs have two distinct phases: fast empirical error minimization followed by slow representation compression, for each layer. We then argue that the DNN layers end up very close to the IB theoretical bound, and present a new theoretical argument for the computational benefit of the hidden layers."}, {"heading": "1. Introduction", "text": "In the last decade, deep learning algorithms have made remarkable progress on numerous machine learning tasks and dramatically improved the state-of-the-art in many practical areas [Graves et al. (2013); Zhang & LeCun (2015); Hinton et al. (2012); He et al. (2015); LeCun et al. (2015)].\nDespite their great success, there is still no comprehensive understanding of the optimization process or the internal organization of DNNs, and they are often criticized for being used as mysterious \u201dblack boxes\u201d [e.g., Alain & Bengio (2016)].\n1The Edmond and Lilly Safra Center for Brain Sciences, The Hebrew University, Jerusalem, Israel. 2School of Computer Science and Engineering, The Hebrew University, Jerusalem, Israel. Correspondence to: Naftali Tishby <tishby@cs.huji.ac.il>.\nEncoder Decoder\nFigure 1. The DNN layers form a Markov chain of successive internal representations of the input layer X . Any representation of the input, T , is defined through an encoder, P (T |X), and a decoder P (Y\u0302 |T ), and can be quantified by its information plane coordinates: IX = I(X;T ) and IY = I(T ;Y ). The Information Bottleneck bound characterizes the optimal representations, which maximally compress the input X , for a given mutual information on the desired output Y .\nIn Tishby & Zaslavsky (2015), the authors noted that layered neural networks form a Markov chain of successive representations of the input layer and suggested studying them in the Information Plane - the plane of the Mutual Information values of any other variable with the input variable X and desired output variable Y (Figure 1). The rationale for this analysis was based on the invariance of the mutual information to invertible re-parameterization and on the Data Processing Inequalities along the Markov chain of the layers. Moreover, they suggested that optimized DNNs layers should approach the Information Bottleneck (IB) bound [Tishby et al. (1999)] of the optimal achievable representations of the input X .\nIn this paper we extend their work and demonstrate the effectiveness of the visualization of DNNs in the information plane for a better understating of the training dynamics, learning processes, and internal representations in Deep Learning (DL).\nOur analysis reveals, for the first time to our knowledge, that the Stochastic Gradient Decent (SGD) optimization, commonly used in Deep Learning, has two different and\nar X\niv :1\n70 3.\n00 81\n0v 1\n[ cs\n.L G\n] 2\nM ar\n2 01\n7\ndistinct phases: empirical error minimization (ERM) and representation compression. These phases are characterized by very different signal to noise ratios of the stochastic gradients in every layer. In the ERM phase the gradient norms are much larger than their stochastic fluctuations, resulting in a rapid increase in the mutual information on the label variable Y . In the compression phase, the fluctuations of the gradients are much larger than their means, and the weights change essentially as Weiner processes, or random diffusion, with a very small influence of the error gradients. This phase is marked by a slow representation compression, or reduction of the mutual information on the input variable X . In our experiments, most of the optimization epochs are spent on compressing the internal representations under the training error constraint. This compression occurs by the SGD without any other explicit regularization or sparsity, and - we believe - is largely responsible for the absence of overfitting in DL. This observation also suggests that there are many (exponential in the number of weights) different randomized networks with essentially optimal performance. Hence the interpretation of a single neuron (or weight) in the layers is practically meaningless.\nWe then show that the optimized layers, for large enough training samples, lie on or very close to the optimal IB bound, resulting in a self-consistent relationship between the encoder and decoder distributions for each layer (Figure 1). The optimized hidden layers converge along special lines in the information plane, and move up in the plane as we increase the training sample size. Finally, the diffusive nature of the SGD dynamics provides a new explanation for the computational benefit of the hidden layers."}, {"heading": "2. Information Theory of Deep Learning", "text": "In supervised learning we are interested in good representations, T (X), of the input patterns x \u2208 X , that enable good predictions of the label y \u2208 Y . Moreover, we want to efficiently learn such representations from an empirical sample of the (unknown) joint distribution P (X,Y ), in a way that provides good generalization.\nDNNs and Deep Learning generate a Markov chain of such representations, the hidden layers, by minimization of the empirical error over the weights of the network, layer by layer. This optimization takes place via stochastic gradient descent (SGD), using a noisy estimate of the gradient of the empirical error at each weight, through back-propagation.\nOur first important insight is to treat the whole layer, T , as a single random variable, characterized by its encoder, P (T |X), and decoder, P (Y |T ) distributions. As we are only interested in the information that flows through the network, invertible transformations of the representations, that preserve information, generate equivalent representa-\ntions even if the individual neurons encode entirely different features of the input. For this reason we quantify the representations by two numbers, or order parameters, that are invariant to any invertible re-parameterization of T , the mutual information of T with the input X and the desired output Y .\nNext, we quantify the quality of the layers by comparing them to the information theoretic optimal representations, the Information Bottleneck representations, and then describe how Deep Learning SGD can achieve these optimal representations."}, {"heading": "2.1. Mutual Information", "text": "Given any two random variables,X and Y , with a joint distribution p(x, y), their Mutual Information is defined as:\nI(X;Y ) = DKL[p(x, y)||p(x)p(y)] (1) = \u2211\nx\u2208X,y\u2208Y\np(x, y) log\n( p (x, y)\np (x) p (y)\n) (2)\n= \u2211\nx\u2208X,y\u2208Y\np (x, y) log ( p (x|y) p (x) ) (3)\n= H(X)\u2212H(X|Y ) , (4)\nwhereDKL[p||q] is the Kullback-Liebler divergence of the distributions p and q, and H(X) and H(X|Y ) are the entropy and conditional entropy of X and Y , respectively.\nThe mutual information quantifies the number of relevant bits that the input variable X contains about the label Y , on average. The optimal learning problem can be cast as the construction of an optimal encoder of that relevant information via an efficient representation - a minimal sufficient statistic of X with respect to Y - if such can be found. A minimal sufficient statistic can enable the decoding of the relevant information with the smallest number of binary questions (on average); i.e., an optimal code. The connection between mutual information and minimal sufficient statistics is discussed in 2.3.\nTwo properties of the mutual information are very important in the context of DNNs. The first is its invariance to invertible transformations:\nI (X;Y ) = I (\u03c8(X);\u03c6(Y ))) (5)\nfor any invertible functions \u03c6 and \u03c8.\nThe second is the Data Processing Inequality (DPI) [Cover & Thomas (2006)]: for any 3 variables that form a Markov chain X \u2192 Y \u2192 Z,\nI (X;Y ) \u2265 I(X;Z) ."}, {"heading": "2.2. The Information Plane", "text": "Any representation variable, T , defined as a (possibly stochastic) map of the input X , is characterized by its\njoint distributions with X and Y , or by its encoder and decoder distributions, P (T |X) and P (Y |T ), respectively. Given P (X;Y ), T is uniquely mapped to a point in the information-plane with coordinates (I(X;T ), I(T ;Y )). When applied to the Markov chain of a K-layers DNN, with Ti denoting the ith hidden layer as a single multivariate variable (Figure 1), the layers are mapped to K monotonic connected points in the plane - henceforth a unique information path - which satisfies the following DPI chains:\nI(X;Y ) \u2265 I(T1;Y ) \u2265 I(T2;Y ) \u2265 ...I(Tk;Y ) \u2265 I(Y\u0302 ;Y )\nH(X) \u2265 I(X;T1) \u2265 I(X;T2) \u2265 ...I(X;Tk) \u2265 I(X; Y\u0302 ).\nSince layers related by invertible re-parametrization appear in the same point, each information path in the plane corresponds to many different DNN\u2019s, with possibly very different architectures."}, {"heading": "2.3. The Information Bottleneck optimal bound", "text": "What characterizes the optimal representations of X w.r.t. Y ? The classical notion of minimal sufficient statistics provide good candidates for optimal representations. Sufficient statistics, in our context, are maps or partitions of X , S(X), that capture all the information that X has on Y . Namely, I(S(X);Y ) = I(X;Y ) [Cover & Thomas (2006)].\nMinimal sufficient statistics, T (X), are the simplest sufficient statistics and induce the coarsest sufficient partition on X . In other words, they are functions of any other sufficient statistic. A simple way of formulating this is through the Markov chain: Y \u2192 X \u2192 S(X) \u2192 T (X), which should hold for a minimal sufficient statistics T (X) with any other sufficient statistics S(X). Using the DPI, we can cast it into a constrained optimization problem: T (X) = arg minS(X):I(S(X);Y )=I(X;Y ) I(S(X);X) . Since exact minimal sufficient statistics only exist for very special distributions, (i.e., exponential families), Tishby et al. (1999) relaxed this optimization problem by first allowing the map to be stochastic, defined as an encoder P (T |X), and then, by allowing the map to capture as much as possible of I(X;Y ), not necessarily all of it.\nThis leads to the Information Bottleneck (IB) tradeoff [Tishby et al. (1999)], which provides a computational framework for finding approximate minimal sufficient statistics, or the optimal tradeoff between compression of X and prediction of Y . Efficient representations are approximate minimal sufficient statistics in that sense.\nIf we define t \u2208 T as the compressed representations of x \u2208 X , the representation of x is now defined by the mapping p (t|x). This Information Bottleneck tradeoff is formulated by the following optimization problem, carried independently for the distributions, p(t|x), p(t), p(y|t), with\nthe Markov chain: Y \u2192 X \u2192 T ,\nmin p(t|x),p(y|t),p(t)\n{I (X;T )\u2212 \u03b2I (T ;Y )} . (6)\nThe Lagrange multiplier \u03b2 determines the level of relevant information captured by the representation T , I(T ;Y ), which is directly related to the error in the label prediction from this representation. The (implicit) solution to this problem is given by three IB self-consistent equations: p (t|x) = p(t)Z(x;\u03b2) exp (\u2212\u03b2DKL [p (y|x) \u2016 p (y|t)]) p (t) = \u2211 x p (t|x) p (x)\np (y|t) = \u2211 x p (y|x) p (x|t) ,\n(7) where Z (x;\u03b2) is the normalization function. These equations are satisfied along the information curve, which is a monotonic concave line of optimal representations that separates the achievable and unachievable regions in the information-plane. For smooth P (X,Y ) distributions; i.e., when Y is not a completely deterministic function ofX , the information curve is strictly concave with a unique slope, \u03b2\u22121, at every point, and a finite slope at the origin. In these cases \u03b2 determines a single point, on the information curve with specified encoder,P \u03b2(T |X), and decoder, P \u03b2(Y |T ), distributions that are related through Eq.(7). For deterministic networks, we consider the sigmoidal output of the neurons as probabilities, consistent with the commonly used cross-entropy or log-loss error in the stochastic optimization. The rest of our analysis is restricted to these distributions and networks."}, {"heading": "2.4. Visualizing DNNs in the Information Plane", "text": "As proposed by Tishby & Zaslavsky (2015), we study the information paths of DNNs in the information plane. This can be done when the underlying distribution, P (X,Y ), is known and the encoder and decoder distributions P (T |X) and P (Y |T ) can be calculated directly. For \u201dlarge real world\u201d problems these distributions and mutual information values should be estimated from samples or by using other modeling assumptions. Doing this is beyond the scope of this work, but we are convinced that our analysis and observations are general, and expect the dynamics phase transitions to become even sharper for larger networks, as they are inherently based on statistical ensemble properties. Good overviews on methods for mutual information estimation can be found in Paninski (2003) and Kraskov et al. (2004).\nOur two order parameters, I(T ;X) and I(T ;Y ), allow us to visualize and compare different network architectures in terms of their efficiency in preserving the relevant information in P (X;Y ).\nBy visualizing the paths of different networks in the infor-\nmation plane we explore the following fundamental issues:\n1. The SGD layer dynamics in the Information plane. 2. The effect of the training sample size on the layers. 3. What is the benefit of the hidden layers? 4. What is the final location of the hidden layers? 5. Do the hidden layers form optimal IB representations?"}, {"heading": "3. Numerical Experiments and Results", "text": ""}, {"heading": "3.1. Experimental Setup", "text": "For the numerical studies in this paper we explored fully connected feed-forward neural networks, with no other architecture constraints. We used standard DNN settings. The activation function of all the neurons was the hyperbolic tangent function, shifted to a sigmoidal function in the final layer. The networks were trained using SGD and the cross-entropy loss function, with no other explicit regularization. Unless otherwise noted, the DNNs used had up to 7 fully connected hidden layers, with widths: 12-10-7- 5-4-3-2 neurons (see Figure 4). In our results below, layer 1 is the hidden layer closest to the input and the highest is the output layer.\nTo simplify our analysis, the tasks were chosen as binary decision rules which are invariant under O(3) rotations of the sphere, with 12 binary inputs that represent 12 uniformly distributed points on a 2D sphere. We tested other - non-symmetric - rules, but they had no effect on the results and conclusions of this paper (see supplementary material) . With such rules, the 4096 different patterns of the input variable X are divided into 64 disjoint orbits of the rotation group. These orbits form a minimal sufficient partition/statistics for spherically symmetric rules [Kazhdan et al. (2003)].\nTo generate the input-output distribution, P (X,Y ), we calculated a spherically symmetric real valued function of the pattern f(x) (evaluated through its spherical harmonics power spectrum [Kazhdan et al. (2003)]) and compared it to a threshold, \u03b8, and apply a step \u0398 function to obtain a {0, 1} label: y(x) = \u0398(f(x) \u2212 \u03b8). We then soften it to a stochastic rule through a standard sigmoidal function, \u03c8(u) = 1/(1 + exp(\u2212\u03b3u)), as:\np(y = 1|x) = \u03c8(f(x)\u2212 \u03b8) . (8)\nThe threshold \u03b8 was selected such that p(y = 1) =\u2211 x p(y = 1|x)p(x) \u2248 0.5, with uniform p(x). The sigmoidal gain \u03b3 was high enough to keep the mutual information I(X;Y ) \u2248 0.99 bits."}, {"heading": "3.2. Estimating the Mutual Information of the Layers", "text": "As mentioned above, we look at each of the layers 1 \u2264 i \u2264 K in the network as a single variable Ti, and calculate the mutual information between each layer with the input and with the labels.\nIn order to calculate the mutual Information of the network layers with the input and output variables, we binned the neuron\u2019s arctan output activations into 30 equal intervals between -1 and 1. We then used these discretized values for each neuron in the layer, t \u2208 Ti, to directly calculate the joint distributions, over the 4096 equally likely input patterns x \u2208 X , P (Ti, X) and P (Ti, Y ) =\u2211 x P (x, Y )P (Ti|x), using the Markov chain Y \u2192 X \u2192 Ti for every hidden layer. Using these discrete joint distributions we calculated the decoder and encoder mutual information, I(X;Ti) and I(Ti;Y ), for each hidden layer in the network.\nWe repeated these calculations with 50 different randomized initialization of the network\u2019s weights and different random selections of the training samples, randomly distributed according to the rule P (X,Y ) in Eq.(8)."}, {"heading": "3.3. The dynamics of the optimization process", "text": "To understand the dynamics of the network SGD optimization, we plot IX = I(X;Ti) and IY = I(Ti;Y ) for each layer for 50 different randomized initializations, with different randomized training samples. Figure 2 depicts the layers (in different colors) of all the 50 networks, trained with a randomized 85% of the input patterns, in the information plane .\nAs can be seen, at the beginning of the optimization the deeper layers of the randomly-initialize network fail to preserve the relevant information, and there is a sharp decrease in IY along the path. During the SGD optimization the layers first increase IY , and later significantly decrease IX ,\nthus compressing the representation. Another striking observation is that the layers of the different randomized networks seem to follow very similar paths during the optimization and eventually converge to nearby points in the information plane. Hence it is justified to average over the randomized networks, and plot the average layer trajectories in the plane, as shown in Figure 3.\nOn the right are the average network layers trajectories, when trained on random labeled samples of 85% of the patterns, and on the left the same trajectories when trained on samples of only 5% of the patterns. Note that the mutual information is calculated with the full rule distribution, thus I(T ;Y ) corresponds to the test, or generalization, error. The two optimization phases are clearly visible in both cases. During the fast - ERM - phase, which takes a few hundred epochs, the layers increase the information on the labels (increase IY ) while preserving the DPI order (lower layers have higher information). In the second and much longer training phase the layers\u2019 information on the input, IX , decreases and the layers lose irrelevant information until convergence (the yellow points). We call this phase the representation compression phase.\nWhile the increase of IY in the ERM phase is expected from the cross-entropy loss minimization, the surprising compression phase requires an explanation. There was no explicit regularization that could simplify the representations, such as L1 regularization, and there was no sparsification or norm reduction of the weights (see appendix). We observed the same two-phase layer trajectories in other problems, without symmetry or any other special structure. Thus it seems to be a general property of SGD training of DNNs, but it should be verified on larger problems. The observation and explanation of this phase is our main re-\nsult.\nWhereas the ERM phase looks very similar for both small (5%) and large (85%) training sample sizes, the compression phase significantly reduced the layers\u2019 label information in the small sample case, but with large samples the label information mostly increased. This looks very much like overfitting the small sample noise, which can be avoided with early stopping methods [Larochelle et al. (2009)]. Note, however, that this overfitting is largely due to the compression phase, which simplifies the layers\u2019 representations but also loses relevant information. Understanding what determines the convergence points of the layers in the information plane, for different training data sizes, is an interesting theoretical goal."}, {"heading": "3.4. The two phases of SGD optimization", "text": "A better understanding of the ERM and representationcompression phases can be derived from examination of the behavior of the stochastic gradients along the epochs. In Figure 4 we plot the normalized mean and standard deviations of the weights\u2019 stochastic gradients (in the samples batches), for every layer of our DNN (shown in the inset), as function of the SGD epochs. Clearly there is a transition between two distinct phases (the vertical line). The first is a drift phase, where the gradient means are much larger than their standard deviations, indicating small gradient stochasticity (high SNR). In the second phase, the gradient means are very small compared to their batch to\nbatch fluctuations, and the gradients behave like Gaussian noise with very small means, for each layer (low SNR). We call this the diffusion phase. Such a transition is expected in general, when the empirical error saturates and SGD is dominated by its fluctuations. We claim that these distinct SGD phases (grey line in Figure 4), correspond and explain the ERM and compression phases we observe in the information plane (marked green paths in Figure 3).\nThis dynamic phase transition occurs in the same number of epochs as the left bent of the layers\u2019 trajectories in the information plane. The drift phase clearly increases IY for every layer, since it quickly reduces the empirical error. On the other hand, the diffusion phase mostly adds random noise to the weights, and they evolve like Wiener processes, under the training error or label information constraint. Such diffusion processes can be described by a FockerPlanck equation [see e.g. Risken (1989)], whose stationary distribution maximizes the entropy of the weights distribution, under the training error constraint. That in turn maximizes the conditional entropy, H(X|Ti), or minimizes the mutual information I(X;Ti) = H(X) \u2212 H(X|Ti), because the input entropy, H(X), does not change. This entropy maximization by additive noise, also known as stochastic relaxation, is constrained by the empirical error, or equivalently (for small errors) by the IY information. We present a rigorous analysis of this stochastic relaxation process elsewhere, but it is already clear how the diffusion phase can lead to more compressed representations, by minimizing IX for every layer.\nHowever, it remains unclear why different hidden layers converge to different points in the information plane. Figure 4 suggests that different layers have different levels of noise in the gradients during the compression phase, which can explain why they end up in different maximum entropy distributions. But as the gradient noises seem to vary and eventually decrease when the layers converge, suggesting that the convergence points are related to the critical slowing down of stochastic relaxation near phase transitions on the Information Bottleneck curve. This intriguing hypothesis is further examined elsewhere.\nAnother interesting consequence of the compression by diffusion phase is the randomized nature of the final weights of the DNN. We found no indication for vanishing connections or norm decreases near the convergence. This is consistent with previous works which showed that explicit forms of regularization, such as weight decay, dropout, and data augmentation, do not adequately explain the generalization error of DNNs [Zhang et al. (2016)]. Moreover, the correlations between the in-weights of different neurons in the same layer, which converge to essentially the same point in the plane, was very small. This indicates that there is a huge number of different networks with essentially op-\ntimal performance, and attempts to interpret single weights or even single neurons in such networks are meaningless."}, {"heading": "3.5. The benefit of the hidden layers", "text": "We now turn to one of the fundamental questions about Deep Learning - what is the benefit of the hidden layers?\nTo address this, we trained 6 different architectures with 1 to 6 hidden layers (with layers as in Figure 4), trained on 80% the patterns, randomly sampled from Eq.(8). As before, we repeated each training 50 times with randomized initial weights and training samples. Figure 5 shows the information plane paths for these 6 architectures during the training epochs, each averaged over the randomized networks.\nThere are several important outcomes of this experiment:"}, {"heading": "1. Adding hidden layers dramatically reduces the number", "text": "of training epochs for good generalization.\nTo see this, compare the color of the paths at the top panels of Figure 5 (with 1 and 2 hidden layers), with the colors in the lower panels (with 5 and 6 hidden layers). Whereas with 1 hidden layer the network was unable to achieve good IY values even after 104 epochs, with 6 hidden layers it reached the full relevant information at the output layer within 400 epochs."}, {"heading": "2. The compression phase of each layer is shorter when it starts from a previous compressed layer.", "text": "This can be seen by comparing the time to good generalization with 4 and 5 hidden layers. The yellow at the top indicates a much slower convergence with 4 layers than with 5 or 6 layers, where they reach the end points with half the number of epochs."}, {"heading": "3. The compression is faster for the deeper (narrower and closer to the output) layers.", "text": "Whereas in the drift phase the lower layers move first (due to DPI), in the diffusion phase the top layers compress first and \u201dpull\u201d the lower layers after them. Adding more layers seems to add intermediate representations which accelerates the compression.\nIn the discussion we outline a simple explanation for the dramatic computational benefit of the hidden layers, based on the dynamics of diffusion processes during the compression phase."}, {"heading": "3.6. The IB optimality of the layers", "text": "Finally, in order to quantify the IB optimality of the layers we tested whether the converged layers satisfied the encoder-decoder relations of Eq. (7), for some value of the Lagrange multiplier \u03b2.\nFor each converged layer we used the encoder and decoder distributions based on the layer neurons\u2019 quantized values, pi (t|x) and pi (y|t) with which we calculated the information values ( IiX , I i Y ) .\nTo test the IB optimality of the layers encoder-decoder we calculated the optimal IB encoder, pIBi,\u03b2 (t|x) using the ith layer decoder, pi (y|t), through Eq.(7). This can be done for any value of \u03b2, with the known P (X,Y ).\nWe then found the optimal \u03b2i for each layer, by minimizing the averaged KL divergence between the IB and the layer\u2019s encoders,\n\u03b2?i = arg min \u03b2\nExDKL [ pi (t|x) ||pIB\u03b2 (t|x) ] .\nIn Figure 6 we plot the information plane with the layers\u2019 information values ( IiX , I i Y ) and the IB information curve (blue line). The 5 empirical layers (trained with SGD) lie remarkably close to the theoretical IB limit, where the slope of the curve, \u03b2\u22121, matches their estimated optimal \u03b2?i .\nHence, the DNN layers\u2019 encoder-decoder distributions satisfy the IB self-consistent equations within our numerical precision, with decreasing \u03b2 as we move to deeper layers. The error bars are calculated over the 50 randomized networks. As predicted by the IB equations, near the information curve \u2206IY \u223c \u03b2\u22121\u2206IX . How exactly the DNN neurons capture the optimal IB representations is another interesting issue to be discussed elsewhere, but there are clearly many different layers that correspond to the same IB representation."}, {"heading": "3.7. Evolution of the layers with training size", "text": "Another fundamental issue in machine learning, which we only deal with briefly in this paper, is the dependence on the training data size [Cho et al. (2015)]. It is useful to visualize the converged locations of the hidden layers for different training data sizes in the information plane (Figure 7).\nWe trained networks with 6 hidden layers as before, but with different sample sizes, ranging from 3% to 85% of the patterns. As expected, with increasing training size the layers\u2019 true label information (generalization) IY is pushed up and gets closer to the theoretical IB bound for the rule distribution.\nDespite the randomizations, the converged layers for different training sizes lie on a smooth line for each layer, with remarkable regularity. We claim that the layers converge to specific points on the finite sample information curves, which can be calculated using the IB self-consistent equations (Eq. (7)), with the decoder replaced by the empirical distribution. This finite sample IB bound also explains the bounding shape on the left of Figure 3. Since the IB in-\nformation curves are convex for any distribution, even with very small samples the layers converge to a convex curve in the plane.\nThe effect of the training size on the layers is different for IY and IX . In the lower layers, the training size hardly changes the information at all, since even random weights keep most of the mutual information on both X and Y . However, for the deeper layers the network learns to preserve more of the information on Y and better compress the irrelevant information in X . With larger training samples more details onX become relevant for Y and we there is a shift to higher IX in the middle layers."}, {"heading": "3.8. The computational benefits of layered diffusion", "text": "Diffusion processes are governed by the diffusion equation, or by the Focker-Planck equation if there is also a drift or a constraining potential. In simple diffusion, the initial distribution evolves through convolution with a Gaussian kernel, whose width grows like \u221a Dtwith time, in every dimension (D - a diffusion constant). Such convolutions lead to an entropy increase which grows like \u2206H \u221d log(Dt). Thus the entropy growth is logarithmic in the number of time steps, or the number of steps is exponential in the entropy growth. If there is a potential, or empirical error constraint, this process converges asymptotically to the maximum entropy distribution, which is exponential in the constrained potential or training error. This exponential distribution meets the IB equations Eq. (7), as we saw in the previous section.\nWhen applying this to the diffusion phase of the SGD optimization in DNN, one can expect a compression \u2206IX by diffusion to be of order exp(\u2206IX/D) time steps, or opti-\nmization epochs. Assume now that with K hidden layers, each layer only needs to compress by diffusion from the previous (compressed) layer, by \u2206IkX . One can see that the total compression, or entropy increase, approximately breaks down into K smaller steps, \u2206IX \u2248 \u2211 k \u2206I k X . As\nexp( \u2211 k \u2206IkX) \u2211 k exp(\u2206IkX) ,\nthere is an exponential (in the number of layers K, if the \u2206IkX are similar) decrease in epochs with K hidden layers. Note that if we count operations, they only grow linearly with the number of layers, so this exponential boost in the number of epochs can still be very significant. This remains true as long as the number of epochs is super-linear in the compressed entropy."}, {"heading": "4. Discussion and conclusions", "text": "Our numerical experiments were motivated by the Information Bottleneck framework. We demonstrated that the visualization of the layers in the information plane reveals many - so far unknown - details about the inner working of Deep Learning and Deep Neural Networks. They revealed the distinct phases of the SGD optimization, drift and diffusion, which explain the ERM and the representation compression trajectories of the layers. The stochasticity of SGD methods is usually motivated as a way of escaping local minima of the training error. In this paper we give it a new, perhaps much more important role: it generates highly efficient internal representations through compression by diffusion.\nWe also argue that SGD seems an overkill during the diffusion phase, which consumes most of the training epochs, and that much simpler optimization algorithms, such as Monte-Carlo relaxations [German & German (1988)], can be more efficient.\nBut the IB framework may provide even more. If the layers actually converge to the IB theoretical bounds, there is an analytic connection between the encoder and decoder distributions for each layer, which can be exploited during training. Combining the IB iterations with stochastic relaxation methods may significantly boost DNN training.\nTo conclude, it seems fair to say, based on our experiments and analysis, that Deep Learning with DNN are in essence learning algorithms that effectively find efficient representations that are approximate minimal sufficient statistics in the IB sense."}, {"heading": "If our findings hold for general networks and tasks, the compression phase of the SGD and the convergence of the layers to the IB bound can explain the phenomenal success", "text": "of Deep Learning."}, {"heading": "Acknowledgments", "text": "This work is partially supported by the Gatsby Charitable Foundation, The Israel Science Foundation, and Intel ICRICI center."}], "references": [{"title": "Understanding intermediate layers using linear classifier probes, 2016", "author": ["Alain", "Guillaume", "Bengio", "Yoshua"], "venue": null, "citeRegEx": "Alain et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Alain et al\\.", "year": 2016}, {"title": "How much data is needed to train a medical image deep learning system to achieve necessary high accuracy", "author": ["Cho", "Junghwan", "Lee", "Kyewook", "Shin", "Ellie", "Choy", "Garry", "Do", "Synho"], "venue": "arXiv preprint arXiv:1511.06348,", "citeRegEx": "Cho et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2015}, {"title": "Stochastic relaxation, gibbs distributions, and the bayesian restoration of images", "author": ["German", "Stuart", "Donald"], "venue": "neurocomputing: foundations of research,", "citeRegEx": "German et al\\.,? \\Q1988\\E", "shortCiteRegEx": "German et al\\.", "year": 1988}, {"title": "Speech recognition with deep recurrent neural networks. In Acoustics, speech and signal processing", "author": ["Graves", "Alex", "Mohamed", "Abdel-rahman", "Hinton", "Geoffrey"], "venue": "(icassp), 2013 ieee international conference on,", "citeRegEx": "Graves et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2013}, {"title": "Deep residual learning for image recognition", "author": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"], "venue": "CoRR, abs/1512.03385,", "citeRegEx": "He et al\\.,? \\Q2015\\E", "shortCiteRegEx": "He et al\\.", "year": 2015}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["Hinton", "Geoffrey E", "Srivastava", "Nitish", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan R"], "venue": "arXiv preprint arXiv:1207.0580,", "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "Rotation invariant spherical harmonic representation of 3d shape descriptors", "author": ["Kazhdan", "Michael", "Funkhouser", "Thomas", "Rusinkiewicz", "Szymon"], "venue": "Eurographics Symposium on Geometry Processing,", "citeRegEx": "Kazhdan et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Kazhdan et al\\.", "year": 2003}, {"title": "Estimating mutual information", "author": ["Kraskov", "Alexander", "St\u00f6gbauer", "Harald", "Grassberger", "Peter"], "venue": "Phys. Rev. E,", "citeRegEx": "Kraskov et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Kraskov et al\\.", "year": 2004}, {"title": "Exploring strategies for training deep neural networks", "author": ["Larochelle", "Hugo", "Bengio", "Yoshua", "Louradour", "J\u00e9r\u00f4me", "Lamblin", "Pascal"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "Larochelle et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Larochelle et al\\.", "year": 2009}, {"title": "Estimation of entropy and mutual information", "author": ["Paninski", "Liam"], "venue": "Neural Comput.,", "citeRegEx": "Paninski and Liam.,? \\Q2003\\E", "shortCiteRegEx": "Paninski and Liam.", "year": 2003}, {"title": "The Fokker-Planck Equation: Methods of Solution and Applications. Number isbn9780387504988, lccn=89004059 in Springer series in synergetics", "author": ["H. Risken"], "venue": null, "citeRegEx": "Risken,? \\Q1989\\E", "shortCiteRegEx": "Risken", "year": 1989}, {"title": "Deep learning and the information bottleneck principle", "author": ["Tishby", "Naftali", "Zaslavsky", "Noga"], "venue": "In Information Theory Workshop (ITW),", "citeRegEx": "Tishby et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Tishby et al\\.", "year": 2015}, {"title": "The information bottleneck method", "author": ["Tishby", "Naftali", "Pereira", "Fernando C", "Bialek", "William"], "venue": "In Proceedings of the 37-th Annual Allerton Conference on Communication, Control and Computing,", "citeRegEx": "Tishby et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Tishby et al\\.", "year": 1999}, {"title": "Understanding deep learning requires rethinking generalization", "author": ["Zhang", "Chiyuan", "Bengio", "Samy", "Hardt", "Moritz", "Recht", "Benjamin", "Vinyals", "Oriol"], "venue": "arXiv preprint arXiv:1611.03530,", "citeRegEx": "Zhang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2016}, {"title": "Text understanding from scratch", "author": ["Zhang", "Xiang", "LeCun", "Yann"], "venue": "arXiv preprint arXiv:1502.01710,", "citeRegEx": "Zhang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 3, "context": "In the last decade, deep learning algorithms have made remarkable progress on numerous machine learning tasks and dramatically improved the state-of-the-art in many practical areas [Graves et al. (2013); Zhang & LeCun (2015); Hinton et al.", "startOffset": 182, "endOffset": 203}, {"referenceID": 3, "context": "In the last decade, deep learning algorithms have made remarkable progress on numerous machine learning tasks and dramatically improved the state-of-the-art in many practical areas [Graves et al. (2013); Zhang & LeCun (2015); Hinton et al.", "startOffset": 182, "endOffset": 225}, {"referenceID": 3, "context": "In the last decade, deep learning algorithms have made remarkable progress on numerous machine learning tasks and dramatically improved the state-of-the-art in many practical areas [Graves et al. (2013); Zhang & LeCun (2015); Hinton et al. (2012); He et al.", "startOffset": 182, "endOffset": 247}, {"referenceID": 3, "context": "In the last decade, deep learning algorithms have made remarkable progress on numerous machine learning tasks and dramatically improved the state-of-the-art in many practical areas [Graves et al. (2013); Zhang & LeCun (2015); Hinton et al. (2012); He et al. (2015); LeCun et al.", "startOffset": 182, "endOffset": 265}, {"referenceID": 3, "context": "In the last decade, deep learning algorithms have made remarkable progress on numerous machine learning tasks and dramatically improved the state-of-the-art in many practical areas [Graves et al. (2013); Zhang & LeCun (2015); Hinton et al. (2012); He et al. (2015); LeCun et al. (2015)].", "startOffset": 182, "endOffset": 286}, {"referenceID": 11, "context": "Moreover, they suggested that optimized DNNs layers should approach the Information Bottleneck (IB) bound [Tishby et al. (1999)] of the optimal achievable representations of the input X .", "startOffset": 107, "endOffset": 128}, {"referenceID": 11, "context": ", exponential families), Tishby et al. (1999) relaxed this optimization problem by first allowing the map to be stochastic, defined as an encoder P (T |X), and then, by allowing the map to capture as much as possible of I(X;Y ), not necessarily all of it.", "startOffset": 25, "endOffset": 46}, {"referenceID": 11, "context": "This leads to the Information Bottleneck (IB) tradeoff [Tishby et al. (1999)], which provides a computational framework for finding approximate minimal sufficient statistics, or the optimal tradeoff between compression of X and prediction of Y .", "startOffset": 56, "endOffset": 77}, {"referenceID": 7, "context": "Good overviews on methods for mutual information estimation can be found in Paninski (2003) and Kraskov et al. (2004).", "startOffset": 96, "endOffset": 118}, {"referenceID": 6, "context": "These orbits form a minimal sufficient partition/statistics for spherically symmetric rules [Kazhdan et al. (2003)].", "startOffset": 93, "endOffset": 115}, {"referenceID": 6, "context": "To generate the input-output distribution, P (X,Y ), we calculated a spherically symmetric real valued function of the pattern f(x) (evaluated through its spherical harmonics power spectrum [Kazhdan et al. (2003)]) and compared it to a threshold, \u03b8, and apply a step \u0398 function to obtain a {0, 1} label: y(x) = \u0398(f(x) \u2212 \u03b8).", "startOffset": 191, "endOffset": 213}, {"referenceID": 8, "context": "This looks very much like overfitting the small sample noise, which can be avoided with early stopping methods [Larochelle et al. (2009)].", "startOffset": 112, "endOffset": 137}, {"referenceID": 10, "context": "Risken (1989)], whose stationary distribution maximizes the entropy of the weights distribution, under the training error constraint.", "startOffset": 0, "endOffset": 14}, {"referenceID": 13, "context": "This is consistent with previous works which showed that explicit forms of regularization, such as weight decay, dropout, and data augmentation, do not adequately explain the generalization error of DNNs [Zhang et al. (2016)].", "startOffset": 205, "endOffset": 225}, {"referenceID": 1, "context": "Another fundamental issue in machine learning, which we only deal with briefly in this paper, is the dependence on the training data size [Cho et al. (2015)].", "startOffset": 139, "endOffset": 157}], "year": 2017, "abstractText": "Despite their great success, there is still no comprehensive theoretical understanding of learning with Deep Neural Networks (DNNs) or their inner organization. Previous work [Tishby & Zaslavsky (2015)] proposed to analyze DNNs in the Information Plane; i.e., the plane of the Mutual Information values that each layer preserves on the input and output variables. They suggested that the goal of the network is to optimize the Information Bottleneck (IB) tradeoff between compression and prediction, successively, for each layer. In this work we follow up on this idea and demonstrate the effectiveness of the InformationPlane visualization of DNNs. We first show that the stochastic gradient descent (SGD) epochs have two distinct phases: fast empirical error minimization followed by slow representation compression, for each layer. We then argue that the DNN layers end up very close to the IB theoretical bound, and present a new theoretical argument for the computational benefit of the hidden layers.", "creator": "LaTeX with hyperref package"}}}