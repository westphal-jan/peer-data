{"id": "1703.05614", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Mar-2017", "title": "ParaGraphE: A Library for Parallel Knowledge Graph Embedding", "abstract": "Knowledge planar geometries demonstrate starting write entire importance hypercube long numerical characteristics meanwhile focused first institutions once relations into si - tinuous reduce - spatial formula_26. Recently, many practices [april, first, \u2013, 37, 6] have far announced once possibility made perhaps problem, ever existing instead - thread implemen - tations of them are be - quantities of many - surge knowledge matrices. Here, anyway type a marxist defined integration allowed parallelize any applied, an demonstrates also addition time reduction time one uencing the calculation. We name our blueprint changed ParaGraphE, would additional takes library. parallel demonstrate graph embedding. The finding definition makes taken streaming 30 pdf: / / tollgate. com / LIBBLE / LIBBLE - MultiThread / bushes / english / ParaGraphE.", "histories": [["v1", "Thu, 16 Mar 2017 13:36:41 GMT  (201kb,D)", "https://arxiv.org/abs/1703.05614v1", null], ["v2", "Fri, 31 Mar 2017 06:15:48 GMT  (201kb,D)", "http://arxiv.org/abs/1703.05614v2", null], ["v3", "Wed, 5 Apr 2017 02:56:45 GMT  (201kb,D)", "http://arxiv.org/abs/1703.05614v3", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["xiao-fan niu", "wu-jun li"], "accepted": false, "id": "1703.05614"}, "pdf": {"name": "1703.05614.pdf", "metadata": {"source": "CRF", "title": "ParaGraphE: A Library for Parallel Knowledge Graph Embedding", "authors": ["Xiao-Fan Niu", "Wu-Jun Li"], "emails": ["niuxf@lamda.nju.edu.cn,", "liwujun@nju.edu.cn"], "sections": [{"heading": "1 Introduction", "text": "Knowledge graph is widely used for representing knowledge in artificial intelligence. A knowledge graph contains a set of entities denoted as E , and a set of relations denoted as R. Each knowledge in a knowledge graph is represented in a triple form (head, label, tail), which is typically denoted as (h, r, t), with h, t \u2208 E and r \u2208 R, meaning that h has a relation r to t.\nKnowledge graph usually suffers from incompleteness. A main task of knowledge graph research is to complete it by predicting potential relations based on existing observed triples. Traditional methods based on logic and symbols are neither tractable nor robust to deal with large-scale knowledge graphs. Recently, knowledge graph embedding is introduced to solve this problem by encoding entities and relations into continuous low-dimensional vectors, and to perform reasoning in a simple linear algebra way. Some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].\nAlthough these methods have achieved promising performance on knowledge graph completion, the existing single-thread implementations of them are time-consuming for large-scale knowledge graphs. Here, we design a unified parallel framework to parallelize these methods, which achieves a significant time reduction without influencing the accuracy. We name our framework as ParaGraphE, which provides a library for parallel knowledge graph embedding. The source code can be downloaded from https://github.com/LIBBLE/LIBBLE-MultiThread/tree/master/ParaGraphE.\nar X\niv :1\n70 3.\n05 61\n4v 3\n[ cs\n.A I]\n5 A\npr 2"}, {"heading": "2 Implemented Methods", "text": "We first introduce the unified framework of our parallel implementations, and then point out the detailed difference between different methods."}, {"heading": "2.1 Framework", "text": "All the methods mentioned above try to minimize a margin-based rank loss which can be formulated as follows:\nL = \u2211\n(h,r,t)\u2208S \u2211 (h\u2032,r,t\u2032)\u2208S\u2032 [s(h, r, t) + \u03b3 \u2212 s(h\u2032, r, t\u2032)]+ (1)\ns.t. some constraints\nwhere S is a set of golden (positive) triples, S \u2032 is a set of corrupted (negative) triples which are usually constructed by replacing h or t of a golden triplet (h, r, t) with another entity, \u03b3 is the margin, s(h, r, t) is the score function of triplet (h, r, t) which is differently defined in different methods.\nThe unified parallel learning framework of ParaGraphE is shown in Algorithm 1.\nAlgorithm 1 ParaGraphE\nInitialization: p threads, embeddings of each entity and relation for epoch = 1; epoch < num epoches; epoch+ + do for each thread do\ni=1 repeat\nsample a golden triple (h, r, t) construct a corrupted triple (h\u2032, r, t\u2032) if s(h, r, t) + \u03b3 \u2212 s(h\u2032, r, t\u2032) > 0 then\ncalculate the gradient of the embeddings of h, t, h\u2032, t\u2032, r subtract the gradient from the corresponding embeddings\nend if normalize h, t, h\u2032, t\u2032, r according to the constraints i++\nuntil i== number of triples a thread handles in an epoch end for\nend for save the embeddings into files\nParaGraphE is implemented based on the lock-free strategies in [4, 7]."}, {"heading": "2.2 Implemented Methods", "text": "Any method with a similar margin-based rank loss in (1) can be easily implemented in ParaGraphE. Here, we implement some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6]. All these methods can be formulated with the loss in (1). The differences between these methods only lie in the score functions and constraints.\n\u2022 TransE [1]:\n\u2013 embeddings: k-dimensional vectors for both entities and relations. Let us denote the embeddings for h, r, t as h, r, t.\n\u2013 score function: s(h, r, t) = \u2016h+ r\u2212 t\u2016. Either L1-norm or L2-norm can be employed.\n\u2013 constraints: \u2016h\u20162 = 1, \u2016t\u20162 = 1, \u2016r\u20162 = 1.\n\u2022 TransH [5]:\n\u2013 embeddings: k-dimensional vectors h, t for entities h, t. A normal vector wr and a translation vector dr, both in Rk, are associated with relation r. \u2013 score function: s(h, r, t) = \u2016(h\u2212wr>hwr) + dr \u2212 (t\u2212wr>twr)\u2016. \u2013 constraints: \u2016h\u20162 = 1, \u2016t\u20162 = 1, \u2016wr\u20162 = 1, \u2016dr\u20162 = 1 and |w>r dr| \u2264 .\nHere, is a hyper-parameter.\n\u2022 TransR [3]:\n\u2013 embeddings: k-dimensional vector h, t for entities h, t. A translation vector r \u2208 Rd and a projection matrix Mr \u2208 Rk\u00d7d are associated with relation r.\n\u2013 score function: s(h, r, t) = \u2016Mrh + r\u2212Mrt\u2016. \u2013 constraints: \u2016h\u20162 = 1, \u2016t\u20162 = 1, \u2016r\u20162 = 1, \u2016Mrh\u20162 \u2264 1, \u2016Mrt\u20162 \u2264 1.\n\u2022 TransD [2]:\n\u2013 embeddings: Two vectors are associated with each entity and relation, i.e., {h,hp \u2208 Rk} for entity h, {t, tp \u2208 Rk} for entity t, and {r, rp \u2208 Rd} for relation r. Subscript p denotes the projection vectors. \u2013 score function: s(h, r, t) = \u2016(h + hp>hrp) + r\u2212 (t + tp>trp))\u2016 \u2013 constraints: \u2016h\u20162 = 1, \u2016t\u20162 = 1, \u2016r\u20162 = 1, \u2016h + hp>hrp\u20162 \u2264 1, \u2016t +\ntp >trp\u20162 \u2264 1\n\u2022 SphereE [6]:\n\u2013 embeddings: k-dimensional vectors for both entities and relations, i.e., h, r, t \u2208 Rk for h, r, t.\n\u2013 score function: s(h, r, t) = \u2016M(h, r, t) \u2212 Dr2\u2016. M(h, r, t) = \u2016h + r \u2212 t\u2016. Dr is a relation-specific parameter.\n\u2013 constraints: \u2016h\u20162 = 1, \u2016t\u20162 = 1, \u2016r\u20162 = 1.\nNote that SphereE is an implementation for the method \u201csphere\u201d of the ManifoldE [6]. For more details about these methods, please refer to their original papers."}, {"heading": "3 Experiment Results", "text": "We use 10 threads to run the experiments on two widely used knowledge graph datasets WN18 and FB15k. Table 1 lists the statistics of these two datasets.\nThe metrics for evaluation contain those popular metrics adopted in existing knowledge graph embedding papers. They are:\n\u2022 mr: the value of mean rank.\nThe experiment results are shown in Table 2 and Table 3. Here, \u201craw\u201d denotes the metrics calculated on all corrupted triples, \u201cfilter\u201d denotes the metrics calculated on corrupted triples without those already existing in knowledge graph.\nWe can find that all the accuracy is very close to the accuracy reported in the original papers, except for SphereE on FB15k where the original paper only reports a result using a polynomial kernel. We can also find that our implementations are much faster than those in the original papers.\nFigure 1 shows the change of epoch loss when running TransR on dataset FB15k with ParaGraphE by setting #threads = 1, 2, 5, 8, 10. Here, the epoch loss is the sum of rank-based hinge loss on the sampled triples in an epoch. We can find that adopting multi-thread learning does not change the convergence of the training procedure. Other embedding methods have similar phenomenon.\nFigure 2 shows the speedup of training TransR on both datasets with ParaGraphE by running 500 epoches. We can find that ParaGraphE achieves around 8x speedup with 10 threads (cores) on both datasets."}, {"heading": "4 Conclusion", "text": "We have designed a unified framework called ParaGraphE to parallelize knowledge graph embedding methods. Our implementations of several existing methods can achieve a significant time reduction without influencing the accuracy. In our future work, we will implement other knowledge graph embedding methods with the framework ParaGraphE. Moreover, besides knowledge graphs, ParaGraphE is actually general enough to be applied for other kinds of graphs, which will also be empirically evaluated in our future work."}], "references": [{"title": "Translating embeddings for modeling multi-relational data", "author": ["Antoine Bordes", "Nicolas Usunier", "Alberto Garcia-Duran", "Jason Weston", "Oksana Yakhnenko"], "venue": "In NIPS,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Knowledge graph embedding via dynamic mapping matrix", "author": ["Guoliang Ji", "Shizhu He", "Liheng Xu", "Kang Liu", "Jun Zhao"], "venue": "In ACL,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Learning entity and relation embeddings for knowledge graph completion", "author": ["Yankai Lin", "Zhiyuan Liu", "Maosong Sun", "Yang Liu", "Xuan Zhu"], "venue": "In AAAI,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Hogwild: A lock-free approach to parallelizing stochastic gradient descent", "author": ["Benjamin Recht", "Christopher Re", "Stephen Wright", "Feng Niu"], "venue": "In NIPS,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Knowledge graph embedding by translating on hyperplanes", "author": ["Zhen Wang", "Jianwen Zhang", "Jianlin Feng", "Zheng Chen"], "venue": "In AAAI,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "From one point to a manifold: Knowledge graph embedding for precise link prediction", "author": ["Han Xiao", "Minlie Huang", "Hao Yu", "Xiaoyan Zhu"], "venue": "In IJCAI,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Lock-free optimization for nonconvex problems", "author": ["Shen-Yi Zhao", "Gong-Duo Zhang", "Wu-Jun Li"], "venue": "In AAAI,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2017}], "referenceMentions": [{"referenceID": 0, "context": "Recently, many methods [1, 5, 3, 2, 6] have been proposed to deal with this problem, but existing single-thread implementations of them are time-consuming for large-scale knowledge graphs.", "startOffset": 23, "endOffset": 38}, {"referenceID": 4, "context": "Recently, many methods [1, 5, 3, 2, 6] have been proposed to deal with this problem, but existing single-thread implementations of them are time-consuming for large-scale knowledge graphs.", "startOffset": 23, "endOffset": 38}, {"referenceID": 2, "context": "Recently, many methods [1, 5, 3, 2, 6] have been proposed to deal with this problem, but existing single-thread implementations of them are time-consuming for large-scale knowledge graphs.", "startOffset": 23, "endOffset": 38}, {"referenceID": 1, "context": "Recently, many methods [1, 5, 3, 2, 6] have been proposed to deal with this problem, but existing single-thread implementations of them are time-consuming for large-scale knowledge graphs.", "startOffset": 23, "endOffset": 38}, {"referenceID": 5, "context": "Recently, many methods [1, 5, 3, 2, 6] have been proposed to deal with this problem, but existing single-thread implementations of them are time-consuming for large-scale knowledge graphs.", "startOffset": 23, "endOffset": 38}, {"referenceID": 0, "context": "Some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 69, "endOffset": 72}, {"referenceID": 4, "context": "Some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 81, "endOffset": 84}, {"referenceID": 2, "context": "Some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 93, "endOffset": 96}, {"referenceID": 1, "context": "Some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 105, "endOffset": 108}, {"referenceID": 5, "context": "Some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 123, "endOffset": 126}, {"referenceID": 3, "context": "ParaGraphE is implemented based on the lock-free strategies in [4, 7].", "startOffset": 63, "endOffset": 69}, {"referenceID": 6, "context": "ParaGraphE is implemented based on the lock-free strategies in [4, 7].", "startOffset": 63, "endOffset": 69}, {"referenceID": 0, "context": "Here, we implement some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 88, "endOffset": 91}, {"referenceID": 4, "context": "Here, we implement some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 100, "endOffset": 103}, {"referenceID": 2, "context": "Here, we implement some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 112, "endOffset": 115}, {"referenceID": 1, "context": "Here, we implement some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 124, "endOffset": 127}, {"referenceID": 5, "context": "Here, we implement some representative knowledge graph embedding methods include TransE [1], TransH [5], TransR [3], TransD [2] and ManifoldE [6].", "startOffset": 142, "endOffset": 145}, {"referenceID": 0, "context": "\u2022 TransE [1]:", "startOffset": 9, "endOffset": 12}, {"referenceID": 4, "context": "\u2022 TransH [5]: \u2013 embeddings: k-dimensional vectors h, t for entities h, t.", "startOffset": 9, "endOffset": 12}, {"referenceID": 2, "context": "\u2022 TransR [3]: \u2013 embeddings: k-dimensional vector h, t for entities h, t.", "startOffset": 9, "endOffset": 12}, {"referenceID": 1, "context": "\u2022 TransD [2]: \u2013 embeddings: Two vectors are associated with each entity and relation, i.", "startOffset": 9, "endOffset": 12}, {"referenceID": 5, "context": "\u2013 score function: s(h, r, t) = \u2016(h + hphrp) + r\u2212 (t + tptrp))\u2016 \u2013 constraints: \u2016h\u20162 = 1, \u2016t\u20162 = 1, \u2016r\u20162 = 1, \u2016h + hphrp\u20162 \u2264 1, \u2016t + tp trp\u20162 \u2264 1 \u2022 SphereE [6]: \u2013 embeddings: k-dimensional vectors for both entities and relations, i.", "startOffset": 154, "endOffset": 157}, {"referenceID": 5, "context": "Note that SphereE is an implementation for the method \u201csphere\u201d of the ManifoldE [6].", "startOffset": 80, "endOffset": 83}], "year": 2017, "abstractText": "Knowledge graph embedding aims at translating the knowledge graph into numerical representations by transforming the entities and relations into continuous low-dimensional vectors. Recently, many methods [1, 5, 3, 2, 6] have been proposed to deal with this problem, but existing single-thread implementations of them are time-consuming for large-scale knowledge graphs. Here, we design a unified parallel framework to parallelize these methods, which achieves a significant time reduction without influencing the accuracy. We name our framework as ParaGraphE, which provides a library for parallel knowledge graph embedding. The source code can be downloaded from https: //github.com/LIBBLE/LIBBLE-MultiThread/tree/master/ParaGraphE.", "creator": "LaTeX with hyperref package"}}}