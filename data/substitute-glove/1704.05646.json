{"id": "1704.05646", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Apr-2017", "title": "Effects of the optimisation of the margin distribution on generalisation in deep architectures", "abstract": "Despite being so keeping to chance of Support Vector Machines, the binding of kissufim 3-to-1 bioenvision is want known 1999 cold learning. We even would intermodulation over margin attenuation and whether maximisation of several handily longer more normally next promote oft-cited in deep microprocessors. We negotiate their Halfway chances exact any equalizes before Normalised Margin Variance (NMV) the following offset of way natural technical product even assessment. performance against the Softmax Cross - Entropy aggregate saturday this MNIST, smallNORB and CIFAR - 2 analytes.", "histories": [["v1", "Wed, 19 Apr 2017 08:31:20 GMT  (185kb,D)", "http://arxiv.org/abs/1704.05646v1", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["lech szymanski", "brendan mccane", "wei gao", "zhi-hua zhou"], "accepted": false, "id": "1704.05646"}, "pdf": {"name": "1704.05646.pdf", "metadata": {"source": "CRF", "title": "Effects of the optimisation of the margin distribution on generalisation in deep architectures", "authors": ["Lech Szymanski", "Brendan McCane"], "emails": ["lechszym@cs.otago.ac.nz", "mccane@cs.otago.ac.nz", "gaow@lamda.nju.edu.cn", "zhouzh@lamda.nju.edu.cn"], "sections": [{"heading": null, "text": "Despite being so vital to success of Support Vector Machines, the principle of separating margin maximisation is not used in deep learning. We show that minimisation of margin variance and not maximisation of the margin is more suitable for improving generalisation in deep architectures. We propose the Halfway loss function that minimises the Normalised Margin Variance (NMV) at the output of a deep learning models and evaluate its performance against the Softmax Cross-Entropy loss on the MNIST, smallNORB and CIFAR-10 datasets."}, {"heading": "1 Introduction", "text": "Support Vector Machines (SVM) guarantee best generalisation in a classification task for a chosen feature extraction function (Cortes & Vapnik, 1995; Vapnik, 1995). While the question of the choice of appropriate feature function (or its parameters) still remains, the training is guaranteed to give the optimal answer for the choice made. This assurance of generalisation comes from the principle of maximising the margin of separation.\nBoosting methods build a feature space during the training process from an ensemble of weak classifiers (Schapire, 1990). It has been shown that their resistance to overfitting is due to the effect these methods have on the distribution of points around the margin (Schapire et al., 1998; Reyzin & Schapire, 2006; Wang et al., 2011). Gao & Zhou (2013) theoretically showed that AdaBoost is resistant to overfitting because it implicitly optimises the classification margin distribution by maximising average margin and minimising margin variance simultaneously. In particular, they emphasised that the minimisation of margin variance is very important, which was ignored by most previous studies on learning algorithm design. Zhang & Zhou (2013) proposed the LDM which maximises average margin and minimises margin variance simultaneously, and achieved consistently better performance than SVMs; later, Zhang & Zhou (2016) proposed Optimal Margin Machine (ODM) which demonstrates even better performance.\nIn this paper we take up the idea of margin distribution and apply it to deep learning. We theorise that in deep architectures with traditional backpropagation training, maximising the margin of separation is not likely to positively affect generalisation. However, we demonstrate that Halfway loss, which aims to minimise the normalised margin variance (NMV), does lead to improved generalisation in terms of outperforming the Softmax Cross-Entropy loss on the MNIST, smallNORB and CIFAR10 datasets.\nar X\niv :1\n70 4.\n05 64\n6v 1\n[ cs\n.L G\n] 1\n9 A"}, {"heading": "2 Previous work", "text": "A number of different approaches have made an effective use of the principle of margin maximisation in artificial neural networks. Jayadeva et al. (2002) combined it with a decision tree-based training and Nishikawa & Abe (2002) incorporated it into the CARVE algorithm (Young & Downs, 1998). Both of these methods are based on a boosting-like training scheme, where the feature space is built one neuron (hypothesis) at a time, focusing on the remaining, incorrectly classified subset of the training data. Although in spirit these methods pertain to neural networks, the performance leverage they gain thanks to maximising the margin has probably more to do with the boosting aspects of the feature building rather than the deep nature of the neural network used.\nThe meticulously named Maximum Margin Gradient Descent with adaptive learning rate (MMGDX) algorithm proposed by (Ludwig & Nunes, 2010)\u2019s works in a more traditional, fixed connectionist architecture trained with the backpropagation algorithm. The success of that algorithm most likely lies in the fact that the proposed Means Squared Error (MSE)-like loss, not unlike the Halfway loss introduced in this paper, might in fact be also minimising the distribution of margin variance. It also should be noted that MMGDX was tested only on single-hidden layer neural network with sigmoid activation function, and the superior performance only showcased on single-class problems.\nThe above methods train neural networks by maximising the geometric margin. Hence, in some sense, they consider the mean margin, but ignore the influence of margin variance (with the exception of MMGDX, which unintentionally might be reducing the variance). The Halfway loss minimises the margin variance and is not limited to the sigmoid activation function. We can test it on fully connected, as well as convolutional, neural networks with Rectifier Linear Unit (ReLU) activation function (Hahnloser et al., 2003; Glorot et al., 2011) and compare its performance to Softmax Central-Entropy loss on multi-class image recognition datasets."}, {"heading": "3 Margin", "text": "Let\u2019s denote by X \u2208 Rd the instance space and by Y \u2208 {+1,\u22121} the label set governed by some distribution D over X \u00d7 Y . Let\u2019s assume that we have a set S = {(x1, y1), (x2, y2), ..., (xm, ym)} of m points drawn identically and independently from D. Given some feature extraction function \u03c6(x) \u2208 Rk and a linear classifier parametrised by bias b and a unit vector w \u2208 Rk, so that |w| = 1, we can define the margin of instance (xi, yi), which is really a distance of the point from the classification boundary, as:\n\u03b3i = yi [ wT\u03c6(xi) + b ] . (1)\nGiven classification error as\n(\u03b3i) =\n{ 0 \u03b3i > 0\n1 otherwise,\nthe goal of binary classification is to search for \u03c6(x), the direction of unit vector w, and value of b such that the expectation of (\u03b3) over distribution D, is minimised. Since typically D is not known, the best way to estimate the expectation is by computing the average of (\u03b3i) over the points from the training sample S and then try to maximise it. Breiman (1999) believed that AdaBoost also tried to maximise the minimum margin. Later, Reyzin & Schapire (2006) claimed that AdaBoost emphasises the average margin or median margin. The average margin is also called \"margin mean\", defined as:\n\u00b5 = 1\nm m\u2211 i=1 \u03b3i. (2)"}, {"heading": "3.1 Margin across different feature spaces", "text": "In SVMs the feature extracting function \u03c6(x) is user-definable, but fixed during optimisation. The learning process for a given choice of \u03c6(x) is the search for w and b that maximises the geometric margin while providing correct classification to the degree dictated by the choice of the soft margin parameter. A fixed feature space and margin maximisation guarantees an upper bound on probability of misclassification (Cristianini & Shawe-Taylor, 2000). The challenge with SVMs is to determine the best \u03c6(x) by selecting the right kernel function and its parameters as well as an appropriate soft margin penalty factor for misclassification.\nGiven our intention to apply margin theory to deep learning, we are prompted to investigate the behaviour of the margin in an SVM while varying \u03c6(x). Lanckriet et al. (2004) demonstrated that with some constraints and restrictions on \u03c6(x), maximisation of the margin still provides an upper bound on probability of misclassification. However, in deep learning \u03c6(x) can be a universal function approximator, hence we are interested in margin behaviour in general. Let us conduct a simple experiment.\nLet\u2019s define the following feature extraction function\n\u03c6(x) = [ e\u2212\u03b4|x\u2212x1| e\u2212\u03b4|x\u2212x2| . . . e\u2212\u03b4|x\u2212xm| ]T , (3)\nwhere xi for i = 1...m correspond to the input data from the training set. The feature space in the above definition of \u03c6(x) is the feature space of a Radial Basis Function (RBF) neural network parameterised by \u03b4 with the centres corresponding to all points in the training dataset. It is not as computationally efficient as the Gaussian kernel, but it gives a similar feature space while still allowing for the computation of \u03c6(x) (which Gaussian kernel does not). After SVM training on \u03c6(x) for a given value of \u03b4, and with the soft margin parameter C = 100, we can compute ws = | \u2211m i=1 yi\u03b1i\u03c6(xi)|, where \u03b1i > 0 are the support vectors found by the SVM. With the ability to compute ws, we can evaluate the value of the geometric margin, 2|ws| , as well as compute the unit vector w = ws|ws| and thus the mean margin, \u00b5, for different values of \u03b4.\nFigure 1 shows how the test error relates to the maximum geometric and mean margin values over a range of different \u03b4\u2019s in \u03c6(x) for a two-class subset problem from the smallNORB dataset (LeCun et al., 2004). Note that the value of maximum geometric margin steadily climbs with \u03b4 despite the fact that the test error dips, reaches a minimum, and then starts climbing as the value of \u03b4 increases. The best performance does not correspond to the largest value of the best geometric margin found across different \u03c6(x)s.\nWe need to acknowledge that the lack of correlation between best test data performance and maximum value of the margin in the experiment above does not mean that there isn\u2019t an upper bound on misclassification for changing \u03c6(x). However, given that current proofs for existence of the bound require certain constraints on the structure of \u03c6(x) (Lanckriet et al., 2004), the result of our simple experiment prompts us to hypothesise that in general it is the relative value of the margin within given \u03c6(x) and not its absolute value across different realisations of \u03c6(x) that needs to be maximised in order to improve generalisation. This would suggest that it might not be advantageous to maximise the margin across different realisations of \u03c6(x).\nFigure 1 also shows the mean margin value resulting from SVM training on different realisations of \u03c6(x). Although it doesn\u2019t increase steadily with \u03b4, its maximum value does not coincide with the lowest test error either. The value of the mean margin is not consistently related to best test performance for varying \u03c6(x)."}, {"heading": "3.2 Margin in deep architectures", "text": "The simple experiment from the previous section suggests that maximising margin in architectures where \u03c6(x) is not constant may not lead to a better generalisation. We can go even further and show that a simple linear transformation facilitated by \u03c6(x) is sufficient to produce arbitrary margin value without changing the relative position of the points with respect to the separating line given by w.\nLemma 3.1. The mean margin of a set of points classified by unit vector w, bias \u03b2b, and a feature extracting function \u03c6(x) = \u03b2\u03c6\u0302(x), such that \u00b5 > 0, can be made arbitrarily large by varying the value of \u03b2 > 1.\nProof. The lemma is rather obvious, since\n\u03b2\u03b3i = yi\n[ wT ( \u03b2\u03c6\u0302(x) ) + \u03b2b ] ,\nwhich produces a mean margin \u03b2\u00b5 > \u00b5 if \u00b5 > 0 and \u03b2 > 1. Note that, while bias of the linear classifier is allowed to vary, w remains a unit vector, as stipulated in our definition of the margin. It is also important to note that this transformation does not change the sign of any \u03b3i - all the points are classified exactly the same as before and after multiplication by \u03b2. Thus, this transformation doesn\u2019t change anything about the classification decision in the space of \u03c6(x).\nTo understand the significance of Lemma 3.1, let us suppose that we are trying to maximise the mean margin in a computational model where the feature extracting function is defined by a neural network, such that\n\u03c6(x) = f ( W\u0302T \u03c6\u0302(x) + b\u0302 ) ,\nwhere f(x) is a monotonically increasing activation function, W\u0302T and b\u0302 are the parameters of the penultimate layer, and \u03c6\u0302(x) is the output due to all the previous layers of the network. A simple linear transformation within \u03c6(x) is sufficient to increase the margin. The representation power of the penultimate layer is more than sufficient to provide this transformation, by changing W\u0302T and b\u0302, without any changes to \u03c6\u0302(x) or the location of the separating hyperplane in the feature space of \u03c6(x). Thus it\u2019s possible for the data in the feature space to stretch away from the separating hyperplane and give a larger margin without any meaningful change to the feature extraction or classification.\nAs a result of Lemma 3.1 we form a hypothesis that maximisation of geometric or mean margin is not a meaningful objective for improving generalisation in deep architectures."}, {"heading": "4 Margin variance", "text": "Following the theory developed by (Gao & Zhou, 2013) and (Zhang & Zhou, 2016) we next consider the effect of minimising the variance of the margin in deep architectures. The variance of the margin is defined as\n\u03c3 = 1\nm m\u2211 i=1 (\u03b3i \u2212 \u00b5)2 . (4)\nIn order to increase the mean margin, as illustrated in Figure 2a, it is sufficient for the feature space \u03c6(x) to change so that the points stretch away from the separating hyperplane defined by w. This can be easily facilitated via a linear transformation, as stipulated in Lemma 3.1. Figure 2b depicts the type of transformation that \u03c6(x) needs to undergo in order to reduce the margin variance. In addition to the stretch away from the separating hyperplane, the space must squash around two separate hyperplanes on the positive and negative margin. It is apparent that this is a somewhat less trivial non-linear transformation, and thus more likely to be conducive to meaningful changes of \u03c6(x) with respect to generalisation."}, {"heading": "4.1 Normalised margin", "text": "If our hypothesis, that the mean margin value is arbitrary for changing \u03c6(x), is correct it stands to reason that the variance value might be arbitrary for different \u03c6(x) as well. Indeed, if we repeat the experiment with SVM on the two-class subset of smallNORB and the feature extraction function defined in Equation 3, we can clearly see (in Figure 3) that the minimum margin variance does not exactly coincide with the minimum test error in terms of the \u03b4 value that specifies the curvature of \u03c6(x). It should be noted that the SVM training does not strive to minimise the variance of the margin, but rather to maximise the geometric margin. However, given that margin is not consistent for different \u03c6(x), it\u2019s not unreasonable to assume that variance won\u2019t be either. Hence we propose the normalised margin variance (NMV) defined as\n\u03c3 = 1\nm m\u2211 i=1 (\u03b3i \u2212 \u00b5) 2 , (5)\nwhere\n\u03b3i = \u03b3i\nmax({|\u03b31|, ..., |\u03b3m|}) ,\nand\n\u00b5 = 1\nm m\u2211 i=1 \u03b3i.\nEquation 5 has been designed to make the margin value \u22121 \u2264 \u03b3i \u2264 1. It is also worth to note that in a scenario where \u03b3i = yi [ wT\u03b2\u03c6\u0302(x) + \u03b2b ] , the proposed normalisation removes the contribution of\n\u03b2 to the margin value. The normalisation becomes\n\u03b3i = \u03b3i \u03b3j\n= yi\u03b2\n[ wT \u03c6\u0302(x) + b ] yj\u03b2 [ wT \u03c6\u0302(xj) + b\n] , (6) where j is the index of the sample that produces maximum absolute value of the margin. The \u03b2s cancel out. This means that the linear transformation aspect of \u03c6(x), which can give an arbitrary margin value at the output, is removed from the optimisation.\nFigure 3 shows the normalised margin variance, \u03c3, for different values of \u03b4 in the SVM and two-class smallNORB experiment. The minimum of normalised margin variance does indeed fall close to the \u03b4 that gives the smallest test error."}, {"heading": "4.2 Halfway loss function", "text": "In order to carry out empirical evaluation of the effect that minimising normalised variance has on generalisation in deep architectures, we propose the Halfway loss function defined as\nJ = 1\nm m\u2211 i=1 ( \u03c3i \u2212 1 2 )2 . (7)\nIt is hard not to notice the resemblance of Equation 7 to the Mean Squared Error (MSE) loss function. MSE training does in fact strive to minimise the variance of the model\u2019s output around the value given by the target label. The point of difference between Halfway and MSE loss is the normalisation of the margin, which in effect is the same as normalisation of the model\u2019s output.\nThe motivation for normalisation, as discussed in the previous section, is to obtain consistency of the margin variance across different \u03c6(x). However, a consequence of this normalisation is that optimisation does not enforce an absolute target value for the output, but rather a relative value with respect to other outputs. We hypothesise that part of the reason why Softmax is so successful in deep learning is that it allows the model to produce output in any range, as long as the relative value of the correct class neuron is larger than the value of other outputs. This allows the deep model to operate in its natural range, the values of the output being a result of the dynamics arising from the learner\u2019s architecture and the type of optimisation. This natural range might be also the reason why RELU activation function works so well with Softmax. Normalisation of the margin assures that Halfway loss, in contrast to MSE, does allow the model to operate in its natural range, though still drives the model to produce positive and negative output in correspondence to the sign of the target label.\nThe Halfway loss is basically a MSE loss that minimises the margin of a classifier around half way to the current maximum value of absolute margin, 12 max({|\u03b31|, ..., |\u03b3m|}). The choice of 1 2 for the target value for the normalised margin is based on the assumption that the mean of the margin is somewhere between 0 and the current maximum value."}, {"heading": "4.3 Halfway loss for multi-class classification", "text": "For multi-class classification, where label yi = {\u22121, 1}K we propose a one-against-rest training scheme with a cost sensitive-learning-like (Elkan, 2001) multi-class weighting factor to correct the natural imbalance of the positive to negative label ratio. In anm-point dataset with even distribution of K classes, that is mK examples of each class, a given output will be trained on m K positive and (K\u22121)m K negative labels. This imbalance would mean that negative labels gain more variance reduction as opposed to the positive ones. In order to correct this, we propose the following Halfway loss for output k:\nJk = 1\nm m\u2211 i=1 yki ( \u03b3ki \u2212 1 2 )2 , (8)\nwhere\nyki =\n{ 1 yki = 1\n1 K\u22121 yki = \u22121.\nThe symbols \u03b3ki and yki represent the normalised margin and the target label of the k th output for input i. The multi-class weighting factor yki can be derived from the label as follows:\nyi = (K \u2212 2)yi +K\n2K \u2212 2 .\nNote that the two-class Halfway loss defined in Equation 7 is analogous to K = 2 case of the multi-class Halfway loss defined in equation 8."}, {"heading": "5 Empirical evaluation of Halfway loss", "text": "The three datasets that we will use for evaluation of the Halfway loss are the MNIST (LeCun et al., 1998), smallNORB (LeCun et al., 2004) and CIFAR-10 (Krizhevsky, 2009) datasets. Each set\ncomes pre-divided into a training (60000 MNIST, 24300 smallNORB, 50000 CIFAR-10) and testing (10000 MNIST, 243000 smallNORB, 10000 CIFAR-10) set of samples. For our evaluation, we have split each training part of the dataset into a set of images used to train the models (55000 MNIST, 19440 smallNORB, 45000 CIFAR-10), and a validation set (5000 MNIST, 4860 smallNORB, 5000 CIFAR-10) used to determine the best manifestation of the model. The choice of the validation sample for MNIST and CIFAR-10 was made randomly, whereas for the smallNORB dataset it was all the images of a specific instance of each of the class of toys, with a random choice of which instance was used for validation. For the smallNORB dataset only the left camera images were used.\nTraining was done with mini-batch optimisation, with a 500 sample batch-size for MNIST and CIFAR-10, and a 405 sample batch-size for smallNORB. The normalisation of the margin was carried out independently in each batch, which makes the Halfway loss somewhat similar to the batch normalisation transform proposed by Ioffe & Szegedy (2015). However, whereas the objective of batch normalisation requires computing the mean and variance across the batch sample in order to normalise its first and second order statistics, our normalisation of the margin only divides the data by the maximum absolute value of the output. Also, the aim of producing unity variance of the batch sample in batch normalisation, regardless of the label, is counter-objective to ours, which is to minimise the variance around the margin of different labels. Nevertheless, it is quite possible that Halfway loss minimisation with min-batch training shares some of the effects of reducing the internal covariate shift of batch normalisation in the output layer of the network.\nAll the evaluations were done using TensorFlow (Abadi et al., 2015), which provides automatic computation of the gradients required for optimisation. In our implementation there was no constraint placed on w to make it a unit vector, since margin normalisation, as shown in Equation 6, has the same effect making individual normalisation of w irrelevant.\nThree different models were used for classification of each dataset. The small fully connected neural network (FC-128-32) consisted of 2-hidden layers with 128 and 32 neurons in the consecutive layers. The big fully connected neural network (FC-500-500-2000) consisted of 3-hidden layers with 500, 500 and 2000 neurons in the consecutive layers. Finally a CNN model was used for classification in each dataset. For the MNIST and smallNORB dataset a CNN consisted of two convolutional layers. The first convolutional layer had 32 filters of 5x5 size and stride of 1 followed by a 2x2 input max-pooling with stride 2; the second convolutional layer had 64 filters of 5x5 size and stride 1 followed by a 2x2 input max-pooling with stride of 2; this was followed with a 512-neuron fully connected layer and 0.5 probability dropout during training. For the CIFAR-10 model the CNN consisted of two convolutional layers also. The first convolutional layer had 54 filters of 5x5 size and stride 1 followed by a 3x3 input max-pooling with stride of 2 and local response normalisation; the second convolutional layer consisted of 64 filters of 5x5 size and stride of 1 followed by local response normalisation and a 3x3 input max-pool layer with stride of 2; this was followed by two fully connected layers of 384 and 192 neurons. The activation function used in all networks was ReLU.\nThe optimisation for all tests was done using Tensorflow\u2019s implementation of the Adam optimiser (Kingma & Ba, 2014). The learning rate for all runs was set to 0.001 and the maximum number of training epochs, with one epoch training over the entire set of mini-batch blocks, was set to 2000. There was no regularisation in any of the models, as the purpose of this evaluation was to compare the sole effect of the compared loss functions. Hence, rather than going for the state of the art results, we are aiming for a comparative study of the effect of minimisation of margin variance as compared to Softmax with Cross-Entropy loss function training. The y \u2208 {0, 1}K coding was used for target labels during Softmax training and y \u2208 {\u22121, 1}K coding was used for target labels during Halway loss training.\nTable 1 reports the average test error and variance over 10 trials with the same initial values of weights and biases for a given trial between the Softmax and Halfway optimisation. Test error was measured by taking the output of with the maximum value to indicate the index of the identified class. The reported test error comes from the model state at the training epoch that produced the lowest validation error. The Halfway loss consistently leads to lower test error, sometimes by quite a significant amount.\nFigure 4 shows the distribution of the values across a single output, w\u03c6(x) + b, from the entire train set on the smallNORB-trained CNN using Softmax and Halfway optimisation. Halfway trained model does indeed produce output with a smaller variance around the margins while maintaining the values in a similar range to the Softmax trained model.\nIt is also interesting to examine the difference between the validation and test error. In some way, it gives an idea of the generalisation error. Validation error stands for the empirical risk, since it was used during training to choose the best model (deemed to be the one that gives minimum validation error). The test error, although still just an average, simulates the true risk, since it has not been seen by the learner during the training. Figure 5 shows a bar plot comparing the generalisation error between Softmax and Halfway training for tested datasets and architectures. The length of the bars in the plot corresponds to the generalisation error; top and the bottom positions of each bar demarks the\ntest and validation error respectively. The desired characteristic is for the top of the bar to be as lows as possible (low test error) and the bar to be as short as possible (validation error being close to the test error). Although not in every single case, Halfway looks to outperform Softmax in a combination of lower test error and/or smaller generalisation error."}, {"heading": "6 Discussion", "text": "When it comes to the bigger models, FC-500-500-2000 and CNN, those trained with the Halfway loss consistently outperform those trained with the Softmax Cross-Entropy in terms of the mean and also the standard deviation of the test error over multiple trials of different initial conditions. At the same time, for the small network, FC-128-32, Halfway training performs consistently worse (although, aside from smallNORB, it is only a bit worse). An intuitive explanation for this is that Halfway loss is more constrained than Softmax in terms of what it demands of distribution of points in \u03c6(x). While these constraints are demonstrably favourable to generalisation in representationally rich models, they might be getting in the way of class separation objective in representationally limited models. In other words, Halfway loss may provide a better objective for classification, but an objective that is a bit harder to attain in models with limited transformation dynamics.\nWe also found that the cost-sensitive learning aspect of the Halfway loss was critical for its good performance. This is most interesting given that previously work by Zhou & Liu (2006) found costsensitive learning not to be useful for multi-class one-against-rest optimisation, albeit for different loss functions. The motivation for class weighting in Halfway loss is to ensure that the optimisation does not drive the variance around the negative margin to a smaller value than the variance around the positive margin. We take the need for class balancing in Halfway training as a confirmation of our assumption that an even reduction of variance around the positive and negative margin is critical for good generalisation.\nThe MSE-like nature of the Halfway loss has a disadvantage in that it presumes a normal distribution of the data around the margin. While it does succeed in minimising the margin variance, it also produces a symmetric distribution of data around the margin (as Figure 4b shows). It is possible that minimisation of variance while producing distributions skewed away from the margin might improve the generalisation even further."}, {"heading": "7 Conclusion", "text": "We have taken the ideas around margin distribution from boosting theory and applied them to deep learning. The driving hypothesis of our work was that maximisation of the margin alone is not a useful objective for architectures where the feature extraction function changes during optimisation. However, minimisation of margin variance might be. We have provided some theoretical evidence that maximisation of margin in a neural network might be trivial. This we followed with empirical investigation of the importance of margin variance.\nWe proposed the Halfway loss function as the training objective that minimises the normalised margin variance . It\u2019s an MSE-like training objective with cost-sensitive learning that aims to reduce variance around halfway point between 0 and maximum margin value (as calculated from the training dataset). Our empirical evaluation on known image datasets demonstrates superiority of Halfway over the Softmax Cross-Entropy loss in representationally rich fully connected, as well as convolutional, neural networks. We also confirmed that in the balance of things, Halfway loss does seem to provide better generalisation - in terms of producing a validation test score that is a better estimation of the test score, while ensuring better test data performance.\nFor the future work, given the empirical evidence this work presents, we believe it would be worthwhile to find theoretical proofs that establish the significance of margin variance as well as the irrelevance of the margin mean for generalisation in deep architectures. On the empirical side, it might be also possible to form better loss functions which minimise margin variance but do not enforce symmetric distribution of the points around the margin, and thus possibly lead to even better generalisation."}, {"heading": "Acknowledgements", "text": "We gratefully acknowledge the support of NVIDIA Corporation with the donation of the Titan X GPU used for this research."}], "references": [{"title": "TensorFlow: Large-scale machine learning on heterogeneous systems", "author": ["Kunal", "Tucker", "Paul", "Vanhoucke", "Vincent", "Vasudevan", "Vijay", "Vi\u00e9gas", "Fernanda", "Vinyals", "Oriol", "Warden", "Pete", "Wattenberg", "Martin", "Wicke", "Yu", "Yuan", "Zheng", "Xiaoqiang"], "venue": null, "citeRegEx": "Kunal et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kunal et al\\.", "year": 2015}, {"title": "Prediction games and arcing algorithms", "author": ["Breiman", "Leo"], "venue": "Neural Computation,", "citeRegEx": "Breiman and Leo.,? \\Q1999\\E", "shortCiteRegEx": "Breiman and Leo.", "year": 1999}, {"title": "Support vector networks", "author": ["Cortes", "Corinna", "Vapnik", "Vladimir N"], "venue": "Machine Learning,", "citeRegEx": "Cortes et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Cortes et al\\.", "year": 1995}, {"title": "An Introduction to Support Vector Machines : and other Kernel-based Learning Methods", "author": ["Cristianini", "Nello", "Shawe-Taylor", "John"], "venue": null, "citeRegEx": "Cristianini et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Cristianini et al\\.", "year": 2000}, {"title": "The foundations of cost-sensitive learning", "author": ["Elkan", "Charles"], "venue": "In Proceedings of the 17th International Joint Conference on Artificial Intelligence, volume 2 of IJCAI\u201901,", "citeRegEx": "Elkan and Charles.,? \\Q2001\\E", "shortCiteRegEx": "Elkan and Charles.", "year": 2001}, {"title": "On the doubt about margin explanation of boosting", "author": ["Gao", "Wei", "Zhou", "Zhi-Hua"], "venue": "Artificial Intelligence,", "citeRegEx": "Gao et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Gao et al\\.", "year": 2013}, {"title": "Deep sparse rectifier neural networks", "author": ["Glorot", "Xavier", "Bordes", "Antoine", "Bengio", "Yoshua"], "venue": "Proceedings of the Fourteenth International Conference on Artificial Intelligence and Statistics (AISTATS-11),", "citeRegEx": "Glorot et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2011}, {"title": "Permitted and forbidden sets in symmetric threshold-linear networks", "author": ["Hahnloser", "Richard H. R", "Seung", "H. Sebastian", "Slotine", "Jean-Jacques"], "venue": "Neural Computation,", "citeRegEx": "Hahnloser et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Hahnloser et al\\.", "year": 2003}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate", "author": ["Ioffe", "Sergey", "Szegedy", "Christian"], "venue": "shift. CoRR,", "citeRegEx": "Ioffe et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ioffe et al\\.", "year": 2015}, {"title": "Binary classification by svm based tree type neural networks", "author": ["Jayadeva", "Deb", "Alok Kanti", "Chandra", "Suresh"], "venue": "In Neural Networks,", "citeRegEx": "Jayadeva et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Jayadeva et al\\.", "year": 2002}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Diederik P", "Ba", "Jimmy"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Learning multiple layers of features from tiny images", "author": ["Krizhevsky", "Alex"], "venue": "Technical report,", "citeRegEx": "Krizhevsky and Alex.,? \\Q2009\\E", "shortCiteRegEx": "Krizhevsky and Alex.", "year": 2009}, {"title": "Learning the kernel matrix with semidefinite programming", "author": ["Lanckriet", "Gert R. G", "Cristianini", "Nello", "Bartlett", "Peter", "Ghaoui", "Laurent El", "Jordan", "Michael I"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Lanckriet et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Lanckriet et al\\.", "year": 2004}, {"title": "Gradient-based learning applied to document recognition", "author": ["LeCun", "Yann", "Bottou", "L\u00e9on", "Bengio", "Yoshua", "Haffner", "Patrick"], "venue": "Proceedings of the IEEE,", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Learning methods for generic object recognition with invariance to pose and lighting", "author": ["LeCun", "Yann", "Huang", "Fu Jie", "Bottou", "L\u00e9on"], "venue": "Proceedings of IEEE Computer Society Conference on Computer Vision and Pattern Recognition", "citeRegEx": "LeCun et al\\.,? \\Q2004\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 2004}, {"title": "Novel maximum-margin training algorithms for supervised neural networks", "author": ["Ludwig", "Oswaldo", "Nunes", "Urbano"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "Ludwig et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Ludwig et al\\.", "year": 2010}, {"title": "Maximizing margins of multilayer neural networks", "author": ["Nishikawa", "Takahiro", "Abe", "Shigeo"], "venue": "In Neural Information Processing,", "citeRegEx": "Nishikawa et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Nishikawa et al\\.", "year": 2002}, {"title": "How boosting the margin can also boost classifier complexity", "author": ["Reyzin", "Lev", "Schapire", "Robert E"], "venue": "In Proceedings of the 23rd International Conference on Machine Learning,", "citeRegEx": "Reyzin et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Reyzin et al\\.", "year": 2006}, {"title": "The strength of weak learnability", "author": ["Schapire", "Robert E"], "venue": "Machine Learning,", "citeRegEx": "Schapire and E.,? \\Q1990\\E", "shortCiteRegEx": "Schapire and E.", "year": 1990}, {"title": "Boosting the margin: a new explanation for the effectiveness of voting methods", "author": ["Schapire", "Robert E", "Freund", "Yoav", "Bartlett", "Peter", "Lee", "Wee Sun"], "venue": "The Annals of Statistics,", "citeRegEx": "Schapire et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Schapire et al\\.", "year": 1998}, {"title": "The Nature of Statistical Learning", "author": ["Vapnik", "Vladimir N"], "venue": null, "citeRegEx": "Vapnik and N.,? \\Q1995\\E", "shortCiteRegEx": "Vapnik and N.", "year": 1995}, {"title": "A refined margin analysis for boosting algorithms via equilibrium margin", "author": ["Wang", "Liwei", "Sugiyama", "Masashi", "Jing", "Zhaoxiang", "Yang", "Cheng", "Zhou", "Zhi-Hua", "Feng", "Jufu"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "Wang et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2011}, {"title": "Carve-a constructive algorithm for real-valued examples", "author": ["Young", "Steven", "Downs", "Tom"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "Young et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Young et al\\.", "year": 1998}, {"title": "Large margin distribution machine", "author": ["Zhang", "Teng", "Zhou", "Zhi-Hua"], "venue": "CoRR, abs/1311.0989,", "citeRegEx": "Zhang et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2013}, {"title": "Optimal margin distribution machine", "author": ["Zhang", "Teng", "Zhou", "Zhi-Hua"], "venue": "CoRR, abs/1604.03348,", "citeRegEx": "Zhang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhang et al\\.", "year": 2016}, {"title": "On multi-class cost-sensitive learning", "author": ["Zhou", "Zhi-Hua", "Liu", "Xu-Ying"], "venue": "In Proceedings of the 21st National Conference on Artificial Intelligence,", "citeRegEx": "Zhou et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Zhou et al\\.", "year": 2006}], "referenceMentions": [{"referenceID": 19, "context": "It has been shown that their resistance to overfitting is due to the effect these methods have on the distribution of points around the margin (Schapire et al., 1998; Reyzin & Schapire, 2006; Wang et al., 2011).", "startOffset": 143, "endOffset": 210}, {"referenceID": 21, "context": "It has been shown that their resistance to overfitting is due to the effect these methods have on the distribution of points around the margin (Schapire et al., 1998; Reyzin & Schapire, 2006; Wang et al., 2011).", "startOffset": 143, "endOffset": 210}, {"referenceID": 19, "context": "It has been shown that their resistance to overfitting is due to the effect these methods have on the distribution of points around the margin (Schapire et al., 1998; Reyzin & Schapire, 2006; Wang et al., 2011). Gao & Zhou (2013) theoretically showed that AdaBoost is resistant to overfitting because it implicitly optimises the classification margin distribution by maximising average margin and minimising margin variance simultaneously.", "startOffset": 144, "endOffset": 230}, {"referenceID": 19, "context": "It has been shown that their resistance to overfitting is due to the effect these methods have on the distribution of points around the margin (Schapire et al., 1998; Reyzin & Schapire, 2006; Wang et al., 2011). Gao & Zhou (2013) theoretically showed that AdaBoost is resistant to overfitting because it implicitly optimises the classification margin distribution by maximising average margin and minimising margin variance simultaneously. In particular, they emphasised that the minimisation of margin variance is very important, which was ignored by most previous studies on learning algorithm design. Zhang & Zhou (2013) proposed the LDM which maximises average margin and minimises margin variance simultaneously, and achieved consistently better performance than SVMs; later, Zhang & Zhou (2016) proposed Optimal Margin Machine (ODM) which demonstrates even better performance.", "startOffset": 144, "endOffset": 624}, {"referenceID": 19, "context": "It has been shown that their resistance to overfitting is due to the effect these methods have on the distribution of points around the margin (Schapire et al., 1998; Reyzin & Schapire, 2006; Wang et al., 2011). Gao & Zhou (2013) theoretically showed that AdaBoost is resistant to overfitting because it implicitly optimises the classification margin distribution by maximising average margin and minimising margin variance simultaneously. In particular, they emphasised that the minimisation of margin variance is very important, which was ignored by most previous studies on learning algorithm design. Zhang & Zhou (2013) proposed the LDM which maximises average margin and minimises margin variance simultaneously, and achieved consistently better performance than SVMs; later, Zhang & Zhou (2016) proposed Optimal Margin Machine (ODM) which demonstrates even better performance.", "startOffset": 144, "endOffset": 801}, {"referenceID": 7, "context": "We can test it on fully connected, as well as convolutional, neural networks with Rectifier Linear Unit (ReLU) activation function (Hahnloser et al., 2003; Glorot et al., 2011) and compare its performance to Softmax Central-Entropy loss on multi-class image recognition datasets.", "startOffset": 131, "endOffset": 176}, {"referenceID": 6, "context": "We can test it on fully connected, as well as convolutional, neural networks with Rectifier Linear Unit (ReLU) activation function (Hahnloser et al., 2003; Glorot et al., 2011) and compare its performance to Softmax Central-Entropy loss on multi-class image recognition datasets.", "startOffset": 131, "endOffset": 176}, {"referenceID": 7, "context": "Jayadeva et al. (2002) combined it with a decision tree-based training and Nishikawa & Abe (2002) incorporated it into the CARVE algorithm (Young & Downs, 1998).", "startOffset": 0, "endOffset": 23}, {"referenceID": 7, "context": "Jayadeva et al. (2002) combined it with a decision tree-based training and Nishikawa & Abe (2002) incorporated it into the CARVE algorithm (Young & Downs, 1998).", "startOffset": 0, "endOffset": 98}, {"referenceID": 12, "context": "Lanckriet et al. (2004) demonstrated that with some constraints and restrictions on \u03c6(x), maximisation of the margin still provides an upper bound on probability of misclassification.", "startOffset": 0, "endOffset": 24}, {"referenceID": 14, "context": "Figure 1 shows how the test error relates to the maximum geometric and mean margin values over a range of different \u03b4\u2019s in \u03c6(x) for a two-class subset problem from the smallNORB dataset (LeCun et al., 2004).", "startOffset": 186, "endOffset": 206}, {"referenceID": 12, "context": "However, given that current proofs for existence of the bound require certain constraints on the structure of \u03c6(x) (Lanckriet et al., 2004), the result of our simple experiment prompts us to hypothesise that in general it is the relative value of the margin within given \u03c6(x) and not its absolute value across different realisations of \u03c6(x) that needs to be maximised in order to improve generalisation.", "startOffset": 115, "endOffset": 139}, {"referenceID": 13, "context": "The three datasets that we will use for evaluation of the Halfway loss are the MNIST (LeCun et al., 1998), smallNORB (LeCun et al.", "startOffset": 85, "endOffset": 105}, {"referenceID": 14, "context": ", 1998), smallNORB (LeCun et al., 2004) and CIFAR-10 (Krizhevsky, 2009) datasets.", "startOffset": 19, "endOffset": 39}], "year": 2017, "abstractText": "Despite being so vital to success of Support Vector Machines, the principle of separating margin maximisation is not used in deep learning. We show that minimisation of margin variance and not maximisation of the margin is more suitable for improving generalisation in deep architectures. We propose the Halfway loss function that minimises the Normalised Margin Variance (NMV) at the output of a deep learning models and evaluate its performance against the Softmax Cross-Entropy loss on the MNIST, smallNORB and CIFAR-10 datasets.", "creator": "LaTeX with hyperref package"}}}