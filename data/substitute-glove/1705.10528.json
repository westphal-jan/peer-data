{"id": "1705.10528", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-May-2017", "title": "Constrained Policy Optimization", "abstract": "For so enabled of undertake learning still well any but provides put specify have a reward context same constraints, simple although what to layout behavior left the rewards function. For perhaps, available others impossible functions even these hundred humans how maintain monitoring constraints. Recent combined though plan search spatial (Mnih ^ qaeda. , 2016, Schulman es hussein. , 2003, Lillicrap et baghdad. , qualify, Levine et al. , 2016) been convert to capabilities in falls - dimensional support, hard way means need next constrained setting.", "histories": [["v1", "Tue, 30 May 2017 10:07:31 GMT  (916kb,D)", "http://arxiv.org/abs/1705.10528v1", "Accepted to ICML 2017"]], "COMMENTS": "Accepted to ICML 2017", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["joshua achiam", "david held", "aviv tamar", "pieter abbeel"], "accepted": true, "id": "1705.10528"}, "pdf": {"name": "1705.10528.pdf", "metadata": {"source": "META", "title": "Constrained Policy Optimization", "authors": ["Joshua Achiam", "David Held", "Aviv Tamar", "Pieter Abbeel"], "emails": ["<jachiam@berkeley.edu>."], "sections": [{"heading": null, "text": "We propose Constrained Policy Optimization (CPO), the first general-purpose policy search algorithm for constrained reinforcement learning with guarantees for near-constraint satisfaction at each iteration. Our method allows us to train neural network policies for high-dimensional control while making guarantees about policy behavior all throughout training. Our guarantees are based on a new theoretical result, which is of independent interest: we prove a bound relating the expected returns of two policies to an average divergence between them. We demonstrate the effectiveness of our approach on simulated robot locomotion tasks where the agent must satisfy constraints motivated by safety."}, {"heading": "1. Introduction", "text": "Recently, deep reinforcement learning has enabled neural network policies to achieve state-of-the-art performance on many high-dimensional control tasks, including Atari games (using pixels as inputs) (Mnih et al., 2015; 2016), robot locomotion and manipulation (Schulman et al., 2015; Levine et al., 2016; Lillicrap et al., 2016), and even Go at the human grandmaster level (Silver et al., 2016).\n1UC Berkeley 2OpenAI. Correspondence to: Joshua Achiam <jachiam@berkeley.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, 2017. JMLR: W&CP. Copyright 2017 by the author(s).\nIn reinforcement learning (RL), agents learn to act by trial and error, gradually improving their performance at the task as learning progresses. Recent work in deep RL assumes that agents are free to explore any behavior during learning, so long as it leads to performance improvement. In many realistic domains, however, it may be unacceptable to give an agent complete freedom. Consider, for example, an industrial robot arm learning to assemble a new product in a factory. Some behaviors could cause it to damage itself or the plant around it\u2014or worse, take actions that are harmful to people working nearby. In domains like this, safe exploration for RL agents is important (Moldovan & Abbeel, 2012; Amodei et al., 2016). A natural way to incorporate safety is via constraints.\nA standard and well-studied formulation for reinforcement learning with constraints is the constrained Markov Decision Process (CMDP) framework (Altman, 1999), where agents must satisfy constraints on expectations of auxilliary costs. Although optimal policies for finite CMDPs with known models can be obtained by linear programming, methods for high-dimensional control are lacking.\nCurrently, policy search algorithms enjoy state-of-theart performance on high-dimensional control tasks (Mnih et al., 2016; Duan et al., 2016). Heuristic algorithms for policy search in CMDPs have been proposed (Uchibe & Doya, 2007), and approaches based on primal-dual methods can be shown to converge to constraint-satisfying policies (Chow et al., 2015), but there is currently no approach for policy search in continuous CMDPs that guarantees every policy during learning will satisfy constraints. In this work, we propose the first such algorithm, allowing applications to constrained deep RL.\nDriving our approach is a new theoretical result that bounds the difference between the rewards or costs of two different policies. This result, which is of independent interest, tightens known bounds for policy search using trust regions (Kakade & Langford, 2002; Pirotta et al., 2013; Schulman et al., 2015), and provides a tighter connection between the theory and practice of policy search for deep RL. Here, we use this result to derive a policy improvement step that guarantees both an increase in reward and satisfaction of constraints on other costs. This step forms the basis for our algorithm, Constrained Policy Optimization (CPO), which\nar X\niv :1\n70 5.\n10 52\n8v 1\n[ cs\n.L G\n] 3\n0 M\nay 2\n01 7\ncomputes an approximation to the theoretically-justified update.\nIn our experiments, we show that CPO can train neural network policies with thousands of parameters on highdimensional simulated robot locomotion tasks to maximize rewards while successfully enforcing constraints."}, {"heading": "2. Related Work", "text": "Safety has long been a topic of interest in RL research, and a comprehensive overview of safety in RL was given by (Garc\u0131\u0301a & Ferna\u0301ndez, 2015).\nSafe policy search methods have been proposed in prior work. Uchibe and Doya (2007) gave a policy gradient algorithm that uses gradient projection to enforce active constraints, but this approach suffers from an inability to prevent a policy from becoming unsafe in the first place. Bou Ammar et al. (2015) propose a theoretically-motivated policy gradient method for lifelong learning with safety constraints, but their method involves an expensive inner loop optimization of a semi-definite program, making it unsuited for the deep RL setting. Their method also assumes that safety constraints are linear in policy parameters, which is limiting. Chow et al. (2015) propose a primal-dual subgradient method for risk-constrained reinforcement learning which takes policy gradient steps on an objective that trades off return with risk, while simultaneously learning the trade-off coefficients (dual variables).\nSome approaches specifically focus on application to the deep RL setting. Held et al. (2017) study the problem for robotic manipulation, but the assumptions they make restrict the applicability of their methods. Lipton et al. (2017) use an \u2018intrinsic fear\u2019 heuristic, as opposed to constraints, to motivate agents to avoid rare but catastrophic events. Shalev-Shwartz et al. (2016) avoid the problem of enforcing constraints on parametrized policies by decomposing \u2018desires\u2019 from trajectory planning; the neural network policy learns desires for behavior, while the trajectory planning algorithm (which is not learned) selects final behavior and enforces safety constraints.\nIn contrast to prior work, our method is the first policy search algorithm for CMDPs that both 1) guarantees constraint satisfaction throughout training, and 2) works for arbitrary policy classes (including neural networks)."}, {"heading": "3. Preliminaries", "text": "A Markov decision process (MDP) is a tuple, (S,A,R, P, \u00b5), where S is the set of states, A is the set of actions, R : S \u00d7A\u00d7 S \u2192 R is the reward function, P : S\u00d7A\u00d7S \u2192 [0, 1] is the transition probability function (where P (s\u2032|s, a) is the probability of transitioning to state\ns\u2032 given that the previous state was s and the agent took action a in s), and \u00b5 : S \u2192 [0, 1] is the starting state distribution. A stationary policy \u03c0 : S \u2192 P(A) is a map from states to probability distributions over actions, with \u03c0(a|s) denoting the probability of selecting action a in state s. We denote the set of all stationary policies by \u03a0.\nIn reinforcement learning, we aim to select a policy \u03c0 which maximizes a performance measure, J(\u03c0), which is typically taken to be the infinite horizon discounted total return, J(\u03c0) .= E \u03c4\u223c\u03c0 [ \u2211\u221e t=0 \u03b3 tR(st, at, st+1)]. Here \u03b3 \u2208 [0, 1) is the discount factor, \u03c4 denotes a trajectory (\u03c4 = (s0, a0, s1, ...)), and \u03c4 \u223c \u03c0 is shorthand for indicating that the distribution over trajectories depends on \u03c0: s0 \u223c \u00b5, at \u223c \u03c0(\u00b7|st), st+1 \u223c P (\u00b7|st, at).\nLetting R(\u03c4) denote the discounted return of a trajectory, we express the on-policy value function as V \u03c0(s) .= E\u03c4\u223c\u03c0[R(\u03c4)|s0 = s] and the on-policy action-value function as Q\u03c0(s, a) .= E\u03c4\u223c\u03c0[R(\u03c4)|s0 = s, a0 = a]. The advantage function is A\u03c0(s, a) .= Q\u03c0(s, a)\u2212 V \u03c0(s).\nAlso of interest is the discounted future state distribution, d\u03c0 , defined by d\u03c0(s) = (1\u2212\u03b3) \u2211\u221e t=0 \u03b3\ntP (st = s|\u03c0). It allows us to compactly express the difference in performance between two policies \u03c0\u2032, \u03c0 as\nJ(\u03c0\u2032)\u2212 J(\u03c0) = 1 1\u2212 \u03b3 E s\u223cd\u03c0 \u2032\na\u223c\u03c0\u2032\n[A\u03c0(s, a)] , (1)\nwhere by a \u223c \u03c0\u2032, we mean a \u223c \u03c0\u2032(\u00b7|s), with explicit notation dropped to reduce clutter. For proof of (1), see (Kakade & Langford, 2002) or Section 10 in the supplementary material."}, {"heading": "4. Constrained Markov Decision Processes", "text": "A constrained Markov decision process (CMDP) is an MDP augmented with constraints that restrict the set of allowable policies for that MDP. Specifically, we augment the MDP with a set C of auxiliary cost functions, C1, ..., Cm (with each one a function Ci : S \u00d7 A \u00d7 S \u2192 R mapping transition tuples to costs, like the usual reward), and limits d1, ..., dm. Let JCi(\u03c0) denote the expected discounted return of policy \u03c0 with respect to cost function Ci: JCi(\u03c0) = E \u03c4\u223c\u03c0 [ \u2211\u221e t=0 \u03b3\ntCi(st, at, st+1)]. The set of feasible stationary policies for a CMDP is then\n\u03a0C . = {\u03c0 \u2208 \u03a0 : \u2200i, JCi(\u03c0) \u2264 di} ,\nand the reinforcement learning problem in a CMDP is\n\u03c0\u2217 = arg max \u03c0\u2208\u03a0C J(\u03c0).\nThe choice of optimizing only over stationary policies is justified: it has been shown that the set of all optimal policies for a CMDP includes stationary policies, under mild\ntechnical conditions. For a thorough review of CMDPs and CMDP theory, we refer the reader to (Altman, 1999).\nWe refer to JCi as a constraint return, or Ci-return for short. Lastly, we define on-policy value functions, actionvalue functions, and advantage functions for the auxiliary costs in analogy to V \u03c0 , Q\u03c0 , and A\u03c0 , with Ci replacing R: respectively, we denote these by V \u03c0Ci , Q \u03c0 Ci , and A\u03c0Ci ."}, {"heading": "5. Constrained Policy Optimization", "text": "For large or continuous MDPs, solving for the exact optimal policy is intractable due to the curse of dimensionality (Sutton & Barto, 1998). Policy search algorithms approach this problem by searching for the optimal policy within a set \u03a0\u03b8 \u2286 \u03a0 of parametrized policies with parameters \u03b8 (for example, neural networks of a fixed architecture). In local policy search (Peters & Schaal, 2008), the policy is iteratively updated by maximizing J(\u03c0) over a local neighborhood of the most recent iterate \u03c0k:\n\u03c0k+1 = arg max \u03c0\u2208\u03a0\u03b8 J(\u03c0)\ns.t. D(\u03c0, \u03c0k) \u2264 \u03b4, (2)\nwhere D is some distance measure, and \u03b4 > 0 is a step size. When the objective is estimated by linearizing around \u03c0k as J(\u03c0k) + gT (\u03b8 \u2212 \u03b8k), g is the policy gradient, and the standard policy gradient update is obtained by choosing D(\u03c0, \u03c0k) = \u2016\u03b8 \u2212 \u03b8k\u20162 (Schulman et al., 2015).\nIn local policy search for CMDPs, we additionally require policy iterates to be feasible for the CMDP, so instead of optimizing over \u03a0\u03b8, we optimize over \u03a0\u03b8 \u2229\u03a0C :\n\u03c0k+1 = arg max \u03c0\u2208\u03a0\u03b8 J(\u03c0)\ns.t. JCi(\u03c0) \u2264 di i = 1, ...,m D(\u03c0, \u03c0k) \u2264 \u03b4.\n(3)\nThis update is difficult to implement in practice because it requires evaluation of the constraint functions to determine whether a proposed point \u03c0 is feasible. When using sampling to compute policy updates, as is typically done in high-dimensional control (Duan et al., 2016), this requires off-policy evaluation, which is known to be challenging (Jiang & Li, 2015). In this work, we take a different approach, motivated by recent methods for trust region optimization (Schulman et al., 2015).\nWe develop a principled approximation to (3) with a particular choice of D, where we replace the objective and constraints with surrogate functions. The surrogates we choose are easy to estimate from samples collected on \u03c0k, and are good local approximations for the objective and constraints. Our theoretical analysis shows that for our choices of surrogates, we can bound our update\u2019s worst-\ncase performance and worst-case constraint violation with values that depend on a hyperparameter of the algorithm.\nTo prove the performance guarantees associated with our surrogates, we first prove new bounds on the difference in returns (or constraint returns) between two arbitrary stochastic policies in terms of an average divergence between them. We then show how our bounds permit a new analysis of trust region methods in general: specifically, we prove a worst-case performance degradation at each update. We conclude by motivating, presenting, and proving gurantees on our algorithm, Constrained Policy Optimization (CPO), a trust region method for CMDPs."}, {"heading": "5.1. Policy Performance Bounds", "text": "In this section, we present the theoretical foundation for our approach\u2014a new bound on the difference in returns between two arbitrary policies. This result, which is of independent interest, extends the works of (Kakade & Langford, 2002), (Pirotta et al., 2013), and (Schulman et al., 2015), providing tighter bounds. As we show later, it also relates the theoretical bounds for trust region policy improvement with the actual trust region algorithms that have been demonstrated to be successful in practice (Duan et al., 2016). In the context of constrained policy search, we later use our results to propose policy updates that both improve the expected return and satisfy constraints.\nThe following theorem connects the difference in returns (or constraint returns) between two arbitrary policies to an average divergence between them.\nTheorem 1. For any function f : S \u2192 R and any policies \u03c0\u2032 and \u03c0, define \u03b4f (s, a, s\u2032) . = R(s, a, s\u2032) + \u03b3f(s\u2032)\u2212 f(s),\n\u03c0 \u2032 f . = max s |Ea\u223c\u03c0\u2032,s\u2032\u223cP [\u03b4f (s, a, s\u2032)]| ,\nL\u03c0,f (\u03c0 \u2032) . = E s\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP\n[( \u03c0\u2032(a|s) \u03c0(a|s) \u2212 1 ) \u03b4f (s, a, s \u2032) ] , and\nD\u00b1\u03c0,f (\u03c0 \u2032) . = L\u03c0,f (\u03c0\n\u2032)\n1\u2212 \u03b3 \u00b1\n2\u03b3 \u03c0 \u2032\nf\n(1\u2212 \u03b3)2 E s\u223cd\u03c0 [DTV (\u03c0\n\u2032||\u03c0)[s]] ,\nwhere DTV (\u03c0\u2032||\u03c0)[s] = (1/2) \u2211 a |\u03c0\u2032(a|s)\u2212 \u03c0(a|s)| is the total variational divergence between action distributions at s. The following bounds hold:\nD+\u03c0,f (\u03c0 \u2032) \u2265 J(\u03c0\u2032)\u2212 J(\u03c0) \u2265 D\u2212\u03c0,f (\u03c0 \u2032). (4)\nFurthermore, the bounds are tight (when \u03c0\u2032 = \u03c0, all three expressions are identically zero).\nBefore proceeding, we connect this result to prior work. By bounding the expectation Es\u223cd\u03c0 [DTV (\u03c0\u2032||\u03c0)[s]] with maxsDTV (\u03c0 \u2032||\u03c0)[s], picking f = V \u03c0 , and bounding \u03c0\u2032V \u03c0\nto get a second factor of maxsDTV (\u03c0\u2032||\u03c0)[s], we recover (up to assumption-dependent factors) the bounds given by Pirotta et al. (2013) as Corollary 3.6, and by Schulman et al. (2015) as Theorem 1a.\nThe choice of f = V \u03c0 allows a useful form of the lower bound, so we give it as a corollary. Corollary 1. For any policies \u03c0\u2032, \u03c0, with \u03c0 \u2032 . = maxs |Ea\u223c\u03c0\u2032 [A\u03c0(s, a)]|, the following bound holds:\nJ(\u03c0\u2032)\u2212 J(\u03c0)\n\u2265 1 1\u2212 \u03b3\nE s\u223cd\u03c0 a\u223c\u03c0\u2032\n[ A\u03c0(s, a)\u2212 2\u03b3 \u03c0\u2032\n1\u2212 \u03b3 DTV (\u03c0\n\u2032||\u03c0)[s] ] . (5)\nThe bound (5) should be compared with equation (1). The term (1 \u2212 \u03b3)\u22121Es\u223cd\u03c0,a\u223c\u03c0\u2032 [A\u03c0(s, a)] in (5) is an approximation to J(\u03c0\u2032)\u2212 J(\u03c0), using the state distribution d\u03c0 instead of d\u03c0 \u2032 , which is known to equal J(\u03c0\u2032)\u2212 J(\u03c0) to first order in the parameters of \u03c0\u2032 on a neighborhood around \u03c0 (Kakade & Langford, 2002). The bound can therefore be viewed as describing the worst-case approximation error, and it justifies using the approximation as a surrogate for J(\u03c0\u2032)\u2212 J(\u03c0).\nEquivalent expressions for the auxiliary costs, based on the upper bound, also follow immediately; we will later use them to make guarantees for the safety of CPO. Corollary 2. For any policies \u03c0\u2032, \u03c0, and any cost function Ci, with \u03c0 \u2032\nCi . = maxs |Ea\u223c\u03c0\u2032 [A\u03c0Ci(s, a)]|, the follow-\ning bound holds:\nJCi(\u03c0 \u2032)\u2212 JCi(\u03c0)\n\u2264 1 1\u2212 \u03b3\nE s\u223cd\u03c0 a\u223c\u03c0\u2032\n[ A\u03c0Ci(s, a) + 2\u03b3 \u03c0 \u2032 Ci\n1\u2212 \u03b3 DTV (\u03c0\n\u2032||\u03c0)[s] ] .\n(6)\nThe bounds we have given so far are in terms of the TV-divergence between policies, but trust region methods constrain the KL-divergence between policies, so bounds that connect performance to the KL-divergence are desirable. We make the connection through Pinsker\u2019s inequality (Csiszar & Ko\u0308rner, 1981): for arbitrary distributions p, q, the TV-divergence and KL-divergence are related by DTV (p||q) \u2264 \u221a DKL(p||q)/2. Combining this with Jensen\u2019s inequality, we obtain\nE s\u223cd\u03c0\n[DTV (\u03c0 \u2032||\u03c0)[s]] \u2264 E\ns\u223cd\u03c0\n[\u221a 1\n2 DKL(\u03c0\u2032||\u03c0)[s]\n]\n\u2264 \u221a 1\n2 E s\u223cd\u03c0 [DKL(\u03c0\u2032||\u03c0)[s]] (7)\nFrom (7) we immediately obtain the following.\nCorollary 3. In bounds (4), (5), and (6), make the substitution\nE s\u223cd\u03c0\n[DTV (\u03c0 \u2032||\u03c0)[s]]\u2192\n\u221a 1\n2 E s\u223cd\u03c0 [DKL(\u03c0\u2032||\u03c0)[s]].\nThe resulting bounds hold."}, {"heading": "5.2. Trust Region Methods", "text": "Trust region algorithms for reinforcement learning (Schulman et al., 2015; 2016) have policy updates of the form\n\u03c0k+1 = arg max \u03c0\u2208\u03a0\u03b8 E s\u223cd\u03c0k a\u223c\u03c0\n[A\u03c0k(s, a)]\ns.t. D\u0304KL(\u03c0||\u03c0k) \u2264 \u03b4, (8)\nwhere D\u0304KL(\u03c0||\u03c0k) = Es\u223c\u03c0k [DKL(\u03c0||\u03c0k)[s]], and \u03b4 > 0 is the step size. The set {\u03c0\u03b8 \u2208 \u03a0\u03b8 : D\u0304KL(\u03c0||\u03c0k) \u2264 \u03b4} is called the trust region.\nThe primary motivation for this update is that it is an approximation to optimizing the lower bound on policy performance given in (5), which would guarantee monotonic performance improvements. This is important for optimizing neural network policies, which are known to suffer from performance collapse after bad updates (Duan et al., 2016). Despite the approximation, trust region steps usually give monotonic improvements (Schulman et al., 2015; Duan et al., 2016) and have shown state-of-the-art performance in the deep RL setting (Duan et al., 2016; Gu et al., 2017), making the approach appealing for developing policy search methods for CMDPs.\nUntil now, the particular choice of trust region for (8) was heuristically motivated; with (5) and Corollary 3, we are able to show that it is principled and comes with a worstcase performance degradation guarantee that depends on \u03b4. Proposition 1 (Trust Region Update Performance). Suppose \u03c0k, \u03c0k+1 are related by (8), and that \u03c0k \u2208 \u03a0\u03b8. A lower bound on the policy performance difference between \u03c0k and \u03c0k+1 is\nJ(\u03c0k+1)\u2212 J(\u03c0k) \u2265 \u2212 \u221a 2\u03b4\u03b3 \u03c0k+1\n(1\u2212 \u03b3)2 , (9)\nwhere \u03c0k+1 = maxs \u2223\u2223Ea\u223c\u03c0k+1 [A\u03c0k(s, a)]\u2223\u2223.\nProof. \u03c0k is a feasible point of (8) with objective value 0, so Es\u223cd\u03c0k ,a\u223c\u03c0k+1 [A\n\u03c0k(s, a)] \u2265 0. The rest follows by (5) and Corollary 3, noting that (8) bounds the average KLdivergence by \u03b4.\nThis result is useful for two reasons: 1) it is of independent interest, as it helps tighten the connection between theory and practice for deep RL, and 2) the choice to develop CPO as a trust region method means that CPO inherits this performance guarantee."}, {"heading": "5.3. Trust Region Optimization for Constrained MDPs", "text": "Constrained policy optimization (CPO), which we present and justify in this section, is a policy search algorithm for CMDPs with updates that approximately solve (3) with a particular choice of D. First, we describe a policy search update for CMDPs that alleviates the issue of off-policy evaluation, and comes with guarantees of monotonic performance improvement and constraint satisfaction. Then, because the theoretically guaranteed update will take toosmall steps in practice, we propose CPO as a practical approximation based on trust region methods.\nBy corollaries 1, 2, and 3, for appropriate coefficients \u03b1k, \u03b2ik the update\n\u03c0k+1 = arg max \u03c0\u2208\u03a0\u03b8 E s\u223cd\u03c0k a\u223c\u03c0\n[A\u03c0k(s, a)]\u2212 \u03b1k \u221a D\u0304KL(\u03c0||\u03c0k)\ns.t. JCi(\u03c0k) + E s\u223cd\u03c0k a\u223c\u03c0\n[ A\u03c0kCi(s, a)\n1\u2212 \u03b3\n] + \u03b2ik \u221a D\u0304KL(\u03c0||\u03c0k) \u2264 di\nis guaranteed to produce policies with monotonically nondecreasing returns that satisfy the original constraints. (Observe that the constraint here is on an upper bound for JCi(\u03c0) by (6).) The off-policy evaluation issue is alleviated, because both the objective and constraints involve expectations over state distributions d\u03c0k , which we presume to have samples from. Because the bounds are tight, the problem is always feasible (as long as \u03c00 is feasible). However, the penalties on policy divergence are quite steep for discount factors close to 1, so steps taken with this update might be small.\nInspired by trust region methods, we propose CPO, which uses a trust region instead of penalties on policy divergence to enable larger step sizes:\n\u03c0k+1 = arg max \u03c0\u2208\u03a0\u03b8 E s\u223cd\u03c0k a\u223c\u03c0\n[A\u03c0k(s, a)]\ns.t. JCi(\u03c0k) + 1\n1\u2212 \u03b3 E\ns\u223cd\u03c0k a\u223c\u03c0\n[ A\u03c0kCi(s, a) ] \u2264 di \u2200i\nD\u0304KL(\u03c0||\u03c0k) \u2264 \u03b4. (10)\nBecause this is a trust region method, it inherits the performance guarantee of Proposition 1. Furthermore, by corollaries 2 and 3, we have a performance guarantee for approximate satisfaction of constraints: Proposition 2 (CPO Update Worst-Case Constraint Violation). Suppose \u03c0k, \u03c0k+1 are related by (10), and that \u03a0\u03b8 in (10) is any set of policies with \u03c0k \u2208 \u03a0\u03b8. An upper bound on the Ci-return of \u03c0k+1 is\nJCi(\u03c0k+1) \u2264 di + \u221a 2\u03b4\u03b3 \u03c0k+1 Ci\n(1\u2212 \u03b3)2 ,\nwhere \u03c0k+1Ci = maxs \u2223\u2223Ea\u223c\u03c0k+1 [A\u03c0kCi(s, a)]\u2223\u2223."}, {"heading": "6. Practical Implementation", "text": "In this section, we show how to implement an approximation to the update (10) that can be efficiently computed, even when optimizing policies with thousands of parameters. To address the issue of approximation and sampling errors that arise in practice, as well as the potential violations described by Proposition 2, we also propose to tighten the constraints by constraining upper bounds of the auxilliary costs, instead of the auxilliary costs themselves."}, {"heading": "6.1. Approximately Solving the CPO Update", "text": "For policies with high-dimensional parameter spaces like neural networks, (10) can be impractical to solve directly because of the computational cost. However, for small step sizes \u03b4, the objective and cost constraints are well-approximated by linearizing around \u03c0k, and the KLdivergence constraint is well-approximated by second order expansion (at \u03c0k = \u03c0, the KL-divergence and its gradient are both zero). Denoting the gradient of the objective as g, the gradient of constraint i as bi, the Hessian of the KL-divergence as H , and defining ci . = JCi(\u03c0k) \u2212 di, the approximation to (10) is:\n\u03b8k+1 = arg max \u03b8\ngT (\u03b8 \u2212 \u03b8k)\ns.t. ci + bTi (\u03b8 \u2212 \u03b8k) \u2264 0 i = 1, ...,m 1\n2 (\u03b8 \u2212 \u03b8k)TH(\u03b8 \u2212 \u03b8k) \u2264 \u03b4.\n(11) Because the Fisher information matrix (FIM) H is always positive semi-definite (and we will assume it to be positive-definite in what follows), this optimization problem is convex and, when feasible, can be solved efficiently using duality. (We reserve the case where it is not feasible for the next subsection.) With B .= [b1, ..., bm] and c . = [c1, ..., cm] T , a dual to (11) can be expressed as\nmax \u03bb\u22650 \u03bd 0\n\u22121 2\u03bb\n( gTH\u22121g \u2212 2rT \u03bd + \u03bdTS\u03bd ) + \u03bdT c\u2212 \u03bb\u03b4\n2 ,\n(12) where r .= gTH\u22121B, S .= BTH\u22121B. This is a convex program inm+1 variables; when the number of constraints is small by comparison to the dimension of \u03b8, this is much easier to solve than (11). If \u03bb\u2217, \u03bd\u2217 are a solution to the dual, the solution to the primal is\n\u03b8\u2217 = \u03b8k + 1\n\u03bb\u2217 H\u22121 (g \u2212B\u03bd\u2217) . (13)\nOur algorithm solves the dual for \u03bb\u2217, \u03bd\u2217 and uses it to propose the policy update (13). For the special case where there is only one constraint, we give an analytical solution in the supplementary material (Theorem 2) which removes the need for an inner-loop optimization. Our experiments\nAlgorithm 1 Constrained Policy Optimization Input: Initial policy \u03c00 \u2208 \u03a0\u03b8 tolerance \u03b1 for k = 0, 1, 2, ... do\nSample a set of trajectories D = {\u03c4} \u223c \u03c0k = \u03c0(\u03b8k) Form sample estimates g\u0302, b\u0302, H\u0302, c\u0302 with D if approximate CPO is feasible then\nSolve dual problem (12) for \u03bb\u2217k, \u03bd \u2217 k\nCompute policy proposal \u03b8\u2217 with (13) else\nCompute recovery policy proposal \u03b8\u2217 with (14) end if Obtain \u03b8k+1 by backtracking linesearch to enforce satisfaction of sample estimates of constraints in (10)\nend for\nhave only a single constraint, and make use of the analytical solution.\nBecause of approximation error, the proposed update may not satisfy the constraints in (10); a backtracking line search is used to ensure surrogate constraint satisfaction. Also, for high-dimensional policies, it is impractically expensive to invert the FIM. This poses a challenge for computing H\u22121g and H\u22121bi, which appear in the dual. Like (Schulman et al., 2015), we approximately compute them using the conjugate gradient method."}, {"heading": "6.2. Feasibility", "text": "Due to approximation errors, CPO may take a bad step and produce an infeasible iterate \u03c0k. Sometimes (11) will still be feasible and CPO can automatically recover from its bad step, but for the infeasible case, a recovery method is necessary. In our experiments, where we only have one constraint, we recover by proposing an update to purely decrease the constraint value:\n\u03b8\u2217 = \u03b8k \u2212 \u221a 2\u03b4\nbTH\u22121b H\u22121b. (14)\nAs before, this is followed by a line search. This approach is principled in that it uses the limiting search direction as the intersection of the trust region and the constraint region shrinks to zero. We give the pseudocode for our algorithm (for the single-constraint case) as Algorithm 1."}, {"heading": "6.3. Tightening Constraints via Cost Shaping", "text": "Because of the various approximations between (3) and our practical algorithm, it is important to build a factor of safety into the algorithm to minimize the chance of constraint violations. To this end, we choose to constrain upper bounds on the original constraints, C+i , instead of the original constraints themselves. We do this by cost shaping:\nC+i (s, a, s \u2032) = Ci(s, a, s \u2032) + \u2206i(s, a, s \u2032), (15)\nwhere \u2206i : S \u00d7 A \u00d7 S \u2192 R+ correlates in some useful way with Ci.\nIn our experiments, where we have only one constraint, we partition states into safe states and unsafe states, and the agent suffers a safety cost of 1 for being in an unsafe state. We choose \u2206 to be the probability of entering an unsafe state within a fixed time horizon, according to a learned model that is updated at each iteration. This choice confers the additional benefit of smoothing out sparse constraints."}, {"heading": "7. Connections to Prior Work", "text": "Our method has similar policy updates to primal-dual methods like those proposed by Chow et al. (2015), but crucially, we differ in computing the dual variables (the Lagrange multipliers for the constraints). In primal-dual optimization (PDO), dual variables are stateful and learned concurrently with the primal variables (Boyd et al., 2003). In a PDO algorithm for solving (3), dual variables would be updated according to\n\u03bdk+1 = (\u03bdk + \u03b1k (JC(\u03c0k)\u2212 d))+ , (16)\nwhere \u03b1k is a learning rate. In this approach, intermediary policies are not guaranteed to satisfy constraints\u2014only the policy at convergence is. By contrast, CPO computes new dual variables from scratch at each update to exactly enforce constraints."}, {"heading": "8. Experiments", "text": "In our experiments, we aim to answer the following:\n\u2022 Does CPO succeed at enforcing behavioral constraints when training neural network policies with thousands of parameters?\n\u2022 How does CPO compare with a baseline that uses primal-dual optimization? Does CPO behave better with respect to constraints?\n\u2022 How much does it help to constrain a cost upper bound (15), instead of directly constraining the cost?\n\u2022 What benefits are conferred by using constraints instead of fixed penalties?\nWe designed experiments that are easy to interpret and motivated by safety. We consider two tasks, and train multiple different agents (robots) for each task:\n\u2022 Circle: The agent is rewarded for running in a wide circle, but is constrained to stay within a safe region smaller than the radius of the target circle.\n\u2022 Gather: The agent is rewarded for collecting green apples, and constrained to avoid red bombs.\nFor the Circle task, the exact geometry is illustrated in Figure 5 in the supplementary material. Note that there are no physical walls: the agent only interacts with boundaries through the constraint costs. The reward and constraint cost functions are described in supplementary material (Section 10.3.1). In each of these tasks, we have only one constraint; we refer to it as C and its upper bound from (15) as C+.\nWe experiment with three different agents: a point-mass (S \u2286 R9, A \u2286 R2), a quadruped robot (called an \u2018ant\u2019) (S \u2286 R32, A \u2286 R8), and a simple humanoid (S \u2286 R102, A \u2286 R10). We train all agent-task combinations except for Humanoid-Gather.\nFor all experiments, we use neural network policies with two hidden layers of size (64, 32). Our experiments are implemented in rllab (Duan et al., 2016)."}, {"heading": "8.1. Evaluating CPO and Comparison Analysis", "text": "Learning curves for CPO and PDO are compiled in Figure 1. Note that we evaluate algorithm performance based on the C+ return, instead of the C return (except for in PointGather, where we did not use cost shaping due to that environment\u2019s short time horizon), because this is what the algorithm actually constrains in these experiments.\nFor our comparison, we implement PDO with (16) as the update rule for the dual variables, using a constant learning rate \u03b1; details are available in supplementary material (Section 10.3.3). We emphasize that in order for the compari-\nson to be fair, we give PDO every advantage that is given to CPO, including equivalent trust region policy updates. To benchmark the environments, we also include TRPO (trust region policy optimization) (Schulman et al., 2015), a stateof-the-art unconstrained reinforcement learning algorithm. The TRPO experiments show that optimal unconstrained behaviors for these environments are constraint-violating.\nWe find that CPO is successful at approximately enforcing constraints in all environments. In the simpler environments (Point-Circle and Point-Gather), CPO tracks the constraint return almost exactly to the limit value.\nBy contrast, although PDO usually converges to constraintsatisfying policies in the end, it is not consistently constraint-satisfying throughout training (as expected). For example, see the spike in constraint value that it experiences in Ant-Circle. Additionally, PDO is sensitive to the initialization of the dual variable. By default, we initialize \u03bd0 = 0, which exploits no prior knowledge about the\nenvironment and makes sense when the initial policies are feasible. However, it may seem appealing to set \u03bd0 high, which would make PDO more conservative with respect to the constraint; PDO could then decrease \u03bd as necessary after the fact. In the Point environments, we experiment with \u03bd0 = 1000 and show that although this does assure constraint satisfaction, it also can substantially harm performance with respect to return. Furthermore, we argue that this is not adequate in general: after the dual variable decreases, the agent could learn a new behavior that increases the correct dual variable more quickly than PDO can attain it (as happens in Ant-Circle for PDO; observe that performance is approximately constraint-satisfying until the agent learns how to run at around iteration 350).\nWe find that CPO generally outperforms PDO on enforcing constraints, without compromising performance with respect to return. CPO quickly stabilizes the constraint return around to the limit value, while PDO is not consistently able to enforce constraints all throughout training."}, {"heading": "8.2. Ablation on Cost Shaping", "text": "In Figure 3, we compare performance of CPO with and without cost shaping in the constraint. Our metric for comparison is theC-return, the \u2018true\u2019 constraint. The cost shaping does help, almost completely accounting for CPO\u2019s inherent approximation errors. However, CPO is nearly constraint-satisfying even without cost shaping."}, {"heading": "8.3. Constraint vs. Fixed Penalty", "text": "In Figure 4, we compare CPO to a fixed penalty method, where policies are learned using TRPO with rewards R(s, a, s\u2032) + \u03bbC+(s, a, s\u2032) for \u03bb \u2208 {1, 5, 50}.\nWe find that fixed penalty methods can be highly sensitive to the choice of penalty coefficient: in Ant-Circle, a penalty coefficient of 1 results in reward-maximizing policies that accumulate massive constraint costs, while a coefficient of 5 (less than an order of magnitude difference) results in cost-minimizing policies that never learn how to acquire any rewards. In contrast, CPO automatically picks penalty coefficients to attain the desired trade-off between reward and constraint cost."}, {"heading": "9. Discussion", "text": "In this article, we showed that a particular optimization problem results in policy updates that are guaranteed to both improve return and satisfy constraints. This enabled the development of CPO, our policy search algorithm for CMDPs, which approximates the theoretically-guaranteed algorithm in a principled way. We demonstrated that CPO can train neural network policies with thousands of parameters on high-dimensional constrained control tasks, simultaneously maximizing reward and approximately satisfying constraints. Our work represents a step towards applying reinforcement learning in the real world, where constraints on agent behavior are sometimes necessary for the sake of safety."}, {"heading": "Acknowledgements", "text": "The authors would like to acknowledge Peter Chen, who independently and concurrently derived an equivalent policy improvement bound.\nJoshua Achiam is supported by TRUST (Team for Research in Ubiquitous Secure Technology) which receives support from NSF (award number CCF-0424422). This project also received support from Berkeley Deep Drive\nand from Siemens."}, {"heading": "10. Appendix", "text": ""}, {"heading": "10.1. Proof of Policy Performance Bound", "text": ""}, {"heading": "10.1.1. PRELIMINARIES", "text": "Our analysis will make extensive use of the discounted future state distribution, d\u03c0 , which is defined as\nd\u03c0(s) = (1\u2212 \u03b3) \u221e\u2211 t=0 \u03b3tP (st = s|\u03c0).\nIt allows us to express the expected discounted total reward compactly as\nJ(\u03c0) = 1\n1\u2212 \u03b3 E\ns\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP\n[R(s, a, s\u2032)] , (17)\nwhere by a \u223c \u03c0, we mean a \u223c \u03c0(\u00b7|s), and by s\u2032 \u223c P , we mean s\u2032 \u223c P (\u00b7|s, a). We drop the explicit notation for the sake of reducing clutter, but it should be clear from context that a and s\u2032 depend on s.\nFirst, we examine some useful properties of d\u03c0 that become apparent in vector form for finite state spaces. Let pt\u03c0 \u2208 R|S| denote the vector with components pt\u03c0(s) = P (st = s|\u03c0), and let P\u03c0 \u2208 R|S|\u00d7|S| denote the transition matrix with components P\u03c0(s\u2032|s) = \u222b daP (s\u2032|s, a)\u03c0(a|s); then pt\u03c0 = P\u03c0pt\u22121\u03c0 = P t\u03c0\u00b5 and\nd\u03c0 = (1\u2212 \u03b3) \u221e\u2211 t=0 (\u03b3P\u03c0) t\u00b5\n= (1\u2212 \u03b3)(I \u2212 \u03b3P\u03c0)\u22121\u00b5. (18)\nThis formulation helps us easily obtain the following lemma.\nLemma 1. For any function f : S \u2192 R and any policy \u03c0,\n(1\u2212 \u03b3) E s\u223c\u00b5 [f(s)] + E s\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP [\u03b3f(s\u2032)]\u2212 E s\u223cd\u03c0 [f(s)] = 0. (19)\nProof. Multiply both sides of (18) by (I \u2212 \u03b3P\u03c0) and take the inner product with the vector f \u2208 R|S|.\nCombining this with (17), we obtain the following, for any function f and any policy \u03c0:\nJ(\u03c0) = E s\u223c\u00b5\n[f(s)] + 1\n1\u2212 \u03b3 E\ns\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP\n[R(s, a, s\u2032) + \u03b3f(s\u2032)\u2212 f(s)] . (20)\nThis identity is nice for two reasons. First: if we pick f to be an approximator of the value function V \u03c0 , then (20) relates the true discounted return of the policy (J(\u03c0)) to the estimate of the policy return (Es\u223c\u00b5[f(s)]) and to the on-policy average TD-error of the approximator; this is aesthetically satisfying. Second: it shows that reward-shaping by \u03b3f(s\u2032)\u2212 f(s) has the effect of translating the total discounted return by Es\u223c\u00b5[f(s)], a fixed constant independent of policy; this illustrates the finding of Ng. et al. (1999) that reward shaping by \u03b3f(s\u2032) + f(s) does not change the optimal policy.\nIt is also helpful to introduce an identity for the vector difference of the discounted future state visitation distributions on two different policies, \u03c0\u2032 and \u03c0. Define the matrices G .= (I \u2212 \u03b3P\u03c0)\u22121, G\u0304 . = (I \u2212 \u03b3P\u03c0\u2032)\u22121, and \u2206 = P\u03c0\u2032 \u2212 P\u03c0 . Then:\nG\u22121 \u2212 G\u0304\u22121 = (I \u2212 \u03b3P\u03c0)\u2212 (I \u2212 \u03b3P\u03c0\u2032) = \u03b3\u2206;\nleft-multiplying by G and right-multiplying by G\u0304, we obtain\nG\u0304\u2212G = \u03b3G\u0304\u2206G.\nThus\nd\u03c0 \u2032 \u2212 d\u03c0 = (1\u2212 \u03b3) ( G\u0304\u2212G ) \u00b5\n= \u03b3(1\u2212 \u03b3)G\u0304\u2206G\u00b5 = \u03b3G\u0304\u2206d\u03c0. (21)\nFor simplicity in what follows, we will only consider MDPs with finite state and action spaces, although our attention is on MDPs that are too large for tabular methods."}, {"heading": "10.1.2. MAIN RESULTS", "text": "In this section, we will derive and present the new policy improvement bound. We will begin with a lemma:\nLemma 2. For any function f : S \u2192 R and any policies \u03c0\u2032 and \u03c0, define\nL\u03c0,f (\u03c0 \u2032) . = E s\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP\n[( \u03c0\u2032(a|s) \u03c0(a|s) \u2212 1 ) (R(s, a, s\u2032) + \u03b3f(s\u2032)\u2212 f(s)) ] , (22)\nand \u03c0 \u2032 f . = maxs |Ea\u223c\u03c0\u2032,s\u2032\u223cP [R(s, a, s\u2032) + \u03b3f(s\u2032)\u2212 f(s)]|. Then the following bounds hold:\nJ(\u03c0\u2032)\u2212 J(\u03c0) \u2265 1 1\u2212 \u03b3\n( L\u03c0,f (\u03c0 \u2032)\u2212 2 \u03c0 \u2032 f DTV (d \u03c0\u2032 ||d\u03c0) ) , (23)\nJ(\u03c0\u2032)\u2212 J(\u03c0) \u2264 1 1\u2212 \u03b3\n( L\u03c0,f (\u03c0 \u2032) + 2 \u03c0 \u2032 f DTV (d \u03c0\u2032 ||d\u03c0) ) , (24)\nwhere DTV is the total variational divergence. Furthermore, the bounds are tight (when \u03c0\u2032 = \u03c0, the LHS and RHS are identically zero).\nProof. First, for notational convenience, let \u03b4f (s, a, s\u2032) . = R(s, a, s\u2032) + \u03b3f(s\u2032) \u2212 f(s). (The choice of \u03b4 to denote this quantity is intentionally suggestive\u2014this bears a strong resemblance to a TD-error.) By (20), we obtain the identity\nJ(\u03c0\u2032)\u2212 J(\u03c0) = 1 1\u2212 \u03b3  Es\u223cd\u03c0\u2032 a\u223c\u03c0\u2032 s\u2032\u223cP [\u03b4f (s, a, s \u2032)]\u2212 E s\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP [\u03b4f (s, a, s \u2032)] .  Now, we restrict our attention to the first term in this equation. Let \u03b4\u0304\u03c0 \u2032\nf \u2208 R|S| denote the vector of components \u03b4\u0304\u03c0 \u2032\nf (s) = Ea\u223c\u03c0\u2032,s\u2032\u223cP [\u03b4f (s, a, s \u2032)|s]. Observe that\nE s\u223cd\u03c0 \u2032 a\u223c\u03c0\u2032 s\u2032\u223cP\n[\u03b4f (s, a, s \u2032)] = \u2329 d\u03c0 \u2032 , \u03b4\u0304\u03c0 \u2032\nf\n\u232a\n= \u2329 d\u03c0, \u03b4\u0304\u03c0 \u2032\nf\n\u232a + \u2329 d\u03c0 \u2032 \u2212 d\u03c0, \u03b4\u0304\u03c0 \u2032\nf \u232a This term is then straightforwardly bounded by applying Ho\u0308lder\u2019s inequality; for any p, q \u2208 [1,\u221e] such that 1/p+1/q = 1, we have \u2329\nd\u03c0, \u03b4\u0304\u03c0 \u2032\nf\n\u232a + \u2225\u2225\u2225d\u03c0\u2032 \u2212 d\u03c0\u2225\u2225\u2225\np \u2225\u2225\u2225\u03b4\u0304\u03c0\u2032f \u2225\u2225\u2225 q \u2265 E s\u223cd\u03c0 \u2032\na\u223c\u03c0\u2032 s\u2032\u223cP\n[\u03b4f (s, a, s \u2032)] \u2265 \u2329 d\u03c0, \u03b4\u0304\u03c0 \u2032\nf\n\u232a \u2212 \u2225\u2225\u2225d\u03c0\u2032 \u2212 d\u03c0\u2225\u2225\u2225\np \u2225\u2225\u2225\u03b4\u0304\u03c0\u2032f \u2225\u2225\u2225 q .\nThe lower bound leads to (23), and the upper bound leads to (24).\nWe choose p = 1 and q =\u221e; however, we believe that this step is very interesting, and different choices for dealing with the inner product \u2329 d\u03c0 \u2032 \u2212 d\u03c0, \u03b4\u0304\u03c0\u2032f \u232a may lead to novel and useful bounds.\nWith \u2225\u2225\u2225d\u03c0\u2032 \u2212 d\u03c0\u2225\u2225\u2225\n1 = 2DTV (d \u03c0\u2032 ||d\u03c0) and \u2225\u2225\u2225\u03b4\u0304\u03c0\u2032f \u2225\u2225\u2225\u221e = \u03c0\u2032f , the bounds are almost obtained. The last step is to observe that,\nby the importance sampling identity,\n\u2329 d\u03c0, \u03b4\u0304\u03c0 \u2032\nf\n\u232a = E\ns\u223cd\u03c0 a\u223c\u03c0\u2032 s\u2032\u223cP\n[\u03b4f (s, a, s \u2032)]\n= E s\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP\n[( \u03c0\u2032(a|s) \u03c0(a|s) ) \u03b4f (s, a, s \u2032) ] .\nAfter grouping terms, the bounds are obtained.\nThis lemma makes use of many ideas that have been explored before; for the special case of f = V \u03c0 , this strategy (after bounding DTV (d\u03c0\n\u2032 ||d\u03c0)) leads directly to some of the policy improvement bounds previously obtained by Pirotta et al. and Schulman et al. The form given here is slightly more general, however, because it allows for freedom in choosing f .\nRemark. It is reasonable to ask if there is a choice of f which maximizes the lower bound here. This turns out to trivially be f = V \u03c0\n\u2032 . Observe that Es\u2032\u223cP [\u03b4V \u03c0\u2032 (s, a, s \u2032)|s, a] = A\u03c0\u2032(s, a). For all states, Ea\u223c\u03c0\u2032 [A\u03c0 \u2032 (s, a)] = 0 (by the definition\nof A\u03c0 \u2032 ), thus \u03b4\u0304\u03c0 \u2032\nV \u03c0\u2032 = 0 and \u03c0\n\u2032\nV \u03c0\u2032 = 0. Also, L\u03c0,V \u03c0\u2032 (\u03c0\n\u2032) = \u2212Es\u223cd\u03c0,a\u223c\u03c0 [ A\u03c0 \u2032 (s, a) ] ; from (20) with f = V \u03c0 \u2032 , we can\nsee that this exactly equals J(\u03c0\u2032) \u2212 J(\u03c0). Thus, for f = V \u03c0\u2032 , we recover an exact equality. While this is not practically useful to us (because, when we want to optimize a lower bound with respect to \u03c0\u2032, it is too expensive to evaluate V \u03c0 \u2032 for each candidate to be practical), it provides insight: the penalty coefficient on the divergence captures information about the mismatch between f and V \u03c0 \u2032 .\nNext, we are interested in bounding the divergence term, \u2016d\u03c0\u2032 \u2212 d\u03c0\u20161. We give the following lemma; to the best of our knowledge, this is a new result.\nLemma 3. The divergence between discounted future state visitation distributions, \u2016d\u03c0\u2032 \u2212d\u03c0\u20161, is bounded by an average divergence of the policies \u03c0\u2032 and \u03c0:\n\u2016d\u03c0 \u2032 \u2212 d\u03c0\u20161 \u2264\n2\u03b3\n1\u2212 \u03b3 E s\u223cd\u03c0 [DTV (\u03c0\n\u2032||\u03c0)[s]] , (25)\nwhere DTV (\u03c0\u2032||\u03c0)[s] = (1/2) \u2211 a |\u03c0\u2032(a|s)\u2212 \u03c0(a|s)|.\nProof. First, using (21), we obtain\n\u2016d\u03c0 \u2032 \u2212 d\u03c0\u20161 = \u03b3\u2016G\u0304\u2206d\u03c0\u20161\n\u2264 \u03b3\u2016G\u0304\u20161\u2016\u2206d\u03c0\u20161.\n\u2016G\u0304\u20161 is bounded by:\n\u2016G\u0304\u20161 = \u2016(I \u2212 \u03b3P\u03c0\u2032)\u22121\u20161 \u2264 \u221e\u2211 t=0 \u03b3t \u2016P\u03c0\u2032\u2016t1 = (1\u2212 \u03b3) \u22121\nTo conclude the lemma, we bound \u2016\u2206d\u03c0\u20161.\n\u2016\u2206d\u03c0\u20161 = \u2211 s\u2032 \u2223\u2223\u2223\u2223\u2223\u2211 s \u2206(s\u2032|s)d\u03c0(s) \u2223\u2223\u2223\u2223\u2223 \u2264\n\u2211 s,s\u2032 |\u2206(s\u2032|s)| d\u03c0(s)\n= \u2211 s,s\u2032 \u2223\u2223\u2223\u2223\u2223\u2211 a P (s\u2032|s, a) (\u03c0\u2032(a|s)\u2212 \u03c0(a|s)) \u2223\u2223\u2223\u2223\u2223 d\u03c0(s) \u2264\n\u2211 s,a,s\u2032 P (s\u2032|s, a) |\u03c0\u2032(a|s)\u2212 \u03c0(a|s)| d\u03c0(s)\n= \u2211 s,a |\u03c0\u2032(a|s)\u2212 \u03c0(a|s)| d\u03c0(s)\n= 2 E s\u223cd\u03c0\n[DTV (\u03c0 \u2032||\u03c0)[s]] .\nThe new policy improvement bound follows immediately. Theorem 1. For any function f : S \u2192 R and any policies \u03c0\u2032 and \u03c0, define \u03b4f (s, a, s\u2032) . = R(s, a, s\u2032) + \u03b3f(s\u2032)\u2212 f(s),\n\u03c0 \u2032 f . = max s |Ea\u223c\u03c0\u2032,s\u2032\u223cP [\u03b4f (s, a, s\u2032)]| ,\nL\u03c0,f (\u03c0 \u2032) . = E s\u223cd\u03c0 a\u223c\u03c0 s\u2032\u223cP\n[( \u03c0\u2032(a|s) \u03c0(a|s) \u2212 1 ) \u03b4f (s, a, s \u2032) ] , and\nD\u00b1\u03c0,f (\u03c0 \u2032) . = L\u03c0,f (\u03c0\n\u2032)\n1\u2212 \u03b3 \u00b1\n2\u03b3 \u03c0 \u2032\nf\n(1\u2212 \u03b3)2 E s\u223cd\u03c0 [DTV (\u03c0\n\u2032||\u03c0)[s]] ,\nwhere DTV (\u03c0\u2032||\u03c0)[s] = (1/2) \u2211 a |\u03c0\u2032(a|s)\u2212 \u03c0(a|s)| is the total variational divergence between action distributions at s. The following bounds hold: D+\u03c0,f (\u03c0 \u2032) \u2265 J(\u03c0\u2032)\u2212 J(\u03c0) \u2265 D\u2212\u03c0,f (\u03c0 \u2032). (4)\nFurthermore, the bounds are tight (when \u03c0\u2032 = \u03c0, all three expressions are identically zero).\nProof. Begin with the bounds from lemma 2 and bound the divergence DTV (d\u03c0 \u2032 ||d\u03c0) by lemma 3."}, {"heading": "10.2. Proof of Analytical Solution to LQCLP", "text": "Theorem 2 (Optimizing Linear Objective with Linear and Quadratic Constraints). Consider the problem\np\u2217 = min x gTx\ns.t. bTx+ c \u2264 0 (26) xTHx \u2264 \u03b4,\nwhere g, b, x \u2208 Rn, c, \u03b4 \u2208 R, \u03b4 > 0, H \u2208 Sn, and H 0. When there is at least one strictly feasible point, the optimal point x\u2217 satisfies\nx\u2217 = \u2212 1 \u03bb\u2217 H\u22121 (g + \u03bd\u2217b) ,\nwhere \u03bb\u2217 and \u03bd\u2217 are defined by\n\u03bd\u2217 =\n( \u03bb\u2217c\u2212 r\ns ) + ,\n\u03bb\u2217 = arg max \u03bb\u22650\n{ fa(\u03bb) . = 12\u03bb ( r2 s \u2212 q ) + \u03bb2 ( c2 s \u2212 \u03b4 ) \u2212 rcs if \u03bbc\u2212 r > 0\nfb(\u03bb) . = \u2212 12 ( q \u03bb + \u03bb\u03b4 ) otherwise,\nwith q = gTH\u22121g, r = gTH\u22121b, and s = bTH\u22121b.\nFurthermore, let \u039ba . = {\u03bb|\u03bbc\u2212 r > 0, \u03bb \u2265 0}, and \u039bb . = {\u03bb|\u03bbc\u2212 r \u2264 0, \u03bb \u2265 0}. The value of \u03bb\u2217 satisfies\n\u03bb\u2217 \u2208 { \u03bb\u2217a . = Proj (\u221a q \u2212 r2/s \u03b4 \u2212 c2/s ,\u039ba ) , \u03bb\u2217b . = Proj (\u221a q \u03b4 ,\u039bb )} ,\nwith \u03bb\u2217 = \u03bb\u2217a if fa(\u03bb \u2217 a) > fb(\u03bb \u2217 b) and \u03bb \u2217 = \u03bb\u2217b otherwise, and Proj(a, S) is the projection of a point x on to a set S. Note: the projection of a point x \u2208 R onto a convex segment of R, [a, b], has value Proj(x, [a, b]) = max(a,min(b, x)).\nProof. This is a convex optimization problem. When there is at least one strictly feasible point, strong duality holds by Slater\u2019s theorem. We exploit strong duality to solve the problem analytically.\np\u2217 = min x\nmax \u03bb\u22650 \u03bd\u22650\ngTx+ \u03bb\n2\n( xTHx\u2212 \u03b4 ) + \u03bd ( bTx+ c ) = max\n\u03bb\u22650 \u03bd\u22650\nmin x\n\u03bb 2 xTHx+ (g + \u03bdb) T x+\n( \u03bdc\u2212 1\n2 \u03bb\u03b4\n) Strong duality\n=\u21d2 x\u2217 = \u2212 1 \u03bb H\u22121 (g + \u03bdb) \u2207xL(x, \u03bb, \u03bd) = 0\n= max \u03bb\u22650 \u03bd\u22650\n\u2212 1 2\u03bb (g + \u03bdb) T H\u22121 (g + \u03bdb) +\n( \u03bdc\u2212 1\n2 \u03bb\u03b4\n) Plug in x\u2217\n= max \u03bb\u22650 \u03bd\u22650\n\u2212 1 2\u03bb\n( q + 2\u03bdr + \u03bd2s ) + ( \u03bdc\u2212 1\n2 \u03bb\u03b4\n) Notation: q .= gTH\u22121g, r .= gTH\u22121b, s .= bTH\u22121b.\n=\u21d2 \u2202L \u2202\u03bd = \u2212 1 2\u03bb (2r + 2\u03bds) + c\n=\u21d2 \u03bd = ( \u03bbc\u2212 r s ) +\nOptimizing single-variable convex quadratic function over R+\n= max \u03bb\u22650\n{ 1\n2\u03bb\n( r2 s \u2212 q ) + \u03bb2 ( c2 s \u2212 \u03b4 ) \u2212 rcs if \u03bb \u2208 \u039ba\n\u2212 12 ( q \u03bb + \u03bb\u03b4 ) if \u03bb \u2208 \u039bb\nNotation: \u039ba\n. = {\u03bb|\u03bbc\u2212 r > 0, \u03bb \u2265 0},\n\u039bb . = {\u03bb|\u03bbc\u2212 r \u2264 0, \u03bb \u2265 0}\nObserve that when c < 0, \u039ba = [0, r/c) and \u039bb = [r/c,\u221e); when c > 0, \u039ba = [r/c,\u221e) and \u039bb = [0, r/c).\nNotes on interpreting the coefficients in the dual problem:\n\u2022 We are guaranteed to have r2/s\u2212 q \u2264 0 by the Cauchy-Schwarz inequality. Recall that q = gTH\u22121g, r = gTH\u22121b, s = bTH\u22121b. The Cauchy-Scwarz inequality gives:\n\u2016H\u22121/2b\u201622\u2016H\u22121/2g\u201622 \u2265 (( H\u22121/2b )T ( H\u22121/2g ))2\n=\u21d2 ( bTH\u22121b ) ( gTH\u22121g ) \u2265 ( bTH\u22121g )2 \u2234 qs \u2265 r2.\n\u2022 The coefficient c2/s\u2212\u03b4 relates to whether or not the plane of the linear constraint intersects the quadratic trust region. An intersection occurs if there exists an x such that c+ bTx = 0 with xTHx \u2264 \u03b4. To check whether this is the case, we solve\nx\u2217 = arg min x xTHx : c+ bTx = 0 (27)\nand see if x\u2217THx\u2217 \u2264 \u03b4. The solution to this optimization problem is x\u2217 = cH\u22121b/s, thus x\u2217THx\u2217 = c2/s. If c2/s\u2212 \u03b4 \u2264 0, then the plane intersects the trust region; otherwise, it does not.\nIf c2/s\u2212 \u03b4 > 0 and c < 0, then the quadratic trust region lies entirely within the linear constraint-satisfying halfspace, and we can remove the linear constraint without changing the optimization problem. If c2/s \u2212 \u03b4 > 0 and c > 0, the problem is infeasible (the intersection of the quadratic trust region and linear constraint-satisfying halfspace is empty). Otherwise, we follow the procedure below.\nSolving the dual for \u03bb: for any A > 0, B > 0, the problem\nmax \u03bb\u22650\nf(\u03bb) . = \u22121\n2\n( A\n\u03bb +B\u03bb ) has optimal point \u03bb\u2217 = \u221a A/B and optimal value f(\u03bb\u2217) = \u2212 \u221a AB.\nWe can use this solution form to obtain the optimal point on each segment of the piecewise continuous dual function for \u03bb:\nobjective optimal point (before projection) optimal point (after projection)\nfa(\u03bb) . =\n1\n2\u03bb\n( r2 s \u2212 q ) + \u03bb 2 ( c2 s \u2212 \u03b4 ) \u2212 rc s \u03bba . = \u221a q \u2212 r2/s \u03b4 \u2212 c2/s\n\u03bb\u2217a = Proj(\u03bba,\u039ba)\nfb(\u03bb) . = \u22121\n2 ( q \u03bb + \u03bb\u03b4 )\n\u03bbb . =\n\u221a q\n\u03b4 \u03bb\u2217b = Proj(\u03bbb,\u039bb)\nThe optimization is completed by comparing fa(\u03bb\u2217a) and fb(\u03bb \u2217 b):\n\u03bb\u2217 =\n{ \u03bb\u2217a fa(\u03bb \u2217 a) \u2265 fb(\u03bb\u2217b)\n\u03bb\u2217b otherwise."}, {"heading": "10.3. Experimental Parameters", "text": ""}, {"heading": "10.3.1. ENVIRONMENTS", "text": "In the Circle environments, the reward and cost functions are\nR(s) = vT [\u2212y, x]\n1 + |\u2016[x, y]\u20162 \u2212 d| ,\nC(s) = 1 [|x| > xlim] ,\nwhere x, y are the coordinates in the plane, v is the velocity, and d, xlim are environmental parameters. We set these parameters to be\nPoint-mass Ant Humanoid d 15 10 10\nxlim 2.5 3 2.5\nIn Point-Gather, the agent receives a reward of +10 for collecting an apple, and a cost of 1 for collecting a bomb. Two apples and eight bombs spawn on the map at the start of each episode. In Ant-Gather, the reward and cost structure was the same, except that the agent also receives a reward of \u221210 for falling over (which results in the episode ending). Eight apples and eight bombs spawn on the map at the start of each episode."}, {"heading": "10.3.2. ALGORITHM PARAMETERS", "text": "In all experiments, we use Gaussian policies with mean vectors given as the outputs of neural networks, and with variances that are separate learnable parameters. The policy networks for all experiments have two hidden layers of sizes (64, 32) with tanh activation functions.\nWe use GAE-\u03bb (Schulman et al., 2016) to estimate the advantages and constraint advantages, with neural network value functions. The value functions have the same architecture and activation functions as the policy networks. We found that having different \u03bbGAE values for the regular advantages and the constraint advantages worked best. We denote the \u03bbGAE used for the constraint advantages as \u03bbGAEC .\nFor the failure prediction networks P\u03c6(s\u2192 U), we use neural networks with a single hidden layer of size (32), with output of one sigmoid unit. At each iteration, the failure prediction network is updated by some number of gradient descent steps using the Adam update rule to minimize the prediction error. To reiterate, the failure prediction network is a model for the probability that the agent will, at some point in the next T time steps, enter an unsafe state. The cost bonus was weighted by a coefficient \u03b1, which was 1 in all experiments except for Ant-Gather, where it was 0.01. Because of the short time horizon, no cost bonus was used for Point-Gather.\nFor all experiments, we used a discount factor of \u03b3 = 0.995, a GAE-\u03bb for estimating the regular advantages of \u03bbGAE = 0.95, and a KL-divergence step size of \u03b4KL = 0.01.\nExperiment-specific parameters are as follows:\nParameter Point-Circle Ant-Circle Humanoid-Circle Point-Gather Ant-Gather Batch size 50,000 100,000 50,000 50,000 100,000\nRollout length 50-65 500 1000 15 500 Maximum constraint value d 5 10 10 0.1 0.2 Failure prediction horizon T 5 20 20 (N/A) 20 Failure predictor SGD steps per itr 25 25 25 (N/A) 10 Predictor coeff \u03b1 1 1 1 (N/A) 0.01\n\u03bbGAEC 1 0.5 0.5 1 0.5\nNote that these same parameters were used for all algorithms.\nWe found that the Point environment was agnostic to \u03bbGAEC , but for the higher-dimensional environments, it was necessary to set \u03bbGAEC to a value < 1. Failing to discount the constraint advantages led to substantial overestimates of the constraint gradient magnitude, which led the algorithm to take unsafe steps. The choice \u03bbGAEC = 0.5 was obtained by a hyperparameter search in {0.5, 0.92, 1}, but 0.92 worked nearly as well."}, {"heading": "10.3.3. PRIMAL-DUAL OPTIMIZATION IMPLEMENTATION", "text": "Our primal-dual implementation is intended to be as close as possible to our CPO implementation. The key difference is that the dual variables for the constraints are stateful, learnable parameters, unlike in CPO where they are solved from scratch at each update.\nThe update equations for our PDO implementation are\n\u03b8k+1 = \u03b8k + s j\n\u221a 2\u03b4\n(g \u2212 \u03bdkb)TH\u22121(g \u2212 \u03bdkb) H\u22121 (g \u2212 \u03bdkb)\n\u03bdk+1 = (\u03bdk + \u03b1 (JC(\u03c0k)\u2212 d))+ ,\nwhere sj is from the backtracking line search (s \u2208 (0, 1) and j \u2208 {0, 1, ..., J}, where J is the backtrack budget; this is the same line search as is used in CPO and TRPO), and \u03b1 is a learning rate for the dual parameters. \u03b1 is an important hyperparameter of the algorithm: if it is set to be too small, the dual variable won\u2019t update quickly enough to meaningfully enforce the constraint; if it is too high, the algorithm will overcorrect in response to constraint violations and behave too conservatively. We experimented with a relaxed learning rate, \u03b1 = 0.001, and an aggressive learning rate, \u03b1 = 0.01. The aggressive learning rate performed better in our experiments, so all of our reported results are for \u03b1 = 0.01.\nSelecting the correct learning rate can be challenging; the need to do this is obviated by CPO."}], "references": [{"title": "Constrained Markov Decision Processes", "author": ["Altman", "Eitan"], "venue": "pp. 260,", "citeRegEx": "Altman and Eitan.,? \\Q1999\\E", "shortCiteRegEx": "Altman and Eitan.", "year": 1999}, {"title": "Safe Policy Search for Lifelong Reinforcement Learning with Sublinear Regret", "author": ["Bou Ammar", "Haitham", "Tutunov", "Rasul", "Eaton", "Eric"], "venue": "International Conference on Machine Learning,", "citeRegEx": "Ammar et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ammar et al\\.", "year": 2015}, {"title": "Subgradient methods", "author": ["Boyd", "Stephen", "Xiao", "Lin", "Mutapcic", "Almir"], "venue": "Lecture Notes of Stanford EE392,", "citeRegEx": "Boyd et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Boyd et al\\.", "year": 2003}, {"title": "Risk-Constrained Reinforcement Learning with Percentile Risk Criteria", "author": ["Chow", "Yinlam", "Ghavamzadeh", "Mohammad", "Janson", "Lucas", "Pavone", "Marco"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Chow et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Chow et al\\.", "year": 2015}, {"title": "Information Theory: Coding Theorems for Discrete Memoryless Systems", "author": ["I Csiszar", "J. K\u00f6rner"], "venue": "Book, 244:452,", "citeRegEx": "Csiszar and K\u00f6rner,? \\Q1981\\E", "shortCiteRegEx": "Csiszar and K\u00f6rner", "year": 1981}, {"title": "Benchmarking Deep Reinforcement Learning for Continuous Control", "author": ["Duan", "Yan", "Chen", "Xi", "Schulman", "John", "Abbeel", "Pieter"], "venue": "The 33rd International Conference on Machine Learning (ICML", "citeRegEx": "Duan et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Duan et al\\.", "year": 2016}, {"title": "A Comprehensive Survey on Safe Reinforcement Learning", "author": ["Garc\u0131\u0301a", "Javier", "Fern\u00e1ndez", "Fernando"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Garc\u0131\u0301a et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Garc\u0131\u0301a et al\\.", "year": 2015}, {"title": "Q-Prop: Sample-Efficient Policy Gradient with An Off-Policy Critic", "author": ["Gu", "Shixiang", "Lillicrap", "Timothy", "Ghahramani", "Zoubin", "Turner", "Richard E", "Levine", "Sergey"], "venue": "In International Conference on Learning Representations,", "citeRegEx": "Gu et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2017}, {"title": "Probabilistically Safe Policy Transfer", "author": ["Held", "David", "Mccarthy", "Zoe", "Zhang", "Michael", "Shentu", "Fred", "Abbeel", "Pieter"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "Held et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Held et al\\.", "year": 2017}, {"title": "Doubly Robust Off-policy Value Evaluation for Reinforcement Learning", "author": ["Jiang", "Nan", "Li", "Lihong"], "venue": "International Conference on Machine Learning,", "citeRegEx": "Jiang et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Jiang et al\\.", "year": 2015}, {"title": "Approximately Optimal Approximate Reinforcement Learning", "author": ["Kakade", "Sham", "Langford", "John"], "venue": "Proceedings of the 19th International Conference on Machine Learning,", "citeRegEx": "Kakade et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Kakade et al\\.", "year": 2002}, {"title": "End-to-End Training of Deep Visuomotor Policies", "author": ["Levine", "Sergey", "Finn", "Chelsea", "Darrell", "Trevor", "Abbeel", "Pieter"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Levine et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Levine et al\\.", "year": 2016}, {"title": "Continuous control with deep reinforcement learning", "author": ["Lillicrap", "Timothy P", "Hunt", "Jonathan J", "Pritzel", "Alexander", "Heess", "Nicolas", "Erez", "Tom", "Tassa", "Yuval", "Silver", "David", "Wierstra", "Daan"], "venue": "In International Conference on Learning Representations,", "citeRegEx": "Lillicrap et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Lillicrap et al\\.", "year": 2016}, {"title": "Combating Deep Reinforcement Learning\u2019s Sisyphean Curse with Intrinsic Fear", "author": ["Lipton", "Zachary C", "Gao", "Jianfeng", "Li", "Lihong", "Chen", "Jianshu", "Deng"], "venue": "In arXiv,", "citeRegEx": "Lipton et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Lipton et al\\.", "year": 2004}, {"title": "Human-level control through deep reinforcement learning", "author": ["Dharshan", "Wierstra", "Daan", "Legg", "Shane", "Hassabis", "Demis"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "Dharshan et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Dharshan et al\\.", "year": 2015}, {"title": "Asynchronous Methods for Deep Reinforcement Learning", "author": ["Mnih", "Volodymyr", "Badia", "Adri\u00e0 Puigdom\u00e8nech", "Mirza", "Mehdi", "Graves", "Alex", "Lillicrap", "Timothy P", "Harley", "Tim", "Silver", "David", "Kavukcuoglu", "Koray"], "venue": "URL http://arxiv.org/abs/1602", "citeRegEx": "Mnih et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2016}, {"title": "Safe Exploration in Markov Decision Processes", "author": ["Moldovan", "Teodor Mihai", "Abbeel", "Pieter"], "venue": "Proceedings of the 29th International Conference on Machine Learning,", "citeRegEx": "Moldovan et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Moldovan et al\\.", "year": 2012}, {"title": "Reinforcement learning of motor skills with policy gradients", "author": ["Peters", "Jan", "Schaal", "Stefan"], "venue": "Neural Networks,", "citeRegEx": "Peters et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Peters et al\\.", "year": 2008}, {"title": "Safe Policy Iteration", "author": ["Pirotta", "Matteo", "Restelli", "Marcello", "Calandriello", "Daniele"], "venue": "Proceedings of the 30th International Conference on Machine Learning,", "citeRegEx": "Pirotta et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Pirotta et al\\.", "year": 2013}, {"title": "Trust Region Policy Optimization", "author": ["Schulman", "John", "Moritz", "Philipp", "Jordan", "Michael", "Abbeel", "Pieter"], "venue": "International Conference on Machine Learning,", "citeRegEx": "Schulman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2015}, {"title": "High-Dimensional Continuous Control Using Generalized Advantage Estimation", "author": ["Schulman", "John", "Moritz", "Philipp", "Levine", "Sergey", "Jordan", "Michael", "Abbeel", "Pieter"], "venue": null, "citeRegEx": "Schulman et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2016}, {"title": "Safe, Multi-Agent, Reinforcement Learning for Autonomous Driving. arXiv, 2016", "author": ["Shalev-Shwartz", "Shai", "Shammah", "Shaked", "Shashua", "Amnon"], "venue": "URL http: //arxiv.org/abs/1610.03295", "citeRegEx": "Shalev.Shwartz et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Shalev.Shwartz et al\\.", "year": 2016}, {"title": "Mastering the game of Go with deep neural networks and tree search", "author": ["Sutskever", "Ilya", "Lillicrap", "Timothy", "Leach", "Madeleine", "Kavukcuoglu", "Koray", "Graepel", "Thore", "Hassabis", "Demis"], "venue": null, "citeRegEx": "Sutskever et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2016}, {"title": "Introduction to Reinforcement Learning", "author": ["Sutton", "Richard S", "Barto", "Andrew G"], "venue": "ISSN 10743529", "citeRegEx": "Sutton et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 1996}, {"title": "Constrained reinforcement learning from intrinsic and extrinsic rewards", "author": ["Uchibe", "Eiji", "Doya", "Kenji"], "venue": "IEEE 6th International Conference on Development and Learning, ICDL,", "citeRegEx": "Uchibe et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Uchibe et al\\.", "year": 2007}], "referenceMentions": [{"referenceID": 15, "context": "Recent advances in policy search algorithms (Mnih et al., 2016; Schulman et al., 2015; Lillicrap et al., 2016; Levine et al., 2016) have enabled new capabilities in highdimensional control, but do not consider the constrained setting.", "startOffset": 44, "endOffset": 131}, {"referenceID": 19, "context": "Recent advances in policy search algorithms (Mnih et al., 2016; Schulman et al., 2015; Lillicrap et al., 2016; Levine et al., 2016) have enabled new capabilities in highdimensional control, but do not consider the constrained setting.", "startOffset": 44, "endOffset": 131}, {"referenceID": 12, "context": "Recent advances in policy search algorithms (Mnih et al., 2016; Schulman et al., 2015; Lillicrap et al., 2016; Levine et al., 2016) have enabled new capabilities in highdimensional control, but do not consider the constrained setting.", "startOffset": 44, "endOffset": 131}, {"referenceID": 11, "context": "Recent advances in policy search algorithms (Mnih et al., 2016; Schulman et al., 2015; Lillicrap et al., 2016; Levine et al., 2016) have enabled new capabilities in highdimensional control, but do not consider the constrained setting.", "startOffset": 44, "endOffset": 131}, {"referenceID": 19, "context": ", 2015; 2016), robot locomotion and manipulation (Schulman et al., 2015; Levine et al., 2016; Lillicrap et al., 2016), and even Go at the human grandmaster level (Silver et al.", "startOffset": 49, "endOffset": 117}, {"referenceID": 11, "context": ", 2015; 2016), robot locomotion and manipulation (Schulman et al., 2015; Levine et al., 2016; Lillicrap et al., 2016), and even Go at the human grandmaster level (Silver et al.", "startOffset": 49, "endOffset": 117}, {"referenceID": 12, "context": ", 2015; 2016), robot locomotion and manipulation (Schulman et al., 2015; Levine et al., 2016; Lillicrap et al., 2016), and even Go at the human grandmaster level (Silver et al.", "startOffset": 49, "endOffset": 117}, {"referenceID": 15, "context": "Currently, policy search algorithms enjoy state-of-theart performance on high-dimensional control tasks (Mnih et al., 2016; Duan et al., 2016).", "startOffset": 104, "endOffset": 142}, {"referenceID": 5, "context": "Currently, policy search algorithms enjoy state-of-theart performance on high-dimensional control tasks (Mnih et al., 2016; Duan et al., 2016).", "startOffset": 104, "endOffset": 142}, {"referenceID": 3, "context": "Heuristic algorithms for policy search in CMDPs have been proposed (Uchibe & Doya, 2007), and approaches based on primal-dual methods can be shown to converge to constraint-satisfying policies (Chow et al., 2015), but there is currently no approach for policy search in continuous CMDPs that guarantees every policy during learning will satisfy constraints.", "startOffset": 193, "endOffset": 212}, {"referenceID": 18, "context": "This result, which is of independent interest, tightens known bounds for policy search using trust regions (Kakade & Langford, 2002; Pirotta et al., 2013; Schulman et al., 2015), and provides a tighter connection between the theory and practice of policy search for deep RL.", "startOffset": 107, "endOffset": 177}, {"referenceID": 19, "context": "This result, which is of independent interest, tightens known bounds for policy search using trust regions (Kakade & Langford, 2002; Pirotta et al., 2013; Schulman et al., 2015), and provides a tighter connection between the theory and practice of policy search for deep RL.", "startOffset": 107, "endOffset": 177}, {"referenceID": 1, "context": "Bou Ammar et al. (2015) propose a theoretically-motivated policy gradient method for lifelong learning with safety constraints, but their method involves an expensive inner loop optimization of a semi-definite program, making it unsuited for the deep RL setting.", "startOffset": 4, "endOffset": 24}, {"referenceID": 1, "context": "Bou Ammar et al. (2015) propose a theoretically-motivated policy gradient method for lifelong learning with safety constraints, but their method involves an expensive inner loop optimization of a semi-definite program, making it unsuited for the deep RL setting. Their method also assumes that safety constraints are linear in policy parameters, which is limiting. Chow et al. (2015) propose a primal-dual subgradient method for risk-constrained reinforcement learning which takes policy gradient steps on an objective that trades off return with risk, while simultaneously learning the trade-off coefficients (dual variables).", "startOffset": 4, "endOffset": 384}, {"referenceID": 8, "context": "Held et al. (2017) study the problem for robotic manipulation, but the assumptions they make restrict the applicability of their methods.", "startOffset": 0, "endOffset": 19}, {"referenceID": 8, "context": "Held et al. (2017) study the problem for robotic manipulation, but the assumptions they make restrict the applicability of their methods. Lipton et al. (2017) use an \u2018intrinsic fear\u2019 heuristic, as opposed to constraints, to motivate agents to avoid rare but catastrophic events.", "startOffset": 0, "endOffset": 159}, {"referenceID": 8, "context": "Held et al. (2017) study the problem for robotic manipulation, but the assumptions they make restrict the applicability of their methods. Lipton et al. (2017) use an \u2018intrinsic fear\u2019 heuristic, as opposed to constraints, to motivate agents to avoid rare but catastrophic events. Shalev-Shwartz et al. (2016) avoid the problem of enforcing constraints on parametrized policies by decomposing \u2018desires\u2019 from trajectory planning; the neural network policy learns desires for behavior, while the trajectory planning algorithm (which is not learned) selects final behavior and enforces safety constraints.", "startOffset": 0, "endOffset": 308}, {"referenceID": 19, "context": "When the objective is estimated by linearizing around \u03c0k as J(\u03c0k) + g (\u03b8 \u2212 \u03b8k), g is the policy gradient, and the standard policy gradient update is obtained by choosing D(\u03c0, \u03c0k) = \u2016\u03b8 \u2212 \u03b8k\u20162 (Schulman et al., 2015).", "startOffset": 191, "endOffset": 214}, {"referenceID": 5, "context": "When using sampling to compute policy updates, as is typically done in high-dimensional control (Duan et al., 2016), this requires off-policy evaluation, which is known to be challenging (Jiang & Li, 2015).", "startOffset": 96, "endOffset": 115}, {"referenceID": 19, "context": "In this work, we take a different approach, motivated by recent methods for trust region optimization (Schulman et al., 2015).", "startOffset": 102, "endOffset": 125}, {"referenceID": 18, "context": "This result, which is of independent interest, extends the works of (Kakade & Langford, 2002), (Pirotta et al., 2013), and (Schulman et al.", "startOffset": 95, "endOffset": 117}, {"referenceID": 19, "context": ", 2013), and (Schulman et al., 2015), providing tighter bounds.", "startOffset": 13, "endOffset": 36}, {"referenceID": 5, "context": "As we show later, it also relates the theoretical bounds for trust region policy improvement with the actual trust region algorithms that have been demonstrated to be successful in practice (Duan et al., 2016).", "startOffset": 190, "endOffset": 209}, {"referenceID": 18, "context": "to get a second factor of maxsDTV (\u03c0\u2032||\u03c0)[s], we recover (up to assumption-dependent factors) the bounds given by Pirotta et al. (2013) as Corollary 3.", "startOffset": 114, "endOffset": 136}, {"referenceID": 18, "context": "to get a second factor of maxsDTV (\u03c0\u2032||\u03c0)[s], we recover (up to assumption-dependent factors) the bounds given by Pirotta et al. (2013) as Corollary 3.6, and by Schulman et al. (2015) as Theorem 1a.", "startOffset": 114, "endOffset": 184}, {"referenceID": 19, "context": "Trust region algorithms for reinforcement learning (Schulman et al., 2015; 2016) have policy updates of the form", "startOffset": 51, "endOffset": 80}, {"referenceID": 5, "context": "This is important for optimizing neural network policies, which are known to suffer from performance collapse after bad updates (Duan et al., 2016).", "startOffset": 128, "endOffset": 147}, {"referenceID": 19, "context": "Despite the approximation, trust region steps usually give monotonic improvements (Schulman et al., 2015; Duan et al., 2016) and have shown state-of-the-art performance in the deep RL setting (Duan et al.", "startOffset": 82, "endOffset": 124}, {"referenceID": 5, "context": "Despite the approximation, trust region steps usually give monotonic improvements (Schulman et al., 2015; Duan et al., 2016) and have shown state-of-the-art performance in the deep RL setting (Duan et al.", "startOffset": 82, "endOffset": 124}, {"referenceID": 5, "context": ", 2016) and have shown state-of-the-art performance in the deep RL setting (Duan et al., 2016; Gu et al., 2017), making the approach appealing for developing policy search methods for CMDPs.", "startOffset": 75, "endOffset": 111}, {"referenceID": 7, "context": ", 2016) and have shown state-of-the-art performance in the deep RL setting (Duan et al., 2016; Gu et al., 2017), making the approach appealing for developing policy search methods for CMDPs.", "startOffset": 75, "endOffset": 111}, {"referenceID": 19, "context": "Like (Schulman et al., 2015), we approximately compute them using the conjugate gradient method.", "startOffset": 5, "endOffset": 28}, {"referenceID": 2, "context": "In primal-dual optimization (PDO), dual variables are stateful and learned concurrently with the primal variables (Boyd et al., 2003).", "startOffset": 114, "endOffset": 133}, {"referenceID": 2, "context": "Our method has similar policy updates to primal-dual methods like those proposed by Chow et al. (2015), but crucially, we differ in computing the dual variables (the Lagrange multipliers for the constraints).", "startOffset": 84, "endOffset": 103}, {"referenceID": 5, "context": "Our experiments are implemented in rllab (Duan et al., 2016).", "startOffset": 41, "endOffset": 60}, {"referenceID": 19, "context": "To benchmark the environments, we also include TRPO (trust region policy optimization) (Schulman et al., 2015), a stateof-the-art unconstrained reinforcement learning algorithm.", "startOffset": 87, "endOffset": 110}], "year": 2017, "abstractText": "For many applications of reinforcement learning it can be more convenient to specify both a reward function and constraints, rather than trying to design behavior through the reward function. For example, systems that physically interact with or around humans should satisfy safety constraints. Recent advances in policy search algorithms (Mnih et al., 2016; Schulman et al., 2015; Lillicrap et al., 2016; Levine et al., 2016) have enabled new capabilities in highdimensional control, but do not consider the constrained setting. We propose Constrained Policy Optimization (CPO), the first general-purpose policy search algorithm for constrained reinforcement learning with guarantees for near-constraint satisfaction at each iteration. Our method allows us to train neural network policies for high-dimensional control while making guarantees about policy behavior all throughout training. Our guarantees are based on a new theoretical result, which is of independent interest: we prove a bound relating the expected returns of two policies to an average divergence between them. We demonstrate the effectiveness of our approach on simulated robot locomotion tasks where the agent must satisfy constraints motivated by safety.", "creator": "LaTeX with hyperref package"}}}