{"id": "1706.02275", "review": {"conference": "nips", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jun-2017", "title": "Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments", "abstract": "We explore deep attaching learning methodology for commercial - allen domains. We keep by analyzing set handle of traditional predefined 20 the multi - boss same: Q - approaches is acknowledged ago an inherent non - dsm-v of form environment, while policies inverse suffers to instead amplitude without likely not the number of criminals growth. We coming present an adaptation of chaplin - scientist methods those opposed supporting policies of other armed however for able meant returned 'd championed that require exist umbrella - agent hand-eye. Additionally, reason rules took exercises placebo tools no garde though policies for each agent that leads if alone robust ambitious - agent support. We show the strength of rest thinking 2.3 to specific methods held expand actually others more consistent assessing, and associate cattle are able could wonder simultaneously physical and informational understanding possibilities.", "histories": [["v1", "Wed, 7 Jun 2017 17:35:00 GMT  (3408kb,D)", "http://arxiv.org/abs/1706.02275v1", null], ["v2", "Wed, 21 Jun 2017 22:18:54 GMT  (3408kb,D)", "http://arxiv.org/abs/1706.02275v2", null]], "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.NE", "authors": ["ryan lowe", "yi wu", "aviv tamar", "jean harb", "pieter abbeel", "igor mordatch"], "accepted": true, "id": "1706.02275"}, "pdf": {"name": "1706.02275.pdf", "metadata": {"source": "CRF", "title": "Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments", "authors": ["Ryan Lowe", "Yi Wu"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Reinforcement learning (RL) has recently been applied to solve challenging problems, from game playing [23, 28] to robotics [18]. In industrial applications, RL is emerging as a practical component in large scale systems such as data center cooling [1]. Most of the successes of RL have been in single agent domains, where modelling or predicting the behaviour of other actors in the environment is largely unnecessary.\nHowever, there are a number of important applications that involve interaction between multiple agents, where emergent behavior and complexity arise from agents co-evolving together. For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain. Related problems, such as variants of hierarchical reinforcement learning [6] can also be seen as a multi-agent system, with multiple levels of hierarchy being equivalent to multiple agents. Additionally, multi-agent self-play has recently been shown to be a useful training paradigm [28, 30]. Successfully scaling RL to environments with multiple agents is crucial to building artificially intelligent systems that can productively interact with humans and each other.\nUnfortunately, traditional reinforcement learning approaches such as Q-Learning or policy gradient are poorly suited to multi-agent environments. One issue is that each agent\u2019s policy is changing as training progresses, and the environment becomes non-stationary from the perspective of any individual agent (in a way that is not explainable by changes in the agent\u2019s own policy). This presents learning stability challenges and prevents the straightforward use of past experience replay, which is\n\u2217Equal contribution.\nar X\niv :1\n70 6.\n02 27\n5v 1\n[ cs\n.L G\n] 7\ncrucial for stabilizing deep Q-learning. Policy gradient methods, on the other hand, usually exhibit very high variance when coordination of multiple agents is required. Alternatively, one can use modelbased policy optimization which can learn optimal policies via back-propagation, but this requires a (differentiable) model of the world dynamics and assumptions about the interactions between agents. Applying these methods to competitive environments is also challenging from an optimization perspective, as evidenced by the notorious instability of adversarial training methods [11].\nIn this work, we propose a general-purpose multi-agent learning algorithm that: (1) leads to learned policies that only use local information (i.e. their own observations) at execution time, (2) does not assume a differentiable model of the environment dynamics or any particular structure on the communication method between agents, and (3) is applicable not only to cooperative interaction but to competitive or mixed interaction involving both physical and communicative behavior. The ability to act in mixed cooperative-competitive environments may be critical for intelligent agents; while competitive training provides a natural curriculum for learning [30], agents must also exhibit cooperative behavior (e.g. with humans) at execution time.\nWe adopt the framework of centralized training with decentralized execution, allowing the policies to use extra information to ease training, so long as this information is not used at test time. It is unnatural to do this with Q-learning without making additional assumptions about the structure of the environment, as the Q function generally cannot contain different information at training and test time. Thus, we propose a simple extension of actor-critic policy gradient methods where the critic is augmented with extra information about the policies of other agents, while the actor only has access to local information. After training is completed, only the local actors are used at execution phase, acting in a decentralized manner and equally applicable in cooperative and competitive settings.\nSince the centralized critic function explicitly uses the decision-making policies of other agents, we additionally show that agents can learn approximate models of other agents online and effectively use them in their own policy learning procedure. We also introduce a method to improve the stability of multi-agent policies by training agents with an ensemble of policies, thus requiring robust interaction with a variety of collaborator and competitor policies. We empirically show the success of our approach compared to existing methods in cooperative as well as competitive scenarios, where agent populations are able to discover complex physical and communicative coordination strategies."}, {"heading": "2 Related Work", "text": "The simplest approach to learning in multi-agent settings is to use independently learning agents. This was attempted with Q-learning in [34], but does not perform well in practice [22]. As we will show, independently-learning policy gradient methods also perform poorly. One issue is that each agent\u2019s policy changes during training, resulting in a non-stationary environment and preventing the na\u00efve application of experience replay. Previous work has attempted to address this by inputting other agent\u2019s policy parameters to the Q function [35], explicitly adding the iteration index to the replay buffer, or using importance sampling [9], but these approaches had mixed empirical success. Deep Q-learning approaches have previously been investigated in [33] to train competing Pong agents.\nThe nature of interaction between agents can either be cooperative, competitive, or both and many algorithms are designed only for a particular nature of interaction. Most studied are cooperative settings, with strategies such as optimistic and hysteretic Q function updates [15, 21, 25], which assume that the actions of other agents are made to improve collective reward. Another approach is to indirectly arrive at cooperation via sharing of policy parameters [12], but this requires a homogeneous agent population. These algorithms are not applicable in competitive or mixed settings. Concurrently to our work, [7] proposed a similar idea of using policy gradient methods with a centralized critic, and test their approach on a StarCraft micromanagement task. See [26, 4] for surveys of multi-agent learning approaches and applications.\nRecent work has focused on learning grounded cooperative communication protocols between agents to solve various tasks [29, 8, 24]. However, these methods assume a known model of the world dynamics, and are usually only applicable when the interaction between agents is focused over a dedicated, differentiable communication channel.\nOur method requires explicitly modeling decision-making process of other agents. The importance of such modeling has been recognized by both reinforcement learning [3, 5] and cognitive science communities [10]. [13] stressed the importance of being robust to the decision making process of\nother agents, as do others by building Bayesian models of decision making. We incorporate such robustness considerations by requiring that agents interact successfully with an ensemble of any possible policies of other agents, improving training stability and robustness of agents after training."}, {"heading": "3 Background", "text": "Markov Games In this work, we consider a multi-agent extension of Markov decision processes (MDPs) called partially observable Markov games [19]. A Markov game for N agents is defined by a set of states S describing the possible configurations of all agents, a set of actions A1, ...,AN and a set of observations O1, ...,ON for each agent. To choose actions, each agent i uses a stochastic policy \u03c0\u03b8i : Oi\u00d7Ai 7\u2192 [0, 1], which produces the next state according to the state transition function T : S \u00d7 A1 \u00d7 ...\u00d7AN 7\u2192 S.2 Each agent i obtains rewards as a function of the state and agent\u2019s action ri : S \u00d7 Ai 7\u2192 R, and receives a private observation correlated with the state oi : S 7\u2192 Oi. The initial states are determined by a distribution \u03c1 : S 7\u2192 [0, 1]. Each agent i aims to maximize its own total expected return Ri = \u2211T t=0 \u03b3 trti where \u03b3 is a discount factor and T is the time horizon.\nQ-Learning and Deep Q-Networks (DQN). Q-Learning and DQN [23] are popular methods in reinforcement learning and have been previously applied to multi-agent settings [8, 35]. Q-Learning makes use of an action-value function for policy \u03c0 as Q\u03c0(s, a) = E[R|st = s, at = a]. This Q function can be recursively rewritten as Q\u03c0(s, a) = Es\u2032 [r(s, a) + \u03b3Ea\u2032\u223c\u03c0 [Q\u03c0(s\u2032, a\u2032)]]. DQN learns the action-value function Q\u2217 corresponding to the optimal policy by minimizing the loss:\nL(\u03b8) = Es,a,r,s\u2032 [(Q\u2217(s, a|\u03b8)\u2212 y)2], where y = r + \u03b3max a\u2032 Q\u0304\u2217(s\u2032, a\u2032), (1)\nwhere Q\u0304 is a target Q function whose parameters are periodically updated with the most recent \u03b8, which helps stabilize learning. Another crucial component of stabilizing DQN is the use of an experience replay buffer D containing tuples (s, a, r, s\u2032). Q-Learning can be directly applied to multi-agent settings by having each agent i learn an independently optimal function Qi [34]. However, because agents are independently updating their policies as learning progresses, the environment appears non-stationary from the view of any one agent, violating Markov assumptions required for convergence of Q-learning. Another difficulty observed in [9] is that the experience replay buffer cannot be used in such a setting since in general, P (s\u2032|s, a,\u03c01, ...,\u03c0N ) 6= P (s\u2032|s, a,\u03c0 \u20321, ...,\u03c0 \u2032N ) when any \u03c0i 6= \u03c0 \u2032i.\nPolicy Gradient (PG) Algorithms. Policy gradient methods are another popular choice for a variety of RL tasks. The main idea is to directly adjust the parameters \u03b8 of the policy in order to maximize the objective J(\u03b8) = Es\u223cp\u03c0 ,a\u223c\u03c0\u03b8 [R] by taking steps in the direction of \u2207\u03b8J(\u03b8). Using the Q function defined previously, the gradient of the policy can be written as [32]:\n\u2207\u03b8J(\u03b8) = Es\u223cp\u03c0 ,a\u223c\u03c0\u03b8 [\u2207\u03b8 log\u03c0\u03b8(a|s)Q\u03c0(s, a)], (2)\nwhere p\u03c0 is the state distribution. The policy gradient theorem has given rise to several practical algorithms, which often differ in how they estimate Q\u03c0 . For example, one can simply use a sample return Rt = \u2211T i=t \u03b3\ni\u2212tri, which leads to the REINFORCE algorithm [37]. Alternatively, one could learn an approximation of the true action-value functionQ\u03c0(s, a) by e.g. temporal-difference learning [31]; this Q\u03c0(s, a) is called the critic and leads to a variety of actor-critic algorithms [31].\nPolicy gradient methods are known to exhibit high variance gradient estimates. This is exacerbated in multi-agent settings; since an agent\u2019s reward usually depends on the actions of many agents, the reward conditioned only on the agent\u2019s own actions (when the actions of other agents are not considered in the agent\u2019s optimization process) exhibits much more variability, thereby increasing the variance of its gradients. Below, we show a simple setting where the probability of taking a gradient step in the correct direction decreases exponentially with the number of agents.\nProposition 1. Consider N agents with binary actions: P (ai = 1) = \u03b8i, where R(a1, . . . , aN ) = 1a1=\u00b7\u00b7\u00b7=aN . We assume an uninformed scenario, in which agents are initialized to \u03b8i = 0.5 \u2200i. Then, if we are estimating the gradient of the cost J with policy gradient, we have:\n2To minimize notation we will often omit \u03b8 from the subscript of \u03c0 .\nP (\u3008\u2207\u0302J,\u2207J\u3009 > 0) \u221d (0.5)N\nwhere \u2207\u0302J is the policy gradient estimator from a single sample, and\u2207J is the true gradient.\nProof. See Appendix.\nThe use of baselines, such as value function baselines typically used to ameliorate high variance, is problematic in multi-agent settings due to the non-stationarity issues mentioned previously.\nDeterministic Policy Gradient (DPG) Algorithms. It is also possible to extend the policy gradient framework to deterministic policies \u00b5\u03b8 : S 7\u2192 A. In particular, under certain conditions we can write the gradient of the objective J(\u03b8) = Es\u223cp\u00b5 [R(s, a)] as:\n\u2207\u03b8J(\u03b8) = Es\u223cD[\u2207\u03b8\u00b5\u03b8(a|s)\u2207aQ\u00b5(s, a)|a=\u00b5\u03b8(s)] (3)\nSince this theorem relies on\u2207aQ\u00b5(s, a), it requires that the action space A (and thus the policy \u00b5) be continuous.\nDeep deterministic policy gradient (DDPG) is a variant of DPG where the policy \u00b5 and critic Q\u00b5 are approximated with deep neural networks. DDPG is an off-policy algorithm, and samples trajectories from a replay buffer of experiences that are stored throughout training. DDPG also makes use of a target network, as in DQN [23]."}, {"heading": "4 Methods", "text": "4.1 Multi-Agent Actor Critic\n.. ..\n.. ..\nm 1\nm N\nc 1\nc N\nl 1\nl M\nc\nl\na\nC\na\nb\npool\npool\nFC\nFC\nFC\nFC\nFC\n\u03c0\no a\nagent 1\n. . .\nQ\n\u03c0\no a\nagent N\nQ\nexecution\ntraining\n. . .\n. . . 1\nN\nN 1\n1 N\nFigure 1: Overview of our multi-agent decentralized actor, centralized critic approach.\nWe have argued in the previous section that na\u00efve policy gradient methods perform poorly in simple multi-agent settings, and this is supported in our experiments in Section 5. Our goal in this section is to derive an algorithm that works well in such settings. However, we would like to operate under the following constraints: (1) the learned policies can only use local information (i.e. their own observations) at execution time, (2) we do not assume a differentiable model of the environment dynamics, unlike in [24], and (3) we do not assume any particular structure on\nthe communication method between agents (that is, we don\u2019t assume a differentiable communication channel). Fulfilling the above desiderata would provide a general-purpose multi-agent learning algorithm that could be applied not just to cooperative games with explicit communication channels, but competitive games and games involving only physical interactions between agents.\nSimilarly to [8], we accomplish our goal by adopting the framework of centralized training with decentralized execution. Thus, we allow the policies to use extra information to ease training, so long as this information is not used at test time. It is unnatural to do this with Q-learning, as the Q function generally cannot contain different information at training and test time. Thus, we propose a simple extension of actor-critic policy gradient methods where the critic is augmented with extra information about the policies of other agents.\nMore concretely, consider a game with N agents with policies parameterized by \u03b8 = {\u03b81, ..., \u03b8N}, and let \u03c0 = {\u03c01, ...,\u03c0N} be the set of all agent policies. Then we can write the gradient of the expected return for agent i, J(\u03b8i) = E[Ri] as:\n\u2207\u03b8iJ(\u03b8i) = Es\u223cp\u00b5 ,ai\u223c\u03c0i [\u2207\u03b8i log\u03c0i(ai|oi)Q\u03c0i (x, a1, ..., aN )]. (4)\nHere Q\u03c0i (x, a1, ..., aN ) is a centralized action-value function that takes as input the actions of all agents, a1, . . . , aN , in addition to some state information x, and outputs the Q-value for agent i. In the simplest case, x could consist of the observations of all agents, x = (o1, ..., oN ), however we\ncould also include additional state information if available. Since each Q\u03c0i is learned separately, agents can have arbitrary reward structures, including conflicting rewards in a competitive setting.\nWe can extend the above idea to work with deterministic policies. If we now consider N continuous policies \u00b5\u03b8i w.r.t. parameters \u03b8i (abbreviated as \u00b5i), the gradient can be written as:\n\u2207\u03b8iJ(\u00b5i) = Ex,a\u223cD[\u2207\u03b8i\u00b5i(ai|oi)\u2207aiQ \u00b5 i (x, a1, ..., aN )|ai=\u00b5i(oi)], (5)\nHere the experience replay buffer D contains the tuples (x,x\u2032, a1, . . . , aN , r1, . . . , rN ), recording experiences of all agents. The centralized action-value function Q\u00b5i is updated as:\nL(\u03b8i) = Ex,a,r,x\u2032 [(Q\u00b5i (x, a1, . . . , aN )\u2212 y) 2], y = ri + \u03b3 Q\n\u00b5\u2032\ni (x \u2032, a\u20321, . . . , a \u2032 N ) \u2223\u2223 a\u2032j=\u00b5 \u2032 j(oj) , (6)\nwhere \u00b5\u2032 = {\u00b5\u03b8\u20321 , ...,\u00b5\u03b8\u2032N } is the set of target policies with delayed parameters \u03b8 \u2032 i. As shown in Section 5, we find the centralized critic with deterministic policies works very well in practice, and refer to it as multi-agent deep deterministic policy gradient (MADDPG). We provide the description of the full algorithm in the Appendix.\nA primary motivation behind MADDPG is that, if we know the actions taken by all agents, the environment is stationary even as the policies change, since P (s\u2032|s, a1, ..., aN ,\u03c01, ...,\u03c0N ) = P (s\u2032|s, a1, ..., aN ) = P (s\u2032|s, a1, ..., aN ,\u03c0 \u20321, ...,\u03c0 \u2032N ) for any \u03c0i 6= \u03c0 \u2032i. This is not the case if we do not explicitly condition on the actions of other agents, as done for most traditional RL methods.\nNote that we require the policies of other agents to apply an update in Eq. 6. Knowing the observations and policies of other agents is not a particularly restrictive assumption; if our goal is to train agents to exhibit complex communicative behaviour in simulation, this information is often available to all agents. However, we can relax this assumption if necessary by learning the policies of other agents from observations \u2014 we describe a method of doing this in Section 4.2."}, {"heading": "4.2 Inferring Policies of Other Agents", "text": "To remove the assumption of knowing other agents\u2019 policies, as required in Eq. 6, each agent i can additionally maintain an approximation \u00b5\u0302\u03c6ji (where \u03c6 are the parameters of the approximation; henceforth \u00b5\u0302ji ) to the true policy of agent j, \u00b5j . This approximate policy is learned by maximizing the log probability of agent j\u2019s actions, with an entropy regularizer:\nL(\u03c6ji ) = \u2212Eoj ,aj [ log \u00b5\u0302ji (aj |oj) + \u03bbH(\u00b5\u0302 j i ) ] , (7)\nwhere H is the entropy of the policy distribution. With the approximate policies, y in Eq. 6 can be replaced by an approximate value y\u0302 calculated as follows:\ny\u0302 = ri + \u03b3Q \u00b5\u2032 i (x \u2032, \u00b5\u0302\u20321i (o1), . . . ,\u00b5 \u2032 i(oi), . . . , \u00b5\u0302 \u2032N i (oN )), (8)\nwhere \u00b5\u0302\u2032ji denotes the target network for the approximate policy \u00b5\u0302 j i . Note that Eq. 7 can be optimized in a completely online fashion: before updating Q\u00b5i , the centralized Q function, we take the latest samples of each agent j from the replay buffer to perform a single gradient step to update \u03c6ji . Note also that, in the above equation, we input the action log probabilities of each agent directly into Q, rather than sampling."}, {"heading": "4.3 Agents with Policy Ensembles", "text": "As previously mentioned, a recurring problem in multi-agent reinforcement learning is the environment non-stationarity due to the agents\u2019 changing policies. This is particularly true in competitive settings, where agents can derive a strong policy by overfitting to the behavior of their competitors. Such policies are undesirable as they are brittle and may fail when the competitors alter their strategies.\nTo obtain multi-agent policies that are more robust to changes in the policy of competing agents, we propose to train a collection of K different sub-policies. At each episode, we randomly select one particular sub-policy for each agent to execute. Suppose that policy \u00b5i is an ensemble of K different sub-policies with sub-policy k denoted by \u00b5\n\u03b8 (k) i (denoted as \u00b5(k)i ). For agent i, we are then maximizing the ensemble objective: Je(\u00b5i) = Ek\u223cunif(1,K),s\u223cp\u00b5 ,a\u223c\u00b5(k)i [Ri(s, a)] .\nSince different sub-policies will be executed in different episodes, we maintain a replay buffer D(k)i for each sub-policy \u00b5(k)i of agent i. Accordingly, we can derive the gradient of the ensemble objective with respect to \u03b8(k)i as follows:\n\u2207 \u03b8 (k) i Je(\u00b5i) =\n1\nK E x,a\u223cD(k)i [ \u2207 \u03b8 (k) i log\u00b5 (k) i (ai|oi)\u2207aiQ \u00b5i (x, a1, . . . , aN ) \u2223\u2223\u2223 ai=\u00b5 (k) i (oi) ] . (9)\n5 Experiments1"}, {"heading": "5.1 Environments", "text": "To perform our experiments, we adopt the grounded communication environment proposed in [24], which consists of N agents and L landmarks inhabiting a two-dimensional world with continuous space and discrete time. Agents may take physical actions in the environment and communication actions that get broadcasted to other agents. Unlike [24], we do not assume that all agents have identical action and observation spaces, or act according to the same policy \u03c0 . We also consider games that are both cooperative (all agents must maximize a shared return) and competitive (agents have conflicting goals). Some environments require explicit communication between agents in order to achieve the best reward, while in other environments agents can only perform physical actions. We provide details for each environment below.\nspeaker\nlistener\u201cgreen\u201d\nagent 1\nagent 3\nlandmark\nlandmark\nlandmark\np\nv\nc\nagent 2\npredator 1\nprey\npredator 2\npredator 3\nagent 1 agent 2\nagent 3\nagent 1 agent 2\nadversary\n?\nFigure 2: Illustrations of the experimental environment and some tasks we consider, including a) Cooperative Communication b) Predator-Prey c) Cooperative Navigation d) Physical Deception. See webpage for videos of all experimental results.\nCooperative communication. This task consists of two cooperative agents, a speaker and a listener, who are placed in an environment with three landmarks of differing colors. At each episode, the listener must navigate to a landmark of a particular color, and obtains reward based on its distance to the correct landmark. However, while the listener can observe the relative position and color of the landmarks, it does not know which landmark it must navigate to. Conversely, the speaker\u2019s observation consists of the correct landmark color, and it can produce a communication output at each time step which is observed by the listener. Thus, the speaker must learn to output the landmark colour based on the motions of the listener. Although this problem is relatively simple, as we show in Section 5.2 it poses a significant challenge to traditional RL algorithms.\nCooperative navigation. In this environment, agents must cooperate through physical actions to reach a set of L landmarks. Agents observe the relative positions of other agents and landmarks, and are collectively rewarded based on the proximity of any agent to each landmark. In other words, the agents have to \u2018cover\u2019 all of the landmarks. Further, the agents occupy significant physical space and are penalized when colliding with each other. Our agents learn to infer the landmark they must cover, and move there while avoiding other agents.\nKeep-away. This scenario consists of L landmarks including a target landmark, N cooperating agents who know the target landmark and are rewarded based on their distance to the target, and M adversarial agents who must prevent the cooperating agents from reaching the target. Adversaries accomplish this by physically pushing the agents away from the landmark, temporarily occupying it. While the adversaries are also rewarded based on their distance to the target landmark, they do not know the correct target; this must be inferred from the movements of the agents.\nPhysical deception. Here, N agents cooperate to reach a single target landmark from a total of N landmarks. They are rewarded based on the minimum distance of any agent to the target (so only one\n1 Videos of our experimental results can be viewed at https://sites.google.com/site/multiagentac/\nagent needs to reach the target landmark). However, a lone adversary also desires to reach the target landmark; the catch is that the adversary does not know which of the landmarks is the correct one. Thus the cooperating agents, who are penalized based on the adversary distance to the target, learn to spread out and cover all landmarks so as to deceive the adversary.\nPredator-prey. In this variant of the classic predator-prey game, N slower cooperating agents must chase the faster adversary around a randomly generated environment with L large landmarks impeding the way. Each time the cooperative agents collide with an adversary, the agents are rewarded while the adversary is penalized. Agents observe the relative positions and velocities of the agents, and the positions of the landmarks.\nCovert communication. This is an adversarial communication environment, where a speaker agent (\u2018Alice\u2019) must communicate a message to a listener agent (\u2018Bob\u2019), who must reconstruct the message at the other end. However, an adversarial agent (\u2018Eve\u2019) is also observing the channel, and wants to reconstruct the message \u2014 Alice and Bob are penalized based on Eve\u2019s reconstruction, and thus Alice must encode her message using a randomly generated key, known only to Alice and Bob. This is similar to the cryptography environment considered in [2]."}, {"heading": "5.2 Comparison to Traditional Reinforcement Learning Methods", "text": "We implement our MADDPG algorithm and evaluate it on the environments presented in Section 5.1. Unless otherwise specified, our policies are parameterized by a two-layer ReLU MLP with 64 units per layer. To support discrete communication messages, we use the Gumbel-Softmax estimator [14]. To evaluate the quality of policies learned in competitive settings, we pitch MADDPG agents against DDPG agents, and compare the resulting success of the agents and adversaries in the environment. We train our models until convergence, and then evaluate them by averaging various metrics for 1000 further iterations. We provide the tables and details of our results (including hyperparameters) on all environments in the Appendix, and summarize them here.\nWe first examine the cooperative communication scenario. Despite the simplicity of the task (the speaker only needs to learn to output its observation), traditional RL methods such as DQN, Actor-Critic, a first-order implementation of TRPO, and DDPG all fail to learn the correct behaviour (measured by whether the listener is within a short distance from the target landmark). In practice we observed that the listener learns to ignore the speaker and simply moves to the middle of all observed landmarks. We plot the learning curves over 25000 episodes for various approaches in Figure 4.\nWe hypothesize that a primary reason for the failure of traditional RL methods in this (and\nother) multi-agent settings is the lack of a consistent gradient signal. For example, if the speaker utters the correct symbol while the listener moves in the wrong direction, the speaker is penalized. This problem is exacerbated as the number of time steps grows: we observed that traditional policy gradient methods can learn when the objective of the listener is simply to reconstruct the observation of the speaker in a single time step, or if the initial positions of agents and landmarks are fixed and evenly distributed. This indicates that many of the multi-agent methods previously proposed for scenarios with short time horizons (e.g. [16]) may not generalize to more complex tasks.\nthe cooperating DDPG agents, who are unable to deceive MADDPG adversaries in any scenario, and do not even deceive other DDPG agents when L = 4.\nWhile the cooperative navigation and predator-prey tasks have a less stark divide between success and failure, in both cases the MADDPG agents outperform the DDPG agents. In cooperative navigation, MADDPG agents have a slightly smaller average distance to each landmark, but have almost half the average number of collisions per episode (when N = 2) compared to DDPG agents due to the ease of coordination. Similarly, MADDPG predators are far more successful at chasing DDPG prey (16.1 collisions/episode) than the converse (10.3 collisions/episode).\nIn the covert communication environment, we found that Bob trained with both MADDPG and DDPG out-performs Eve in terms of reconstructing Alice\u2019s message. However, Bob trained with\nMADDPG achieves a larger relative success rate compared with DDPG (52.4% to 25.1%). Further, only Alice trained with MADDPG can encode her message such that Eve achieves near-random reconstruction accuracy. The learning curve (a sample plot is shown in Appendix) shows that the oscillation due to the competitive nature of the environment often cannot be overcome with common decentralized RL methods. We emphasize that we do not use any of the tricks required for the cryptography environment from [2], including modifying Eve\u2019s loss function, alternating agent and adversary training, and using a hybrid \u2018mix & transform\u2019 feed-forward and convolutional architecture."}, {"heading": "5.3 Effect of Learning Polices of Other Agents", "text": "We evaluate the effectiveness of learning the policies of other agents in the cooperative communication environment, following the same hyperparameters as the previous experiments and setting \u03bb = 0.001 in Eq. 7. The results are shown in Figure 7. We observe that despite not fitting the policies of other agents perfectly (in particular, the approximate listener policy learned by the speaker has a fairly large KL divergence to the true policy), learning with approximated policies is able to achieve the same success rate as using the true policy, without a significant slowdown in convergence."}, {"heading": "5.4 Effect of Training with Policy Ensembles", "text": "We focus on the effectiveness of policy ensembles in competitive environments, including keep-away, cooperative navigation, and predator-prey. We choose K = 3 sub-policies for the keep-away and cooperative navigation environments, and K = 2 for predator-prey. To improve convergence speed, we enforce that the cooperative agents should have the same policies at each episode, and similarly for the adversaries. To evaluate the approach, we measure the performance of ensemble policies and single policies in the roles of both agent and adversary. The results are shown on the right side of Figure 3. We observe that agents with policy ensembles are stronger than those with a single policy. In particular, when pitting ensemble agents against single policy adversaries (second to left bar cluster), the ensemble agents outperform the adversaries by a large margin compared to when the roles are reversed (third to left bar cluster)."}, {"heading": "6 Conclusions and Future Work", "text": "We have proposed a multi-agent policy gradient algorithm where agents learn a centralized critic based on the observations and actions of all agents. Empirically, our method outperforms traditional RL algorithms on a variety of cooperative and competitive multi-agent environments. We can further improve the performance of our method by training agents with an ensemble of policies, an approach we believe to be generally applicable to any multi-agent algorithm.\nOne downside to our approach is that the input space of Q grows linearly (depending on what information is contained in x) with the number of agents N . This could be remedied in practice by, for example, having a modular Q function that only considers agents in a certain neighborhood of a given agent. We leave this investigation to future work."}, {"heading": "Acknowledgements", "text": "The authors would like to thank Jacob Andreas, Smitha Milli, Jack Clark, and others at OpenAI and UC Berkeley for interesting discussions related to this paper, as well as Jakub Pachocki, Yura Burda, and Joelle Pineau for comments on the paper draft. We thank Tambet Matiisen for providing the code base that was used for some early experiments associated with this paper. Ryan Lowe is supported in part by a Vanier CGS Scholarship and the Samsung Advanced Institute of Technology. Finally, we\u2019d like to thank OpenAI for fostering an engaging and productive research environment."}], "references": [{"title": "Learning to protect communications with adversarial neural cryptography", "author": ["M. Abadi", "D.G. Andersen"], "venue": "arXiv preprint arXiv:1610.06918", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning conventions in multiagent stochastic domains using likelihood estimates", "author": ["C. Boutilier"], "venue": "Proceedings of the Twelfth international conference on Uncertainty in artificial intelligence, pages 106\u2013114. Morgan Kaufmann Publishers Inc.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1996}, {"title": "A comprehensive survey of multiagent reinforcement learning", "author": ["L. Busoniu", "R. Babuska", "B. De Schutter"], "venue": "IEEE Transactions on Systems Man and Cybernetics Part C Applications and Reviews, 38(2):156", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2008}, {"title": "Coordination in multiagent reinforcement learning: a bayesian approach", "author": ["G. Chalkiadakis", "C. Boutilier"], "venue": "Proceedings of the second international joint conference on Autonomous agents and multiagent systems, pages 709\u2013716. ACM", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2003}, {"title": "Feudal reinforcement learning", "author": ["P. Dayan", "G.E. Hinton"], "venue": "Advances in neural information processing systems, pages 271\u2013271. Morgan Kaufmann Publishers", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1993}, {"title": "Counterfactual multi-agent policy gradients", "author": ["J. Foerster", "G. Farquhar", "T. Afouras", "N. Nardelli", "S. Whiteson"], "venue": "arXiv preprint arXiv:1705.08926", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2017}, {"title": "N", "author": ["J.N. Foerster", "Y.M. Assael"], "venue": "de Freitas, and S. Whiteson. Learning to communicate with deep multi-agent reinforcement learning. CoRR, abs/1605.06676", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2016}, {"title": "Stabilising experience replay for deep multi-agent reinforcement learning", "author": ["J.N. Foerster", "N. Nardelli", "G. Farquhar", "P.H.S. Torr", "P. Kohli", "S. Whiteson"], "venue": "CoRR, abs/1702.08887", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2017}, {"title": "Predicting pragmatic reasoning in language games", "author": ["M.C. Frank", "N.D. Goodman"], "venue": "Science, 336(6084):998\u2013998", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Generative adversarial nets", "author": ["I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio"], "venue": "Advances in neural information processing systems, pages 2672\u20132680", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Cooperative multi-agent control using deep reinforcement learning", "author": ["J.K. Gupta", "M. Egorov", "M. Kochenderfer"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2017}, {"title": "Online learning about other agents in a dynamic multiagent system", "author": ["J. Hu", "M.P. Wellman"], "venue": "Proceedings of the Second International Conference on Autonomous Agents, AGENTS \u201998, pages 239\u2013246, New York, NY, USA", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1998}, {"title": "Categorical reparameterization with gumbel-softmax", "author": ["E. Jang", "S. Gu", "B. Poole"], "venue": "arXiv preprint arXiv:1611.01144", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2016}, {"title": "An algorithm for distributed reinforcement learning in cooperative multi-agent systems", "author": ["M. Lauer", "M. Riedmiller"], "venue": "In Proceedings of the Seventeenth International Conference on Machine Learning, pages 535\u2013542. Morgan Kaufmann", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2000}, {"title": "Multi-agent cooperation and the emergence of (natural) language", "author": ["A. Lazaridou", "A. Peysakhovich", "M. Baroni"], "venue": "arXiv preprint arXiv:1612.07182", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2016}, {"title": "Multi-agent reinforcement learning in sequential social dilemmas", "author": ["J.Z. Leibo", "V.F. Zambaldi", "M. Lanctot", "J. Marecki", "T. Graepel"], "venue": "CoRR, abs/1702.03037", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2017}, {"title": "End-to-end training of deep visuomotor policies", "author": ["S. Levine", "C. Finn", "T. Darrell", "P. Abbeel"], "venue": "arXiv preprint arXiv:1504.00702", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "Markov games as a framework for multi-agent reinforcement learning", "author": ["M.L. Littman"], "venue": "Proceedings of the eleventh international conference on machine learning, volume 157, pages 157\u2013163", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1994}, {"title": "et al", "author": ["L. Matignon", "L. Jeanpierre", "A.-I. Mouaddib"], "venue": "Coordinated multi-robot exploration under communication constraints using decentralized markov decision processes. In AAAI", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Hysteretic q-learning: an algorithm for decentralized reinforcement learning in cooperative multi-agent teams", "author": ["L. Matignon", "G.J. Laurent", "N. Le Fort-Piat"], "venue": "Intelligent Robots and Systems, 2007. IROS 2007. IEEE/RSJ International Conference on, pages 64\u201369. IEEE", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2007}, {"title": "Independent reinforcement learners in cooperative markov games: a survey regarding coordination problems", "author": ["L. Matignon", "G.J. Laurent", "N. Le Fort-Piat"], "venue": "The Knowledge Engineering Review, 27(01):1\u201331", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2012}, {"title": "et al", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski"], "venue": "Human-level control through deep reinforcement learning. Nature, 518(7540):529\u2013533", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Emergence of grounded compositional language in multi-agent populations", "author": ["I. Mordatch", "P. Abbeel"], "venue": "arXiv preprint arXiv:1703.04908", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2017}, {"title": "Deep decentralized multi-task multi-agent reinforcement learning under partial observability", "author": ["S. Omidshafiei", "J. Pazis", "C. Amato", "J.P. How", "J. Vian"], "venue": "CoRR, abs/1703.06182", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2017}, {"title": "Cooperative multi-agent learning: The state of the art", "author": ["L. Panait", "S. Luke"], "venue": "Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2005}, {"title": "Multiagent bidirectionallycoordinated nets for learning to play starcraft combat games", "author": ["P. Peng", "Q. Yuan", "Y. Wen", "Y. Yang", "Z. Tang", "H. Long", "J. Wang"], "venue": "CoRR, abs/1703.10069", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2017}, {"title": "G", "author": ["D. Silver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre"], "venue": "van den Driessche, J. Schrittwieser, I. Antonoglou, V. Panneershelvam, M. Lanctot, S. Dieleman, D. Grewe, J. Nham, N. Kalchbrenner, I. Sutskever, T. Lillicrap, M. Leach, K. Kavukcuoglu, T. Graepel, and D. Hassabis. Mastering the game of Go with deep neural networks and tree search. Nature, 529(7587):484 \u2013 489", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2016}, {"title": "et al", "author": ["S. Sukhbaatar", "R. Fergus"], "venue": "Learning multiagent communication with backpropagation. In Advances in Neural Information Processing Systems, pages 2244\u20132252", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2016}, {"title": "Intrinsic motivation and automatic curricula via asymmetric self-play", "author": ["S. Sukhbaatar", "I. Kostrikov", "A. Szlam", "R. Fergus"], "venue": "arXiv preprint arXiv:1703.05407", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2017}, {"title": "Reinforcement learning: An introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": "volume 1. MIT press Cambridge", "citeRegEx": "31", "shortCiteRegEx": null, "year": 1998}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["R.S. Sutton", "D.A. McAllester", "S.P. Singh", "Y. Mansour"], "venue": "Advances in neural information processing systems, pages 1057\u20131063", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2000}, {"title": "Multiagent cooperation and competition with deep reinforcement learning", "author": ["A. Tampuu", "T. Matiisen", "D. Kodelja", "I. Kuzovkin", "K. Korjus", "J. Aru", "J. Aru", "R. Vicente"], "venue": "PloS one, 12(4):e0172395", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2017}, {"title": "Multi-agent reinforcement learning: Independent vs", "author": ["M. Tan"], "venue": "cooperative agents. In Proceedings of the tenth international conference on machine learning, pages 330\u2013337", "citeRegEx": "34", "shortCiteRegEx": null, "year": 1993}, {"title": "Extending q-learning to general adaptive multi-agent systems", "author": ["G. Tesauro"], "venue": "Advances in neural information processing systems, pages 871\u2013878", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2004}, {"title": "Conjugate markov decision processes", "author": ["P.S. Thomas", "A.G. Barto"], "venue": "Proceedings of the 28th International Conference on Machine Learning (ICML-11), pages 137\u2013144", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2011}, {"title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "author": ["R.J. Williams"], "venue": "Machine learning, 8(3-4):229\u2013256", "citeRegEx": "37", "shortCiteRegEx": null, "year": 1992}], "referenceMentions": [{"referenceID": 21, "context": "Reinforcement learning (RL) has recently been applied to solve challenging problems, from game playing [23, 28] to robotics [18].", "startOffset": 103, "endOffset": 111}, {"referenceID": 26, "context": "Reinforcement learning (RL) has recently been applied to solve challenging problems, from game playing [23, 28] to robotics [18].", "startOffset": 103, "endOffset": 111}, {"referenceID": 16, "context": "Reinforcement learning (RL) has recently been applied to solve challenging problems, from game playing [23, 28] to robotics [18].", "startOffset": 124, "endOffset": 128}, {"referenceID": 18, "context": "For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain.", "startOffset": 33, "endOffset": 37}, {"referenceID": 27, "context": "For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain.", "startOffset": 83, "endOffset": 94}, {"referenceID": 6, "context": "For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain.", "startOffset": 83, "endOffset": 94}, {"referenceID": 22, "context": "For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain.", "startOffset": 83, "endOffset": 94}, {"referenceID": 25, "context": "For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain.", "startOffset": 114, "endOffset": 118}, {"referenceID": 15, "context": "For example, multi-robot control [20], the discovery of communication and language [29, 8, 24], multiplayer games [27], and the analysis of social dilemmas [17] all operate in a multi-agent domain.", "startOffset": 156, "endOffset": 160}, {"referenceID": 4, "context": "Related problems, such as variants of hierarchical reinforcement learning [6] can also be seen as a multi-agent system, with multiple levels of hierarchy being equivalent to multiple agents.", "startOffset": 74, "endOffset": 77}, {"referenceID": 26, "context": "Additionally, multi-agent self-play has recently been shown to be a useful training paradigm [28, 30].", "startOffset": 93, "endOffset": 101}, {"referenceID": 28, "context": "Additionally, multi-agent self-play has recently been shown to be a useful training paradigm [28, 30].", "startOffset": 93, "endOffset": 101}, {"referenceID": 9, "context": "Applying these methods to competitive environments is also challenging from an optimization perspective, as evidenced by the notorious instability of adversarial training methods [11].", "startOffset": 179, "endOffset": 183}, {"referenceID": 28, "context": "The ability to act in mixed cooperative-competitive environments may be critical for intelligent agents; while competitive training provides a natural curriculum for learning [30], agents must also exhibit cooperative behavior (e.", "startOffset": 175, "endOffset": 179}, {"referenceID": 32, "context": "This was attempted with Q-learning in [34], but does not perform well in practice [22].", "startOffset": 38, "endOffset": 42}, {"referenceID": 20, "context": "This was attempted with Q-learning in [34], but does not perform well in practice [22].", "startOffset": 82, "endOffset": 86}, {"referenceID": 33, "context": "Previous work has attempted to address this by inputting other agent\u2019s policy parameters to the Q function [35], explicitly adding the iteration index to the replay buffer, or using importance sampling [9], but these approaches had mixed empirical success.", "startOffset": 107, "endOffset": 111}, {"referenceID": 7, "context": "Previous work has attempted to address this by inputting other agent\u2019s policy parameters to the Q function [35], explicitly adding the iteration index to the replay buffer, or using importance sampling [9], but these approaches had mixed empirical success.", "startOffset": 202, "endOffset": 205}, {"referenceID": 31, "context": "Deep Q-learning approaches have previously been investigated in [33] to train competing Pong agents.", "startOffset": 64, "endOffset": 68}, {"referenceID": 13, "context": "Most studied are cooperative settings, with strategies such as optimistic and hysteretic Q function updates [15, 21, 25], which assume that the actions of other agents are made to improve collective reward.", "startOffset": 108, "endOffset": 120}, {"referenceID": 19, "context": "Most studied are cooperative settings, with strategies such as optimistic and hysteretic Q function updates [15, 21, 25], which assume that the actions of other agents are made to improve collective reward.", "startOffset": 108, "endOffset": 120}, {"referenceID": 23, "context": "Most studied are cooperative settings, with strategies such as optimistic and hysteretic Q function updates [15, 21, 25], which assume that the actions of other agents are made to improve collective reward.", "startOffset": 108, "endOffset": 120}, {"referenceID": 10, "context": "Another approach is to indirectly arrive at cooperation via sharing of policy parameters [12], but this requires a homogeneous agent population.", "startOffset": 89, "endOffset": 93}, {"referenceID": 5, "context": "Concurrently to our work, [7] proposed a similar idea of using policy gradient methods with a centralized critic, and test their approach on a StarCraft micromanagement task.", "startOffset": 26, "endOffset": 29}, {"referenceID": 24, "context": "See [26, 4] for surveys of multi-agent learning approaches and applications.", "startOffset": 4, "endOffset": 11}, {"referenceID": 2, "context": "See [26, 4] for surveys of multi-agent learning approaches and applications.", "startOffset": 4, "endOffset": 11}, {"referenceID": 27, "context": "Recent work has focused on learning grounded cooperative communication protocols between agents to solve various tasks [29, 8, 24].", "startOffset": 119, "endOffset": 130}, {"referenceID": 6, "context": "Recent work has focused on learning grounded cooperative communication protocols between agents to solve various tasks [29, 8, 24].", "startOffset": 119, "endOffset": 130}, {"referenceID": 22, "context": "Recent work has focused on learning grounded cooperative communication protocols between agents to solve various tasks [29, 8, 24].", "startOffset": 119, "endOffset": 130}, {"referenceID": 1, "context": "The importance of such modeling has been recognized by both reinforcement learning [3, 5] and cognitive science communities [10].", "startOffset": 83, "endOffset": 89}, {"referenceID": 3, "context": "The importance of such modeling has been recognized by both reinforcement learning [3, 5] and cognitive science communities [10].", "startOffset": 83, "endOffset": 89}, {"referenceID": 8, "context": "The importance of such modeling has been recognized by both reinforcement learning [3, 5] and cognitive science communities [10].", "startOffset": 124, "endOffset": 128}, {"referenceID": 11, "context": "[13] stressed the importance of being robust to the decision making process of", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "Markov Games In this work, we consider a multi-agent extension of Markov decision processes (MDPs) called partially observable Markov games [19].", "startOffset": 140, "endOffset": 144}, {"referenceID": 21, "context": "Q-Learning and DQN [23] are popular methods in reinforcement learning and have been previously applied to multi-agent settings [8, 35].", "startOffset": 19, "endOffset": 23}, {"referenceID": 6, "context": "Q-Learning and DQN [23] are popular methods in reinforcement learning and have been previously applied to multi-agent settings [8, 35].", "startOffset": 127, "endOffset": 134}, {"referenceID": 33, "context": "Q-Learning and DQN [23] are popular methods in reinforcement learning and have been previously applied to multi-agent settings [8, 35].", "startOffset": 127, "endOffset": 134}, {"referenceID": 32, "context": "Q-Learning can be directly applied to multi-agent settings by having each agent i learn an independently optimal function Qi [34].", "startOffset": 125, "endOffset": 129}, {"referenceID": 7, "context": "Another difficulty observed in [9] is that the experience replay buffer cannot be used in such a setting since in general, P (s\u2032|s, a,\u03c01, .", "startOffset": 31, "endOffset": 34}, {"referenceID": 30, "context": "Using the Q function defined previously, the gradient of the policy can be written as [32]: \u2207\u03b8J(\u03b8) = Es\u223cp\u03c0 ,a\u223c\u03c0\u03b8 [\u2207\u03b8 log\u03c0\u03b8(a|s)Q(s, a)], (2) where p is the state distribution.", "startOffset": 86, "endOffset": 90}, {"referenceID": 35, "context": "For example, one can simply use a sample return R = \u2211T i=t \u03b3 ri, which leads to the REINFORCE algorithm [37].", "startOffset": 104, "endOffset": 108}, {"referenceID": 29, "context": "temporal-difference learning [31]; this Q(s, a) is called the critic and leads to a variety of actor-critic algorithms [31].", "startOffset": 29, "endOffset": 33}, {"referenceID": 29, "context": "temporal-difference learning [31]; this Q(s, a) is called the critic and leads to a variety of actor-critic algorithms [31].", "startOffset": 119, "endOffset": 123}, {"referenceID": 21, "context": "DDPG also makes use of a target network, as in DQN [23].", "startOffset": 51, "endOffset": 55}, {"referenceID": 22, "context": "their own observations) at execution time, (2) we do not assume a differentiable model of the environment dynamics, unlike in [24], and (3) we do not assume any particular structure on the communication method between agents (that is, we don\u2019t assume a differentiable communication channel).", "startOffset": 126, "endOffset": 130}, {"referenceID": 6, "context": "Similarly to [8], we accomplish our goal by adopting the framework of centralized training with decentralized execution.", "startOffset": 13, "endOffset": 16}, {"referenceID": 22, "context": "To perform our experiments, we adopt the grounded communication environment proposed in [24], which consists of N agents and L landmarks inhabiting a two-dimensional world with continuous space and discrete time.", "startOffset": 88, "endOffset": 92}, {"referenceID": 22, "context": "Unlike [24], we do not assume that all agents have identical action and observation spaces, or act according to the same policy \u03c0 .", "startOffset": 7, "endOffset": 11}, {"referenceID": 0, "context": "This is similar to the cryptography environment considered in [2].", "startOffset": 62, "endOffset": 65}, {"referenceID": 12, "context": "To support discrete communication messages, we use the Gumbel-Softmax estimator [14].", "startOffset": 80, "endOffset": 84}, {"referenceID": 14, "context": "[16]) may not generalize to more complex tasks.", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "We emphasize that we do not use any of the tricks required for the cryptography environment from [2], including modifying Eve\u2019s loss function, alternating agent and adversary training, and using a hybrid \u2018mix & transform\u2019 feed-forward and convolutional architecture.", "startOffset": 97, "endOffset": 100}], "year": 2017, "abstractText": "We explore deep reinforcement learning methods for multi-agent domains. We begin by analyzing the difficulty of traditional algorithms in the multi-agent case: Q-learning is challenged by an inherent non-stationarity of the environment, while policy gradient suffers from a variance that increases as the number of agents grows. We then present an adaptation of actor-critic methods that considers action policies of other agents and is able to successfully learn policies that require complex multiagent coordination. Additionally, we introduce a training regimen utilizing an ensemble of policies for each agent that leads to more robust multi-agent policies. We show the strength of our approach compared to existing methods in cooperative as well as competitive scenarios, where agent populations are able to discover various physical and informational coordination strategies.", "creator": "LaTeX with hyperref package"}}}