{"id": "1708.06376", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Aug-2017", "title": "Automated Feature Extraction for Website Fingerprinting through Deep Learning", "abstract": "Several studies have visible more a network traffic that is considerable by similar visit whether a anonymous over Tor narrator adding rather even created press keep form timing some varying of network transmits. By advancing pedestrian traces between users and even Tor entry guard, without access eavesdropper can promise this casares - data however identify within website Tor users example washington. The ultimately all such bomb partially depends on three regard set whose traffic variety that each used them construct the fingerprint. Typically, other characters are instantaneously engineered under, be such, explain possible introduced on the Tor network example incapable several carefully constructed contemporary ineffective. In this paper, but show that has adversary can proofreading the unique manufacturing possible, and otherwise using deanonymize Tor causing by applying anything screenplay function technology sunday beneath learning. We respond sense essentially on instead beamline comprised between none although left million network findings, which name place significant anonymized in web traffic ever gathered for twitter fingerprinting, but find yet another performance achieved recent deep mental techniques rather comparable to known methods for called ranging focus concerted spanning some providing began. Furthermore, it eliminates after find and feature design and selection itself is after torturous work them has it either one for main focus of exception but. We conclude we the could may registration accessible but most evaluate stopped includes and perform accurate bound determination makes our hard developed related useful strong designed, flexible and stabilizing technique for edition copying.", "histories": [["v1", "Mon, 21 Aug 2017 18:32:08 GMT  (461kb,D)", "http://arxiv.org/abs/1708.06376v1", null]], "reviews": [], "SUBJECTS": "cs.CR cs.LG", "authors": ["vera rimmer", "davy preuveneers", "marc juarez", "tom van goethem", "wouter joosen"], "accepted": false, "id": "1708.06376"}, "pdf": {"name": "1708.06376.pdf", "metadata": {"source": "META", "title": "Automated Feature Extraction for Website Fingerprinting through Deep Learning", "authors": ["Vera Rimmer", "Davy Preuveneers", "Marc Juarez", "Tom Van Goethem", "Wouter Joosen"], "emails": ["firstname.lastname@cs.kuleuven.be", "marc.juarez@esat.kuleuven.be"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nThe Onion Router (Tor) is a communication tool that provides anonymity to Internet users. It is an actively developed and well-secured system that ensures the privacy of its users\u2019 browsing activities. To this purpose, Tor encrypts the contents and addressing information of communications, and directs the encrypted traffic through a randomly assigned route of nodes such that only a single node knows its immediate peers, but never the origin and destination of a communication at the same time. Tor\u2019s architecture thus prevents ISPs and local network observers from identifying the websites the user visits.\nAs a result of previous research on Tor privacy, a serious side-channel of Tor network traffic was revealed that allowed a local adversary to infer which websites were visited by a particular user [16]. The identifying information leaks from the meta-data of the communication, more precisely the directions and sizes of encrypted network packets. As this side-channel information is often unique for a specific\nwebsite, it can be leveraged to form a unique fingerprint, thus allowing network eavesdroppers to reveal which website was visited based on an obtained traffic trace. The feasibility of Website Fingerprinting (WF) attacks on Tor was assessed in a series of studies [20], [25], [26], [31], [32]. In the related works, the attack is treated as a classification problem. This problem is solved by, first, manually engineering features of traffic traces and then classifying these features with stateof-practice machine learning algorithms. Proposed approaches have been shown to achieve a classification accuracy of 91- 96% correctly recognized websites [15], [25], [30] in a set of 100 websites with about as many traces per website. Their works show that finding distinctive features is essential for accurate recognition of websites. Moreover, it becomes more challenging for the adversary with changes introduced in the network protocol [6], [10], [21]. The WF research community thus far has not investigated the success of an attacker who automates the feature extraction step for classification. This is the key problem that we address in this work.\nAn essential step of applied machine learning is feature engineering. It maps the raw input data into a feature space, outlining the most important information to the learning model. Constructing and selecting the most relevant features directs the learning model towards the best solution to the problem, but at the same time, the feature extraction and selection is a difficult and time-consuming manual procedure. Prior work on WF indicates that the main effort in deploying a WF attack lies in composing and selecting the most salient features for deanonymization. Authors use various techniques to manually construct features that cover the main characteristics of traffic traces, and then perform sophisticated analysis in order to assess the importance of different feature sets for WF.\nThis work addresses the challenge of manual feature engineering in the context of WF attacks in Tor. This crucial but tedious step of previously proposed attacks has several significant drawbacks and weaknesses. First of all, revealing these features requires deep insight into the underlying network protocols that generate the data. Consequently, the engineered features become more and more sophisticated with each newly proposed approach. And most importantly, manual feature engineering does not scale: any change in input data\nar X\niv :1\n70 8.\n06 37\n6v 1\n[ cs\n.C R\n] 2\n1 A\nug 2\nsubject to analysis will trigger the need to restart the whole search for fingerprints from the beginning. Specifically, any countermeasure to traffic analysis introduced in Tor might render some previously acquired identifying features ineffective. Another realistic cause of ineffective features are unpredictable changes in network conditions, which distort traffic or disguise the fingerprints, and thus reduce the threat. Furthermore, since the feature engineering step is done manually based on expert knowledge, it leaves an open question whether there exist other, more effective features. In this paper, we show that automatic feature extraction reveals more stable features that have been overlooked in previous research.\nOne of the aims of the WF adversary is to optimize the attack and make it more robust in the presence of defenses or varying network conditions. To this purpose, we investigate deep learning techniques to replace the manual feature engineering step with automatic feature learning: a technique applies a transformation on raw input data to a meaningful representation that can be used for classification. Based on this technique, we propose a novel website fingerprinting attack that: (1) performs automated feature learning to find the website fingerprints from raw traffic traces, and (2) trains a machine learning algorithm to classify the website fingerprints to known website URLs. This paper thus presents a new, automated WF attack based on deep learning and evaluates its effectiveness in the context of prior work.\nThe key contributions of our work are as follows:\n\u2022 Our study provides the first systematic exploration of state-of-the-art deep learning algorithms applied to website fingerprinting, namely feedforward, convolutional and recurrent deep neural networks. We design, tune and evaluate three models \u2013 Stacked Denoising Autoencoder (SDAE), Convolutional Neural Network (CNN) and Long Short-Term Memory (LSTM). Our deep learning models are capable of automatically learning traffic features for website recognition at the expense of using more input data. Moreover, we automate the model selection to find the best network hyperparameters. We demonstrate that our WF attack based on deep learning reaches a high success rate, comparable to the state-of-the-art on WF. Based on our results, we conclude that SDAE and CNN generally perform the best on our data. However, SDAE appears to be more stable compared to CNN, while CNN is more prone to overfitting. LSTM is the best at capturing temporal dynamics, thus revealing the most robust traffic features based on much less data. \u2022 We reevaluate prior work on our dataset and reproduce their results. We find that state-of-the-art WF approaches benefit from using more training data, similar to deep learning (DL). As a result of a systematic comparison of our novel DL-based methods to previous WF approaches for the closed and open world settings, we demonstrate comparable recognition results with slight improvements of up to 2%. Furthermore, we show that our DL attack reveals more general and stable website features than the\nstate-of-the-art methods, which makes them more robust to concept drift caused by highly dynamic web content. \u2022 The dataset collected for the evaluation is the largest website fingerprinting dataset ever gathered to date. Our closed-world dataset consists of 900 websites, with traffic traces generated by 2,500 visits each. Our open-world dataset is based on 400,000 unknown websites and 200 monitored websites. The generated dataset will be made publicly available upon publication of the paper, allowing researchers to replicate our results and systematically evaluate new (DL) approaches.\nThe paper is structured as follows. In Section II, we discuss related work on website fingerprinting and the use of deep learning. Section III presents the threat model and the capabilities an adversary has for website fingerprinting. The data collection process is outlined in detail in Section IV. Section V provides a reevaluation of state-of-the-art attacks on our dataset and the overall deep learning approach and evaluation. We discuss the results and limitations of our work, as well as opportunities for future research, in Section VI. Section VII concludes by summarizing our main findings."}, {"heading": "II. BACKGROUND", "text": "This section reviews recent related work on Tor WF attacks relying on traditional machine learning algorithms, and the application of deep learning.\nAnonymous communications systems such as Tor [12] provide confidentiality of communications and conceal the destination server\u2019s address from network eavesdroppers. However, in the last decade, several studies have shown that, under certain conditions, an attacker can identify the destination website only from encrypted and anonymized traffic.\nIn WF, the adversary collects traffic from his own visits to a set of websites that he is interested in monitoring, visiting each site multiple times. Next, the adversary builds a website template from the traffic traces collected for that site. The templates are built using a supervised learning method that takes the traffic traces labeled as their corresponding site, extracts a number of features that identify the site (the fingerprint of the site) and outputs a statistical model that can be used for classification of new, unseen traffic traces. Finally, the attacker applies the classifier on unlabeled traffic traces collected from communications initiated by the victim and makes a guess based on the output of the classifier. To be able to deploy the attack, the adversary must be able to observe the traffic generated by the victim and be able to identify the user (see Section III for more details on the threat model).\nThe first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16]. In the present, with more than two million daily users [1], Tor has become the de facto standard for anonymous communications.\nThe first attack in Tor was based on a Naive Bayes classifier and the features were the frequency distributions of\npacket lengths [16]. Even though their evaluation showed the attack achieved an average accuracy of 3%, the attack was improved by Panchenko et al. using a Support Vector Machine (SVM) [26]. In addition, Panchenko et al. added new features that were exploiting the distinctive burstiness of web traffic and increased the accuracy of the attack to more than 50% accuracy.\nThese works were succeeded by a series of studies that claimed to boost the attacks and presented attacks with more than 90% success rates. First, Cai et al. [7] used an SVM with their custom kernel based on an edit-distance and achieved more than 86% accuracy for 100 sites. The edit distance allowed for delete and transpose operations, that are supposed to capture drop and retransmission of packets respectively. Following a similar approach, Wang and Goldberg [31] experimented with several custom edit distances and improved Cai et al.\u2019s attack to 91% accuracy for the same dataset.\nHowever, these evaluations have been criticized for making unrealistic assumptions on the experimental settings that give an unfair advantage to the adversary compared to real attack settings [20]. For instance, they evaluated the attacks on small datasets and considered adversaries who can perfectly parse the traffic generated by a web-page visit from all the traffic that blends into the Tor network. Furthermore, they assume users browse pages sequentially on one single browser tab and never interrupt an ongoing page-load. Recent research has developed new techniques to overcome some of these assumptions, suggesting that the attacks may be more practical than previously expected [32].\nThe three last attacks outperform all the attacks described above and, for this reason, we have selected them to compare with our attack. Each attack uses a different classification model and feature sets and work as follows:\nWang-kNN [30]:: this attack is based on a k-Nearest Neighbors (k-NN) classifier with more than 3,000 traffic features. This large amount of features is obtained by varying the parameters of set of fewer feature families. For instance, the number of outgoing packets in spans of X packets and the lengths of the Y packets in the same direction. In order to mitigate the curse of dimensionality, they proposed to weigh the features of a custom distance metric, minimizing the distance among traffic samples that belong to the same site. Their results show that this attack achieves 90% to 95% accuracy on 100 websites [30].\nCUMUL [25]:: CUMUL is based on an SVM with a Radial Basis Function (RBF) kernel. CUMUL uses the cumulative sum of packet lengths to derive the features for the SVM. The cumulative sum is computed by adding the lengths of outgoing packets and subtracting the lengths of incoming packets. However, since the RBF kernel, in contrast to the aforementioned edit-distance based SVM kernel, expects feature vectors to have the same dimension, they interpolated 100 points from the cumulative sums. Furthermore, they prepend the total incoming and outgoing number of packets and bytes. As a result, they ended with 104 features to represent a traffic instance. Their evaluations demonstrate an attack success that\nranges between 90% and 93% for 100 websites. It is worth mentioning that their dataset is the most realistic up to the date, including inner pages of sites that have spikes of popularity such as Google searches or Twitter links. Despite the high success rates of their attack, one of their conclusions is that WF does not scale well.\nk-Fingerprinting (k-FP) [15]:: Hayes and Danezis\u2019s kFP attack is based on Random Forests (RF). Random Forests are ensembles of decision trees that are randomized and averaged so that they can generalize better than simple decision trees. Their feature sets include 175 features developed from features available in prior work, as well as timing features that had not been considered before, such as the number of packets per second. The random forest is not used to classify but as a way to transform these features into a different feature space: they use the leafs of the random forest to encode a new representation of the sites they intent to detect that is relative to all the other sites in their training set. Next, the new representation of the data is fed to a k-NN classifier for the actual classification. Their results show that this attack is as effective as CUMUL and achieves similar accuracy scores for the same number of sites.\nAll these attacks have selected their features mostly based on expertise and their technical knowledge on how Tor and the HTTP protocol work and interact with each other. Some of these works have also used feature selection algorithms that are standard in machine learning literature to determine the relevance of classifier features. For instance, Hayes and Danezis used the random forest classifier to rank their features [15] and previous studies had analyzed traffic features with regard to WF attacks and defenses [6], [13], [26].\nNevertheless, none of these methods provide any guarantees that the feature sets they provide are optimal. Since the features are designed based on heuristics, this leaves an opportunity for improvement by automatically searching for new, perhaps even more effective features for website fingerprinting.\nTo the best of our knowledge, the only research that applies DL to a similar problem is the network protocol recognition on encrypted traffic with a Stacked Denoising Autoencoder (SDAE) done by Wang [34]. His approach achieves a 90% recognition rate, which is a promising indicator for DL application to anonymized traffic.\nThe recent prior attempt to apply a DL-based approach to WF was made by Abe and Goto [2], where they evaluated a SDAE on the Wang-kNN\u2019s dataset. Their classifiers do not outperform the state-of-the-art, but nevertheless achieve a convincing 88% on a closed world of 100 classes. We reevaluated the reported models in Abe and Goto\u2019s paper on the same dataset with support of the authors to confirm their results. It is fair to assume that the lower performance is due to the lack of a sufficient amount of training data for a deep neural network, which, as we confirm later in our paper, is deemed necessary for the DL algorithms. In this paper we explore other deep learning models apart of SDAE and further tune the attacks to perform as accurately as current traditional website fingerprinting attacks."}, {"heading": "III. THREAT MODEL", "text": "In this paper we consider an adversary similar to the one considered in prior work in WF, namely a passive and local network-level adversary. Figure 1 shows an overview of this WF scenario. A passive adversary only records network packets transmitted during the communication and may not modify them or cause them to drop, and may not insert new packets into the stream of packets. A local adversary has a limited view of the network. In particular, in Tor, such an adversary typically owns the entry node to the Tor network (also known as entry guard), or has access to the link between the client and the entry. Examples of entities that have this level of visibility range from Internet Service Providers (ISP), Autonomous Systems (AS) or even local network administrators. Note that an adversary that owns the entry guard can decrypt the first layer of encryption and access Tor protocol messages. In this work, we assume an ISP-level adversary that collects traffic at the TCP layer and infers the cells from TCP packets [31]. Obviously, all work on WF assumes the adversary cannot decrypt the encryption provided by Tor, as message contents would immediately reveal the identity of the website.\nIn the WF literature, it is common for the evaluation of the attack to assume a closed world of websites. This means that the user can only visit pages that the adversary has been able to train on. This assumption, commonly known as the closed-world assumption, has been deemed unrealistic [26] as the size of the Web is so large that an adversary can only train on a tiny fraction of the Web. For this reason, many studies have also evaluated the more realistic open world, where the user is allowed to visit pages that the adversary has not trained on. The closed world is still useful to compare existing attacks and defenses. In this study, we evaluated both the closed world and the open world."}, {"heading": "IV. DATA COLLECTION", "text": "One of the prerequisites for deep learning is an abundance of training data required to truly learn the underlying patterns. Processing sufficient amounts of representative data enables the deep neural network to not only precisely reveal the identifying features but also generalize better to unseen test instances. In prior work on website fingerprinting in the\ncontext of Tor, the datasets that were collected are relatively limited in size, both in terms of classes (i.e. the number of unique websites) as well as instances (i.e. the number of traffic traces per website). To properly evaluate our proposed deep learning approach and explore how existing models can benefit from extra training data, we used a distributed setup to collect various new datasets that accommodate these requirements."}, {"heading": "A. Data collection methodology", "text": "For the data collection process, we used 15 virtual machines on our OpenStack-based private cloud environment. Each VM was provisioned with 4 CPUs and 4GB of RAM. To each VM, 16 worker threads were assigned, which each had their separate tor process (version 0.2.8.11). Page-visit tasks, consisting of starting the Tor browser (version 6.5) and loading the target web page, were then distributed among the 240 concurrent worker threads. Web pages were given 285 seconds to load, before the browser was killed and the visit marked as invalid. Upon loading the page, it was left open for an additional 10 seconds, after which the browser was closed and any profile information was removed.\nBy leveraging network namespaces and tcpdump, we isolated and captured the traffic of each tor process. Due to storage constraints, and since the packet payloads are encrypted and thus do not have value for the adversary, we extract metadata from the traffic trace and discard the encrypted payload. More precisely, we capture (1) the timing information, (2) the direction and (3) the size of the TCP packet. We follow the approach proposed by Wang and Goldberg [31] to extract Tor cells from the captured TCP packets. Our final representation of the traffic trace is a sequence of cells, where each cell is encoded as 1 when transmitted from the client to the website and as \u22121 when captured in the opposite direction. For the purpose of sanity checks and validation, information on the Tor circuit that was used for the page visit is also recorded.\nIt should be noted that, in contrast to prior work [31], the Tor entry guard node was not pinned over the course of our experiments. The reason for this is twofold. First, compared to prior data collection, we use significantly more concurrent processes. If the same entry guard would be used by the 240 browser instances, this could overload the entry guard, possibly affecting the network traces. Second, by using a variety of entry guards, the trained models are agnostic to the intrinsics of a specific entry guard. This means that the model of the adversary is not only applicable in a targeted attack on a single victim, but can be launched against any Tor user."}, {"heading": "B. Datasets", "text": "Since the WF adversary\u2019s goals might vary widely and as there are no statistics about which pages Tor users browse to, there can be no definitive set of sensitive websites for WF research. Moreover, since we aim to compare various approaches with each other, the actual choice of websites is not essential as long as it is consistent. The list of websites we chose for our evaluation comes from the Alexa Top Sites service, the source widely used in prior research on Tor.\nIn total, we evaluate our deep learning approach in comparison with traditional methods on three different datasets. This section details how these datasets were chosen and obtained.\n1) Closed world: For the dataset under the closed world assumption, we collected up to 3,000 network traces for visits to the homepage of the 1,200 most popular websites according to Alexa. The list of popular websites was first filtered to remove duplicate entries that only differ in the TLD, e.g. in the case of google.com and google.de, only the former was included in the list. Data for these 1,200 websites was collected in four iterations, consisting of 300 websites each. An iteration was again split up into 30 batches, with each batch performing 100 network traces per websites. After each batch, the 240 tor processes were restarted and data directories were removed, forcing new circuits to be built with (new) randomly selected entry guards. Network traces for each of the four iterations were collected over approximately 14 days per group, starting from January 2017.\nAfter collecting data on the 3.6 million page visits, we filtered out invalid entries, which were due to a timeout, or a crash of the browser or Selenium driver. Websites with a high amount of invalid page visits were removed from our dataset. Additionally, using the similarity hash of the web page\u2019s HTML content [8] and the perceptual hash of the screenshot [4], we detected and excluded websites with exactly the same content. Moreover, we filtered out websites that had no content, denied all requests coming from Tor, or showed a CAPTCHA for every visit. Finally, we balanced the dataset to ensure the uniform distribution of instances across different sites by fixing the same number of traces for every site. After this filtering process, our biggest closed world dataset consists of 900 websites, with 2,500 valid network traces each. In the remainder of the text, we refer to this dataset as CW900. Similarly, for datasets that are composed of a subset of this one we use a corresponding representation: the datasets for the top 100, 200 and 500 websites are referred to as CW100, CW200 and CW500 respectively.\n2) Revisit over time: For the top 200 websites, we obtained additional periodic measurements. More precisely, for these websites we collected 100 test network traces per website 3 days, 10 days, 4 weeks, 6 weeks and 8 weeks after the end of the initial data collection for these 200 websites. Each test set is collected within one day. As a result, our revisit-overtime dataset provides 500 network traces for each of the top 200 websites collected over a 2-month period (CW200 was collected over 2 weeks).\n3) Open world: Since the open world data is only used for testing purposes (which differs from some of the open world evaluations), we collected only a single instance for each page in the open world. In total, we collected network traces for the top 400,000 of Alexa websites.\nWe collected additional 2,000 test traces for each website of the monitored closed world CW200 (400,000 instances in total). As a result, we conduct the open world evaluation on 800,000 test traffic traces, half from the closed world and half from the open world (a 4-fold increase compared to the largest\ndataset considered in prior work [15], [25]). We provide the motivation for this experimental setting in Section V-B5."}, {"heading": "C. Ethical considerations & data access", "text": "For our data collection experiments, we performed around 4 million page visits over Tor. It is highly unlikely that this had any impact on the top websites, which each receive multiple millions of requests every day. We consider the impact on the Tor network to be limited as well: The Tor Project estimates that during the time we performed our experiments, approximately 2 million clients were concurrently connected to the Tor network. As such, the 240 clients we used are only a minor fraction of the total number of active clients. Furthermore, we plan to make all datasets publicly available upon acceptance of this paper, allowing other researchers to evaluate other approaches without having to collect new data samples."}, {"heading": "V. EVALUATION", "text": "In this section, we conduct a reevaluation of the state-ofthe-art website fingerprinting (WF) methods discussed in the related work of Section II to confirm their reproducibility on our dataset. We then evaluate the proposed attacks based on the three chosen deep learning (DL) algorithms and compare them to the previously known techniques."}, {"heading": "A. Reevaluation of state-of-the-art", "text": "We aim to enable a systematic comparison between our work and that of Wang et al. [30], Panchenko et al. [25] and Hayes et al. [15], not only to guarantee a fair assessment by evaluating on new data, but also to analyze (1) the practical feasibility of the attack on a significantly larger set of websites, (2) the impact of collecting more instances or traces per website on the classification accuracy, and (3) the resilience of trained models to concept drift with a growing time gap between training and testing.\nThe goal of the first closed world experiment is to confirm whether we can reproduce the three WF attacks of prior work [15], [25], [30] and to assert whether we obtain similar classification results as those reported by the respective authors, but on a different training and testing dataset similar in size. We reuse the original implementation of the authors to carry out the feature extraction and subsequently execute the training and testing steps. All results reported in this section are computed via 10-fold cross-validation.\nThe following results were obtained on a Dell PowerEdge R620 server with 2x Intel Xeon E5-2650 CPUs, 64GB of memory and 8 cores on each CPU with hyperthreading, resulting in 32 cores in total each running at 2GHz. Wang\u2019s k-NN based attack ran on a single core as the stochastic gradient descent method to find the best weights for k-NN classification could not be parallelized without sacrificing some classification accuracy. Panchenko\u2019s CUMUL attack trains an SVM model which requires a grid search to find the best C and \u03b3 parameter combination for the RBF kernel. As the native libSVM library is not multi-core enabled, the\nparameter combination tests ran as parallel processes each on a single core, with the time reported being the one of the slowest C and \u03b3 parameter combination test.\nFigure 2 shows the closed world classification accuracy obtained through cross-fold validation for the three traditional WF attacks on a CW100 dataset with 100 traces per website. For the same set of website instances, the k-NN algorithm of Wang et al. reports a classification accuracy of 92.87% on our new data set, whereas the CUMUL algorithm of Panchenko et al. and the k-FP attack by Hayes et al. respectively report accuracy results of 95.43% and 92.47%. The obtained results are in line with those originally reported by the authors themselves albeit on other data sets. For this particular setup, the CUMUL WF attack turned out to be the most successful for accurately classifying website visits.\nIn the second experiment, we evaluate the same traditional methods on 100 websites, but with a growing number of traces per website, to investigate whether the classification accuracy improves significantly when provided with more training data and whether one WF attack method is consistently better than another.\nIn Figure 3, we depict the classification accuracy in a closed world experiment where the number of website instances grows from 100 to 1,000 traces. Our results show that the CUMUL attack consistently outperforms the two other methods. For all methods, the improvement becomes less evident\nafter about 300 website traces. Another interesting observation is that each WF attack \u2212 when given sufficient training data \u2212 converges to a classification accuracy of approximately 96\u221297%. However, we experienced scalability issues with the k-NN based attack by Wang et al., given that the classification running times were at least an order of magnitude higher than those of the CUMUL and k-FP attacks.\nIn a third experiment, we assess how the classification accuracy drops when the number of websites increases for a fixed amount of training instances. Given that the CUMUL attack consistently outperformed the other two methods on our dataset, and was superior in resource consumption, we only report the results for CUMUL. We reevaluate the CUMUL classifier on our closed worlds CW100, CW200, CW500 and CW900 with a fixed number of traffic traces: 300 per website.\nTable I illustrates that the CUMUL attack obtains a reasonable 92.73% 10-fold cross-validation accuracy for 900 websites using 300 instances each, and a parameter combination of log2(C) = 21 and log2(\u03b3) = 5. In general, we observe that the performance degrades gradually with a growing size of the closed world. Moreover, doubling the initial amount of instances gives an advantage of up to 2%, while the amounts higher than 300 stop providing any significant improvement. The biggest weakness is that for each experiment one must execute the grid search to ensure the best classification results, and certain parameter combination tests take a long time to converge with no guarantee of a gain in accuracy.\nTable II gives an overview of the running times (in minutes) to find the best C and \u03b3 parameter values for the RBF kernel. We aborted those experiments where the grid search took more than four days to complete. While there is a trend of increasing values for these parameters with a growing number of websites\nand instances, we could not find a strong correlation that would enable us to eliminate the grid search altogether.\nAs a result, we choose CUMUL as the reference point for comparing our proposed method with the state-of-the art. This decision is driven by the fact that CUMUL performed the best on our closed worlds, and proved to be more practically feasible. We acknowledge that the k-FP attack has the potential to work better in our open world evaluation. However, over the course of our scalability experiments, k-FP did not scale to 50,000 training instances. The experiment consumed more than 64Gb memory and took longer than the allocated 4 days, and thus was aborted.With our open world datasets consisting of 800,000 instances (and 400,000 training instances), such high resource consumption demands strongly limit large scale evaluation. CUMUL on the other hand scales up to 400,000 training instances. Therefore, we further evaluate our DLbased approach in comparison to CUMUL, which outperformed the other traditional WF techniques and which was practically feasible on a larger scale."}, {"heading": "B. Deep Learning for Website Fingerprinting", "text": "Here we provide a detailed outline of our DL-based methodology. DL provides a broad set of powerful machine learning techniques with deep architectures. Deep neural networks (DNN), which underlie DL, exploit many layers of nonlinear mathematical transformations of data for automatic hierarchical feature extraction and selection. DNN demonstrate a superior ability of feature learning for solving a wide variety of tasks. In this study we apply three major types of DNNs to WF: a feedforward SDAE, a convolutional CNN and a recurrent LSTM. Our implementation is done with the Keras DL library under Python [11]. The code and all experimental results will become publicly available upon publication of the paper.\n1) Problem definition: In our proposed method, we follow prior work and formulate WF as a classification problem. Namely, we perform a supervised multinomial classification, where we train a classifier on a set of labeled instances and test the classifier by assigning a label out of a set of multiple possible labels to each unlabeled instance. In WF, a traffic trace t captured from a single visit to a website is an instance of the form (ft, ct), where ft is the feature vector of the traffic trace and ct is the class label that corresponds to the website that generated this traffic. Assuming a closed world of N possible websites, label ct belongs to the set {0, 1, . . . , N\u22121}. As such, we state the WF problem as follows: assign a class label to each anonymous traffic trace in a dataset based on its features.\nThe classifiers used in related work successfully solved this problem by carefully constructing feature vectors, as described in Section II. Our proposed classifier, based on a DNN, integrates feature learning within the training process, enabling it to classify traffic traces simply based on their initial representation. Thus, for a DL classifier, the form of the input instance changes to (rt, ct), where rt is a raw representation of a traffic trace that can be interpreted by a neural network.\nIn essence, we represent a traffic trace as a sequence of successive Tor cells that form the communication between the target user and the visited website. As a result, an input instance of our DNN-based classifier is a series of 1 and \u22121 of variable length, based on which model performs feature learning and website recognition. Our choice of this format is also supported by the fact that neural networks generally work with real numbers from the compact interval [\u22121, 1] due to the nature of the mathematical operations they perform. Moreover, by providing the input data in such a format, we avoid having to rescale and/or normalize the values and thus mitigate a possible information loss coupled with the preprocessing step.\nOut of all existing types of DNNs and corresponding DL algorithms, we evaluate three major types of neural networks: feedforward, convolutional and recurrent. We choose to apply the models that provide the capabilities and architectural characteristics to perform the task of automated feature extraction and to benefit from the nature of our input data. The first DNN we apply is a classifier called Stacked Denoising Autoencoder (SDAE) \u2013 a deep feedforward neural network composed of Denoising Autoencoders (DAE). An Autoencoder (AE) is a feedforward network specifically designed for feature learning through dimensionality reduction. Stacking multiple AEs as building blocks to form a deep model allows for hierarchical extraction of the most salient features of the input data and performing classification based on the derived features, which makes SDAE a promising model for our WF problem.\nThe next proposed DNN is a Convolutional Neural Network (CNN) \u2013 a classifier built on a series of convolutional layers. Convolutional layers are also used for feature extraction, starting with low-level features at the first layer and building up to more abstract concepts going deeper in the network. Despite similarity in its final effect, CNN general methodology differs from that of SDAE. Convolutional layers learn numerous filters that reveal regions in the input data containing specific characteristics. These input instances are then downsampled with the special regions preserved. In such a way the CNN searches for the most important features to base the classification on. While SDAE has to be pretrained block by block, CNN requires minimum preprocessing.\nThe final chosen DNN is yet another type of a neural network, very different in its fundamental properties from the first two. A classifier called Long-Short Term Memory network (LSTM) is a special type of a recurrent neural network that has enhanced memorization capabilities. Its design allows for learning long-term dependencies in data, enabling the classifier to interpret time series. Our input traffic traces are essentially time series of Tor cells, and temporal dynamics in these series are expected to be highly revealing of the contained website fingerprint, thus the choice of the model.\nWe refer to the Appendix for a more elaborate and indepth discussion on the SDAE, CNN and LSTM network models and deep learning algorithms, which we consider to be conceptually the most well-suited DNN models for the WF task at hand.\n2) Hyperparameter tuning and model selection: The adversary has to empirically select a DNN model to apply for WF. For that, the adversary should tune the hyperparameters of the DNN to achieve the best classification performance and, at the same time, enhance its capabilities to generalize well to unseen traffic traces.\nPerforming an automatic search of the best hyperparameters (be that an exhaustive grid search, a random search or another search algorithm) is highly effective but computationally expensive at the same time. In our work, we evaluate the DL algorithms applied to WF by performing semi-automatic hyperparameter tuning, where we exploit the knowledge of each hyperparameter\u2019s impact. Namely, the main strategy is as follows:\n\u2022 The adversary chooses a representative subsample of the given dataset and splits it randomly into training set, validation set and test set in the following proportion: 70%\u2212 15%\u2212 15% \u2022 Next, the adversary defines the limits of the model capacity based on the amount of available training data. On the one hand, the model has to be expressed with a sufficient amount of parameters in order to be able to learn the problem. On the other hand, there has to be much fewer trainable parameters than available training instances in order to avoid overfitting. The model\u2019s capacity is defined through its structure and hyperparameters, different for each DNN. The adversary has to define the search spaces for each hyperparameter. \u2022 In our evaluation a special form of Bayesian optimization is applied for hyperparameter tuning, specifically a Tree of Parzen Estimators (TPE) [3] implemented in hyperopt library. Through this algorithm the adversary automates the tuning process within previously defined search spaces. \u2022 The optimization algorithm returns the best combination of values and the network structure based on the test results. If the adversary finds the model\u2019s test performance satisfactory, he selects this model. Otherwise, he adjusts the search spaces and repeats the tuning procedure. \u2022 Finally, the adversary builds and initializes the selected learning model and applies it to the whole dataset to deploy the actual WF attack.\nTraditional machine learning methods used for WF in the related work (such as SVM, k-NN and RF, as presented in Section II) also require hyperparameter tuning, but on a smaller scale than DL. Nevertheless, tuning the parameters of the DL model becomes even more feasible in comparison to traditional models due to the parallelism of DL algorithms. As learning algorithms of neural networks are inherently parallel, graphical processing units (GPUs) can take advantage of this characteristic. Performing hyperparameter tuning on GPUs compromises for intense computational requirements allows for rapid feedback of the model. For our DL experiments we use two Nvidia GeForce GTX 1080 GPUs with 16Gb memory and 2560 cores each and one TITAN Xp with 12Gb memory\nand 3840 cores to accommodate parallelized training of the DNNs. The training runtime reported in this paper should therefore be interpreted in association with said platforms.\nWe group the hyperparameters of each DNN into several categories, depending on the aspects of the DL algorithm that they control. We define the following three categories: 1) architecture \u2013 parameters that define the structural complexity of the model 2) learning \u2013 parameters that control the training process; and 3) regularization \u2013 parameters that constrain the learning capabilities of the model to avoid overfitting.\nThe details and results of hyperparameter tuning and model selection for all three DL classifiers will be made publicly available upon publication of the paper. Note that due to LSTM\u2019s backpropagation through time constraints, we had to trim the traffic traces to the first 150 Tor cells (we elaborate on the reason for that in Appendix). Meanwhile, the selected models for SDAE and CNN process the first 5,000 and 3,000 Tor cells respectively.\nThe adversary is supposed to select the DL-based model once, using the data crawled for a set of websites he is interested to recognize. We performed tuning and model selection on the CW100 dataset (as defined in Section IV) in order to limit the computational requirements. We found that given a proper tuning procedure and a sufficiently large amount of training instances for each class, the models learn the problem and generalize well to the bigger closed world datasets. In fact, the adversary capable of crawling large amounts of data can compensate on hyperparameter tuning.\nFurther in this subsection we present the experimental results of the DL-based WF attack on the crawled dataset. Namely, we evaluate the three chosen DNNs on the closed worlds of various sizes and on the open world. We also assess their generalization capabilities by testing their resilience to concept drift on data periodically collected over 2 months. Furthermore, we compare results to CUMUL, the WF method that is the most performant on our dataset.\n3) Closed world evaluation: In this study, we evaluate the SDAE, CNN and LSTM networks on 4 closed worlds of different sizes, namely CW100, CW200, CW500 and CW900. We use the models selected by performing hyperparameter tuning on the CW100 dataset, according to the aforementioned methodology. To ensure the reliability of our experiments, we estimate the models\u2019 performance by conducting a 10- fold cross-validation on each dataset. We use two performance metrics to evaluate and compare the models with each other: the test accuracy (classification success rate, which needs to be maximized) and the test loss (a cost function that reflects the significance of classification errors made by the model, namely the categorical cross-entropy, that needs to be minimized, as explained in the Appendix).\nThe aspect that had the biggest impact on the performance over the course of our experiments was the amount of training data (i.e. the amount of traffic traces for each website), which is in line with our expectations and justifies the extensive data collection. Indeed, for every closed world experiment, we observed significant improvements for a growing amount\nof traces. One example of this trend is given in Figure 4 for the CW100 dataset, where we vary the amount of instances from 100 to all available 2,500 per class. The Table III reports on the actual metrics\u2019 values and the corresponding runtimes.\nFirst and foremost, from these results we can confirm the feasibility of the WF attack based on a DL approach with automatic feature learning. We observe how classification accuracy and loss function gradually improve for all models, in the end reaching the 95.46, 96.26 and 94.02% success rate for SDAE, CNN and LSTM model respectively. These results are stably comparable to the ones achieved by traditional approaches in Section V-A.\nIf we compare the three DNNs with each other, we observe that the SDAE and CNN networks consistently perform better than the LSTM in terms of classification accuracy, with CNN being the most performant. Nevertheless, knowing that the LSTM classifies traffic traces based solely on their first 150 Tor cells (compared to the SDAE and CNN that use up to 5,000 and 3,000 cells from each trace), the achieved performance still appears promising. Our interpretation is that even a small part of the traffic trace is sufficient for website recognition up to 94% accuracy when deploying a model that is able to exploit temporal dependencies of the input sequence. Notably, LSTM performs much poorer when trained on fewer traffic traces than SDAE and CNN, but later gains comparable recognition rate at 1000 training instances per class.\nNext, we assess whether the selected DL models tuned on CW100 perform similarly when applied to the larger datasets: CW200, CW500 and CW900. The results of the DL-based WF for all closed world datasets are presented in Table IV, expressed in classification accuracy, loss function and runtime. The time reported in the table is the average time required to build, train and evaluate a model. We observe that for larger closed worlds the performance of the three DL models gradually decreases following a similar trend. The closed world evaluation results remain comparable to CUMUL\u2019s results presented in Table I in the previous subsection. Figure 5 compares the DL-based methods to CUMUL. This comparison illustrates that our DL-based attack can indeed successfully\neliminate the complex feature engineering. Furthermore, the training method itself is highly parallelizable on GPU hardware resulting in a faster and therefore more practical closed world website fingerprinting attack.\nThe presented experiments on the closed world reflect the model\u2019s ability to classify traffic traces that are collected at the same moment as the training data. Even though we prove that such a WF attack is possible, we do not address the question of eliciting the concrete data features that the models take decisions upon. In other words, just based on this experiment, we cannot certainly infer if the DNN reveals the actual website fingerprint for deanonymization, or also learns occasional dynamics in the traffic data instead that just happens to enable recognition. The next experiment is intended to reveal how well our DNNs are able to extract the fingerprint and generalize to new data.\n4) Concept drift evaluation: The challenge of recognizing traffic traces collected over time was first addressed by Juarez et al. [20]. They showed that classification accuracy drops drastically when testing the model on traffic captured 10 days after training. This time effect is explained by constant content changes of the websites, which of course may affect the identifying fingerprints. Another possible reason for the performance drop is that the classifier trained and evaluated at one moment in time might overlook the stable fingerprint and learn the temporary features instead. In general such an occurrence is known as concept drift \u2013 a change over time in the statistical properties of the class that the model is trying to predict. Therefore, the recognition might become less accurate over time. A model resilient against concept drift is the one that manages to capture the salient traffic features maximally correlated with the website fingerprint and thus remains performant over time. To reveal if our DNNs detect the actual website fingerprints and assess how well they perform in case of traffic changes, we train the models on a closed world and test them on data collected from visiting websites of the same closed world periodically over 2 months. In order to fairly compare DL-based methods to CUMUL, we have to evaluate them on the same dataset with the same amount of traces. Due to the scalability issue, the biggest\ndataset possible to use for this evaluation is CW200 with 2,000 training instances. Even though this is not the largest dataset we collected, it is still twice bigger than the closed worlds normally used in prior works. Thus we train models on the whole CW200 dataset (with 2,000 training traces) and test them on the revisit-over-time dataset (defined in Section IV).\nThe results are depicted in Figure 6 for SDAE, CNN, LSTM and the traditional CUMUL. The plot indicates the WF performance of various models trained on CW200 and evaluated on traffic re-collected 3 days, 10 days, 4 weeks, 6 weeks and 8 weeks after training.\nThe figure demonstrates how the classification accuracy decreases and the classification loss increases gradually and drastically over time. These results illustrate the high generalizing abilities of both the evaluated models. Despite a significant 2-month time gap between the moment of training and the last evaluation, the DL algorithms are still capable to correctly deanonymize at least 70% out of 2,000 website visits. We witness a rather small accuracy drop in the first 3 and 10 days for all three DL models, which may be acceptable for an adversary who would prefer to use the built WF classifier\nfor several more days rather than repeat the data collection and training process every day. In total, SDAE loses 22% of accuracy over 2 months, CNN loses 24%, while LSTM only loses 17%. The important observation is that, despite the fact that the LSTM model (which still makes decision just based on the first 150 cells in the input sequence) is initially outperformed by both SDAE and CNN, after one month its accuracy catches up with that of the SDAE. Moreover, after 1 month the LSTM loss values are lower than those of the SDAE, which means that even though the LSTM outputs less correct predictions, it is overall more certain of these predictions. This obviously speaks in favor of LSTM\u2019s high generalization abilities, in line with our best expectations.\nOur SDAE and CNN approaches outperform CUMUL with 2% to 7% over the course of 2 months. In total CUMUL loses 30%. LSTM network starts outperforming CUMUL after approximately 2 weeks. As such, this comparison not only shows that our approach indeed automates the extraction of website fingerprints, but also that the learned implicit features (hidden in the neural network) are more robust against website changes over time. Notably, CUMUL is found to significantly improve its generalization abilities when trained on larger amounts of traffic traces per website, which proves that DLbased classifiers are not alone in their requirement for a bigger training data for the highest performance.\nThe main conclusion here is that the DL-based classifiers are capable of extracting stable identifying information from the closed world traffic which allows for its deanonymization with a high success rate, even several days after training.\n5) Open world evaluation: This study compares DL-based WF attacks and CUMUL for the open world evaluation. The goal is to assess the classifier\u2019s ability to distinguish a traffic trace generated by a visit to one of the monitored websites from a traffic trace generated by a visit to any other unknown website. Our methodology for the open world evaluation differs from prior work in several aspects. We aim to provide a fair comparison of the classifiers by reducing possible\nclassification bias. To this purpose we have to depart from the realistic WF setting and adapt the following assumptions:\n\u2022 We model the monitored websites by training the classifier solely on the traffic traces of the websites an adversary is aiming to detect. By doing so, we assess the abilities of the learning algorithms to distinguish seen and unseen websites. In previous studies on WF, it has been argued that an adversary may improve the attack by additionally collecting and training on traffic of known websites that he is not interested in identifying, which is of course a possibility given sufficient resources. But here we do not provide any helping patterns of the open Web to the classifiers to not distort their actual performance. \u2022 We test the classifiers on balanced datasets: monitored and unknown websites in proportion 50%\u221250% (meaning that random classification would be accurate on average 50% of a time). Thus, we do not attempt to infer the realistic ratio, especially knowing that modeling a realistic large-scale open world setting poses a lot of issues, such as (1) the effect of the hypothesis space complexity, as shown by Panchenko et al. [25], and (2) the base rate fallacy, demonstrated by Juarez et al. [20] for monitored websites with a very low prior probabilities of visit. Instead we assume a standard uniform probability distribution of page visits to the monitored and unknown sets. With such evaluation the classifier\u2019s errors are more prominent and allow for a clearer comparison. \u2022 Following the earlier reasoning, we use Alexa websites for both, monitored and unknown sets. Choosing a particular set of monitored websites characterized by patterns that are not common to the whole Web would introduce classification bias with an unpredictable impact on comparison. In order to objectively compare the studied classifiers, we demonstrate their abilities to distinguish seen and unseen fingerprints belonging to the websites of the same category (in our case, most popular websites).\nWe evaluate the open world WF attack for an adversary who monitors a set of 200 websites, while the target user may visit 400,000 more unknown websites. As a result, our open world dataset consists of 800,000 visits through Tor: one-time visits to 400,000 various websites in the Web and 400,000 visits to the monitored CW200. We train the models solely on 2,000 instances of CW200 and perform binary classification on our open world dataset. With this experiment we assess the classifiers\u2019 ability to recognize the input instance as a visit to a monitored or an unknown website. The classifier makes decisions based on the cross-entropy loss function, which reflects its confidence in made predictions (in the Appendix we elaborate upon the meaning under the cross-entropy as a measure of classification confidence). If the loss value is low enough, the adversary assumes that the classified website visit belongs to a set of monitored websites. If the entropy is bigger than a certain threshold, the adversary decided not to trust the classifier\u2019s class prediction and concludes that the tested traffic trace was generated by an unknown website, thus causing the\nprediction uncertainty. By varying the threshold, the adversary balances the True Positive and False Positive Rates.\nIn our evaluation, we plot the ROC curve for the three DL classifiers in order to define the optimal decision threshold which separates the monitored websites traffic from unknown websites traffic. The ROC curves for SDAE, CNN and LSTM are depicted in Figure 7 and demonstrate the relative performance of the suggested open world WF DL-based attacks within 400,000 unknown websites. Furthermore, we observe that the CNN model performs better than SDAE, and both perform significantly better than the LSTM model. However, the adversary may improve the models by also using the open world performance as a reference point during hyperparameter tuning. LSTM classifier is outperformed by two other DL models because it only processes the first 150 Tor cells, opposed to 5,000 by SDAE and 3,000 by CNN. Both CNN and SDAE again outperform CUMUL, if only slightly, as demonstrated by Area Under Curve values in the same figure. According to the ROC curves, an adversary may optimize the decision threshold depending on his priority. The example of such optimization is given in Table V. Overall, our experiment\non a significantly large open world indicates the feasibility of applying DL to WF in the open world setting, similarly to the state-of-the-art. We departed from a realistic WF open world evaluation in order to minimize classification bias and provide most objective assessment of the classifiers\u2019 abilities.\nIn the previous subsections, we have shown the relative\nperformance of various DL models in comparison with each other and with the traditional CUMUL classifier. In certain experimental settings we improved beyond the state-of-theart, e.g. in resilience to content changes and in success rate on the largest closed world. The success rates of WF attacks proved to depend on the amount of training data available to the adversary and the computational resources that can be used to train the classifier. For the evaluations performed in this paper, we used the resources available at our institution, but we acknowledge that a more powerful attacker could most likely further improve the attack by using more resources for data collection and training."}, {"heading": "VI. DISCUSSION", "text": "In this section, we offer some critical reflections and discuss remaining open challenges with regard to both the threat model and the deep learning methods we adopted in this work.\nAs in virtually all prior work on WF, we have analyzed the attacks only on visits to homepages and omitted other pages within the websites we have classified. We acknowledge this is an unrealistic assumption. However, as our main goal was to perform a fair comparison with existing attacks, we used the same experimental settings. As the models developed in prior work were specifically tailored to these particular settings, the evaluation of techniques that consider WF in inner web pages was deemed out of scope for this paper. Nevertheless, we find automatic feature learning a promising approach for future work to tackle this problem.\nWe do not try to approximate the probability of visiting a closed world site vs. a site from the open world in our experiments. We assume that all open world sites have the same prior probability and all closed world sites have the same prior probability. We acknowledge this does not reflect reality but one can only hypothesize on the actual popularity distribution of websites over Tor without risking the privacy of Tor users. It is a limitation of our study and most previous WF work.\nWhile deep learning allows us to obviate the cumbersome feature engineering process, the learning method does not produce an explicit representation of the features that can be easily interpreted by a human analyst (which is a general property of DNNs). Clearly, DNNs base their predictions on certain features different from those suggested in prior literature because our DL attack proves to be much more robust to web content changes. The next step would be to produce countermeasures against techniques exploiting these implicit features. Therefore, future work should focus on interpreting these features and compare them with existing ones. However, this is a complex and unsolved task common in DL and ML in general, and the first steps in this direction are currently being pursued, e.g. by the Explainable Artificial Intelligence research community [14].\nOne approach to confirm the presence of new features would be to analyze the impact that defenses have on concealing existing features in Tor traffic. For instance, an interesting direction for future work could be investigating to what extent\nthe proposed WF defenses [5], [21] can be adapted to isolate single known features as a way to identify the new ones.\nLast, in very recent work by Wang and Goldberg [33], a defense technique based on half-duplex communication and burst molding is proposed. The authors claim that this defense defeats all WF attack techniques known to date. Due to the differences in the feature engineering process between our proposed DL models and known techniques, it would be interesting to validate whether the author\u2019s claims still hold in the presence of DL methods. As this would require regenerating a similar dataset in order to properly perform this analysis, we consider it beyond the scope for this paper."}, {"heading": "VII. CONCLUSION", "text": "In this study, we propose a new website fingerprinting attack based on deep learning. The main objective was to assess the feasibility of WF through automated feature learning. We show that deep neural networks are capable of fingerprinting websites with an accuracy that is comparable to the bestperforming approaches among numerous research efforts in recent years. The three DNNs we investigated have shown their strengths and weaknesses in the context of WF:\n\u2022 SDAE performed well overall and proved to be the most stable DNN with respect to the closed world setting. \u2022 CNN is the fastest network due to fewer learnable parameters, and performed best for smaller closed worlds and for the open world evaluation. However, this DNN has a higher risk of overfitting, which was revealed by the larger closed worlds and the concept drift experiments. \u2022 LSTM performed the slowest, but exhibited the best generalization capabilities due to its recurrent structure. However, its constraint in backpropagation did not allow to process long traffic traces without jeopardizing the overall performance.\nIn certain experimental settings, our attack even improves existing implementations:\n\u2022 SDAE showed better results than CUMUL on the largest closed world we evaluated. \u2022 All three DL approaches prove to be more robust against web content changes than CUMUL, with LSTM being twice more robust. \u2022 SDAE and CNN networks perform slightly better in the open world evaluation than CUMUL. \u2022 The DL approach is generally more scalable due to parallelization and automated model selection.\nIn conclusion, using DL gives an adversary major advantages, resulting in accurate and efficient traffic deanonymization."}, {"heading": "A. Stacked Denoising Autoencoder", "text": "Autoencoder (AE) is a shallow feedforward neural network designed for learning meaningful data representations [29]. It is composed of an input layer, one hidden layer and an output layer, as shown in Figure 8. The input layer acts as an encoder that transforms data and passes it to the hidden layer h = f(x), and the output layer of the same size acts as a decoder that reconstructs the data back from the hidden layer r = g(h), intending to produce maximally similar values.\nThe size of the hidden layer plays a crucial role in the AE\u2019s working algorithm: it defines the representation of the input used for reconstructing the data. The hidden layer h is\nconstrained to have less neurons than the input x, then such an undercomplete AE is forced to compress the input and can only output its approximation rather than the identity. In order to reconstruct the data from a compressed representation with a minimal loss, the network has to prioritize between properties of the data during compression.\nIn case of a traffic trace as an input, AE will learn certain combinations and transformations of the input values that allow to reconstruct the same trace with the highest accuracy. As a result, the hidden layer will contain the most salient features of the traffic trace. The training is performed by backpropagating the reconstruction errors expressed via the loss function that has to be optimized by the network. The loss function L(x, g(f(x))), such as mean squared error, reflects the difference between the input x and its reconstruction g(f(x)), and reaches its minimum value in case of a total similarity between the two. We use a mean squared error for this purpose, which measures the average of the squares of the deviations: L(x, g(f(x))) = 1N \u2211N i=1(g(f(xi))\u2212 xi)2, where N is the number of neurons of the input (and the output) layer. Since the undercomplete AE cannot learn a total identity function but only an approximation, its training stops once having minimized the loss function, and thus ensures a good learned representation of data. The AE, as a building block of our future classifier, has to learn representations which reflect statistical properties of the whole data distribution beyond the training examples. This is necessary to achieve a high performance of the model on unseen data, a property of the machine learning models known as a generalization capability. The AE that performs during training much better than on traffic unseen before, has overfitted to the training data, and thus shows poor generalization capabilities.\nTo ensure generalization, we apply regularization by using dropout, when a randomly chosen fraction of input values is set to 0 at each training iteration. AE with dropout is a Denoising Autoencoder (DAE) which is more robust to overfitting [27].\nStacked Denoising Autoencoder is a deep feedforward neural network built from multiple DAEs by stacking them together, in a manner depicted in Figure 9. SDAE stacks the DAEs representation layers: the hidden layer of the first DAE\nis used as the input layer of the successive DAE, and so forth. Chaining several DAEs enables the model to hierarchically extract data from the input to learn features of different levels of abstraction. We chain 4 DAEs to form a 6-layered SDAE. Deeper models produce final features of higher abstraction, which are meant to be used for classification on the concluding softmax layer. The classification layer has one neuron for each possible class, or in our case for each website. Output neurons compute the probability of the input instance to belong to a class. The neuron that produced a maximum probability assigns its label to the training instance.\nIt was discovered by Hinton et al. [17] that in order to achieve a better performing DNN, it has to first be pretrained in an unsupervised fashion, that is without using the knowledge of labels of the training data. This strategy is known as the greedy layer-wise unsupervised pretraining that initializes the SDAE. This stage is followed by a supervised fine-tuning of the whole model, that learns to classify the input by backpropagating the classification errors. The loss function that expresses the errors is a categorical entropy E = \u2212 1N \u2211N i (pilog2pi), where pi is a returned probability for the predicted class with N websites in total. A classifier confident of its decisions gives a high probability for each predicted class which results into a minimized entropy."}, {"heading": "B. Convolutional Neural Network", "text": "A deep network called Convolutional Neural Network (CNN) is another feedforward network trained with backpropagation similarly to SDAE, but has a very different structure, designed to require minimal preprocessing [22]. CNN uses a linear operation called convolution on some of its layers instead of a regular matrix multiplication. The network layer applies convolution on a multidimensional array of input data and outputs a multidimensional array of learnable parameters called kernels or feature maps, as depicted in Figure 10. The function is applied spatially to small regions of the input, thus enabling sparse connectivity and reducing the actual parameter learning in comparison to fully-connected layers. Every kernel aims to learn an individual part of an underlying feature set, e.g. the website fingerprint in a traffic trace. The convolution function is followed by a non-linear activation, typically a rectifier [24]. The rectified feature maps are stacked together along the depth dimension to produce the output.\nThe next operation of the CNN is typically a pooling layer that performs a subsampling operation by replacing the output of the convolution layer with a summary statistics of the nearby outputs. We use a max pooling layer that reports the maximum outputs within regions of the feature maps. Pooling helps the representation become invariant to minor transactions of the input. For instance, such subsampling allows to find the identifying parts of the website fingerprint within the traffic trace, despite its slight shifts in location and ignoring the surrounding traffic.\nThe network can include a whole series of convolution and pooling layers in order to extract more abstract features. We use two sets of such layers. The resulting multidimensional\nset of feature maps needs to be flattened and concluded by at least one regular fully-connected layer prior to classification. Because of the risk of overfitting, we use one dense layer. Dropout can be applied after each max pooling or fullyconnected layer for additional regularization."}, {"heading": "C. Long-Short Term Memory", "text": "Recurrent neural network (RNN) is a network with feedback connections, which enable it to learn temporal dependencies [19]. RNN can interpret the input as a sequence, taking into account its temporal properties.\nLong short-term memory network (LSTM) shown in Figure 11 is a special type of a RNN that accommodates socalled LSTM units to model long-term memory, which allows the network to learn longer input sequences.\nThe LSTM units process sequences time step by time step, passing the data through their memory cells, and input, output and forget gates, as depicted in Figure 12.\nThe memory cell represents the so-called internal state. LSTM is able to remove or add information to the cell, regulating these operations by gates. Gates are composed out of a sigmoid neural network layer and a pointwise product. They learn to carefully choose whether to let the information through them in order to modify the internal state, to forget information or to produce the output when deemed necessary.\nLSTM layer\u2019s depth depends on the length of processed sequences: due to the feedback connection, they basically\nhave one layer for every processed time step of a sequence. Such structure can be obtained by unrolling the loop in Figure 11. Classification errors are backpropagated through many layers \u201dthrough time\u201d, which limits the training process: first it significantly slows down training in compare to the feedforward networks, and secondly, in practice it only allows to backpropagate up to 100-200 layers.\nLSTM layers can also be stacked to form even deeper network. The intuition is the same that higher LSTM layers can capture abstract concepts in the sequences. We chain 2 LSTM layers and form a 4-layered LSTM network (with each layer \u201dunrolled\u201d to as many layers as there are time steps in the processed sequence), which allowed to obtain the best performance."}], "references": [{"title": "Fingerprinting attack on tor anonymity using deep learning", "author": ["Kota Abe", "Shigeki Goto"], "venue": "Proceedings of the Asia-Pacific Advanced Network,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2016}, {"title": "Making a science of model search: Hyperparameter optimization in hundreds of dimensions for vision architectures", "author": ["James Bergstra", "Daniel Yamins", "David Cox"], "venue": "Proceedings of the 30th International Conference on Machine Learning,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "ImageHash. https://github.com/JohannesBuchner/ imagehash, 2017", "author": ["Johannes Buchner"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2017}, {"title": "CS-BuFLO: A Congestion Sensitive Website Fingerprinting Defense", "author": ["Xiang Cai", "Rishab Nithyanand", "Rob Johnson"], "venue": "In Workshop on Privacy in the Electronic Society (WPES),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "A Systematic Approach to Developing and Evaluating Website Fingerprinting Defenses", "author": ["Xiang Cai", "Rishab Nithyanand", "Tao Wang", "Rob Johnson", "Ian Goldberg"], "venue": "In ACM Conference on Computer and Communications Security (CCS),", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Touching from a Distance: Website Fingerprinting Attacks and Defenses", "author": ["Xiang Cai", "Xin Cheng Zhang", "Brijesh Joshi", "Rob Johnson"], "venue": "In ACM Conference on Computer and Communications Security (CCS),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Similarity estimation techniques from rounding algorithms", "author": ["Moses S Charikar"], "venue": "In Proceedings of the thiry-fourth annual ACM symposium on Theory of computing,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Traffic Analysis of SSL Encrypted Web Browsing", "author": ["Heyning Cheng", "Ron Avnur"], "venue": "Project paper, University of Berkeley,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1998}, {"title": "Website Fingerprinting Defenses at the Application Layer", "author": ["Giovanni Cherubin", "Jamie Hayes", "Marc Juarez"], "venue": "In Privacy Enhancing Technologies Symposium (PETS),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2017}, {"title": "Tor: The Second-Generation Onion Router", "author": ["Roger Dingledine", "Nick Mathewson", "Paul F. Syverson"], "venue": "In USENIX Security Symposium,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2004}, {"title": "Peek-a-Boo, I Still See You: Why Efficient Traffic Analysis Countermeasures Fail", "author": ["Kevin P. Dyer", "Scott E. Coull", "Thomas Ristenpart", "Thomas Shrimpton"], "venue": "In IEEE Symposium on Security and Privacy (S&P),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "Explainable artificial intelligence (xai)", "author": ["David Gunning"], "venue": "Defense Advanced Research Projects Agency (DARPA), nd Web,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2017}, {"title": "k-fingerprinting: a Robust Scalable Website Fingerprinting Technique", "author": ["Jamie Hayes", "George Danezis"], "venue": "In USENIX Security Symposium,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2016}, {"title": "Website Fingerprinting: Attacking Popular Privacy Enhancing Technologies with the Multinomial Na\u0131\u0308ve-Bayes Classifier", "author": ["Dominik Herrmann", "Rolf Wendolsky", "Hannes Federrath"], "venue": "In ACM Workshop on Cloud Computing Security,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2009}, {"title": "A fast learning algorithm for deep belief nets", "author": ["Geoffrey E Hinton", "Simon Osindero", "Yee-Whye Teh"], "venue": "Neural computation,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "Fingerprinting Websites Using Traffic Analysis. In Privacy Enhancing Technologies (PETs), pages 171\u2013178", "author": ["Andrew Hintz"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2003}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1997}, {"title": "A critical evaluation of website fingerprinting attacks", "author": ["Marc Juarez", "Sadia Afroz", "Gunes Acar", "Claudia Diaz", "Rachel Greenstadt"], "venue": "In ACM Conference on Computer and Communications Security (CCS),", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2014}, {"title": "Toward an Efficient Website Fingerprinting Defense", "author": ["Marc Juarez", "Mohsen Imani", "Mike Perry", "Claudia Diaz", "Matthew Wright"], "venue": "In European Symposium on Research in Computer Security (ESORICS),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2016}, {"title": "The handbook of brain theory and neural networks. chapter Convolutional Networks for Images, Speech, and Time Series, pages 255\u2013258", "author": ["Yann LeCun", "Yoshua Bengio"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1998}, {"title": "Inferring the source of encrypted HTTP connections", "author": ["Marc Liberatore", "Brian Neil Levine"], "venue": "In ACM Conference on Computer and Communications Security (CCS),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2006}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["Vinod Nair", "Geoffrey E. Hinton"], "venue": "Proceedings of the 27th International Conference on Machine Learning", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2010}, {"title": "Website fingerprinting at internet scale", "author": ["Andriy Panchenko", "Fabian Lanze", "Andreas Zinnen", "Martin Henze", "Jan Pennekamp", "Klaus Wehrle", "Thomas Engel"], "venue": "In Network & Distributed System Security Symposium (NDSS),", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2016}, {"title": "Website fingerprinting in onion routing based anonymization networks", "author": ["Andriy Panchenko", "Lukas Niessen", "Andreas Zinnen", "Thomas Engel"], "venue": "In ACM Workshop on Privacy in the Electronic Society (WPES),", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2011}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "author": ["Nitish Srivastava", "Geoffrey E Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1929}, {"title": "Statistical Identification of Encrypted Web Browsing Traffic", "author": ["Q Sun", "DR R Simon", "YM M Wang"], "venue": "In IEEE Symposium on Security and Privacy (S&P),", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2002}, {"title": "Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion", "author": ["Pascal Vincent", "Hugo Larochelle", "Isabelle Lajoie", "Yoshua Bengio", "Pierre-Antoine Manzagol"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2010}, {"title": "Effective Attacks and Provable Defenses for Website Fingerprinting", "author": ["Tao Wang", "Xiang Cai", "Rishab Nithyanand", "Rob Johnson", "Ian Goldberg"], "venue": "In USENIX Security Symposium,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2014}, {"title": "Improved Website Fingerprinting on Tor", "author": ["Tao Wang", "Ian Goldberg"], "venue": "In ACM Workshop on Privacy in the Electronic Society (WPES),", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2013}, {"title": "On realistically attacking tor with website fingerprinting", "author": ["Tao Wang", "Ian Goldberg"], "venue": "In Proceedings on Privacy Enhancing Technologies (PoPETs),", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2016}, {"title": "Walkie-talkie: An efficient defense against passive website fingerprinting attacks", "author": ["Tao Wang", "Ian Goldberg"], "venue": "In 26th USENIX Security Symposium (USENIX Security", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2017}, {"title": "The applications of deep learning on traffic identification", "author": ["Zhanyi Wang"], "venue": "BlackHat USA,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2015}], "referenceMentions": [{"referenceID": 13, "context": "As a result of previous research on Tor privacy, a serious side-channel of Tor network traffic was revealed that allowed a local adversary to infer which websites were visited by a particular user [16].", "startOffset": 197, "endOffset": 201}, {"referenceID": 17, "context": "The feasibility of Website Fingerprinting (WF) attacks on Tor was assessed in a series of studies [20], [25], [26], [31], [32].", "startOffset": 98, "endOffset": 102}, {"referenceID": 22, "context": "The feasibility of Website Fingerprinting (WF) attacks on Tor was assessed in a series of studies [20], [25], [26], [31], [32].", "startOffset": 104, "endOffset": 108}, {"referenceID": 23, "context": "The feasibility of Website Fingerprinting (WF) attacks on Tor was assessed in a series of studies [20], [25], [26], [31], [32].", "startOffset": 110, "endOffset": 114}, {"referenceID": 28, "context": "The feasibility of Website Fingerprinting (WF) attacks on Tor was assessed in a series of studies [20], [25], [26], [31], [32].", "startOffset": 116, "endOffset": 120}, {"referenceID": 29, "context": "The feasibility of Website Fingerprinting (WF) attacks on Tor was assessed in a series of studies [20], [25], [26], [31], [32].", "startOffset": 122, "endOffset": 126}, {"referenceID": 12, "context": "Proposed approaches have been shown to achieve a classification accuracy of 9196% correctly recognized websites [15], [25], [30] in a set of 100 websites with about as many traces per website.", "startOffset": 112, "endOffset": 116}, {"referenceID": 22, "context": "Proposed approaches have been shown to achieve a classification accuracy of 9196% correctly recognized websites [15], [25], [30] in a set of 100 websites with about as many traces per website.", "startOffset": 118, "endOffset": 122}, {"referenceID": 27, "context": "Proposed approaches have been shown to achieve a classification accuracy of 9196% correctly recognized websites [15], [25], [30] in a set of 100 websites with about as many traces per website.", "startOffset": 124, "endOffset": 128}, {"referenceID": 4, "context": "Moreover, it becomes more challenging for the adversary with changes introduced in the network protocol [6], [10], [21].", "startOffset": 104, "endOffset": 107}, {"referenceID": 8, "context": "Moreover, it becomes more challenging for the adversary with changes introduced in the network protocol [6], [10], [21].", "startOffset": 109, "endOffset": 113}, {"referenceID": 18, "context": "Moreover, it becomes more challenging for the adversary with changes introduced in the network protocol [6], [10], [21].", "startOffset": 115, "endOffset": 119}, {"referenceID": 9, "context": "Anonymous communications systems such as Tor [12] provide confidentiality of communications and conceal the destination server\u2019s address from network eavesdroppers.", "startOffset": 45, "endOffset": 49}, {"referenceID": 7, "context": "The first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16].", "startOffset": 77, "endOffset": 80}, {"referenceID": 15, "context": "The first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16].", "startOffset": 104, "endOffset": 108}, {"referenceID": 25, "context": "The first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16].", "startOffset": 110, "endOffset": 114}, {"referenceID": 20, "context": "The first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16].", "startOffset": 124, "endOffset": 128}, {"referenceID": 13, "context": "The first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16].", "startOffset": 138, "endOffset": 142}, {"referenceID": 13, "context": "The first WF studies evaluated the effectiveness of the attack against HTTPS [9], encrypted web proxies [18], [28], OpenSSH [23] and VPNs [16] and it was not until 2009 that the first evaluation of a WF attack was performed in Tor [16].", "startOffset": 231, "endOffset": 235}, {"referenceID": 13, "context": "packet lengths [16].", "startOffset": 15, "endOffset": 19}, {"referenceID": 23, "context": "using a Support Vector Machine (SVM) [26].", "startOffset": 37, "endOffset": 41}, {"referenceID": 5, "context": "[7] used an SVM with their custom kernel based on an edit-distance and achieved more than 86% accuracy for 100 sites.", "startOffset": 0, "endOffset": 3}, {"referenceID": 28, "context": "Following a similar approach, Wang and Goldberg [31] experimented with several custom edit distances and improved Cai et al.", "startOffset": 48, "endOffset": 52}, {"referenceID": 17, "context": "However, these evaluations have been criticized for making unrealistic assumptions on the experimental settings that give an unfair advantage to the adversary compared to real attack settings [20].", "startOffset": 192, "endOffset": 196}, {"referenceID": 29, "context": "Recent research has developed new techniques to overcome some of these assumptions, suggesting that the attacks may be more practical than previously expected [32].", "startOffset": 159, "endOffset": 163}, {"referenceID": 27, "context": "Each attack uses a different classification model and feature sets and work as follows: Wang-kNN [30]:: this attack is based on a k-Nearest Neighbors (k-NN) classifier with more than 3,000 traffic features.", "startOffset": 97, "endOffset": 101}, {"referenceID": 27, "context": "Their results show that this attack achieves 90% to 95% accuracy on 100 websites [30].", "startOffset": 81, "endOffset": 85}, {"referenceID": 22, "context": "CUMUL [25]:: CUMUL is based on an SVM with a Radial Basis Function (RBF) kernel.", "startOffset": 6, "endOffset": 10}, {"referenceID": 12, "context": "k-Fingerprinting (k-FP) [15]:: Hayes and Danezis\u2019s kFP attack is based on Random Forests (RF).", "startOffset": 24, "endOffset": 28}, {"referenceID": 12, "context": "For instance, Hayes and Danezis used the random forest classifier to rank their features [15] and previous studies had analyzed traffic features with regard to WF attacks and defenses [6], [13], [26].", "startOffset": 89, "endOffset": 93}, {"referenceID": 4, "context": "For instance, Hayes and Danezis used the random forest classifier to rank their features [15] and previous studies had analyzed traffic features with regard to WF attacks and defenses [6], [13], [26].", "startOffset": 184, "endOffset": 187}, {"referenceID": 10, "context": "For instance, Hayes and Danezis used the random forest classifier to rank their features [15] and previous studies had analyzed traffic features with regard to WF attacks and defenses [6], [13], [26].", "startOffset": 189, "endOffset": 193}, {"referenceID": 23, "context": "For instance, Hayes and Danezis used the random forest classifier to rank their features [15] and previous studies had analyzed traffic features with regard to WF attacks and defenses [6], [13], [26].", "startOffset": 195, "endOffset": 199}, {"referenceID": 31, "context": "To the best of our knowledge, the only research that applies DL to a similar problem is the network protocol recognition on encrypted traffic with a Stacked Denoising Autoencoder (SDAE) done by Wang [34].", "startOffset": 199, "endOffset": 203}, {"referenceID": 0, "context": "The recent prior attempt to apply a DL-based approach to WF was made by Abe and Goto [2], where they evaluated a SDAE on the Wang-kNN\u2019s dataset.", "startOffset": 85, "endOffset": 88}, {"referenceID": 28, "context": "In this work, we assume an ISP-level adversary that collects traffic at the TCP layer and infers the cells from TCP packets [31].", "startOffset": 124, "endOffset": 128}, {"referenceID": 23, "context": "This assumption, commonly known as the closed-world assumption, has been deemed unrealistic [26] as the size of the Web is so large that an adversary can only train on a tiny fraction of the Web.", "startOffset": 92, "endOffset": 96}, {"referenceID": 28, "context": "We follow the approach proposed by Wang and Goldberg [31] to extract Tor cells from the captured TCP packets.", "startOffset": 53, "endOffset": 57}, {"referenceID": 28, "context": "It should be noted that, in contrast to prior work [31], the Tor entry guard node was not pinned over the course of our experiments.", "startOffset": 51, "endOffset": 55}, {"referenceID": 6, "context": "Additionally, using the similarity hash of the web page\u2019s HTML content [8] and the perceptual hash of the screenshot [4], we detected and excluded websites with exactly the same content.", "startOffset": 71, "endOffset": 74}, {"referenceID": 2, "context": "Additionally, using the similarity hash of the web page\u2019s HTML content [8] and the perceptual hash of the screenshot [4], we detected and excluded websites with exactly the same content.", "startOffset": 117, "endOffset": 120}, {"referenceID": 12, "context": "As a result, we conduct the open world evaluation on 800,000 test traffic traces, half from the closed world and half from the open world (a 4-fold increase compared to the largest dataset considered in prior work [15], [25]).", "startOffset": 214, "endOffset": 218}, {"referenceID": 22, "context": "As a result, we conduct the open world evaluation on 800,000 test traffic traces, half from the closed world and half from the open world (a 4-fold increase compared to the largest dataset considered in prior work [15], [25]).", "startOffset": 220, "endOffset": 224}, {"referenceID": 27, "context": "[30], Panchenko et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[25] and Hayes et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[15], not only to guarantee a fair assessment by evaluating on new data, but also to analyze (1) the practical feasibility of the attack on a significantly larger set of websites, (2) the impact of collecting more instances or traces per website on the classification accuracy, and (3) the resilience of trained models to concept drift with a growing time gap between training and testing.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "The goal of the first closed world experiment is to confirm whether we can reproduce the three WF attacks of prior work [15], [25], [30] and to assert whether we obtain similar classification results as those reported by the respective authors, but on a different training and testing dataset similar in size.", "startOffset": 120, "endOffset": 124}, {"referenceID": 22, "context": "The goal of the first closed world experiment is to confirm whether we can reproduce the three WF attacks of prior work [15], [25], [30] and to assert whether we obtain similar classification results as those reported by the respective authors, but on a different training and testing dataset similar in size.", "startOffset": 126, "endOffset": 130}, {"referenceID": 27, "context": "The goal of the first closed world experiment is to confirm whether we can reproduce the three WF attacks of prior work [15], [25], [30] and to assert whether we obtain similar classification results as those reported by the respective authors, but on a different training and testing dataset similar in size.", "startOffset": 132, "endOffset": 136}, {"referenceID": 1, "context": "\u2022 In our evaluation a special form of Bayesian optimization is applied for hyperparameter tuning, specifically a Tree of Parzen Estimators (TPE) [3] implemented in hyperopt library.", "startOffset": 145, "endOffset": 148}, {"referenceID": 17, "context": "[20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[25], and (2) the base rate fallacy, demonstrated by Juarez et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[20] for monitored websites with a very low prior probabilities of visit.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "by the Explainable Artificial Intelligence research community [14].", "startOffset": 62, "endOffset": 66}, {"referenceID": 3, "context": "For instance, an interesting direction for future work could be investigating to what extent the proposed WF defenses [5], [21] can be adapted to isolate single known features as a way to identify the new ones.", "startOffset": 118, "endOffset": 121}, {"referenceID": 18, "context": "For instance, an interesting direction for future work could be investigating to what extent the proposed WF defenses [5], [21] can be adapted to isolate single known features as a way to identify the new ones.", "startOffset": 123, "endOffset": 127}, {"referenceID": 30, "context": "Last, in very recent work by Wang and Goldberg [33], a defense technique based on half-duplex communication and", "startOffset": 47, "endOffset": 51}], "year": 2017, "abstractText": "Several studies have shown that the network traffic that is generated by a visit to a website over Tor reveals information specific to the website through the timing and sizes of network packets. By capturing traffic traces between users and their Tor entry guard, a network eavesdropper can leverage this meta-data to reveal which website Tor users are visiting. The success of such attacks heavily depends on the particular set of traffic features that are used to construct the fingerprint. Typically, these features are manually engineered and, as such, any change introduced to the Tor network can render these carefully constructed features ineffective. In this paper, we show that an adversary can automate the feature engineering process, and thus automatically deanonymize Tor traffic by applying our novel method based on deep learning. We evaluate our approach on a dataset comprised of more than three million network traces, which is the largest dataset of web traffic ever gathered for website fingerprinting, and find that the performance achieved by deep learning techniques is comparable to known approaches which include various research efforts spanning over multiple years. Furthermore, it eliminates the need for feature design and selection which is a tedious work and has been one of the main focus of prior work. We conclude that the ability to automatically construct the most relevant traffic features and perform accurate traffic recognition makes our deep learning based approach an efficient, flexible and robust technique for website fingerprinting.", "creator": "LaTeX with hyperref package"}}}