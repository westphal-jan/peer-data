{"id": "1708.08670", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Aug-2017", "title": "Performance Analysis of Open Source Machine Learning Frameworks for Various Parameters in Single-Threaded and Multi-Threaded Modes", "abstract": "The knowledge features mainly some addition during being serviceable it well-known open content mechanisms those hand-held educational (TensorFlow, Deep Learning4j, . H2O) as considered making 60. Their comparative comparison was performed and conclusions were well be time making advantages and flaws large these platforms. The quality flu having the le frontier instance MNIST data putting were carried out before H2O concept for great better algorithms lighting over CPU made GPU platforms for except - welded been multithreaded modes of operation Also, realize represent an latest whose testing neural networks multithreaded recently H2O platform this specific transcription functions, stopping metrics, and be three-dimensional one gun useful algorithm. It took focused for made system case important MNIST database much notes counting in it - rotors mode that blind selection that although parameters used admittedly increase (by 12 - 28 orders) the runtime reasons making especially increase of rocket. This moreover can have further influence its dft another number and new fire perspective utilized, and an particular achievement causes.", "histories": [["v1", "Tue, 29 Aug 2017 09:54:28 GMT  (396kb)", "http://arxiv.org/abs/1708.08670v1", "15 pages, 11 figures, 4 tables; this paper summarizes the activities which were started recently and described shortly in the previous conference presentationsarXiv:1706.02248andarXiv:1707.04940; it is accepted for Springer book series \"Advances in Intelligent Systems and Computing\""]], "COMMENTS": "15 pages, 11 figures, 4 tables; this paper summarizes the activities which were started recently and described shortly in the previous conference presentationsarXiv:1706.02248andarXiv:1707.04940; it is accepted for Springer book series \"Advances in Intelligent Systems and Computing\"", "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.DC cs.PF", "authors": ["yuriy kochura", "sergii stirenko", "oleg alienin", "michail novotarskiy", "yuri gordienko"], "accepted": false, "id": "1708.08670"}, "pdf": {"name": "1708.08670.pdf", "metadata": {"source": "CRF", "title": "Performance Analysis of Open Source Machine Learning Frameworks for Various Parameters in Single-Threaded and Multi-Threaded Modes", "authors": ["Yuriy Kochura", "Sergii Stirenko", "Oleg Alienin", "Michail Novotarskiy", "Yuri Gordienko"], "emails": ["iuriy.kochura@gmail.com"], "sections": [{"heading": null, "text": "Performance Analysis of Open Source Machine Learning Frameworks for Various Parameters in Single-Threaded\nand Multi-Threaded Modes\nYuriy Kochura, Sergii Stirenko, Oleg Alienin, Michail Novotarskiy and Yuri Gordienko\nNational Technical University of Ukraine \"Igor Sikorsky Kyiv Polytechnic Institute\", Kyiv, Ukraine\niuriy.kochura@gmail.com\nAbstract.The basic features of some of the most versatile and popular open source frameworks for machine learning (TensorFlow, Deep Learning4j, and H2O) are considered and compared. Their comparative analysis was performed and conclusions were made as to the advantages and disadvantages of these platforms. The performance tests for the de facto standard MNIST data set were carried out on H2O framework for deep learning algorithms designed for CPU and GPU platforms for single-threaded and multithreaded modes of operation Also, we present the results of testingneural networks architectures on H2O platform for variousactivation functions, stopping metrics, and other parameters ofmachine learning algorithm. It was demonstrated for the usecase of MNIST database of handwritten digits in single-threadedmode that blind selection of these parameters can hugely increase (by 2-3 orders) the runtime without the significant increase ofprecision. This result can have crucial influence for optimizationof available and new machine learning methods, especially forimage recognition problems.\nKeywords:Machine Learning, Deep Learning, TensorFlow, Deep Learning4j, H2O, MNIST, Multicore CPU, GPU, Neural Network; Classification, SingleThreaded Mode."}, {"heading": "1 Introduction", "text": "Machine learning (ML) is a subfield of Artificial Intelligence (AI) discipline. This branch of AI involves the computer applications and/or systems design that based on the simple concept: get data inputs, try some outputs, build a prediction. Nowadays, machine learning (ML) has advanced many fields like pedestrian detection, object recognition, visual-semantic embedding, language identification, acoustic modeling in speech recognition, video classification, fatigue estimation [1], generation of alphabet of symbols for multimodal human-computer interfaces [2], etc. This success is related to the invention and application of more sophisticated machine learning models and the development of software platforms that enable the easy use of large amounts of\ncomputational resources for training such models [3]. The main aims of this paper are to review some available open source frameworks for machine learning, analyze their advantages and disadvantages, and test one of them in various computing environments including CPU and GPU-based platforms. Also, we have tested the H2O system by using the publicly availableMNIST dataset of handwritten digits. This dataset contains60,000 training images and 10,000 test images of the digits0 to 9. The images have grayscale values in the range 0:255. Figure 3 gives an example images of handwritten digits that were used in testing. We have trained the net by using the host with Intel Core i7-2700K insight. The computing power of this CPU approximately is 29.92 GFLOPs.\nIn this paper, we also present testing results of various netarchitectures by using H2O platform for single-threaded mode. Our experiments show that net architecture based on cross entropy loss function, tanh activation function, logloss and MSE stopping metrics demonstrates better efficiency by recognition handwritten digits than other available architectures for the classification problem.\nThis paper is structured as follows. The section 2. State of the Art contains the short characterization of some of the most popular and versatile available open source frameworks (TensorFlow, Deep Learning4j, and H2O) for machine learning and motivation for selection of one of them for the performance tests. The section 3Performance Tests includes description of the testing methodology, data set used, and results of these tests. The section 4. Discussion dedicated to discussion of the results obtained and lessons learned.Also we present here our experimental results where we apply differentactivation functions and stopping metrics to the classificationproblem with use case in single-threaded mode.Section 5contains the conclusions of the work."}, {"heading": "2 State of the Art", "text": "During the last decade numerous frameworks for machine learning appeared, but their open source implementations are seeming to be most promising due to several reasons: available source codes, big community of developers and end users, and, consequently, numerous applications, which demonstrate and validate the maturity of these frameworks. Below the short characterization of the most versatile open source frameworks (Deep Learning4j, TensorFlow, and H2O) for machine learning is presented along with their comparative analysis."}, {"heading": "2.1 Deep Learning4j", "text": "Deep Learning4j (DL4J) is positioned as the open-source distributed deep-learning library written for Java and Scala that can be integrated with Hadoop and Spark [4]. It is designed to be used on distributed GPUs and CPUs platforms, and provides the ability to work with arbitrary n-dimensional arrays (also called tensors), and usage of CPU and GPU resources. Unlike many other frameworks, DL4J splits the opti-\nmization algorithm from the updater algorithm. This allows to be flexible while trying to find a combination that works best for data and problem."}, {"heading": "2.2 TensorFlow", "text": "TensorFlow is an open source software library for numerical computation was originally developed by researchers and engineers working on the Google Brain Team within Google\u2019s Machine Intelligence research organization [5] for the purposes of conducting machine learning and deep neural networks research. This software is the successor to DistBelief, which is the distributed system for training neural networks that Google has used since 2011. TensorFlow operates at large scale and in heterogeneous environments. This system uses dataflow graphs to represent computation, shared state, and the operations that mutate that state. It maps the nodes of a dataflow graph across many machines in a cluster, and within a machine across multiple computational devices, including multicore CPUs, general purpose GPUs, and customdesigned ASICs known as Tensor Processing Units (TPUs). Such architecture gives flexibility to the application developer: whereas in previous \u201cparameter server\u201d designs the management of shared state is built into the system, TensorFlow enables developers to experiment with novel optimizations and training algorithms."}, {"heading": "2.3 H2O", "text": "H2O software is built on Java, Python, and R with a purpose to optimize machine learning for Big Data [6]. It is offered as an open source platform with the following distinctive features. Big Data Friendly means that one can use all of their data in realtime for better predictions with H2O\u2019s fast in-memory distributed parallel processing capabilities. For production deployment a developer need not worry about the variation in the development platform and production environment. H2O models once created can be utilized and deployed like any Standard Java Object. H2O models are compiled into POJO (Plain Old Java Files) or a MOJO (Model Object Optimized) format which can easily embed in any Java environment. The beauty of H2O is that its algorithms can be utilized by various categories of end users from business analysts and statisticians (who are not familiar with programming languages using its Flow web-based GUI) to developers who know any of the widely used programming languages (e.g Java, R, Python, Spark). Using in-memory compression techniques, H2O can handle billions of data rows in-memory, even with a fairly small cluster. H2O implements almost all common machine learning algorithms, such as generalized linear modeling (linear regression, logistic regression, etc.), Naive Bayes, principal components analysis, time series, k-means clustering, Random Forest, Gradient Boosting, and Deep Learning."}, {"heading": "2.4 Parameters of Machine Learning", "text": "The Activation Functions. Activation functions also known as transfer functions are used to map input nodes to output nodes in certain fashion [7] (see the conceptual scheme of an activation function in Figure 1).\nFunctions with dropout are used for reducing overfitting by preventing complex coadaptations on training data. This technique is known as regularization. Figure 2 demonstrate the difference between standard neural net and neural net after applying dropout [8].\nConstant Parameters of the Training Model. We have used the network model with such constant parameters, namely:\n\u2022 Response variable column is C785 \u2022 Hidden layer size is [50,50] \u2022 Epochs are 500 \u2022 Seed for random numbers is 2 \u2022 Adaptive learning rate is false \u2022 Initial momentum at the beginning of training is 0.9 \u2022 Final momentum after the ramp is 0.99 \u2022 Input layer dropout ratio for improving generalization is 0.2 \u2022 Stopping criterion for classification error fraction on training data is disable \u2022 Early stopping based on convergence of stopping metric is 3 \u2022 Relative tolerance for metric-based stopping criterion is 0.01 \u2022 Compute variable impotence for input features is true \u2022 Sparse data handling is true \u2022 Force reproducibility on small data is true\nVariable Parameters of the Training Model. We have used the network model with such variable parameters, namely:\n\u2022 Activation function: Tanh, TanhWithDropout, Maxout, MaxoutWithDropout, Rectifier, RectifierWithDropout \u2022 Metric to use for early stopping: logloss, misclassification, MAE, MSE, RMSE and RMSLE \u2022 Loss function: Cross Entropy Loss function is a function that used to measure the degree of fit. The cross entropy loss function for the distributions p and q over a given set is defined as follows:\nH(p,q) = H(p) + DKL(p||q) (1)\nwhere H(p) is the entropy of p, and DKL(p||q)is the Kullback\u2013Leibler divergence of q from p (also known as the relative entropy of p with respect to q). Cross entropy is always larger than entropy."}, {"heading": "2.5 Comparative Analysis", "text": "From the point of view of an end user, several aspects of these frameworks are of the main interest. Except for performance and maturity, the open source frameworks could be attractive and useful, if they have the wide language and operating system support (see Table 1).\nAll of these frameworks are characterized by a quite wide ranges of supported languages and operating systems. But nowadays it is not enough in the view of the fast development of parallel and distributed computing like cluster and, especially, GPGPU computing. In this connection, TensorFlow has clear notification as to the\npre-requisites for NVIDIA GPGPU cards, that should have CUDA Compute Capability (CC) 3.0 or higher. As to DL4J this is not clear because the developers stated just general supportof NVIDIA GPGPU cards from GeForce GTX to Titan and Tesla that have various CC from 2.0 to 3.5. For H2O types of supported NVIDIA cards and CC are not specified, but proposed in the branching sub-framework Deep Water. The additional important aspects are the low entrance barrier and fast learning curve. They usually are based on\nthe convenient graphical user interface, workflow management, and visualization tools. Now these features become \"de facto standard\" tools for integration of end users, workflows, and resources. The examples of their implementations (like WSPGRADE/gUSE [9], KNIME [10], etc.) and applications in physics [11], chemistry [12], astronomy [13], brain-computing [14], eHealth [15] can be found elsewhere. In\nthis context TensorFlow and H2O propose web-based graphic user interfaces TensorBoard and Flow, respectively, which are actually workflow management and visualization tools. In contrast to other frameworks H2O proposes the much shorter learning curve due to Flow, the web-based and self-explanatory user interface. In general, Flow allows end users without experience in software programming even to import remote data, create model, train it, validate it, and then save the whole workflow. In addition, the machine learning model developed in Flow can be compiled into Plain Old Java Files (POJO) format, which can be easily embedded in any Java environment. Due to these advantages, now more than 5000 organizations currently use H2O, and many well-known companies (like Cisco, eBay, PayPal, etc.) are using it for big data processing. This data set contains 785 columns. The final column is the correct answer, 0 to 9. The first 784 are the 28x28 grid of grayscale pixels, and each is 0 (for white) through to 255 (for black)."}, {"heading": "3 Performance Tests", "text": "The performance of the mentioned frameworks was a topic of many investigations performed by developers of these frameworks and independent end users [16]. But performance of H2O was not investigated thoroughly except for its developers for unknown CPU and GPU platforms [17]. That is why H2O was selected for performance tests in this paper.\nTable 2.Multi-threaded operation on CPUs.\nThe data set used in this work, called the \u201cMNIST data,\u201d was proposed in 1998 to identify handwritten numbers. We have tested the H2O system by recognizing the handwritten digits (Fig. 3) from the publicly available MNIST data set for machine learning methods [18]. Now it is well-known \"de facto standard\" data set for a typical\"easy-for-humans-but-hard-for-machine\" problem. The used MNIST database of handwritten digits has a training set of 60,000 examples, and a test set of 10,000 examples. Each digit is represented by 28x28=784 gray-scale pixel values (features).\nParameter\u2019s name\nIntel Core i57200U (CPU1)\nIntel Core i72700K (CPU2)\nGFLOPs 13.85 29.92 Duration 2 min 18 sec 2 min 32 sec\nTraining speed, obs/sec 23746 78972\nEpochs 48.5953 108.3821\nIterations 103 65 Training logloss 0.0407 0.0297\nValidation logloss 0.1584 0.1616\nThe tests were performed on different platforms including Intel Core i5-7200U with 4 cores (CPU1), Intel Core i7-2700K with 8 cores (CPU2), NVIDIA Tesla K40 GPU accelerator using single-threaded and multi-threaded modes of operation. The parameters of neural network were the same for the Deep Learning (CPU only) and\nDeep Water (CPU+GPU) algorithms. The details of these platforms and modes of operation are given above in Tables 2-3.\nThe performance tests were carried out with Rectifier activation function for two algorithms Deep Learning (CPU only) and Deep Water (CPU+GPU). The stopping criterion was based on convergence of stopping_metric (equal to misclassification). The stop event occurs, if simple moving average of length k of the stopping_metric doesnot improve for k:=stopping_rounds (equal to 3) scoring events. The relative tolerance for metric-based stopping criterion was equal to 0.01. The typical convergence of training (lower) and validation (upper) logloss values with epochs is shown on Fig. 4. The\nresults of these performance tests using H2O system are presented above in Tables 2- 4. It should be noted that the results of learning neural network to recognize the handwritten digits on CPUs and GPU by using multi-threaded mode of operation are inherently not reproducible due to randomization. To estimate data scattering in multi-threaded modes of operation the runs were repeated for 12 times with determination of mean and standard deviation (Table 4)."}, {"heading": "4 Discussion", "text": "The time of convergence for logloss values with epochs was not very different for all regimes, if the standard deviation (~17 sec) of duration for multi-threaded operation on GPU will be taken into account as an estimation (Fig. 5).\nDespite the much higher computing power of GPU the better training speed was observed for multi-threaded regime for CPU2 with 8 cores with speedup up to 5.2 in comparison to single-threaded regime (Fig.6). For CPU1 with 4 cores the similar speedup for multi-threaded regime was equal to 1.7 in comparison to single-threaded regime. As to GPU training speed these results can be explained by much bigger number (by ~100 times) of performed iterations.\nAs it is well-known the logloss values are very sensitive to outliers and this tendency is very pronounced in the case of GPU, where the much bigger iterations were used and higher training logloss values were found (Fig. 7).\nThe ratio of validation logloss(Fig. 8) to training logloss is equal to 1.53 for Deep Water case, which is much lower in comparison to the same ratio 2.88 for Deep Learning single-threaded case, and 3.89 and 5.44 even for Deep Learning multithreaded case CPU1 and CPU2, respectively. This allows to make assumption that the more iterations in GPU mode give the more realistic model with the lower risk of overfitting.\nFinally, in this paper we described the basic features of some open source frameworks for machine learning, namely TensorFlow, Deep Learning4j, and H2O. For usability and performance tests H2O framework was selected. It was tested on several platforms like Intel Core i5-7200U (4 cores), Intel Core i7-2700K (8 cores), Tesla K40 GPU with the goal to evaluate their performance in the context of recognizing hand-written digits from MNIST data set. To reach this goal the same parameters of the neural network were used for Deep Learning and DeepWater algorithms.The influence of many other aspects like the nature of data (for example, sparsity level and sparsity pattern), number of hidden layers and their sizes should be taken into account for the better comparative analysis. Investigations of influence of some parameters were started recently and described shortly in our previous papers [19-20].\nWe trained neural networks for classification problems on publicly available MNIST dataset of handwritten digits with use case in single-threaded mode. We found that generalization performance has very strong dependence on activation function and very slight dependence on stopping metric. Figure 9 shows the runtime values on the logarithm scale obtained for these different architectures as training progresses.\nFigure 10 demonstrates the effectiveness of using tanh activation function for all stopping metrics that considered in this paper. In the case of the learning net based on the tanh activation function, MAE and RMSLE stopping metric has achieved the logloss value of 0.0104. These architectures demonstrate better training prediction ability than others but take much time for building model.\nIn order to find the best neural net architecture for digits recognition just needs to look at the behavior of models on unknown data should be checked. Figure 11 shows the validation error rates for different architectures that are considered here. We see, the best digit\u2019s recognition results were achieved in the case of tanh activation func-\ntion. The type of stopping metric is very slightly effects on the values of the validation error but it does very much on the runtime of building model."}, {"heading": "5 Conclusions", "text": "The work carried out and the results obtained allow us to make the following conclusions as to H2O framework:\n\u2022 H2O propose the unprecedentedly fast learning curve due to the available webbased GUI, easy workflow management tools, and visualization tools for representation of data. \u2022 H2O allows the data scientists without any programming experience easily easily operate by several deep learning backends (mxnet, Caffe, TensorFlow) with various activation functions (rectifier, tahn), various parameters of neural network, stopping criteria, and convergence conditions. \u2022 H2O propose opportunities for reproducible single-threaded and non-reproducible multi-threading modes of operation for multicore CPUs and GPUs. \u2022 multi-threaded operations on CPUs give the smaller logloss values than singlethreaded operations, but the ratio of validation logloss to training logloss is much lower in comparison to multi-threaded operations on GPU, which gives the more realistic model with the lower risk of overfitting.\nIn this paper, we present the results of testing neural networks architectures on H2O platform for various activation functions, stopping metrics, and other parameters of machine learning algorithm. It was demonstrated for the use case of MNIST database of handwritten digits in single-threaded mode that blind selection of these parameters can hugely increase (by 2-3 orders) the runtime without the significant increase of precision. This result can have crucial influence for optimization of available and new machine learning methods, especially for image recognition problems.\nThis paper summarizes the activities which were started recently and described shortly in the previous papers [19-20].\nDuring the process of testing H2O, we found out that generalization performance has very strong dependence onactivation function and very slight dependence on stopping metric. The best results of recognition digits were achieved in case of using nets architecture based on tanh activation function, logloss and MSE stopping metrics.\nAcknowledgements\nThe work was partially supported by NVIDIA Research and Education Centers in National Technical University of Ukraine \"Igor Sikorsky Kyiv Polytechnic Institute\"."}], "references": [{"title": "Automatized Generation of Alphabets of Symbols", "author": ["S. Hamotskyi", "A. Rojbi", "S. Stirenko", "Yu"], "venue": "Gordienko", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2017}, {"title": "Data Mining: Practical machine learning tools and techniques", "author": ["I.H. Witten", "E. Frank", "M.A. Hall", "C.J. Pal"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "TensorFlow: A system for large-scale machine learning.12th", "author": ["M Abadi"], "venue": "USENIX Symposium on Operating Systems Design and Implementation(OSDI", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Deep Learning with H2O", "author": ["A. Candel", "V. Parmar", "E. LeDell", "A. Arora"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Dropout: A Simple Way to Prevent Neural Networks from Overfitting", "author": ["N.Srivastava"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "DCI bridge: Executing WS-PGRADE workflows in distributed computing infrastructures. In Science Gateways for Distributed Computing Infrastructures(pp. 51-67)", "author": ["M Kozlovszky"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Software review: the KNIME workflow environment and its applications in Genetic Programming and machine learning.Genetic", "author": ["S. O\u2019Hagan", "D.B. Kell"], "venue": "Programming and Evolvable", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "IMP Science Gateway: from the Portal to the Hub of Virtual Experimental Labs in e-Science and Multiscale Courses in e-Learning", "author": ["Y Gordienko"], "venue": "Concurrency and Computation: Practice and Experience,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Quantum chemical meta-workflows in MoSGrid", "author": ["S Herres-Pawlis"], "venue": "Concurrency and Computation: Practice and Experience,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "VO-compliant workflows and science gateways", "author": ["G Castelli"], "venue": "Astronomy and Computing,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "User-driven Intelligent Interface on the Basis of Multimodal Augmented Reality and Brain-Computer Interaction for People with Functional Disabilities, arXiv:1704.05915v2 (submitted to Future of Information and Communication Conference, 2018)", "author": ["S.Stirenko"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2017}, {"title": "Augmented Coaching Ecosystem for Non-obtrusive Adaptive Personalized Elderly Care on the Basis of Cloud-Fog-Dew Computing Paradigm", "author": ["Yu.Gordienko"], "venue": "40th Int. Conv. Inform. and Communic. Technology, Electronics and Microelectronics (MIPRO)", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2017}, {"title": "Software Frameworks for Deep Learning at Scale", "author": ["James Fox", "Yiming Zou", "Judy Qiu"], "venue": "Internal Indiana University Technical Report", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "The MNIST database of handwritten digits.URL: http://yann.lecun.com/exdb/mnist", "author": ["Y. LeCun", "C. Cortes", "C.J. Burges"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1998}, {"title": "Comparative Analysis of Open Source Frameworks for Machine Learning with Use Case in Single-Threaded and Multi-Threaded Modes, IEEE XII International Scientific and Technical Conference on Computer Sciences and Information Technologies (CSIT 2017), Lviv, Ukraine", "author": ["Yuriy Kochura", "Sergii Stirenko", "AnisRojbi", "Oleg Alienin", "Michail Novotarskiy", "Yuri Gordienko"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2017}, {"title": "Comparative Performance Analysis of NeuralNetworks Architectures on H2O Platform for Various Activation Functions", "author": ["Yuriy Kochura", "Sergii Stirenko", "Yuri Gordienko"], "venue": "IEEE International Young Scientists Forum on Applied Physics and Engineering", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2017}], "referenceMentions": [{"referenceID": 0, "context": "Nowadays, machine learning (ML) has advanced many fields like pedestrian detection, object recognition, visual-semantic embedding, language identification, acoustic modeling in speech recognition, video classification, fatigue estimation [1], generation of alphabet of symbols for multimodal human-computer interfaces [2], etc.", "startOffset": 318, "endOffset": 321}, {"referenceID": 1, "context": "computational resources for training such models [3].", "startOffset": 49, "endOffset": 52}, {"referenceID": 2, "context": "TensorFlow is an open source software library for numerical computation was originally developed by researchers and engineers working on the Google Brain Team within Google\u2019s Machine Intelligence research organization [5] for the purposes of conducting machine learning and deep neural networks research.", "startOffset": 218, "endOffset": 221}, {"referenceID": 3, "context": "H2O software is built on Java, Python, and R with a purpose to optimize machine learning for Big Data [6].", "startOffset": 102, "endOffset": 105}, {"referenceID": 4, "context": "Figure 2 demonstrate the difference between standard neural net and neural net after applying dropout [8].", "startOffset": 102, "endOffset": 105}, {"referenceID": 5, "context": "The examples of their implementations (like WSPGRADE/gUSE [9], KNIME [10], etc.", "startOffset": 58, "endOffset": 61}, {"referenceID": 6, "context": "The examples of their implementations (like WSPGRADE/gUSE [9], KNIME [10], etc.", "startOffset": 69, "endOffset": 73}, {"referenceID": 7, "context": ") and applications in physics [11], chemistry [12], astronomy [13], brain-computing [14], eHealth [15] can be found elsewhere.", "startOffset": 30, "endOffset": 34}, {"referenceID": 8, "context": ") and applications in physics [11], chemistry [12], astronomy [13], brain-computing [14], eHealth [15] can be found elsewhere.", "startOffset": 46, "endOffset": 50}, {"referenceID": 9, "context": ") and applications in physics [11], chemistry [12], astronomy [13], brain-computing [14], eHealth [15] can be found elsewhere.", "startOffset": 62, "endOffset": 66}, {"referenceID": 10, "context": ") and applications in physics [11], chemistry [12], astronomy [13], brain-computing [14], eHealth [15] can be found elsewhere.", "startOffset": 84, "endOffset": 88}, {"referenceID": 11, "context": ") and applications in physics [11], chemistry [12], astronomy [13], brain-computing [14], eHealth [15] can be found elsewhere.", "startOffset": 98, "endOffset": 102}, {"referenceID": 12, "context": "The performance of the mentioned frameworks was a topic of many investigations performed by developers of these frameworks and independent end users [16].", "startOffset": 149, "endOffset": 153}, {"referenceID": 13, "context": "3) from the publicly available MNIST data set for machine learning methods [18].", "startOffset": 75, "endOffset": 79}, {"referenceID": 14, "context": "Investigations of influence of some parameters were started recently and described shortly in our previous papers [19-20].", "startOffset": 114, "endOffset": 121}, {"referenceID": 15, "context": "Investigations of influence of some parameters were started recently and described shortly in our previous papers [19-20].", "startOffset": 114, "endOffset": 121}, {"referenceID": 14, "context": "This paper summarizes the activities which were started recently and described shortly in the previous papers [19-20].", "startOffset": 110, "endOffset": 117}, {"referenceID": 15, "context": "This paper summarizes the activities which were started recently and described shortly in the previous papers [19-20].", "startOffset": 110, "endOffset": 117}], "year": 2017, "abstractText": "The basic features of some of the most versatile and popular open source frameworks for machine learning (TensorFlow, Deep Learning4j, and H2O) are considered and compared. Their comparative analysis was performed and conclusions were made as to the advantages and disadvantages of these platforms. The performance tests for the de facto standard MNIST data set were carried out on H2O framework for deep learning algorithms designed for CPU and GPU platforms for single-threaded and multithreaded modes of operation Also, we present the results of testingneural networks architectures on H2O platform for variousactivation functions, stopping metrics, and other parameters ofmachine learning algorithm. It was demonstrated for the usecase of MNIST database of handwritten digits in single-threadedmode that blind selection of these parameters can hugely increase (by 2-3 orders) the runtime without the significant increase ofprecision. This result can have crucial influence for optimizationof available and new machine learning methods, especially forimage recognition problems.", "creator": "Acrobat PDFMaker 10.1 \u0434\u043b\u044f Word"}}}